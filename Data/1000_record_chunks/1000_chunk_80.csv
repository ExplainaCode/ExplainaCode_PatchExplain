record_number,buggy_code,fixed_code,code_similarity
79001,"public void setEnabled(boolean bState){
  boolean bEnableUI=true;
  if (this.bVisibilityEnabled) {
    cbVisible.setEnabled(bState);
    bEnableUI=cbVisible.getSelection();
  }
  if (this.bPositionEnabled) {
    lblPosition.setEnabled(bState & bEnableUI);
    cmbPosition.setEnabled(bState & bEnableUI);
  }
  lblFont.setEnabled(bState & bEnableUI);
  fdcFont.setEnabled(bState & bEnableUI);
  lblFill.setEnabled(bState & bEnableUI);
  fccBackground.setEnabled(bState & bEnableUI);
  if (this.bShadowEnabled) {
    lblShadow.setEnabled(bState & bEnableUI);
    fccShadow.setEnabled(bState & bEnableUI);
  }
  if (this.bInsetsEnabled) {
    icInsets.setEnabled(bState & bEnableUI);
  }
  liacOutline.setEnabled(bState & bEnableUI);
  grpOutline.setEnabled(bState & bEnableUI);
  this.bEnabled=bState;
}","public void setEnabled(boolean bState){
  boolean bEnableUI=true;
  if (this.bVisibilityEnabled) {
    bEnableUI=cbVisible.getSelection();
  }
  if (this.bPositionEnabled) {
    lblPosition.setEnabled(bState & bEnableUI);
    cmbPosition.setEnabled(bState & bEnableUI);
  }
  lblFont.setEnabled(bState & bEnableUI);
  fdcFont.setEnabled(bState & bEnableUI);
  lblFill.setEnabled(bState & bEnableUI);
  fccBackground.setEnabled(bState & bEnableUI);
  if (this.bShadowEnabled) {
    lblShadow.setEnabled(bState & bEnableUI);
    fccShadow.setEnabled(bState & bEnableUI);
  }
  if (this.bInsetsEnabled) {
    icInsets.setEnabled(bState & bEnableUI);
  }
  liacOutline.setEnabled(bState & bEnableUI);
  grpOutline.setEnabled(bState & bEnableUI);
  this.bEnabled=bState;
}",0.9783163265306124
79002,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(BarChart.TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
        ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && getDimensionFor(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).setUnitSpacing(50);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(BarChart.TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
        ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && getDimensionFor(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).setUnitSpacing(50);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
  }
  return currentChart;
}",0.990784527707045
79003,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=AreaSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((AreaSeries)valueSeries).getMarker().setVisible(false);
    ((AreaSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=AreaSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((AreaSeries)valueSeries).getMarker().setVisible(false);
    ((AreaSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=AreaSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((AreaSeries)valueSeries).getMarker().setVisible(false);
    ((AreaSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
    ((AreaSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=AreaSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((AreaSeries)valueSeries).getMarker().setVisible(false);
    ((AreaSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=AreaSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((AreaSeries)valueSeries).getMarker().setVisible(false);
    ((AreaSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
    ((AreaSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=AreaSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((AreaSeries)valueSeries).getMarker().setVisible(false);
    ((AreaSeries)valueSeries).getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
    ((AreaSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}",0.9953917050691244
79004,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(LineChart.TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
        ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && getDimensionFor(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).setUnitSpacing(50);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(LineChart.TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
        ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && getDimensionFor(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).setUnitSpacing(50);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
  }
  return currentChart;
}",0.9907867620317614
79005,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=BarSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    valueSeries.setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=BarSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    valueSeries.setStacked(true);
    ((BarSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=BarSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((BarSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=BarSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    valueSeries.setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=BarSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    valueSeries.setStacked(true);
    ((BarSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=BarSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((BarSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}",0.994955033998684
79006,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(BarChart.TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
        ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && getDimensionFor(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).setUnitSpacing(50);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(BarChart.TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
        ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && getDimensionFor(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).setUnitSpacing(50);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
  }
  return currentChart;
}",0.990784527707045
79007,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=LineSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((LineSeries)valueSeries).getMarker().setVisible(true);
    ((LineSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=LineSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((LineSeries)valueSeries).getMarker().setVisible(true);
    ((LineSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=LineSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((LineSeries)valueSeries).getMarker().setVisible(true);
    ((LineSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=LineSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((LineSeries)valueSeries).getMarker().setVisible(true);
    ((LineSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setPercent(true);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=LineSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((LineSeries)valueSeries).getMarker().setVisible(true);
    ((LineSeries)valueSeries).setStacked(true);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
 else   if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    SeriesDefinition sdY=SeriesDefinitionImpl.create();
    sdY.getSeriesPalette().update(0);
    Series valueSeries=LineSeriesImpl.create();
    valueSeries.getLabel().setVisible(true);
    ((LineSeries)valueSeries).getMarker().setVisible(true);
    ((LineSeries)valueSeries).setStacked(false);
    sdY.getSeries().add(valueSeries);
    ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  }
  if (sDimension.equals(THREE_DIMENSION_TYPE)) {
    newChart.setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    newChart.setUnitSpacing(50);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    newChart.getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    newChart.getPrimaryOrthogonalAxis(newChart.getPrimaryBaseAxes()[0]).getTitle().getCaption().getFont().setRotation(0);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().update(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
  }
  addSampleData(newChart);
  return newChart;
}",0.9951312447078748
79008,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if (currentChart instanceof ChartWithAxes) {
    currentChart=DialChartImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (!currentChart.getType().equals(LineChart.TYPE_LITERAL) && !currentChart.getType().equals(PieChart.TYPE_LITERAL) && !currentChart.getType().equals(BarChart.TYPE_LITERAL)&& !currentChart.getType().equals(AreaChart.TYPE_LITERAL)) {
      currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    }
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    EList axesOrthogonal=((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getAssociatedAxes();
    for (int i=0; i < axesOrthogonal.size(); i++) {
      EList osd=((Axis)axesOrthogonal.get(i)).getSeriesDefinitions();
      for (int j=0; j < osd.size(); j++) {
        SeriesDefinition sd=(SeriesDefinition)osd.get(j);
        Series series=sd.getDesignTimeSeries();
        sd.getSeries().clear();
        sd.getSeries().add(getConvertedSeries(series));
        vOSD.add(sd);
      }
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(""String_Node_Str""));
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=DialChartImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(""String_Node_Str""));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      Series series;
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if (currentChart instanceof ChartWithAxes) {
    currentChart=DialChartImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (!currentChart.getType().equals(LineChart.TYPE_LITERAL) && !currentChart.getType().equals(PieChart.TYPE_LITERAL) && !currentChart.getType().equals(BarChart.TYPE_LITERAL)&& !currentChart.getType().equals(AreaChart.TYPE_LITERAL)) {
      currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    }
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    EList axesOrthogonal=((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getAssociatedAxes();
    for (int i=0; i < axesOrthogonal.size(); i++) {
      EList osd=((Axis)axesOrthogonal.get(i)).getSeriesDefinitions();
      for (int j=0; j < osd.size(); j++) {
        SeriesDefinition sd=(SeriesDefinition)osd.get(j);
        Series series=sd.getDesignTimeSeries();
        sd.getSeries().clear();
        sd.getSeries().add(getConvertedSeries(series));
        vOSD.add(sd);
      }
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(""String_Node_Str""));
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=DialChartImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      ((DialChart)currentChart).setDialSuperimposition(sNewSubType.equals(""String_Node_Str""));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      Series series;
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.9817614590832734
79009,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  DialChart newChart=null;
  if (currentChart != null) {
    newChart=(DialChart)getConvertedChart(currentChart,sSubType,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=(DialChart)DialChartImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  newChart.setDialSuperimposition(sSubType.equals(""String_Node_Str""));
  newChart.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  newChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().update(0);
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getQuery().setDefinition(""String_Node_Str"");
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  DialSeries valueSeries=(DialSeries)DialSeriesImpl.create();
  valueSeries.setSeriesIdentifier(""String_Node_Str"");
  sdY.getSeries().add(valueSeries);
  sdX.getSeriesDefinitions().add(sdY);
  newChart.getSeriesDefinitions().add(sdX);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  DialChart newChart=null;
  if (currentChart != null) {
    newChart=(DialChart)getConvertedChart(currentChart,sSubType,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=(DialChart)DialChartImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  newChart.setDialSuperimposition(sSubType.equals(""String_Node_Str""));
  newChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().update(0);
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getQuery().setDefinition(""String_Node_Str"");
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  DialSeries valueSeries=(DialSeries)DialSeriesImpl.create();
  valueSeries.setSeriesIdentifier(""String_Node_Str"");
  sdY.getSeries().add(valueSeries);
  sdX.getSeriesDefinitions().add(sdY);
  newChart.getSeriesDefinitions().add(sdX);
  addSampleData(newChart);
  return newChart;
}",0.937878787878788
79010,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (!currentChart.getType().equals(LineChart.TYPE_LITERAL) && !currentChart.getType().equals(BarChart.TYPE_LITERAL) && !currentChart.getType().equals(AreaChart.TYPE_LITERAL)) {
      currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    }
    currentChart.setScript(helperModel.getScript());
    if (helperModel.isSetSeriesThickness()) {
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    }
 else {
      currentChart.setSeriesThickness(15);
    }
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    EList axesOrthogonal=((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getAssociatedAxes();
    for (int i=0; i < axesOrthogonal.size(); i++) {
      EList osd=((Axis)axesOrthogonal.get(i)).getSeriesDefinitions();
      for (int j=0; j < osd.size(); j++) {
        SeriesDefinition sd=(SeriesDefinition)osd.get(j);
        Series series=sd.getDesignTimeSeries();
        sd.getSeries().clear();
        sd.getSeries().add(getConvertedSeries(series));
        vOSD.add(sd);
      }
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
      if (!currentChart.isSetSeriesThickness()) {
        currentChart.setSeriesThickness(15);
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
      currentChart.setUnits(helperModel.getUnits());
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().addAll(((ChartWithoutAxes)helperModel).getSeriesDefinitions());
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      Series series;
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (!currentChart.getType().equals(LineChart.TYPE_LITERAL) && !currentChart.getType().equals(BarChart.TYPE_LITERAL) && !currentChart.getType().equals(AreaChart.TYPE_LITERAL)) {
      currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    }
    currentChart.setScript(helperModel.getScript());
    if (helperModel.isSetSeriesThickness()) {
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    }
 else {
      currentChart.setSeriesThickness(15);
    }
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector vOSD=new Vector();
    EList axesOrthogonal=((Axis)((ChartWithAxes)helperModel).getAxes().get(0)).getAssociatedAxes();
    for (int i=0; i < axesOrthogonal.size(); i++) {
      EList osd=((Axis)axesOrthogonal.get(i)).getSeriesDefinitions();
      for (int j=0; j < osd.size(); j++) {
        SeriesDefinition sd=(SeriesDefinition)osd.get(j);
        Series series=sd.getDesignTimeSeries();
        sd.getSeries().clear();
        sd.getSeries().add(getConvertedSeries(series));
        vOSD.add(sd);
      }
    }
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    ((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
      if (!currentChart.isSetSeriesThickness()) {
        currentChart.setSeriesThickness(15);
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setSeriesThickness(helperModel.getSeriesThickness());
      currentChart.setUnits(helperModel.getUnits());
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().addAll(((ChartWithoutAxes)helperModel).getSeriesDefinitions());
      EList seriesdefinitions=((SeriesDefinition)((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      Series series;
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.CATEGORIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.9823214701093278
79011,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithoutAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithoutAxes)getConvertedChart(currentChart,sSubType,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithoutAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  if (newChart.getDimension().equals(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    newChart.setSeriesThickness(15);
  }
  newChart.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().update(0);
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getQuery().setDefinition(""String_Node_Str"");
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  Series valueSeries=PieSeriesImpl.create();
  valueSeries.getLabel().setVisible(true);
  valueSeries.setSeriesIdentifier(""String_Node_Str"");
  ((PieSeries)valueSeries).getTitle().getCaption().setValue(""String_Node_Str"");
  ((PieSeries)valueSeries).setStacked(false);
  ((PieSeries)valueSeries).setExplosion(0);
  sdY.getSeries().add(valueSeries);
  sdX.getSeriesDefinitions().add(sdY);
  newChart.getSeriesDefinitions().add(sdX);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithoutAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithoutAxes)getConvertedChart(currentChart,sSubType,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithoutAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  if (newChart.getDimension().equals(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    newChart.setSeriesThickness(15);
  }
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().update(0);
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getQuery().setDefinition(""String_Node_Str"");
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  Series valueSeries=PieSeriesImpl.create();
  valueSeries.getLabel().setVisible(true);
  valueSeries.setSeriesIdentifier(""String_Node_Str"");
  ((PieSeries)valueSeries).getTitle().getCaption().setValue(""String_Node_Str"");
  ((PieSeries)valueSeries).setStacked(false);
  ((PieSeries)valueSeries).setExplosion(0);
  sdY.getSeries().add(valueSeries);
  sdX.getSeriesDefinitions().add(sdY);
  newChart.getSeriesDefinitions().add(sdX);
  addSampleData(newChart);
  return newChart;
}",0.7348684210526316
79012,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)) {
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),currentChart.getType().equals(StockChart.TYPE_LITERAL)));
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),false));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(LineChart.TYPE_LITERAL)) {
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),currentChart.getType().equals(StockChart.TYPE_LITERAL)));
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData(),false));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.987001881306653
79013,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(false);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series baseSeries=SeriesImpl.create();
  sdX.getSeries().add(baseSeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  Series orthogonalSeries=ScatterSeriesImpl.create();
  orthogonalSeries.getLabel().setVisible(true);
  ((ScatterSeries)orthogonalSeries).setStacked(false);
  sdY.getSeries().add(orthogonalSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    newChart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(false);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series baseSeries=SeriesImpl.create();
  sdX.getSeries().add(baseSeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  Series orthogonalSeries=ScatterSeriesImpl.create();
  orthogonalSeries.getLabel().setVisible(true);
  ((ScatterSeries)orthogonalSeries).setStacked(false);
  sdY.getSeries().add(orthogonalSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  if (sSubType.equalsIgnoreCase(""String_Node_Str"")) {
    newChart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
  addSampleData(newChart);
  return newChart;
}",0.9930220075147612
79014,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(TYPE_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(BarChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)) {
      if (!currentChart.getType().equals(TYPE_LITERAL)) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(TYPE_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9870550161812298
79015,"public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  Series valueSeries=StockSeriesImpl.create();
  valueSeries.getLabel().setVisible(true);
  sdY.getSeries().add(valueSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}","public Chart getModel(String sSubType,Orientation orientation,String sDimension,Chart currentChart){
  ChartWithAxes newChart=null;
  if (currentChart != null) {
    newChart=(ChartWithAxes)getConvertedChart(currentChart,sSubType,orientation,sDimension);
    if (newChart != null) {
      return newChart;
    }
  }
  newChart=ChartWithAxesImpl.create();
  newChart.setType(TYPE_LITERAL);
  newChart.setSubType(sSubType);
  newChart.setOrientation(orientation);
  newChart.setDimension(getDimensionFor(sDimension));
  newChart.setUnits(""String_Node_Str"");
  newChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  ((Axis)newChart.getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
  ((Axis)newChart.getAxes().get(0)).setCategoryAxis(true);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  Series categorySeries=SeriesImpl.create();
  sdX.getSeries().add(categorySeries);
  sdX.getSeriesPalette().update(0);
  ((Axis)newChart.getAxes().get(0)).getSeriesDefinitions().add(sdX);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
  SeriesDefinition sdY=SeriesDefinitionImpl.create();
  sdY.getSeriesPalette().update(0);
  Series valueSeries=StockSeriesImpl.create();
  valueSeries.getLabel().setVisible(true);
  sdY.getSeries().add(valueSeries);
  ((Axis)((Axis)newChart.getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().add(sdY);
  addSampleData(newChart);
  return newChart;
}",0.9789441562404638
79016,"/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getModule() == this.module) {
    DesignElementHandle childElement=newElement(baseElement.getElement().getElementName(),name);
    childElement.setExtends(baseElement);
    childElement.getElement().refreshStructureFromParent();
    return childElement;
  }
  Module root=baseElement.getModule();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=newElement(base.getElementName(),name);
    childElement.setExtends(base.getHandle(lib));
    childElement.getElement().refreshStructureFromParent();
    return childElement;
  }
  return null;
}","/** 
 * Creates one new element based on the given element. The new element will extends the given one. The element must be extendable.
 * @param baseElement the base element.
 * @param name the optional new element name
 * @return the handle to the new element.
 * @throws ExtendsException if the the base element is in a library that is not included in this module, or if the ""extends"" relationship is illegal
 */
public DesignElementHandle newElementFrom(DesignElementHandle baseElement,String name) throws ExtendsException {
  if (baseElement == null)   return null;
  if (baseElement.getModule() == this.module) {
    DesignElementHandle childElement=newElement(baseElement.getElement().getElementName(),name);
    childElement.setExtends(baseElement);
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  Module root=baseElement.getModule();
  if (root instanceof Library) {
    Library lib=module.getLibraryByLocation(root.getLocation());
    if (lib == null) {
      throw new ExtendsException(null,baseElement.getElement(),ExtendsException.DESIGN_EXCEPTION_PARENT_NOT_INCLUDE);
    }
    DesignElement base=lib.getElementByID(baseElement.getID());
    if (base == null || base.getDefn() != baseElement.getDefn()) {
      throw new ExtendsException(null,baseElement.getName(),ExtendsException.DESIGN_EXCEPTION_NOT_FOUND);
    }
    DesignElementHandle childElement=newElement(base.getElementName(),name);
    childElement.setExtends(base.getHandle(lib));
    childElement.getElement().refreshStructureFromParent(module);
    return childElement;
  }
  return null;
}",0.9962779156327544
79017,"/** 
 * Returns the effective column span of the given cell.
 * @param cell the cell to find
 * @return the 1-based effective column span of the given cell. 0 means thecell is in the table element but it do not show in the layout.
 */
public static int getEffectiveColumnSpan(CellHandle cell){
  LayoutSlot layoutSlot=getLayoutSlotOfCell(cell);
  int rowId=cell.getContainer().getContainerSlotHandle().findPosn(cell.getContainer());
  LayoutRow layoutRow=(LayoutRow)layoutSlot.getLayoutRow(rowId);
  int columnPosn=layoutRow.findCellColumnPos((Cell)cell.getElement());
  if (columnPosn <= 0)   return 0;
  int effectiveColumnSpan=0;
  for (int i=columnPosn - 1; i < layoutRow.getColumnCount(); i++) {
    LayoutCell layoutCell=layoutRow.getLayoutCell(i);
    if (layoutCell.getContent() != cell.getElement())     break;
    effectiveColumnSpan++;
  }
  return effectiveColumnSpan;
}","/** 
 * Returns the effective column span of the given cell.
 * @param cell the cell to find
 * @return the 1-based effective column span of the given cell. 0 means thecell is in the table element but it do not show in the layout.
 */
public static int getEffectiveColumnSpan(CellHandle cell){
  LayoutSlot layoutSlot=getLayoutSlotOfCell(cell);
  if (layoutSlot == null)   return cell.getColumnSpan();
  int rowId=cell.getContainer().getContainerSlotHandle().findPosn(cell.getContainer());
  LayoutRow layoutRow=(LayoutRow)layoutSlot.getLayoutRow(rowId);
  int columnPosn=layoutRow.findCellColumnPos((Cell)cell.getElement());
  if (columnPosn <= 0)   return 0;
  int effectiveColumnSpan=0;
  for (int i=columnPosn - 1; i < layoutRow.getColumnCount(); i++) {
    LayoutCell layoutCell=layoutRow.getLayoutCell(i);
    if (layoutCell.getContent() != cell.getElement())     break;
    effectiveColumnSpan++;
  }
  return effectiveColumnSpan;
}",0.9686985172981878
79018,"/** 
 * Copied the structure of extended element to the element itself. Local properties will all be cleared.Please note that the containment relationship is kept while property values are not copied.
 * @return <code>true</code> if the refresh action is successful.<code>false</code> othersize.
 */
public boolean refreshStructureFromParent(){
}","/** 
 * Copied the structure of extended element to the element itself. Local properties will all be cleared.Please note that the containment relationship is kept while property values are not copied.
 * @param module the module
 * @return <code>true</code> if the refresh action is successful.<code>false</code> othersize.
 */
public boolean refreshStructureFromParent(Module module){
}",0.9440654843110504
79019,"public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown) || e.getSource().equals(srTransparency)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp.equals(btnGradient) || cTmp.equals(btnCustom) || cTmp.equals(btnImage)|| (e.getSource().equals(cmpDropDown) && cTmp.equals(srTransparency))) {
      return;
    }
    if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
      bJustFocusLost=true;
    }
    cmpDropDown.getShell().dispose();
    return;
  }
}","public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown) || e.getSource().equals(srTransparency)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp != null) {
      if (cTmp.equals(btnGradient) || cTmp.equals(btnCustom) || cTmp.equals(btnImage)|| (e.getSource().equals(cmpDropDown) && cTmp.equals(srTransparency))) {
        return;
      }
      if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
        bJustFocusLost=true;
      }
    }
    cmpDropDown.getShell().dispose();
    return;
  }
}",0.9599236641221374
79020,"public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
      bJustFocusLost=true;
    }
    cmpDropDown.getShell().dispose();
  }
}","public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp != null) {
      if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
        bJustFocusLost=true;
      }
    }
    cmpDropDown.getShell().dispose();
  }
}",0.938566552901024
79021,"public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
      bJustFocusLost=true;
    }
    cmpDropDown.getShell().dispose();
  }
}","public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp != null) {
      if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
        bJustFocusLost=true;
      }
    }
    cmpDropDown.getShell().dispose();
  }
}",0.938566552901024
79022,"public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
      bJustFocusLost=true;
    }
    cmpDropDown.getShell().dispose();
  }
}","public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp != null) {
      if (cTmp.equals(cnvSelection) || cTmp.equals(btnDown)) {
        bJustFocusLost=true;
      }
    }
    cmpDropDown.getShell().dispose();
  }
}",0.938566552901024
79023,"/** 
 * Returns the embedded image name that this image refers, if the image source type is <code>IMAGE_REF_TYPE_EMBED</code>. This is not the same as   {@link DesignElementHandle#getName}of this image item.
 * @return the embedded image name, if the image source type is<code>IMAGE_REF_TYPE_EMBED</code>. Otherwise, return <code>null</code>.
 */
public String getImageName(){
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(getStringProperty(ImageItem.SOURCE_PROP))) {
    return getStringProperty(ImageItem.IMAGE_NAME_PROP);
  }
  return null;
}","/** 
 * Returns the embedded image name that this image refers, if the image source type is <code>IMAGE_REF_TYPE_EMBED</code>. This is not the same as   {@link DesignElementHandle#getName}of this image item.
 * @return the embedded image name, if the image source type is<code>IMAGE_REF_TYPE_EMBED</code>. Otherwise, return <code>null</code>.
 */
public String getImageName(){
  if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(getStringProperty(ImageItem.SOURCE_PROP))) {
    if (getElement().getLocalProperty(getModule(),IImageItemModel.IMAGE_NAME_PROP) != null) {
      return ((StructRefValue)getElement().getLocalProperty(getModule(),IImageItemModel.IMAGE_NAME_PROP)).getName();
    }
    String name=getStringProperty(IImageItemModel.IMAGE_NAME_PROP);
    if (name == null)     return null;
    Module module=getModule();
    DesignElementHandle parent=getExtends();
    while (parent != null) {
      if (parent.getElement().getLocalProperty(parent.getModule(),IImageItemModel.IMAGE_NAME_PROP) != null) {
        module=(Module)parent.getRoot().getElement();
        break;
      }
      parent=parent.getExtends();
    }
    if (module instanceof Library) {
      String namespace=((Library)module).getNamespace();
      return StringUtil.buildQualifiedReference(namespace,name);
    }
    return name;
  }
  return null;
}",0.5536368393511251
79024,"/** 
 * Returns the data set name of the dynamic list for this parameter.
 * @return the data set name of the dynamic list
 */
public String getDataSetName(){
  return getStringProperty(ScalarParameter.DATASET_NAME_PROP);
}","/** 
 * Returns the data set name of the dynamic list for this parameter.
 * @return the data set name of the dynamic list
 */
public String getDataSetName(){
  if (getElement().getLocalProperty(getModule(),ScalarParameter.DATASET_NAME_PROP) != null) {
    return ((ElementRefValue)getElement().getLocalProperty(getModule(),ScalarParameter.DATASET_NAME_PROP)).getName();
  }
  String name=getStringProperty(ScalarParameter.DATASET_NAME_PROP);
  if (name == null)   return null;
  Module module=getModule();
  DesignElementHandle parent=getExtends();
  while (parent != null) {
    if (parent.getElement().getLocalProperty(parent.getModule(),ScalarParameter.DATASET_NAME_PROP) != null) {
      module=(Module)parent.getRoot().getElement();
      break;
    }
    parent=parent.getExtends();
  }
  if (module instanceof Library) {
    String namespace=((Library)module).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,name);
  }
  return name;
}",0.3445378151260504
79025,"/** 
 * Set the value for the list limitation number. This property is used to limit the parameter display list. 
 * @param listLimit The limited number.
 * @throws SemanticException
 */
public void setListlimit(int listLimit) throws SemanticException {
  setIntProperty(IScalarParameterModel.LIST_LIMIT_PROP,listLimit);
}","/** 
 * Set the value for the list limitation number. This property is used to limit the parameter display list.
 * @param listLimit The limited number.
 * @throws SemanticException
 */
public void setListlimit(int listLimit) throws SemanticException {
  setIntProperty(IScalarParameterModel.LIST_LIMIT_PROP,listLimit);
}",0.9984447900466564
79026,"/** 
 * Validates the structure value.
 * @param module report design
 * @param targetDefn definition of target structure
 * @param target target structure
 * @return the resolved structure reference value
 * @throws PropertyValueException if the type of target structure is not that target definition.
 */
private StructRefValue validateStructValue(Module module,StructureDefn targetDefn,Structure target) throws PropertyValueException {
  if (targetDefn != target.getDefn())   throw new PropertyValueException(target.getReferencableProperty(),PropertyValueException.DESIGN_EXCEPTION_WRONG_ITEM_TYPE,PropertyType.STRUCT_REF_TYPE);
  return new StructRefValue(target);
}","/** 
 * Validates the structure value.
 * @param module report design
 * @param targetDefn definition of target structure
 * @param target target structure
 * @return the resolved structure reference value
 * @throws PropertyValueException if the type of target structure is not that target definition.
 */
private StructRefValue validateStructValue(Module module,StructureDefn targetDefn,Structure target) throws PropertyValueException {
  if (targetDefn != target.getDefn())   throw new PropertyValueException(target.getReferencableProperty(),PropertyValueException.DESIGN_EXCEPTION_WRONG_ITEM_TYPE,PropertyType.STRUCT_REF_TYPE);
  String namespace=null;
  if (module instanceof Library)   namespace=((Library)module).getNamespace();
  return new StructRefValue(namespace,target);
}",0.921595598349381
79027,"/** 
 * Validates the structure name.
 * @param module report design
 * @param targetDefn definition of target structure
 * @param name structure name
 * @return the resolved structure reference value
 * @throws PropertyValueException if the type of target structure is not that target definition, or the structure with the given name is not found.
 */
private StructRefValue validateStringValue(Module module,StructureDefn targetDefn,String name) throws PropertyValueException {
  if (StringUtil.isBlank(name))   return null;
  Structure target=getStructure(module,targetDefn,name);
  if (target == null)   return new StructRefValue(name);
  if (targetDefn != target.getDefn())   throw new PropertyValueException(target.getReferencableProperty(),PropertyValueException.DESIGN_EXCEPTION_WRONG_ITEM_TYPE,PropertyType.STRUCT_REF_TYPE);
  return new StructRefValue(target);
}","/** 
 * Validates the structure name.
 * @param module report design
 * @param targetDefn definition of target structure
 * @param name structure name
 * @return the resolved structure reference value
 * @throws PropertyValueException if the type of target structure is not that target definition, or the structure with the given name is not found.
 */
private StructRefValue validateStringValue(Module module,StructureDefn targetDefn,String name) throws PropertyValueException {
  if (StringUtil.isBlank(name))   return null;
  Structure target=getStructure(module,targetDefn,name);
  String namespace=null;
  if (module instanceof Library)   namespace=((Library)module).getNamespace();
  if (target == null)   return new StructRefValue(namespace,name);
  if (targetDefn != target.getDefn())   throw new PropertyValueException(target.getReferencableProperty(),PropertyValueException.DESIGN_EXCEPTION_WRONG_ITEM_TYPE,PropertyType.STRUCT_REF_TYPE);
  return new StructRefValue(namespace,target);
}",0.9336188436830836
79028,"/** 
 * Evaluates a IJSExpression or IConditionalExpression
 */
public static Object evalExpr(IBaseExpression expr,Context cx,Scriptable scope,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  if (expr == null) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",null);
    return null;
  }
 else   if (expr instanceof IConditionalExpression) {
    ConditionalExpression ConditionalExpr=(ConditionalExpression)expr;
    Object expression=evalExpr(ConditionalExpr.getExpression(),cx,scope,source,lineNo);
    Object Op1=evalExpr(constructValidScriptExpression(ConditionalExpr.getOperand1()),cx,scope,source,lineNo);
    Object Op2=evalExpr(constructValidScriptExpression(ConditionalExpr.getOperand2()),cx,scope,source,lineNo);
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",evalConditionalExpr(expression,ConditionalExpr.getOperator(),Op1,Op2));
    return evalConditionalExpr(expression,ConditionalExpr.getOperator(),Op1,Op2);
  }
 else {
    IScriptExpression jsExpr=(IScriptExpression)expr;
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",evaluateJSAsExpr(cx,scope,jsExpr.getText(),source,lineNo));
    if (jsExpr.getText() != null && jsExpr.getHandle() != null)     return ((CompiledExpression)jsExpr.getHandle()).evaluate(cx,scope);
    return evaluateJSAsExpr(cx,scope,jsExpr.getText(),source,lineNo);
  }
}","/** 
 * Evaluates a IJSExpression or IConditionalExpression
 */
public static Object evalExpr(IBaseExpression expr,Context cx,Scriptable scope,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  if (expr == null) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",null);
    return null;
  }
 else   if (expr instanceof IConditionalExpression) {
    ConditionalExpression ConditionalExpr=(ConditionalExpression)expr;
    Object expression=evalExpr(ConditionalExpr.getExpression(),cx,scope,source,lineNo);
    Object Op1=evalExpr(constructValidScriptExpression(ConditionalExpr.getOperand1()),cx,scope,source,lineNo);
    Object Op2=evalExpr(constructValidScriptExpression(ConditionalExpr.getOperand2()),cx,scope,source,lineNo);
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",evalConditionalExpr(expression,ConditionalExpr.getOperator(),Op1,Op2));
    return evalConditionalExpr(expression,ConditionalExpr.getOperator(),Op1,Op2);
  }
 else {
    IScriptExpression jsExpr=(IScriptExpression)expr;
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",evaluateJSAsExpr(cx,scope,jsExpr.getText(),source,lineNo));
    if (jsExpr.getText() != null && jsExpr.getHandle() != null)     return convertNativeObjToJavaObj(((CompiledExpression)jsExpr.getHandle()).evaluate(cx,scope));
    return evaluateJSAsExpr(cx,scope,jsExpr.getText(),source,lineNo);
  }
}",0.992107570885706
79029,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (!canDrop(array[i]))       return false;
    }
    return true;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && (handle instanceof ListHandle || handle instanceof ListGroupHandle);
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0;
  }
  return source instanceof ReportElementHandle && !(source instanceof MasterPageHandle);
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && (handle instanceof ListHandle || handle instanceof ListGroupHandle);
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0;
  }
  return source instanceof ReportElementHandle && !(source instanceof MasterPageHandle);
}",0.9939148073022313
79030,"private void placeComponents(){
  GridLayout glContent=new GridLayout(2,true);
  glContent.verticalSpacing=0;
  glContent.horizontalSpacing=10;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  this.setLayout(glContent);
  cmpContent=new Composite(this,SWT.NONE);
  GridData gdCMPContent=new GridData(GridData.FILL_HORIZONTAL);
  cmpContent.setLayoutData(gdCMPContent);
  cmpContent.setLayout(new GridLayout(2,false));
  Label lblRadius=new Label(cmpContent,SWT.NONE);
  GridData gdLBLRadius=new GridData(GridData.HORIZONTAL_ALIGN_END);
  lblRadius.setLayoutData(gdLBLRadius);
  lblRadius.setText(Messages.getString(""String_Node_Str""));
  txtRadius=new TextEditorComposite(cmpContent,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTRadius=new GridData(GridData.FILL_HORIZONTAL);
  txtRadius.setText(String.valueOf(series.getDial().getRadius()));
  txtRadius.setLayoutData(gdTXTRadius);
  txtRadius.addListener(this);
  Label lblStartAngle=new Label(cmpContent,SWT.NONE);
  GridData gdLBLStartAngle=new GridData(GridData.HORIZONTAL_ALIGN_END);
  lblStartAngle.setLayoutData(gdLBLStartAngle);
  lblStartAngle.setText(Messages.getString(""String_Node_Str""));
  iscStartAngle=new IntegerSpinControl(cmpContent,SWT.NONE,(int)((DialSeries)series).getDial().getStartAngle());
  GridData gdISCStartAngle=new GridData(GridData.FILL_HORIZONTAL);
  iscStartAngle.setLayoutData(gdISCStartAngle);
  iscStartAngle.setValue((int)(series.getDial().getStartAngle()));
  iscStartAngle.setMinimum(0);
  iscStartAngle.setMaximum(180);
  iscStartAngle.addListener(this);
  Label lblStopAngle=new Label(cmpContent,SWT.NONE);
  GridData gdLBLStopAngle=new GridData(GridData.HORIZONTAL_ALIGN_END);
  lblStopAngle.setLayoutData(gdLBLStopAngle);
  lblStopAngle.setText(Messages.getString(""String_Node_Str""));
  iscStopAngle=new IntegerSpinControl(cmpContent,SWT.NONE,(int)((DialSeries)series).getDial().getStopAngle());
  GridData gdISCStopAngle=new GridData(GridData.FILL_HORIZONTAL);
  iscStopAngle.setLayoutData(gdISCStopAngle);
  iscStopAngle.setValue((int)(series.getDial().getStopAngle()));
  iscStopAngle.setMinimum(0);
  iscStopAngle.setMaximum(360);
  iscStopAngle.addListener(this);
  cmpButton=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPButton=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButton.horizontalSpan=2;
  cmpButton.setLayoutData(gdCMPButton);
  cmpButton.setLayout(new GridLayout(2,true));
  btnTicks=new Button(cmpButton,SWT.PUSH);
  GridData gdBTNTicks=new GridData(GridData.FILL_HORIZONTAL);
  btnTicks.setLayoutData(gdBTNTicks);
  btnTicks.setText(Messages.getString(""String_Node_Str""));
  btnTicks.addSelectionListener(this);
  btnScale=new Button(cmpButton,SWT.PUSH);
  GridData gdBTNScale=new GridData(GridData.FILL_HORIZONTAL);
  btnScale.setLayoutData(gdBTNScale);
  btnScale.setText(Messages.getString(""String_Node_Str""));
  btnScale.addSelectionListener(this);
  GridLayout glNeedle=new GridLayout(1,true);
  glNeedle.verticalSpacing=0;
  glNeedle.marginLeft=5;
  glNeedle.marginRight=10;
  glNeedle.marginHeight=0;
  grpNeedle=new Group(this,SWT.NONE);
  GridData gdGRPNeedle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  gdGRPNeedle.heightHint=93;
  grpNeedle.setLayoutData(gdGRPNeedle);
  grpNeedle.setText(Messages.getString(""String_Node_Str""));
  grpNeedle.setLayout(glNeedle);
  liacNeedle=new LineAttributesComposite(grpNeedle,SWT.NONE,series.getNeedle().getLineAttributes(),true,true,false,false);
  GridData gdLIACNeedle=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACNeedle.horizontalIndent=24;
  liacNeedle.setLayoutData(gdLIACNeedle);
  liacNeedle.addListener(this);
  cmbHeadStyle=new HeadStyleAttributeComposite(grpNeedle,SWT.NONE,series.getNeedle().getDecorator());
  GridData gdCMBHeadStyle=new GridData(GridData.FILL_HORIZONTAL);
  cmbHeadStyle.setLayoutData(gdCMBHeadStyle);
  cmbHeadStyle.addListener(this);
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(2,true);
  glContent.verticalSpacing=0;
  glContent.horizontalSpacing=10;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  this.setLayout(glContent);
  cmpContent=new Composite(this,SWT.NONE);
  GridData gdCMPContent=new GridData(GridData.FILL_HORIZONTAL);
  cmpContent.setLayoutData(gdCMPContent);
  cmpContent.setLayout(new GridLayout(2,false));
  Label lblRadius=new Label(cmpContent,SWT.NONE);
  GridData gdLBLRadius=new GridData(GridData.HORIZONTAL_ALIGN_END);
  lblRadius.setLayoutData(gdLBLRadius);
  lblRadius.setText(Messages.getString(""String_Node_Str""));
  txtRadius=new TextEditorComposite(cmpContent,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTRadius=new GridData(GridData.FILL_HORIZONTAL);
  txtRadius.setText(String.valueOf(series.getDial().getRadius()));
  txtRadius.setLayoutData(gdTXTRadius);
  txtRadius.addListener(this);
  Label lblStartAngle=new Label(cmpContent,SWT.NONE);
  GridData gdLBLStartAngle=new GridData(GridData.HORIZONTAL_ALIGN_END);
  lblStartAngle.setLayoutData(gdLBLStartAngle);
  lblStartAngle.setText(Messages.getString(""String_Node_Str""));
  iscStartAngle=new IntegerSpinControl(cmpContent,SWT.NONE,(int)((DialSeries)series).getDial().getStartAngle());
  GridData gdISCStartAngle=new GridData(GridData.FILL_HORIZONTAL);
  iscStartAngle.setLayoutData(gdISCStartAngle);
  iscStartAngle.setValue((int)(series.getDial().getStartAngle()));
  iscStartAngle.setMinimum(0);
  iscStartAngle.setMaximum(180);
  iscStartAngle.addListener(this);
  Label lblStopAngle=new Label(cmpContent,SWT.NONE);
  GridData gdLBLStopAngle=new GridData(GridData.HORIZONTAL_ALIGN_END);
  lblStopAngle.setLayoutData(gdLBLStopAngle);
  lblStopAngle.setText(Messages.getString(""String_Node_Str""));
  iscStopAngle=new IntegerSpinControl(cmpContent,SWT.NONE,(int)((DialSeries)series).getDial().getStopAngle());
  GridData gdISCStopAngle=new GridData(GridData.FILL_HORIZONTAL);
  iscStopAngle.setLayoutData(gdISCStopAngle);
  iscStopAngle.setValue((int)(series.getDial().getStopAngle()));
  iscStopAngle.setMinimum(0);
  iscStopAngle.setMaximum(360);
  iscStopAngle.addListener(this);
  cmpButton=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPButton=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButton.horizontalSpan=2;
  cmpButton.setLayoutData(gdCMPButton);
  cmpButton.setLayout(new GridLayout(2,true));
  btnTicks=new Button(cmpButton,SWT.PUSH);
  GridData gdBTNTicks=new GridData(GridData.FILL_HORIZONTAL);
  btnTicks.setLayoutData(gdBTNTicks);
  btnTicks.setText(Messages.getString(""String_Node_Str""));
  btnTicks.addSelectionListener(this);
  btnScale=new Button(cmpButton,SWT.PUSH);
  GridData gdBTNScale=new GridData(GridData.FILL_HORIZONTAL);
  btnScale.setLayoutData(gdBTNScale);
  btnScale.setText(Messages.getString(""String_Node_Str""));
  btnScale.addSelectionListener(this);
  GridLayout glNeedle=new GridLayout(1,true);
  glNeedle.verticalSpacing=0;
  glNeedle.marginWidth=10;
  glNeedle.marginHeight=0;
  grpNeedle=new Group(this,SWT.NONE);
  GridData gdGRPNeedle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  gdGRPNeedle.heightHint=93;
  grpNeedle.setLayoutData(gdGRPNeedle);
  grpNeedle.setText(Messages.getString(""String_Node_Str""));
  grpNeedle.setLayout(glNeedle);
  liacNeedle=new LineAttributesComposite(grpNeedle,SWT.NONE,series.getNeedle().getLineAttributes(),true,true,false,false);
  GridData gdLIACNeedle=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACNeedle.horizontalIndent=24;
  liacNeedle.setLayoutData(gdLIACNeedle);
  liacNeedle.addListener(this);
  cmbHeadStyle=new HeadStyleAttributeComposite(grpNeedle,SWT.NONE,series.getNeedle().getDecorator());
  GridData gdCMBHeadStyle=new GridData(GridData.FILL_HORIZONTAL);
  cmbHeadStyle.setLayoutData(gdCMBHeadStyle);
  cmbHeadStyle.addListener(this);
}",0.9957325746799432
79031,"protected void populateAvailableDbObjects(){
  if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
    if (schemaList != null && schemaList.size() > 0) {
      if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
        return;
      }
    }
 else     return;
  }
  RemoveAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    getAvailableSchema();
    if (schemaCombo.getItemCount() < 1) {
      schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
      schemaCombo.select(0);
      if (schemaList != null) {
        Iterator it=schemaList.iterator();
        while (it.hasNext())         schemaCombo.add(it.next().toString());
      }
    }
    populateTableList();
  }
 else {
    populateTableList();
  }
  if (rootNode != null) {
    selectNode(rootNode);
  }
}","protected void populateAvailableDbObjects(){
  OdaDataSourceHandle curDataSourceHandle=(OdaDataSourceHandle)((OdaDataSetHandle)getContainer().getModel()).getDataSource();
  if (curDataSourceHandle == prevDataSourceHandle) {
    if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
      if (schemaList != null && schemaList.size() > 0) {
        if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
          return;
        }
      }
 else       return;
    }
  }
  RemoveAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    getAvailableSchema();
    if (schemaCombo.getItemCount() < 1) {
      schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
      schemaCombo.select(0);
      if (schemaList != null) {
        Iterator it=schemaList.iterator();
        while (it.hasNext())         schemaCombo.add(it.next().toString());
      }
    }
    populateTableList();
  }
 else {
    populateTableList();
  }
  if (rootNode != null) {
    selectNode(rootNode);
  }
}",0.8974473802060009
79032,"private void refreshPage(){
  OdaDataSourceHandle curDataSourceHandle=(OdaDataSourceHandle)((OdaDataSetHandle)getContainer().getModel()).getDataSource();
  if (curDataSourceHandle != prevDataSourceHandle) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceHandle);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceHandle);
    prevDataSourceHandle=curDataSourceHandle;
    populateAvailableDbObjects();
  }
}","private void refreshPage(){
  OdaDataSourceHandle curDataSourceHandle=(OdaDataSourceHandle)((OdaDataSetHandle)getContainer().getModel()).getDataSource();
  if (curDataSourceHandle != prevDataSourceHandle) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceHandle);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceHandle);
    populateAvailableDbObjects();
    prevDataSourceHandle=curDataSourceHandle;
  }
}",0.9364485981308412
79033,"/** 
 * UnGroups the svg drawing instructions that represents this primitive events. 
 * @param pre primitive render event
 */
protected void ungroupPrimitive(PrimitiveRenderEvent pre){
  SVGGraphics2D svg_g2d=(SVGGraphics2D)_g2d;
  final StructureSource src=isSeries((StructureSource)pre.getSource());
  if (src != null) {
    svg_g2d.popParent();
  }
}","/** 
 * UnGroups the svg drawing instructions that represents this primitive events. 
 * @param pre primitive render event
 */
protected void ungroupPrimitive(PrimitiveRenderEvent pre){
  SVGGraphics2D svg_g2d=(SVGGraphics2D)_g2d;
  if (pre.getSource() instanceof StructureSource) {
    final StructureSource src=isSeries((StructureSource)pre.getSource());
    if (src != null) {
      svg_g2d.popParent();
    }
  }
}",0.917098445595855
79034,"/** 
 * Groups the svg drawing instructions that represents this primitive events.  Each group is  assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 */
protected void groupPrimitive(PrimitiveRenderEvent pre){
  SVGGraphics2D svg_g2d=(SVGGraphics2D)_g2d;
  final StructureSource src=isSeries((StructureSource)pre.getSource());
  if (src != null) {
    try {
      Series seDT=findDesignTimeSeries((Series)src.getSource());
      String id=Integer.toString(pre.hashCode());
      List components=(List)componentPrimitives.get(seDT);
      if (components == null) {
        components=new ArrayList();
        componentPrimitives.put(seDT,components);
      }
      String idTemp=id;
      int counter=1;
      while (components.contains(idTemp)) {
        idTemp=id + ""String_Node_Str"" + counter;
        counter++;
      }
      components.add(idTemp);
      Element primGroup=svg_g2d.createElement(""String_Node_Str"");
      svg_g2d.pushParent(primGroup);
      primGroup.setAttribute(""String_Node_Str"",seDT.hashCode() + ""String_Node_Str"" + idTemp);
      primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    ChartException e) {
      logger.log(e);
      return;
    }
  }
}","/** 
 * Groups the svg drawing instructions that represents this primitive events.  Each group is  assigned an id that identifies the source object of the primitive event
 * @param pre primitive render event
 */
protected void groupPrimitive(PrimitiveRenderEvent pre){
  SVGGraphics2D svg_g2d=(SVGGraphics2D)_g2d;
  if (pre.getSource() instanceof StructureSource) {
    final StructureSource src=isSeries((StructureSource)pre.getSource());
    if (src != null) {
      try {
        Series seDT=findDesignTimeSeries((Series)src.getSource());
        String id=Integer.toString(pre.hashCode());
        List components=(List)componentPrimitives.get(seDT);
        if (components == null) {
          components=new ArrayList();
          componentPrimitives.put(seDT,components);
        }
        String idTemp=id;
        int counter=1;
        while (components.contains(idTemp)) {
          idTemp=id + ""String_Node_Str"" + counter;
          counter++;
        }
        components.add(idTemp);
        Element primGroup=svg_g2d.createElement(""String_Node_Str"");
        svg_g2d.pushParent(primGroup);
        primGroup.setAttribute(""String_Node_Str"",seDT.hashCode() + ""String_Node_Str"" + idTemp);
        primGroup.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      ChartException e) {
        logger.log(e);
        return;
      }
    }
  }
}",0.9520912547528516
79035,"/** 
 * Declares all the workbench's images, including both ""shared"" ones and internal ones.
 */
private final static void declareImages(){
  declareImage(ISharedImages.IMG_OBJS_ERROR_TSK,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_OBJ_FOLDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_COPY,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_CUT,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_UNDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_REDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_PASTE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_DELETE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_REPORT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_FILE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_QUIK_EDIT,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PERSPECTIVE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PROJECT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CELL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GRID,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LABEL,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_MASTERPAGE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_GRAPHICMASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ROW,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCALAR_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_SIMPLE_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXT,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_BODY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_MASTERPAGES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_STYLES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DETAILS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUPS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_NORMAL,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_RULER,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_ALL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_NOBORDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_MISSING_IMG,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_EXPLORER_VIEW,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SETS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SOURCES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_PARAMETERS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_DATA_TABLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_COLUMN,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_OPERATOR,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_GLOBAL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_BUILDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASOURCE,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASET,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARDPAGE_DATASETSELECTION,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_NONE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TOP_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BOTTOM_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_LEFT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_RIGHT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS_HIDE,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_REFRESH,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_AUTOTEXT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DEFAULT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATAEDIT_DLG_TITLE_BANNER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_OPEN_FILE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(""String_Node_Str"",ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
}","/** 
 * Declares all the workbench's images, including both ""shared"" ones and internal ones.
 */
private final static void declareImages(){
  declareImage(ISharedImages.IMG_OBJS_ERROR_TSK,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_OBJ_FOLDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_COPY,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_CUT,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_UNDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_REDO,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_PASTE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(ISharedImages.IMG_TOOL_DELETE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NEW_REPORT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_FILE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_QUIK_EDIT,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PERSPECTIVE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_REPORT_PROJECT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CELL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ODA_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SET,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCRIPT_DATA_SOURCE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GRID,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LABEL,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_LIST_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_MASTERPAGE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_GRAPHICMASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_CASCADING_PARAMETER_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_ROW,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_SCALAR_PARAMETER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMNET_SIMPLE_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TABLE_GROUP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ELEMENT_TEXT,ICONS_PATH + PAL_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_BODY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_MASTERPAGES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_STYLES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DETAILS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUPS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_HEADER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_GROUP_FOOTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_NORMAL,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_MASTERPAGE,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_LAYOUT_RULER,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_ALL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_BORDER_NOBORDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_MISSING_IMG,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_EXPLORER_VIEW,ICONS_PATH + EVIEW16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SETS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_DATA_SOURCES,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_NODE_PARAMETERS,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_DATA_TABLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATA_COLUMN,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_OPERATOR,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_GLOBAL,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_METHOD,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_STATIC_MEMBER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_EXPRESSION_BUILDER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASOURCE,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARD_DATASET,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_WIZARDPAGE_DATASETSELECTION,ICONS_PATH + WIZBAN_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_WIDTH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_FONT_STYLE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_UNDERLINE + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_LINE_THROUGH + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_NONE,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_FRAME,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_TOP,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BORDER_BOTTOM,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_CENTER + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_JUSTIFY + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_LEFT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TEXT_ALIGN_RIGHT + IReportGraphicConstants.DIS,ICONS_PATH + DOBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_TOP_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_BOTTOM_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_LEFT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_ATTRIBUTE_RIGHT_MARGIN,ICONS_PATH + MISC_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_PARAMETERS_HIDE,ICONS_PATH + PROGRESS_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_PREVIEW_REFRESH,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_AUTOTEXT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DEFAULT,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_DATAEDIT_DLG_TITLE_BANNER,ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
  declareImage(IReportGraphicConstants.ICON_OPEN_FILE,ICONS_PATH + ETOOL16_PATH + ""String_Node_Str"");
  declareImage(""String_Node_Str"",ICONS_PATH + OBJ16_PATH + ""String_Node_Str"");
}",0.9948509260028237
79036,"public Object[] getChildren(Object parent){
  ArrayList childrenList=new ArrayList();
  if (parent instanceof Object[]) {
    Object[] array=(Object[])parent;
    if (array instanceof Operator[]) {
      return array;
    }
    for (int i=0; i < array.length; i++) {
      Object[] children=getChildren(array[i]);
      childrenList.addAll(Arrays.asList(children));
    }
  }
 else   if (parent instanceof String) {
    if (PARAMETERS.equals(parent)) {
      childrenList.add(ALL);
    }
 else     if (ALL.equals(parent)) {
      childrenList.addAll(moduleHandle.getAllParameters());
    }
 else {
      if (DATASETS.equals(parent)) {
        childrenList.addAll(dataSetList);
        childrenList.add(0,childrenList.toArray());
      }
 else       if (BIRT_OBJECTS.equals(parent)) {
        childrenList.addAll(getClassList(false));
      }
 else       if (NATIVE_OBJECTS.equals(parent)) {
        childrenList.addAll(getClassList(true));
      }
 else       if (OPERATORS.equals(parent)) {
        childrenList.add(OPERATORS_ASSIGNMENT);
        childrenList.add(OPERATORS_COMPARISON);
        childrenList.add(OPERATORS_COMPUTATIONAL);
        childrenList.add(OPERATORS_LOGICAL);
        childrenList.add(0,childrenList.toArray());
      }
    }
  }
 else   if (parent instanceof IClassInfo) {
    IClassInfo classInfo=(IClassInfo)parent;
    for (Iterator iter=classInfo.getMembers().iterator(); iter.hasNext(); ) {
      childrenList.add(new ILocalizableInfo[]{classInfo,(IMemberInfo)iter.next()});
    }
    for (Iterator iter=classInfo.getMethods().iterator(); iter.hasNext(); ) {
      childrenList.add(new ILocalizableInfo[]{classInfo,(IMethodInfo)iter.next()});
    }
  }
 else   if (parent instanceof DataSetHandle) {
    DataSetItemModel[] models=DataSetManager.getCurrentInstance().getColumns(((DataSetHandle)parent),false);
    childrenList.addAll(Arrays.asList(models));
  }
  Object[] children=childrenList.toArray();
  if (filterList != null && !filterList.isEmpty()) {
    for (Iterator iter=filterList.iterator(); iter.hasNext(); ) {
      Object obj=iter.next();
      if (obj instanceof ExpressionFilter) {
        children=((ExpressionFilter)obj).filter(parent,children);
      }
    }
  }
  return children;
}","public Object[] getChildren(Object parent){
  ArrayList childrenList=new ArrayList();
  if (parent instanceof Object[]) {
    Object[] array=(Object[])parent;
    if (array instanceof Operator[]) {
      return array;
    }
    for (int i=0; i < array.length; i++) {
      Object[] children=getChildren(array[i]);
      childrenList.addAll(Arrays.asList(children));
    }
  }
 else   if (parent instanceof String) {
    if (PARAMETERS.equals(parent)) {
      childrenList.add(ALL);
      for (Iterator iter=moduleHandle.getAllParameters().iterator(); iter.hasNext(); ) {
        Object obj=iter.next();
        if (obj instanceof ParameterGroupHandle) {
          childrenList.add(obj);
        }
      }
    }
 else     if (ALL.equals(parent)) {
      for (Iterator iter=moduleHandle.getAllParameters().iterator(); iter.hasNext(); ) {
        Object obj=iter.next();
        if (obj instanceof ParameterHandle) {
          childrenList.add(obj);
        }
      }
    }
 else {
      if (DATASETS.equals(parent)) {
        childrenList.addAll(dataSetList);
        childrenList.add(0,childrenList.toArray());
      }
 else       if (BIRT_OBJECTS.equals(parent)) {
        childrenList.addAll(getClassList(false));
      }
 else       if (NATIVE_OBJECTS.equals(parent)) {
        childrenList.addAll(getClassList(true));
      }
 else       if (OPERATORS.equals(parent)) {
        childrenList.add(OPERATORS_ASSIGNMENT);
        childrenList.add(OPERATORS_COMPARISON);
        childrenList.add(OPERATORS_COMPUTATIONAL);
        childrenList.add(OPERATORS_LOGICAL);
        childrenList.add(0,childrenList.toArray());
      }
    }
  }
 else   if (parent instanceof IClassInfo) {
    IClassInfo classInfo=(IClassInfo)parent;
    for (Iterator iter=classInfo.getMembers().iterator(); iter.hasNext(); ) {
      childrenList.add(new ILocalizableInfo[]{classInfo,(IMemberInfo)iter.next()});
    }
    for (Iterator iter=classInfo.getMethods().iterator(); iter.hasNext(); ) {
      childrenList.add(new ILocalizableInfo[]{classInfo,(IMethodInfo)iter.next()});
    }
  }
 else   if (parent instanceof DataSetHandle) {
    DataSetItemModel[] models=DataSetManager.getCurrentInstance().getColumns(((DataSetHandle)parent),false);
    childrenList.addAll(Arrays.asList(models));
  }
 else   if (parent instanceof ParameterGroupHandle) {
    childrenList.addAll(((ParameterGroupHandle)parent).getParameters().getContents());
  }
  Object[] children=childrenList.toArray();
  if (filterList != null && !filterList.isEmpty()) {
    for (Iterator iter=filterList.iterator(); iter.hasNext(); ) {
      Object obj=iter.next();
      if (obj instanceof ExpressionFilter) {
        children=((ExpressionFilter)obj).filter(parent,children);
      }
    }
  }
  return children;
}",0.8858173076923077
79037,"public String getDisplayText(Object element){
  if (element instanceof Object[]) {
    if (element instanceof Operator[]) {
      if (element == OPERATORS_ASSIGNMENT) {
        return DISPLAY_TEXT_ASSIGNMENT;
      }
 else       if (element == OPERATORS_COMPARISON) {
        return DISPLAY_TEXT_COMPARISON;
      }
 else       if (element == OPERATORS_COMPUTATIONAL) {
        return DISPLAY_TEXT_COMPUTATIONAL;
      }
 else       if (element == OPERATORS_LOGICAL) {
        return DISPLAY_TEXT_LOGICAL;
      }
    }
 else     if (element instanceof ILocalizableInfo[]) {
      ILocalizableInfo info=((ILocalizableInfo[])element)[1];
      StringBuffer displayText=new StringBuffer(info.getName());
      if (info instanceof IMethodInfo) {
        IMethodInfo method=(IMethodInfo)info;
        displayText.append(""String_Node_Str"");
        displayText.append(""String_Node_Str"");
        displayText.append(method.getReturnType());
      }
      return displayText.toString();
    }
    return ALL;
  }
 else   if (element instanceof String) {
    return (String)element;
  }
 else   if (element instanceof Operator) {
    return ((Operator)element).symbol;
  }
 else   if (element instanceof ParameterHandle) {
    return ((ParameterHandle)element).getName();
  }
 else   if (element instanceof DataSetHandle) {
    return ((DataSetHandle)element).getName();
  }
 else   if (element instanceof DataSetItemModel) {
    return ((DataSetItemModel)element).getName();
  }
  return element.toString();
}","public String getDisplayText(Object element){
  if (element instanceof Object[]) {
    if (element instanceof Operator[]) {
      if (element == OPERATORS_ASSIGNMENT) {
        return DISPLAY_TEXT_ASSIGNMENT;
      }
 else       if (element == OPERATORS_COMPARISON) {
        return DISPLAY_TEXT_COMPARISON;
      }
 else       if (element == OPERATORS_COMPUTATIONAL) {
        return DISPLAY_TEXT_COMPUTATIONAL;
      }
 else       if (element == OPERATORS_LOGICAL) {
        return DISPLAY_TEXT_LOGICAL;
      }
    }
 else     if (element instanceof ILocalizableInfo[]) {
      ILocalizableInfo info=((ILocalizableInfo[])element)[1];
      StringBuffer displayText=new StringBuffer(info.getName());
      if (info instanceof IMethodInfo) {
        IMethodInfo method=(IMethodInfo)info;
        displayText.append(""String_Node_Str"");
        displayText.append(""String_Node_Str"");
        displayText.append(method.getReturnType());
      }
      return displayText.toString();
    }
    return ALL;
  }
 else   if (element instanceof String) {
    return (String)element;
  }
 else   if (element instanceof Operator) {
    return ((Operator)element).symbol;
  }
 else   if (element instanceof DesignElementHandle) {
    return ((DesignElementHandle)element).getName();
  }
 else   if (element instanceof DataSetItemModel) {
    return ((DataSetItemModel)element).getName();
  }
  return element.toString();
}",0.9255063508410574
79038,"public Image getImage(Object element){
  if (element instanceof Operator) {
    return IMAGE_OPERATOR;
  }
 else   if (element instanceof ILocalizableInfo[]) {
    ILocalizableInfo info=((ILocalizableInfo[])element)[1];
    if (info instanceof IMethodInfo) {
      if (((IMethodInfo)info).isStatic()) {
        return IMAGE_STATIC_METHOD;
      }
      return IMAGE_METHOD;
    }
    if (info instanceof IMemberInfo) {
      if (((IMemberInfo)info).isStatic()) {
        return IMAGE_STATIC_MEMBER;
      }
      return IMAGE_MEMBER;
    }
  }
 else   if (element instanceof DataSetItemModel) {
    return IMAGE_COLUMN;
  }
 else   if (element instanceof ParameterHandle) {
    return ReportPlatformUIImages.getImage(element);
  }
  return null;
}","public Image getImage(Object element){
  if (element instanceof Operator) {
    return IMAGE_OPERATOR;
  }
 else   if (element instanceof ILocalizableInfo[]) {
    ILocalizableInfo info=((ILocalizableInfo[])element)[1];
    if (info instanceof IMethodInfo) {
      if (((IMethodInfo)info).isStatic()) {
        return IMAGE_STATIC_METHOD;
      }
      return IMAGE_METHOD;
    }
    if (info instanceof IMemberInfo) {
      if (((IMemberInfo)info).isStatic()) {
        return IMAGE_STATIC_MEMBER;
      }
      return IMAGE_MEMBER;
    }
  }
 else   if (element instanceof DataSetItemModel) {
    return IMAGE_COLUMN;
  }
 else   if (element instanceof DesignElementHandle) {
    return ReportPlatformUIImages.getImage(element);
  }
  return null;
}",0.985313751668892
79039,"public void switchTo(String sTaskID){
  if (sCurrentActiveTask != null) {
    this.context=((ITask)availableTasks.get(sCurrentActiveTask)).getContext();
    String[] sErrors=((ITask)availableTasks.get(sCurrentActiveTask)).getErrors();
    new ErrorDialog(""String_Node_Str"",""String_Node_Str"",sErrors,new String[]{});
  }
  if (shellPopup != null && !shellPopup.isDisposed()) {
    shellPopup.close();
  }
  if (errorHints != null) {
    ((ITask)availableTasks.get(sTaskID)).setErrorHints(errorHints);
  }
  ((ITask)availableTasks.get(sTaskID)).setContext(context);
  errorHints=null;
  Control c=((ITask)availableTasks.get(sTaskID)).getUI(cmpTaskContainer);
  slTaskContainer.topControl=c;
  cmpTaskContainer.layout();
  tasklist.setActive((String)vTaskLabels.get(vTaskIDs.indexOf(sTaskID)));
  sCurrentActiveTask=sTaskID;
}","public void switchTo(String sTaskID){
  if (sCurrentActiveTask != null) {
    this.context=((ITask)availableTasks.get(sCurrentActiveTask)).getContext();
    String[] sErrors=((ITask)availableTasks.get(sCurrentActiveTask)).getErrors();
    if (sErrors != null && sErrors.length > 0) {
      new ErrorDialog(""String_Node_Str"",""String_Node_Str"",sErrors,new String[]{});
    }
  }
  if (shellPopup != null && !shellPopup.isDisposed()) {
    shellPopup.close();
  }
  if (errorHints != null) {
    ((ITask)availableTasks.get(sTaskID)).setErrorHints(errorHints);
  }
  ((ITask)availableTasks.get(sTaskID)).setContext(context);
  errorHints=null;
  Control c=((ITask)availableTasks.get(sTaskID)).getUI(cmpTaskContainer);
  slTaskContainer.topControl=c;
  cmpTaskContainer.layout();
  tasklist.setActive((String)vTaskLabels.get(vTaskIDs.indexOf(sTaskID)));
  sCurrentActiveTask=sTaskID;
}",0.9665296535525544
79040,"/** 
 * Displays the errors in a common Error Display UI mechanism. Also displayed are possible solutions to the problems. The user can also be given the option of switching to a different task where the fix needs to be made. (This is not implemented yet).
 * @param sErrors Array of error strings
 * @param sFixes Array of strings listing possible solutions to above errors
 * @param sTaskIDs Array of task IDs which the user can switch to. The appropriate task labels should be indicated in the solutions toallow users to make the connection 
 * @param context Updated IWizardContext instance...this instance will include the erroneous settings
 * @param errorHints Object array that will be passed to the target task...which can be used to indicate specific problems or to customizebehavior of the task UI
 */
public void displayError(String[] sErrors,String[] sFixes,String[] sTaskIDs,IWizardContext currentContext,Object[] hints){
  this.errorHints=hints;
  ErrorDialog dlg=new ErrorDialog(""String_Node_Str"",""String_Node_Str"",sErrors,sFixes);
  if (dlg.getOption() == ErrorDialog.OPTION_ACCEPT) {
  }
 else {
  }
}","/** 
 * Displays the errors in a common Error Display UI mechanism. Also displayed are possible solutions to the problems. The user can also be given the option of switching to a different task where the fix needs to be made. (This is not implemented yet).
 * @param sErrors Array of error strings
 * @param sFixes Array of strings listing possible solutions to above errors
 * @param sTaskIDs Array of task IDs which the user can switch to. The appropriate task labels should be indicated in the solutions toallow users to make the connection 
 * @param context Updated IWizardContext instance...this instance will include the erroneous settings
 * @param errorHints Object array that will be passed to the target task...which can be used to indicate specific problems or to customizebehavior of the task UI
 */
public void displayError(String[] sErrors,String[] sFixes,String[] sTaskIDs,IWizardContext currentContext,Object[] hints){
  if (sErrors != null && sErrors.length > 0) {
    this.errorHints=hints;
    ErrorDialog dlg=new ErrorDialog(""String_Node_Str"",""String_Node_Str"",sErrors,sFixes);
    if (dlg.getOption() == ErrorDialog.OPTION_ACCEPT) {
    }
 else {
    }
  }
}",0.973466724662897
79041,"public String getLocalizedMessage(){
  if (sResourceKey == DESIGN_EXCEPTION_SLOT_NOT_FOUND) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element),String.valueOf(slot)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_WRONG_TYPE || sResourceKey == DESIGN_EXCEPTION_DROP_FORBIDDEN) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element),element.getDefn().getSlot(slot).getName()});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_NOT_CONTAINER || sResourceKey == DESIGN_EXCEPTION_HAS_NO_CONTAINER || sResourceKey == DESIGN_EXCEPTION_MOVE_FORBIDDEN || sResourceKey == DESIGN_EXCEPTION_HAS_DESCENDENTS) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_CONTENT_NOT_FOUND) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),element.getDefn().getSlot(slot).getName(),getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_RECURSIVE) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_SLOT_IS_FULL) {
    return ModelMessages.getMessage(sResourceKey,new String[]{element.getDefn().getSlot(slot).getName(),getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_INVALID_CONTEXT_CONTAINMENT) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),element.getElementName(),element.getDefn().getSlot(slot).getName()});
  }
  return ModelMessages.getMessage(sResourceKey);
}","public String getLocalizedMessage(){
  if (sResourceKey == DESIGN_EXCEPTION_SLOT_NOT_FOUND) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element),String.valueOf(slot)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_WRONG_TYPE || sResourceKey == DESIGN_EXCEPTION_DROP_FORBIDDEN) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element),element.getDefn().getSlot(slot).getName()});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_NOT_CONTAINER || sResourceKey == DESIGN_EXCEPTION_HAS_NO_CONTAINER || sResourceKey == DESIGN_EXCEPTION_MOVE_FORBIDDEN || sResourceKey == DESIGN_EXCEPTION_HAS_DESCENDENTS) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_CONTENT_NOT_FOUND) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),element.getDefn().getSlot(slot).getName(),getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_RECURSIVE) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_SLOT_IS_FULL) {
    return ModelMessages.getMessage(sResourceKey,new String[]{element.getDefn().getSlot(slot).getName(),getElementName(element)});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_INVALID_CONTEXT_CONTAINMENT) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),element.getElementName(),element.getDefn().getSlot(slot).getName()});
  }
 else   if (sResourceKey == DESIGN_EXCEPTION_CONTENT_NAME_REQUIRED) {
    return ModelMessages.getMessage(sResourceKey,new String[]{getElementName(content),element.getElementName(),element.getDefn().getSlot(slot).getName()});
  }
  return ModelMessages.getMessage(sResourceKey);
}",0.9346961953435547
79042,"/** 
 * Loads library with the given library file name. This file name can be absolute or relative. If the library doesn't exist or fatal error occurs when opening library, one invalid library will be added into the library list of this module.
 * @param libraryFileName library file name
 * @param namespace library namespace
 * @return the loaded library
 * @throws DesignFileException if the library file has fatal error.
 */
public Library loadLibrary(String libraryFileName,String namespace) throws DesignFileException {
  if (libraries == null)   libraries=new ArrayList();
  URL url=findResource(libraryFileName,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{libraryFileName},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(libraryFileName,exceptionList);
  }
  try {
    Library library=LibraryReader.getInstance().read(session,this,url.toString(),namespace,url.openStream());
    library.setNamespace(namespace);
    return library;
  }
 catch (  IOException e) {
    DesignParserException ex=new DesignParserException(new String[]{libraryFileName},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(libraryFileName,exceptionList);
  }
}","/** 
 * Loads library with the given library file name. This file name can be absolute or relative. If the library doesn't exist or fatal error occurs when opening library, one invalid library will be added into the library list of this module.
 * @param libraryFileName library file name
 * @param namespace library namespace
 * @return the loaded library
 * @throws DesignFileException if the library file has fatal error.
 */
public Library loadLibrary(String libraryFileName,String namespace) throws DesignFileException {
  if (libraries == null)   libraries=new ArrayList();
  URL url=findResource(libraryFileName,IResourceLocator.LIBRARY);
  if (url == null) {
    DesignParserException ex=new DesignParserException(new String[]{libraryFileName},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(libraryFileName,exceptionList);
  }
  try {
    Library library=LibraryReader.getInstance().read(session,this,url.toString(),namespace,url.openStream());
    if (StringUtil.isBlank(namespace)) {
      library.setNamespace(StringUtil.extractFileName(libraryFileName));
    }
    return library;
  }
 catch (  IOException e) {
    DesignParserException ex=new DesignParserException(new String[]{libraryFileName},DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND);
    List exceptionList=new ArrayList();
    exceptionList.add(ex);
    throw new DesignFileException(libraryFileName,exceptionList);
  }
}",0.9520897043832824
79043,"/** 
 * Implementation of adding a symbol to a name space. Adds the name only if it is not null and it has container. This means that we can modify the element name as will if it's not attached on other elements, and the name is saved in name space only after the element is added to a slot of the container.
 */
private void addSymbol(){
  if (element.getName() == null)   return;
  if (element.getContainer() != null) {
    int ns=((ElementDefn)element.getDefn()).getNameSpaceID();
    getActivityStack().execute(new NameSpaceRecord(getModule(),ns,element,true));
  }
}","/** 
 * Implementation of adding a symbol to a name space. Adds the name only if it is not null and it has container. This means that we can modify the element name as will if it's not attached on other elements, and the name is saved in name space only after the element is added to a slot of the container.
 */
private void addSymbol(){
  if (element.getName() == null)   return;
  if (element instanceof StyleElement && element.getContainer() instanceof Theme)   return;
  if (element.getContainer() != null) {
    int ns=((ElementDefn)element.getDefn()).getNameSpaceID();
    DesignElement existedElement=getModule().getNameSpace(ns).getElement(element.getName());
    if (existedElement != element)     getActivityStack().execute(new NameSpaceRecord(getModule(),ns,element,true));
  }
}",0.8384728340675477
79044,"/** 
 * Checks that the given name is legal for the element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
private void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
  }
 else {
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    int ns=metaData.getNameSpaceID();
    if (!getModule().getModuleNameSpace(ns).canContain(name))     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}","/** 
 * Checks the current element name. Done when adding a newly created element where the element name is already set on the new element.
 * @param name the name to check.
 * @throws NameException if the element name is not allowed to change.
 */
public void checkName(String name) throws NameException {
  ElementDefn metaData=(ElementDefn)element.getDefn();
  if (name == null) {
    if (element.hasDerived() || element.hasReferences())     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_HAS_REFERENCES);
    if (metaData.getNameOption() == MetaDataConstants.REQUIRED_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_REQUIRED);
  }
 else {
    if (metaData.getNameOption() == MetaDataConstants.NO_NAME)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN);
    int ns=metaData.getNameSpaceID();
    if (ns == Module.STYLE_NAME_SPACE && element instanceof StyleElement && getModule() instanceof Library) {
      return;
    }
    DesignElement existedElement=getModule().getNameSpace(ns).getElement(name);
    if (existedElement != null && existedElement != element)     throw new NameException(element,name,NameException.DESIGN_EXCEPTION_DUPLICATE);
  }
}",0.8141112618724559
79045,"/** 
 * Opens a design given a stream to the design and the the file name of the design.
 * @param systemId the uri where to find the relative sources for the library. This url is treated as an absolute directory.
 * @param is the input stream to read the design
 * @return the opened report design
 * @throws DesignFileException If the file is not found, or the file contains fatal errors.
 */
public ReportDesign openDesign(URL systemId,InputStream is) throws DesignFileException {
  ReportDesign design=DesignReader.getInstance().read(this,systemId,is);
  designs.add(design);
  return design;
}","/** 
 * Opens a design given a stream to the design and the the file name of the design.
 * @param systemId the uri where to find the relative sources for the library. This url is treated as an absolute directory.
 * @param is the input stream to read the design
 * @return the opened report design
 * @throws DesignFileException If the file is not found, or the file contains fatal errors.
 */
public ReportDesign openDesign(URL systemId,InputStream is) throws DesignFileException {
  if (is == null)   throw new IllegalArgumentException(""String_Node_Str"");
  ReportDesign design=DesignReader.getInstance().read(this,systemId,is);
  designs.add(design);
  return design;
}",0.940991345397325
79046,"/** 
 * Opens a library with the given library file name.
 * @param systemId the uri where to find the relative sources for the library. This url is treated as an absolute directory.
 * @param is the input stream
 * @return the opened library
 * @throws DesignFileException If the file is not found, or the file contains fatal errors.
 */
public Library openLibrary(URL systemId,InputStream is) throws DesignFileException {
  Library library=LibraryReader.getInstance().read(this,systemId,is);
  libraries.add(library);
  return library;
}","/** 
 * Opens a library with the given library file name.
 * @param systemId the uri where to find the relative sources for the library. This url is treated as an absolute directory.
 * @param is the input stream
 * @return the opened library
 * @throws DesignFileException If the file is not found, or the file contains fatal errors.
 */
public Library openLibrary(URL systemId,InputStream is) throws DesignFileException {
  if (is == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Library library=LibraryReader.getInstance().read(this,systemId,is);
  libraries.add(library);
  return library;
}",0.9349522983521248
79047,"protected boolean isOKPressed(Object model){
  if (model instanceof IStructuredSelection) {
    for (Iterator itor=((IStructuredSelection)model).iterator(); itor.hasNext(); ) {
      Object obj=itor.next();
      if (!isOKPressed(obj)) {
        return false;
      }
    }
    return true;
  }
 else   if (model instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)model;
    if (handle instanceof ParameterGroupHandle) {
      if (((ParameterGroupHandle)handle).getParameters().getCount() > 0) {
        if (!MessageDialog.openQuestion(PlatformUI.getWorkbench().getDisplay().getActiveShell(),CONFIRM_PARAM_DELETE_TITLE,CONFIRM_PARAM_DELETE_MESSAGE)) {
          return false;
        }
      }
    }
    ArrayList referenceList=new ArrayList();
    for (Iterator itor=handle.clientsIterator(); itor.hasNext(); ) {
      referenceList.add(itor.next());
    }
    if (!referenceList.isEmpty()) {
      DeleteWarningDialog dialog=new DeleteWarningDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DLG_REFERENCE_FOUND_TITLE,referenceList);
      dialog.setPreString(DEUtil.getDisplayLabel(handle) + DLG_HAS_FOLLOWING_CLIENTS_MSG);
      dialog.setSufString(DLG_CONFIRM_MSG);
      return dialog.open() != Dialog.CANCEL;
    }
    return true;
  }
  return true;
}","protected boolean isOKPressed(Object model){
  if (model instanceof IStructuredSelection) {
    for (Iterator itor=((IStructuredSelection)model).iterator(); itor.hasNext(); ) {
      Object obj=itor.next();
      if (!isOKPressed(obj)) {
        return false;
      }
    }
    return true;
  }
 else   if (model instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)model;
    if (handle instanceof ParameterGroupHandle) {
      if (((ParameterGroupHandle)handle).getParameters().getCount() > 0) {
        if (!MessageDialog.openQuestion(PlatformUI.getWorkbench().getDisplay().getActiveShell(),CONFIRM_PARAM_DELETE_TITLE,CONFIRM_PARAM_DELETE_MESSAGE)) {
          return false;
        }
        for (Iterator iter=((ParameterGroupHandle)handle).getParameters().iterator(); iter.hasNext(); ) {
          Object obj=iter.next();
          if (obj instanceof ParameterHandle) {
            ParameterHandle parameter=(ParameterHandle)obj;
            ConfigVariable cv=parameter.getModuleHandle().findConfigVariable(parameter.getName());
            try {
              if (cv != null) {
                parameter.getModuleHandle().getPropertyHandle(ReportDesignHandle.CONFIG_VARS_PROP).removeItem(cv);
              }
            }
 catch (            SemanticException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
      }
    }
    ArrayList referenceList=new ArrayList();
    for (Iterator itor=handle.clientsIterator(); itor.hasNext(); ) {
      referenceList.add(itor.next());
    }
    if (!referenceList.isEmpty()) {
      DeleteWarningDialog dialog=new DeleteWarningDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DLG_REFERENCE_FOUND_TITLE,referenceList);
      dialog.setPreString(DEUtil.getDisplayLabel(handle) + DLG_HAS_FOLLOWING_CLIENTS_MSG);
      dialog.setSufString(DLG_CONFIRM_MSG);
      return dialog.open() != Dialog.CANCEL;
    }
    return true;
  }
  return true;
}",0.7976808056148916
79048,"/** 
 * @param groupKeyValues
 * @param columnNames
 * @param i
 * @return
 * @throws DataException
 */
private boolean groupKeyValuesEqual(Object[] groupKeyValues,String[] columnNames,int i) throws DataException {
  return (odiResult.getCurrentResult().getFieldValue(columnNames[i]) == null && groupKeyValues[i] == null) || (odiResult.getCurrentResult().getFieldValue(columnNames[i]).equals(groupKeyValues[i]));
}","/** 
 * @param groupKeyValues
 * @param columnNames
 * @param i
 * @return
 * @throws DataException
 */
private boolean groupKeyValuesEqual(Object[] groupKeyValues,String[] columnNames,int i) throws DataException {
  Object fieldValue=odiResult.getCurrentResult().getFieldValue(columnNames[i]);
  return (fieldValue == null && groupKeyValues[i] == null) || ((fieldValue != null && groupKeyValues[i] != null) && (fieldValue.equals(groupKeyValues[i])));
}",0.8027681660899654
79049,"/** 
 * The first step to work with the cascading parameters. Create the query definition, prepare and execute the query. Cache the iterator of the result set and also cache the IBaseExpression used in the prepare.
 * @param parameterGroupName -the cascading parameter group name
 */
public void evaluateQuery(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (dataCache == null)   dataCache=new HashMap();
  if (parameterGroup == null)   return;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      try {
        dataEngine.defineDataSource(ModelDteApiAdapter.getInstance().createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(ModelDteApiAdapter.getInstance().createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSet.getName());
      SlotHandle parameters=parameterGroup.getParameters();
      Iterator iter=parameters.iterator();
      if (labelMap == null)       labelMap=new HashMap();
      if (valueMap == null)       valueMap=new HashMap();
      while (iter.hasNext()) {
        Object param=iter.next();
        if (param instanceof ScalarParameterHandle) {
          String valueExpString=((ScalarParameterHandle)param).getValueExpr();
          Object valueExpObject=new ScriptExpression(valueExpString);
          valueMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),valueExpObject);
          queryDefn.getRowExpressions().add(valueExpObject);
          String labelExpString=((ScalarParameterHandle)param).getLabelExpr();
          if (labelExpString == null) {
            labelExpString=valueExpString;
          }
          Object labelExpObject=new ScriptExpression(labelExpString);
          labelMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),labelExpObject);
          queryDefn.getRowExpressions().add(labelExpObject);
          GroupDefinition groupDef=new GroupDefinition();
          groupDef.setKeyExpression(valueExpString);
          queryDefn.addGroup(groupDef);
        }
      }
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator resultIter=result.getResultIterator();
      dataCache.put(parameterGroup.getName(),resultIter);
      return;
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  dataCache.put(parameterGroup.getName(),null);
}","/** 
 * The first step to work with the cascading parameters. Create the query definition, prepare and execute the query. Cache the iterator of the result set and also cache the IBaseExpression used in the prepare.
 * @param parameterGroupName -the cascading parameter group name
 */
public void evaluateQuery(String parameterGroupName){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (dataCache == null)   dataCache=new HashMap();
  if (parameterGroup == null)   return;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      try {
        dataEngine.defineDataSource(ModelDteApiAdapter.getInstance().createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(ModelDteApiAdapter.getInstance().createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSet.getName());
      SlotHandle parameters=parameterGroup.getParameters();
      Iterator iter=parameters.iterator();
      if (labelMap == null)       labelMap=new HashMap();
      if (valueMap == null)       valueMap=new HashMap();
      while (iter.hasNext()) {
        Object param=iter.next();
        if (param instanceof ScalarParameterHandle) {
          String valueExpString=((ScalarParameterHandle)param).getValueExpr();
          Object valueExpObject=new ScriptExpression(valueExpString);
          valueMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),valueExpObject);
          queryDefn.getRowExpressions().add(valueExpObject);
          String labelExpString=((ScalarParameterHandle)param).getLabelExpr();
          if (labelExpString != null && labelExpString.length() > 0) {
            Object labelExpObject=new ScriptExpression(labelExpString);
            labelMap.put(parameterGroup.getName() + ""String_Node_Str"" + ((ScalarParameterHandle)param).getName(),labelExpObject);
            queryDefn.getRowExpressions().add(labelExpObject);
          }
          GroupDefinition groupDef=new GroupDefinition();
          groupDef.setKeyExpression(valueExpString);
          queryDefn.addGroup(groupDef);
        }
      }
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator resultIter=result.getResultIterator();
      dataCache.put(parameterGroup.getName(),resultIter);
      return;
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  dataCache.put(parameterGroup.getName(),null);
}",0.9796501249553732
79050,"/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionChoicesForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null)   return null;
  IResultIterator iter=(IResultIterator)dataCache.get(parameterGroup.getName());
  if (iter == null)   return null;
  SlotHandle slotHandle=parameterGroup.getParameters();
  assert(groupKeyValues.length < slotHandle.getCount());
  int skipLevel=groupKeyValues.length + 1;
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  int listLimit=requestedParam.getListlimit();
  String valueType=requestedParam.getDataType();
  ScriptExpression labelExpr=(ScriptExpression)labelMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ScriptExpression valueExpr=(ScriptExpression)valueMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ArrayList choices=new ArrayList();
  try {
    if (skipLevel > 1)     iter.findGroup(groupKeyValues);
    int count=0;
    while (iter.next()) {
      String label=iter.getString(labelExpr);
      Object value=iter.getValue(valueExpr);
      value=convertToType(value,valueType);
      choices.add(new SelectionChoice(label,value));
      count++;
      if ((listLimit != 0) && (count >= listLimit))       break;
      iter.skipToEnd(skipLevel);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
  return choices;
}","/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionChoicesForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null)   return null;
  IResultIterator iter=(IResultIterator)dataCache.get(parameterGroup.getName());
  if (iter == null)   return null;
  SlotHandle slotHandle=parameterGroup.getParameters();
  assert(groupKeyValues.length < slotHandle.getCount());
  int skipLevel=groupKeyValues.length + 1;
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  int listLimit=requestedParam.getListlimit();
  boolean fixedOrder=requestedParam.isFixedOrder();
  String valueType=requestedParam.getDataType();
  ScriptExpression labelExpr=(ScriptExpression)labelMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ScriptExpression valueExpr=(ScriptExpression)valueMap.get(parameterGroup.getName() + ""String_Node_Str"" + requestedParam.getName());
  ArrayList choices=new ArrayList();
  try {
    if (skipLevel > 1)     iter.findGroup(groupKeyValues);
    int count=0;
    while (iter.next()) {
      String label=(labelExpr != null ? iter.getString(labelExpr) : null);
      Object value=iter.getValue(valueExpr);
      value=convertToType(value,valueType);
      choices.add(new SelectionChoice(label,value));
      count++;
      if ((listLimit != 0) && (count >= listLimit))       break;
      iter.skipToEnd(skipLevel);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true));
  return choices;
}",0.9600144743984078
79051,"public Collection getSelectionChoice(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    String dataSetName=parameter.getDataSetName();
    String valueExpr=parameter.getValueExpr();
    String labelExpr=parameter.getLabelExpr();
    if (labelExpr == null) {
      labelExpr=valueExpr;
    }
    return createDynamicSelectionChoices(dataSetName,labelExpr,valueExpr,dataType);
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label != null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    return choices;
  }
  return null;
}","public Collection getSelectionChoice(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    String dataSetName=parameter.getDataSetName();
    String valueExpr=parameter.getValueExpr();
    String labelExpr=parameter.getLabelExpr();
    int limit=parameter.getListlimit();
    return createDynamicSelectionChoices(dataSetName,labelExpr,valueExpr,dataType,limit,fixedOrder);
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label != null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true));
    return choices;
  }
  return null;
}",0.8694083694083694
79052,"/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String dataSetName,String labelStmt,String valueStmt,String dataType){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      try {
        dataEngine.defineDataSource(ModelDteApiAdapter.getInstance().createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(ModelDteApiAdapter.getInstance().createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      ScriptExpression labelExpr=new ScriptExpression(labelStmt);
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      queryDefn.getRowExpressions().add(labelExpr);
      queryDefn.getRowExpressions().add(valueExpr);
      GroupDefinition groupDef=new GroupDefinition();
      groupDef.setKeyExpression(valueStmt);
      queryDefn.addGroup(groupDef);
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      while (iter.next()) {
        String label=iter.getString(labelExpr);
        Object value=iter.getValue(valueExpr);
        choices.add(new SelectionChoice(label,convertToType(value,dataType)));
        iter.skipToEnd(1);
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  return choices;
}","/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder){
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      DataEngine dataEngine=getDataEngine();
      DataSourceHandle dataSource=dataSet.getDataSource();
      try {
        dataEngine.defineDataSource(ModelDteApiAdapter.getInstance().createDataSourceDesign(dataSource));
        dataEngine.defineDataSet(ModelDteApiAdapter.getInstance().createDataSetDesign(dataSet));
      }
 catch (      BirtException e) {
        log.log(Level.SEVERE,e.getMessage());
      }
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      if (labelExpr != null) {
        queryDefn.getRowExpressions().add(labelExpr);
      }
      queryDefn.getRowExpressions().add(valueExpr);
      GroupDefinition groupDef=new GroupDefinition();
      groupDef.setKeyExpression(valueStmt);
      queryDefn.addGroup(groupDef);
      IPreparedQuery query=dataEngine.prepare(queryDefn);
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelExpr);
        }
        Object value=iter.getValue(valueExpr);
        choices.add(new SelectionChoice(label,convertToType(value,dataType)));
        count++;
        if ((limit != 0) && (count >= limit)) {
          break;
        }
        iter.skipToEnd(1);
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(true));
  return choices;
}",0.9084104786291116
79053,"/** 
 * creates the static selection list 
 */
public void evaluateSelectionList(){
  if (selectionListType == IScalarParameterDefn.SELECTION_LIST_STATIC) {
    boolean sortDisplayValue=true;
    for (int i=0; i < selectionList.size(); i++) {
      ParameterSelectionChoice choice=(ParameterSelectionChoice)selectionList.get(i);
      choice.setLocale(locale);
      if (choice.getLabel() == null) {
        sortDisplayValue=false;
        break;
      }
    }
    if (!fixedOrder)     Collections.sort(selectionList,new SelectionChoiceCompartor(sortDisplayValue));
  }
}","/** 
 * creates the static selection list 
 */
public void evaluateSelectionList(){
  if (selectionListType == IScalarParameterDefn.SELECTION_LIST_STATIC) {
    boolean sortDisplayValue=true;
    for (int i=0; i < selectionList.size(); i++) {
      ParameterSelectionChoice choice=(ParameterSelectionChoice)selectionList.get(i);
      choice.setLocale(locale);
      if (choice.getLabel() == null) {
        sortDisplayValue=false;
        break;
      }
    }
    if (!fixedOrder)     Collections.sort(selectionList,new SelectionChoiceComparator(sortDisplayValue));
  }
}",0.9991251093613298
79054,"/** 
 * Returns the qualified name of this element. The qualified name is the name of this element if this element is in module user is editing.
 * @return the qualified name of thie element.
 */
public String getQualifiedName(){
  if (getElement().getName() == null)   return null;
  if (module instanceof Library) {
    String namespace=((Library)module).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,getElement().getName());
  }
  return getElement().getName();
}","/** 
 * Gets the name of this element. The returned element name will be the same as <CODE>getName()</CODE>, plus the namespace of the module that the elment is contained, if any. If the element is existed in the current module,this method and <CODE>getName()</CODE> will return identical results.
 * @return the qualified name of thie element.
 */
public String getQualifiedName(){
  if (getElement().getName() == null)   return null;
  if (module instanceof Library) {
    String namespace=((Library)module).getNamespace();
    return StringUtil.buildQualifiedReference(namespace,getElement().getName());
  }
  return getElement().getName();
}",0.6754617414248021
79055,"/** 
 * Constructs the record for adding with container element, slot id, content element, and position in container.
 * @param containerObj The container element.
 * @param theSlot The slotID in which to put the content.
 * @param contentObj The content object to add or remove.
 * @param newPos The position index where to insert the content.
 */
public ContentRecord(DesignElement containerObj,int theSlot,DesignElement contentObj,int newPos){
  init(containerObj,theSlot,contentObj,newPos,true);
}","/** 
 * Constructs the record for adding with container element, slot id, content element, and position in container.
 * @param module the module in which this record executes
 * @param containerObj The container element.
 * @param theSlot The slotID in which to put the content.
 * @param contentObj The content object to add or remove.
 * @param newPos The position index where to insert the content.
 */
public ContentRecord(Module module,DesignElement containerObj,int theSlot,DesignElement contentObj,int newPos){
}",0.8775710088148874
79056,"protected void perform(boolean undo){
  ContainerSlot slot=container.getSlot(slotID);
  if (add && !undo || !add && undo) {
    slot.insert(content,oldPosn);
    content.setContainer(container,slotID);
    if (content.getRoot() != null)     manageId(content,true);
  }
 else {
    slot.remove(content);
    if (content.getRoot() != null)     manageId(content,false);
    content.setContainer(null,DesignElement.NO_SLOT);
  }
}","protected void perform(boolean undo){
  ContainerSlot slot=container.getSlot(slotID);
  if (add && !undo || !add && undo) {
    slot.insert(content,oldPosn);
    content.setContainer(container,slotID);
    if (content.getRoot() != null)     module.manageId(content,true,true);
  }
 else {
    slot.remove(content);
    if (content.getRoot() != null)     module.manageId(content,false,false);
    content.setContainer(null,DesignElement.NO_SLOT);
  }
}",0.9714937286202964
79057,"/** 
 * Creates a new library.
 * @return the created library.
 */
public Library createLibrary(){
  Library library=new Library(this);
  Theme theme=new Theme(ModelMessages.getMessage(Theme.DEFAULT_THEME_NAME));
  library.getSlot(ILibraryModel.THEMES_SLOT).add(theme);
  library.setProperty(Module.THEME_PROP,new ElementRefValue(null,theme));
  library.setValid(true);
  libraries.add(library);
  return library;
}","/** 
 * Creates a new library.
 * @return the created library.
 */
public Library createLibrary(){
  Library library=new Library(this);
  Theme theme=new Theme(ModelMessages.getMessage(Theme.DEFAULT_THEME_NAME));
  library.setProperty(Module.THEME_PROP,new ElementRefValue(null,theme));
  ModelUtil.insertCompatibleThemeToLibrary(library,theme);
  theme.setID(library.getNextID());
  library.addElementID(theme);
  library.setValid(true);
  libraries.add(library);
  return library;
}",0.796440489432703
79058,"public void parseAttrs(Attributes attrs) throws XMLParserException {
  element=new Cell();
  if (!addToSlot(container,slotID,element))   return;
}","public void parseAttrs(Attributes attrs) throws XMLParserException {
  element=new Cell();
  try {
    String theID=attrs.getValue(DesignSchemaConstants.ID_ATTRIB);
    if (!StringUtil.isBlank(theID)) {
      long id=Long.parseLong(theID);
      element.setID(id);
    }
  }
 catch (  NumberFormatException e) {
    handler.getErrorHandler().semanticError(new DesignParserException(new String[]{element.getIdentifier(),attrs.getValue(DesignSchemaConstants.ID_ATTRIB)},DesignParserException.DESIGN_EXCEPTION_INVALID_ELEMENT_ID));
  }
  if (!addToSlot(container,slotID,element))   return;
}",0.329700272479564
79059,"public void parseAttrs(Attributes attrs) throws XMLParserException {
  if (!addToSlot(container,slotID,group))   return;
}","public void parseAttrs(Attributes attrs) throws XMLParserException {
  try {
    String theID=attrs.getValue(DesignSchemaConstants.ID_ATTRIB);
    if (!StringUtil.isBlank(theID)) {
      long id=Long.parseLong(theID);
      getElement().setID(id);
    }
  }
 catch (  NumberFormatException e) {
    handler.getErrorHandler().semanticError(new DesignParserException(new String[]{getElement().getIdentifier(),attrs.getValue(DesignSchemaConstants.ID_ATTRIB)},DesignParserException.DESIGN_EXCEPTION_INVALID_ELEMENT_ID));
  }
  if (!addToSlot(container,slotID,group))   return;
}",0.2327586206896551
79060,"public void parseAttrs(Attributes attrs) throws XMLParserException {
  element=new TableColumn();
  if (!addToSlot(container,slotID,element))   return;
}","public void parseAttrs(Attributes attrs) throws XMLParserException {
  element=new TableColumn();
  try {
    String theID=attrs.getValue(DesignSchemaConstants.ID_ATTRIB);
    if (!StringUtil.isBlank(theID)) {
      long id=Long.parseLong(theID);
      element.setID(id);
    }
  }
 catch (  NumberFormatException e) {
    handler.getErrorHandler().semanticError(new DesignParserException(new String[]{element.getIdentifier(),attrs.getValue(DesignSchemaConstants.ID_ATTRIB)},DesignParserException.DESIGN_EXCEPTION_INVALID_ELEMENT_ID));
  }
  if (!addToSlot(container,slotID,element))   return;
}",0.2941176470588235
79061,"public void parseAttrs(Attributes attrs) throws XMLParserException {
  element=new TableRow();
  if (!addToSlot(container,slotID,element))   return;
}","public void parseAttrs(Attributes attrs) throws XMLParserException {
  element=new TableRow();
  try {
    String theID=attrs.getValue(DesignSchemaConstants.ID_ATTRIB);
    if (!StringUtil.isBlank(theID)) {
      long id=Long.parseLong(theID);
      element.setID(id);
    }
  }
 catch (  NumberFormatException e) {
    handler.getErrorHandler().semanticError(new DesignParserException(new String[]{element.getIdentifier(),attrs.getValue(DesignSchemaConstants.ID_ATTRIB)},DesignParserException.DESIGN_EXCEPTION_INVALID_ELEMENT_ID));
  }
  if (!addToSlot(container,slotID,element))   return;
}",0.3369272237196765
79062,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    final Bounds boEllipse=are.getEllipseBounds();
    double dStart=are.getStartAngle();
    double dExtent=are.getAngleExtent();
    elm=svggc.createArc(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight(),dStart,dExtent);
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType() == ActionType.SHOW_TOOLTIP_LITERAL) {
        Element title=svggc.dom.createElement(""String_Node_Str"");
        title.appendChild(svggc.dom.createTextNode(((TooltipValue)tg.getAction().getValue()).getText()));
        elm.appendChild(title);
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (tg.getAction().getType() == ActionType.URL_REDIRECT_LITERAL) {
        elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + ((URLValue)tg.getAction().getValue()).getBaseUrl() + ""String_Node_Str"");
        setCursor(elm);
      }
    }
    hotspotLayer.appendChild(elm);
  }
}","public void enableInteraction(InteractionEvent ie) throws ChartException {
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  if (elm != null) {
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
        Element title=svggc.dom.createElement(""String_Node_Str"");
      title.appendChild(svggc.dom.createTextNode(((TooltipValue)tg.getAction().getValue()).getText()));
    elm.appendChild(title);
  elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case ActionType.URL_REDIRECT:
elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + ((URLValue)tg.getAction().getValue()).getBaseUrl() + ""String_Node_Str"");
setCursor(elm);
break;
}
}
hotspotLayer.appendChild(elm);
}
}",0.7057201929703653
79063,"public final void setProperty(String sProperty,Object oValue){
  super.setProperty(sProperty,oValue);
  if (sProperty.equals(IDeviceRenderer.EXPECTED_BOUNDS)) {
    final Bounds bo=(Bounds)oValue;
    try {
      dom=createSvgDocument(bo.getWidth(),bo.getHeight());
      svggc=new SVGGraphics2D(dom);
      hotspotLayer=createHotspotLayer(dom);
      super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,svggc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.FILE_IDENTIFIER)) {
    oOutputIdentifier=oValue;
  }
}","public final void setProperty(String sProperty,Object oValue){
  super.setProperty(sProperty,oValue);
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
  }
 else   if (sProperty.equals(IDeviceRenderer.EXPECTED_BOUNDS)) {
    final Bounds bo=(Bounds)oValue;
    try {
      dom=createSvgDocument(bo.getWidth(),bo.getHeight());
      svggc=new SVGGraphics2D(dom);
      hotspotLayer=createHotspotLayer(dom);
      super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,svggc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.FILE_IDENTIFIER)) {
    oOutputIdentifier=oValue;
  }
}",0.9185770750988144
79064,"/** 
 * Gets the proper expression for the given model
 * @param model the given model
 * @return Returns the proper expression for the given model, or null if noproper one exists
 */
public static String getExpression(Object model){
  if (model instanceof ParameterHandle) {
    return IReportElementConstants.PARAMETER_PREFIX + ""String_Node_Str"" + ((ParameterHandle)model).getName()+ ""String_Node_Str"";
  }
  if (model instanceof DataSetItemModel) {
    String colName=((DataSetItemModel)model).getAlias();
    if (colName == null || colName.trim().length() == 0) {
      colName=((DataSetItemModel)model).getName();
    }
    return IReportElementConstants.DATA_COLUMN_PREFIX + ""String_Node_Str"" + DEUtil.escape(colName)+ ""String_Node_Str"";
  }
  return null;
}","/** 
 * Gets the proper expression for the given model
 * @param model the given model
 * @return Returns the proper expression for the given model, or null if noproper one exists
 */
public static String getExpression(Object model){
  if (model instanceof ParameterHandle) {
    return IReportElementConstants.PARAMETER_PREFIX + ""String_Node_Str"" + ((ParameterHandle)model).getName()+ ""String_Node_Str"";
  }
  if (model instanceof DataSetItemModel) {
    String colName=((DataSetItemModel)model).getAlias();
    if (colName == null || colName.trim().length() == 0) {
      colName=((DataSetItemModel)model).getName();
    }
    return getColumnExpression(colName);
  }
  return null;
}",0.9089655172413792
79065,"boolean visitParametersInGroup(ParameterGroupHandle group){
  SlotHandle parameters=group.getParameters();
  Iterator iter=parameters.iterator();
  while (iter.hasNext()) {
    Object param=iter.next();
    if (param instanceof ParameterGroupHandle) {
      if (!visitParameterGroup((ParameterGroupHandle)param)) {
        return false;
      }
    }
 else     if (param instanceof ScalarParameterHandle) {
      if (!visitParameterGroup((ParameterGroupHandle)param)) {
        return false;
      }
    }
  }
  return true;
}","boolean visitParametersInGroup(ParameterGroupHandle group){
  SlotHandle parameters=group.getParameters();
  Iterator iter=parameters.iterator();
  while (iter.hasNext()) {
    Object param=iter.next();
    if (param instanceof ParameterGroupHandle) {
      if (!visitParameterGroup((ParameterGroupHandle)param)) {
        return false;
      }
    }
 else     if (param instanceof ScalarParameterHandle) {
      if (!visitScalarParameter((ScalarParameterHandle)param)) {
        return false;
      }
    }
  }
  return true;
}",0.9411764705882352
79066,"/** 
 * @param ipr
 * @param fXOffset
 * @param fYOffset
 * @throws RenderingException
 */
private final void renderCurve(IPrimitiveRenderer ipr,double fXOffset,double fYOffset) throws ChartException {
  final double[] faKnotXY1=new double[2];
  final double[] faKnotXY2=new double[2];
  if (!computeSpline(fa[0],faKnotXY1)) {
    return;
  }
  int iNumberOfDivisions;
  double fX, fY;
  double[] faXY1, faXY2;
  double fT;
  final ArrayList stateList=new ArrayList();
  for (int i=0; i < iNumberOfPoints - 1; i++) {
    if (!computeSpline(fa[i + 1],faKnotXY2)) {
      continue;
    }
    fX=faKnotXY2[0] - faKnotXY1[0];
    fY=faKnotXY2[1] - faKnotXY1[1];
    iNumberOfDivisions=(int)(Math.sqrt(fX * fX + fY * fY) / 5.0f) + 1;
    faXY1=new double[2];
    faXY2=new double[2];
    if (!computeSpline(fa[i],faXY1)) {
      continue;
    }
    for (int j=0; j < iNumberOfDivisions; j++) {
      fT=fa[i] + (fa[i + 1] - fa[i]) * (double)(j + 1) / (double)iNumberOfDivisions;
      if (!computeSpline(fT,faXY2)) {
        continue;
      }
      if (bShowAsTape) {
        boolean drawLeftSide=(i == 0) && (j == 0) && bKeepState&& bRendering3D;
        if (drawLeftSide) {
          plotPlane(ipr,faXY1[0] + fXOffset,faXY1[1] + fYOffset,faXY2[0] + fXOffset,faXY2[1] + fYOffset,bRendering3D ? faZ[i] : 0,bRendering3D ? faZ[i] : 0,true,true);
        }
        boolean drawRightSide=(i == iNumberOfPoints - 2) && (j == iNumberOfDivisions - 1 && bKeepState);
        plotPlane(ipr,faXY1[0] + fXOffset,faXY1[1] + fYOffset,faXY2[0] + fXOffset,faXY2[1] + fYOffset,bRendering3D ? faZ[i] : 0,bRendering3D ? faZ[i] : 0,drawRightSide,false);
      }
      if (!bFillArea) {
        plotLine(ipr,faXY1[0] + fXOffset,faXY1[1] + fYOffset,faXY2[0] + fXOffset,faXY2[1] + fYOffset,bRendering3D ? faZ[i] : 0,bRendering3D ? faZ[i] : 0);
      }
      if (bRendering3D) {
        stateList.add(new double[]{faXY1[0] + fXOffset,faXY1[1] + fYOffset,faZ[i]});
        stateList.add(new double[]{faXY2[0] + fXOffset,faXY2[1] + fYOffset,faZ[i]});
      }
 else {
        stateList.add(new double[]{faXY1[0] + fXOffset,faXY1[1] + fYOffset});
        stateList.add(new double[]{faXY2[0] + fXOffset,faXY2[1] + fYOffset});
      }
      faXY1[0]=faXY2[0];
      faXY1[1]=faXY2[1];
    }
    faKnotXY1[0]=faKnotXY2[0];
    faKnotXY1[1]=faKnotXY2[1];
  }
  if (bFillArea) {
    plotArea(ipr,stateList);
  }
  if (bKeepState) {
    iRender.getRunTimeContext().putState(AreaSeries.class,stateList);
  }
}","/** 
 * @param ipr
 * @param fXOffset
 * @param fYOffset
 * @throws RenderingException
 */
private final void renderCurve(IPrimitiveRenderer ipr,double fXOffset,double fYOffset) throws ChartException {
  final double[] faKnotXY1=new double[2];
  final double[] faKnotXY2=new double[2];
  if (!computeSpline(fa[0],faKnotXY1)) {
    return;
  }
  int iNumberOfDivisions;
  double fX, fY;
  double[] faXY1, faXY2;
  double fT;
  final ArrayList stateList=new ArrayList();
  for (int i=0; i < iNumberOfPoints - 1; i++) {
    if (!computeSpline(fa[i + 1],faKnotXY2)) {
      continue;
    }
    fX=faKnotXY2[0] - faKnotXY1[0];
    fY=faKnotXY2[1] - faKnotXY1[1];
    iNumberOfDivisions=(int)(Math.sqrt(fX * fX + fY * fY) / 5.0f) + 1;
    faXY1=new double[2];
    faXY2=new double[2];
    if (!computeSpline(fa[i],faXY1)) {
      continue;
    }
    for (int j=0; j < iNumberOfDivisions; j++) {
      fT=fa[i] + (fa[i + 1] - fa[i]) * (double)(j + 1) / (double)iNumberOfDivisions;
      if (!computeSpline(fT,faXY2)) {
        continue;
      }
      if (bShowAsTape) {
        boolean drawLeftSide=(i == 0) && (j == 0) && bKeepState&& bRendering3D&& bFillArea;
        if (drawLeftSide) {
          plotPlane(ipr,faXY1[0] + fXOffset,faXY1[1] + fYOffset,faXY2[0] + fXOffset,faXY2[1] + fYOffset,bRendering3D ? faZ[i] : 0,bRendering3D ? faZ[i] : 0,true,true);
        }
        boolean drawRightSide=(i == iNumberOfPoints - 2) && (j == iNumberOfDivisions - 1 && bKeepState && bFillArea);
        plotPlane(ipr,faXY1[0] + fXOffset,faXY1[1] + fYOffset,faXY2[0] + fXOffset,faXY2[1] + fYOffset,bRendering3D ? faZ[i] : 0,bRendering3D ? faZ[i] : 0,drawRightSide,false);
      }
      if (!bFillArea) {
        plotLine(ipr,faXY1[0] + fXOffset,faXY1[1] + fYOffset,faXY2[0] + fXOffset,faXY2[1] + fYOffset,bRendering3D ? faZ[i] : 0,bRendering3D ? faZ[i] : 0);
      }
      if (bRendering3D) {
        stateList.add(new double[]{faXY1[0] + fXOffset,faXY1[1] + fYOffset,faZ[i]});
        stateList.add(new double[]{faXY2[0] + fXOffset,faXY2[1] + fYOffset,faZ[i]});
      }
 else {
        stateList.add(new double[]{faXY1[0] + fXOffset,faXY1[1] + fYOffset});
        stateList.add(new double[]{faXY2[0] + fXOffset,faXY2[1] + fYOffset});
      }
      faXY1[0]=faXY2[0];
      faXY1[1]=faXY2[1];
    }
    faKnotXY1[0]=faKnotXY2[0];
    faKnotXY1[1]=faKnotXY2[1];
  }
  if (bFillArea) {
    plotArea(ipr,stateList);
  }
  if (bKeepState) {
    iRender.getRunTimeContext().putState(AreaSeries.class,stateList);
  }
}",0.9949647532729105
79067,"protected List getModelChildren(){
  return HandleAdapterFactory.getInstance().getLibraryHandleAdapter().getChildren();
}","protected List getModelChildren(){
  return HandleAdapterFactory.getInstance().getLibraryHandleAdapter(getModel()).getChildren();
}",0.9603174603174603
79068,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (!isModelInModuleHandle()) {
    SetCurrentEditModelCommand command=new SetCurrentEditModelCommand(null);
    command.execute();
  }
}",0.5273972602739726
79069,"public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(LibraryHandleAdapt.CURRENTMODEL)) {
    refresh();
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        List mediatorSelection=SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject();
        if (mediatorSelection.size() == 1 && mediatorSelection.get(0) instanceof LibraryHandle) {
          return;
        }
        List list=getChildren();
        EditPartViewer viewer=getViewer();
        if (viewer instanceof DeferredGraphicalViewer) {
          ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),false);
        }
      }
    }
);
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(LibraryHandleAdapt.CURRENTMODEL)) {
    refresh();
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        final List mediatorSelection=SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject();
        if (mediatorSelection.size() == 1 && mediatorSelection.get(0) instanceof LibraryHandle) {
          return;
        }
        List list=getChildren();
        EditPartViewer viewer=getViewer();
        if (viewer instanceof DeferredGraphicalViewer) {
          ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),false);
        }
      }
    }
);
  }
}",0.9958563535911602
79070,"public void run(){
  List mediatorSelection=SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject();
  if (mediatorSelection.size() == 1 && mediatorSelection.get(0) instanceof LibraryHandle) {
    return;
  }
  List list=getChildren();
  EditPartViewer viewer=getViewer();
  if (viewer instanceof DeferredGraphicalViewer) {
    ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),false);
  }
}","public void run(){
  final List mediatorSelection=SessionHandleAdapter.getInstance().getMediator().getCurrentState().getSelectionObject();
  if (mediatorSelection.size() == 1 && mediatorSelection.get(0) instanceof LibraryHandle) {
    return;
  }
  List list=getChildren();
  EditPartViewer viewer=getViewer();
  if (viewer instanceof DeferredGraphicalViewer) {
    ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),false);
  }
}",0.9933774834437086
79071,"/** 
 * Gets the object selected
 * @return Returns the object selected.<p> If object number is more than one, class type is <code>StructuredSelection</code>
 */
public Object getSelection(){
  if (selection instanceof Object[]) {
    return new StructuredSelection((Object[])selection);
  }
  return selection;
}","/** 
 * Gets the object selected
 * @return Returns the object selected.<p> If object number is more than one, class type is <code>StructuredSelection</code>
 */
public Object getSelection(){
  if (selection instanceof Object[]) {
    return new StructuredSelection((Object[])selection);
  }
 else   if (selection == null) {
    return new StructuredSelection();
  }
  return selection;
}",0.8445078459343794
79072,"/** 
 * Gets models of selected elements
 */
protected List getElementHandles(){
  if (selectionHandles == null)   selectionHandles=InsertInLayoutUtil.editPart2Model(getSelection()).toList();
  return selectionHandles;
}","/** 
 * Gets models of selected elements
 */
protected List getElementHandles(){
  if (selectionHandles == null) {
    selectionHandles=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selectionHandles;
}",0.8961303462321792
79073,"protected boolean handleMove(){
  if (isCreating) {
    return true;
  }
  boolean validateTrue=false;
  updateTargetUnderMouse();
  if (getTargetEditPart() != null) {
    validateTrue=handleValidatePalette(getFactory().getObjectType(),getTargetEditPart());
  }
  if (validateTrue) {
    updateTargetRequest();
    setCurrentCommand(getCommand());
    showTargetFeedback();
  }
 else {
    setCurrentCommand(null);
  }
  return validateTrue;
}","protected boolean handleMove(){
  if (isCreating || SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    return true;
  }
  boolean validateTrue=false;
  updateTargetUnderMouse();
  if (getTargetEditPart() != null) {
    validateTrue=handleValidatePalette(getFactory().getObjectType(),getTargetEditPart());
  }
  if (validateTrue) {
    updateTargetRequest();
    setCurrentCommand(getCommand());
    showTargetFeedback();
  }
 else {
    setCurrentCommand(null);
  }
  return validateTrue;
}",0.9105858170606372
79074,"/** 
 * Perform direct edit.
 */
public void performDirectEdit(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(TEXT_TRANS_MSG);
  TextEditDialog dialog=new TextEditDialog(DLG_TITLE_TEXT,((TextItemHandle)getModel()));
  if (dialog.open() == Dialog.OK) {
    stack.commit();
    refreshVisuals();
  }
 else {
    stack.rollback();
  }
}","/** 
 * Perform direct edit.
 */
public void performDirectEdit(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(TEXT_TRANS_MSG);
  TextEditDialog dialog=new TextEditDialog(UIUtil.getDefaultShell(),DLG_TITLE_TEXT,((TextItemHandle)getModel()));
  if (dialog.open() == Dialog.OK) {
    stack.commit();
    refreshVisuals();
  }
 else {
    stack.rollback();
  }
}",0.968394437420986
79075,"public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack();
  IElementProcessor processor=ElementProcessorFactory.createProcessor(dataType);
  stack.startTrans(processor.getCreateTransactionLabel());
  DesignElementHandle handle=processor.createElement(null);
  if (handle == null) {
    stack.rollback();
  }
 else {
    try {
      getContainer().add(handle);
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionHandler.handle(e);
    }
    stack.commit();
  }
  super.run();
}","public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack();
  IElementProcessor processor=ElementProcessorFactory.createProcessor(dataType);
  stack.startTrans(processor.getCreateTransactionLabel());
  DesignElementHandle handle=processor.createElement(null);
  if (handle == null) {
    stack.rollback();
  }
 else {
    try {
      getContainer().add(handle);
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionHandler.handle(e);
    }
    stack.commit();
    synWithMediator(handle);
  }
  super.run();
}",0.9746281714785652
79076,"/** 
 * Creates a new image item.
 * @param name the optional image name. Can be <code>null</code>.
 * @return a handle to the image
 */
public ImageHandle newImage(String name){
  ImageItem element=new ImageItem(name);
  return element.handle(module);
}","/** 
 * Creates a new image item.
 * @param name the optional image name. Can be <code>null</code>.
 * @return a handle to the image
 */
public ImageHandle newImage(String name){
  ImageItem element=new ImageItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8339483394833949
79077,"/** 
 * Creates a new cell element. Cells cannot have a name.
 * @return a handle to the cell
 */
public CellHandle newCell(){
  Cell element=new Cell();
  return element.handle(module);
}","/** 
 * Creates a new cell element. Cells cannot have a name.
 * @return a handle to the cell
 */
public CellHandle newCell(){
  Cell element=new Cell();
  module.makeUniqueName(element);
  return element.handle(module);
}",0.7804878048780488
79078,"/** 
 * Creates a new table group element. Table groups cannot have a name.
 * @return a handle to the table group
 */
public TableGroupHandle newTableGroup(){
  TableGroup element=new TableGroup();
  return element.handle(module);
}","/** 
 * Creates a new table group element. Table groups cannot have a name.
 * @return a handle to the table group
 */
public TableGroupHandle newTableGroup(){
  TableGroup element=new TableGroup();
  module.makeUniqueName(element);
  return element.handle(module);
}",0.82
79079,"/** 
 * Creates a new rectangle.
 * @param name the optional rectangle name. Can be <code>null</code>.
 * @return a handle to rectangle
 */
public RectangleHandle newRectangle(String name){
  RectangleItem element=new RectangleItem(name);
  return element.handle(module);
}","/** 
 * Creates a new rectangle.
 * @param name the optional rectangle name. Can be <code>null</code>.
 * @return a handle to rectangle
 */
public RectangleHandle newRectangle(String name){
  RectangleItem element=new RectangleItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8517241379310345
79080,"/** 
 * Creates a new data item.
 * @param name the optional data item name. Can be <code>null</code>.
 * @return a handle to the data item
 */
public DataItemHandle newDataItem(String name){
  DataItem element=new DataItem(name);
  return element.handle(module);
}","/** 
 * Creates a new data item.
 * @param name the optional data item name. Can be <code>null</code>.
 * @return a handle to the data item
 */
public DataItemHandle newDataItem(String name){
  DataItem element=new DataItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8404255319148937
79081,"/** 
 * Creates a new line item.
 * @param name the optional line item name. Can be <code>null</code>.
 * @return a handle to the line item
 */
public LineHandle newLineItem(String name){
  LineItem element=new LineItem(name);
  return element.handle(module);
}","/** 
 * Creates a new line item.
 * @param name the optional line item name. Can be <code>null</code>.
 * @return a handle to the line item
 */
public LineHandle newLineItem(String name){
  LineItem element=new LineItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8381294964028777
79082,"/** 
 * Creates a new list group element. List groups cannot have a name.
 * @return a handle to the list group
 */
public ListGroupHandle newListGroup(){
  ListGroup element=new ListGroup();
  return element.handle(module);
}","/** 
 * Creates a new list group element. List groups cannot have a name.
 * @return a handle to the list group
 */
public ListGroupHandle newListGroup(){
  ListGroup element=new ListGroup();
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8148148148148148
79083,"/** 
 * Creates a new column element. Columns cannot have a name.
 * @return a handle to the column
 */
public ColumnHandle newTableColumn(){
  TableColumn element=new TableColumn();
  return element.handle(module);
}","/** 
 * Creates a new column element. Columns cannot have a name.
 * @return a handle to the column
 */
public ColumnHandle newTableColumn(){
  TableColumn element=new TableColumn();
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8076923076923077
79084,"/** 
 * Creates a new free-form item.
 * @param name the optional free-form name. Can be <code>null</code>.
 * @return a handle to the free-form
 */
public FreeFormHandle newFreeForm(String name){
  FreeForm element=new FreeForm(name);
  return element.handle(module);
}","/** 
 * Creates a new free-form item.
 * @param name the optional free-form name. Can be <code>null</code>.
 * @return a handle to the free-form
 */
public FreeFormHandle newFreeForm(String name){
  FreeForm element=new FreeForm(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8501742160278746
79085,"/** 
 * Creates a new list item.
 * @param name the optional list name. Can be <code>null</code>.
 * @return a handle to the list
 */
public ListHandle newList(String name){
  ListItem element=new ListItem(name);
  return element.handle(module);
}","/** 
 * Creates a new list item.
 * @param name the optional list name. Can be <code>null</code>.
 * @return a handle to the list
 */
public ListHandle newList(String name){
  ListItem element=new ListItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8295454545454546
79086,"/** 
 * Creates a new text item.
 * @param name the optional text item name. Can be <code>null</code>.
 * @return a handle to the text item
 */
public TextItemHandle newTextItem(String name){
  TextItem element=new TextItem(name);
  return element.handle(module);
}","/** 
 * Creates a new text item.
 * @param name the optional text item name. Can be <code>null</code>.
 * @return a handle to the text item
 */
public TextItemHandle newTextItem(String name){
  TextItem element=new TextItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8404255319148937
79087,"/** 
 * Creates a new label item.
 * @param name the optional label name. Can be <code>null</code>.
 * @return a handle to the label
 */
public LabelHandle newLabel(String name){
  Label element=new Label(name);
  return element.handle(module);
}","/** 
 * Creates a new label item.
 * @param name the optional label name. Can be <code>null</code>.
 * @return a handle to the label
 */
public LabelHandle newLabel(String name){
  Label element=new Label(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8288973384030418
79088,"/** 
 * Creates a new multi line data item.
 * @param name the optional multi line data name. Can be <code>null</code>.
 * @return a handle to multi line data item
 */
public TextDataHandle newTextData(String name){
  TextDataItem element=new TextDataItem(name);
  return element.handle(module);
}","/** 
 * Creates a new multi line data item.
 * @param name the optional multi line data name. Can be <code>null</code>.
 * @return a handle to multi line data item
 */
public TextDataHandle newTextData(String name){
  TextDataItem element=new TextDataItem(name);
  module.makeUniqueName(element);
  return element.handle(module);
}",0.8630573248407644
79089,"protected void populateAvailableDbObjects(){
  if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
    if (schemaList != null && schemaList.size() > 0) {
      if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
        return;
      }
    }
 else     return;
  }
  RemoveAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    getAvailableSchema();
    if (schemaCombo.getItemCount() < 1) {
      schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
      schemaCombo.select(0);
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
    populateTableList();
  }
 else {
    populateTableList();
  }
  if (rootNode != null) {
    selectNode(rootNode);
  }
}","protected void populateAvailableDbObjects(){
  if ((cachedSearchTxt == searchTxt.getText() || (cachedSearchTxt != null && cachedSearchTxt.equals(searchTxt.getText()))) && (cachedDbType == getSelectedDbType() || (cachedDbType != null && cachedDbType.equals(getSelectedDbType())))) {
    if (schemaList != null && schemaList.size() > 0) {
      if (cachedSchemaComboIndex == schemaCombo.getSelectionIndex()) {
        return;
      }
    }
 else     return;
  }
  RemoveAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    getAvailableSchema();
    if (schemaCombo.getItemCount() < 1) {
      schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
      schemaCombo.select(0);
      if (schemaList != null) {
        Iterator it=schemaList.iterator();
        while (it.hasNext())         schemaCombo.add(it.next().toString());
      }
    }
    populateTableList();
  }
 else {
    populateTableList();
  }
  if (rootNode != null) {
    selectNode(rootNode);
  }
}",0.976861167002012
79090,"/** 
 * @param namePattern
 * @return
 */
private String getTailoredSearchText(String namePattern){
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  return namePattern;
}","/** 
 * @param namePattern
 * @return
 */
private String getTailoredSearchText(String namePattern){
  if (namePattern != null) {
    if (namePattern.lastIndexOf('%') == -1) {
      namePattern=namePattern + ""String_Node_Str"";
    }
  }
 else   namePattern=""String_Node_Str"";
  return namePattern;
}",0.6738461538461539
79091,"private void addFetchColumnListener(){
  availableDbObjectsTree.addListener(SWT.Expand,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (item == null)       return;
      if (isSchemaNode(item) || (item == rootNode)) {
        return;
      }
      String tableName=Utility.getTreeItemsName(item);
      String catalogName=metaDataProvider.getCatalog();
      String schemaName=null;
      String schemaSeparator=""String_Node_Str"";
      if (metaDataProvider.isSchemaSupported()) {
        int index=-1;
        if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
          schemaName=tableName.substring(0,index);
          tableName=tableName.substring(index + 1);
        }
      }
      if (item.getData() instanceof DbObject) {
        DbObject obj=(DbObject)item.getData();
        if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
          ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
 else         if (obj.getType() == DbObject.PROCEDURE_TYPE) {
          ArrayList procedureList=metaDataProvider.getAllProcedure(catalogName,schemaName,getTailoredSearchText(searchTxt.getText()));
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
        }
      }
 else       if (item.getData() instanceof Procedure) {
        Procedure obj=(Procedure)item.getData();
{
          ArrayList columnList=metaDataProvider.getProcedureColumns(obj.getCatalog(),schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
      }
    }
  }
);
}","private void addFetchColumnListener(){
  availableDbObjectsTree.addListener(SWT.Expand,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (item == null)       return;
      if (isSchemaNode(item) || (item == rootNode)) {
        return;
      }
      String tableName=Utility.getTreeItemsName(item);
      String catalogName=metaDataProvider.getCatalog();
      String schemaName=null;
      String schemaSeparator=""String_Node_Str"";
      if (metaDataProvider.isSchemaSupported()) {
        int index=-1;
        if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
          schemaName=tableName.substring(0,index);
          tableName=tableName.substring(index + 1);
        }
      }
      if (item.getData() instanceof DbObject) {
        DbObject obj=(DbObject)item.getData();
        if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
          ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
 else         if (obj.getType() == DbObject.PROCEDURE_TYPE) {
          ArrayList procedureList=metaDataProvider.getAllProcedure(catalogName,schemaName,getTailoredSearchText(searchTxt.getText()));
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
        }
      }
 else       if (item.getData() instanceof Procedure) {
        Procedure obj=(Procedure)item.getData();
{
          ArrayList columnList=metaDataProvider.getProcedureColumns(obj.getCatalog(),schemaName,tableName,getTailoredSearchText(null));
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
      }
    }
  }
);
}",0.9932885906040269
79092,"public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (item == null)   return;
  if (isSchemaNode(item) || (item == rootNode)) {
    return;
  }
  String tableName=Utility.getTreeItemsName(item);
  String catalogName=metaDataProvider.getCatalog();
  String schemaName=null;
  String schemaSeparator=""String_Node_Str"";
  if (metaDataProvider.isSchemaSupported()) {
    int index=-1;
    if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
      schemaName=tableName.substring(0,index);
      tableName=tableName.substring(index + 1);
    }
  }
  if (item.getData() instanceof DbObject) {
    DbObject obj=(DbObject)item.getData();
    if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
      ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
 else     if (obj.getType() == DbObject.PROCEDURE_TYPE) {
      ArrayList procedureList=metaDataProvider.getAllProcedure(catalogName,schemaName,getTailoredSearchText(searchTxt.getText()));
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
    }
  }
 else   if (item.getData() instanceof Procedure) {
    Procedure obj=(Procedure)item.getData();
{
      ArrayList columnList=metaDataProvider.getProcedureColumns(obj.getCatalog(),schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
  }
}","public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (item == null)   return;
  if (isSchemaNode(item) || (item == rootNode)) {
    return;
  }
  String tableName=Utility.getTreeItemsName(item);
  String catalogName=metaDataProvider.getCatalog();
  String schemaName=null;
  String schemaSeparator=""String_Node_Str"";
  if (metaDataProvider.isSchemaSupported()) {
    int index=-1;
    if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
      schemaName=tableName.substring(0,index);
      tableName=tableName.substring(index + 1);
    }
  }
  if (item.getData() instanceof DbObject) {
    DbObject obj=(DbObject)item.getData();
    if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
      ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
 else     if (obj.getType() == DbObject.PROCEDURE_TYPE) {
      ArrayList procedureList=metaDataProvider.getAllProcedure(catalogName,schemaName,getTailoredSearchText(searchTxt.getText()));
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
    }
  }
 else   if (item.getData() instanceof Procedure) {
    Procedure obj=(Procedure)item.getData();
{
      ArrayList columnList=metaDataProvider.getProcedureColumns(obj.getCatalog(),schemaName,tableName,getTailoredSearchText(null));
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
  }
}",0.9921618204804046
79093,"protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=getTailoredSearchText(namePattern);
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  if (schemaList != null && schemaList.size() > 0) {
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      if (metaDataProvider.isProcedureSupported())       procedureRs=metaDataProvider.getAllProcedure(catalogName,schemaName,namePattern);
      if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))       tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null && procedureRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        if (tablesRs != null) {
          while (tablesRs.next()) {
            String tableName=tablesRs.getString(""String_Node_Str"");
            String type=tablesRs.getString(""String_Node_Str"");
            if (type.equalsIgnoreCase(""String_Node_Str""))             continue;
            count++;
            int dbType=DbObject.TABLE_TYPE;
            if (type.equalsIgnoreCase(""String_Node_Str"")) {
              image=tableImage;
              dbType=DbObject.TABLE_TYPE;
            }
 else             if (type.equalsIgnoreCase(""String_Node_Str"")) {
              image=viewImage;
              dbType=DbObject.VIEW_TYPE;
            }
            String fullyQualifiedTableName=tableName;
            if (schemaName != null && schemaName.trim().length() > 0) {
              fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
            }
            DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
            tableList.add(dbObject);
            numTables++;
          }
        }
        if (needToCreateProcedureNode(dbtype,procedureRs)) {
          String fullyQualifiedTableName=""String_Node_Str"";
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + ""String_Node_Str"";
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
          tableList.add(dbObject);
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    if (metaDataProvider.isProcedureSupported())     procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
    if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))     tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null && procedureRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      if (tablesRs != null) {
        while (tablesRs.next()) {
          String type=tablesRs.getString(""String_Node_Str"");
          if (type.equalsIgnoreCase(""String_Node_Str""))           continue;
          String tableName=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
          tableList.add(dbObject);
        }
      }
      if (needToCreateProcedureNode(dbtype,procedureRs)) {
        String fullyQualifiedTableName=""String_Node_Str"";
        DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}","protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  if (schemaList != null && schemaList.size() > 0) {
    cachedSchemaComboIndex=schemaCombo.getSelectionIndex();
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      if (metaDataProvider.isProcedureSupported())       procedureRs=metaDataProvider.getAllProcedure(catalogName,schemaName,namePattern);
      if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))       tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null && procedureRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        if (tablesRs != null) {
          while (tablesRs.next()) {
            String tableName=tablesRs.getString(""String_Node_Str"");
            String type=tablesRs.getString(""String_Node_Str"");
            if (type.equalsIgnoreCase(""String_Node_Str""))             continue;
            count++;
            int dbType=DbObject.TABLE_TYPE;
            if (type.equalsIgnoreCase(""String_Node_Str"")) {
              image=tableImage;
              dbType=DbObject.TABLE_TYPE;
            }
 else             if (type.equalsIgnoreCase(""String_Node_Str"")) {
              image=viewImage;
              dbType=DbObject.VIEW_TYPE;
            }
            String fullyQualifiedTableName=tableName;
            if (schemaName != null && schemaName.trim().length() > 0) {
              fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
            }
            DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
            tableList.add(dbObject);
            numTables++;
          }
        }
        if (needToCreateProcedureNode(dbtype,procedureRs)) {
          String fullyQualifiedTableName=""String_Node_Str"";
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + ""String_Node_Str"";
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
          tableList.add(dbObject);
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    if (metaDataProvider.isProcedureSupported())     procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
    if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))     tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null && procedureRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      if (tablesRs != null) {
        while (tablesRs.next()) {
          String tableName=tablesRs.getString(""String_Node_Str"");
          String type=tablesRs.getString(""String_Node_Str"");
          if (type.equalsIgnoreCase(""String_Node_Str""))           continue;
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
          tableList.add(dbObject);
        }
      }
      if (needToCreateProcedureNode(dbtype,procedureRs)) {
        String fullyQualifiedTableName=""String_Node_Str"";
        DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}",0.9853367125271544
79094,"public void dragStart(DragSourceEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection.length > 0 && selection[0].getData() instanceof DbObject) {
    if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
      event.doit=false;
      return;
    }
    ;
  }
 else   if (selection.length <= 0 || selection[0].getData() == null) {
    event.doit=false;
    return;
  }
}","public void dragStart(DragSourceEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection.length > 0) {
    if (selection[0].getData() instanceof DbObject) {
      if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
        event.doit=false;
        return;
      }
    }
 else     if (selection[0].getData() instanceof ProcedureParameter) {
      event.doit=false;
      return;
    }
  }
 else   if (selection.length <= 0 || selection[0].getData() == null) {
    event.doit=false;
    return;
  }
}",0.7479838709677419
79095,"/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0 && selection[0].getData() instanceof DbObject) {
        if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
          event.doit=false;
          return;
        }
        ;
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           if (obj instanceof Procedure) {
            event.data=((Procedure)obj).getProcedureName();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}","/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0) {
        if (selection[0].getData() instanceof DbObject) {
          if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
            event.doit=false;
            return;
          }
        }
 else         if (selection[0].getData() instanceof ProcedureParameter) {
          event.doit=false;
          return;
        }
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           if (obj instanceof Procedure) {
            event.data=((Procedure)obj).getProcedureName();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}",0.9204934886908842
79096,"/** 
 * Return pre-defined query text pattern with every element in a cell in an Array
 * @return pre-defined query text in an Array
 */
private String[] getQueryPresetTextArray(){
  final String[] lines=new String[]{""String_Node_Str"",""String_Node_Str""};
  return lines;
}","/** 
 * Return pre-defined query text pattern with every element in a cell in an Array
 * @return pre-defined query text in an Array
 */
private String[] getQueryPresetTextArray(){
  final String[] lines;
  if (((OdaDataSetHandle)getContainer().getModel()).getExtensionID().equals(""String_Node_Str""))   lines=new String[]{""String_Node_Str""};
 else   lines=new String[]{""String_Node_Str"",""String_Node_Str""};
  return lines;
}",0.6925287356321839
79097,"private void addFetchColumnListener(){
  availableDbObjectsTree.addListener(SWT.Expand,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (item == null)       return;
      if (isSchemaNode(item) || (item == rootNode)) {
        return;
      }
      String tableName=Utility.getTreeItemsName(item);
      String catalogName=metaDataProvider.getCatalog();
      String schemaName=null;
      String schemaSeparator=""String_Node_Str"";
      if (metaDataProvider.isSchemaSupported()) {
        int index=-1;
        if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
          schemaName=tableName.substring(0,index);
          tableName=tableName.substring(index + 1);
        }
      }
      if (item.getData() instanceof DbObject) {
        DbObject obj=(DbObject)item.getData();
        if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
          ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
 else         if (obj.getType() == DbObject.PROCEDURE_TYPE) {
          ArrayList procedureList=new ArrayList();
          ResultSet procedureRs=metaDataProvider.getAllProcedure(catalogName,schemaName,null);
          if (procedureRs == null) {
            return;
          }
          try {
            while (procedureRs.next()) {
              String name=procedureRs.getString(""String_Node_Str"");
              DbObject dbObject=new DbObject(name,name,DbObject.PROCEDURE_ITEM_TYPE);
              dbObject.setImage(columnImage);
              procedureList.add(dbObject);
            }
          }
 catch (          SQLException e) {
          }
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
        }
 else         if (obj.getType() == DbObject.PROCEDURE_ITEM_TYPE) {
          ArrayList columnList=new ArrayList();
          columnList=metaDataProvider.getProcedureColumns(catalogName,schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
      }
    }
  }
);
}","private void addFetchColumnListener(){
  availableDbObjectsTree.addListener(SWT.Expand,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (item == null)       return;
      if (isSchemaNode(item) || (item == rootNode)) {
        return;
      }
      String tableName=Utility.getTreeItemsName(item);
      String catalogName=metaDataProvider.getCatalog();
      String schemaName=null;
      String schemaSeparator=""String_Node_Str"";
      if (metaDataProvider.isSchemaSupported()) {
        int index=-1;
        if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
          schemaName=tableName.substring(0,index);
          tableName=tableName.substring(index + 1);
        }
      }
      if (item.getData() instanceof DbObject) {
        DbObject obj=(DbObject)item.getData();
        if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
          ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
 else         if (obj.getType() == DbObject.PROCEDURE_TYPE) {
          ArrayList procedureList=metaDataProvider.getAllProcedure(catalogName,schemaName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
        }
      }
 else       if (item.getData() instanceof Procedure) {
        Procedure obj=(Procedure)item.getData();
{
          ArrayList columnList=metaDataProvider.getProcedureColumns(obj.getCatalog(),schemaName,tableName,null);
          TreeItem[] items=item.getItems();
          if (items != null) {
            for (int i=0; i < items.length; i++) {
              items[i].dispose();
            }
          }
          Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
        }
      }
    }
  }
);
}",0.8507402961184474
79098,"public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (item == null)   return;
  if (isSchemaNode(item) || (item == rootNode)) {
    return;
  }
  String tableName=Utility.getTreeItemsName(item);
  String catalogName=metaDataProvider.getCatalog();
  String schemaName=null;
  String schemaSeparator=""String_Node_Str"";
  if (metaDataProvider.isSchemaSupported()) {
    int index=-1;
    if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
      schemaName=tableName.substring(0,index);
      tableName=tableName.substring(index + 1);
    }
  }
  if (item.getData() instanceof DbObject) {
    DbObject obj=(DbObject)item.getData();
    if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
      ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
 else     if (obj.getType() == DbObject.PROCEDURE_TYPE) {
      ArrayList procedureList=new ArrayList();
      ResultSet procedureRs=metaDataProvider.getAllProcedure(catalogName,schemaName,null);
      if (procedureRs == null) {
        return;
      }
      try {
        while (procedureRs.next()) {
          String name=procedureRs.getString(""String_Node_Str"");
          DbObject dbObject=new DbObject(name,name,DbObject.PROCEDURE_ITEM_TYPE);
          dbObject.setImage(columnImage);
          procedureList.add(dbObject);
        }
      }
 catch (      SQLException e) {
      }
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
    }
 else     if (obj.getType() == DbObject.PROCEDURE_ITEM_TYPE) {
      ArrayList columnList=new ArrayList();
      columnList=metaDataProvider.getProcedureColumns(catalogName,schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
  }
}","public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (item == null)   return;
  if (isSchemaNode(item) || (item == rootNode)) {
    return;
  }
  String tableName=Utility.getTreeItemsName(item);
  String catalogName=metaDataProvider.getCatalog();
  String schemaName=null;
  String schemaSeparator=""String_Node_Str"";
  if (metaDataProvider.isSchemaSupported()) {
    int index=-1;
    if ((index=tableName.lastIndexOf(schemaSeparator)) != -1) {
      schemaName=tableName.substring(0,index);
      tableName=tableName.substring(index + 1);
    }
  }
  if (item.getData() instanceof DbObject) {
    DbObject obj=(DbObject)item.getData();
    if (obj.getType() == DbObject.TABLE_TYPE || obj.getType() == DbObject.VIEW_TYPE) {
      ArrayList columnList=metaDataProvider.getColumns(catalogName,schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
 else     if (obj.getType() == DbObject.PROCEDURE_TYPE) {
      ArrayList procedureList=metaDataProvider.getAllProcedure(catalogName,schemaName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,procedureList,SWT.NONE,columnImage);
    }
  }
 else   if (item.getData() instanceof Procedure) {
    Procedure obj=(Procedure)item.getData();
{
      ArrayList columnList=metaDataProvider.getProcedureColumns(obj.getCatalog(),schemaName,tableName,null);
      TreeItem[] items=item.getItems();
      if (items != null) {
        for (int i=0; i < items.length; i++) {
          items[i].dispose();
        }
      }
      Utility.createTreeItems(item,columnList,SWT.NONE,columnImage);
    }
  }
}",0.8416627744044839
79099,"protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          String type=tablesRs.getString(""String_Node_Str"");
          if (type.equalsIgnoreCase(""String_Node_Str""))           continue;
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
        }
        if (metaDataProvider.isProcedureSupported()) {
          DbObject dbObject=new DbObject(""String_Node_Str"",""String_Node_Str"",DbObject.PROCEDURE_TYPE,image);
          tableList.add(dbObject);
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        String tableName=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}","protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          String type=tablesRs.getString(""String_Node_Str"");
          if (type.equalsIgnoreCase(""String_Node_Str""))           continue;
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
        }
        if (metaDataProvider.isProcedureSupported()) {
          String fullyQualifiedTableName=""String_Node_Str"";
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + ""String_Node_Str"";
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,image);
          tableList.add(dbObject);
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        String tableName=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}",0.9699733096085408
79100,"public void dragStart(DragSourceEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection.length <= 0 || selection[0].getData() == null) {
    event.doit=false;
    return;
  }
}","public void dragStart(DragSourceEvent event){
  TreeItem[] selection=availableDbObjectsTree.getSelection();
  if (selection.length > 0 && selection[0].getData() instanceof DbObject) {
    if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
      event.doit=false;
      return;
    }
    ;
  }
 else   if (selection.length <= 0 || selection[0].getData() == null) {
    event.doit=false;
    return;
  }
}",0.6345256609642301
79101,"public void dragSetData(DragSourceEvent event){
  if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
    TreeItem[] selection=availableDbObjectsTree.getSelection();
    if (selection.length > 0) {
      Object obj=selection[0].getData();
      if (obj instanceof DbObject) {
        event.data=((DbObject)obj).getName();
      }
 else       event.data=selection[0].getData();
    }
  }
}","public void dragSetData(DragSourceEvent event){
  if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
    TreeItem[] selection=availableDbObjectsTree.getSelection();
    if (selection.length > 0) {
      Object obj=selection[0].getData();
      if (obj instanceof DbObject) {
        event.data=((DbObject)obj).getName();
      }
 else       if (obj instanceof Procedure) {
        event.data=((Procedure)obj).getProcedureName();
      }
 else       event.data=selection[0].getData();
    }
  }
}",0.881578947368421
79102,"/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}","/** 
 * Adds drag support to tree..Must set tree before execution.
 */
public void addDragSupportToTree(){
  DragSource dragSource=new DragSource(availableDbObjectsTree,DND.DROP_COPY);
  dragSource.setTransfer(new Transfer[]{TextTransfer.getInstance()});
  dragSource.addDragListener(new DragSourceAdapter(){
    public void dragStart(    DragSourceEvent event){
      TreeItem[] selection=availableDbObjectsTree.getSelection();
      if (selection.length > 0 && selection[0].getData() instanceof DbObject) {
        if (((DbObject)selection[0].getData()).getType() == DbObject.PROCEDURE_TYPE) {
          event.doit=false;
          return;
        }
        ;
      }
 else       if (selection.length <= 0 || selection[0].getData() == null) {
        event.doit=false;
        return;
      }
    }
    public void dragSetData(    DragSourceEvent event){
      if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
        TreeItem[] selection=availableDbObjectsTree.getSelection();
        if (selection.length > 0) {
          Object obj=selection[0].getData();
          if (obj instanceof DbObject) {
            event.data=((DbObject)obj).getName();
          }
 else           if (obj instanceof Procedure) {
            event.data=((Procedure)obj).getProcedureName();
          }
 else           event.data=selection[0].getData();
        }
      }
    }
  }
);
}",0.8438150770512286
79103,"/** 
 * get all procedure from special catalog,schemaPattern,and namePattern
 */
public ResultSet getAllProcedure(String cataLog,String schemaPattern,String namePattern){
  if (metaData == null) {
    metaData=getMetaData();
  }
  ResultSet resultSet=null;
  if (cataLog != null && cataLog.trim().length() == 0) {
    cataLog=null;
  }
  if (metaData != null) {
    try {
      resultSet=metaData.getProcedures(cataLog,schemaPattern,namePattern);
    }
 catch (    SQLException e) {
    }
  }
  return resultSet;
}","/** 
 * get all procedure from special catalog,schemaPattern,and namePattern
 */
public ArrayList getAllProcedure(String cataLog,String schemaPattern,String namePattern){
  ArrayList procedureList=new ArrayList();
  if (metaData == null) {
    metaData=getMetaData();
  }
  ResultSet procedureRs=null;
  if (cataLog != null && cataLog.trim().length() == 0) {
    cataLog=null;
  }
  if (metaData != null) {
    try {
      procedureRs=metaData.getProcedures(cataLog,schemaPattern,namePattern);
      boolean isSame;
      while (procedureRs.next()) {
        isSame=false;
        Procedure procedure=new Procedure();
        procedure.setProcedureName(procedureRs.getString(""String_Node_Str""));
        procedure.setSchema(procedureRs.getString(""String_Node_Str""));
        procedure.setCatalog(procedureRs.getString(""String_Node_Str""));
        for (int i=0; i < procedureList.size(); i++) {
          if (((Procedure)(procedureList.get(i))).isEqualWith(procedure))           isSame=true;
        }
        if (!isSame)         procedureList.add(procedure);
      }
    }
 catch (    SQLException e) {
    }
  }
  return procedureList;
}",0.4186327888687235
79104,"/** 
 * Get procedure's columns information
 */
public ArrayList getProcedureColumns(String cataLog,String schemaPattern,String procedureNamePattern,String columnNamePattern){
  ArrayList columnList=new ArrayList();
  if (metaData == null) {
    metaData=getMetaData();
  }
  ResultSet columnsRs=null;
  if (cataLog != null && cataLog.trim().length() == 0) {
    cataLog=null;
  }
  if (metaData != null) {
    try {
      columnsRs=metaData.getProcedureColumns(cataLog,schemaPattern,procedureNamePattern,columnNamePattern);
      int n=0;
      while (columnsRs.next()) {
        ProcedureParameter column=new ProcedureParameter();
        if (columnsRs.getString(""String_Node_Str"") != null)         column.setName(columnsRs.getString(""String_Node_Str""));
 else {
          n++;
          column.setName(""String_Node_Str"" + n);
        }
        column.setModeType(columnsRs.getInt(""String_Node_Str""));
        column.setDataTypeName(columnsRs.getString(""String_Node_Str""));
        column.setDataType(columnsRs.getInt(""String_Node_Str""));
        column.setProcedureName(columnsRs.getString(""String_Node_Str""));
        columnList.add(column);
      }
    }
 catch (    SQLException e) {
    }
  }
  return columnList;
}","/** 
 * Get procedure's columns information
 */
public ArrayList getProcedureColumns(String cataLog,String schemaPattern,String procedureNamePattern,String columnNamePattern){
  ArrayList columnList=new ArrayList();
  if (metaData == null) {
    metaData=getMetaData();
  }
  ResultSet columnsRs=null;
  if (cataLog != null && cataLog.trim().length() == 0) {
    cataLog=null;
  }
  if (metaData != null) {
    try {
      columnsRs=metaData.getProcedureColumns(cataLog,schemaPattern,procedureNamePattern,columnNamePattern);
      int n=0;
      while (columnsRs.next()) {
        ProcedureParameter column=new ProcedureParameter();
        column.setSchema(schemaPattern);
        if (columnsRs.getString(""String_Node_Str"") != null)         column.setName(columnsRs.getString(""String_Node_Str""));
 else {
          n++;
          column.setName(""String_Node_Str"" + n);
        }
        column.setModeType(columnsRs.getInt(""String_Node_Str""));
        column.setDataTypeName(columnsRs.getString(""String_Node_Str""));
        column.setDataType(columnsRs.getInt(""String_Node_Str""));
        column.setProcedureName(columnsRs.getString(""String_Node_Str""));
        columnList.add(column);
      }
    }
 catch (    SQLException e) {
    }
  }
  return columnList;
}",0.9835010060362172
79105,"/** 
 * @param composite
 * @param dataSource
 * @param image
 * @return
 */
public static TreeItem[] createTreeItems(TreeItem parentItem,ArrayList dataSource,int style,Image image){
  if (dataSource == null) {
    return null;
  }
  TreeItem item[]=new TreeItem[dataSource.size()];
  boolean addDummyNode=false;
  for (int i=0; i < dataSource.size(); i++) {
    item[i]=new TreeItem(parentItem,style);
    Object source=dataSource.get(i);
    String displayName=""String_Node_Str"";
    String name=""String_Node_Str"";
    if (source instanceof String) {
      displayName=(String)source;
      name=displayName;
      item[i].setData(name);
    }
 else     if (source instanceof TableImpl) {
      TableImpl table=(TableImpl)source;
      displayName=table.getTableAlias();
      name=table.getFullyQualifiedName();
      item[i].setData(name);
    }
 else     if (source instanceof TableItem) {
      displayName=((TableItem)source).getText();
      name=(String)((TableItem)source).getData();
      item[i].setData(name);
    }
 else     if (source instanceof DbObject) {
      DbObject dbObject=(DbObject)source;
      name=dbObject.getName();
      displayName=dbObject.getDisplayName();
      image=dbObject.getImage();
      addDummyNode=true;
      item[i].setData(dbObject);
    }
 else     if (source instanceof Column) {
      Column column=(Column)source;
      displayName=column.getName();
      name=column.getTableName() + ""String_Node_Str"" + displayName;
      String type=column.getDbType();
      displayName=displayName + ""String_Node_Str"" + type+ ""String_Node_Str"";
      if (column.getSchemaName() != null) {
        name=column.getSchemaName() + ""String_Node_Str"" + name;
      }
      item[i].setData(name);
    }
 else     if (source instanceof ProcedureParameter) {
      ProcedureParameter column=(ProcedureParameter)source;
      displayName=column.getName();
      name=displayName;
      int type=column.getModeType();
      String mode=toModeType(type);
      String dataType=column.getDataTypeName();
      displayName=displayName + ""String_Node_Str"" + dataType+ ""String_Node_Str""+ mode+ ""String_Node_Str"";
      item[i].setData(column);
    }
    item[i].setText(displayName);
    item[i].setImage(image);
    item[i].setExpanded(false);
    if (addDummyNode) {
      new TreeItem(item[i],style);
    }
  }
  return item;
}","/** 
 * @param composite
 * @param dataSource
 * @param image
 * @return
 */
public static TreeItem[] createTreeItems(TreeItem parentItem,ArrayList dataSource,int style,Image image){
  if (dataSource == null) {
    return null;
  }
  TreeItem item[]=new TreeItem[dataSource.size()];
  boolean addDummyNode=false;
  for (int i=0; i < dataSource.size(); i++) {
    item[i]=new TreeItem(parentItem,style);
    Object source=dataSource.get(i);
    String displayName=""String_Node_Str"";
    String name=""String_Node_Str"";
    if (source instanceof String) {
      displayName=(String)source;
      name=displayName;
      item[i].setData(name);
    }
 else     if (source instanceof TableImpl) {
      TableImpl table=(TableImpl)source;
      displayName=table.getTableAlias();
      name=table.getFullyQualifiedName();
      item[i].setData(name);
    }
 else     if (source instanceof TableItem) {
      displayName=((TableItem)source).getText();
      name=(String)((TableItem)source).getData();
      item[i].setData(name);
    }
 else     if (source instanceof DbObject) {
      DbObject dbObject=(DbObject)source;
      name=dbObject.getName();
      displayName=dbObject.getDisplayName();
      image=dbObject.getImage();
      addDummyNode=true;
      item[i].setData(dbObject);
    }
 else     if (source instanceof Column) {
      Column column=(Column)source;
      displayName=column.getName();
      name=column.getTableName() + ""String_Node_Str"" + displayName;
      String type=column.getDbType();
      displayName=displayName + ""String_Node_Str"" + type+ ""String_Node_Str"";
      if (column.getSchemaName() != null) {
        name=column.getSchemaName() + ""String_Node_Str"" + name;
      }
      item[i].setData(name);
    }
 else     if (source instanceof Procedure) {
      Procedure column=(Procedure)source;
      name=column.getProcedureName();
      displayName=name;
      addDummyNode=true;
      if (column.getSchema() != null)       name=column.getSchema() + ""String_Node_Str"" + displayName;
      item[i].setData(column);
    }
 else     if (source instanceof ProcedureParameter) {
      ProcedureParameter column=(ProcedureParameter)source;
      name=column.getName();
      displayName=name;
      if (column.getSchema() != null)       name=column.getSchema() + ""String_Node_Str"" + displayName;
      int type=column.getModeType();
      String mode=toModeType(type);
      String dataType=column.getDataTypeName();
      displayName=displayName + ""String_Node_Str"" + dataType+ ""String_Node_Str""+ mode+ ""String_Node_Str"";
      item[i].setData(column);
    }
    item[i].setText(displayName);
    item[i].setImage(image);
    item[i].setExpanded(false);
    if (addDummyNode) {
      new TreeItem(item[i],style);
    }
  }
  return item;
}",0.9038686987104336
79106,"/** 
 * get the tree item name from the tree item's object
 * @param selectedItem
 * @return
 */
public static String getTreeItemsName(TreeItem selectedItem){
  if (selectedItem == null) {
    return null;
  }
  String name=""String_Node_Str"";
  Object source=selectedItem.getData();
  if (source instanceof String) {
    name=(String)source;
  }
 else   if (source instanceof TableImpl) {
    TableImpl table=(TableImpl)source;
    name=table.getFullyQualifiedName();
  }
 else   if (source instanceof TableItem) {
    name=(String)((TableItem)source).getData();
  }
 else   if (source instanceof DbObject) {
    DbObject dbObject=(DbObject)source;
    name=dbObject.getName();
  }
 else   if (source instanceof Column) {
    Column column=(Column)source;
    String displayName=column.getName();
    name=column.getTableName() + ""String_Node_Str"" + displayName;
    String type=column.getDbType();
    displayName=displayName + ""String_Node_Str"" + type+ ""String_Node_Str"";
    if (column.getSchemaName() != null) {
      name=column.getSchemaName() + ""String_Node_Str"" + name;
    }
  }
  return name;
}","/** 
 * get the tree item name from the tree item's object
 * @param selectedItem
 * @return
 */
public static String getTreeItemsName(TreeItem selectedItem){
  if (selectedItem == null) {
    return null;
  }
  String name=""String_Node_Str"";
  Object source=selectedItem.getData();
  if (source instanceof String) {
    name=(String)source;
  }
 else   if (source instanceof TableImpl) {
    TableImpl table=(TableImpl)source;
    name=table.getFullyQualifiedName();
  }
 else   if (source instanceof TableItem) {
    name=(String)((TableItem)source).getData();
  }
 else   if (source instanceof DbObject) {
    DbObject dbObject=(DbObject)source;
    name=dbObject.getName();
  }
 else   if (source instanceof Column) {
    Column column=(Column)source;
    String displayName=column.getName();
    name=column.getTableName() + ""String_Node_Str"" + displayName;
    String type=column.getDbType();
    displayName=displayName + ""String_Node_Str"" + type+ ""String_Node_Str"";
    if (column.getSchemaName() != null) {
      name=column.getSchemaName() + ""String_Node_Str"" + name;
    }
  }
 else   if (source instanceof Procedure) {
    Procedure column=(Procedure)source;
    name=column.getProcedureName();
    if (column.getSchema() != null) {
      name=column.getSchema() + ""String_Node_Str"" + name;
    }
  }
  return name;
}",0.896013152486642
79107,"/** 
 * Add Driver Page to the Dialog
 * @param tabFolder tab Composite
 */
private void addDriverPage(TabFolder tabFolder){
  Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(300);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(100);
  TableColumn column3=new TableColumn(table,SWT.NONE);
  column3.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column3.setWidth(100);
  driverViewer=new TableViewer(table);
  driverViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  driverViewer.setSorter(null);
  driverViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateDriverButtons();
    }
  }
);
  driverViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      editDriver();
    }
  }
);
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  editButton=new Button(buttons,SWT.PUSH);
  editButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  editButton.setLayoutData(data);
  editButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editDriver();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}","/** 
 * Add Driver Page to the Dialog
 * @param tabFolder tab Composite
 */
private void addDriverPage(TabFolder tabFolder){
  Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(300);
  column1.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(1,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(100);
  column2.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(2,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  TableColumn column3=new TableColumn(table,SWT.NONE);
  column3.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column3.setWidth(100);
  column3.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortDriver(3,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  driverViewer=new TableViewer(table);
  driverViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  driverViewer.setSorter(null);
  driverViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateDriverButtons();
    }
  }
);
  driverViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      editDriver();
    }
  }
);
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=2;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  editButton=new Button(buttons,SWT.PUSH);
  editButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  editButton.setLayoutData(data);
  editButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editDriver();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}",0.8671091217780522
79108,"/** 
 * add Jar Page to the Dialog
 */
private void addJarPage(TabFolder tabFolder){
  final Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(150);
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(280);
  jarViewer=new TableViewer(table);
  jarViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  jarViewer.setSorter(null);
  jarViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateJarButtons();
    }
  }
);
  Label lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=4;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  addButton=new Button(buttons,SWT.PUSH);
  addButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  addButton.setLayoutData(data);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      addJar();
    }
  }
);
  restoreButton=new Button(buttons,SWT.PUSH);
  restoreButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  restoreButton.setLayoutData(data);
  restoreButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restoreJar();
    }
  }
);
  deleteButton=new Button(buttons,SWT.PUSH);
  deleteButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  deleteButton.setLayoutData(data);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteJar();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}","/** 
 * add Jar Page to the Dialog
 */
private void addJarPage(TabFolder tabFolder){
  final Composite page=new Composite(tabFolder,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  layout.verticalSpacing=5;
  page.setLayout(layout);
  page.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Table table=new Table(page,SWT.BORDER | SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(data);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableLayout tableLayout=new TableLayout();
  table.setLayout(tableLayout);
  final TableColumn column0=new TableColumn(table,SWT.NONE);
  column0.setWidth(20);
  final TableColumn column1=new TableColumn(table,SWT.NONE);
  column1.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column1.setWidth(150);
  column1.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortJar(1,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  final TableColumn column2=new TableColumn(table,SWT.NONE);
  column2.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  column2.setWidth(280);
  column2.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sortJar(2,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  jarViewer=new TableViewer(table);
  jarViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof Map) {
        return ((Map)inputElement).entrySet().toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  jarViewer.setSorter(null);
  jarViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateJarButtons();
    }
  }
);
  Label lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  lb=new Label(page,SWT.NONE);
  lb.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  Composite buttons=new Composite(page,SWT.NONE);
  buttons.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  layout=new GridLayout();
  layout.numColumns=4;
  layout.marginHeight=0;
  layout.marginWidth=0;
  buttons.setLayout(layout);
  addButton=new Button(buttons,SWT.PUSH);
  addButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  addButton.setLayoutData(data);
  addButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      addJar();
    }
  }
);
  restoreButton=new Button(buttons,SWT.PUSH);
  restoreButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  restoreButton.setLayoutData(data);
  restoreButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      restoreJar();
    }
  }
);
  deleteButton=new Button(buttons,SWT.PUSH);
  deleteButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  data=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  data.widthHint=btnWidth;
  data.heightHint=btnHeight;
  deleteButton.setLayoutData(data);
  deleteButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteJar();
    }
  }
);
  TabItem tabItem=new TabItem(tabFolder,SWT.NONE);
  tabItem.setControl(page);
  tabItem.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
}",0.9266339447171272
79109,"/** 
 * @return count of result objects
 */
public int getCount();","/** 
 * @return count of result objects
 */
public int getCount() throws DataException ;",0.8571428571428571
79110,"public boolean next() throws DataException {
  return resultSetCache.next();
}","public boolean next() throws DataException {
  checkOpenStates();
  return resultSetCache.next();
}",0.8813559322033898
79111,"public int getCurrentIndex() throws DataException {
  return resultSetCache.getCurrentIndex();
}","public int getCurrentIndex() throws DataException {
  checkOpenStates();
  return resultSetCache.getCurrentIndex();
}",0.9014084507042254
79112,"public IResultObject getCurrentResult() throws DataException {
  return resultSetCache.getCurrentResult();
}","public IResultObject getCurrentResult() throws DataException {
  checkOpenStates();
  return resultSetCache.getCurrentResult();
}",0.9113924050632912
79113,"public IResultObject fetch() throws DataException {
  return resultSetCache.fetch();
}","public IResultObject fetch() throws DataException {
  checkOpenStates();
  return resultSetCache.fetch();
}",0.8911917098445595
79114,"public void reset() throws DataException {
  resultSetCache.reset();
}","public void reset() throws DataException {
  checkOpenStates();
  resultSetCache.reset();
}",0.8695652173913043
79115,"public int getCount(){
  return resultSetCache.getCount();
}","public int getCount() throws DataException {
  checkOpenStates();
  return resultSetCache.getCount();
}",0.7361963190184049
79116,"public void close(){
  resultSetCache.close();
  resultSetCache=null;
}","public void close(){
  if (isOpen == false)   return;
  resultSetCache.close();
  resultSetCache=null;
  isOpen=false;
}",0.743455497382199
79117,"public void moveTo(int destIndex) throws DataException {
  resultSetCache.moveTo(destIndex);
}","public void moveTo(int destIndex) throws DataException {
  checkOpenStates();
  resultSetCache.moveTo(destIndex);
}",0.8995215311004785
79118,"private String findWord(ITextViewer viewer,int offset) throws BadLocationException {
  char ch=viewer.getDocument().getChar(offset);
  int startOffset=offset;
  if (isClosingQuoteChar(ch)) {
    startOffset--;
    char quoteChar=ch;
    if (quoteChar != '\'' || quoteChar != '""') {
      quoteChar=getOpeningQuoteChar();
    }
    for (; startOffset > viewer.getTopIndexStartOffset(); startOffset--) {
      ch=viewer.getDocument().getChar(startOffset);
      if (ch == quoteChar) {
        break;
      }
    }
  }
 else {
    while (startOffset > viewer.getTopIndexStartOffset() && Character.isLetterOrDigit(viewer.getDocument().getChar(startOffset))) {
      startOffset--;
    }
    startOffset++;
  }
  return viewer.getDocument().get(startOffset,offset - startOffset + 1);
}","private String findWord(ITextViewer viewer,int offset) throws BadLocationException {
  char ch=viewer.getDocument().getChar(offset);
  int startOffset=offset;
  if (isClosingQuoteChar(ch)) {
    startOffset--;
    char quoteChar=ch;
    if (quoteChar != '\'' || quoteChar != '""') {
      quoteChar=getOpeningQuoteChar();
    }
    for (; startOffset > viewer.getTopIndexStartOffset(); startOffset--) {
      ch=viewer.getDocument().getChar(startOffset);
      if (ch == quoteChar) {
        break;
      }
    }
  }
 else {
    while (startOffset > viewer.getTopIndexStartOffset() && viewer.getDocument().getChar(startOffset) != '.' && viewer.getDocument().getChar(startOffset) != ' ') {
      startOffset--;
    }
    startOffset++;
  }
  return viewer.getDocument().get(startOffset,offset - startOffset + 1);
}",0.9472361809045228
79119,"protected Connection connectMetadataProvider(IMetaDataProvider metadata,OdaDataSourceHandle dataSourceHandle){
  if (dataSourceHandle.getExtensionID().equals(SampleDBDriver.DATA_SOURCE_ID) && metadata instanceof JdbcMetaDataProvider) {
    String user=""String_Node_Str"";
    String password=""String_Node_Str"";
    String url=SampleDBDriver.getUrl();
    return ((JdbcMetaDataProvider)metadata).connect(user,password,url,SampleDBDriver.DRIVER_CLASS,SampleDBDriver.DATA_SOURCE_ID);
  }
 else   return super.connectMetadataProvider(metadata,dataSourceHandle);
}","protected Connection connectMetadataProvider(IMetaDataProvider metadata,OdaDataSourceHandle dataSourceHandle){
  if (dataSourceHandle.getExtensionID().equals(SampleDBDriver.DATA_SOURCE_ID) && metadata instanceof JdbcMetaDataProvider) {
    String user=""String_Node_Str"";
    String password=""String_Node_Str"";
    String url=SampleDBDriver.getUrl();
    try {
      dataSourceHandle.setProperty(""String_Node_Str"",SampleDBDriver.DRIVER_CLASS);
      dataSourceHandle.setProperty(""String_Node_Str"",url);
      dataSourceHandle.setProperty(""String_Node_Str"",SampleDBDriver.SAMPLE_DB_SCHEMA);
    }
 catch (    SemanticException e) {
    }
    return ((JdbcMetaDataProvider)metadata).connect(user,password,url,SampleDBDriver.DRIVER_CLASS,SampleDBDriver.DATA_SOURCE_ID);
  }
 else   return super.connectMetadataProvider(metadata,dataSourceHandle);
}",0.7075606276747504
79120,"protected Control createContents(Composite parent){
  Control control=super.createContents(parent);
  setTitle(DIALOG_TITLE);
  setMessage(PROMRT_MESSAGE);
  getShell().setText(title);
  categoryTable.setInput(""String_Node_Str"");
  sourceViewer.getTextWidget().setFocus();
  return control;
}","protected Control createContents(Composite parent){
  Control control=super.createContents(parent);
  setTitle(DIALOG_TITLE);
  setMessage(PROMRT_MESSAGE);
  getShell().setText(title);
  categoryTable.setInput(""String_Node_Str"");
  getShell().setDefaultButton(null);
  sourceViewer.getTextWidget().setFocus();
  return control;
}",0.9404186795491144
79121,"public void widgetSelected(SelectionEvent e){
  Button button=(Button)e.getSource();
  sourceViewer.getTextWidget().insert((String)button.getData());
}","public void widgetSelected(SelectionEvent e){
  Button button=(Button)e.getSource();
  insertText((String)button.getData());
}",0.8808664259927798
79122,"private void createOperatorsBar(Composite parent){
  String[] operators=provider.getOperators();
  if (operators == null || operators.length == 0) {
    return;
  }
  Composite operatorsBar=new Composite(parent,SWT.NONE);
  operatorsBar.setLayout(new GridLayout(2,false));
  operatorsBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lable=new Label(operatorsBar,SWT.NONE);
  lable.setText(LABEL_OPERATORS);
  lable.setLayoutData(new GridData(70,SWT.DEFAULT));
  Composite operatorsArea=new Composite(operatorsBar,SWT.NONE);
  operatorsArea.setLayout(UIUtil.createGridLayoutWithoutMargin(operators.length,true));
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Button button=(Button)e.getSource();
      sourceViewer.getTextWidget().insert((String)button.getData());
    }
  }
;
  for (int i=0; i < operators.length; i++) {
    Button button=new Button(operatorsArea,SWT.PUSH);
    button.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (operators[i] != IExpressionProvider.OPERATOR_SEPARATOR) {
      button.setData(operators[i]);
      String text=operators[i];
      if (text.indexOf(""String_Node_Str"") != -1) {
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      button.setText(text);
      button.addSelectionListener(selectionAdapter);
    }
 else {
      button.setVisible(false);
    }
  }
}","private void createOperatorsBar(Composite parent){
  String[] operators=provider.getOperators();
  if (operators == null || operators.length == 0) {
    return;
  }
  Composite operatorsBar=new Composite(parent,SWT.NONE);
  operatorsBar.setLayout(new GridLayout(2,false));
  operatorsBar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lable=new Label(operatorsBar,SWT.NONE);
  lable.setText(LABEL_OPERATORS);
  lable.setLayoutData(new GridData(70,SWT.DEFAULT));
  Composite operatorsArea=new Composite(operatorsBar,SWT.NONE);
  operatorsArea.setLayout(UIUtil.createGridLayoutWithoutMargin(operators.length,true));
  SelectionAdapter selectionAdapter=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Button button=(Button)e.getSource();
      insertText((String)button.getData());
    }
  }
;
  for (int i=0; i < operators.length; i++) {
    Button button=new Button(operatorsArea,SWT.PUSH);
    button.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (operators[i] != IExpressionProvider.OPERATOR_SEPARATOR) {
      button.setData(operators[i]);
      String text=operators[i];
      if (text.indexOf(""String_Node_Str"") != -1) {
        text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      button.setText(text);
      button.addSelectionListener(selectionAdapter);
    }
 else {
      button.setVisible(false);
    }
  }
}",0.9876630243214664
79123,"public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  if (event.getSource() == functionTable) {
    String insertText=provider.getInsertText(selection.getFirstElement());
    if (insertText != null) {
      sourceViewer.getTextWidget().insert(insertText);
    }
    return;
  }
}","public void doubleClick(DoubleClickEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (selection.isEmpty()) {
    return;
  }
  if (event.getSource() == functionTable) {
    String insertText=provider.getInsertText(selection.getFirstElement());
    if (insertText != null) {
      insertText(insertText);
    }
    return;
  }
}",0.9442282749675746
79124,"protected void okPressed(){
  expression=UIUtil.convertToModelString(sourceViewer.getTextWidget().getText(),true);
  super.okPressed();
}","protected void okPressed(){
  expression=sourceViewer.getTextWidget().getText().trim();
  super.okPressed();
}",0.8582995951417004
79125,"protected Control createButtonBar(Composite parent){
  Composite composite=(Composite)super.createButtonBar(buttonBar);
  createButton(composite,IDialogConstants.HELP_ID,IDialogConstants.HELP_LABEL,false);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  return composite;
}","protected Control createButtonBar(Composite parent){
  Composite composite=(Composite)super.createButtonBar(buttonBar);
  GridLayout layout=(GridLayout)composite.getLayout();
  layout.numColumns=1;
  composite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  return composite;
}",0.8685015290519877
79126,"/** 
 * Deserialze result object array from input stream. Datatype Corresponds to executor#setDataType One point needs to be noticed that the read and write procedure is strictly be conversed. 
 * @param br input stream
 * @param length how many objects needs to be read
 * @return result object array
 * @throws IOException
 */
IResultObject[] readData(BufferedInputStream bis,int length) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  byte[] intBytes=new byte[FixedBytesLengOfInt];
  int rowDataLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  ObjectInputStream ois;
  for (int i=0; i < length; i++) {
    bis.read(intBytes);
    rowDataLen=getIntOfBytes(intBytes);
    rowDataBytes=new byte[rowDataLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    ois=new ObjectInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (isNullObject(readIndex,j))       obs[j]=null;
 else       if (fieldType.equals(Integer.class))       obs[j]=new Integer(ois.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(ois.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(ois.readUTF());
 else       if (fieldType.equals(Date.class))       obs[j]=new Date(ois.readLong());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(ois.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(ois.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(ois.readBoolean());
 else       if (fieldType.equals(String.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE)))       obs[j]=ois.readUTF();
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    bais=null;
    ois=null;
    readIndex++;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param posHint hint info of current read position, this value does not affect the sequence reading
 * @return result object array
 * @throws IOException
 */
IResultObject[] readData(BufferedInputStream bis,int length,int posHint) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  byte[] intBytes=new byte[FixedBytesLengOfInt];
  int rowDataLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  ObjectInputStream ois;
  for (int i=0; i < length; i++) {
    bis.read(intBytes);
    rowDataLen=getIntOfBytes(intBytes);
    rowDataBytes=new byte[rowDataLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    ois=new ObjectInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (isNullObject(posHint + i,j))       obs[j]=null;
 else       if (fieldType.equals(Integer.class))       obs[j]=new Integer(ois.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(ois.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(ois.readUTF());
 else       if (fieldType.equals(Date.class))       obs[j]=new Date(ois.readLong());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(ois.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(ois.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(ois.readBoolean());
 else       if (fieldType.equals(String.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE)))       obs[j]=ois.readUTF();
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    bais=null;
    ois=null;
  }
  return rowDatas;
}",0.8822937625754527
79127,"/** 
 * In serializaing data to file and deserializing it from file, metadata information is necessary to know which data type a column is, and then proper read/write method will be called. This method must be called at first when any actual read/write action is taken. Since multi thread might call DtE at the same time, an instance needs to be new to correspond to different metadata.
 * @param rsMetaData
 * @throws DataException
 */
static ResultObjectUtil newInstance(IResultClass rsMetaData){
  ResultObjectUtil instance=new ResultObjectUtil();
  int length=rsMetaData.getFieldCount();
  instance.typeArray=new Class[length];
  for (int i=0; i < length; i++) {
    try {
      instance.typeArray[i]=rsMetaData.getFieldValueClass(i + 1);
    }
 catch (    DataException e) {
    }
  }
  instance.columnCount=rsMetaData.getFieldCount();
  instance.rsMetaData=rsMetaData;
  instance.readIndex=0;
  instance.writeIndex=0;
  instance.nullObjectSet=new HashSet();
  return instance;
}","/** 
 * In serializaing data to file and deserializing it from file, metadata information is necessary to know which data type a column is, and then proper read/write method will be called. This method must be called at first when any actual read/write action is taken. Since multi thread might call DtE at the same time, an instance needs to be new to correspond to different metadata.
 * @param rsMetaData
 * @throws DataException
 */
static ResultObjectUtil newInstance(IResultClass rsMetaData){
  ResultObjectUtil instance=new ResultObjectUtil();
  int length=rsMetaData.getFieldCount();
  instance.typeArray=new Class[length];
  for (int i=0; i < length; i++) {
    try {
      instance.typeArray[i]=rsMetaData.getFieldValueClass(i + 1);
    }
 catch (    DataException e) {
    }
  }
  instance.columnCount=rsMetaData.getFieldCount();
  instance.rsMetaData=rsMetaData;
  instance.writeIndex=0;
  instance.nullObjectSet=new HashSet();
  return instance;
}",0.9825102880658436
79128,"/** 
 * Serialze result object array to file
 * @param bos output stream
 * @param resultObjects result objects needs to be deserialized
 * @param length how many objects to be deserialized
 * @throws IOException
 * @throws DataException
 * @throws Exception
 */
void writeData(BufferedOutputStream bos,IResultObject[] resultObjects,int length) throws IOException {
  byte[] rowsDataByte=new byte[0];
  ByteArrayOutputStream baos;
  ObjectOutputStream oos;
  for (int i=0; i < length; i++) {
    baos=new ByteArrayOutputStream();
    oos=new ObjectOutputStream(baos);
    for (int j=0; j < columnCount; j++) {
      Object fieldValue=null;
      try {
        fieldValue=resultObjects[i].getFieldValue(j + 1);
      }
 catch (      DataException e) {
      }
      Class fieldType=typeArray[j];
      if (fieldValue == null)       putNullObject(writeIndex,j);
 else       if (fieldType.equals(Integer.class))       oos.writeInt(((Integer)fieldValue).intValue());
 else       if (fieldType.equals(Double.class))       oos.writeDouble(((Double)fieldValue).doubleValue());
 else       if (fieldType.equals(BigDecimal.class))       oos.writeUTF(((BigDecimal)fieldValue).toString());
 else       if (fieldType.equals(Date.class))       oos.writeLong(((Date)fieldValue).getTime());
 else       if (fieldType.equals(Time.class))       oos.writeLong(((Time)fieldValue).getTime());
 else       if (fieldType.equals(Timestamp.class))       oos.writeLong(((Timestamp)fieldValue).getTime());
 else       if (fieldType.equals(Boolean.class))       oos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else       if (fieldType.equals(String.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE)))       oos.writeUTF(fieldValue.toString());
    }
    oos.flush();
    rowsDataByte=baos.toByteArray();
    bos.write(getBytesOfInt(rowsDataByte.length));
    bos.write(rowsDataByte);
    rowsDataByte=null;
    baos=null;
    oos=null;
    writeIndex++;
  }
}","/** 
 * Serialze result object array to file. The serialize procedure is conversed with de-serialize(read) procedure.
 * @param bos output stream
 * @param resultObjects result objects needs to be deserialized
 * @param length how many objects to be deserialized
 * @throws IOException
 */
void writeData(BufferedOutputStream bos,IResultObject[] resultObjects,int length) throws IOException {
  byte[] rowsDataByte=new byte[0];
  ByteArrayOutputStream baos;
  ObjectOutputStream oos;
  for (int i=0; i < length; i++) {
    baos=new ByteArrayOutputStream();
    oos=new ObjectOutputStream(baos);
    for (int j=0; j < columnCount; j++) {
      Object fieldValue=null;
      try {
        fieldValue=resultObjects[i].getFieldValue(j + 1);
      }
 catch (      DataException e) {
      }
      Class fieldType=typeArray[j];
      if (fieldValue == null)       putNullObject(writeIndex,j);
 else       if (fieldType.equals(Integer.class))       oos.writeInt(((Integer)fieldValue).intValue());
 else       if (fieldType.equals(Double.class))       oos.writeDouble(((Double)fieldValue).doubleValue());
 else       if (fieldType.equals(BigDecimal.class))       oos.writeUTF(((BigDecimal)fieldValue).toString());
 else       if (fieldType.equals(Date.class))       oos.writeLong(((Date)fieldValue).getTime());
 else       if (fieldType.equals(Time.class))       oos.writeLong(((Time)fieldValue).getTime());
 else       if (fieldType.equals(Timestamp.class))       oos.writeLong(((Timestamp)fieldValue).getTime());
 else       if (fieldType.equals(Boolean.class))       oos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else       if (fieldType.equals(String.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE)))       oos.writeUTF(fieldValue.toString());
    }
    oos.flush();
    rowsDataByte=baos.toByteArray();
    bos.write(getBytesOfInt(rowsDataByte.length));
    bos.write(rowsDataByte);
    rowsDataByte=null;
    baos=null;
    oos=null;
    writeIndex++;
  }
}",0.969773939547879
79129,"/** 
 * Parses a dimension string.
 * @param value the dimension string to parse
 * @param localeDependent <code>ture</code> means that the string needs to be parsed in locale-dependent way.
 * @return a dimension object representing the dimension string.
 * @throws PropertyValueException if the string is not valid
 */
private static DimensionValue doParse(String value,boolean localeDependent) throws PropertyValueException {
  value=StringUtil.trimString(value);
  if (value == null)   return null;
  String units=validateUnit(value);
  int indexOfFirstLetter=indexOfUnitLetter(value);
  if (indexOfFirstLetter != -1) {
    value=value.substring(0,indexOfFirstLetter).trim();
  }
  double measure=0;
  try {
    if (localeDependent) {
      validateDecimalValue(value);
      Number number=NumberFormat.getNumberInstance(ThreadResources.getLocale()).parse(value);
      measure=number.doubleValue();
    }
 else {
      measure=Double.parseDouble(value);
    }
  }
 catch (  ParseException e) {
    throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,PropertyType.DIMENSION_TYPE);
  }
  return new DimensionValue(measure,units);
}","/** 
 * Parses a dimension string.
 * @param value the dimension string to parse
 * @param localeDependent <code>ture</code> means that the string needs to be parsed in locale-dependent way.
 * @return a dimension object representing the dimension string.
 * @throws PropertyValueException if the string is not valid
 */
private static DimensionValue doParse(String value,boolean localeDependent) throws PropertyValueException {
  value=StringUtil.trimString(value);
  if (value == null)   return null;
  String units=validateUnit(value);
  int indexOfFirstLetter=indexOfUnitLetter(value);
  if (indexOfFirstLetter != -1) {
    value=StringUtil.trimString(value.substring(0,indexOfFirstLetter));
    if (value == null)     return null;
  }
  double measure=0;
  try {
    if (localeDependent) {
      validateDecimalValue(value);
      Number number=NumberFormat.getNumberInstance(ThreadResources.getLocale()).parse(value);
      measure=number.doubleValue();
    }
 else {
      measure=Double.parseDouble(value);
    }
  }
 catch (  ParseException e) {
    throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,PropertyType.DIMENSION_TYPE);
  }
  return new DimensionValue(measure,units);
}",0.970906068162926
79130,"/** 
 * Resolves the layout to specified rows. This is for rows in Table Header, Table Footer, Detail and Group Footer.
 * @param mappingSlot the slot information
 * @param row the table row to resolve
 * @param module the report module
 */
private static void applyLayoutOnRow(LayoutSlot mappingSlot,TableRow row,Module module){
  List cells=row.getContentsSlot();
  if (cells.size() == 0)   return;
  LayoutRow mappingRow=mappingSlot.getCurrentLayoutRow();
  for (int i=0, startCol=1; i < cells.size(); i++) {
    Cell cell=(Cell)cells.get(i);
    int colSpan=cell.getColSpan(module);
    int definedColumn=cell.getColumn(module);
    if (definedColumn != 0) {
      startCol=definedColumn;
      cell.setProperty(Cell.COLUMN_PROP,null);
    }
 else     startCol=findFillInPosition(mappingRow,startCol,colSpan);
    mappingSlot.addCell(startCol,cell.getRowSpan(module),colSpan,cell,false);
    startCol+=colSpan;
  }
}","/** 
 * Resolves the layout to specified rows. This is for rows in Table Header, Table Footer, Detail and Group Footer.
 * @param mappingSlot the slot information
 * @param row the table row to resolve
 * @param module the report module
 */
private static void applyLayoutOnRow(LayoutSlot mappingSlot,TableRow row,Module module){
  List cells=row.getContentsSlot();
  if (cells.size() == 0)   return;
  LayoutRow mappingRow=mappingSlot.getCurrentLayoutRow();
  for (int i=0, startCol=1; i < cells.size(); i++) {
    Cell cell=(Cell)cells.get(i);
    int colSpan=cell.getColSpan(module);
    int definedColumn=cell.getColumn(module);
    if (definedColumn != 0)     startCol=definedColumn;
 else     startCol=findFillInPosition(mappingRow,startCol,colSpan);
    mappingSlot.addCell(startCol,cell.getRowSpan(module),colSpan,cell,false);
    startCol+=colSpan;
  }
}",0.749298934380258
79131,"public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterHints();
  addCustomFields(odaStatement);
  addColumnHints(odaStatement);
  try {
    odaStatement.setColumnsProjection(this.projectedFields);
  }
 catch (  DataException e) {
  }
  try {
    resultMetadata=odaStatement.getMetaData();
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  odaStatement=dataSource.prepareStatement(queryText,queryType);
  addProperties();
  addParameterHints();
  addCustomFields(odaStatement);
  addColumnHints(odaStatement);
  odaStatement.setColumnsProjection(this.projectedFields);
  try {
    resultMetadata=odaStatement.getMetaData();
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.7255813953488373
79132,"/** 
 * Inserts a copied column to the given column index.
 * @param columnIndex the column index
 * @param data the copied column band data
 * @return a list containing post-parsing errors. Each element in the listis <code>ErrorDetail</code>.
 * @throws SemanticException if layouts of slots are different.
 */
protected List insertAndPasteColumnBand(int columnIndex,ColumnBandData data) throws SemanticException {
  boolean canDone=canInsertAndPaste(columnIndex,data);
  if (!canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_FORBIDDEN);
  TableColumn column=data.getColumn();
  List cells=data.getCells();
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(columnIndex));
  try {
    adapter.getModule().getActivityStack().startSlientTrans();
    pasteColumn(column,columnIndex,true);
    pasteCells(cells,originalCells,columnIndex,true);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
  return doPostPasteCheck(column,cells);
}","/** 
 * Inserts a copied column to the given column index.
 * @param columnIndex the column index
 * @param data the copied column band data
 * @return a list containing post-parsing errors. Each element in the listis <code>ErrorDetail</code>.
 * @throws SemanticException if layouts of slots are different.
 */
protected List insertAndPasteColumnBand(int columnIndex,ColumnBandData data) throws SemanticException {
  boolean canDone=canInsertAndPaste(columnIndex,data);
  if (!canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_FORBIDDEN);
  TableColumn column=data.getColumn();
  List cells=data.getCells();
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(columnIndex));
  try {
    adapter.getModule().getActivityStack().startTrans();
    pasteColumn(column,columnIndex,true);
    pasteCells(cells,originalCells,columnIndex,true);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
  return doPostPasteCheck(column,cells);
}",0.9974554707379136
79133,"/** 
 * Pastes a column to the given <code>target</code>.
 * @param columnIndex the column number
 * @param inForce <code>true</code> if paste regardless of the difference of cell layouts, otherwise <code>false</code>.
 * @param data the copied column band data
 * @return a list containing post-parsing errors. Each element in the listis <code>ErrorDetail</code>.
 * @throws SemanticException if layouts of slots are different. Or, <code>inForce</code> is <code>false</code> and the layout of cells are different.
 */
protected List pasteColumnBand(int columnIndex,boolean inForce,ColumnBandData data) throws SemanticException {
  boolean canDone=canPaste(columnIndex,inForce,data);
  if (inForce && !canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_FORBIDDEN);
  if (!inForce && !canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_DIFFERENT_LAYOUT);
  TableColumn column=data.getColumn();
  List cells=data.getCells();
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(columnIndex));
  try {
    adapter.getModule().getActivityStack().startSlientTrans();
    pasteColumn(column,columnIndex,false);
    pasteCells(cells,originalCells,columnIndex,false);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
  return doPostPasteCheck(column,cells);
}","/** 
 * Pastes a column to the given <code>target</code>.
 * @param columnIndex the column number
 * @param inForce <code>true</code> if paste regardless of the difference of cell layouts, otherwise <code>false</code>.
 * @param data the copied column band data
 * @return a list containing post-parsing errors. Each element in the listis <code>ErrorDetail</code>.
 * @throws SemanticException if layouts of slots are different. Or, <code>inForce</code> is <code>false</code> and the layout of cells are different.
 */
protected List pasteColumnBand(int columnIndex,boolean inForce,ColumnBandData data) throws SemanticException {
  boolean canDone=canPaste(columnIndex,inForce,data);
  if (inForce && !canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_FORBIDDEN);
  if (!inForce && !canDone)   throw new SemanticError(adapter.getElementHandle().getElement(),SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_DIFFERENT_LAYOUT);
  TableColumn column=data.getColumn();
  List cells=data.getCells();
  List originalCells=getCellsContextInfo(adapter.getCellsUnderColumn(columnIndex));
  try {
    adapter.getModule().getActivityStack().startTrans();
    pasteColumn(column,columnIndex,false);
    pasteCells(cells,originalCells,columnIndex,false);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
  return doPostPasteCheck(column,cells);
}",0.9980793854033292
79134,"/** 
 * Moves one column band from <code>sourceColumn</code> to <code>destColumn</code>.
 * @param sourceColumn the source column to shift
 * @param destColumn the target column to shift
 * @throws SemanticException
 */
protected void shiftColumnBand(int sourceColumn,int destColumn) throws SemanticException {
  ColumnBandData data=getShiftData(sourceColumn);
  int newPosn=adjustDestPosn(sourceColumn,destColumn);
  if (newPosn == -1)   return;
  if (!checkTargetColumn(sourceColumn,destColumn))   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{Integer.toString(sourceColumn),adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_FORBIDDEN);
  try {
    adapter.getModule().getActivityStack().startSlientTrans();
    shiftColumn(data.getColumn(),sourceColumn,newPosn);
    shiftCells(data.getCells(),sourceColumn,newPosn);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
}","/** 
 * Moves one column band from <code>sourceColumn</code> to <code>destColumn</code>.
 * @param sourceColumn the source column to shift
 * @param destColumn the target column to shift
 * @throws SemanticException
 */
protected void shiftColumnBand(int sourceColumn,int destColumn) throws SemanticException {
  ColumnBandData data=getShiftData(sourceColumn);
  int newPosn=adjustDestPosn(sourceColumn,destColumn);
  if (newPosn == -1)   return;
  if (!checkTargetColumn(sourceColumn,destColumn))   throw new SemanticError(adapter.getElementHandle().getElement(),new String[]{Integer.toString(sourceColumn),adapter.getElementHandle().getName()},SemanticError.DESIGN_EXCEPTION_COLUMN_PASTE_FORBIDDEN);
  try {
    adapter.getModule().getActivityStack().startTrans();
    shiftColumn(data.getColumn(),sourceColumn,newPosn);
    shiftCells(data.getCells(),sourceColumn,newPosn);
  }
 catch (  SemanticException e) {
    adapter.getModule().getActivityStack().rollback();
    throw e;
  }
  adapter.getModule().getActivityStack().commit();
}",0.9971181556195964
79135,"public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  java.sql.ResultSetMetaData resultmd=null;
  try {
    assertNotNull(callStat);
    resultmd=callStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=executeQuery();
    try {
      if (mdRs != null)       pstmtResultMetaData=mdRs.getMetaData();
    }
 catch (    OdaException e) {
    }
  }
  return pstmtResultMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  java.sql.ResultSetMetaData resultmd=null;
  try {
    assertNotNull(callStat);
    resultmd=callStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=null;
    try {
      mdRs=executeQuery();
    }
 catch (    OdaException e) {
      mdRs=null;
    }
    try {
      if (mdRs != null)       pstmtResultMetaData=mdRs.getMetaData();
 else       pstmtResultMetaData=new SPResultSetMetaData(null);
    }
 catch (    OdaException e) {
    }
  }
  return pstmtResultMetaData;
}",0.7589679043423537
79136,"/** 
 * get Localized string by the resouce key of this item and <code>Locale</code> object in <code>context</code>
 * @param resourceKey the resource key
 * @param text the default value
 * @return the localized string if it is defined in report deign, elsereturn the default value
 */
protected String getLocalizedString(String resourceKey,String text){
  if (context.getReport() == null || resourceKey == null) {
    return text;
  }
  String ret=context.getReport().getMessage(resourceKey,context.getLocale());
  if (ret == null) {
    logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{resourceKey,context.getLocale().toString()});
    return text;
  }
  return ret;
}","/** 
 * get Localized string by the resouce key of this item and <code>Locale</code> object in <code>context</code>
 * @param resourceKey the resource key
 * @param text the default value
 * @return the localized string if it is defined in report deign, elsereturn the default value
 */
protected String getLocalizedString(String resourceKey,String text){
  if (context.getReport() == null || resourceKey == null) {
    return text;
  }
  String ret=context.getReport().getMessage(resourceKey,context.getLocale());
  if (ret == null || ""String_Node_Str"".equals(ret)) {
    logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{resourceKey,context.getLocale().toString()});
    return text;
  }
  return ret;
}",0.9762076423936552
79137,"public boolean process(IResultObject resultObject) throws DataException {
}","public boolean process(IResultObject resultObject,int rowIndex) throws DataException {
}",0.9202453987730062
79138,"public boolean process(IResultObject row) throws DataException {
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"");
  Context cx=Context.enter();
  try {
    boolean isAccepted=true;
    Iterator filterIt=filters.iterator();
    scriptObj.setRowObject(row,false);
    while (filterIt.hasNext()) {
      IFilterDefinition filter=(IFilterDefinition)filterIt.next();
      IBaseExpression expr=filter.getExpression();
      Object result=ScriptEvalUtil.evalExpr(expr,cx,scope,""String_Node_Str"",0);
      if (result == null) {
        Object info=null;
        if (expr instanceof IScriptExpression)         info=((IScriptExpression)expr).getText();
 else         info=expr;
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
      }
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == false) {
          isAccepted=false;
          break;
        }
      }
 catch (      BirtException e) {
        DataException e1=new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
        logger.logp(Level.FINE,FilterByRow.class.getName(),""String_Node_Str"",""String_Node_Str"",e1);
        throw e1;
      }
    }
    return isAccepted;
  }
  finally {
    Context.exit();
    logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  }
}","public boolean process(IResultObject row,int rowIndex) throws DataException {
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"");
  Context cx=Context.enter();
  try {
    boolean isAccepted=true;
    Iterator filterIt=filters.iterator();
    scriptObj.setRowObject(row,false);
    scriptObj.setCurrentRowIndex(rowIndex);
    while (filterIt.hasNext()) {
      IFilterDefinition filter=(IFilterDefinition)filterIt.next();
      IBaseExpression expr=filter.getExpression();
      Object result=ScriptEvalUtil.evalExpr(expr,cx,scope,""String_Node_Str"",0);
      if (result == null) {
        Object info=null;
        if (expr instanceof IScriptExpression)         info=((IScriptExpression)expr).getText();
 else         info=expr;
        throw new DataException(ResourceConstants.INVALID_EXPRESSION_IN_FILTER,info);
      }
      try {
        if (DataTypeUtil.toBoolean(result).booleanValue() == false) {
          isAccepted=false;
          break;
        }
      }
 catch (      BirtException e) {
        DataException e1=new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
        logger.logp(Level.FINE,FilterByRow.class.getName(),""String_Node_Str"",""String_Node_Str"",e1);
        throw e1;
      }
    }
    return isAccepted;
  }
  finally {
    Context.exit();
    logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  }
}",0.9786276715410572
79139,"/** 
 * Process the provided result object. This method may decide to exclude  this object from the result set by returning false.  This method may modify the object by setting custom field values.
 * @return true  if resultObject should be accepted false if resultObject should be excluded
 * @throws DataException
 */
public boolean process(IResultObject resultObject) throws DataException ;","/** 
 * Process the provided result object. This method may decide to exclude  this object from the result set by returning false.  This method may modify the object by setting custom field values.
 * @return true  if resultObject should be accepted false if resultObject should be excluded
 * @throws DataException
 */
public boolean process(IResultObject resultObject,int rowIndex) throws DataException ;",0.983729662077597
79140,"/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",dataSet.getScriptable());
    return dataSet.getScriptable();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",new Integer(resultSet.getCurrentResultIndex()));
      return new Integer(resultSet.getCurrentResultIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    IResultObject obj=this.getResultObject();
    if (obj != null) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",obj.getFieldValue(name));
      return obj.getFieldValue(name);
    }
  }
 catch (  DataException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",super.get(name,start));
  return super.get(name,start);
}","/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",dataSet.getScriptable());
    return dataSet.getScriptable();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      return getCurrentRowIndex();
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    IResultObject obj=this.getResultObject();
    if (obj != null) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",obj.getFieldValue(name));
      return obj.getFieldValue(name);
    }
  }
 catch (  DataException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",super.get(name,start));
  return super.get(name,start);
}",0.6626180836707153
79141,"/** 
 * @see org.eclipse.birt.data.engine.odi.IResultObjectEvent#process(org.eclipse.birt.data.engine.odi.IResultObject)
 */
public boolean process(IResultObject resultObject) throws DataException {
  rowObject.setRowObject(resultObject,true);
  Context cx=Context.enter();
  try {
    ScriptEvalUtil.evaluateJSAsMethod(cx,scope,script,""String_Node_Str"",0);
  }
  finally {
    Context.exit();
  }
  return true;
}","/** 
 * @see org.eclipse.birt.data.engine.odi.IResultObjectEvent#process(org.eclipse.birt.data.engine.odi.IResultObject)
 */
public boolean process(IResultObject resultObject,int rowIndex) throws DataException {
  rowObject.setRowObject(resultObject,true);
  rowObject.setCurrentRowIndex(rowIndex);
  Context cx=Context.enter();
  try {
    ScriptEvalUtil.evaluateJSAsMethod(cx,scope,script,""String_Node_Str"",0);
  }
  finally {
    Context.exit();
  }
  return true;
}",0.9377123442808608
79142,"private void prepareExecution(IQueryResults outerRts,Scriptable targetScope) throws DataException {
  if (isPrepared)   return;
  dataSource=findDataSource();
  if (targetScope == null) {
    if (this.dataSource != null) {
      dataSource.setScope(engine.getSharedScope());
      this.scope=DataEngineImpl.createSubscope(this.dataSource.getScriptable());
    }
 else     this.scope=DataEngineImpl.createSubscope(engine.getSharedScope());
  }
 else {
    if (this.dataSource != null) {
      dataSource.setScope(targetScope);
      this.scope=DataEngineImpl.createSubscope(this.dataSource.getScriptable());
    }
 else     this.scope=targetScope;
  }
  openDataSource();
  this.outerResults=outerRts;
  dataSet=newDataSetRuntime();
  rowObject=new JSRowObject(dataSet);
  this.scope.put(""String_Node_Str"",this.scope,rowObject);
  if (dataSet != null) {
    dataSet.beforeOpen();
  }
  odiQuery=createOdiQuery();
  populateOdiQuery();
  prepareOdiQuery();
  isPrepared=true;
}","private void prepareExecution(IQueryResults outerRts,Scriptable targetScope) throws DataException {
  if (isPrepared)   return;
  dataSource=findDataSource();
  if (targetScope == null) {
    if (this.dataSource != null) {
      dataSource.setScope(engine.getSharedScope());
      this.scope=DataEngineImpl.createSubscope(this.dataSource.getScriptable());
    }
 else     this.scope=DataEngineImpl.createSubscope(engine.getSharedScope());
  }
 else {
    if (this.dataSource != null) {
      dataSource.setScope(createSubscope(targetScope));
      this.scope=createSubscope(this.dataSource.getScriptable());
    }
 else     this.scope=targetScope;
  }
  openDataSource();
  this.outerResults=outerRts;
  dataSet=newDataSetRuntime();
  rowObject=new JSRowObject(dataSet);
  this.scope.put(""String_Node_Str"",this.scope,rowObject);
  if (dataSet != null) {
    dataSet.beforeOpen();
  }
  odiQuery=createOdiQuery();
  populateOdiQuery();
  prepareOdiQuery();
  isPrepared=true;
}",0.9523321373654536
79143,"/** 
 * Gets a ROM Script DataSource object wrapper for this object
 */
public Scriptable getScriptable(){
  if (jsObject == null) {
    jsObject=new JSDataSource(this,dataEngine.getSharedScope());
  }
  return jsObject;
}","/** 
 * Gets a ROM Script DataSource object wrapper for this object
 */
public Scriptable getScriptable(){
  assert(this.scope != null);
  if (jsObject == null) {
    jsObject=new JSDataSource(this,this.scope);
  }
  return jsObject;
}",0.8577680525164114
79144,"/** 
 * Creates and/or opens the required data source 
 */
protected void openDataSource() throws DataException {
}","/** 
 * Open the required DataSource. This method should be called after ""dataSource"" is initialized by findDataSource() method.
 * @throws DataException
 */
protected void openDataSource() throws DataException {
}",0.3586626139817629
79145,"/** 
 * Return the QueryResults. But the execution of query would be deferred 
 * @param outerResults If query is nested within another query, this is the outer query's query result handle.
 * @param scope The ElementState object for the report item using the query; this acts as the JS scope for evaluating script expressions.
 */
protected QueryResults doPrepare(IQueryResults outerResults,Scriptable scope) throws DataException {
  if (this.queryDefn == null) {
    DataException e=new DataException(ResourceConstants.PREPARED_QUERY_CLOSED);
    logger.logp(Level.WARNING,PreparedQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  Executor executor=newExecutor();
  if (scope == null) {
    scope=DataEngineImpl.createSubscope(getDataEngine().getSharedScope());
  }
  logger.finer(""String_Node_Str"");
  executor.prepareExecution(outerResults,scope);
  logger.finer(""String_Node_Str"");
  return new QueryResults(getDataSourceQuery(),this,executor);
}","/** 
 * Return the QueryResults. But the execution of query would be deferred 
 * @param outerResults If query is nested within another query, this is the outer query's query result handle.
 * @param scope The ElementState object for the report item using the query; this acts as the JS scope for evaluating script expressions.
 */
protected QueryResults doPrepare(IQueryResults outerResults,Scriptable scope) throws DataException {
  if (this.queryDefn == null) {
    DataException e=new DataException(ResourceConstants.PREPARED_QUERY_CLOSED);
    logger.logp(Level.WARNING,PreparedQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  Executor executor=newExecutor();
  logger.finer(""String_Node_Str"");
  executor.prepareExecution(outerResults,scope);
  logger.finer(""String_Node_Str"");
  return new QueryResults(getDataSourceQuery(),this,executor);
}",0.7604726100966702
79146,"private void prepareExecution(IQueryResults outerRts,Scriptable scope) throws DataException {
}","private void prepareExecution(IQueryResults outerRts,Scriptable targetScope) throws DataException {
  if (isPrepared)   return;
  dataSource=findDataSource();
  if (targetScope == null) {
    if (this.dataSource != null) {
      dataSource.setScope(engine.getSharedScope());
      this.scope=DataEngineImpl.createSubscope(this.dataSource.getScriptable());
    }
 else     this.scope=DataEngineImpl.createSubscope(engine.getSharedScope());
  }
 else {
    if (this.dataSource != null) {
      dataSource.setScope(targetScope);
      this.scope=DataEngineImpl.createSubscope(this.dataSource.getScriptable());
    }
 else     this.scope=targetScope;
  }
  openDataSource();
  this.outerResults=outerRts;
  dataSet=newDataSetRuntime();
  rowObject=new JSRowObject(dataSet);
  this.scope.put(""String_Node_Str"",this.scope,rowObject);
  if (dataSet != null) {
    dataSet.beforeOpen();
  }
  odiQuery=createOdiQuery();
  populateOdiQuery();
  prepareOdiQuery();
  isPrepared=true;
}",0.1757009345794392
79147,"/** 
 * Selects rows
 * @param numbers
 */
public void selectRow(int[] numbers){
  if (numbers == null || numbers.length == 0) {
    return;
  }
  ArrayList list=new ArrayList();
  int size=numbers.length;
  int height=0;
  int minRownumber=numbers[0];
  for (int i=0; i < size; i++) {
    if (minRownumber > numbers[i]) {
      minRownumber=numbers[i];
    }
    height=height + TableUtil.caleVisualHeight(this,getRow(numbers[i]));
    list.add(new DummyRowEditPart(getRow(numbers[i])));
  }
  for (int i=0; i < size; i++) {
    int columnNumber=getTableAdapter().getColumnCount();
    for (int j=0; j < columnNumber; j++) {
      TableCellEditPart part=getCell(numbers[i],j + 1);
      if (part != null) {
        list.add(part);
      }
    }
  }
  int y=TableUtil.caleY(this,minRownumber);
  Rectangle rect=new Rectangle(0,y,getFigure().getBounds().width - (getFigure().getInsets().left + getFigure().getInsets().right),height);
  setSelectRowAndColumnRect(rect);
  getViewer().setSelection(new StructuredSelection(list));
  setSelectRowAndColumnRect(null);
}","/** 
 * Selects rows
 * @param numbers
 */
public void selectRow(int[] numbers){
  if (numbers == null || numbers.length == 0) {
    return;
  }
  ArrayList list=new ArrayList();
  int size=numbers.length;
  int height=0;
  int minRownumber=numbers[0];
  for (int i=0; i < size; i++) {
    if (minRownumber > numbers[i]) {
      minRownumber=numbers[i];
    }
    height=height + TableUtil.caleVisualHeight(this,getRow(numbers[i]));
    list.add(new DummyRowEditPart(getRow(numbers[i])));
  }
  for (int i=0; i < size; i++) {
    int columnNumber=getTableAdapter().getColumnCount();
    for (int j=0; j < columnNumber; j++) {
      TableCellEditPart part=getCell(numbers[i],j + 1);
      if (part != null) {
        list.add(part);
      }
    }
  }
  int y=TableUtil.caleY(this,minRownumber);
  Rectangle rect=new Rectangle(0,y,TableUtil.getTableContentsWidth(this),height);
  setSelectRowAndColumnRect(rect);
  getViewer().setSelection(new StructuredSelection(list));
  setSelectRowAndColumnRect(null);
}",0.8409859835669405
79148,"/** 
 * Selects the columns
 * @param numbers
 */
public void selectColumn(int[] numbers){
  if (numbers == null || numbers.length == 0) {
    return;
  }
  ArrayList list=new ArrayList();
  int size=numbers.length;
  int width=0;
  int minColumnnumber=numbers[0];
  for (int i=0; i < size; i++) {
    if (minColumnnumber > numbers[i]) {
      minColumnnumber=numbers[i];
    }
    width=width + TableUtil.caleVisualWidth(this,getColumn(numbers[i]));
    list.add(new DummyColumnEditPart(getColumn(numbers[i])));
  }
  for (int i=0; i < size; i++) {
    int rowNumber=getTableAdapter().getRowCount();
    for (int j=0; j < rowNumber; j++) {
      TableCellEditPart part=getCell(j + 1,numbers[i]);
      if (part != null) {
        list.add(part);
      }
    }
  }
  int x=TableUtil.caleX(this,minColumnnumber);
  Rectangle rect=new Rectangle(x,0,width,getFigure().getBounds().height - (getFigure().getInsets().top + getFigure().getInsets().bottom));
  setSelectRowAndColumnRect(rect);
  getViewer().setSelection(new StructuredSelection(list));
  setSelectRowAndColumnRect(null);
}","/** 
 * Selects the columns
 * @param numbers
 */
public void selectColumn(int[] numbers){
  if (numbers == null || numbers.length == 0) {
    return;
  }
  ArrayList list=new ArrayList();
  int size=numbers.length;
  int width=0;
  int minColumnnumber=numbers[0];
  for (int i=0; i < size; i++) {
    if (minColumnnumber > numbers[i]) {
      minColumnnumber=numbers[i];
    }
    width=width + TableUtil.caleVisualWidth(this,getColumn(numbers[i]));
    list.add(new DummyColumnEditPart(getColumn(numbers[i])));
  }
  for (int i=0; i < size; i++) {
    int rowNumber=getTableAdapter().getRowCount();
    for (int j=0; j < rowNumber; j++) {
      TableCellEditPart part=getCell(j + 1,numbers[i]);
      if (part != null) {
        list.add(part);
      }
    }
  }
  int x=TableUtil.caleX(this,minColumnnumber);
  Rectangle rect=new Rectangle(x,0,width,TableUtil.getTableContentsHeight(this));
  setSelectRowAndColumnRect(rect);
  getViewer().setSelection(new StructuredSelection(list));
  setSelectRowAndColumnRect(null);
}",0.8494061757719715
79149,"public void run(){
  if (getOwner().getViewer().getControl().isVisible()) {
    if (getOwner().getViewer() instanceof DeferredGraphicalViewer)     ((DeferredGraphicalViewer)getOwner().getViewer()).setSelection(new StructuredSelection(list),false);
  }
}","public void run(){
  UIUtil.resetViewSelection(getOwner().getViewer(),false);
}",0.3313253012048193
79150,"public void layout(IFigure container){
  if (data != null && data.columnWidths != null && data.columnWidths.length == getColumnCount() && data.rowHeights != null && data.rowHeights.length == getRowCount() && !needlayout || !owner.isActive()) {
    return;
  }
  helper=new TableBorderHelper(owner);
  helper.updateCellBorderInsets();
  data=new WorkingData();
  data.columnWidths=new TableLayoutData.ColumnData[getColumnCount()];
  data.rowHeights=new TableLayoutData.RowData[getRowCount()];
  init(data.columnWidths,data.rowHeights);
  List children=container.getChildren();
  initMinSize(children);
  initMergeMinsize(children);
  caleLayoutData(container);
  layoutTable(container);
  resetRowMinSize(data.rowHeights);
  initRowMinSize(children);
  initRowMergeMinsize(children);
  caleRowData();
  layoutTable(container);
  setConstraint(container,data);
  needlayout=false;
  final List list=((StructuredSelection)getOwner().getViewer().getSelection()).toList();
  boolean hasCell=false;
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof TableCellEditPart || list.get(i) instanceof TableEditPart) {
      hasCell=true;
      break;
    }
  }
  if (hasCell) {
    Platform.run(new SafeRunnable(){
      public void run(){
        if (getOwner().getViewer().getControl().isVisible()) {
          if (getOwner().getViewer() instanceof DeferredGraphicalViewer)           ((DeferredGraphicalViewer)getOwner().getViewer()).setSelection(new StructuredSelection(list),false);
        }
      }
    }
);
  }
}","public void layout(IFigure container){
  if (data != null && data.columnWidths != null && data.columnWidths.length == getColumnCount() && data.rowHeights != null && data.rowHeights.length == getRowCount() && !needlayout || !owner.isActive()) {
    return;
  }
  helper=new TableBorderHelper(owner);
  helper.updateCellBorderInsets();
  data=new WorkingData();
  data.columnWidths=new TableLayoutData.ColumnData[getColumnCount()];
  data.rowHeights=new TableLayoutData.RowData[getRowCount()];
  init(data.columnWidths,data.rowHeights);
  List children=container.getChildren();
  initMinSize(children);
  initMergeMinsize(children);
  caleLayoutData(container);
  layoutTable(container);
  resetRowMinSize(data.rowHeights);
  initRowMinSize(children);
  initRowMergeMinsize(children);
  caleRowData();
  layoutTable(container);
  setConstraint(container,data);
  needlayout=false;
  reselect();
}",0.7289256198347107
79151,"private void updateButtons(){
  add.setEnabled(valueList.getSelectionCount() != 0 || valueEditor.getText().trim().length() != 0);
  addAll.setEnabled(valueList.getItemCount() != 0);
  remove.setEnabled(selectedList.getSelectionCount() != 0);
  removeAll.setEnabled(selectedList.getItemCount() != 0);
  getOkButton().setEnabled(selectedList.getItemCount() != 0);
}","private void updateButtons(){
  add.setEnabled(valueList.getSelectionCount() != 0 || (valueEditor.getText().trim().length() != 0 && selectedList.indexOf(valueEditor.getText().trim()) == -1));
  addAll.setEnabled(valueList.getItemCount() != 0);
  remove.setEnabled(selectedList.getSelectionCount() != 0);
  removeAll.setEnabled(selectedList.getItemCount() != 0);
  getOkButton().setEnabled(selectedList.getItemCount() != 0);
}",0.9213197969543148
79152,"private void filteValues(){
  valueList.removeAll();
  valueList.deselectAll();
  for (Iterator itor=resultList.iterator(); itor.hasNext(); ) {
    String value=(String)itor.next();
    try {
      if (selectedList.indexOf(value) == -1 && value.startsWith(valueEditor.getText()) || value.matches(valueEditor.getText())) {
        valueList.add(value);
      }
    }
 catch (    PatternSyntaxException e) {
    }
  }
  updateButtons();
}","private void filteValues(){
  valueList.removeAll();
  valueList.deselectAll();
  for (Iterator itor=resultList.iterator(); itor.hasNext(); ) {
    String value=(String)itor.next();
    try {
      if (selectedList.indexOf(value) == -1 && (value.startsWith(valueEditor.getText().trim()) || value.matches(valueEditor.getText().trim()))) {
        valueList.add(value);
      }
    }
 catch (    PatternSyntaxException e) {
    }
  }
  updateButtons();
}",0.981981981981982
79153,"private void paintStretched(Graphics g){
  Image image=getImage();
  Rectangle area=getClientArea();
  g.drawImage(image,new Rectangle(image.getBounds()),area);
}","private void paintStretched(Graphics g){
  Image image=getImage();
  Rectangle area=getClientArea();
  if (area.height > 0 && area.width > 0) {
    g.drawImage(image,new Rectangle(image.getBounds()),area);
  }
}",0.868632707774799
79154,"public ReportElementHandle getItemDesign(){
}","public ReportElementHandle getItemDesign(){
  if (reportItems.empty()) {
    return null;
  }
  return (ReportElementHandle)reportItems.peek();
}",0.4736842105263157
79155,"public String getType(){
  return element.getDefn().getName();
}","public String getType(){
  if (element == null) {
    return ""String_Node_Str"";
  }
  return element.getDefn().getName();
}",0.6844919786096256
79156,"public String getElementInfo(){
  return element.getName();
}","public String getElementInfo(){
  if (element == null) {
    return ""String_Node_Str"";
  }
  return element.getName();
}",0.6740331491712708
79157,"/** 
 * creates the appropriate platform object based on the platform type  If not running from Eclipse, this functions must be called before calling other functions.
 */
synchronized static public void initialize(IPlatformContext context){
  if (platform == null) {
    if (runningEclipse()) {
      platform=new EclipsePlatform();
      platformType=ECLIPSE_PLATFORM;
    }
 else {
      if (context == null)       context=new PlatformFileContext();
      platform=new ServerPlatform(context);
      platformType=SERVER_PLATFORM;
    }
  }
}","/** 
 * creates the appropriate platform object based on the platform type  If not running from Eclipse, this functions must be called before calling other functions.
 */
synchronized static public void initialize(IPlatformContext context){
  if (platform == null) {
    if (runningEclipse()) {
      log.log(Level.FINE,""String_Node_Str"");
      platform=new EclipsePlatform();
      platformType=ECLIPSE_PLATFORM;
    }
 else {
      log.log(Level.FINE,""String_Node_Str"");
      if (context == null)       context=new PlatformFileContext();
      platform=new ServerPlatform(context);
      platformType=SERVER_PLATFORM;
    }
  }
}",0.923469387755102
79158,"public List getFolderList(String homeFolder,String subFolder){
  List folderList=new ArrayList();
  String folderString=homeFolder;
  if ((subFolder != null) && (subFolder.length() > 0))   folderString+=directorySeparator + subFolder;
  Set files=context.getResourcePaths(folderString);
  if ((files != null) && (files.size() > 0)) {
    for (Iterator it=files.iterator(); it.hasNext(); ) {
      Object obj=it.next();
      if (!(obj instanceof String))       continue;
      String pluginPath=(String)obj;
      if (hasChildren(pluginPath)) {
        folderList.add(pluginPath);
      }
    }
  }
  return folderList;
}","public List getFolderList(String homeFolder,String subFolder){
  List folderList=new ArrayList();
  String folderString=homeFolder;
  if ((subFolder != null) && (subFolder.length() > 0)) {
    if (folderString.endsWith(directorySeparator)) {
      folderString+=directorySeparator;
    }
    folderString+=subFolder;
  }
  Set files=context.getResourcePaths(folderString);
  if ((files != null) && (files.size() > 0)) {
    for (Iterator it=files.iterator(); it.hasNext(); ) {
      Object obj=it.next();
      if (!(obj instanceof String))       continue;
      String pluginPath=(String)obj;
      if (hasChildren(pluginPath)) {
        folderList.add(pluginPath);
      }
    }
  }
  return folderList;
}",0.9322289156626506
79159,"public URL getURL(String folder,String fileName){
  URL url=null;
  try {
    url=new URL(urlLeadingString + folder + fileName);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  return url;
}","public URL getURL(String folder,String fileName){
  URL url=null;
  try {
    String realPath=context.getRealPath(folder + fileName);
    if (realPath == null) {
      url=context.getResource(folder + fileName);
      log.log(Level.FINE,""String_Node_Str"",new Object[]{folder,fileName,realPath});
    }
 else {
      url=new File(realPath).toURL();
      log.log(Level.FINE,""String_Node_Str"",new Object[]{folder,fileName,realPath});
    }
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  return url;
}",0.491180461329715
79160,"/** 
 * Testcase for test setCategoryProvider() method
 */
public void testSetCategoryProvider(){
  BaseAttributePage page=new BaseAttributePage(new Shell(),SWT.NULL);
  page.setCategoryProvider(null);
  assertEquals(0,page.categoryList.getItemCount());
  final String[] labels=new String[]{""String_Node_Str"",""String_Node_Str""};
  page.setCategoryProvider(new ICategoryProvider(){
    public String[] getCategoryLabels(){
      return labels;
    }
    public void createCategoryPanes(    Composite parent,    List input){
    }
    public void setCategoryInput(    Composite parent,    List input){
    }
    public Control getCategoryPane(    String category){
      return null;
    }
  }
);
  assertEquals(labels.length,page.categoryList.getItemCount());
  assertEquals(0,page.categoryList.getSelectionIndex());
}","/** 
 * Testcase for test setCategoryProvider() method
 */
public void testSetCategoryProvider(){
  BaseAttributePage page=new BaseAttributePage(new Shell(),SWT.NULL);
  page.setCategoryProvider(null);
  assertEquals(0,page.categoryList.getItemCount());
  final String[] labels=new String[]{""String_Node_Str"",""String_Node_Str""};
  page.setCategoryProvider(new ICategoryProvider(){
    public String[] getCategoryLabels(){
      return labels;
    }
    public void createCategoryPanes(    Composite parent,    List input){
    }
    public void setCategoryInput(    Composite parent,    List input){
    }
    public Control getCategoryPane(    String category){
      return null;
    }
    public String getCategoryByIndex(    int index){
      return null;
    }
  }
);
  assertEquals(labels.length,page.categoryList.getItemCount());
  assertEquals(0,page.categoryList.getSelectionIndex());
}",0.9544392523364486
79161,"protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          if (tablesRs.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))           continue;
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          String type=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        if (tablesRs.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))         continue;
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}","protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          String type=tablesRs.getString(""String_Node_Str"");
          if (type.equalsIgnoreCase(""String_Node_Str""))           continue;
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        String tableName=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}",0.9773917182294146
79162,"/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterHints() throws DataException {
  if (paramHints == null)   return;
  Iterator list=paramHints.iterator();
  while (list.hasNext()) {
    IParameterDefinition paramDef=(IParameterDefinition)list.next();
    ParameterHint parameterHint=new ParameterHint(paramDef.getName(),paramDef.isInputMode(),paramDef.isOutputMode());
    parameterHint.setPosition(paramDef.getPosition());
    Class dataTypeClass=DataType.getClass(paramDef.getType());
    if (dataTypeClass == DataType.AnyType.class || dataTypeClass == Boolean.class || dataTypeClass == Blob.class) {
      dataTypeClass=null;
    }
    parameterHint.setDataType(dataTypeClass);
    parameterHint.setIsInputOptional(paramDef.isInputOptional());
    parameterHint.setDefaultInputValue(paramDef.getDefaultInputValue());
    parameterHint.setIsNullable(paramDef.isNullable());
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode()) {
      Object inputValue=convertToValue(paramDef.getDefaultInputValue(),paramDef.getType());
      this.setInputParamValue(parameterHint.getName(),inputValue);
    }
  }
  this.setInputParameterBinding();
}","/** 
 * Adds input and output parameter hints to odaStatement
 */
private void addParameterHints() throws DataException {
  if (paramHints == null)   return;
  Iterator list=paramHints.iterator();
  while (list.hasNext()) {
    IParameterDefinition paramDef=(IParameterDefinition)list.next();
    ParameterHint parameterHint=new ParameterHint(paramDef.getName(),paramDef.isInputMode(),paramDef.isOutputMode());
    parameterHint.setPosition(paramDef.getPosition());
    Class dataTypeClass=DataType.getClass(paramDef.getType());
    if (dataTypeClass == DataType.AnyType.class || dataTypeClass == Boolean.class || dataTypeClass == Blob.class) {
      dataTypeClass=null;
    }
    parameterHint.setDataType(dataTypeClass);
    parameterHint.setIsInputOptional(paramDef.isInputOptional());
    parameterHint.setDefaultInputValue(paramDef.getDefaultInputValue());
    parameterHint.setIsNullable(paramDef.isNullable());
    odaStatement.addParameterHint(parameterHint);
    if (parameterHint.isInputMode() && paramDef.getDefaultInputValue() != null) {
      Object inputValue=convertToValue(paramDef.getDefaultInputValue(),paramDef.getType());
      this.setInputParamValue(parameterHint.getName(),inputValue);
    }
  }
  this.setInputParameterBinding();
}",0.9825699229833806
79163,"protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          String type=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}","protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    for (int i=0; i < targetSchemaList.size(); i++) {
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          if (tablesRs.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))           continue;
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          String type=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (expandDbObjectsTree && item != null && item.length > 0) {
            availableDbObjectsTree.showItem(item[0]);
          }
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        if (tablesRs.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))         continue;
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}",0.9740794573643412
79164,"/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(OdaDataSourceHandle curDataSourceHandle){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
    metaDataProvider=new JdbcMetaDataProvider(null);
    jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceHandle);
    tableList=null;
    schemaList=null;
  }
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * Initializes the Jdbc related information , used  by this page ( such as the Jdbc Connection , Catalog Name etc )
 * @param curDataSourceHandle
 */
protected void resetJdbcInfo(OdaDataSourceHandle curDataSourceHandle){
  if (metaDataProvider != null) {
    metaDataProvider.closeConnection();
    metaDataProvider=new JdbcMetaDataProvider(null);
    jdbcConnection=connectMetadataProvider(metaDataProvider,curDataSourceHandle);
    tableList=null;
    schemaList=null;
    schemaCombo.removeAll();
  }
  try {
    if (jdbcConnection != null) {
      isSchemaSupported=metaDataProvider.isSchemaSupported();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9783743475018642
79165,"/** 
 * @param schemaRs: The ResultSet containing the List of schema
 * @return A List of schema names
 */
private ArrayList createSchemaList(ResultSet schemaRs){
  if (schemaRs == null) {
    return null;
  }
  ArrayList schemas=new ArrayList();
  try {
    while (schemaRs.next()) {
      schemas.add(schemaRs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return schemas;
}","/** 
 * @param schemaRs: The ResultSet containing the List of schema
 * @return A List of schema names
 */
private ArrayList createSchemaList(ResultSet schemaRs){
  if (schemaRs == null) {
    return null;
  }
  ArrayList schemas=new ArrayList();
  try {
    ResultSet rs=null;
    while (schemaRs.next()) {
      rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaRs.getString(""String_Node_Str""),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
      boolean hasNonSystemTable=false;
      if (rs != null) {
        while (rs.next()) {
          if (!""String_Node_Str"".equalsIgnoreCase(rs.getString(""String_Node_Str""))) {
            hasNonSystemTable=true;
            break;
          }
        }
      }
      if (hasNonSystemTable) {
        schemas.add(schemaRs.getString(""String_Node_Str""));
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return schemas;
}",0.6142542248346804
79166,"/** 
 * @param schemaRs: The ResultSet containing the List of schema
 * @return A List of schema names
 */
private ArrayList createSchemaList(ResultSet schemaRs){
  if (schemaRs == null) {
    return null;
  }
  ArrayList schemas=new ArrayList();
  try {
    ResultSet rs=null;
    while (schemaRs.next()) {
      rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaRs.getString(""String_Node_Str""),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
      boolean hasNonSystemTable=false;
      if (rs != null) {
        while (rs.next()) {
          if (!""String_Node_Str"".equalsIgnoreCase(rs.getString(""String_Node_Str""))) {
            hasNonSystemTable=true;
            break;
          }
        }
      }
      if (hasNonSystemTable) {
        schemas.add(schemaRs.getString(""String_Node_Str""));
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return schemas;
}","/** 
 * @param schemaRs: The ResultSet containing the List of schema
 * @return A List of schema names
 */
private ArrayList createSchemaList(ResultSet schemaRs){
  if (schemaRs == null) {
    return null;
  }
  ArrayList schemas=new ArrayList();
  ArrayList allSchemas=new ArrayList();
  try {
    while (schemaRs.next()) {
      allSchemas.add(schemaRs.getString(""String_Node_Str""));
    }
    ResultSet rs=null;
    Iterator it=allSchemas.iterator();
    while (it.hasNext()) {
      String schema=it.next().toString();
      rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schema,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
      boolean hasNonSystemTable=false;
      if (rs != null) {
        while (rs.next()) {
          if (!""String_Node_Str"".equalsIgnoreCase(rs.getString(""String_Node_Str""))) {
            hasNonSystemTable=true;
            break;
          }
        }
      }
      if (hasNonSystemTable) {
        schemas.add(schema);
      }
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return schemas;
}",0.8487853247397125
79167,"private void refreshPage(){
  OdaDataSourceHandle curDataSourceHandle=(OdaDataSourceHandle)((OdaDataSetHandle)getContainer().getModel()).getDataSource();
  if (curDataSourceHandle != prevDataSourceHandle) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceHandle);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceHandle);
    prevDataSourceHandle=curDataSourceHandle;
    populateAvailableDbObjects();
  }
}","private void refreshPage(){
  OdaDataSourceHandle curDataSourceHandle=(OdaDataSourceHandle)((OdaDataSetHandle)getContainer().getModel()).getDataSource();
  if (curDataSourceHandle != prevDataSourceHandle) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceHandle);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceHandle);
    prevDataSourceHandle=curDataSourceHandle;
    populateAvailableDbObjects();
  }
}",0.955078125
79168,"/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  if (isSchemaSupported) {
    Label schemaLabel=new Label(selectTableGroup,SWT.LEFT);
    schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo=new Combo(selectTableGroup,SWT.READ_ONLY);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    schemaCombo.setLayoutData(gd);
  }
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}","/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  enableSchemaComponent(isSchemaSupported);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}",0.9873675039930304
79169,"public int compare(Object o1,Object o2){
  String name1;
  String name2;
  if (o1 instanceof DesignElementHandle && o2 instanceof DesignElementHandle) {
    name1=((DesignElementHandle)o1).getDisplayLabel();
    name2=((DesignElementHandle)o2).getDisplayLabel();
    if (name1 == null) {
      name1=((DesignElementHandle)o1).getName();
    }
    if (name2 == null) {
      name2=((DesignElementHandle)o2).getName();
    }
  }
 else {
    name1=o1.toString();
    name2=o2.toString();
  }
  if (name1 == null) {
    name1=""String_Node_Str"";
  }
  if (name2 == null) {
    name2=""String_Node_Str"";
  }
  if (ascending) {
    return Collator.getInstance().compare(name1,name2);
  }
 else {
    return Collator.getInstance().compare(name2,name1);
  }
}","public int compare(Object o1,Object o2){
  String name1;
  String name2;
  if (o1 instanceof DesignElementHandle && o2 instanceof DesignElementHandle) {
    name1=((DesignElementHandle)o1).getDisplayLabel();
    name2=((DesignElementHandle)o2).getDisplayLabel();
    if (name1 == null) {
      name1=((DesignElementHandle)o1).getName();
    }
    if (name2 == null) {
      name2=((DesignElementHandle)o2).getName();
    }
  }
  if (o1 instanceof IChoice && o2 instanceof IChoice) {
    name1=((IChoice)o1).getDisplayName();
    name2=((IChoice)o2).getDisplayName();
    if (name1 == null) {
      name1=((IChoice)o1).getName();
    }
    if (name2 == null) {
      name2=((IChoice)o2).getName();
    }
  }
 else {
    name1=o1.toString();
    name2=o2.toString();
  }
  if (name1 == null) {
    name1=""String_Node_Str"";
  }
  if (name2 == null) {
    name2=""String_Node_Str"";
  }
  if (ascending) {
    return Collator.getInstance().compare(name1,name2);
  }
 else {
    return Collator.getInstance().compare(name2,name1);
  }
}",0.84251968503937
79170,"/** 
 * Returns all font names for current system. NOTES: Java 1.4 only support true type fonts.
 * @return font names.
 */
public static String[] getSystemFontNames(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  return ge.getAvailableFontFamilyNames();
}","/** 
 * Returns all font names for current system. NOTES: Java 1.4 only support true type fonts.
 * @param comparator Sort comparator.
 * @return font names.
 */
public static String[] getSystemFontNames(Comparator comparator){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  String[] fontNames=ge.getAvailableFontFamilyNames();
  if (comparator != null) {
    Arrays.sort(fontNames,comparator);
  }
  return fontNames;
}",0.7621621621621621
79171,"/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",dataSet.getScriptable());
    return dataSet.getScriptable();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",new Integer(resultSet.getCurrentResultIndex()));
      return new Integer(resultSet.getCurrentResultIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    IResultObject obj=this.getResultObject();
    if (obj != null) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",obj.getFieldValue(name));
      return obj.getFieldValue(name);
    }
  }
 catch (  DataException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",super.get(name,start));
  return super.get(name,start);
}","/** 
 * Gets a named property
 */
public Object get(String name,Scriptable start){
  logger.entering(JSRowObject.class.getName(),""String_Node_Str"",name);
  if (name.equals(DATA_SET)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",dataSet.getScriptable());
    return dataSet.getScriptable();
  }
 else   if (name.equals(COLUMN_MD)) {
    if (logger.isLoggable(Level.FINER))     logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",getColumnMetadataScriptable());
    return getColumnMetadataScriptable();
  }
 else   if (name.equals(ROW_POSITION)) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",new Integer(resultSet.getCurrentResultIndex()));
      return new Integer(resultSet.getCurrentResultIndex());
    }
 catch (    DataException e) {
      logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    }
  }
  try {
    IResultObject obj=this.getResultObject();
    if (obj != null) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",obj.getFieldValue(name));
      return obj.getFieldValue(name);
    }
  }
 catch (  DataException e) {
    logger.logp(Level.FINER,JSColumnDefn.class.getName(),""String_Node_Str"",e.getMessage(),e);
    return new DataExceptionMocker(e);
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(JSRowObject.class.getName(),""String_Node_Str"",super.get(name,start));
  return super.get(name,start);
}",0.9874557735606304
79172,"private static Object evaluateJSScript(Context cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  Object result=null;
  try {
    Script compiledScript=ScriptUtil.getCompiledScript(scriptText,source,lineNo);
    result=compiledScript.exec(cx,scope);
    if (result instanceof Undefined) {
      return null;
    }
  }
 catch (  RhinoException e) {
    RethrowJSEvalException(e,scriptText,source,lineNo);
  }
  return convertNativeObjToJavaObj(result);
}","private static Object evaluateJSScript(Context cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  Object result=null;
  try {
    Script compiledScript=ScriptUtil.getCompiledScript(scriptText,source,lineNo);
    result=compiledScript.exec(cx,scope);
    if (result instanceof DataExceptionMocker) {
      throw ((DataExceptionMocker)result).getCause();
    }
    if (result instanceof Undefined) {
      return null;
    }
  }
 catch (  RhinoException e) {
    RethrowJSEvalException(e,scriptText,source,lineNo);
  }
  return convertNativeObjToJavaObj(result);
}",0.9000916590284143
79173,"/** 
 * handles an image report item and returns an image URL
 * @param image represents the image design information
 * @param context context information
 * @param prefix image prefix in URL
 * @param needMap whether image map is needed
 * @return URL for the image
 */
protected String handleImage(IImage image,Object context,String prefix,boolean needMap){
  String mapID=null;
  if (needMap) {
    mapID=getImageMapID(image);
    if (map.containsKey(mapID)) {
      return (String)map.get(mapID);
    }
  }
  String ret=null;
  boolean returnRelativePath=true;
  if (context != null && (context instanceof HTMLRenderContext)) {
    HTMLRenderContext myContext=(HTMLRenderContext)context;
    String imageURL=myContext.getBaseImageURL();
    String imageDir=myContext.getImageDirectory();
    String reportName=(String)image.getRenderOption().getOutputSetting().get(RenderOptionBase.OUTPUT_FILE_NAME);
    String reportBase=null;
    if (reportName != null) {
      reportBase=new File(new File(reportName).getAbsolutePath()).getParent();
    }
 else {
      reportBase=new File(""String_Node_Str"").getAbsolutePath();
    }
    String imageAbsoluteDir=null;
    if (imageDir == null) {
      imageAbsoluteDir=reportBase;
      imageURL=null;
      imageDir=""String_Node_Str"";
    }
 else {
      if (!FileUtil.isRelativePath(imageDir)) {
        returnRelativePath=false;
        imageAbsoluteDir=imageDir;
      }
 else {
        imageAbsoluteDir=reportBase + ""String_Node_Str"" + imageDir;
      }
    }
    String fileName;
    File file;
synchronized (HTMLCompleteImageHandler.class) {
      String extension=image.getExtension();
      if (extension != null && extension.length() > 0) {
        fileName=createUniqueFileName(imageAbsoluteDir,prefix,extension);
      }
 else {
        fileName=createUniqueFileName(imageAbsoluteDir,prefix);
      }
      file=new File(imageAbsoluteDir,fileName);
      try {
        image.writeImage(file);
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
    if (imageURL != null) {
      ret=imageURL + ""String_Node_Str"" + fileName;
    }
 else {
      if (returnRelativePath) {
        ret=imageDir + ""String_Node_Str"" + fileName;
      }
 else {
        ret=file.getAbsolutePath();
      }
    }
    if (needMap) {
      map.put(mapID,ret);
    }
  }
  return ret;
}","/** 
 * handles an image report item and returns an image URL
 * @param image represents the image design information
 * @param context context information
 * @param prefix image prefix in URL
 * @param needMap whether image map is needed
 * @return URL for the image
 */
protected String handleImage(IImage image,Object context,String prefix,boolean needMap){
  String mapID=null;
  if (needMap) {
    mapID=getImageMapID(image);
    if (map.containsKey(mapID)) {
      return (String)map.get(mapID);
    }
  }
  String ret=null;
  if (context != null && (context instanceof HTMLRenderContext)) {
    HTMLRenderContext myContext=(HTMLRenderContext)context;
    String imageURL=myContext.getBaseImageURL();
    String imageDir=myContext.getImageDirectory();
    if (imageURL == null || imageURL.length() == 0 || imageDir == null || imageDir.length() == 0) {
      log.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    String fileName;
    File file;
synchronized (HTMLCompleteImageHandler.class) {
      String extension=image.getExtension();
      if (extension != null && extension.length() > 0) {
        fileName=createUniqueFileName(imageDir,prefix,extension);
      }
 else {
        fileName=createUniqueFileName(imageDir,prefix);
      }
      file=new File(imageDir,fileName);
      try {
        image.writeImage(file);
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,e.getMessage(),e);
      }
    }
    if (imageURL.indexOf(""String_Node_Str"") > 0) {
      ret=imageURL + fileName;
    }
 else     if (imageURL.endsWith(""String_Node_Str"")) {
      ret=imageURL + fileName;
    }
 else {
      ret=imageURL + ""String_Node_Str"" + fileName;
    }
    if (needMap) {
      map.put(mapID,ret);
    }
  }
  return ret;
}",0.5077594568380214
79174,"/** 
 * Removes structure from structure list.
 * @param structRef reference to the item to remove
 */
private void doRemoveItem(MemberRef structRef){
  ActivityStack stack=design.getActivityStack();
  String label=ModelMessages.getMessage(MessageConstants.REMOVE_ITEM_MESSAGE);
  stack.startTrans(label);
  List list=getOrMakePropertyList(structRef);
  Structure struct=structRef.getStructure(design,element);
  if (struct.isReferencable())   adjustReferenceClients((ReferencableStructure)struct);
  PropertyListRecord record=new PropertyListRecord(element,structRef,list);
  getActivityStack().execute(record);
  stack.commit();
}","/** 
 * Removes structure from structure list.
 * @param structRef reference to the item to remove
 */
private void doRemoveItem(MemberRef structRef){
}",0.3877551020408163
79175,"public static void checkHyperlinkTextDecoration(IStyle style,StringBuffer content){
  String linethrough=null;
  String overline=null;
  if (style != null) {
    linethrough=style.getTextLineThrough();
    overline=style.getTextOverline();
  }
  content.append(""String_Node_Str"");
  if (overline != null && ""String_Node_Str"".equalsIgnoreCase(overline)) {
    addPropValue(content,overline);
  }
  if (linethrough != null && !""String_Node_Str"".equalsIgnoreCase(linethrough)) {
    addPropValue(content,linethrough);
  }
  content.append(""String_Node_Str"");
}","public static void checkHyperlinkTextDecoration(IStyle style,StringBuffer content){
  if (style != null) {
    buildTextDecoration(content,style.getTextLineThrough(),style.getTextUnderline(),style.getTextOverline());
  }
}",0.410783055198973
79176,"public void startReport(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.isEmpty()) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          IStyle tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(IStyle)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
}","public void startReport(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.isEmpty()) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          IStyle tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(IStyle)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
}",0.9861509073543456
79177,"public static void checkHyperlinkTextDecoration(IStyle style,StringBuffer content){
  String linethrough=style.getTextLineThrough();
  String overline=style.getTextOverline();
  content.append(""String_Node_Str"");
  if (overline != null && ""String_Node_Str"".equalsIgnoreCase(overline)) {
    addPropValue(content,overline);
  }
  if (linethrough != null && !""String_Node_Str"".equalsIgnoreCase(linethrough)) {
    addPropValue(content,linethrough);
  }
  content.append(""String_Node_Str"");
}","public static void checkHyperlinkTextDecoration(IStyle style,StringBuffer content){
  String linethrough=null;
  String overline=null;
  if (style != null) {
    linethrough=style.getTextLineThrough();
    overline=style.getTextOverline();
  }
  content.append(""String_Node_Str"");
  if (overline != null && ""String_Node_Str"".equalsIgnoreCase(overline)) {
    addPropValue(content,overline);
  }
  if (linethrough != null && !""String_Node_Str"".equalsIgnoreCase(linethrough)) {
    addPropValue(content,linethrough);
  }
  content.append(""String_Node_Str"");
}",0.9235181644359464
79178,"/** 
 * @param p the scalar parameter
 * @param expr the default value expression 
 */
private Object evaluateDefault(ScalarParameterDefn p,String expr){
  Object value=null;
  int type=p.getDataType();
  if (expr != null) {
    value=executionContext.evaluate(expr);
    if (value == null && expr != null && expr.length() > 0)     value=expr;
    try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
        value=DataTypeUtil.toBoolean(value);
      break;
case IScalarParameterDefn.TYPE_DATE_TIME:
    value=DataTypeUtil.toDate(value);
  break;
case IScalarParameterDefn.TYPE_DECIMAL:
value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
value=DataTypeUtil.toDouble(value);
break;
case IScalarParameterDefn.TYPE_STRING:
value=DataTypeUtil.toString(value);
break;
default :
value=null;
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
value=null;
}
}
return value;
}","/** 
 * @param p the scalar parameter
 * @param expr the default value expression 
 */
private Object evaluateDefault(ScalarParameterDefn p,String expr){
  executionContext.pushReportItem(p.getHandle());
  Object value=null;
  int type=p.getDataType();
  if (expr != null) {
    value=executionContext.evaluate(expr);
    if (value == null && expr != null && expr.length() > 0)     value=expr;
    try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
        value=DataTypeUtil.toBoolean(value);
      break;
case IScalarParameterDefn.TYPE_DATE_TIME:
    value=DataTypeUtil.toDate(value);
  break;
case IScalarParameterDefn.TYPE_DECIMAL:
value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
value=DataTypeUtil.toDouble(value);
break;
case IScalarParameterDefn.TYPE_STRING:
value=DataTypeUtil.toString(value);
break;
default :
value=null;
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
value=null;
}
}
executionContext.popReportItem();
return value;
}",0.9575328614762386
79179,"/** 
 * @param params a collection of parameter definitions
 */
protected HashMap evaluateDefaults(Collection params){
  HashMap values=new HashMap();
  if (params != null) {
    Iterator iter=params.iterator();
    while (iter.hasNext()) {
      IParameterDefnBase pBase=(IParameterDefnBase)iter.next();
      if (pBase instanceof ScalarParameterDefn) {
        Object val=evaluateDefault((ScalarParameterDefn)pBase,((ScalarParameterDefn)pBase).getDefaultValueExpr());
        values.put(pBase.getName(),val);
      }
 else       if (pBase instanceof ParameterGroupDefn) {
        Iterator iter2=((ParameterGroupDefn)pBase).getContents().iterator();
        while (iter2.hasNext()) {
          IParameterDefnBase p=(IParameterDefnBase)iter2.next();
          if (p instanceof ScalarParameterDefn) {
            Object val=evaluateDefault((ScalarParameterDefn)p,((ScalarParameterDefn)p).getDefaultValueExpr());
            values.put(pBase.getName(),val);
          }
        }
      }
    }
  }
  return values;
}","/** 
 * @param params a collection of parameter definitions
 */
protected HashMap evaluateDefaults(Collection params){
  HashMap values=new HashMap();
  if (params != null) {
    Iterator iter=params.iterator();
    while (iter.hasNext()) {
      IParameterDefnBase pBase=(IParameterDefnBase)iter.next();
      if (pBase instanceof ScalarParameterDefn) {
        Object val=evaluateDefault((ScalarParameterDefn)pBase,((ScalarParameterDefn)pBase).getDefaultValueExpr());
        values.put(pBase.getName(),val);
      }
 else       if (pBase instanceof ParameterGroupDefn) {
        executionContext.pushReportItem(((ParameterGroupDefn)pBase).getHandle());
        Iterator iter2=((ParameterGroupDefn)pBase).getContents().iterator();
        while (iter2.hasNext()) {
          IParameterDefnBase p=(IParameterDefnBase)iter2.next();
          if (p instanceof ScalarParameterDefn) {
            Object val=evaluateDefault((ScalarParameterDefn)p,((ScalarParameterDefn)p).getDefaultValueExpr());
            values.put(pBase.getName(),val);
          }
        }
        executionContext.popReportItem();
      }
    }
  }
  return values;
}",0.9423791821561338
79180,"public ReportItemHandle getItemDesign(){
}","public ReportElementHandle getItemDesign(){
}",0.9195402298850576
79181,"/** 
 * pushes a report item design handle onto report items stack, and set it as current item (the <code>this</code> object).
 * @param handle the report item design handle
 */
public void pushReportItem(ReportItemHandle handle){
  reportItems.push(handle);
  scriptContext.registerBean(""String_Node_Str"",handle);
}","/** 
 * pushes a report item design handle onto report items stack, and set it as current item (the <code>this</code> object).
 * @param handle the report item design handle
 */
public void pushReportItem(ReportElementHandle handle){
  reportItems.push(handle);
  scriptContext.registerBean(""String_Node_Str"",handle);
}",0.9826771653543308
79182,"/** 
 * @return the read-only report item handle
 */
public ReportItemHandle getItemDesign();","/** 
 * @return the read-only report item handle
 */
public ReportElementHandle getItemDesign();",0.9629629629629628
79183,"public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValueExpr(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getFormat());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(handle.getDesign());
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  if (scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0)   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
 else   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}","public void visitScalarParameter(ScalarParameterHandle handle){
  assert(handle.getName() != null);
  ScalarParameterDefn scalarParameter=new ScalarParameterDefn();
  scalarParameter.setHandle(handle);
  scalarParameter.setParameterType(IParameterDefnBase.SCALAR_PARAMETER);
  scalarParameter.setName(handle.getName());
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    scalarParameter.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  String align=handle.getAlignment();
  if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_CENTER.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.CENTER);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_LEFT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.LEFT);
 else   if (DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT.equals(align))   scalarParameter.setAlignment(IScalarParameterDefn.RIGHT);
 else   scalarParameter.setAlignment(IScalarParameterDefn.AUTO);
  scalarParameter.setAllowBlank(handle.allowBlank());
  scalarParameter.setAllowNull(handle.allowNull());
  String controlType=handle.getControlType();
  if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.CHECK_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_LIST_BOX.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.LIST_BOX);
 else   if (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(controlType))   scalarParameter.setControlType(IScalarParameterDefn.RADIO_BUTTON);
 else   scalarParameter.setControlType(IScalarParameterDefn.TEXT_BOX);
  scalarParameter.setDefaultValueExpr(handle.getDefaultValue());
  scalarParameter.setDisplayName(handle.getDisplayName());
  scalarParameter.setDisplayNameKey(handle.getDisplayNameKey());
  scalarParameter.setFormat(handle.getFormat());
  scalarParameter.setHelpText(handle.getHelpText());
  scalarParameter.setHelpTextKey(handle.getHelpTextKey());
  scalarParameter.setIsHidden(handle.isHidden());
  scalarParameter.setName(handle.getName());
  String valueType=handle.getDataType();
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_BOOLEAN);
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DATE_TIME);
 else   if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_DECIMAL);
 else   if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_FLOAT);
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(valueType))   scalarParameter.setDataType(IScalarParameterDefn.TYPE_STRING);
 else   scalarParameter.setDataType(IScalarParameterDefn.TYPE_ANY);
  ArrayList values=new ArrayList();
  Iterator selectionIter=handle.choiceIterator();
  while (selectionIter.hasNext()) {
    SelectionChoiceHandle selection=(SelectionChoiceHandle)selectionIter.next();
    ParameterSelectionChoice selectionChoice=new ParameterSelectionChoice(handle.getDesign());
    selectionChoice.setLabel(selection.getLabelKey(),selection.getLabel());
    selectionChoice.setValue(selection.getValue(),scalarParameter.getDataType());
    values.add(selectionChoice);
  }
  scalarParameter.setSelectionList(values);
  scalarParameter.setAllowNewValues(!handle.isMustMatch());
  scalarParameter.setFixedOrder(handle.isFixedOrder());
  if (scalarParameter.getSelectionList() != null && scalarParameter.getSelectionList().size() > 0)   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_STATIC);
 else   scalarParameter.setSelectionListType(IScalarParameterDefn.SELECTION_LIST_NONE);
  scalarParameter.setValueConcealed(handle.isConcealValue());
  currentElement=scalarParameter;
}",0.9953170484748766
79184,"public void visitParameterGroup(ParameterGroupHandle handle){
  ParameterGroupDefn paramGroup=new ParameterGroupDefn();
  paramGroup.setParameterType(IParameterDefnBase.PARAMETER_GROUP);
  paramGroup.setName(handle.getName());
  paramGroup.setDisplayName(handle.getDisplayName());
  paramGroup.setDisplayNameKey(handle.getDisplayNameKey());
  paramGroup.setHelpText(handle.getHelpText());
  paramGroup.setHelpTextKey(handle.getHelpTextKey());
  SlotHandle parameters=handle.getParameters();
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    paramGroup.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  int size=parameters.getCount();
  for (int n=0; n < size; n++) {
    apply(parameters.get(n));
    paramGroup.addParameter((IParameterDefnBase)currentElement);
  }
  currentElement=paramGroup;
}","public void visitParameterGroup(ParameterGroupHandle handle){
  ParameterGroupDefn paramGroup=new ParameterGroupDefn();
  paramGroup.setHandle(handle);
  paramGroup.setParameterType(IParameterDefnBase.PARAMETER_GROUP);
  paramGroup.setName(handle.getName());
  paramGroup.setDisplayName(handle.getDisplayName());
  paramGroup.setDisplayNameKey(handle.getDisplayNameKey());
  paramGroup.setHelpText(handle.getHelpText());
  paramGroup.setHelpTextKey(handle.getHelpTextKey());
  SlotHandle parameters=handle.getParameters();
  List properties=handle.getUserProperties();
  for (int i=0; i < properties.size(); i++) {
    UserPropertyDefn p=(UserPropertyDefn)properties.get(i);
    paramGroup.addUserProperty(p.getName(),handle.getProperty(p.getName()));
  }
  int size=parameters.getCount();
  for (int n=0; n < size; n++) {
    apply(parameters.get(n));
    paramGroup.addParameter((IParameterDefnBase)currentElement);
  }
  currentElement=paramGroup;
}",0.9829059829059827
79185,"public void startReport(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.isEmpty()) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          IStyle tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(IStyle)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
}","public void startReport(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.isEmpty()) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          IStyle tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(IStyle)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
}",0.9861509073543456
79186,"private static Object evaluateJSScript(Context cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  Object result=null;
  try {
    result=cx.evaluateString(scope,scriptText,source,lineNo,null);
    if (result instanceof Undefined) {
      return null;
    }
  }
 catch (  RhinoException e) {
    RethrowJSEvalException(e,scriptText,source,lineNo);
  }
  return convertNativeObjToJavaObj(result);
}","private static Object evaluateJSScript(Context cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  Object result=null;
  try {
    Script compiledScript=ScriptUtil.getCompiledScript(scriptText,source,lineNo);
    result=compiledScript.exec(cx,scope);
    if (result instanceof Undefined) {
      return null;
    }
  }
 catch (  RhinoException e) {
    RethrowJSEvalException(e,scriptText,source,lineNo);
  }
  return convertNativeObjToJavaObj(result);
}",0.8691891891891892
79187,"private void addSelected(){
  String[] selected=valueList.getSelection();
  if (selected.length == 0) {
    selected=new String[]{valueEditor.getText()};
  }
  for (int i=0; i < selected.length; i++) {
    if (selectedList.indexOf(selected[i]) == -1) {
      selectedList.add(selected[i]);
    }
  }
  filteValues();
}","private void addSelected(){
  String[] selected=valueList.getSelection();
  int selectedIndex=valueList.getSelectionIndex();
  int oldListSize=valueList.getItemCount();
  if (selected.length == 0) {
    selected=new String[]{valueEditor.getText()};
  }
  for (int i=0; i < selected.length; i++) {
    if (selectedList.indexOf(selected[i]) == -1) {
      selectedList.add(selected[i]);
    }
  }
  filteValues();
  if (selected.length == 1) {
    int nextSelected=((selectedIndex + 1) < oldListSize) ? selectedIndex : (selectedIndex - 1);
    valueList.select(nextSelected);
  }
 else   if ((selected.length > 1) && (valueList.getItemCount() > 0)) {
    valueList.select(0);
  }
  updateButtons();
}",0.6259842519685039
79188,"protected void populateAvailableDbObjects(){
  RemoveAllAvailableDbObjects();
  initJdbcInfo();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    getAvailableSchema();
    populateTableList();
  }
 else {
    populateTableList();
  }
  if (rootNode != null) {
    selectNode(rootNode);
  }
}","protected void populateAvailableDbObjects(){
  RemoveAllAvailableDbObjects();
  setRootElement();
  setRefreshInfo();
  if (isSchemaSupported) {
    getAvailableSchema();
    if (schemaCombo.getItemCount() < 1) {
      schemaCombo.add(JdbcPlugin.getResourceString(""String_Node_Str""));
      schemaCombo.select(0);
      Iterator it=schemaList.iterator();
      while (it.hasNext())       schemaCombo.add(it.next().toString());
    }
    populateTableList();
  }
 else {
    populateTableList();
  }
  if (rootNode != null) {
    selectNode(rootNode);
  }
}",0.6774193548387096
79189,"protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    ResultSet tablesRs=null;
    int numTables=0;
    boolean maxRecordsDisplayed=false;
    for (int i=0; i < schemaList.size(); i++) {
      if (maxRecordsDisplayed) {
        break;
      }
      int count=0;
      String schemaName=(String)schemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        while (tablesRs.next()) {
          if (count == 0) {
            schema.add(schemaName);
            schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
            if (schemaTreeItem != null && schemaTreeItem.length > 0)             availableDbObjectsTree.showItem(schemaTreeItem[0]);
          }
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          String type=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
          if (numTables == DbType.MAX_ITEMS_DISPLAY_COUNT) {
            maxRecordsDisplayed=true;
            break;
          }
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (item != null && item.length > 0)           availableDbObjectsTree.showItem(item[0]);
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
    checkForMaxRecordsDisplayed(maxRecordsDisplayed,tablesRs);
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    int count=0;
    boolean maxRecordsDisplayed=false;
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        count++;
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
        if (count == DbType.MAX_ITEMS_DISPLAY_COUNT) {
          maxRecordsDisplayed=true;
          break;
        }
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
      checkForMaxRecordsDisplayed(maxRecordsDisplayed,tablesRs);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}","protected void populateTableList(){
  if (rootNode != null) {
    availableDbObjectsTree.removeAll();
    setRootElement();
  }
  String namePattern=null;
  String[] tableType=null;
  if (searchTxt.getText().length() > 0) {
    namePattern=searchTxt.getText();
    if (namePattern != null) {
      if (namePattern.lastIndexOf('%') == -1) {
        namePattern=namePattern + ""String_Node_Str"";
      }
    }
  }
  String dbtype=getSelectedDbType();
  if (dbtype != null && !DbType.ALL_STRING.equalsIgnoreCase(dbtype)) {
    tableType=new String[]{dbtype};
  }
  String catalogName=metaDataProvider.getCatalog();
  ArrayList tableList=new ArrayList();
  ArrayList targetSchemaList=new ArrayList();
  if (schemaList != null && schemaList.size() > 0) {
    if (schemaCombo.getSelectionIndex() == 0) {
      targetSchemaList=schemaList;
    }
 else {
      targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex()));
    }
    ResultSet tablesRs=null;
    int numTables=0;
    boolean maxRecordsDisplayed=false;
    for (int i=0; i < targetSchemaList.size(); i++) {
      if (maxRecordsDisplayed) {
        break;
      }
      int count=0;
      String schemaName=(String)targetSchemaList.get(i);
      tablesRs=metaDataProvider.getAlltables(catalogName,schemaName,namePattern,tableType);
      tableList=new ArrayList();
      if (tablesRs == null) {
        continue;
      }
      try {
        ArrayList schema=new ArrayList();
        TreeItem schemaTreeItem[]=null;
        Image image=tableImage;
        if (count == 0) {
          schema.add(schemaName);
          schemaTreeItem=Utility.createTreeItems(rootNode,schema,SWT.NONE,schemaImage);
          if (schemaTreeItem != null && schemaTreeItem.length > 0)           availableDbObjectsTree.showItem(schemaTreeItem[0]);
        }
        while (tablesRs.next()) {
          count++;
          String tableName=tablesRs.getString(""String_Node_Str"");
          String type=tablesRs.getString(""String_Node_Str"");
          int dbType=DbObject.TABLE_TYPE;
          if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=tableImage;
            dbType=DbObject.TABLE_TYPE;
          }
 else           if (type.equalsIgnoreCase(""String_Node_Str"")) {
            image=viewImage;
            dbType=DbObject.VIEW_TYPE;
          }
          String fullyQualifiedTableName=tableName;
          if (schemaName != null && schemaName.trim().length() > 0) {
            fullyQualifiedTableName=schemaName + ""String_Node_Str"" + tableName;
          }
          DbObject dbObject=new DbObject(fullyQualifiedTableName,tableName,dbType,image);
          tableList.add(dbObject);
          numTables++;
          if (numTables == DbType.MAX_ITEMS_DISPLAY_COUNT) {
            maxRecordsDisplayed=true;
            break;
          }
        }
        if (schemaTreeItem != null && schemaTreeItem.length > 0) {
          TreeItem item[]=Utility.createTreeItems(schemaTreeItem[0],tableList,SWT.NONE,null);
          if (item != null && item.length > 0)           availableDbObjectsTree.showItem(item[0]);
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
    checkForMaxRecordsDisplayed(maxRecordsDisplayed,tablesRs);
  }
 else {
    ResultSet tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
    if (tablesRs == null) {
      return;
    }
    int count=0;
    boolean maxRecordsDisplayed=false;
    try {
      Image image=tableImage;
      while (tablesRs.next()) {
        count++;
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(tableName,tableName,dbType,image);
        tableList.add(dbObject);
        if (count == DbType.MAX_ITEMS_DISPLAY_COUNT) {
          maxRecordsDisplayed=true;
          break;
        }
      }
      TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
      if (item != null && item.length > 0)       availableDbObjectsTree.showItem(item[0]);
      checkForMaxRecordsDisplayed(maxRecordsDisplayed,tablesRs);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  addFetchColumnListener();
}",0.9597551298038772
79190,"/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}","/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    availableDbObjectsTree.setLayoutData(data);
  }
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  availableDbObjectsTree.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=availableDbObjectsTree.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          availableDbObjectsTree.setRedraw(false);
          availableDbObjectsTree.deselectAll();
          availableDbObjectsTree.setRedraw(true);
          availableDbObjectsTree.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  if (isSchemaSupported) {
    Label schemaLabel=new Label(selectTableGroup,SWT.LEFT);
    schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
    schemaCombo=new Combo(selectTableGroup,SWT.READ_ONLY);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    schemaCombo.setLayoutData(gd);
  }
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}",0.8623321123321124
79191,"public Control createPageControl(Composite parent){
  Splitter splitter=new Splitter(parent,SWT.NONE);
  splitter.setOrientation(SWT.HORIZONTAL);
  splitter.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTableSelectionComposite(splitter);
  initialize();
  populateAvailableDbObjects();
  createTextualQueryComposite(splitter);
  splitter.setWeights(new int[]{35,65});
  return splitter;
}","public Control createPageControl(Composite parent){
  Splitter splitter=new Splitter(parent,SWT.NONE);
  splitter.setOrientation(SWT.HORIZONTAL);
  splitter.setLayoutData(new GridData(GridData.FILL_BOTH));
  initialize();
  initJdbcInfo();
  createTableSelectionComposite(splitter);
  populateAvailableDbObjects();
  createTextualQueryComposite(splitter);
  splitter.setWeights(new int[]{35,65});
  return splitter;
}",0.9387254901960784
79192,"/** 
 * Gets a property value given its definition. This version does the property search as defined by the given derived component. That is, it gets the ""effective"" property value. The definition can be for a system or user-defined property. <p> The search won't search up the containment hierarchy. Meanwhile, it won't the inheritance hierarchy if the non-style property is not inheritable. <p> Part of: Property value system.
 * @param design the report design
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
public Object getPropertyFromElement(ReportDesign design,ElementPropertyDefn prop){
  Object value=null;
  value=getPropertyFromSelf(design,prop);
  if (value != null)   return value;
  if (prop.canInherit()) {
    value=getPropertyFromParent(design,prop);
    if (value != null)     return value;
  }
  if (prop.isStyleProperty()) {
    String selector=((ElementDefn)getDefn()).getSelector();
    value=getPropertyFromSelector(design,prop,selector);
    if (value != null)     return value;
  }
  return null;
}","/** 
 * Gets a property value given its definition. This version does the property search as defined by the given derived component. That is, it gets the ""effective"" property value. The definition can be for a system or user-defined property. <p> The search won't search up the containment hierarchy. Meanwhile, it won't the inheritance hierarchy if the non-style property is not inheritable. <p> Part of: Property value system.
 * @param design the report design
 * @param prop definition of the property to get
 * @return The property value, or null if no value is set.
 */
public Object getPropertyFromElement(ReportDesign design,ElementPropertyDefn prop){
  Object value=null;
  value=getPropertyFromSelf(design,prop);
  if (value != null)   return value;
  if (isInheritableProperty(prop)) {
    value=getPropertyFromParent(design,prop);
    if (value != null)     return value;
  }
  if (prop.isStyleProperty()) {
    String selector=((ElementDefn)getDefn()).getSelector();
    value=getPropertyFromSelector(design,prop,selector);
    if (value != null)     return value;
  }
  return null;
}",0.9871912168344008
79193,"public MemberHandle getMember(String memberName){
  StructPropertyDefn memberDefn=(StructPropertyDefn)getDefn().getMember(memberName);
  if (memberDefn == null)   return null;
  return new NameMemberHandle(this,memberDefn);
}","public MemberHandle getMember(String memberName){
  StructPropertyDefn memberDefn=(StructPropertyDefn)getDefn().getMember(memberName);
  if (memberDefn == null)   return null;
  if (DesignSchemaConstants.NAME_ATTRIB.equalsIgnoreCase(memberName))   return new NameMemberHandle(this,memberDefn);
 else   return new MemberHandle(this,memberDefn);
}",0.7894736842105263
79194,"private void removeSelected(){
  String[] selected=selectedList.getSelection();
  for (int i=0; i < selected.length; i++) {
    selectedList.remove(selected[i]);
  }
  updateButtons();
}","private void removeSelected(){
  String[] selected=selectedList.getSelection();
  for (int i=0; i < selected.length; i++) {
    selectedList.remove(selected[i]);
  }
  filteValues();
}",0.9567567567567568
79195,"private void addSelected(){
  String[] selected=valueList.getSelection();
  if (selected.length == 0) {
    selected=new String[]{valueEditor.getText()};
  }
  for (int i=0; i < selected.length; i++) {
    if (selectedList.indexOf(selected[i]) == -1) {
      selectedList.add(selected[i]);
    }
  }
  updateButtons();
}","private void addSelected(){
  String[] selected=valueList.getSelection();
  if (selected.length == 0) {
    selected=new String[]{valueEditor.getText()};
  }
  for (int i=0; i < selected.length; i++) {
    if (selectedList.indexOf(selected[i]) == -1) {
      selectedList.add(selected[i]);
    }
  }
  filteValues();
}",0.9498432601880876
79196,"private void removeAll(){
  selectedList.removeAll();
  updateButtons();
}","private void removeAll(){
  selectedList.removeAll();
  filteValues();
}",0.8904109589041096
79197,"private void addAll(){
  String[] values=valueList.getItems();
  for (int i=0; i < values.length; i++) {
    if (selectedList.indexOf(values[i]) == -1) {
      selectedList.add(values[i]);
    }
  }
  updateButtons();
}","private void addAll(){
  String[] values=valueList.getItems();
  for (int i=0; i < values.length; i++) {
    if (selectedList.indexOf(values[i]) == -1) {
      selectedList.add(values[i]);
    }
  }
  filteValues();
}",0.9495412844036696
79198,"private void filteValues(){
  valueList.removeAll();
  valueList.deselectAll();
  for (Iterator itor=resultList.iterator(); itor.hasNext(); ) {
    String value=(String)itor.next();
    try {
      if (value.startsWith(valueEditor.getText()) || value.matches(valueEditor.getText())) {
        valueList.add(value);
      }
    }
 catch (    PatternSyntaxException e) {
    }
  }
  updateButtons();
}","private void filteValues(){
  valueList.removeAll();
  valueList.deselectAll();
  for (Iterator itor=resultList.iterator(); itor.hasNext(); ) {
    String value=(String)itor.next();
    try {
      if (selectedList.indexOf(value) == -1 && value.startsWith(valueEditor.getText()) || value.matches(valueEditor.getText())) {
        valueList.add(value);
      }
    }
 catch (    PatternSyntaxException e) {
    }
  }
  updateButtons();
}",0.9556886227544912
79199,"/** 
 * load report item query extension definitions 
 */
protected void loadQueryExtensionDefns(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=registry.getExtensionPoint(EXTENSION_POINT_QUERY);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  for (int i=0; i < exts.length; i++) {
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String itemName=configs[j].getAttribute(""String_Node_Str"");
      queryExtensions.put(itemName,configs[i]);
    }
  }
}","/** 
 * load report item query extension definitions 
 */
protected void loadQueryExtensionDefns(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=registry.getExtensionPoint(EXTENSION_POINT_QUERY);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  for (int i=0; i < exts.length; i++) {
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String itemName=configs[j].getAttribute(""String_Node_Str"");
      queryExtensions.put(itemName,configs[j]);
    }
  }
}",0.9983416252072967
79200,"/** 
 * load report item presentation extension definitions 
 */
protected void loadPresentationExtensionDefns(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=registry.getExtensionPoint(EXTENSION_POINT_PRESENTATION);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  for (int i=0; i < exts.length; i++) {
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String itemName=configs[j].getAttribute(""String_Node_Str"");
      presentationExtensions.put(itemName,configs[i]);
    }
  }
}","/** 
 * load report item presentation extension definitions 
 */
protected void loadPresentationExtensionDefns(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=registry.getExtensionPoint(EXTENSION_POINT_PRESENTATION);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  for (int i=0; i < exts.length; i++) {
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String itemName=configs[j].getAttribute(""String_Node_Str"");
      presentationExtensions.put(itemName,configs[j]);
    }
  }
}",0.9984152139461172
79201,"/** 
 * load report item generation extension definitions 
 */
protected void loadGenerationExtensionDefns(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=registry.getExtensionPoint(EXTENSION_POINT_GENERATION);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  for (int i=0; i < exts.length; i++) {
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String itemName=configs[j].getAttribute(""String_Node_Str"");
      generationExtensions.put(itemName,configs[i]);
    }
  }
}","/** 
 * load report item generation extension definitions 
 */
protected void loadGenerationExtensionDefns(){
  IExtensionRegistry registry=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=registry.getExtensionPoint(EXTENSION_POINT_GENERATION);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  for (int i=0; i < exts.length; i++) {
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String itemName=configs[j].getAttribute(""String_Node_Str"");
      generationExtensions.put(itemName,configs[j]);
    }
  }
}",0.9983948635634028
79202,"/** 
 * Validates whether the given element can recursively resides in the specific slot of specific container type when trying to add an element.
 * @param design the report design
 * @param element the container element
 * @param toAdd the element definition to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForAdding(ReportDesign design,DesignElement element,IElementDefn toAdd){
  ElementDefn listingDefn=(ElementDefn)MetaDataDictionary.getInstance().getElement(ReportDesignConstants.LISTING_ITEM);
  if (!listingDefn.isKindOf(toAdd))   return Collections.EMPTY_LIST;
  return doValidate(design,element);
}","/** 
 * Validates whether the given element can recursively resides in the specific slot of specific container type when trying to add an element.
 * @param design the report design
 * @param element the container element
 * @param toAdd the element definition to add
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validateForAdding(ReportDesign design,DesignElement element,IElementDefn toAdd){
  ElementDefn listingDefn=(ElementDefn)MetaDataDictionary.getInstance().getElement(ReportDesignConstants.LISTING_ITEM);
  if (!listingDefn.isKindOf(toAdd))   return Collections.EMPTY_LIST;
  return doValidate(design,element,DesignElement.NO_SLOT);
}",0.9840579710144928
79203,"private List doValidate(ReportDesign design,DesignElement toValidate){
  List list=new ArrayList();
  DesignElement curContainer=toValidate.getContainer();
  int curSlotID=toValidate.getContainerSlot();
  while (curContainer != null) {
    IElementDefn containerDefn=curContainer.getDefn();
    if (ReportDesignConstants.TABLE_ITEM.equalsIgnoreCase(containerDefn.getName()) && curSlotID == TableItem.HEADER_SLOT) {
      list.add(new ContentException(curContainer,curSlotID,toValidate,ContentException.DESIGN_EXCEPTION_INVALID_CONTEXT_CONTAINMENT));
    }
    curSlotID=curContainer.getContainerSlot();
    curContainer=curContainer.getContainer();
  }
  return list;
}","/** 
 * Checks whether the <code>toValidate</code> is or is in the table element and its slotId is <code>TableItem.HEADER_SLOT</code>.
 * @param design the report design
 * @param toValidate the element to validate
 * @param slotId the slot id
 * @return <code>true</code> if <code>toValidate</code> is a table itemor nested in the table item and the table slot is <code>TableItem.HEADER_SLOT</code>.
 */
private List doValidate(ReportDesign design,DesignElement toValidate,int slotId){
  List list=new ArrayList();
  DesignElement curContainer=toValidate;
  int curSlotID=slotId;
  if (slotId == DesignElement.NO_SLOT) {
    curContainer=toValidate.getContainer();
    curSlotID=toValidate.getContainerSlot();
  }
  while (curContainer != null) {
    IElementDefn containerDefn=curContainer.getDefn();
    if (ReportDesignConstants.TABLE_ITEM.equalsIgnoreCase(containerDefn.getName()) && curSlotID == TableItem.HEADER_SLOT) {
      list.add(new ContentException(curContainer,curSlotID,toValidate,ContentException.DESIGN_EXCEPTION_INVALID_CONTEXT_CONTAINMENT));
    }
    curSlotID=curContainer.getContainerSlot();
    curContainer=curContainer.getContainer();
  }
  return list;
}",0.3048648648648648
79204,"/** 
 * Validates whether the given element can recursively resides in the specific slot of specific container type.
 * @param design the report design
 * @param element the element to validate
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validate(ReportDesign design,DesignElement element){
  if (!(element instanceof ListingElement))   return Collections.EMPTY_LIST;
  return doValidate(design,element);
}","/** 
 * Validates whether the given element can recursively resides in the specific slot of specific container type.
 * @param design the report design
 * @param element the element to validate
 * @return error list, each of which is the instance of<code>SemanticException</code>.
 */
public List validate(ReportDesign design,DesignElement element){
  if (!(element instanceof ListingElement))   return Collections.EMPTY_LIST;
  return doValidate(design,element,DesignElement.NO_SLOT);
}",0.976890756302521
79205,"public void setDefaultValue(Element romProp,String defaultValue){
  NodeList list=romProp.getElementsByTagName(""String_Node_Str"");
  Element valueNode=null;
  if (list.getLength() == 0) {
    valueNode=document.createElement(""String_Node_Str"");
    romProp.appendChild(valueNode);
  }
 else   valueNode=(Element)list.item(0);
  valueNode.setTextContent(defaultValue);
}","public void setDefaultValue(Element romProp,String defaultValue){
  NodeList list=romProp.getElementsByTagName(""String_Node_Str"");
  Element valueNode=null;
  if (list.getLength() == 0) {
    valueNode=document.createElement(""String_Node_Str"");
    romProp.appendChild(valueNode);
  }
 else   valueNode=(Element)list.item(0);
  valueNode.setNodeValue(defaultValue);
}",0.9728260869565216
79206,"public String getDefaultValue(Element romProp){
  NodeList list=romProp.getElementsByTagName(""String_Node_Str"");
  if (list.getLength() == 0)   return null;
  Element valueNode=(Element)list.item(0);
  return valueNode.getTextContent();
}","public String getDefaultValue(Element romProp){
  NodeList list=romProp.getElementsByTagName(""String_Node_Str"");
  if (list.getLength() == 0)   return null;
  Element valueNode=(Element)list.item(0);
  return valueNode.getNodeValue();
}",0.9578059071729956
79207,"public String getContents(){
  ArrayList list=new ArrayList();
  list.addAll(((SlotDefn)defn).getRealContentElements());
  Collections.sort(list,new ElementComparator());
  Iterator iter=list.iterator();
  StringBuffer contents=new StringBuffer();
  while (iter.hasNext()) {
    ElementDefn element=(ElementDefn)iter.next();
    if (contents.length() > 0)     contents.append(""String_Node_Str"");
    contents.append(""String_Node_Str"");
    contents.append(element.getName());
    contents.append(""String_Node_Str"");
    contents.append(element.getName());
    contents.append(""String_Node_Str"");
  }
  if (defn.isMultipleCardinality())   contents.insert(0,""String_Node_Str"");
  return contents.toString();
}","public String getContents(){
  ArrayList list=new ArrayList();
  list.addAll(((SlotDefn)defn).getContentElements());
  Collections.sort(list,new ElementComparator());
  Iterator iter=list.iterator();
  StringBuffer contents=new StringBuffer();
  while (iter.hasNext()) {
    ElementDefn element=(ElementDefn)iter.next();
    if (contents.length() > 0)     contents.append(""String_Node_Str"");
    contents.append(""String_Node_Str"");
    contents.append(element.getName());
    contents.append(""String_Node_Str"");
    contents.append(element.getName());
    contents.append(""String_Node_Str"");
  }
  if (defn.isMultipleCardinality())   contents.insert(0,""String_Node_Str"");
  return contents.toString();
}",0.997163120567376
79208,"private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
  driverExtensions=new HashMap();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null)   return;
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
        String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
        String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
        logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
        if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
          driverExtensions.put(driverClass,configElems[i]);
        }
      }
    }
  }
}","private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
  driverExtensions=new HashMap();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
  if (extPoint == null)   return;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null)   return;
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
        String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
        String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
        logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
        if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
          driverExtensions.put(driverClass,configElems[i]);
        }
      }
    }
  }
}",0.9859154929577464
79209,"/** 
 * Transform other units to pixel.
 * @param object model to keep the measure and units.
 * @param fontSize the parent font size.
 * @return The pixel value.
 */
public static double convertToPixel(Object object,int fontSize){
  double px=0;
  double measure=0;
  String units=""String_Node_Str"";
  if (object instanceof DimensionValue) {
    DimensionValue dimension=(DimensionValue)object;
    measure=dimension.getMeasure();
    units=dimension.getUnits();
  }
 else   if (object instanceof DimensionHandle) {
    DimensionHandle dimension=(DimensionHandle)object;
    measure=dimension.getMeasure();
    units=dimension.getUnits();
  }
  if (DesignChoiceConstants.UNITS_PX.equals(units)) {
    return measure;
  }
  if (""String_Node_Str"".equalsIgnoreCase(units)) {
    px=measure;
  }
  if (fontSize == 0) {
    Font defaultFont=JFaceResources.getDefaultFont();
    FontData[] fontData=defaultFont.getFontData();
    fontSize=fontData[0].height;
  }
  if (DesignChoiceConstants.UNITS_EM.equals(units)) {
    px=DimensionUtil.convertTo(measure * fontSize,DesignChoiceConstants.UNITS_PT,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else   if (DesignChoiceConstants.UNITS_EX.equals(units)) {
    px=DimensionUtil.convertTo(measure * fontSize / 3,DesignChoiceConstants.UNITS_PT,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else   if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(units)) {
    px=DimensionUtil.convertTo(measure * fontSize / 100,DesignChoiceConstants.UNITS_PT,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else   if (""String_Node_Str"".equals(units)) {
    units=SessionHandleAdapter.getInstance().getReportDesignHandle().getDefaultUnits();
    px=DimensionUtil.convertTo(measure,units,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else {
    px=DimensionUtil.convertTo(measure,units,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
  return MetricUtility.inchToPixel(px);
}","/** 
 * Transform other units to pixel.
 * @param object model to keep the measure and units.
 * @param fontSize the parent font size.
 * @return The pixel value.
 */
public static double convertToPixel(Object object,int fontSize){
  double px=0;
  double measure=0;
  String units=""String_Node_Str"";
  if (object instanceof DimensionValue) {
    DimensionValue dimension=(DimensionValue)object;
    measure=dimension.getMeasure();
    units=dimension.getUnits();
  }
 else   if (object instanceof DimensionHandle) {
    DimensionHandle dimension=(DimensionHandle)object;
    measure=dimension.getMeasure();
    units=dimension.getUnits();
  }
  if (DesignChoiceConstants.UNITS_PX.equals(units)) {
    return measure;
  }
  if (""String_Node_Str"".equalsIgnoreCase(units)) {
    px=measure;
  }
  if (fontSize == 0) {
    Font defaultFont=JFaceResources.getDefaultFont();
    FontData[] fontData=defaultFont.getFontData();
    fontSize=fontData[0].height;
  }
  if (DesignChoiceConstants.UNITS_EM.equals(units)) {
    px=DimensionUtil.convertTo(measure * fontSize,DesignChoiceConstants.UNITS_PT,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else   if (DesignChoiceConstants.UNITS_EX.equals(units)) {
    px=DimensionUtil.convertTo(measure * fontSize / 3,DesignChoiceConstants.UNITS_PT,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else   if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(units)) {
    px=DimensionUtil.convertTo(measure * fontSize / 100,DesignChoiceConstants.UNITS_PT,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else   if (""String_Node_Str"".equals(units) || units == null) {
    units=SessionHandleAdapter.getInstance().getReportDesignHandle().getDefaultUnits();
    px=DimensionUtil.convertTo(measure,units,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
 else {
    px=DimensionUtil.convertTo(measure,units,DesignChoiceConstants.UNITS_IN).getMeasure();
  }
  return MetricUtility.inchToPixel(px);
}",0.9955855621916384
79210,"/** 
 * Constructs the content event with the container element, content element, the slot within this container and the event operation kind.
 * @param theContainer the container element
 * @param theContent the content element
 * @param theSlot the slot within the container
 * @param theAction the action causing this event
 */
public ContentEvent(DesignElement theContainer,DesignElement theContent,int theSlot,int theAction){
  super(theContainer);
  slot=theSlot;
  action=theAction;
  content=theContent;
}","/** 
 * /** Constructs the content event with the container element, content element, the slot within this container and the event operation kind.
 * @param theContainer the container element
 * @param theContent the content element
 * @param theSlot the slot within the container
 * @param theAction the action causing this event
 */
public ContentEvent(DesignElement theContainer,DesignElement theContent,int theSlot,int theAction){
  super(theContainer);
  slot=theSlot;
  action=theAction;
  content=theContent;
}",0.996116504854369
79211,"/** 
 * Clears references of elements that are referred by the to-be-deleted element, except for extends and style element references. Unlike the method   {@link #adjustReferenceClients(ReferenceableElement)}, this method removes references from those elements that are referred.
 * @param element the element to be deleted
 */
private void adjustReferredClients(DesignElement element){
}","/** 
 * Clears references of elements that are referred by the to-be-deleted element, except for extends and style element references. Unlike the method   {@link #adjustReferenceClients(ReferenceableElement,boolean)}, this method removes references from those elements that are referred.
 * @param element the element to be deleted
 */
private void adjustReferredClients(DesignElement element){
}",0.9897959183673468
79212,"/** 
 * Adjusts references to an element that is to be deleted. The element to be deleted is one that has references in the form of element reference properties on other elements. These other elements, called ""clients"", each contain a property of type element reference and that property refers to this element. Each reference is recorded with a ""back pointer"" from the referenced element to the client. That back pointer has both a pointer to the client element, and the property within that element that holds the reference. There are two algorithms to handle this reference property, which can be selected by <code>unresolveReference</code>. If <code>unresolveReference</code> is <code>true</code>, the reference property is unresolved. Otherwise, it's cleared.
 * @param element the element to be deleted
 * @param unresolveReference the flag indicating the reference property should be unresolved, instead of cleared
 * @throws SemanticException if an error occurs, but the operation should not fail under normal conditions
 * @see #adjustReferredClients(DesignElement)
 */
private void adjustReferenceClients(ReferenceableElement referred,boolean unresolveReference) throws SemanticException {
  List clients=new ArrayList(referred.getClientList());
  Iterator iter=clients.iterator();
  while (iter.hasNext()) {
    BackRef ref=(BackRef)iter.next();
    DesignElement client=ref.element;
    if (unresolveReference) {
      BackRefRecord record=new BackRefRecord(design,referred,client,ref.propName);
      getActivityStack().execute(record);
    }
 else {
      if (referred.isStyle()) {
        StyleCommand clientCmd=new StyleCommand(design,client);
        clientCmd.setStyleElement(null);
      }
 else {
        PropertyCommand cmd=new PropertyCommand(design,client);
        cmd.setProperty(ref.propName,null);
      }
    }
  }
}","/** 
 * Adjusts references to an element that is to be deleted. The element to be deleted is one that has references in the form of element reference properties on other elements. These other elements, called ""clients"", each contain a property of type element reference and that property refers to this element. Each reference is recorded with a ""back pointer"" from the referenced element to the client. That back pointer has both a pointer to the client element, and the property within that element that holds the reference. There are two algorithms to handle this reference property, which can be selected by <code>unresolveReference</code>. If <code>unresolveReference</code> is <code>true</code>, the reference property is unresolved. Otherwise, it's cleared.
 * @param referred the element to be deleted
 * @param unresolveReference the flag indicating the reference property should be unresolved, instead of cleared
 * @throws SemanticException if an error occurs, but the operation should not fail under normal conditions
 * @see #adjustReferredClients(DesignElement)
 */
private void adjustReferenceClients(ReferenceableElement referred,boolean unresolveReference) throws SemanticException {
  List clients=new ArrayList(referred.getClientList());
  Iterator iter=clients.iterator();
  while (iter.hasNext()) {
    BackRef ref=(BackRef)iter.next();
    DesignElement client=ref.element;
    if (unresolveReference) {
      BackRefRecord record=new BackRefRecord(design,referred,client,ref.propName);
      getActivityStack().execute(record);
    }
 else {
      if (referred.isStyle()) {
        StyleCommand clientCmd=new StyleCommand(design,client);
        clientCmd.setStyleElement(null);
      }
 else {
        PropertyCommand cmd=new PropertyCommand(design,client);
        cmd.setProperty(ref.propName,null);
      }
    }
  }
}",0.9959338574139334
79213,"public NotificationEvent getEvent(){
  return new ContentEvent(container,slot,ContentEvent.SHIFT);
}","public NotificationEvent getEvent(){
  return new ContentEvent(container,content,slot,ContentEvent.SHIFT);
}",0.9615384615384616
79214,"private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
  driverExtensions=new HashMap();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IConfigurationElement[] configElems=extReg.getConfigurationElementsFor(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
  if (configElems != null) {
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
        String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
        String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
        logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
        if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
          driverExtensions.put(driverClass,configElems[i]);
        }
      }
    }
  }
}","private void loadDriverExtensions(){
  if (driverExtensions != null)   return;
  driverExtensions=new HashMap();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(OdaJdbcDriver.Constants.DRIVER_INFO_EXTENSION);
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null)   return;
  for (int e=0; e < exts.length; e++) {
    IConfigurationElement[] configElems=exts[e].getConfigurationElements();
    if (configElems == null)     continue;
    for (int i=0; i < configElems.length; i++) {
      if (configElems[i].getName().equals(OdaJdbcDriver.Constants.DRIVER_INFO_ELEM_JDBCDRIVER)) {
        String driverClass=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_DRIVERCLASS);
        String connectionFactory=configElems[i].getAttribute(OdaJdbcDriver.Constants.DRIVER_INFO_ATTR_CONNFACTORY);
        logger.info(""String_Node_Str"" + driverClass + ""String_Node_Str""+ connectionFactory);
        if (driverClass != null && driverClass.length() > 0 && connectionFactory != null && connectionFactory.length() > 0) {
          driverExtensions.put(driverClass,configElems[i]);
        }
      }
    }
  }
}",0.8328018223234624
79215,"public Object validateValue(ReportDesign design,PropertyDefn defn,Object value) throws PropertyValueException {
  if (value == null)   return null;
  if (value instanceof String)   return value;
  throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,EXPRESSION_TYPE);
}","public Object validateValue(ReportDesign design,PropertyDefn defn,Object value) throws PropertyValueException {
  if (value == null)   return null;
  if (value instanceof String) {
    if (StringUtil.isEmpty((String)value))     return null;
    return value;
  }
  throw new PropertyValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,EXPRESSION_TYPE);
}",0.8600583090379009
79216,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 */
public static ArrayList getJdbcDriverNames(String driverName){
  if (jdbcDriverInfos != null)   return jdbcDriverInfos;
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  addDriversFromFiles();
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  Map preferenceMap=JdbcDriverManagerDialog.getPreferenceDriverInfo();
  for (Iterator itr=jdbcDriverInfos.iterator(); itr.hasNext(); ) {
    JDBCDriverInformation info=(JDBCDriverInformation)itr.next();
    Object ob=preferenceMap.get(info.toString());
    if (ob != null) {
      String[] vals=(String[])ob;
      if (vals[1] != null && vals[1].length() > 0) {
        info.setUrlFormat(vals[1]);
      }
    }
  }
  return jdbcDriverInfos;
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 */
public static ArrayList getJdbcDriverNames(String driverName){
  if (jdbcDriverInfos != null)   return jdbcDriverInfos;
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  addDriversFromFiles();
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  Map preferenceMap=JdbcDriverManagerDialog.getPreferenceDriverInfo();
  for (Iterator itr=jdbcDriverInfos.iterator(); itr.hasNext(); ) {
    JDBCDriverInformation info=(JDBCDriverInformation)itr.next();
    Object ob=preferenceMap.get(info.toString());
    if (ob != null) {
      String[] vals=(String[])ob;
      if (vals[1] != null && vals[1].length() > 0) {
        info.setUrlFormat(vals[1]);
      }
    }
  }
  return jdbcDriverInfos;
}",0.9637495422922008
79217,"/** 
 * Sets the image uri property. The source type is automatically set in this method. Whether <code>IMAGE_REF_TYPE_FILE</code> or <code>IMAGE_REF_TYPE_URL</code> depends on the uri to set.
 * @param uri the uri to be set.
 * @throws SemanticException if the property is locked.
 */
public void setURI(String uri) throws SemanticException {
  String source=DesignChoiceConstants.IMAGE_REF_TYPE_URL;
  String filePath=URIUtil.getLocalPath(uri);
  if (filePath != null)   source=DesignChoiceConstants.IMAGE_REF_TYPE_FILE;
  try {
    design.getActivityStack().startTrans();
    setProperty(ImageItem.SOURCE_PROP,source);
    setProperty(ImageItem.URI_PROP,uri);
  }
 catch (  SemanticException e) {
    design.getActivityStack().rollback();
    throw e;
  }
  design.getActivityStack().commit();
}","/** 
 * Sets the image uri property. The source type is automatically set in this method. Whether <code>IMAGE_REF_TYPE_FILE</code> or <code>IMAGE_REF_TYPE_URL</code> depends on the uri to set.
 * @param uri the uri to be set.
 * @throws SemanticException if the property is locked.
 */
public void setURI(String uri) throws SemanticException {
  String source=DesignChoiceConstants.IMAGE_REF_TYPE_URL;
  try {
    design.getActivityStack().startTrans();
    setProperty(ImageItem.SOURCE_PROP,source);
    setProperty(ImageItem.URI_PROP,uri);
  }
 catch (  SemanticException e) {
    design.getActivityStack().rollback();
    throw e;
  }
  design.getActivityStack().commit();
}",0.9179661016949152
79218,"public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    if (btnCustom != null && btnCustom.isFocusControl()) {
      return;
    }
    if (btnGradient != null && btnGradient.isFocusControl()) {
      return;
    }
    if (btnImage != null && btnImage.isFocusControl()) {
      return;
    }
    if (srTransparency != null && srTransparency.isEnabled() && srTransparency.isFocusControl()) {
      return;
    }
    cmpDropDown.getShell().dispose();
    return;
  }
}","public void focusLost(FocusEvent e){
  if (e.getSource().equals(cmpDropDown)) {
    Control cTmp=Display.getCurrent().getCursorControl();
    if (cTmp.equals(btnGradient) || cTmp.equals(btnCustom) || cTmp.equals(btnImage)|| cTmp.equals(srTransparency)) {
      return;
    }
    if (btnCustom != null && btnCustom.isFocusControl()) {
      return;
    }
    if (btnGradient != null && btnGradient.isFocusControl()) {
      return;
    }
    if (btnImage != null && btnImage.isFocusControl()) {
      return;
    }
    if (srTransparency != null && srTransparency.isEnabled() && srTransparency.isFocusControl()) {
      return;
    }
    cmpDropDown.getShell().dispose();
    return;
  }
}",0.8348856900931414
79219,"public void startReport(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildStyle(styleBuffer,report.getDefaultStyle(),this);
    writer.style(""String_Node_Str"",styleBuffer.toString(),true);
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.isEmpty()) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          IStyle tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(IStyle)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
}","public void startReport(IReportContent report){
  logger.log(Level.FINE,""String_Node_Str"");
  this.report=report;
  writer.open(out,""String_Node_Str"");
  if (isEmbeddable) {
    fixTransparentPNG();
    return;
  }
  writer.startWriter();
  writer.openTag(HTMLTags.TAG_HTML);
  writer.openTag(HTMLTags.TAG_META);
  writer.attribute(HTMLTags.ATTR_HTTP_EQUIV,""String_Node_Str"");
  writer.attribute(HTMLTags.ATTR_CONTENT,""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(HTMLTags.TAG_HEAD);
  writer.openTag(HTMLTags.TAG_STYLE);
  writer.attribute(HTMLTags.ATTR_TYPE,""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  IStyle style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    logger.log(Level.WARNING,""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildStyle(styleBuffer,report.getNonInheritableDefaultStyle(),this);
    writer.style(""String_Node_Str"",styleBuffer.toString(),true);
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.isEmpty()) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          IStyle tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(IStyle)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(HTMLTags.TAG_STYLE);
  fixTransparentPNG();
  writer.closeTag(HTMLTags.TAG_HEAD);
}",0.9835164835164836
79220,"protected String getText(){
  TextItemHandle handle=(TextItemHandle)getModel();
  String text=handle.getDisplayContent();
  if (text == null || text.length() == 0) {
    text=FIGURE_DEFAULT_TEXT;
  }
 else {
    if (text.length() > TRUNCATE_LENGTH && DesignChoiceConstants.CONTENT_TYPE_HTML.equals(handle.getContentType())) {
      text=text.substring(0,TRUNCATE_LENGTH - 2) + ELLIPSIS;
    }
  }
  return text;
}","protected String getText(){
  TextItemHandle handle=(TextItemHandle)getModel();
  String text=handle.getDisplayContent();
  if (text == null || text.length() == 0) {
    text=FIGURE_DEFAULT_TEXT;
  }
 else {
    if (text.length() > TRUNCATE_LENGTH && DesignChoiceConstants.TEXT_CONTENT_TYPE_HTML.equals(handle.getContentType())) {
      text=text.substring(0,TRUNCATE_LENGTH - 2) + ELLIPSIS;
    }
  }
  return text;
}",0.9939831528279182
79221,"/** 
 * Gets the collection that given property value can selected from them.
 * @param property DE Property key.
 * @return A String array contains all the allowed values.
 * @deprecated Use getDEChoiceSet( String property ,String elementName)instead
 */
public static Object[] getChoiceSet(String property){
  if (AttributeConstant.DATASET.equals(property)) {
    return getDataSets();
  }
  String unitKey=DesignChoiceConstants.CHOICE_UNITS;
  if (AttributeConstant.BACKGROUND_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_SIZE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_SIZE;
  }
 else   if (AttributeConstant.FONT_FAMILY.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_FAMILY;
  }
 else   if (AttributeConstant.TEXT_FORMAT.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_CONTENT_TYPE;
  }
 else   if (AttributeConstant.BORDER_STYLE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_STYLE;
  }
 else   if (AttributeConstant.BORDER_WIDTH.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_WIDTH;
  }
 else   if (SortKey.DIRECTION_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_SORT_DIRECTION;
  }
 else   if (FilterCondition.OPERATOR_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FILTER_OPERATOR;
  }
 else   if (StyleHandle.VERTICAL_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_VERTICAL_ALIGN;
  }
 else   if (StyleHandle.TEXT_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_TEXT_ALIGN;
  }
 else   if (MasterPageHandle.ORIENTATION_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_ORIENTATION;
  }
 else   if (MasterPageHandle.TYPE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_SIZE;
  }
 else   if (GroupHandle.INTERVAL_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_INTERVAL;
  }
 else   if (StyleHandle.PAGE_BREAK_BEFORE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_AFTER_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_INSIDE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK_INSIDE;
  }
  return getUnitChoiceSet(unitKey);
}","/** 
 * Gets the collection that given property value can selected from them.
 * @param property DE Property key.
 * @return A String array contains all the allowed values.
 * @deprecated Use getDEChoiceSet( String property ,String elementName)instead
 */
public static Object[] getChoiceSet(String property){
  if (AttributeConstant.DATASET.equals(property)) {
    return getDataSets();
  }
  String unitKey=DesignChoiceConstants.CHOICE_UNITS;
  if (AttributeConstant.BACKGROUND_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_SIZE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_SIZE;
  }
 else   if (AttributeConstant.FONT_FAMILY.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_FAMILY;
  }
 else   if (AttributeConstant.TEXT_FORMAT.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_TEXT_CONTENT_TYPE;
  }
 else   if (AttributeConstant.BORDER_STYLE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_STYLE;
  }
 else   if (AttributeConstant.BORDER_WIDTH.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_WIDTH;
  }
 else   if (SortKey.DIRECTION_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_SORT_DIRECTION;
  }
 else   if (FilterCondition.OPERATOR_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FILTER_OPERATOR;
  }
 else   if (StyleHandle.VERTICAL_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_VERTICAL_ALIGN;
  }
 else   if (StyleHandle.TEXT_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_TEXT_ALIGN;
  }
 else   if (MasterPageHandle.ORIENTATION_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_ORIENTATION;
  }
 else   if (MasterPageHandle.TYPE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_SIZE;
  }
 else   if (GroupHandle.INTERVAL_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_INTERVAL;
  }
 else   if (StyleHandle.PAGE_BREAK_BEFORE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_AFTER_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_INSIDE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK_INSIDE;
  }
  return getUnitChoiceSet(unitKey);
}",0.9990104888185236
79222,"/** 
 * Gets the collection that given property value can selected from them.
 * @param property DE Property key.
 * @return The ChoiceSet instance contains all the allowed values.
 * @deprecated Use getDEChoiceSet( String property ,String elementName)instead
 */
public static IChoiceSet getDEChoiceSet(String property){
  String unitKey=DesignChoiceConstants.CHOICE_UNITS;
  if (AttributeConstant.BACKGROUND_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_SIZE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_SIZE;
  }
 else   if (AttributeConstant.FONT_FAMILY.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_FAMILY;
  }
 else   if (AttributeConstant.TEXT_FORMAT.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_CONTENT_TYPE;
  }
 else   if (AttributeConstant.BORDER_STYLE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_STYLE;
  }
 else   if (AttributeConstant.BORDER_WIDTH.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_WIDTH;
  }
 else   if (SortKey.DIRECTION_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_SORT_DIRECTION;
  }
 else   if (FilterCondition.OPERATOR_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FILTER_OPERATOR;
  }
 else   if (StyleHandle.VERTICAL_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_VERTICAL_ALIGN;
  }
 else   if (StyleHandle.TEXT_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_TEXT_ALIGN;
  }
 else   if (MasterPageHandle.ORIENTATION_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_ORIENTATION;
  }
 else   if (MasterPageHandle.TYPE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_SIZE;
  }
 else   if (GroupHandle.INTERVAL_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_INTERVAL;
  }
 else   if (StyleHandle.PAGE_BREAK_BEFORE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_AFTER_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_INSIDE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK_INSIDE;
  }
  return DesignEngine.getMetaDataDictionary().getChoiceSet(unitKey);
}","/** 
 * Gets the collection that given property value can selected from them.
 * @param property DE Property key.
 * @return The ChoiceSet instance contains all the allowed values.
 * @deprecated Use getDEChoiceSet( String property ,String elementName)instead
 */
public static IChoiceSet getDEChoiceSet(String property){
  String unitKey=DesignChoiceConstants.CHOICE_UNITS;
  if (AttributeConstant.BACKGROUND_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_COLOR.equals(property)) {
    unitKey=IColorConstants.COLORS_CHOICE_SET;
  }
 else   if (AttributeConstant.FONT_SIZE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_SIZE;
  }
 else   if (AttributeConstant.FONT_FAMILY.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FONT_FAMILY;
  }
 else   if (AttributeConstant.TEXT_FORMAT.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_TEXT_CONTENT_TYPE;
  }
 else   if (AttributeConstant.BORDER_STYLE.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_STYLE;
  }
 else   if (AttributeConstant.BORDER_WIDTH.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_LINE_WIDTH;
  }
 else   if (SortKey.DIRECTION_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_SORT_DIRECTION;
  }
 else   if (FilterCondition.OPERATOR_MEMBER.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_FILTER_OPERATOR;
  }
 else   if (StyleHandle.VERTICAL_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_VERTICAL_ALIGN;
  }
 else   if (StyleHandle.TEXT_ALIGN_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_TEXT_ALIGN;
  }
 else   if (MasterPageHandle.ORIENTATION_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_ORIENTATION;
  }
 else   if (MasterPageHandle.TYPE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_SIZE;
  }
 else   if (GroupHandle.INTERVAL_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_INTERVAL;
  }
 else   if (StyleHandle.PAGE_BREAK_BEFORE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_AFTER_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK;
  }
 else   if (StyleHandle.PAGE_BREAK_INSIDE_PROP.equals(property)) {
    unitKey=DesignChoiceConstants.CHOICE_PAGE_BREAK_INSIDE;
  }
  return DesignEngine.getMetaDataDictionary().getChoiceSet(unitKey);
}",0.9989957822855996
79223,"/** 
 * Returns the content type of this text item. The content type will one of the following constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>CONTENT_TYPE_AUTO</code> <li><code>CONTENT_TYPE_PLAIN</code> <li><code>CONTENT_TYPE_HTML</code> <li><code>CONTENT_TYPE_RTF</code> </ul>
 * @return the content type. if this property value is not set, return<code>null</code>.
 * @see org.eclipse.birt.report.model.api.elements.DesignChoiceConstants
 */
public String getContentType(){
  return getStringProperty(TextItem.CONTENT_TYPE_PROP);
}","/** 
 * Returns the content type of this text item. The content type will one of the following constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>TEXT_CONTENT_TYPE_AUTO</code> <li><code>TEXT_CONTENT_TYPE_PLAIN</code> <li><code>TEXT_CONTENT_TYPE_HTML</code> <li><code>TEXT_CONTENT_TYPE_RTF</code> </ul>
 * @return the content type. if this property value is not set, return<code>null</code>.
 * @see org.eclipse.birt.report.model.api.elements.DesignChoiceConstants
 */
public String getContentType(){
  return getStringProperty(TextItem.CONTENT_TYPE_PROP);
}",0.9823943661971832
79224,"/** 
 * Sets the content type of this text item. The content type will one of the following constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>CONTENT_TYPE_AUTO</code> <li><code>CONTENT_TYPE_PLAIN</code> <li><code>CONTENT_TYPE_HTML</code> <li><code>CONTENT_TYPE_RTF</code> </ul>
 * @param contentType the content type of this text item.
 * @throws SemanticException if the value is not a valid choice item.
 * @see org.eclipse.birt.report.model.api.elements.DesignChoiceConstants
 */
public void setContentType(String contentType) throws SemanticException {
  setStringProperty(TextItem.CONTENT_TYPE_PROP,contentType);
}","/** 
 * Sets the content type of this text item. The content type will one of the following constants defined in <code>DesignChoiceConstants</code>: <ul> <li><code>TEXT_CONTENT_TYPE_AUTO</code> <li><code>TEXT_CONTENT_TYPE_PLAIN</code> <li><code>TEXT_CONTENT_TYPE_HTML</code> <li><code>TEXT_CONTENT_TYPE_RTF</code> </ul>
 * @param contentType the content type of this text item.
 * @throws SemanticException if the value is not a valid choice item.
 * @see org.eclipse.birt.report.model.api.elements.DesignChoiceConstants
 */
public void setContentType(String contentType) throws SemanticException {
  setStringProperty(TextItem.CONTENT_TYPE_PROP,contentType);
}",0.9846390168970814
79225,"/** 
 * @param style
 * @param handle
 * @param parentHandle
 */
protected void setupDistinctStyleProperties(StyleDesign style,DesignElementHandle handle,DesignElementHandle parentHandle){
  setStyleProperty(style,Style.BACKGROUND_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BACKGROUND_COLOR_PROP));
  setStyleProperty(style,Style.BACKGROUND_IMAGE_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_IMAGE_PROP));
  setStyleProperty(style,Style.BACKGROUND_POSITION_X_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_POSITION_X_PROP));
  setStyleProperty(style,Style.BACKGROUND_POSITION_Y_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_POSITION_Y_PROP));
  setStyleProperty(style,Style.BACKGROUND_REPEAT_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_REPEAT_PROP));
  setStyleProperty(style,Style.TEXT_ALIGN_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_ALIGN_PROP));
  setStyleProperty(style,Style.TEXT_INDENT_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_INDENT_PROP));
  setStyleProperty(style,Style.LETTER_SPACING_PROP,getDistinctProperty(handle,parentHandle,Style.LETTER_SPACING_PROP));
  setStyleProperty(style,Style.LINE_HEIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.LINE_HEIGHT_PROP));
  setStyleProperty(style,Style.ORPHANS_PROP,getDistinctProperty(handle,parentHandle,Style.ORPHANS_PROP));
  setStyleProperty(style,Style.TEXT_TRANSFORM_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_TRANSFORM_PROP));
  setStyleProperty(style,Style.VERTICAL_ALIGN_PROP,getDistinctProperty(handle,parentHandle,Style.VERTICAL_ALIGN_PROP));
  setStyleProperty(style,Style.WHITE_SPACE_PROP,getDistinctProperty(handle,parentHandle,Style.WHITE_SPACE_PROP));
  setStyleProperty(style,Style.WIDOWS_PROP,getDistinctProperty(handle,parentHandle,Style.WIDOWS_PROP));
  setStyleProperty(style,Style.WORD_SPACING_PROP,getDistinctProperty(handle,parentHandle,Style.WORD_SPACING_PROP));
  setStyleProperty(style,Style.DISPLAY_PROP,getDistinctProperty(handle,parentHandle,Style.DISPLAY_PROP));
  setStyleProperty(style,Style.MASTER_PAGE_PROP,getDistinctProperty(handle,parentHandle,Style.MASTER_PAGE_PROP));
  setStyleProperty(style,Style.PAGE_BREAK_AFTER_PROP,getDistinctProperty(handle,parentHandle,Style.PAGE_BREAK_AFTER_PROP));
  setStyleProperty(style,Style.PAGE_BREAK_BEFORE_PROP,getDistinctProperty(handle,parentHandle,Style.PAGE_BREAK_BEFORE_PROP));
  setStyleProperty(style,Style.PAGE_BREAK_INSIDE_PROP,getDistinctProperty(handle,parentHandle,Style.PAGE_BREAK_INSIDE_PROP));
  setStyleProperty(style,Style.FONT_FAMILY_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_FAMILY_PROP));
  setStyleProperty(style,Style.COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.COLOR_PROP));
  setStyleProperty(style,Style.FONT_SIZE_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_SIZE_PROP));
  setStyleProperty(style,Style.FONT_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_STYLE_PROP));
  setStyleProperty(style,Style.FONT_WEIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_WEIGHT_PROP));
  setStyleProperty(style,Style.FONT_VARIANT_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_VARIANT_PROP));
  setStyleProperty(style,Style.TEXT_LINE_THROUGH_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_LINE_THROUGH_PROP));
  setStyleProperty(style,Style.TEXT_OVERLINE_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_OVERLINE_PROP));
  setStyleProperty(style,Style.TEXT_UNDERLINE_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_UNDERLINE_PROP));
  setStyleProperty(style,Style.BORDER_BOTTOM_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_BOTTOM_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_BOTTOM_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_BOTTOM_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_BOTTOM_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_BOTTOM_WIDTH_PROP));
  setStyleProperty(style,Style.BORDER_LEFT_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_LEFT_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_LEFT_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_LEFT_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_LEFT_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_LEFT_WIDTH_PROP));
  setStyleProperty(style,Style.BORDER_RIGHT_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_RIGHT_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_RIGHT_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_RIGHT_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_RIGHT_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_RIGHT_WIDTH_PROP));
  setStyleProperty(style,Style.BORDER_TOP_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_TOP_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_TOP_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_TOP_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_TOP_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_TOP_WIDTH_PROP));
  setStyleProperty(style,Style.MARGIN_TOP_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_TOP_PROP));
  setStyleProperty(style,Style.MARGIN_LEFT_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_LEFT_PROP));
  setStyleProperty(style,Style.MARGIN_BOTTOM_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_BOTTOM_PROP));
  setStyleProperty(style,Style.MARGIN_RIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_RIGHT_PROP));
  setStyleProperty(style,Style.PADDING_TOP_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_TOP_PROP));
  setStyleProperty(style,Style.PADDING_LEFT_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_LEFT_PROP));
  setStyleProperty(style,Style.PADDING_BOTTOM_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_BOTTOM_PROP));
  setStyleProperty(style,Style.PADDING_RIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_RIGHT_PROP));
  setStyleProperty(style,Style.DATE_TIME_FORMAT_PROP,handle.getProperty(Style.DATE_TIME_FORMAT_PROP));
  setStyleProperty(style,Style.NUMBER_FORMAT_PROP,handle.getProperty(Style.NUMBER_FORMAT_PROP));
  setStyleProperty(style,Style.NUMBER_ALIGN_PROP,handle.getProperty(Style.NUMBER_ALIGN_PROP));
  setStyleProperty(style,Style.STRING_FORMAT_PROP,handle.getProperty(Style.STRING_FORMAT_PROP));
  setStyleProperty(style,Style.CAN_SHRINK_PROP,handle.getProperty(Style.CAN_SHRINK_PROP));
  setStyleProperty(style,Style.MASTER_PAGE_PROP,handle.getProperty(Style.MASTER_PAGE_PROP));
  setStyleProperty(style,Style.SHOW_IF_BLANK_PROP,handle.getProperty(Style.SHOW_IF_BLANK_PROP));
}","/** 
 * @param style
 * @param handle
 * @param parentHandle
 */
protected void setupDistinctStyleProperties(StyleDesign style,DesignElementHandle handle,DesignElementHandle parentHandle){
  setStyleProperty(style,Style.BACKGROUND_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BACKGROUND_COLOR_PROP));
  setStyleProperty(style,Style.BACKGROUND_IMAGE_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_IMAGE_PROP));
  setStyleProperty(style,Style.BACKGROUND_POSITION_X_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_POSITION_X_PROP));
  setStyleProperty(style,Style.BACKGROUND_POSITION_Y_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_POSITION_Y_PROP));
  setStyleProperty(style,Style.BACKGROUND_REPEAT_PROP,getDistinctProperty(handle,parentHandle,Style.BACKGROUND_REPEAT_PROP));
  setStyleProperty(style,Style.TEXT_ALIGN_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_ALIGN_PROP));
  setStyleProperty(style,Style.TEXT_INDENT_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_INDENT_PROP));
  setStyleProperty(style,Style.LETTER_SPACING_PROP,getDistinctProperty(handle,parentHandle,Style.LETTER_SPACING_PROP));
  setStyleProperty(style,Style.LINE_HEIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.LINE_HEIGHT_PROP));
  setStyleProperty(style,Style.ORPHANS_PROP,getDistinctProperty(handle,parentHandle,Style.ORPHANS_PROP));
  setStyleProperty(style,Style.TEXT_TRANSFORM_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_TRANSFORM_PROP));
  setStyleProperty(style,Style.VERTICAL_ALIGN_PROP,getDistinctProperty(handle,parentHandle,Style.VERTICAL_ALIGN_PROP));
  setStyleProperty(style,Style.WHITE_SPACE_PROP,getDistinctProperty(handle,parentHandle,Style.WHITE_SPACE_PROP));
  setStyleProperty(style,Style.WIDOWS_PROP,getDistinctProperty(handle,parentHandle,Style.WIDOWS_PROP));
  setStyleProperty(style,Style.WORD_SPACING_PROP,getDistinctProperty(handle,parentHandle,Style.WORD_SPACING_PROP));
  setStyleProperty(style,Style.DISPLAY_PROP,getDistinctProperty(handle,parentHandle,Style.DISPLAY_PROP));
  setStyleProperty(style,Style.MASTER_PAGE_PROP,getDistinctProperty(handle,parentHandle,Style.MASTER_PAGE_PROP));
  setStyleProperty(style,Style.PAGE_BREAK_AFTER_PROP,getDistinctProperty(handle,parentHandle,Style.PAGE_BREAK_AFTER_PROP));
  setStyleProperty(style,Style.PAGE_BREAK_BEFORE_PROP,getDistinctProperty(handle,parentHandle,Style.PAGE_BREAK_BEFORE_PROP));
  setStyleProperty(style,Style.PAGE_BREAK_INSIDE_PROP,getDistinctProperty(handle,parentHandle,Style.PAGE_BREAK_INSIDE_PROP));
  setStyleProperty(style,Style.SHOW_IF_BLANK_PROP,getDistinctProperty(handle,parentHandle,Style.SHOW_IF_BLANK_PROP));
  setStyleProperty(style,Style.CAN_SHRINK_PROP,getDistinctProperty(handle,parentHandle,Style.CAN_SHRINK_PROP));
  setStyleProperty(style,Style.FONT_FAMILY_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_FAMILY_PROP));
  setStyleProperty(style,Style.COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.COLOR_PROP));
  setStyleProperty(style,Style.FONT_SIZE_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_SIZE_PROP));
  setStyleProperty(style,Style.FONT_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_STYLE_PROP));
  setStyleProperty(style,Style.FONT_WEIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_WEIGHT_PROP));
  setStyleProperty(style,Style.FONT_VARIANT_PROP,getDistinctProperty(handle,parentHandle,Style.FONT_VARIANT_PROP));
  setStyleProperty(style,Style.TEXT_LINE_THROUGH_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_LINE_THROUGH_PROP));
  setStyleProperty(style,Style.TEXT_OVERLINE_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_OVERLINE_PROP));
  setStyleProperty(style,Style.TEXT_UNDERLINE_PROP,getDistinctProperty(handle,parentHandle,Style.TEXT_UNDERLINE_PROP));
  setStyleProperty(style,Style.BORDER_BOTTOM_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_BOTTOM_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_BOTTOM_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_BOTTOM_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_BOTTOM_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_BOTTOM_WIDTH_PROP));
  setStyleProperty(style,Style.BORDER_LEFT_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_LEFT_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_LEFT_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_LEFT_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_LEFT_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_LEFT_WIDTH_PROP));
  setStyleProperty(style,Style.BORDER_RIGHT_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_RIGHT_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_RIGHT_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_RIGHT_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_RIGHT_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_RIGHT_WIDTH_PROP));
  setStyleProperty(style,Style.BORDER_TOP_COLOR_PROP,getDistinctColorProperty(handle,parentHandle,Style.BORDER_TOP_COLOR_PROP));
  setStyleProperty(style,Style.BORDER_TOP_STYLE_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_TOP_STYLE_PROP));
  setStyleProperty(style,Style.BORDER_TOP_WIDTH_PROP,getDistinctProperty(handle,parentHandle,Style.BORDER_TOP_WIDTH_PROP));
  setStyleProperty(style,Style.MARGIN_TOP_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_TOP_PROP));
  setStyleProperty(style,Style.MARGIN_LEFT_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_LEFT_PROP));
  setStyleProperty(style,Style.MARGIN_BOTTOM_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_BOTTOM_PROP));
  setStyleProperty(style,Style.MARGIN_RIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.MARGIN_RIGHT_PROP));
  setStyleProperty(style,Style.PADDING_TOP_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_TOP_PROP));
  setStyleProperty(style,Style.PADDING_LEFT_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_LEFT_PROP));
  setStyleProperty(style,Style.PADDING_BOTTOM_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_BOTTOM_PROP));
  setStyleProperty(style,Style.PADDING_RIGHT_PROP,getDistinctProperty(handle,parentHandle,Style.PADDING_RIGHT_PROP));
  setStyleProperty(style,Style.DATE_TIME_FORMAT_PROP,handle.getProperty(Style.DATE_TIME_FORMAT_PROP));
  setStyleProperty(style,Style.NUMBER_FORMAT_PROP,handle.getProperty(Style.NUMBER_FORMAT_PROP));
  setStyleProperty(style,Style.NUMBER_ALIGN_PROP,handle.getProperty(Style.NUMBER_ALIGN_PROP));
  setStyleProperty(style,Style.STRING_FORMAT_PROP,handle.getProperty(Style.STRING_FORMAT_PROP));
  setStyleProperty(style,Style.MASTER_PAGE_PROP,handle.getProperty(Style.MASTER_PAGE_PROP));
}",0.9675324675324676
79226,"/** 
 * Gets color property of style if it differs from that of parent element's style.
 * @param handle The handle of current report element.
 * @param parentHandle The handle of parent report element.
 * @param name The property name.
 * @return the property or null if it is not set.
 */
protected Object getDistinctColorProperty(DesignElementHandle handle,DesignElementHandle parentHandle,String name){
  Object value=handle.getProperty(name);
  int intValue=getColorValue(value);
  String strValue;
  if (intValue == -1) {
    return null;
  }
  if (value instanceof Integer) {
    value=StringUtil.toRgbText(intValue);
  }
  boolean canInherit=StyleDesign.canInherit(name);
  if (canInherit) {
    int parentValue=getColorValue(parentHandle.getProperty(name));
    if (intValue != parentValue) {
      return value;
    }
  }
 else {
    int defaultValue=getColorValue(reportDefaultStyle.get(name));
    if (intValue != defaultValue) {
      return value;
    }
  }
  return null;
}","/** 
 * Gets color property of style if it differs from that of parent element's style.
 * @param handle The handle of current report element.
 * @param parentHandle The handle of parent report element.
 * @param name The property name.
 * @return the property or null if it is not set.
 */
protected Object getDistinctColorProperty(DesignElementHandle handle,DesignElementHandle parentHandle,String name){
  Object value=handle.getProperty(name);
  int intValue=getColorValue(value);
  String strValue;
  if (intValue == -1) {
    return null;
  }
  if (value instanceof Integer) {
    value=StringUtil.toRgbText(intValue);
  }
  boolean canInherit=StyleDesign.canInherit(name);
  if (canInherit) {
    int parentValue;
    if (this.handle == parentHandle) {
      parentValue=getColorValue(reportDefaultStyle.get(name));
    }
 else {
      parentValue=getColorValue(parentHandle.getProperty(name));
    }
    if (intValue != parentValue) {
      return value;
    }
  }
 else {
    int defaultValue=getColorValue(reportDefaultStyle.get(name));
    if (intValue != defaultValue) {
      return value;
    }
  }
  return null;
}",0.9333963155408596
79227,"public IResultSetMetaData getMetaData() throws OdaException {
  JDBCConnectionFactory.log(Level.FINE_LEVEL,""String_Node_Str"");
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  java.sql.ResultSetMetaData resultmd=null;
  try {
    resultmd=preStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPAREDSTATEMENT_METADATA_CANNOT_GET,e);
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=executeQuery();
    if (mdRs != null)     pstmtResultMetaData=mdRs.getMetaData();
  }
  return pstmtResultMetaData;
}","public IResultSetMetaData getMetaData() throws OdaException {
  JDBCConnectionFactory.log(Level.FINE_LEVEL,""String_Node_Str"");
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  java.sql.ResultSetMetaData resultmd=null;
  try {
    resultmd=preStat.getMetaData();
  }
 catch (  NullPointerException e) {
    resultmd=null;
  }
catch (  SQLException e) {
  }
  IResultSetMetaData pstmtResultMetaData=null;
  if (resultmd != null) {
    pstmtResultMetaData=new ResultSetMetaData(resultmd);
  }
 else {
    IResultSet mdRs=executeQuery();
    if (mdRs != null)     pstmtResultMetaData=mdRs.getMetaData();
  }
  return pstmtResultMetaData;
}",0.592156862745098
79228,"public static Object convert(Object source,int toType) throws BirtException {
switch (toType) {
case DataType.INTEGER_TYPE:
    return toInteger(source);
case DataType.DECIMAL_TYPE:
  return toBigDecimal(source);
case DataType.BOOLEAN_TYPE:
return toBoolean(source);
case DataType.DATE_TYPE:
return toDate(source);
case DataType.DOUBLE_TYPE:
return toDouble(source);
case DataType.STRING_TYPE:
return toString(source);
case DataType.BLOB_TYPE:
return toBlob(source);
default :
throw new BirtException(ResourceConstants.INVALID_TYPE,resourceBundle);
}
}","public static Object convert(Object source,Class toTypeClass) throws BirtException {
  if (toTypeClass == Integer.class)   return toInteger(source);
  if (toTypeClass == BigDecimal.class)   return toBigDecimal(source);
  if (toTypeClass == Boolean.class)   return toBoolean(source);
  if (toTypeClass == Date.class)   return toDate(source);
  if (toTypeClass == Double.class)   return toDouble(source);
  if (toTypeClass == String.class)   return toString(source);
  if (toTypeClass == Blob.class)   return toBlob(source);
  throw new BirtException(ResourceConstants.INVALID_TYPE,resourceBundle);
}",0.36
79229,"/** 
 * Converts the result type into one accepted by BIRT: Double (for all numeric types), java.util.Date, String, Boolean. 
 */
public static Object convertNativeObjToJavaObj(Object inputObj){
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",LogUtil.toString(inputObj));
  if (inputObj instanceof Scriptable) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (jsClass.equals(""String_Node_Str"")) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Date((long)Context.toNumber(inputObj)));
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (jsClass.equals(""String_Node_Str"")) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(Context.toBoolean(inputObj)));
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (jsClass.equals(""String_Node_Str"")) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Double(Context.toNumber(inputObj)));
      return new Double(Context.toNumber(inputObj));
    }
 else {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",inputObj.toString().trim());
      return inputObj.toString();
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",inputObj);
  return inputObj;
}","/** 
 * Converts the result type into one accepted by BIRT: Double (for all numeric types), java.util.Date, String, Boolean. 
 */
public static Object convertNativeObjToJavaObj(Object inputObj){
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",LogUtil.toString(inputObj));
  if (inputObj instanceof Scriptable) {
    String jsClass=((Scriptable)inputObj).getClassName();
    if (jsClass.equals(""String_Node_Str"")) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Date((long)Context.toNumber(inputObj)));
      return new Date((long)Context.toNumber(inputObj));
    }
 else     if (jsClass.equals(""String_Node_Str"")) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(Context.toBoolean(inputObj)));
      return new Boolean(Context.toBoolean(inputObj));
    }
 else     if (jsClass.equals(""String_Node_Str"")) {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Double(Context.toNumber(inputObj)));
      return new Double(Context.toNumber(inputObj));
    }
 else {
      if (logger.isLoggable(Level.FINER))       logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",inputObj.toString().trim());
      return inputObj.toString();
    }
  }
 else   if (inputObj != null && inputObj.toString().equalsIgnoreCase(""String_Node_Str""))   inputObj=null;
  if (logger.isLoggable(Level.FINER))   logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",inputObj);
  return inputObj;
}",0.9669369931378664
79230,"/** 
 * Returns <code>true</code> if the given point is outside the viewport or near its edge. Scrolls the viewport by a calculated (time based) amount in the current direction. todo: investigate if we should allow auto expose when the pointer is outside the viewport
 * @see org.eclipse.gef.AutoexposeHelper#step(org.eclipse.draw2d.geometry.Point)
 */
public boolean step(Point where){
  Viewport port=findViewport(owner);
  Rectangle rect=Rectangle.SINGLETON;
  port.getClientArea(rect);
  port.translateToParent(rect);
  port.translateToAbsolute(rect);
  if (!rect.contains(where) || rect.crop(threshold).contains(where))   return false;
  int scrollOffset=0;
  if (lastStepTime == 0)   lastStepTime=System.currentTimeMillis();
  DeferredGraphicalViewer.OriginStepData stepData=((DeferredGraphicalViewer)owner.getViewer()).getOriginStepData();
  long difference=System.currentTimeMillis() - lastStepTime;
  if (difference > 0) {
    scrollOffset=((int)difference / 3);
    lastStepTime=System.currentTimeMillis();
  }
  if (scrollOffset == 0)   return true;
  rect.crop(threshold);
  int region=rect.getPosition(where);
  Point loc=port.getViewLocation();
  if ((region & PositionConstants.SOUTH) != 0)   loc.y+=scrollOffset;
 else   if ((region & PositionConstants.NORTH) != 0)   loc.y-=scrollOffset;
  if ((region & PositionConstants.EAST) != 0)   loc.x+=scrollOffset;
 else   if ((region & PositionConstants.WEST) != 0)   loc.x-=scrollOffset;
  Rectangle bounds=port.getBounds();
  if (stepData.minX > loc.x)   loc.x=port.getHorizontalRangeModel().getValue();
  if (stepData.maxX - stepData.extendX < loc.x)   loc.x=port.getHorizontalRangeModel().getValue();
  if (stepData.minY > loc.y)   loc.y=port.getVerticalRangeModel().getValue();
  if (stepData.maxY - stepData.extendY < loc.y)   loc.y=port.getVerticalRangeModel().getValue();
  port.setViewLocation(loc);
  return true;
}","/** 
 * Returns <code>true</code> if the given point is outside the viewport or near its edge. Scrolls the viewport by a calculated (time based) amount in the current direction. todo: investigate if we should allow auto expose when the pointer is outside the viewport
 * @see org.eclipse.gef.AutoexposeHelper#step(org.eclipse.draw2d.geometry.Point)
 */
public boolean step(Point where){
  Viewport port=findViewport(owner);
  Rectangle rect=Rectangle.SINGLETON;
  port.getClientArea(rect);
  port.translateToParent(rect);
  port.translateToAbsolute(rect);
  if (!rect.contains(where) || rect.crop(threshold).contains(where))   return false;
  int scrollOffset=0;
  if (lastStepTime == 0)   lastStepTime=System.currentTimeMillis();
  DeferredGraphicalViewer.OriginStepData stepData=((DeferredGraphicalViewer)owner.getViewer()).getOriginStepData();
  long difference=System.currentTimeMillis() - lastStepTime;
  if (difference > 0) {
    scrollOffset=((int)difference / 3);
    lastStepTime=System.currentTimeMillis();
  }
  if (scrollOffset == 0)   return true;
  rect.crop(threshold);
  int region=rect.getPosition(where);
  Point loc=port.getViewLocation();
  if ((region & PositionConstants.SOUTH) != 0)   loc.y+=scrollOffset;
 else   if ((region & PositionConstants.NORTH) != 0)   loc.y-=scrollOffset;
  if ((region & PositionConstants.EAST) != 0)   loc.x+=scrollOffset;
 else   if ((region & PositionConstants.WEST) != 0)   loc.x-=scrollOffset;
  if (stepData.minX > loc.x)   loc.x=port.getHorizontalRangeModel().getValue();
  if (stepData.maxX - stepData.extendX < loc.x)   loc.x=port.getHorizontalRangeModel().getValue();
  if (stepData.minY > loc.y)   loc.y=port.getVerticalRangeModel().getValue();
  if (stepData.maxY - stepData.extendY < loc.y)   loc.y=port.getVerticalRangeModel().getValue();
  port.setViewLocation(loc);
  return true;
}",0.990088400750067
79231,"/** 
 * Gets color property of style if it differs from that of parent element's style.
 * @param handle The handle of current report element.
 * @param parentHandle The handle of parent report element.
 * @param name The property name.
 * @return the property or null if it is not set.
 */
protected Object getDistinctColorProperty(DesignElementHandle handle,DesignElementHandle parentHandle,String name){
  Object value;
  Object parentValue;
  value=handle.getProperty(name);
  parentValue=parentHandle.getProperty(name);
  boolean canInherit=StyleDesign.canInherit(name);
  int intValue=getColorValue(value);
  int intContainerValue=getColorValue(parentValue);
  if (value != null && (canInherit || intValue != intContainerValue) && (canInherit || !value.equals(StyleDesign.getDefaultValue(name)))) {
    if (value instanceof Integer) {
      return StringUtil.toRgbText(intValue);
    }
    return value;
  }
  return null;
}","/** 
 * Gets color property of style if it differs from that of parent element's style.
 * @param handle The handle of current report element.
 * @param parentHandle The handle of parent report element.
 * @param name The property name.
 * @return the property or null if it is not set.
 */
protected Object getDistinctColorProperty(DesignElementHandle handle,DesignElementHandle parentHandle,String name){
  Object value;
  Object parentValue;
  value=handle.getProperty(name);
  parentValue=parentHandle.getProperty(name);
  boolean canInherit=StyleDesign.canInherit(name);
  int intValue=getColorValue(value);
  if (value != null && (!canInherit || intValue != getColorValue(parentValue)) && (canInherit || intValue != getColorValue(StyleDesign.getDefaultValue(name)))) {
    if (value instanceof Integer) {
      return StringUtil.toRgbText(intValue);
    }
    return value;
  }
  return null;
}",0.9311475409836064
79232,"/** 
 * Pastes a report item to the slot. The item must be newly created and not yet added to the design.
 * @param content the newly created element
 * @param newPos the position index at which the content to be inserted.
 * @return a list containing all errors for the pasted element
 * @throws ContentException if the element is not allowed in the slot
 * @throws NameException if the element has a duplicate or illegal name
 */
public List paste(DesignElementHandle content,int newPos) throws ContentException, NameException {
  add(content,newPos);
  return checkPostPasteErrors(content.getElement());
}","/** 
 * Pastes a report item to the slot. The item must be newly created and not yet added to the design.
 * @param content the newly created element
 * @param newPos the position index at which the content to be inserted.
 * @return a list containing all errors for the pasted element
 * @throws ContentException if the element is not allowed in the slot
 * @throws NameException if the element has a duplicate or illegal name
 */
public List paste(IDesignElement content,int newPos) throws ContentException, NameException {
  add(content.getHandle(getDesign()),newPos);
  return checkPostPasteErrors((DesignElement)content);
}",0.8818770226537217
79233,"/** 
 * Generates a clone copy of this element. When a report element is cloned, the basic principle is just copying the property value into the clone, the other things, like container references, child list references, listener references will not be cloned; that is, the clone is isolated from the design tree until it is added into a target design tree. <p> When inserting the cloned element into the design tree, user needs to care about the element name confliction; that is, the client needs to call the method <code>  {@link ReportDesignHandle#rename(DesignElementHandle)}</code> to change the element names.
 * @return Object the cloned design element.
 * @throws CloneNotSupportedException if clone is not supported.
 */
public Object clone() throws CloneNotSupportedException {
  DesignElement element=(DesignElement)super.clone();
  element.container=null;
  element.listeners=null;
  element.derived=null;
  element.extendsRef=null;
  element.cachedDefn=null;
  element.handle=null;
  Iterator it=propValues.keySet().iterator();
  element.propValues=new HashMap();
  while (it.hasNext()) {
    String key=(String)it.next();
    PropertyDefn propDefn=getPropertyDefn(key);
    if (propDefn.getTypeCode() == PropertyType.STRUCT_TYPE) {
      if (propDefn.isList()) {
        element.propValues.put(key,cloneStructList((ArrayList)propValues.get(key)));
      }
 else {
        element.propValues.put(key,((Structure)propValues.get(key)).copy());
      }
    }
 else     if (propDefn.getTypeCode() == PropertyType.ELEMENT_REF_TYPE) {
      ElementRefValue refValue=(ElementRefValue)propValues.get(key);
      ElementRefValue newRefValue=new ElementRefValue();
      newRefValue.unresolved(refValue.getName());
      element.propValues.put(key,newRefValue);
    }
 else     element.propValues.put(key,propValues.get(key));
  }
  if (userProperties != null) {
    element.userProperties=new HashMap();
    it=userProperties.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      UserPropertyDefn uDefn=(UserPropertyDefn)userProperties.get(key);
      element.userProperties.put(key,uDefn.copy());
    }
  }
  return element;
}","/** 
 * Generates a clone copy of this element. When a report element is cloned, the basic principle is just copying the property value into the clone, the other things, like container references, child list references, listener references will not be cloned; that is, the clone is isolated from the design tree until it is added into a target design tree. <p> When inserting the cloned element into the design tree, user needs to care about the element name confliction; that is, the client needs to call the method <code>  {@link ReportDesignHandle#rename(DesignElementHandle)}</code> to change the element names.
 * @return Object the cloned design element.
 * @throws CloneNotSupportedException if clone is not supported.
 */
public Object clone() throws CloneNotSupportedException {
  DesignElement element=(DesignElement)super.clone();
  element.container=null;
  element.listeners=null;
  element.derived=null;
  element.extendsRef=null;
  element.cachedDefn=null;
  element.handle=null;
  element.id=0;
  Iterator it=propValues.keySet().iterator();
  element.propValues=new HashMap();
  while (it.hasNext()) {
    String key=(String)it.next();
    PropertyDefn propDefn=getPropertyDefn(key);
    if (propDefn.getTypeCode() == PropertyType.STRUCT_TYPE) {
      if (propDefn.isList()) {
        element.propValues.put(key,cloneStructList((ArrayList)propValues.get(key)));
      }
 else {
        element.propValues.put(key,((Structure)propValues.get(key)).copy());
      }
    }
 else     if (propDefn.getTypeCode() == PropertyType.ELEMENT_REF_TYPE) {
      ElementRefValue refValue=(ElementRefValue)propValues.get(key);
      ElementRefValue newRefValue=new ElementRefValue();
      newRefValue.unresolved(refValue.getName());
      element.propValues.put(key,newRefValue);
    }
 else     element.propValues.put(key,propValues.get(key));
  }
  if (userProperties != null) {
    element.userProperties=new HashMap();
    it=userProperties.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      UserPropertyDefn uDefn=(UserPropertyDefn)userProperties.get(key);
      element.userProperties.put(key,uDefn.copy());
    }
  }
  return element;
}",0.9963082602676512
79234,"/** 
 * Makes a clone of this namespace.
 * @return Object the cloned namespace.
 * @see java.lang.Object#clone()
 */
public Object clone() throws CloneNotSupportedException {
  NameSpace ns=(NameSpace)super.clone();
  ns.names=new HashMap();
  Iterator it=names.keySet().iterator();
  while (it.hasNext()) {
    Object key=it.next();
    ns.names.put(key,names.get(key));
  }
  return ns;
}","public Object clone() throws CloneNotSupportedException {
  NameSpace ns=(NameSpace)super.clone();
  ns.names=new HashMap();
  return ns;
}",0.5245283018867924
79235,"/** 
 * Makes a clone of this root element. The error list, file name are set to empty. A new ID map was generated for the new cloned element.
 * @return Object the cloned report design element.
 * @see java.lang.Object#clone()
 */
public Object clone() throws CloneNotSupportedException {
  ReportDesign design=(ReportDesign)super.clone();
  design.allErrors=new ArrayList();
  design.initSlots();
  for (int i=0; i < slots.length; i++) {
    design.slots[i]=slots[i].copy(design,i);
  }
  design.translations=(TranslationTable)translations.clone();
  design.fileName=null;
  if (MetaDataDictionary.getInstance().useID()) {
    design.idMap=new HashMap();
    generateIdMap(design,design);
  }
  return design;
}","/** 
 * Makes a clone of this root element. The error list, file name are set to empty. A new ID map was generated for the new cloned element.
 * @return Object the cloned report design element.
 * @see java.lang.Object#clone()
 */
public Object clone() throws CloneNotSupportedException {
  ReportDesign design=(ReportDesign)super.clone();
  design.allErrors=new ArrayList();
  design.initSlots();
  for (int i=0; i < slots.length; i++) {
    design.slots[i]=slots[i].copy(design,i);
  }
  design.translations=(TranslationTable)translations.clone();
  design.fileName=null;
  NameSpace.rebuildNamespace(design);
  return design;
}",0.8616071428571429
79236,"/** 
 * Checks whether <code>filePath</code> is a valid file on the disk. <code>filePath</code> can follow these scheme. <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/. </ul>
 * @param filePath the input filePath
 * @return true if filePath exists on the disk. Otherwise false.
 */
private static boolean isFileProtocol(String filePath){
  File file=new File(filePath);
  if (file.toURI().getScheme().equalsIgnoreCase(""String_Node_Str"")) {
    return true;
  }
  return false;
}","/** 
 * Checks whether <code>filePath</code> is a valid file on the disk. <code>filePath</code> can follow these scheme. <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/. </ul>
 * @param filePath the input filePath
 * @return true if filePath exists on the disk. Otherwise false.
 */
private static boolean isFileProtocol(String filePath){
  File file=new File(filePath);
  if (file.toURI().getScheme().equalsIgnoreCase(FILE_SCHEMA)) {
    return true;
  }
  return false;
}",0.9752577319587628
79237,"/** 
 * Checks <code>uri</code> is file path. If <code>uri</code> is an absolute uri and refers to a file, removes ""file://"" and returns the file path. If <code>uri</code> is relative uri and refers to a file, returns the <code>uri</code>. For other cases, returns null.  <p> For examples, following uri are supported: <ul> <li>file://C:/disk/test/data.file <li>/C:/disk/test/data.file <li>/usr/local/disk/test/data.file <li>C:\\disk\\test/data.file <li>C:/disk/test/data.file <li>./test/data.file </ul>
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
public static String getLocalPath(String uri){
  if (uri == null)   return null;
  URI objURI=null;
  try {
    objURI=new URI(uri);
  }
 catch (  URISyntaxException e) {
    if (isFileProtocol(uri))     return uri;
  }
  if (objURI.getScheme() == null) {
    if (isFileProtocol(uri))     return uri;
  }
 else   if (objURI.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
    return objURI.getSchemeSpecificPart();
  }
 else {
    if (objURI.getScheme().length() == 1) {
      return uri;
    }
  }
  return null;
}","/** 
 * Checks <code>uri</code> is file path. If <code>uri</code> is an absolute uri and refers to a file, removes ""file://"" and returns the file path. If <code>uri</code> is relative uri and refers to a file, returns the <code>uri</code>. For other cases, returns null. <p> For examples, following uri are supported: <ul> <li>file://C:/disk/test/data.file <li>/C:/disk/test/data.file <li>/usr/local/disk/test/data.file <li>C:\\disk\\test/data.file <li>C:/disk/test/data.file <li>./test/data.file </ul>
 * @param uri the input uri
 * @return the file path if <code>uri</code> refers to a file. Otherwisenull.
 */
public static String getLocalPath(String uri){
  if (uri == null)   return null;
  URI objURI=null;
  try {
    objURI=new URI(uri);
  }
 catch (  URISyntaxException e) {
    return getLocalFileOfFailedURI(uri);
  }
  if (objURI.getScheme() == null) {
    if (isFileProtocol(uri))     return uri;
  }
 else   if (objURI.getScheme().equalsIgnoreCase(FILE_SCHEMA)) {
    return objURI.getSchemeSpecificPart();
  }
 else {
    if (objURI.getScheme().length() == 1) {
      return uri;
    }
  }
  return null;
}",0.9596094096759876
79238,"/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  AvailableDbObjects=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    AvailableDbObjects.setLayoutData(data);
  }
  AvailableDbObjects.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  AvailableDbObjects.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=AvailableDbObjects.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          AvailableDbObjects.setRedraw(false);
          AvailableDbObjects.deselectAll();
          AvailableDbObjects.setRedraw(true);
          AvailableDbObjects.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData();
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}","/** 
 * Creates the composite,  for displaying the list of available db objects
 * @param parent
 */
private void createTableSelectionComposite(Composite parent){
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessVerticalSpace=true;
    tablescomposite.setLayoutData(data);
  }
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
{
    GridData data=new GridData();
    dataSourceLabel.setLayoutData(data);
  }
  AvailableDbObjects=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
{
    GridData data=new GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace=true;
    data.grabExcessVerticalSpace=true;
    AvailableDbObjects.setLayoutData(data);
  }
  AvailableDbObjects.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  AvailableDbObjects.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (event.widget.getClass() != null)       handleAvailabeTreeSelection();
    }
    private void handleAvailabeTreeSelection(){
      TreeItem items[]=AvailableDbObjects.getSelection();
      for (int i=0; i < items.length; i++) {
        if (items[i].getGrayed()) {
          AvailableDbObjects.setRedraw(false);
          AvailableDbObjects.deselectAll();
          AvailableDbObjects.setRedraw(true);
          AvailableDbObjects.redraw();
        }
      }
    }
  }
);
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
{
    GridLayout groupLayout=new GridLayout();
    groupLayout.numColumns=3;
    groupLayout.verticalSpacing=10;
    selectTableGroup.setLayout(groupLayout);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    selectTableGroup.setLayoutData(data);
  }
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
{
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    data.horizontalSpan=2;
    searchTxt.setLayoutData(data);
  }
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer);
  filterComboViewer.getControl().setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          populateAvailableDbObjects();
        }
      }
);
    }
  }
);
  setRootElement();
  addDragSupportToTree();
}",0.9814200398142005
79239,"/** 
 * Creates a new oda data set. The name is required. If the <code>name</code> is null, we will make a unique name for it. The extension name is for the element to find the extension definition. If the extension name is not given, the oda data set will be created as a ROM element.If the extension name is given, the check will be done for the name. Null will be returned if the extension name is not found in the metadata dictionary.
 * @param name the required oda data set name.
 * @param extensionName the element name of the extension
 * @return a handle to oda data set
 */
public OdaDataSetHandle newOdaDataSet(String name,String extensionName){
  if (extensionName != null) {
    MetaDataDictionary dd=MetaDataDictionary.getInstance();
    ExtensionElementDefn extDefn=(ExtensionElementDefn)dd.getExtension(extensionName);
    if (extDefn == null)     return null;
  }
  OdaDataSet element=new OdaDataSet(name);
  design.makeUniqueName(element);
  element.setProperty(OdaDataSource.EXTENSION_NAME_PROP,extensionName);
  return element.handle(design);
}","/** 
 * Creates a new oda data set. The name is required. If the <code>name</code> is null, we will make a unique name for it. The extension name is for the element to find the extension definition. If the extension name is not given, the oda data set will be created as a ROM element.If the extension name is given, the check will be done for the name. Null will be returned if the extension name is not found in the metadata dictionary.
 * @param name the required oda data set name.
 * @param extensionName the element name of the extension
 * @return a handle to oda data set
 */
public OdaDataSetHandle newOdaDataSet(String name,String extensionName){
  if (extensionName != null) {
    MetaDataDictionary dd=MetaDataDictionary.getInstance();
    ExtensionElementDefn extDefn=(ExtensionElementDefn)dd.getExtension(extensionName);
    if (extDefn == null)     return null;
  }
  OdaDataSet element=new OdaDataSet(name);
  design.makeUniqueName(element);
  element.setProperty(OdaDataSet.EXTENSION_NAME_PROP,extensionName);
  return element.handle(design);
}",0.9967058823529412
79240,"protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_NAME_PROP.equals(propName)) {
    extensionName=(String)value;
    provider=new PeerExtensibilityProvider(this,extensionName);
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}","protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_NAME_PROP.equals(propName)) {
    extensionName=(String)value;
    if (extensionName != null)     provider=new PeerExtensibilityProvider(this,extensionName);
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}",0.9075907590759076
79241,"protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_NAME_PROP.equals(propName)) {
    extensionName=(String)value;
    provider=new AddOnExtensibilityProvider(this,extensionName);
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}","protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_NAME_PROP.equals(propName)) {
    extensionName=(String)value;
    if (extensionName != null)     provider=new AddOnExtensibilityProvider(this,extensionName);
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}",0.9078947368421052
79242,"protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_NAME_PROP.equals(propName)) {
    extensionName=(String)value;
    provider=new AddOnExtensibilityProvider(this,extensionName);
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}","protected void setIntrinsicProperty(String propName,Object value){
  if (EXTENSION_NAME_PROP.equals(propName)) {
    extensionName=(String)value;
    if (extensionName != null)     provider=new AddOnExtensibilityProvider(this,extensionName);
 else     provider=null;
  }
 else {
    super.setIntrinsicProperty(propName,value);
  }
}",0.9078947368421052
79243,"public void writeImage(File dest) throws IOException {
  if (source == IImage.INVALID_IMAGE) {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
    return;
  }
  InputStream input=null;
  if (in != null) {
    input=in;
  }
 else   if (data != null) {
    input=new ByteArrayInputStream(data);
  }
 else {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
  }
  if (!dest.exists()) {
    String parent=new File(dest.getAbsolutePath()).getParent();
    File parentDir=new File(parent);
    if (!parentDir.exists()) {
      parentDir.mkdirs();
    }
    OutputStream output=null;
    try {
      output=new BufferedOutputStream(new FileOutputStream(dest));
      copyStream(input,output);
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
    }
 finally {
      input.close();
      output.close();
    }
  }
}","public void writeImage(File dest) throws IOException {
  if (source == IImage.INVALID_IMAGE) {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
    return;
  }
  InputStream input=null;
  if (in != null) {
    input=in;
  }
 else   if (data != null) {
    input=new ByteArrayInputStream(data);
  }
 else {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
  }
  if (!dest.exists()) {
    String parent=new File(dest.getAbsolutePath()).getParent();
    File parentDir=new File(parent);
    if (!parentDir.exists()) {
      parentDir.mkdirs();
    }
    OutputStream output=null;
    try {
      output=new BufferedOutputStream(new FileOutputStream(dest));
      copyStream(input,output);
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
    }
 finally {
      if (input != null) {
        input.close();
      }
      if (output != null) {
        output.close();
      }
    }
  }
}",0.9497459062676454
79244,"/** 
 * Checks if a given file name contains relative path.
 * @param fileName The file name.
 * @return A <code>boolean</code> value indicating if the file namecontains relative path or not.
 */
public static boolean isRelativePath(String fileName){
  if (fileName == null) {
    return false;
  }
  try {
    URI uri=new URI(fileName);
    return !uri.isAbsolute();
  }
 catch (  URISyntaxException e) {
    File file=new File(fileName);
    return !file.isAbsolute();
  }
}","/** 
 * Checks if a given file name contains relative path.
 * @param fileName The file name.
 * @return A <code>boolean</code> value indicating if the file namecontains relative path or not.
 */
public static boolean isRelativePath(String fileName){
  if (fileName == null || fileName.indexOf(':') > 0 || fileName.startsWith(""String_Node_Str"")) {
    return false;
  }
  if (File.separatorChar == '/') {
    return !fileName.startsWith(File.separator);
  }
 else   if (File.separatorChar == '\\') {
    File file=new File(fileName);
    return !file.isAbsolute();
  }
  return false;
}",0.6779661016949152
79245,"public void writeImage(File dest) throws IOException {
  InputStream input=null;
  if (in != null) {
    input=in;
  }
 else   if (data != null) {
    input=new ByteArrayInputStream(data);
  }
 else {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
  }
  if (!dest.exists()) {
    String parent=new File(dest.getAbsolutePath()).getParent();
    File parentDir=new File(parent);
    if (!parentDir.exists()) {
      parentDir.mkdirs();
    }
    OutputStream output=null;
    try {
      output=new BufferedOutputStream(new FileOutputStream(dest));
      copyStream(input,output);
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
    }
 finally {
      input.close();
      output.close();
    }
  }
}","public void writeImage(File dest) throws IOException {
  if (source == IImage.INVALID_IMAGE) {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
    return;
  }
  InputStream input=null;
  if (in != null) {
    input=in;
  }
 else   if (data != null) {
    input=new ByteArrayInputStream(data);
  }
 else {
    logger.log(Level.SEVERE,""String_Node_Str"",id);
  }
  if (!dest.exists()) {
    String parent=new File(dest.getAbsolutePath()).getParent();
    File parentDir=new File(parent);
    if (!parentDir.exists()) {
      parentDir.mkdirs();
    }
    OutputStream output=null;
    try {
      output=new BufferedOutputStream(new FileOutputStream(dest));
      copyStream(input,output);
    }
 catch (    IOException ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
    }
 finally {
      input.close();
      output.close();
    }
  }
}",0.9326620516047828
79246,"public Image(IImageItemContent content){
  String imgUri=content.getUri();
  byte[] imgData=content.getData();
switch (content.getImageSource()) {
case ImageItemDesign.IMAGE_FILE:
    if (imgUri != null) {
      try {
        in=new BufferedInputStream(new FileInputStream(new File(imgUri)));
        this.id=imgUri;
        this.source=IImage.FILE_IMAGE;
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  break;
case ImageItemDesign.IMAGE_NAME:
if (imgData != null) {
  this.data=imgData;
  this.in=new ByteArrayInputStream(this.data);
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case ImageItemDesign.IMAGE_EXPRESSION:
if (imgData != null) {
this.data=imgData;
this.in=new ByteArrayInputStream(this.data);
this.source=IImage.CUSTOM_IMAGE;
}
break;
case ImageItemDesign.IMAGE_URI:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}","public Image(IImageItemContent content){
  String imgUri=content.getUri();
  byte[] imgData=content.getData();
switch (content.getImageSource()) {
case ImageItemDesign.IMAGE_FILE:
    if (imgUri != null) {
      try {
        in=new BufferedInputStream(new FileInputStream(new File(imgUri)));
        this.id=imgUri;
        this.source=IImage.FILE_IMAGE;
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  break;
case ImageItemDesign.IMAGE_NAME:
if (imgData != null) {
  this.in=new ByteArrayInputStream(imgData);
  this.data=imgData;
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case ImageItemDesign.IMAGE_EXPRESSION:
if (imgData != null) {
this.in=new ByteArrayInputStream(imgData);
this.data=imgData;
this.source=IImage.CUSTOM_IMAGE;
}
break;
case ImageItemDesign.IMAGE_URI:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}",0.9586776859504132
79247,"/** 
 * sets the task locale
 * @param locale the task locale
 */
public void setLocale(Locale locale){
  this.locale=locale;
}","/** 
 * sets the task locale
 * @param locale the task locale
 */
public void setLocale(Locale locale){
  this.locale=locale;
  executionContext.setLocale(locale);
}",0.8698630136986302
79248,"/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design reference
 */
public RunAndRenderTask(ReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
  executionContext.setRunnable(runnable);
  executionContext.setLocale(locale);
}","/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design reference
 */
public RunAndRenderTask(ReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}",0.8406374501992032
79249,"/** 
 * @param engine
 * @param runnable
 */
public GetParameterDefinitionTask(ReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}","/** 
 * @param engine reference to the report engine
 * @param runnable the runnable report design
 */
public GetParameterDefinitionTask(ReportEngine engine,IReportRunnable runnable){
  super(engine,runnable);
}",0.8406593406593407
79250,"public Collection getParameterDefns(boolean includeParameterGroups){
  Collection original=((ReportRunnable)runnable).getParameterDefns(includeParameterGroups);
  Iterator iter=original.iterator();
  params=new ArrayList();
  while (iter.hasNext()) {
    ParameterDefnBase paraBase=(ParameterDefnBase)iter.next();
    try {
      params.add(paraBase.clone());
    }
 catch (    CloneNotSupportedException e) {
      log.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (params != null) {
    iter=params.iterator();
    while (iter.hasNext()) {
      IParameterDefnBase pBase=(IParameterDefnBase)iter.next();
      if (pBase instanceof ScalarParameterDefn) {
        ((ScalarParameterDefn)pBase).setReportDesign(runnable.getDesignHandle().getDesign());
        ((ScalarParameterDefn)pBase).setLocale(locale);
        ((ScalarParameterDefn)pBase).evaluateSelectionList();
      }
 else       if (pBase instanceof ParameterGroupDefn) {
        Iterator iter2=((ParameterGroupDefn)pBase).getContents().iterator();
        while (iter2.hasNext()) {
          IParameterDefnBase p=(IParameterDefnBase)iter2.next();
          if (p instanceof ScalarParameterDefn) {
            ((ScalarParameterDefn)p).setReportDesign(runnable.getDesignHandle().getDesign());
            ((ScalarParameterDefn)p).setLocale(locale);
            ((ScalarParameterDefn)pBase).evaluateSelectionList();
          }
        }
      }
    }
  }
  return params;
}","public Collection getParameterDefns(boolean includeParameterGroups){
  Collection original=((ReportRunnable)runnable).getParameterDefns(includeParameterGroups);
  Iterator iter=original.iterator();
  params=new ArrayList();
  while (iter.hasNext()) {
    ParameterDefnBase pBase=(ParameterDefnBase)iter.next();
    try {
      params.add(pBase.clone());
    }
 catch (    CloneNotSupportedException e) {
      log.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (params != null) {
    iter=params.iterator();
    while (iter.hasNext()) {
      IParameterDefnBase pBase=(IParameterDefnBase)iter.next();
      if (pBase instanceof ScalarParameterDefn) {
        ((ScalarParameterDefn)pBase).setReportDesign(runnable.getDesignHandle().getDesign());
        ((ScalarParameterDefn)pBase).setLocale(locale);
        ((ScalarParameterDefn)pBase).evaluateSelectionList();
      }
 else       if (pBase instanceof ParameterGroupDefn) {
        Iterator iter2=((ParameterGroupDefn)pBase).getContents().iterator();
        while (iter2.hasNext()) {
          IParameterDefnBase p=(IParameterDefnBase)iter2.next();
          if (p instanceof ScalarParameterDefn) {
            ((ScalarParameterDefn)p).setReportDesign(runnable.getDesignHandle().getDesign());
            ((ScalarParameterDefn)p).setLocale(locale);
            ((ScalarParameterDefn)p).evaluateSelectionList();
          }
        }
      }
    }
  }
  return params;
}",0.9965059399021664
79251,"public String getHelpText(){
  String ret=reportDesign.getMessage(helpTextKey,(locale == null) ? Locale.getDefault() : locale);
  if (ret == null)   return helpText;
  return ret;
}","public String getHelpText(){
  if (helpTextKey == null)   return helpText;
  String ret=reportDesign.getMessage(helpTextKey,(locale == null) ? Locale.getDefault() : locale);
  if (ret == null || ret.length() == 0)   return helpText;
  return ret;
}",0.8438228438228438
79252,"public String getDisplayName(){
  String ret=reportDesign.getMessage(displayNameKey,(locale == null) ? Locale.getDefault() : locale);
  if (ret == null)   return displayName;
  return ret;
}","public String getDisplayName(){
  if (displayNameKey == null)   return displayName;
  String ret=reportDesign.getMessage(displayNameKey,(locale == null) ? Locale.getDefault() : locale);
  if (ret == null || ret.length() == 0)   return displayName;
  return ret;
}",0.8388520971302428
79253,"public String getLabel(){
  if (labelKey == null)   return label;
  String ret=design.getMessage(labelKey,(locale == null) ? Locale.getDefault() : locale);
  return (ret == null) ? label : ret;
}","public String getLabel(){
  if (labelKey == null)   return label;
  String ret=design.getMessage(labelKey,(locale == null) ? Locale.getDefault() : locale);
  return (ret == null || ret.length() == 0) ? label : ret;
}",0.948905109489051
79254,"/** 
 * @param value
 */
public void setValue(String value,int type){
  try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
      this.value=DataTypeUtil.toBoolean(value);
    break;
case IScalarParameterDefn.TYPE_DATE_TIME:
  this.value=DataTypeUtil.toDate(value);
break;
case IScalarParameterDefn.TYPE_DECIMAL:
this.value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
this.value=DataTypeUtil.toDouble(value);
break;
default :
this.value=value;
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
this.value=value;
}
}","/** 
 * set parameter choice value. The string value is in English locale, and needs to be parsed back into object value based on the data type. 
 * @param value the string value for the object
 * @param type the parameter data type
 */
public void setValue(String value,int type){
  try {
switch (type) {
case IScalarParameterDefn.TYPE_BOOLEAN:
      this.value=DataTypeUtil.toBoolean(value);
    break;
case IScalarParameterDefn.TYPE_DATE_TIME:
  this.value=DataTypeUtil.toDate(value);
break;
case IScalarParameterDefn.TYPE_DECIMAL:
this.value=DataTypeUtil.toBigDecimal(value);
break;
case IScalarParameterDefn.TYPE_FLOAT:
this.value=DataTypeUtil.toDouble(value);
break;
default :
this.value=value;
break;
}
}
 catch (BirtException e) {
log.log(Level.SEVERE,e.getLocalizedMessage(),e);
this.value=value;
}
}",0.8492176386913229
79255,"/** 
 * @param lableKey
 * @param label
 */
public void setLabel(String lableKey,String label){
  this.label=label;
  this.labelKey=lableKey;
}","/** 
 * @param lableKey the label key string
 * @param label the label string
 */
public void setLabel(String lableKey,String label){
  this.label=label;
  this.labelKey=lableKey;
}",0.8827160493827161
79256,"/** 
 * @param locale
 */
public void setLocale(Locale locale){
  this.locale=locale;
}","/** 
 * @param locale the locale
 */
public void setLocale(Locale locale){
  this.locale=locale;
}",0.9405405405405406
79257,"public ParameterSelectionChoice(ReportDesign design){
  this.design=design;
}","/** 
 * @param design the report design
 */
public ParameterSelectionChoice(ReportDesign design){
  this.design=design;
}",0.7777777777777778
79258,"public Image(IImageItemContent content){
  String imgUri=content.getUri();
  byte[] imgData=content.getData();
switch (content.getImageSource()) {
case ImageItemDesign.IMAGE_FILE:
    if (imgUri != null) {
      try {
        in=new BufferedInputStream(new FileInputStream(new File(imgUri)));
        this.id=imgUri;
        this.source=IImage.FILE_IMAGE;
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  break;
case ImageItemDesign.IMAGE_NAME:
if (imgData != null) {
  this.in=new ByteArrayInputStream(this.data);
  this.data=imgData;
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case ImageItemDesign.IMAGE_EXPRESSION:
if (imgData != null) {
this.in=new ByteArrayInputStream(this.data);
this.data=imgData;
this.source=IImage.CUSTOM_IMAGE;
}
break;
case ImageItemDesign.IMAGE_URI:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}","public Image(IImageItemContent content){
  String imgUri=content.getUri();
  byte[] imgData=content.getData();
switch (content.getImageSource()) {
case ImageItemDesign.IMAGE_FILE:
    if (imgUri != null) {
      try {
        in=new BufferedInputStream(new FileInputStream(new File(imgUri)));
        this.id=imgUri;
        this.source=IImage.FILE_IMAGE;
      }
 catch (      FileNotFoundException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  break;
case ImageItemDesign.IMAGE_NAME:
if (imgData != null) {
  this.data=imgData;
  this.in=new ByteArrayInputStream(this.data);
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case ImageItemDesign.IMAGE_EXPRESSION:
if (imgData != null) {
this.data=imgData;
this.in=new ByteArrayInputStream(this.data);
this.source=IImage.CUSTOM_IMAGE;
}
break;
case ImageItemDesign.IMAGE_URI:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}",0.9587628865979382
79259,"public void visitExtendedItem(ExtendedItemDesign item){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String tagName=handle.getExtensionName();
  IReportItemQuery itemQuery=ExtensionManager.getInstance().createQueryItem(tagName);
  IBaseQueryDefinition[] queries=null;
  IBaseQueryDefinition parentQuery=getParentQuery();
  if (itemQuery != null) {
    try {
      itemQuery.setModelObject(handle);
      queries=itemQuery.getReportQueries(parentQuery);
    }
 catch (    BirtException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
    }
    if (queries != null) {
      item.setQueries(queries);
      for (int i=0; i < queries.length; i++) {
        if (queries[i] != null) {
          this.queries.add(queries[i]);
        }
      }
      if (queries.length > 0) {
        IBaseQueryDefinition query=queries[0];
        if (query != null) {
          item.setQuery(query);
          pushQuery(query);
          pushExpressions(query.getRowExpressions());
          handleReportItemExpressions(item);
          popExpressions();
          popQuery();
        }
      }
    }
  }
}","public void visitExtendedItem(ExtendedItemDesign item){
  ExtendedItemHandle handle=(ExtendedItemHandle)item.getHandle();
  String tagName=handle.getExtensionName();
  IReportItemQuery itemQuery=ExtensionManager.getInstance().createQueryItem(tagName);
  IBaseQueryDefinition[] queries=null;
  IBaseQueryDefinition parentQuery=getParentQuery();
  if (itemQuery != null) {
    try {
      itemQuery.setModelObject(handle);
      queries=itemQuery.getReportQueries(parentQuery);
    }
 catch (    BirtException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
    }
    if (queries != null) {
      item.setQueries(queries);
      for (int i=0; i < queries.length; i++) {
        if (queries[i] != null && queries[i] instanceof IQueryDefinition) {
          this.queries.add(queries[i]);
        }
      }
      if (queries.length > 0) {
        IBaseQueryDefinition query=queries[0];
        if (query != null) {
          item.setQuery(query);
          pushQuery(query);
          pushExpressions(query.getRowExpressions());
          handleReportItemExpressions(item);
          popExpressions();
          popQuery();
        }
      }
    }
  }
}",0.9815303430079156
79260,"/** 
 * Calculates and returns a list containing insert positions of copied cells.
 * @param originalPositions positions of to be replaced cells
 * @param originalRowSpans row spans of to be replaced cells
 * @param copiedRowSpans row spans of copied cells
 * @return a list containing insert positions of copied cells.
 */
protected static int[] getIndexToAdd(int[] originalPositions,int[] originalRowSpans,int[] copiedRowSpans){
  int[] retValue=new int[copiedRowSpans.length];
  int copiedRowCount=0;
  int originalRowCount=0;
  for (int i=0, j=-1; i < copiedRowSpans.length; i++) {
    int copiedRowSpan=copiedRowSpans[i];
    copiedRowCount+=copiedRowSpan;
    while (originalRowCount < copiedRowCount)     originalRowCount+=originalRowSpans[++j];
    retValue[i]=originalPositions[j];
  }
  return retValue;
}","/** 
 * Calculates and returns a list containing insert positions of copied cells.
 * @param originalPositions positions of to be replaced cells
 * @param originalRowSpans row spans of to be replaced cells
 * @param copiedRowSpans row spans of copied cells
 * @return a list containing insert positions of copied cells.
 */
private static int[] getIndexToAdd(int[] originalPositions,int[] originalRowSpans,int[] copiedRowSpans){
  int[] retValue=new int[copiedRowSpans.length];
  int copiedRowCount=0;
  int originalRowCount=0;
  for (int i=0, j=-1; i < copiedRowSpans.length; i++) {
    int copiedRowSpan=copiedRowSpans[i];
    copiedRowCount+=copiedRowSpan;
    while (originalRowCount < copiedRowCount)     originalRowCount+=originalRowSpans[++j];
    retValue[i]=originalPositions[j];
  }
  return retValue;
}",0.9926289926289926
79261,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsertAndPaste(int columnIndex){
  int columnCount=getColumnCount();
  if (columnIndex >= columnCount)   return true;
  int targetColumnIndex=columnIndex++;
  List originalCells=getCellsContextInfo(getCellsUnderColumn(targetColumnIndex));
  if (!isValidInsertAndPasteArea(originalCells))   return false;
  List cells=data.getCells();
  try {
    isSameLayout(cells,originalCells);
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param columnIndex the column index
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
protected boolean canInsertAndPaste(int columnIndex){
  int columnCount=getColumnCount();
  int targetColumnIndex=columnIndex + 1;
  List originalCells=null;
  if (targetColumnIndex > columnCount) {
    originalCells=getCellsContextInfo(getCellsUnderColumn(1));
  }
 else {
    originalCells=getCellsContextInfo(getCellsUnderColumn(targetColumnIndex));
    if (!isValidInsertAndPasteArea(originalCells))     return false;
  }
  List cells=data.getCells();
  try {
    isSameLayout(cells,originalCells);
  }
 catch (  SemanticException e) {
    return false;
  }
  return true;
}",0.5102167182662539
79262,"/** 
 * Pastes the copied column <code>column</code> to the given <code>columnNumber</code> in the target element.
 * @param column the copied column
 * @param columnNumber the column number
 * @param isInsert <code>true</code> if this is an insert and paste action. Otherwise <code>false</code>.
 * @throws SemanticException if any error occurs during pasting a column header
 */
protected void pasteColumn(TableColumn column,int columnNumber,boolean isInsert) throws SemanticException {
  TableColumn targetColumn=null;
  SlotHandle columns=getColumns();
  if (columns.getCount() == 0 && column == null)   return;
  if (columns.getCount() == 0 && column != null) {
    addColumnHeader(column,columnNumber,isInsert);
    return;
  }
  targetColumn=ColumnHelper.findColumn(getDesign(),columns.getSlot(),columnNumber);
  replaceColumn(column,targetColumn.handle(getDesign()),columnNumber,isInsert);
}","/** 
 * Pastes the copied column <code>column</code> to the given <code>columnNumber</code> in the target element.
 * @param column the copied column
 * @param columnNumber the column number
 * @param isInsert <code>true</code> if this is an insert and paste action. Otherwise <code>false</code>.
 * @throws SemanticException if any error occurs during pasting a column header
 */
protected void pasteColumn(TableColumn column,int columnNumber,boolean isInsert) throws SemanticException {
  TableColumn targetColumn=null;
  SlotHandle columns=getColumns();
  if (columns.getCount() == 0 && column == null)   return;
  if (columns.getCount() == 0 && column != null) {
    addColumnHeader(column,columnNumber,isInsert);
    return;
  }
  if (isInsert && columnNumber == 0) {
    columns.add(column.handle(getDesign()),0);
    return;
  }
  targetColumn=ColumnHelper.findColumn(getDesign(),columns.getSlot(),columnNumber);
  replaceColumn(column,targetColumn.handle(getDesign()),columnNumber,isInsert);
}",0.9463157894736842
79263,"/** 
 * Checks whether the insert and paste operation can be done with the given copied column band data, the column index and the operation flag. This is different from <code>canPasteColumn</code> since this action creates an extra column for the table.
 * @param data the column band data to paste
 * @param columnIndex the column index
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canInsertAndPasteColumn(ColumnBandData data,int columnIndex){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  return adapter.canInsertAndPaste(this,columnIndex);
}","/** 
 * Checks whether the insert and paste operation can be done with the given copied column band data, the column index and the operation flag. This is different from <code>canPasteColumn</code> since this action creates an extra column for the table.
 * @param data the column band data to paste
 * @param columnIndex the column index from 0 to the number of columns in the grid
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canInsertAndPasteColumn(ColumnBandData data,int columnIndex){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  return adapter.canInsertAndPaste(this,columnIndex);
}",0.9702702702702702
79264,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param data the column band data to paste
 * @param columnIndex the column index
 * @param inForce <code>true</code> indicates to paste the column regardless of the different layout of cells. <code>false</code> indicates not.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canPasteColumn(ColumnBandData data,int columnIndex,boolean inForce){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  return adapter.canPaste(this,columnIndex,inForce);
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param data the column band data to paste
 * @param columnIndex the column index from 1 to the number of columns in the grid
 * @param inForce <code>true</code> indicates to paste the column regardless of the different layout of cells. <code>false</code> indicates not.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canPasteColumn(ColumnBandData data,int columnIndex,boolean inForce){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  return adapter.canPaste(this,columnIndex,inForce);
}",0.9715025906735753
79265,"/** 
 * Pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column number
 * @param inForce <code>true</code> if pastes the column regardless of the warning. Otherwise <code>false</code>.
 * @throws SemanticException
 */
public void pasteColumn(ColumnBandData data,int columnNumber,boolean inForce) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  adapter.pasteColumnBand(this,columnNumber,inForce);
}","/** 
 * Pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column index from 1 to the number of columns in the grid
 * @param inForce <code>true</code> if pastes the column regardless of the warning. Otherwise <code>false</code>.
 * @throws SemanticException
 */
public void pasteColumn(ColumnBandData data,int columnNumber,boolean inForce) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  adapter.pasteColumnBand(this,columnNumber,inForce);
}",0.9562450278440732
79266,"/** 
 * Inserts and pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column number
 * @throws SemanticException
 */
public void insertAndPasteColumn(ColumnBandData data,int columnNumber) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  adapter.insertAndPasteColumnBand(this,columnNumber);
}","/** 
 * Inserts and pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnIndex the column index from 0 to the number of columns in the grid
 * @throws SemanticException
 */
public void insertAndPasteColumn(ColumnBandData data,int columnIndex) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  GridColumnBandAdapter adapter=new GridColumnBandAdapter(data);
  adapter.insertAndPasteColumnBand(this,columnIndex);
}",0.903660886319846
79267,"/** 
 * Pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column number
 * @param inForce <code>true</code> if pastes the column regardless of the warning. Otherwise <code>false</code>.
 * @throws SemanticException
 */
public void pasteColumn(ColumnBandData data,int columnNumber,boolean inForce) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  adapter.pasteColumnBand(this,columnNumber,inForce);
}","/** 
 * Pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column index from 1 to the number of columns in the table
 * @param inForce <code>true</code> if pastes the column regardless of the warning. Otherwise <code>false</code>.
 * @throws SemanticException
 */
public void pasteColumn(ColumnBandData data,int columnNumber,boolean inForce) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  adapter.pasteColumnBand(this,columnNumber,inForce);
}",0.9556259904912836
79268,"/** 
 * Checks whether the insert and paste operation can be done with the given copied column band data, the column index and the operation flag. This is different from <code>canPasteColumn</code> since this action creates an extra column for the table.
 * @param data the column band data to paste
 * @param columnIndex the column index
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canInsertAndPasteColumn(ColumnBandData data,int columnIndex){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  return adapter.canInsertAndPaste(this,columnIndex);
}","/** 
 * Checks whether the insert and paste operation can be done with the given copied column band data, the column index and the operation flag. This is different from <code>canPasteColumn</code> since this action creates an extra column for the table.
 * @param data the column band data to paste
 * @param columnIndex the column index from 0 to the number of columns in the table
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canInsertAndPasteColumn(ColumnBandData data,int columnIndex){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  return adapter.canInsertAndPaste(this,columnIndex);
}",0.9696969696969696
79269,"/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param data the column band data to paste
 * @param columnIndex the column index
 * @param inForce <code>true</code> indicates to paste the column regardless of the different layout of cells. <code>false</code> indicates not.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canPasteColumn(ColumnBandData data,int columnIndex,boolean inForce){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  return adapter.canPaste(this,columnIndex,inForce);
}","/** 
 * Checks whether the paste operation can be done with the given copied column band data, the column index and the operation flag.
 * @param data the column band data to paste
 * @param columnIndex the column index from 1 to the number of columns in the table
 * @param inForce <code>true</code> indicates to paste the column regardless of the different layout of cells. <code>false</code> indicates not.
 * @return <code>true</code> indicates the paste operation can be done.Otherwise <code>false</code>.
 */
public boolean canPasteColumn(ColumnBandData data,int columnIndex,boolean inForce){
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  return adapter.canPaste(this,columnIndex,inForce);
}",0.9709489993544222
79270,"/** 
 * Inserts and pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column number
 * @throws SemanticException
 */
public void insertAndPasteColumn(ColumnBandData data,int columnNumber) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  adapter.insertAndPasteColumnBand(this,columnNumber);
}","/** 
 * Inserts and pastes a column with its cells to the given column number.
 * @param data the data of a column band to paste
 * @param columnNumber the column index from 0 to the number of columns in the table
 * @throws SemanticException
 */
public void insertAndPasteColumn(ColumnBandData data,int columnNumber) throws SemanticException {
  if (data == null)   throw new IllegalArgumentException(""String_Node_Str"");
  TableColumnBandAdapter adapter=new TableColumnBandAdapter(data);
  adapter.insertAndPasteColumnBand(this,columnNumber);
}",0.9464627151051626
79271,"/** 
 * Checks whether there is any cell that has ""drop"" property.
 * @param element a grid or table element
 * @return <code>true</code> if any cell has the ""drop"" property,otherwise <code>false</code>.
 */
private boolean hasDroppingCell(DesignElement element){
  if (element instanceof GridItem)   return false;
  ContainerSlot groups=element.getSlot(ListingElement.GROUP_SLOT);
  int groupCount=groups.getCount();
  for (int groupIndex=0; groupIndex < groupCount; groupIndex++) {
    TableGroup group=(TableGroup)groups.getContent(groupIndex);
    ContainerSlot header=group.getSlot(TableGroup.HEADER_SLOT);
    TableRow row=(TableRow)header.getContent(header.getCount() - 1);
    ContainerSlot cells=row.getSlot(TableRow.CONTENT_SLOT);
    for (int cellIndex=0; cellIndex < cells.getCount(); cellIndex++) {
      Cell cell=(Cell)cells.getContent(cellIndex);
      String drop=(String)cell.getLocalProperty(null,Cell.DROP_PROP);
      if (DesignChoiceConstants.DROP_TYPE_ALL.equalsIgnoreCase(drop) || DesignChoiceConstants.DROP_TYPE_DETAIL.equalsIgnoreCase(drop))       return true;
    }
  }
  return false;
}","/** 
 * Checks whether there is any cell that has ""drop"" property.
 * @param element a grid or table element
 * @return <code>true</code> if any cell has the ""drop"" property,otherwise <code>false</code>.
 */
private boolean hasDroppingCell(DesignElement element){
  if (element instanceof GridItem)   return false;
  ContainerSlot groups=element.getSlot(ListingElement.GROUP_SLOT);
  int groupCount=groups.getCount();
  for (int groupIndex=0; groupIndex < groupCount; groupIndex++) {
    TableGroup group=(TableGroup)groups.getContent(groupIndex);
    ContainerSlot header=group.getSlot(TableGroup.HEADER_SLOT);
    if (header.getCount() <= 0)     continue;
    TableRow row=(TableRow)header.getContent(header.getCount() - 1);
    ContainerSlot cells=row.getSlot(TableRow.CONTENT_SLOT);
    for (int cellIndex=0; cellIndex < cells.getCount(); cellIndex++) {
      Cell cell=(Cell)cells.getContent(cellIndex);
      String drop=(String)cell.getLocalProperty(null,Cell.DROP_PROP);
      if (DesignChoiceConstants.DROP_TYPE_ALL.equalsIgnoreCase(drop) || DesignChoiceConstants.DROP_TYPE_DETAIL.equalsIgnoreCase(drop))       return true;
    }
  }
  return false;
}",0.9797713280562884
79272,"public RowSet(DteResultSet rset){
  this.rset=rset;
  try {
    metaData=new RowMetaData(rset.getQr().getResultMetaData());
  }
 catch (  BirtException ex) {
  }
}","public RowSet(DteResultSet rset){
  closed=false;
  this.rset=rset;
  try {
    metaData=new RowMetaData(rset.getQr().getResultMetaData());
  }
 catch (  BirtException ex) {
  }
}",0.953216374269006
79273,"public void close(){
  rset.close();
}","public void close(){
  if (closed == false) {
    closed=true;
    rset.close();
  }
}",0.6129032258064516
79274,"public IReportItemQuery createQueryItem(String itemType){
  IConfigurationElement config=(IConfigurationElement)queryExtensions.get(itemType);
  if (config != null) {
    Object object=createObject(config,""String_Node_Str"");
    if (object instanceof IReportItemPresentation) {
      return (IReportItemQuery)object;
    }
  }
  return null;
}","public IReportItemQuery createQueryItem(String itemType){
  IConfigurationElement config=(IConfigurationElement)queryExtensions.get(itemType);
  if (config != null) {
    Object object=createObject(config,""String_Node_Str"");
    if (object instanceof IReportItemQuery) {
      return (IReportItemQuery)object;
    }
  }
  return null;
}",0.974963181148748
79275,"WrappedDriver(Driver d){
  this.driver=d;
}","WrappedDriver(Driver d,String driverClass){
  logger.entering(WrappedDriver.class.getName(),""String_Node_Str"",driverClass);
  this.driver=d;
  this.driverClass=driverClass;
}",0.3963133640552995
79276,"/** 
 * Search driver in the ""drivers"" directory and load it if found
 * @param className
 * @return
 * @throws DriverException
 * @throws OdaException
 */
private Class loadExtraDriver(String className){
  if (extraDriverLoader == null)   extraDriverLoader=new DriverClassLoader();
  try {
    return extraDriverLoader.loadClass(className);
  }
 catch (  ClassNotFoundException e) {
    if (!extraDriverLoader.refreshURLs()) {
      return null;
    }
    try {
      return extraDriverLoader.loadClass(className);
    }
 catch (    ClassNotFoundException e1) {
      return null;
    }
  }
}","/** 
 * Search driver in the ""drivers"" directory and load it if found
 * @param className
 * @return
 * @throws DriverException
 * @throws OdaException
 */
private Class loadExtraDriver(String className,boolean refreshUrlsWhenFail){
}",0.498186215235792
79277,"public DriverClassLoader(){
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  getDriverHomeDir();
  refreshURLs();
}","public DriverClassLoader(){
  super(new URL[0],DriverClassLoader.class.getClassLoader());
  logger.entering(DriverClassLoader.class.getName(),""String_Node_Str"");
  getDriverHomeDir();
  refreshURLs();
}",0.7831325301204819
79278,"public boolean acceptsURL(String u) throws SQLException {
  return this.driver.acceptsURL(u);
}","public boolean acceptsURL(String u) throws SQLException {
  boolean res=this.driver.acceptsURL(u);
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + driverClass + ""String_Node_Str""+ u+ ""String_Node_Str""+ res);
  return res;
}",0.4985835694050991
79279,"/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 */
public boolean refreshURLs(){
  String[] newJARFiles=getNewJARFiles();
  if (newJARFiles == null || newJARFiles.length == 0)   return false;
  for (int i=0; i < newJARFiles.length; i++) {
    addURL(constructURL(newJARFiles[i]));
    fileNameList.add(newJARFiles[i]);
  }
  return true;
}","/** 
 * Refresh the URL list of DriverClassLoader
 * @return if the refreshURL is different than the former one then return true otherwisereturn false
 */
public boolean refreshURLs(){
  String[] newJARFiles=getNewJARFiles();
  if (newJARFiles == null || newJARFiles.length == 0)   return false;
  for (int i=0; i < newJARFiles.length; i++) {
    URL fileUrl=constructURL(newJARFiles[i]);
    addURL(fileUrl);
    fileNameList.add(newJARFiles[i]);
    logger.info(""String_Node_Str"" + newJARFiles[i] + ""String_Node_Str""+ fileUrl);
  }
  return true;
}",0.878147029204431
79280,"/** 
 * Gets a JDBC connection 
 * @param driverClass Class name of JDBC driver
 * @param url Connection URL
 * @param user connection user name
 * @param password connection password
 * @return new JDBC connection
 * @throws SQLException
 */
public Connection getConnection(String driverClass,String url,String user,String password) throws SQLException, ClassNotFoundException {
  loadAndRegisterDriver(driverClass);
  return DriverManager.getConnection(url,user,password);
}","/** 
 * Gets a JDBC connection 
 * @param driverClass Class name of JDBC driver
 * @param url Connection URL
 * @param user connection user name
 * @param password connection password
 * @return new JDBC connection
 * @throws SQLException
 */
public Connection getConnection(String driverClass,String url,String user,String password) throws SQLException, ClassNotFoundException {
  if (url == null)   throw new NullPointerException(""String_Node_Str"");
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + (driverClass == null ? ""String_Node_Str"" : driverClass) + ""String_Node_Str""+ url+ ""String_Node_Str""+ ((user == null) ? ""String_Node_Str"" : user));
  loadAndRegisterDriver(driverClass);
  return DriverManager.getConnection(url,user,password);
}",0.7665056360708534
79281,"private boolean loadAndRegisterDriver(String className) throws ClassNotFoundException {
  if (className == null || className.length() == 0)   return false;
  Class driverClass=null;
  if (!registeredDrivers.contains(className)) {
    try {
      driverClass=Class.forName(className);
    }
 catch (    ClassNotFoundException e) {
      driverClass=loadExtraDriver(className);
      if (driverClass == null)       return false;
    }
    Driver driver=null;
    try {
      driver=(Driver)driverClass.newInstance();
    }
 catch (    IllegalAccessException e) {
      return false;
    }
catch (    InstantiationException e) {
      return false;
    }
    try {
      DriverManager.registerDriver(new WrappedDriver(driver));
    }
 catch (    SQLException e) {
    }
    registeredDrivers.add(className);
  }
  return true;
}","private boolean loadAndRegisterDriver(String className) throws ClassNotFoundException {
  if (className == null || className.length() == 0)   return false;
  Class driverClass=null;
  if (registeredDrivers.contains(className))   return true;
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  boolean driverInClassPath=false;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
    driverInClassPath=true;
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      return false;
    }
  }
  if (!driverInClassPath) {
    Driver driver=null;
    try {
      driver=(Driver)driverClass.newInstance();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + className,e);
      return false;
    }
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.add(className);
  return true;
}",0.6475930971843779
79282,"public java.sql.Connection connect(String u,Properties p) throws SQLException {
  return this.driver.connect(u,p);
}","public java.sql.Connection connect(String u,Properties p) throws SQLException {
  logger.entering(WrappedDriver.class.getName() + ""String_Node_Str"" + driverClass,""String_Node_Str"",u);
  return this.driver.connect(u,p);
}",0.6904761904761905
79283,"/** 
 * Construct a URL using given file name.
 * @param filename the name of file the constructed URL linked to 
 * @return URL constructed based on the given file name
 */
private URL constructURL(String filename){
  URL url=null;
  try {
    url=new URL(""String_Node_Str"",null,-1,new File(driverHomeDir,filename).getAbsolutePath());
  }
 catch (  MalformedURLException e) {
    assert(false);
  }
  return url;
}","/** 
 * Construct a URL using given file name.
 * @param filename the name of file the constructed URL linked to 
 * @return URL constructed based on the given file name
 */
private URL constructURL(String filename){
  URL url=null;
  try {
    url=new URL(""String_Node_Str"",null,-1,new File(driverHomeDir,filename).getAbsolutePath());
  }
 catch (  MalformedURLException e) {
    logger.log(Level.WARNING,""String_Node_Str"" + filename,e);
    assert(false);
  }
  return url;
}",0.905829596412556
79284,"/** 
 * Gets the list of property definitions available to this element. Includes all properties defined for this element, all user-defined properties defined on this element or its ancestors, any style properties that this element supports and extension properties that the extended element of this item supports.
 * @see org.eclipse.birt.report.model.core.DesignElement#getPropertyDefns()
 */
public List getPropertyDefns(){
  if (provider != null)   return provider.getPropertyDefns();
  return super.getPropertyDefns();
}","/** 
 * Gets the list of property definitions available to this element. Includes all properties defined for this element, all user-defined properties defined on this element or its ancestors, any style properties that this element supports and extension properties that the extended element of this item supports.
 * @see org.eclipse.birt.report.model.core.DesignElement#getPropertyDefns()
 */
public List getPropertyDefns(){
  ElementDefn elementDefn=(ElementDefn)super.getDefn();
  List propDefns=elementDefn.getProperties();
  if (provider != null)   propDefns.addAll(provider.getPropertyDefns());
  return propDefns;
}",0.8606271777003485
79285,"/** 
 * Returns the read-only list of all property definitions, including not only those defined in Model and extension definition file, but those defined by <code>IReportItem</code>. The returned list is read-only, so no modification is allowed on this list. Each one in list is the instance of <code>IPropertyDefn</code>.
 * @return the read-only list of all property definitions. Return empty listif there is no property defined.
 */
public List getPropertyDefns(){
  List props=super.getPropertyDefns();
  PeerExtensionElementDefn extDefn=(PeerExtensionElementDefn)getExtDefn();
  if (extDefn == null)   return props;
  IPropertyDefinition[] dynamicProps=getExtensionModelPropertyDefns();
  if (dynamicProps != null) {
    for (int i=0; i < dynamicProps.length; i++) {
      IPropertyDefinition extProp=dynamicProps[i];
      props.add(new ExtensionModelPropertyDefn(extProp,extDefn.getReportItemFactory().getMessages()));
    }
  }
  return props;
}","/** 
 * Returns the read-only list of all property definitions, including not only those defined in Model and extension definition file, but those defined by <code>IReportItem</code>. The returned list is read-only, so no modification is allowed on this list. Each one in list is the instance of <code>IPropertyDefn</code>.
 * @return the read-only list of all property definitions. Return empty listif there is no property defined.
 */
public List getPropertyDefns(){
  List props=new ArrayList();
  PeerExtensionElementDefn extDefn=(PeerExtensionElementDefn)getExtDefn();
  if (extDefn == null)   return props;
  props.addAll(extDefn.getLocalProperties());
  IPropertyDefinition[] dynamicProps=getExtensionModelPropertyDefns();
  if (dynamicProps != null) {
    for (int i=0; i < dynamicProps.length; i++) {
      IPropertyDefinition extProp=dynamicProps[i];
      props.add(new ExtensionModelPropertyDefn(extProp,extDefn.getReportItemFactory().getMessages()));
    }
  }
  return props;
}",0.9583547557840616
79286,"/** 
 * Insert a row to a specific position.
 * @param rowNumber The row number. 1 insert after position. -1 insert before position
 * @param parentRowNumber The row number in the table.
 * @throws SemanticException
 */
public void insertRow(int rowNumber,int parentRowNumber) throws SemanticException {
  transStar(TRANS_LABEL_INSERT_ROW);
  Assert.isLegal(rowNumber != 0);
  int realRowNumber=rowNumber > 0 ? parentRowNumber + rowNumber : parentRowNumber + rowNumber + 1;
  int shiftPos=rowNumber > 0 ? rowNumber : rowNumber + 1;
  RowHandle row=(RowHandle)getRow(parentRowNumber);
  RowHandleAdapter adapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(row);
  RowHandle copy=(RowHandle)adapt.copy();
  TableHandleAdapter.RowUIInfomation rowInfo=getRowInfo(row);
  List rowList=rowInfo.getAllChildren();
  int rowSize=rowList.size();
  for (int i=0; i < rowSize; i++) {
    CellHandle parentCell=(CellHandle)rowList.get(i);
    CellHandle cell=getCellHandleCopy(parentCell);
    copy.getSlot(TableRow.CONTENT_SLOT).add(cell);
  }
  SlotHandle parentHandle=row.getContainerSlotHandle();
  parentHandle.add((copy));
  int pos=parentHandle.findPosn(row.getElement());
  parentHandle.shift(copy,pos + shiftPos);
  RowHandleAdapter copyAdapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(copy);
  List copyChildren=copyAdapt.getChildren();
  TableHandleAdapter.RowUIInfomation info=getRowInfo(copy);
  List list=info.getAllChildren();
  List temp=new ArrayList();
  int size=list.size();
  List hasAdjust=new ArrayList();
  for (int i=0; i < size; i++) {
    Object fillCell=list.get(i);
    CellHandleAdapter cellAdapt=HandleAdapterFactory.getInstance().getCellHandleAdapter(fillCell);
    if (cellAdapt.getRowNumber() != realRowNumber) {
      if (!hasAdjust.contains(fillCell)) {
        cellAdapt.setRowSpan(cellAdapt.getRowSpan() + 1);
        hasAdjust.add(fillCell);
      }
      temp.add(new Integer(i));
    }
  }
  int copyRowSize=copyChildren.size();
  for (int i=0; i < copyRowSize; i++) {
    if (temp.contains(new Integer(i))) {
      ((CellHandle)copyChildren.get(i)).drop();
    }
  }
  transEnd();
}","/** 
 * Insert a row to a specific position.
 * @param rowNumber The row number. 1 insert after position. -1 insert before position
 * @param parentRowNumber The row number in the table.
 * @throws SemanticException
 */
public void insertRow(int rowNumber,int parentRowNumber) throws SemanticException {
  transStar(TRANS_LABEL_INSERT_ROW);
  Assert.isLegal(rowNumber != 0);
  int realRowNumber=rowNumber > 0 ? parentRowNumber + rowNumber : parentRowNumber + rowNumber + 1;
  int shiftPos=rowNumber > 0 ? rowNumber : rowNumber + 1;
  RowHandle row=(RowHandle)getRow(parentRowNumber);
  RowHandleAdapter adapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(row);
  RowHandle copy=(RowHandle)adapt.copy();
  TableHandleAdapter.RowUIInfomation rowInfo=getRowInfo(row);
  List rowList=rowInfo.getAllChildren();
  int rowSize=rowList.size();
  for (int i=0; i < rowSize; i++) {
    CellHandle parentCell=(CellHandle)rowList.get(i);
    CellHandle cell=getCellHandleCopy(parentCell);
    copy.getSlot(TableRow.CONTENT_SLOT).add(cell);
  }
  SlotHandle parentHandle=row.getContainerSlotHandle();
  parentHandle.add((copy));
  int pos=parentHandle.findPosn(row);
  parentHandle.shift(copy,pos + shiftPos);
  RowHandleAdapter copyAdapt=HandleAdapterFactory.getInstance().getRowHandleAdapter(copy);
  List copyChildren=copyAdapt.getChildren();
  TableHandleAdapter.RowUIInfomation info=getRowInfo(copy);
  List list=info.getAllChildren();
  List temp=new ArrayList();
  int size=list.size();
  List hasAdjust=new ArrayList();
  for (int i=0; i < size; i++) {
    Object fillCell=list.get(i);
    CellHandleAdapter cellAdapt=HandleAdapterFactory.getInstance().getCellHandleAdapter(fillCell);
    if (cellAdapt.getRowNumber() != realRowNumber) {
      if (!hasAdjust.contains(fillCell)) {
        cellAdapt.setRowSpan(cellAdapt.getRowSpan() + 1);
        hasAdjust.add(fillCell);
      }
      temp.add(new Integer(i));
    }
  }
  int copyRowSize=copyChildren.size();
  for (int i=0; i < copyRowSize; i++) {
    if (temp.contains(new Integer(i))) {
      ((CellHandle)copyChildren.get(i)).drop();
    }
  }
  transEnd();
}",0.9969418960244648
79287,"/** 
 * Gets the tool used to process multil-selection.
 * @param modelList DE model list.
 * @return The tool used to process multil-selection.
 */
public static GroupElementHandle getMultiSelectionHandle(List modelList){
  ReportDesign design=SessionHandleAdapter.getInstance().getReportDesign();
  GroupElementHandle handle=new GroupElementHandle(design,modelList);
  return handle;
}","/** 
 * Gets the tool used to process multil-selection.
 * @param modelList DE model list.
 * @return The tool used to process multil-selection.
 */
public static GroupElementHandle getMultiSelectionHandle(List modelList){
  ReportDesignHandle designHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  GroupElementHandle handle=new GroupElementHandle(designHandle,modelList);
  return handle;
}",0.9523809523809524
79288,"private URL generateURL(String uri) throws MalformedURLException {
  String path=URIUtil.getLocalPath(uri);
  if (path != null) {
    String fullPath=SessionHandleAdapter.getInstance().getSessionHandle().getFileLocator().findFile(SessionHandleAdapter.getInstance().getReportDesign(),path);
    if (fullPath == null) {
      return null;
    }
    File file=new File(fullPath);
    if (file.exists()) {
      return file.toURL();
    }
    return null;
  }
  return URI.create(uri).toURL();
}","private URL generateURL(String uri) throws MalformedURLException {
  String path=URIUtil.getLocalPath(uri);
  if (path != null) {
    String fullPath=SessionHandleAdapter.getInstance().getSessionHandle().getFileLocator().findFile(SessionHandleAdapter.getInstance().getReportDesignHandle(),path);
    if (fullPath == null) {
      return null;
    }
    File file=new File(fullPath);
    if (file.exists()) {
      return file.toURL();
    }
    return null;
  }
  return URI.create(uri).toURL();
}",0.9939271255060728
79289,"/** 
 * Returns the iterator for parameter binding list defined on this report item. The element in the iterator is the corresponding <code>StructureHandle</code> that deal with a <code>ParamBinding</code> in the list.
 * @return the iterator for parameter binding structure list defined on thisdata set.
 * @see org.eclipse.birt.report.model.api.elements.structures.ParamBinding
 */
public Iterator paramBindingsIterator(){
}","/** 
 * Returns the iterator for parameter binding list defined on this report item. The element in the iterator is the corresponding <code>StructureHandle</code> that deal with a <code>ParamBinding</code> in the list.
 * @return the iterator for parameter binding structure list defined on thisdata set.
 * @see org.eclipse.birt.report.model.elements.structures.ParamBinding
 */
public Iterator paramBindingsIterator(){
}",0.9952830188679244
79290,"/** 
 * Returns the data set of the report item.
 * @return the handle to the data set
 */
public DesignElementHandle getDataSet(){
  DesignElement dataSet=((ReportItem)getElement()).getDataSetElement(design);
  if (dataSet == null)   return null;
  return dataSet.getHandle(design);
}","/** 
 * Returns the data set of the report item.
 * @return the handle to the data set
 */
public DataSetHandle getDataSet(){
}",0.5970873786407767
79291,"/** 
 * Returns visibility rules defined on the report item. The element in the iterator is the corresponding <code>StructureHandle</code> that deal with a <code>Hide</code> in the list.
 * @return the iterator for visibility rules defined on this report item.
 * @see org.eclipse.birt.report.model.api.elements.structures.Hide
 */
public Iterator visibilityRulesIterator(){
}","/** 
 * Returns visibility rules defined on the report item. The element in the iterator is the corresponding <code>StructureHandle</code> that deal with a <code>Hide</code> in the list.
 * @return the iterator for visibility rules defined on this report item.
 * @see org.eclipse.birt.report.model.elements.structures.Hide
 */
public Iterator visibilityRulesIterator(){
}",0.9946524064171124
79292,"/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.getIsNullable());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}","/** 
 * Creates a new DtE API IParameterDefinition from a model's DataSetParameterHandle.
 */
IParameterDefinition newParam(DataSetParameterHandle modelParam){
  ParameterDefinition dteParam=new ParameterDefinition();
  dteParam.setName(modelParam.getName());
  if (modelParam.getPosition() != null)   dteParam.setPosition(modelParam.getPosition().intValue());
  dteParam.setType(toDteDataType(modelParam.getDataType()));
  dteParam.setInputMode(modelParam.isInput());
  dteParam.setOutputMode(modelParam.isOutput());
  dteParam.setNullable(modelParam.isNullable());
  dteParam.setInputOptional(modelParam.isOptional());
  dteParam.setDefaultInputValue(modelParam.getDefaultValue());
  return dteParam;
}",0.8391211906449326
79293,"void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  dteDataSet.setDataSource(modelDataSet.getDataSourceName());
  dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
  dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
  dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
  dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
  dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(newParam(modelParam));
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      dteDataSet.addInputParamBinding(newInputParamBinding(modelParamBinding));
    }
  }
  elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      IComputedColumn dteCmptdColumn=newComputedColumn(modelCmptdColumn);
      dteDataSet.addComputedColumn(dteCmptdColumn);
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      IFilterDefinition dteFilter=newFilter(modelFilter);
      dteDataSet.addFilter(dteFilter);
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
  List columnDefns=dteDataSet.getResultSetHints();
  elmtIter=modelDataSet.resultSetIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumn.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumn);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
    }
  }
}","void adaptBaseDataSet(DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet){
  dteDataSet.setDataSource(modelDataSet.getDataSourceName());
  dteDataSet.setBeforeOpenScript(modelDataSet.getBeforeOpen());
  dteDataSet.setAfterOpenScript(modelDataSet.getAfterOpen());
  dteDataSet.setOnFetchScript(modelDataSet.getOnFetch());
  dteDataSet.setBeforeCloseScript(modelDataSet.getBeforeClose());
  dteDataSet.setAfterCloseScript(modelDataSet.getAfterClose());
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      dteDataSet.addParameter(newParam(modelParam));
      if (modelParam.isInput()) {
        dteDataSet.addInputParamBinding(newInputParamBinding(modelParam.getName(),modelParam.getDefaultValue()));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      dteDataSet.addInputParamBinding(newInputParamBinding(modelParamBinding));
    }
  }
  elmtIter=modelDataSet.computedColumnsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ComputedColumnHandle modelCmptdColumn=(ComputedColumnHandle)elmtIter.next();
      IComputedColumn dteCmptdColumn=newComputedColumn(modelCmptdColumn);
      dteDataSet.addComputedColumn(dteCmptdColumn);
    }
  }
  elmtIter=modelDataSet.filtersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      FilterConditionHandle modelFilter=(FilterConditionHandle)elmtIter.next();
      IFilterDefinition dteFilter=newFilter(modelFilter);
      dteDataSet.addFilter(dteFilter);
    }
  }
  elmtIter=modelDataSet.columnHintsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ColumnHintHandle modelColumnHint=(ColumnHintHandle)elmtIter.next();
      dteDataSet.addResultSetHint(newColumnDefn(modelColumnHint));
    }
  }
  List columnDefns=dteDataSet.getResultSetHints();
  elmtIter=modelDataSet.resultSetIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ResultSetColumnHandle modelColumn=(ResultSetColumnHandle)elmtIter.next();
      ColumnDefinition existDefn=findColumnDefn(columnDefns,modelColumn.getColumnName());
      if (existDefn != null)       updateColumnDefn(existDefn,modelColumn);
 else       dteDataSet.addResultSetHint(newColumnDefn(modelColumn));
    }
  }
}",0.967848309975268
79294,"/** 
 * Creates a new DtE API InputParamBinding from a model's binding. Could return null if no expression is bound.
 */
IInputParameterBinding newInputParamBinding(ParamBindingHandle modelInputParamBndg){
  if (modelInputParamBndg.getExpression() == null)   return null;
  ScriptExpression expr=new ScriptExpression(modelInputParamBndg.getExpression());
  return new InputParameterBinding(modelInputParamBndg.getParamName(),expr);
}","private IInputParameterBinding newInputParamBinding(String paramName,String paramValue){
  ScriptExpression paramValueExpr=new ScriptExpression(paramValue);
  return new InputParameterBinding(paramName,paramValueExpr);
}",0.2358346094946401
79295,"public void startBody(){
  logger.log(Level.FINE,""String_Node_Str"");
  IStyle bodyStyle=report.getBodyStyle();
  if (!isEmbeddable) {
    writer.openTag(HTMLTags.TAG_BODY);
    if (bodyStyle != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,bodyStyle.getName());
    }
  }
 else {
    writer.openTag(HTMLTags.TAG_DIV);
    if (bodyStyle != null) {
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildStyle(styleBuffer,bodyStyle,this);
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}","public void startBody(){
  logger.log(Level.FINE,""String_Node_Str"");
  if (report != null) {
    IStyle bodyStyle=report.getBodyStyle();
    if (!isEmbeddable) {
      writer.openTag(HTMLTags.TAG_BODY);
      if (bodyStyle != null) {
        writer.attribute(HTMLTags.ATTR_CLASS,bodyStyle.getName());
      }
    }
 else {
      writer.openTag(HTMLTags.TAG_DIV);
      if (bodyStyle != null) {
        StringBuffer styleBuffer=new StringBuffer();
        AttributeBuilder.buildStyle(styleBuffer,bodyStyle,this);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      }
    }
  }
}",0.9511343804537522
79296,"public String getValue(String str){
  String sTmp=""String_Node_Str"";
  sTmp=getKey(str);
  if (""String_Node_Str"".equals(sTmp)) {
    int iSeparator=str.indexOf(SEPARATOR) + SEPARATOR.length();
    if (iSeparator == (-1 + SEPARATOR.length())) {
      iSeparator=0;
    }
    return str.substring(iSeparator);
  }
 else {
    sTmp=serviceprovider.getValue(sTmp);
    if (sTmp == null || ""String_Node_Str"".equals(sTmp)) {
      sTmp=""String_Node_Str"";
    }
  }
  return sTmp;
}","public String getValue(String str){
  String sTmp=""String_Node_Str"";
  sTmp=getKey(str);
  if (""String_Node_Str"".equals(sTmp)) {
    int iSeparator=str.indexOf(SEPARATOR) + SEPARATOR.length();
    if (iSeparator == (-1 + SEPARATOR.length())) {
      iSeparator=0;
    }
    return str.substring(iSeparator);
  }
  sTmp=serviceprovider.getValue(sTmp);
  if (sTmp == null || ""String_Node_Str"".equals(sTmp)) {
    sTmp=""String_Node_Str"";
  }
  return sTmp;
}",0.9505376344086022
79297,"private String getKeyComponent(String sText){
  if (sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR) != -1) {
    return sText.substring(0,sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR));
  }
 else {
    return null;
  }
}","private String getKeyComponent(String sText){
  if (sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR) != -1) {
    return sText.substring(0,sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR));
  }
  return null;
}",0.9699570815450644
79298,"private String getDisplayValue(){
  if (cbExternalize.getSelection()) {
    return ""String_Node_Str"" + getKeyComponent(sResult) + ""String_Node_Str"";
  }
 else {
    return getValueComponent(sResult);
  }
}","private String getDisplayValue(){
  if (cbExternalize.getSelection()) {
    return ""String_Node_Str"" + getKeyComponent(sResult) + ""String_Node_Str"";
  }
  return getValueComponent(sResult);
}",0.9646464646464646
79299,"private String getValueComponent(String sText){
  String sKey=getKeyComponent(sText);
  if (sKey == null || ""String_Node_Str"".equals(sKey)) {
    if (sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR) != -1) {
      return sText.substring(sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR) + ExternalizedTextEditorComposite.SEPARATOR.length(),sText.length());
    }
 else {
      return sText;
    }
  }
 else {
    String sValue=serviceprovider.getValue(sKey);
    if (sValue == null || ""String_Node_Str"".equals(sValue)) {
      sValue=""String_Node_Str"";
    }
    return sValue;
  }
}","private String getValueComponent(String sText){
  String sKey=getKeyComponent(sText);
  if (sKey == null || ""String_Node_Str"".equals(sKey)) {
    if (sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR) != -1) {
      return sText.substring(sText.indexOf(ExternalizedTextEditorComposite.SEPARATOR) + ExternalizedTextEditorComposite.SEPARATOR.length(),sText.length());
    }
    return sText;
  }
  String sValue=serviceprovider.getValue(sKey);
  if (sValue == null || ""String_Node_Str"".equals(sValue)) {
    sValue=""String_Node_Str"";
  }
  return sValue;
}",0.9671848013816926
79300,"private String getCurrentPropertyValue(){
  if (!cbExternalize.getSelection() || sResult == null || ""String_Node_Str"".equals(sResult)) {
    return ""String_Node_Str"";
  }
 else {
    return getValueComponent(sResult);
  }
}","private String getCurrentPropertyValue(){
  if (!cbExternalize.getSelection() || sResult == null || ""String_Node_Str"".equals(sResult)) {
    return ""String_Node_Str"";
  }
  return getValueComponent(sResult);
}",0.9675925925925926
79301,"public void keyPressed(KeyEvent e){
  if (cmpDropDown != null && !cmpDropDown.getShell().isDisposed()) {
    if (e.keyCode == SWT.ESC) {
      cmpDropDown.getShell().dispose();
    }
  }
}","public void keyPressed(KeyEvent e){
  if (cmpDropDown != null && !cmpDropDown.getShell().isDisposed()) {
    if (e.keyCode == SWT.ESC) {
      cmpDropDown.getShell().dispose();
    }
 else     if (e.keyCode == SWT.CR || e.keyCode == SWT.KEYPAD_CR) {
      this.iTransparency=srTransparency.getSelection();
      if (fCurrent instanceof ColorDefinition && bTransparencyChanged) {
        ((ColorDefinition)fCurrent).setTransparency(this.iTransparency);
      }
      this.setFill(fCurrent);
      cmpDropDown.getShell().dispose();
    }
  }
}",0.5157750342935528
79302,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(btnDown)) {
    fireHandleEvent(MOUSE_CLICKED_EVENT);
    toggleDropDown();
  }
 else   if (oSource.equals(this.btnImage)) {
    FileDialog fDlg=new FileDialog(this.getShell(),SWT.OPEN);
    cmpDropDown.getParent().dispose();
    fDlg.setFilterExtensions(saImageTypes);
    String sStartFolder=System.getProperty(""String_Node_Str"");
    String sImageFile=""String_Node_Str"";
    if (fCurrent instanceof Image) {
      String sFullPath=((Image)fCurrent).getURL().toString();
      sImageFile=sFullPath.substring(sFullPath.lastIndexOf(""String_Node_Str"") + 1);
      sStartFolder=sFullPath.substring(0,sFullPath.lastIndexOf(""String_Node_Str""));
    }
    fDlg.setFilterPath(sStartFolder);
    fDlg.setFileName(sImageFile);
    String sImgPath=fDlg.open();
    if (sImgPath == null) {
      return;
    }
    try {
      new URL(sImgPath);
    }
 catch (    MalformedURLException e1) {
      sImgPath=""String_Node_Str"" + fDlg.getFilterPath() + File.separator+ fDlg.getFileName();
    }
    if (sImgPath != null && sImgPath.trim().length() > 0) {
      Image imgFill=AttributeFactory.eINSTANCE.createImage();
      imgFill.setURL(sImgPath);
      this.setFill(imgFill);
      fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    }
  }
 else   if (oSource.equals(this.btnCustom)) {
    ColorDialog cDlg=new ColorDialog(this.getShell(),SWT.NONE);
    cmpDropDown.getParent().dispose();
    if (fCurrent instanceof ColorDefinition) {
      cDlg.setRGB(new RGB(((ColorDefinition)this.fCurrent).getRed(),((ColorDefinition)this.fCurrent).getGreen(),((ColorDefinition)this.fCurrent).getBlue()));
    }
    cDlg.open();
    RGB rgb=cDlg.getRGB();
    if (rgb != null) {
      ColorDefinition cdNew=AttributeFactory.eINSTANCE.createColorDefinition();
      cdNew.set(rgb.red,rgb.green,rgb.blue);
      this.setFill(cdNew);
      fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    }
  }
 else   if (oSource.equals(this.btnGradient)) {
    GradientEditorDialog ged=null;
    cmpDropDown.getParent().dispose();
    if (fCurrent instanceof Gradient) {
      ged=new GradientEditorDialog(this.getShell(),(Gradient)fCurrent);
    }
 else {
      ged=new GradientEditorDialog(this.getShell(),null);
    }
    if (ged.getGradient() != null) {
      Fill fTmp=ged.getGradient();
      if (fCurrent == null || !(fCurrent.equals(fTmp))) {
        this.setFill(fTmp);
        fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
      }
    }
  }
 else   if (oSource.equals(btnTransparent)) {
    if (btnTransparent.getSelection()) {
      fCurrent=null;
    }
 else {
      fCurrent=ColorDefinitionImpl.WHITE();
    }
    this.setFill(fCurrent);
    fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    cmpDropDown.getParent().dispose();
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(btnDown)) {
    fireHandleEvent(MOUSE_CLICKED_EVENT);
    toggleDropDown();
  }
 else   if (oSource.equals(this.btnImage)) {
    FileDialog fDlg=new FileDialog(this.getShell(),SWT.OPEN);
    cmpDropDown.getParent().dispose();
    fDlg.setFilterExtensions(saImageTypes);
    String sStartFolder=System.getProperty(""String_Node_Str"");
    String sImageFile=""String_Node_Str"";
    if (fCurrent instanceof Image) {
      String sFullPath=((Image)fCurrent).getURL().toString();
      sImageFile=sFullPath.substring(sFullPath.lastIndexOf(""String_Node_Str"") + 1);
      sStartFolder=sFullPath.substring(0,sFullPath.lastIndexOf(""String_Node_Str""));
    }
    fDlg.setFilterPath(sStartFolder);
    fDlg.setFileName(sImageFile);
    String sImgPath=fDlg.open();
    if (sImgPath == null) {
      return;
    }
    try {
      new URL(sImgPath);
    }
 catch (    MalformedURLException e1) {
      sImgPath=""String_Node_Str"" + fDlg.getFilterPath() + File.separator+ fDlg.getFileName();
    }
    if (sImgPath != null && sImgPath.trim().length() > 0) {
      Image imgFill=AttributeFactory.eINSTANCE.createImage();
      imgFill.setURL(sImgPath);
      this.setFill(imgFill);
      fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    }
  }
 else   if (oSource.equals(this.btnCustom)) {
    ColorDialog cDlg=new ColorDialog(this.getShell(),SWT.NONE);
    cmpDropDown.getParent().dispose();
    int iTrans=0;
    if (fCurrent instanceof ColorDefinition) {
      iTransparency=((ColorDefinition)fCurrent).getTransparency();
      cDlg.setRGB(new RGB(((ColorDefinition)this.fCurrent).getRed(),((ColorDefinition)this.fCurrent).getGreen(),((ColorDefinition)this.fCurrent).getBlue()));
    }
    cDlg.open();
    RGB rgb=cDlg.getRGB();
    if (rgb != null) {
      ColorDefinition cdNew=AttributeFactory.eINSTANCE.createColorDefinition();
      cdNew.set(rgb.red,rgb.green,rgb.blue);
      cdNew.setTransparency((bTransparencyChanged) ? this.iTransparency : iTrans);
      this.setFill(cdNew);
      fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    }
  }
 else   if (oSource.equals(this.btnGradient)) {
    GradientEditorDialog ged=null;
    cmpDropDown.getParent().dispose();
    if (fCurrent instanceof Gradient) {
      ged=new GradientEditorDialog(this.getShell(),(Gradient)fCurrent);
    }
 else {
      ged=new GradientEditorDialog(this.getShell(),null);
    }
    if (ged.getGradient() != null) {
      Fill fTmp=ged.getGradient();
      if (fCurrent == null || !(fCurrent.equals(fTmp))) {
        this.setFill(fTmp);
        fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
      }
    }
  }
 else   if (oSource.equals(srTransparency)) {
    iTransparency=srTransparency.getSelection();
    lblCurrentTransparency.setText(String.valueOf(iTransparency));
    bTransparencyChanged=true;
  }
}",0.9024305555555556
79303,"/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  int iShellHeight=220;
  int iShellWidth=160;
  if (!bGradientEnabled) {
    iShellHeight=iShellHeight - 30;
  }
  if (!bImageEnabled) {
    iShellHeight=iShellHeight - 30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new Composite(shell,SWT.NONE);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=1;
  glDropDown.numColumns=8;
  cmpDropDown.setLayout(glDropDown);
  cmpDropDown.addKeyListener(this);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.horizontalSpan=8;
  gdCnv.heightHint=100;
  cnv.setLayoutData(gdCnv);
  cnv.addMouseListener(this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  btnTransparent=new Button(cmpDropDown,SWT.TOGGLE);
  GridData gdTransparent=new GridData(GridData.FILL_BOTH);
  gdTransparent.heightHint=26;
  gdTransparent.horizontalSpan=8;
  btnTransparent.setLayoutData(gdTransparent);
  btnTransparent.setText(""String_Node_Str"");
  btnTransparent.addSelectionListener(this);
  if (fCurrent == null) {
    btnTransparent.setSelection(true);
  }
 else {
    btnTransparent.setSelection(false);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpDropDown,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdTransparent.heightHint=26;
    gdGradient.horizontalSpan=8;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(""String_Node_Str"");
    btnGradient.addSelectionListener(this);
  }
  btnCustom=new Button(cmpDropDown,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdTransparent.heightHint=26;
  gdCustom.horizontalSpan=8;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(""String_Node_Str"");
  btnCustom.addSelectionListener(this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpDropDown,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdTransparent.heightHint=26;
    gdImage.horizontalSpan=8;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(""String_Node_Str"");
    btnImage.addSelectionListener(this);
  }
  shell.layout();
  shell.open();
}","/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  int iShellHeight=240;
  int iShellWidth=160;
  if (!bGradientEnabled) {
    iShellHeight=iShellHeight - 30;
  }
  if (!bImageEnabled) {
    iShellHeight=iShellHeight - 30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new Composite(shell,SWT.NONE);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=1;
  glDropDown.numColumns=8;
  cmpDropDown.setLayout(glDropDown);
  cmpDropDown.addKeyListener(this);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.horizontalSpan=8;
  gdCnv.heightHint=100;
  cnv.setLayoutData(gdCnv);
  cnv.addMouseListener(this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=2;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=0;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpDropDown,SWT.NONE);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.heightHint=40;
  gdTransparency.horizontalSpan=8;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  Label lblTransparency=new Label(cmpTransparency,SWT.NONE);
  GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
  gdLBLTransparency.horizontalIndent=2;
  lblTransparency.setLayoutData(gdLBLTransparency);
  lblTransparency.setText(""String_Node_Str"");
  lblCurrentTransparency=new Label(cmpTransparency,SWT.NONE);
  GridData gdLBLCurrentTransparency=new GridData();
  gdLBLCurrentTransparency.widthHint=40;
  lblCurrentTransparency.setLayoutData(gdLBLCurrentTransparency);
  srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL);
  GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  gdTransparent.heightHint=20;
  gdTransparent.horizontalSpan=2;
  srTransparency.setLayoutData(gdTransparent);
  if (fCurrent == null) {
    srTransparency.setSelection(0);
    srTransparency.setEnabled(false);
  }
 else {
    int iValue=0;
    if (fCurrent instanceof ColorDefinition) {
      iValue=((ColorDefinition)fCurrent).getTransparency();
    }
    if (fCurrent instanceof Gradient) {
      iValue=((Gradient)fCurrent).getTransparency();
    }
    srTransparency.setValues(iValue,0,256,1,1,10);
  }
  lblCurrentTransparency.setText(String.valueOf(srTransparency.getSelection()));
  srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
  srTransparency.addSelectionListener(this);
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpDropDown,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdTransparent.heightHint=26;
    gdGradient.horizontalSpan=8;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(""String_Node_Str"");
    btnGradient.addSelectionListener(this);
  }
  btnCustom=new Button(cmpDropDown,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdTransparent.heightHint=26;
  gdCustom.horizontalSpan=8;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(""String_Node_Str"");
  btnCustom.addSelectionListener(this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpDropDown,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdTransparent.heightHint=26;
    gdImage.horizontalSpan=8;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(""String_Node_Str"");
    btnImage.addSelectionListener(this);
  }
  shell.layout();
  shell.open();
}",0.5011093033574915
79304,"public void mouseDown(MouseEvent e){
  fireHandleEvent(MOUSE_CLICKED_EVENT);
  if (e.getSource().equals(cnvSelection)) {
    toggleDropDown();
  }
 else   if (e.getSource() instanceof ColorSelectionCanvas) {
    ColorDefinition cTmp=AttributeFactory.eINSTANCE.createColorDefinition();
    Color clrTmp=((ColorSelectionCanvas)e.getSource()).getColorAt(e.x,e.y);
    cTmp.set(clrTmp.getRed(),clrTmp.getGreen(),clrTmp.getBlue());
    if (clrTmp.getRed() == 0) {
      cTmp.setTransparency(255);
    }
    setFill(cTmp);
    fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    cmpDropDown.getShell().dispose();
  }
}","public void mouseDown(MouseEvent e){
  fireHandleEvent(MOUSE_CLICKED_EVENT);
  if (e.getSource().equals(cnvSelection)) {
    toggleDropDown();
  }
 else   if (e.getSource() instanceof ColorSelectionCanvas) {
    ColorDefinition cTmp=AttributeFactory.eINSTANCE.createColorDefinition();
    Color clrTmp=((ColorSelectionCanvas)e.getSource()).getColorAt(e.x,e.y);
    cTmp.set(clrTmp.getRed(),clrTmp.getGreen(),clrTmp.getBlue());
    int iTransparency=0;
    if (fCurrent instanceof ColorDefinition) {
      iTransparency=(bTransparencyChanged) ? this.iTransparency : ((ColorDefinition)fCurrent).getTransparency();
    }
    cTmp.setTransparency(iTransparency);
    setFill(cTmp);
    fireHandleEvent(FillChooserComposite.FILL_CHANGED_EVENT);
    cmpDropDown.getShell().dispose();
  }
}",0.80711743772242
79305,"public void paintControl(PaintEvent pe){
  Font fSize=null;
  Font fCurrent=null;
  Color cFore=null;
  GC gc=pe.gc;
  Font fOld=gc.getFont();
  if (cdCurrent != null && bUseColor) {
    cFore=new Color(this.getDisplay(),cdCurrent.getRed(),cdCurrent.getGreen(),cdCurrent.getBlue());
  }
 else {
    cFore=new Color(this.getDisplay(),0,0,0);
  }
  gc.setForeground(cFore);
  if (fdCurrent != null) {
    int iStyle=(fdCurrent.isBold()) ? SWT.BOLD : SWT.NORMAL;
    iStyle|=(fdCurrent.isItalic()) ? SWT.ITALIC : iStyle;
    String sFontName=fdCurrent.getName();
    if (!bUseSize) {
      gc.setClipping(2,2,this.getSize().x - 40,26);
      fCurrent=new Font(this.getDisplay(),fdCurrent.getName(),fOld.getFontData()[0].getHeight(),iStyle);
    }
 else {
      fCurrent=new Font(this.getDisplay(),fdCurrent.getName(),(int)fdCurrent.getSize(),iStyle);
    }
    gc.setFont(fCurrent);
    int iStartX=5;
    int iStartY=3;
    if (bUseAlignment) {
      if (fdCurrent.getAlignment().getHorizontalAlignment().equals(HorizontalAlignment.LEFT_LITERAL)) {
        iStartX=5;
      }
 else       if (fdCurrent.getAlignment().getHorizontalAlignment().equals(HorizontalAlignment.CENTER_LITERAL)) {
        iStartX=this.getSize().x / 2 - (getStringWidth(gc,sFontName).x / 2);
      }
 else       if (fdCurrent.getAlignment().getHorizontalAlignment().equals(HorizontalAlignment.RIGHT_LITERAL)) {
        iStartX=this.getSize().x - getStringWidth(gc,sFontName).x;
      }
      if (fdCurrent.getAlignment().getVerticalAlignment().equals(VerticalAlignment.TOP_LITERAL)) {
        iStartY=3;
      }
 else       if (fdCurrent.getAlignment().getVerticalAlignment().equals(VerticalAlignment.CENTER_LITERAL)) {
        iStartY=(int)(this.getSize().y / 2);
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y / 2);
        }
 else {
          iStartY-=15;
        }
      }
 else       if (fdCurrent.getAlignment().getVerticalAlignment().equals(VerticalAlignment.BOTTOM_LITERAL)) {
        iStartY=this.getSize().y;
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y);
        }
 else {
          iStartY-=30;
        }
      }
    }
    gc.drawText(sFontName,iStartX,iStartY);
    if (fdCurrent.isUnderline()) {
      gc.drawLine(iStartX,iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent(),iStartX + getStringWidth(gc,sFontName).x - gc.getFontMetrics().getDescent(),iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent());
    }
    if (fdCurrent.isStrikethrough()) {
      gc.drawLine(iStartX,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1,iStartX + getStringWidth(gc,sFontName).x,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1);
    }
    if (!bUseSize) {
      gc.setClipping(1,1,this.getSize().x,this.getSize().y);
      fSize=new Font(this.getDisplay(),""String_Node_Str"",10,SWT.NORMAL);
      gc.setFont(fSize);
      gc.drawText(""String_Node_Str"" + String.valueOf(fdCurrent.getSize()) + ""String_Node_Str"",this.getSize().x - 36,3);
      fSize.dispose();
    }
    fCurrent.dispose();
  }
  cFore.dispose();
  gc.setFont(fOld);
}","public void paintControl(PaintEvent pe){
  Font fSize=null;
  Font fCurrent=null;
  Color cFore=null;
  GC gc=pe.gc;
  Font fOld=gc.getFont();
  if (cdCurrent != null && bUseColor) {
    cFore=new Color(this.getDisplay(),cdCurrent.getRed(),cdCurrent.getGreen(),cdCurrent.getBlue());
  }
 else {
    cFore=new Color(this.getDisplay(),0,0,0);
  }
  gc.setForeground(cFore);
  if (fdCurrent != null) {
    int iStyle=(fdCurrent.isBold()) ? SWT.BOLD : SWT.NORMAL;
    iStyle|=(fdCurrent.isItalic()) ? SWT.ITALIC : iStyle;
    String sFontName=fdCurrent.getName();
    if (!bUseSize) {
      gc.setClipping(2,2,this.getSize().x - 40,26);
      fCurrent=new Font(this.getDisplay(),fdCurrent.getName(),fOld.getFontData()[0].getHeight(),iStyle);
    }
 else {
      fCurrent=new Font(this.getDisplay(),fdCurrent.getName(),(int)fdCurrent.getSize(),iStyle);
    }
    gc.setFont(fCurrent);
    int iStartX=5;
    int iStartY=3;
    if (bUseAlignment) {
      if (fdCurrent.getAlignment().getHorizontalAlignment().equals(HorizontalAlignment.LEFT_LITERAL)) {
        iStartX=5;
      }
 else       if (fdCurrent.getAlignment().getHorizontalAlignment().equals(HorizontalAlignment.CENTER_LITERAL)) {
        iStartX=this.getSize().x / 2 - (getStringWidth(gc,sFontName).x / 2);
      }
 else       if (fdCurrent.getAlignment().getHorizontalAlignment().equals(HorizontalAlignment.RIGHT_LITERAL)) {
        iStartX=this.getSize().x - getStringWidth(gc,sFontName).x;
      }
      if (fdCurrent.getAlignment().getVerticalAlignment().equals(VerticalAlignment.TOP_LITERAL)) {
        iStartY=3;
      }
 else       if (fdCurrent.getAlignment().getVerticalAlignment().equals(VerticalAlignment.CENTER_LITERAL)) {
        iStartY=(this.getSize().y / 2);
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y / 2);
        }
 else {
          iStartY-=15;
        }
      }
 else       if (fdCurrent.getAlignment().getVerticalAlignment().equals(VerticalAlignment.BOTTOM_LITERAL)) {
        iStartY=this.getSize().y;
        if (bUseSize) {
          iStartY-=(getStringWidth(gc,sFontName).y);
        }
 else {
          iStartY-=30;
        }
      }
    }
    gc.drawText(sFontName,iStartX,iStartY);
    if (fdCurrent.isUnderline()) {
      gc.drawLine(iStartX,iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent(),iStartX + getStringWidth(gc,sFontName).x - gc.getFontMetrics().getDescent(),iStartY + getStringWidth(gc,sFontName).y - gc.getFontMetrics().getDescent());
    }
    if (fdCurrent.isStrikethrough()) {
      gc.drawLine(iStartX,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1,iStartX + getStringWidth(gc,sFontName).x,iStartY + (getStringWidth(gc,sFontName).y / 2) + 1);
    }
    if (!bUseSize) {
      gc.setClipping(1,1,this.getSize().x,this.getSize().y);
      fSize=new Font(this.getDisplay(),""String_Node_Str"",10,SWT.NORMAL);
      gc.setFont(fSize);
      gc.drawText(""String_Node_Str"" + String.valueOf(fdCurrent.getSize()) + ""String_Node_Str"",this.getSize().x - 36,3);
      fSize.dispose();
    }
    fCurrent.dispose();
  }
  cFore.dispose();
  gc.setFont(fOld);
}",0.9991965290053028
79306,"private void populateLists(){
  this.bEnableEvents=false;
  cmbDataType.add(""String_Node_Str"");
  cmbDataType.add(""String_Node_Str"");
  if (formatspecifier instanceof DateFormatSpecifier || formatspecifier instanceof JavaDateFormatSpecifier) {
    cmbDataType.select(0);
    if (formatspecifier instanceof DateFormatSpecifier) {
      btnStandard.setSelection(true);
    }
 else     if (formatspecifier instanceof JavaDateFormatSpecifier) {
      btnAdvanced.setSelection(true);
    }
 else {
      btnUndefined.setSelection(true);
    }
    slStandardDetails.topControl=this.cmpStandardDateDetails;
    slAdvancedDetails.topControl=this.cmpAdvancedDateDetails;
  }
 else {
    cmbDataType.select(1);
    if (formatspecifier instanceof NumberFormatSpecifier) {
      btnStandard.setSelection(true);
    }
 else     if (formatspecifier instanceof JavaNumberFormatSpecifier) {
      btnAdvanced.setSelection(true);
    }
 else {
      btnUndefined.setSelection(true);
    }
    slStandardDetails.topControl=this.cmpStandardNumberDetails;
    slAdvancedDetails.topControl=this.cmpAdvancedNumberDetails;
  }
  updateUIState();
  Object[] oArrDT=DateFormatType.VALUES.toArray();
  for (int iDT=0; iDT < oArrDT.length; iDT++) {
    cmbDateType.add(((DateFormatType)oArrDT[iDT]).getName());
    if (formatspecifier instanceof DateFormatSpecifier && ((DateFormatSpecifier)formatspecifier).getType().equals((DateFormatType)oArrDT[iDT])) {
      cmbDateType.select(iDT);
    }
  }
  Object[] oArrDD=DateFormatDetail.VALUES.toArray();
  for (int iDD=0; iDD < oArrDD.length; iDD++) {
    cmbDateForm.add(((DateFormatDetail)oArrDD[iDD]).getName());
    if (formatspecifier instanceof DateFormatSpecifier && ((DateFormatSpecifier)formatspecifier).getDetail().equals((DateFormatDetail)oArrDD[iDD])) {
      cmbDateForm.select(iDD);
    }
  }
  String str=""String_Node_Str"";
  if (formatspecifier instanceof JavaDateFormatSpecifier) {
    str=((JavaDateFormatSpecifier)formatspecifier).getPattern();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtDatePattern.setText(str);
  }
  if (formatspecifier instanceof NumberFormatSpecifier) {
    str=((NumberFormatSpecifier)formatspecifier).getPrefix();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtPrefix.setText(str);
    str=((NumberFormatSpecifier)formatspecifier).getSuffix();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtSuffix.setText(str);
    str=String.valueOf(((NumberFormatSpecifier)formatspecifier).getMultiplier());
    if (str == null || !((NumberFormatSpecifier)formatspecifier).eIsSet(AttributePackage.eINSTANCE.getNumberFormatSpecifier_Multiplier())) {
      str=""String_Node_Str"";
    }
    txtMultiplier.setText(str);
    iscFractionDigits.setValue(((NumberFormatSpecifier)formatspecifier).getFractionDigits());
  }
  if (formatspecifier instanceof JavaNumberFormatSpecifier) {
    str=String.valueOf(((JavaNumberFormatSpecifier)formatspecifier).getMultiplier());
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtAdvMultiplier.setText(str);
    str=((JavaNumberFormatSpecifier)formatspecifier).getPattern();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtNumberPattern.setText(str);
  }
  this.layout();
  this.bEnableEvents=true;
}","private void populateLists(){
  this.bEnableEvents=false;
  cmbDataType.add(""String_Node_Str"");
  cmbDataType.add(""String_Node_Str"");
  if (formatspecifier instanceof DateFormatSpecifier || formatspecifier instanceof JavaDateFormatSpecifier) {
    cmbDataType.select(0);
    if (formatspecifier instanceof DateFormatSpecifier) {
      btnStandard.setSelection(true);
    }
 else     if (formatspecifier instanceof JavaDateFormatSpecifier) {
      btnAdvanced.setSelection(true);
    }
 else {
      btnUndefined.setSelection(true);
    }
    slStandardDetails.topControl=this.cmpStandardDateDetails;
    slAdvancedDetails.topControl=this.cmpAdvancedDateDetails;
  }
 else {
    cmbDataType.select(1);
    if (formatspecifier instanceof NumberFormatSpecifier) {
      btnStandard.setSelection(true);
    }
 else     if (formatspecifier instanceof JavaNumberFormatSpecifier) {
      btnAdvanced.setSelection(true);
    }
 else {
      btnUndefined.setSelection(true);
    }
    slStandardDetails.topControl=this.cmpStandardNumberDetails;
    slAdvancedDetails.topControl=this.cmpAdvancedNumberDetails;
  }
  updateUIState();
  Object[] oArrDT=DateFormatType.VALUES.toArray();
  for (int iDT=0; iDT < oArrDT.length; iDT++) {
    cmbDateType.add(((DateFormatType)oArrDT[iDT]).getName());
    if (formatspecifier instanceof DateFormatSpecifier && ((DateFormatSpecifier)formatspecifier).getType().equals(oArrDT[iDT])) {
      cmbDateType.select(iDT);
    }
  }
  Object[] oArrDD=DateFormatDetail.VALUES.toArray();
  for (int iDD=0; iDD < oArrDD.length; iDD++) {
    cmbDateForm.add(((DateFormatDetail)oArrDD[iDD]).getName());
    if (formatspecifier instanceof DateFormatSpecifier && ((DateFormatSpecifier)formatspecifier).getDetail().equals(oArrDD[iDD])) {
      cmbDateForm.select(iDD);
    }
  }
  String str=""String_Node_Str"";
  if (formatspecifier instanceof JavaDateFormatSpecifier) {
    str=((JavaDateFormatSpecifier)formatspecifier).getPattern();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtDatePattern.setText(str);
  }
  if (formatspecifier instanceof NumberFormatSpecifier) {
    str=((NumberFormatSpecifier)formatspecifier).getPrefix();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtPrefix.setText(str);
    str=((NumberFormatSpecifier)formatspecifier).getSuffix();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtSuffix.setText(str);
    str=String.valueOf(((NumberFormatSpecifier)formatspecifier).getMultiplier());
    if (str == null || !((NumberFormatSpecifier)formatspecifier).eIsSet(AttributePackage.eINSTANCE.getNumberFormatSpecifier_Multiplier())) {
      str=""String_Node_Str"";
    }
    txtMultiplier.setText(str);
    iscFractionDigits.setValue(((NumberFormatSpecifier)formatspecifier).getFractionDigits());
  }
  if (formatspecifier instanceof JavaNumberFormatSpecifier) {
    str=String.valueOf(((JavaNumberFormatSpecifier)formatspecifier).getMultiplier());
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtAdvMultiplier.setText(str);
    str=((JavaNumberFormatSpecifier)formatspecifier).getPattern();
    if (str == null) {
      str=""String_Node_Str"";
    }
    txtNumberPattern.setText(str);
  }
  this.layout();
  this.bEnableEvents=true;
}",0.9947756607252612
79307,"/** 
 */
public GradientEditorDialog(Shell shellParent,Gradient gSelected){
  this.gCurrent=gSelected;
  if (gCurrent != null) {
    gBackup=(Gradient)EcoreUtil.copy(gSelected);
  }
 else {
    gCurrent=AttributeFactory.eINSTANCE.createGradient();
    gCurrent.setStartColor(ColorDefinitionImpl.create(254,0,0));
    gCurrent.setEndColor(ColorDefinitionImpl.create(0,0,254));
  }
  display=Display.getCurrent();
  shell=new Shell(shellParent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  shell.setLayout(new FillLayout());
  placeComponents();
  shell.setText(""String_Node_Str"");
  shell.setSize(400,320);
  UIHelper.centerOnScreen(shell);
  shell.layout();
  shell.open();
  while (!shell.isDisposed()) {
    if (!shell.getDisplay().readAndDispatch()) {
      shell.getDisplay().sleep();
    }
  }
}","/** 
 */
public GradientEditorDialog(Shell shellParent,Gradient gSelected){
  this.gCurrent=gSelected;
  if (gCurrent != null) {
    gBackup=(Gradient)EcoreUtil.copy(gSelected);
  }
 else {
    gCurrent=AttributeFactory.eINSTANCE.createGradient();
    gCurrent.setStartColor(ColorDefinitionImpl.create(254,0,0));
    gCurrent.setEndColor(ColorDefinitionImpl.create(0,0,254));
  }
  shell=new Shell(shellParent,SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
  shell.setLayout(new FillLayout());
  placeComponents();
  shell.setText(""String_Node_Str"");
  shell.setSize(400,320);
  UIHelper.centerOnScreen(shell);
  shell.layout();
  shell.open();
  while (!shell.isDisposed()) {
    if (!shell.getDisplay().readAndDispatch()) {
      shell.getDisplay().sleep();
    }
  }
}",0.979874213836478
79308,"public void startBody(){
  logger.log(Level.FINE,""String_Node_Str"");
  if (report != null) {
    IStyle bodyStyle=report.getBodyStyle();
    if (!isEmbeddable) {
      writer.openTag(HTMLTags.TAG_BODY);
      if (bodyStyle != null) {
        writer.attribute(HTMLTags.ATTR_CLASS,bodyStyle.getName());
      }
    }
 else {
      writer.openTag(HTMLTags.TAG_DIV);
      if (bodyStyle != null) {
        StringBuffer styleBuffer=new StringBuffer();
        AttributeBuilder.buildStyle(styleBuffer,bodyStyle,this);
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      }
    }
  }
}","public void startBody(){
  logger.log(Level.FINE,""String_Node_Str"");
  IStyle bodyStyle=null;
  if (report != null) {
    bodyStyle=report.getBodyStyle();
  }
  if (!isEmbeddable) {
    writer.openTag(HTMLTags.TAG_BODY);
    if (bodyStyle != null) {
      writer.attribute(HTMLTags.ATTR_CLASS,bodyStyle.getName());
    }
  }
 else {
    writer.openTag(HTMLTags.TAG_DIV);
    if (bodyStyle != null) {
      StringBuffer styleBuffer=new StringBuffer();
      AttributeBuilder.buildStyle(styleBuffer,bodyStyle,this);
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
  }
}",0.948073701842546
79309,"/** 
 * Broadcasts the event to all elements in the given slot if the elements are selected by selector style.
 * @param ev the event to send
 * @param design the report design
 * @param slot the slot to send
 */
private void broadcastToSelectedElementsInSlot(ReportDesign design,ContainerSlot slot,String selectorName){
}","/** 
 * Broadcasts the event to all elements in the given slot if the elements are selected by selector style.
 * @param design the report design
 * @param slot the slot to send
 * @param selectorName the selector name
 */
private void broadcastToSelectedElementsInSlot(ReportDesign design,ContainerSlot slot,String selectorName){
}",0.7889908256880734
79310,"/** 
 * Gets the value of property.
 * @param design the report design
 * @param prop definition of the property to get
 * @return the value of the property.
 */
public Object getFactoryProperty(ReportDesign design,ElementPropertyDefn prop){
  return getProperty(design,prop);
}","/** 
 * Gets the value of property.
 * @param design the report design
 * @param prop definition of the property to get
 * @return the value of the property.
 */
public Object getFactoryProperty(ReportDesign design,ElementPropertyDefn prop){
  return getLocalProperty(design,prop);
}",0.9910873440285204
79311,"/** 
 * Creates the cached system properties for <code>PropertyInvisible</code> tags.
 */
private void createCachedSystemProperties(){
  for (Iterator iter=propVisibilites.keySet().iterator(); iter.hasNext(); ) {
    String propName=(String)iter.next();
    SystemPropertyDefn sysDefn=(SystemPropertyDefn)parent.getProperty(propName);
    if (sysDefn != null && (sysDefn.isVisible() || !sysDefn.isReadOnly())) {
      if (cachedSystemProps == null)       cachedSystemProps=new HashMap();
      SystemPropertyDefn defn=createPropertyDefn(sysDefn);
      defn.setVisibility((String)propVisibilites.get(propName));
      cachedSystemProps.put(propName,defn);
    }
  }
}","/** 
 * Creates the cached system properties for <code>PropertyInvisible</code> tags.
 */
private void createCachedSystemProperties(){
  if (propVisibilites == null)   return;
  for (Iterator iter=propVisibilites.keySet().iterator(); iter.hasNext(); ) {
    String propName=(String)iter.next();
    SystemPropertyDefn sysDefn=(SystemPropertyDefn)parent.getProperty(propName);
    if (sysDefn != null && (sysDefn.isVisible() || !sysDefn.isReadOnly())) {
      if (cachedSystemProps == null)       cachedSystemProps=new HashMap();
      SystemPropertyDefn defn=createPropertyDefn(sysDefn);
      defn.setVisibility((String)propVisibilites.get(propName));
      cachedSystemProps.put(propName,defn);
    }
  }
}",0.970181818181818
79312,"/** 
 * Sends a content changed and possibly element deleted event. This record is unusual because it must send two events: one for the container, one for the content. If we are dropping the content, then it is effectively deleted, and we must tell the content that it has been deleted.
 */
protected void sendNotifcations(boolean transactionStarted){
  NotificationEvent event=null;
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   event=new ContentEvent(container,content,slotID,ContentEvent.ADD);
 else   event=new ContentEvent(container,slotID,ContentEvent.REMOVE);
  event.setInTransaction(transactionStarted);
  if (state == DONE_STATE)   event.setSender(sender);
  container.broadcast(event);
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   return;
  event=new ElementDeletedEvent(content);
  if (state == DONE_STATE)   event.setSender(sender);
  content.broadcast(event,container.getRoot());
}","/** 
 * Sends a content changed and possibly element deleted event. This record is unusual because it must send two events: one for the container, one for the content. If we are dropping the content, then it is effectively deleted, and we must tell the content that it has been deleted.
 */
protected void sendNotifcations(boolean transactionStarted){
  NotificationEvent event=null;
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   event=new ContentEvent(container,content,slotID,ContentEvent.ADD);
 else   event=new ContentEvent(container,slotID,ContentEvent.REMOVE);
  event.setInTransaction(transactionStarted);
  if (state == DONE_STATE)   event.setSender(sender);
  container.broadcast(event);
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE) {
    if (isSelector(content))     content.broadcast(event,container.getRoot());
    return;
  }
  event=new ElementDeletedEvent(content);
  if (state == DONE_STATE)   event.setSender(sender);
  content.broadcast(event,container.getRoot());
}",0.9560384032339564
79313,"protected void broadcastToClients(NotificationEvent ev,ReportDesign design){
  super.broadcastToClients(ev,design);
  PredefinedStyle predefinedStyle=MetaDataDictionary.getInstance().getPredefinedStyle(getName());
  if (predefinedStyle != null) {
    broadcastToSelectedElementsInSlot(ev,design,design.getSlot(ReportDesign.COMPONENT_SLOT));
    broadcastToSelectedElementsInSlot(ev,design,design.getSlot(ReportDesign.PAGE_SLOT));
    broadcastToSelectedElementsInSlot(ev,design,design.getSlot(ReportDesign.BODY_SLOT));
    broadcastToSelectedElementsInSlot(ev,design,design.getSlot(ReportDesign.SCRATCH_PAD_SLOT));
  }
}","protected void broadcastToClients(NotificationEvent ev,ReportDesign design){
  super.broadcastToClients(ev,design);
  String selector=null;
  if (ev instanceof NameEvent) {
    String oldName=((NameEvent)ev).getOldName();
    String newName=((NameEvent)ev).getNewName();
    if (MetaDataDictionary.getInstance().getPredefinedStyle(oldName) != null)     selector=oldName;
 else     if (MetaDataDictionary.getInstance().getPredefinedStyle(newName) != null)     selector=newName;
  }
 else {
    if (MetaDataDictionary.getInstance().getPredefinedStyle(getName()) != null)     selector=getName();
  }
  if (selector != null) {
    broadcastToSelectedElementsInSlot(design,design.getSlot(ReportDesign.COMPONENT_SLOT),selector);
    broadcastToSelectedElementsInSlot(design,design.getSlot(ReportDesign.PAGE_SLOT),selector);
    broadcastToSelectedElementsInSlot(design,design.getSlot(ReportDesign.BODY_SLOT),selector);
    broadcastToSelectedElementsInSlot(design,design.getSlot(ReportDesign.SCRATCH_PAD_SLOT),selector);
  }
}",0.6170731707317073
79314,"/** 
 * Broadcasts the event to all elements in the given slot if the elements are selected by selector style.
 * @param ev the event to send
 * @param design the report design
 * @param slot the slot to send
 */
private void broadcastToSelectedElementsInSlot(NotificationEvent ev,ReportDesign design,ContainerSlot slot){
}","/** 
 * Broadcasts the event to all elements in the given slot if the elements are selected by selector style.
 * @param ev the event to send
 * @param design the report design
 * @param slot the slot to send
 */
private void broadcastToSelectedElementsInSlot(ReportDesign design,ContainerSlot slot,String selectorName){
}",0.9364341085271318
79315,"private void placeComponents(Shell shell){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  Composite cmpContent=new Composite(shell,SWT.NONE);
  cmpContent.setLayout(glContent);
  cbExternalize=new Button(cmpContent,SWT.CHECK);
  GridData gdCBExternalize=new GridData(GridData.FILL_HORIZONTAL);
  gdCBExternalize.horizontalSpan=2;
  cbExternalize.setLayoutData(gdCBExternalize);
  cbExternalize.setText(""String_Node_Str"");
  cbExternalize.addSelectionListener(this);
  Label lblKey=new Label(cmpContent,SWT.NONE);
  GridData gdLBLKey=new GridData();
  lblKey.setLayoutData(gdLBLKey);
  lblKey.setText(""String_Node_Str"");
  cmbKeys=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBKeys=new GridData(GridData.FILL_HORIZONTAL);
  cmbKeys.setLayoutData(gdCMBKeys);
  cmbKeys.addSelectionListener(this);
  Label lblValue=new Label(cmpContent,SWT.NONE);
  GridData gdLBLValue=new GridData();
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(""String_Node_Str"");
  txtValue=new Text(cmpContent,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTValue=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValue.widthHint=100;
  txtValue.setLayoutData(gdTXTValue);
  txtValue.setText(getValueComponent(this.sResult));
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=2;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=0;
  glButtons.marginWidth=7;
  glButtons.marginHeight=0;
  Composite cmpButtons=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=2;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAccept=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAccept=new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
  btnAccept.setLayoutData(gdBTNAccept);
  btnAccept.setText(""String_Node_Str"");
  btnAccept.addSelectionListener(this);
  btnCancel=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNCancel=new GridData();
  btnCancel.setLayoutData(gdBTNCancel);
  btnCancel.setText(""String_Node_Str"");
  btnCancel.addSelectionListener(this);
  populateList();
}","private void placeComponents(Shell shell){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  Composite cmpContent=new Composite(shell,SWT.NONE);
  cmpContent.setLayout(glContent);
  cbExternalize=new Button(cmpContent,SWT.CHECK);
  GridData gdCBExternalize=new GridData(GridData.FILL_HORIZONTAL);
  gdCBExternalize.horizontalSpan=2;
  cbExternalize.setLayoutData(gdCBExternalize);
  cbExternalize.setText(""String_Node_Str"");
  cbExternalize.addSelectionListener(this);
  Label lblKey=new Label(cmpContent,SWT.NONE);
  GridData gdLBLKey=new GridData();
  lblKey.setLayoutData(gdLBLKey);
  lblKey.setText(""String_Node_Str"");
  cmbKeys=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBKeys=new GridData(GridData.FILL_HORIZONTAL);
  cmbKeys.setLayoutData(gdCMBKeys);
  cmbKeys.addSelectionListener(this);
  Label lblValue=new Label(cmpContent,SWT.NONE);
  GridData gdLBLValue=new GridData();
  lblValue.setLayoutData(gdLBLValue);
  lblValue.setText(""String_Node_Str"");
  txtValue=new Text(cmpContent,SWT.BORDER | SWT.SINGLE);
  GridData gdTXTValue=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValue.widthHint=100;
  txtValue.setLayoutData(gdTXTValue);
  txtValue.setText(getValueComponent(this.sResult));
  GridLayout glButtons=new GridLayout();
  glButtons.numColumns=2;
  glButtons.horizontalSpacing=5;
  glButtons.verticalSpacing=0;
  glButtons.marginWidth=0;
  glButtons.marginHeight=0;
  Composite cmpButtons=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPButtons=new GridData(GridData.FILL_HORIZONTAL);
  gdCMPButtons.horizontalSpan=2;
  cmpButtons.setLayoutData(gdCMPButtons);
  cmpButtons.setLayout(glButtons);
  btnAccept=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNAccept=new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END);
  btnAccept.setLayoutData(gdBTNAccept);
  btnAccept.setText(""String_Node_Str"");
  btnAccept.addSelectionListener(this);
  btnCancel=new Button(cmpButtons,SWT.PUSH);
  GridData gdBTNCancel=new GridData();
  btnCancel.setLayoutData(gdBTNCancel);
  btnCancel.setText(""String_Node_Str"");
  btnCancel.addSelectionListener(this);
  populateList();
}",0.9995581087052584
79316,"/** 
 * @param oMinValue
 * @param oMaxValue
 */
final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      oStep=new Double(10);
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    final double dMinValue=asDouble(oMinValue).doubleValue();
    final double dMaxValue=asDouble(oMaxValue).doubleValue();
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    final double dStep=asDouble(oStep).doubleValue();
    final double dStepLog=Math.log(dStep);
    int iPow=(int)Math.floor(Math.log(dAbsMax) / dStepLog) + 1;
    double dMaxAxis=Math.pow(dStep,iPow);
    iPow=(int)Math.floor(Math.log(dAbsMin) / dStepLog) - 1;
    double dMinAxis=Math.pow(dStep,iPow - 1);
    if (!bMaximumFixed) {
      oMaximum=new Double(dMaxAxis);
    }
    if (!bMinimumFixed) {
      oMinimum=new Double(dMinAxis);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    int iStep=asInteger(oStep);
    CDateTime cdtMinValue=asDateTime(oMinValue);
    CDateTime cdtMaxValue=asDateTime(oMaxValue);
    if (!bMinimumFixed) {
      oMinimum=cdtMinValue.backward(iUnit,iStep);
    }
    ((CDateTime)oMinimum).clearBelow(iUnit);
    if (!bMaximumFixed) {
      oMaximum=cdtMaxValue.forward(iUnit,iStep);
    }
    ((CDateTime)oMaximum).clearBelow(iUnit);
  }
 else {
    final double dMinValue=asDouble(oMinValue).doubleValue();
    final double dMaxValue=asDouble(oMaxValue).doubleValue();
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    final double dStep=asDouble(oStep).doubleValue();
    double dMinAxis=(dStep > 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep);
    dMinAxis*=dStep;
    if (dMinAxis == dAbsMin) {
      dMinAxis+=dStep;
      if (dMinValue < 0) {
        dMinAxis=-dMinAxis;
      }
 else       if (dMinValue == 0) {
        dMinAxis=0;
      }
    }
 else {
      if (dMinValue < 0) {
        dMinAxis=-(dMinAxis + dStep);
      }
 else       if (dMinAxis == dMinValue && dMinAxis != 0) {
        dMinAxis-=dStep;
      }
    }
    double dMaxAxis=(dStep > 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep);
    dMaxAxis*=dStep;
    if (dMaxAxis == dAbsMax) {
      dMaxAxis+=dStep;
      if (dMaxValue == 0) {
        dMaxAxis=0;
      }
    }
 else     if (dMinAxis != dMaxValue) {
      if (dMaxValue < 0) {
        dMaxAxis=-(dMaxAxis - dStep);
      }
 else       if (dMaxValue > 0) {
        if (dMaxAxis < dMaxValue) {
          dMaxAxis+=dStep;
        }
      }
    }
    if (dMinValue < 0 && dMaxValue < 0)     dMaxAxis=0;
    if (dMinValue > 0 && dMaxValue > 0)     dMinAxis=0;
    if (!bMaximumFixed) {
      oMaximum=new Double(dMaxAxis);
    }
    if (!bMinimumFixed) {
      oMinimum=new Double(dMinAxis);
    }
  }
}","/** 
 * @param oMinValue
 * @param oMaxValue
 */
final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      oStep=new Double(10);
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    final double dMinValue=asDouble(oMinValue).doubleValue();
    final double dMaxValue=asDouble(oMaxValue).doubleValue();
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    final double dStep=asDouble(oStep).doubleValue();
    final double dStepLog=Math.log(dStep);
    int iPow=(int)Math.floor(Math.log(dAbsMax) / dStepLog) + 1;
    double dMaxAxis=Math.pow(dStep,iPow);
    iPow=(int)Math.floor(Math.log(dAbsMin) / dStepLog) - 1;
    double dMinAxis=Math.pow(dStep,iPow + 1);
    if (!bMaximumFixed) {
      oMaximum=new Double(dMaxAxis);
    }
    if (!bMinimumFixed) {
      oMinimum=new Double(dMinAxis);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    int iStep=asInteger(oStep);
    CDateTime cdtMinValue=asDateTime(oMinValue);
    CDateTime cdtMaxValue=asDateTime(oMaxValue);
    if (!bMinimumFixed) {
      oMinimum=cdtMinValue.backward(iUnit,iStep);
    }
    ((CDateTime)oMinimum).clearBelow(iUnit);
    if (!bMaximumFixed) {
      oMaximum=cdtMaxValue.forward(iUnit,iStep);
    }
    ((CDateTime)oMaximum).clearBelow(iUnit);
  }
 else {
    final double dMinValue=asDouble(oMinValue).doubleValue();
    final double dMaxValue=asDouble(oMaxValue).doubleValue();
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    final double dStep=asDouble(oStep).doubleValue();
    double dMinAxis=(dStep > 1) ? Math.floor(dAbsMin / dStep) : Math.round(dAbsMin / dStep);
    dMinAxis*=dStep;
    if (dMinAxis == dAbsMin) {
      dMinAxis+=dStep;
      if (dMinValue < 0) {
        dMinAxis=-dMinAxis;
      }
 else       if (dMinValue == 0) {
        dMinAxis=0;
      }
    }
 else {
      if (dMinValue < 0) {
        dMinAxis=-(dMinAxis + dStep);
      }
 else       if (dMinAxis == dMinValue && dMinAxis != 0) {
        dMinAxis-=dStep;
      }
    }
    double dMaxAxis=(dStep > 1) ? Math.floor(dAbsMax / dStep) : Math.round(dAbsMax / dStep);
    dMaxAxis*=dStep;
    if (dMaxAxis == dAbsMax) {
      dMaxAxis+=dStep;
      if (dMaxValue == 0) {
        dMaxAxis=0;
      }
    }
 else     if (dMinAxis != dMaxValue) {
      if (dMaxValue < 0) {
        dMaxAxis=-(dMaxAxis - dStep);
      }
 else       if (dMaxValue > 0) {
        if (dMaxAxis < dMaxValue) {
          dMaxAxis+=dStep;
        }
      }
    }
    if (dMinValue < 0 && dMaxValue < 0)     dMaxAxis=0;
    if (dMinValue > 0 && dMaxValue > 0)     dMinAxis=0;
    if (!bMaximumFixed) {
      oMaximum=new Double(dMaxAxis);
    }
    if (!bMinimumFixed) {
      oMinimum=new Double(dMinAxis);
    }
  }
}",0.9996655518394648
79317,"/** 
 * Get the margin of the current element.
 * @param retValue The margin value of the current element.
 * @return The maring's new value of the current element.
 */
public Insets getMargin(Insets retValue){
  if (retValue == null) {
    retValue=new Insets();
  }
 else {
    retValue=new Insets(retValue);
  }
  DimensionHandle fontHandle=getHandle().getPrivateStyle().getFontSize();
  int fontSize=12;
  if (fontHandle.getValue() instanceof String) {
    fontSize=Integer.valueOf((String)DesignerConstants.fontMap.get(DEUtil.getFontSize(getHandle()))).intValue();
  }
 else   if (fontHandle.getValue() instanceof DimensionValue) {
    DEUtil.convertToPixel(fontHandle.getValue(),fontSize);
  }
  DimensionValue dimensionValue=(DimensionValue)getHandle().getProperty(Style.MARGIN_TOP_PROP);
  double px=DEUtil.convertToPixel(dimensionValue,fontSize);
  dimensionValue=(DimensionValue)getHandle().getProperty(Style.MARGIN_BOTTOM_PROP);
  double py=DEUtil.convertToPixel(dimensionValue,fontSize);
  retValue.top=(int)px;
  retValue.bottom=(int)py;
  dimensionValue=(DimensionValue)getHandle().getProperty(Style.MARGIN_LEFT_PROP);
  px=DEUtil.convertToPixel(dimensionValue,fontSize);
  dimensionValue=(DimensionValue)getHandle().getProperty(Style.MARGIN_RIGHT_PROP);
  py=DEUtil.convertToPixel(dimensionValue,fontSize);
  retValue.left=(int)px;
  retValue.right=(int)py;
  return retValue;
}","/** 
 * Get the margin of the current element.
 * @param retValue The margin value of the current element.
 * @return The maring's new value of the current element.
 */
public Insets getMargin(Insets retValue){
  if (retValue == null) {
    retValue=new Insets();
  }
 else {
    retValue=new Insets(retValue);
  }
  DimensionHandle fontHandle=getHandle().getPrivateStyle().getFontSize();
  int fontSize=12;
  if (fontHandle.getValue() instanceof String) {
    fontSize=Integer.valueOf((String)DesignerConstants.fontMap.get(DEUtil.getFontSize(getHandle()))).intValue();
  }
 else   if (fontHandle.getValue() instanceof DimensionValue) {
    DEUtil.convertToPixel(fontHandle.getValue(),fontSize);
  }
  double px=0;
  Object prop=getHandle().getProperty(Style.MARGIN_TOP_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    px=DEUtil.convertToPixel((DimensionValue)prop,fontSize);
  }
  double py=0;
  prop=getHandle().getProperty(Style.MARGIN_BOTTOM_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    py=DEUtil.convertToPixel((DimensionValue)prop,fontSize);
  }
  retValue.top=(int)px;
  retValue.bottom=(int)py;
  px=py=0;
  prop=getHandle().getProperty(Style.MARGIN_LEFT_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    px=DEUtil.convertToPixel((DimensionValue)prop,fontSize);
  }
  prop=getHandle().getProperty(Style.MARGIN_RIGHT_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    py=DEUtil.convertToPixel((DimensionValue)prop,fontSize);
  }
  retValue.left=(int)px;
  retValue.right=(int)py;
  return retValue;
}",0.8149143432986228
79318,"/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
final void computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartEndLabels,AllAxes aax) throws GenerationException {
  int nTicks=0;
  double dLength=0;
  int iDirection=(iOrientation == HORIZONTAL) ? FORWARD : BACKWARD;
  DataSetIterator dsi=getData();
  if (bConsiderStartEndLabels) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    dStart+=dStartShift * iDirection;
    dEnd+=dEndShift * -iDirection;
  }
  if ((iType & TEXT) == TEXT || bCategoryScale) {
    nTicks=dsi.size() + 1;
    dLength=Math.abs(dStart - dEnd);
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
{
      nTicks=getTickCount();
      dLength=Math.abs(dStart - dEnd);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    String s1=cdt1.toString();
    String s2=cdt2.toString();
    final double dNumberOfSteps=Math.ceil(CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit)));
    nTicks=(int)(dNumberOfSteps / asInteger(oStep)) + 1;
    dLength=Math.abs(dStart - dEnd);
  }
 else {
    throw new GenerationException(""String_Node_Str"");
  }
  double dTicGap=dLength / (nTicks - 1) * iDirection;
  double d=dStart + dTicGap;
  double[] da=new double[nTicks];
  for (int i=1; i < nTicks - 1; i++, d+=dTicGap) {
    da[i]=d;
  }
  da[0]=dStart;
  da[nTicks - 1]=dEnd;
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(da);
}","/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
final void computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartEndLabels,AllAxes aax) throws GenerationException {
  int nTicks=0;
  double dLength=0;
  int iDirection=(iOrientation == HORIZONTAL) ? FORWARD : BACKWARD;
  DataSetIterator dsi=getData();
  if (bConsiderStartEndLabels) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    dStart+=dStartShift * iDirection;
    dEnd+=dEndShift * -iDirection;
  }
  if ((iType & TEXT) == TEXT || bCategoryScale) {
    nTicks=dsi.size() + 1;
    dLength=Math.abs(dStart - dEnd);
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    nTicks=getTickCount();
    dLength=Math.abs(dStart - dEnd);
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    final CDateTime cdt1=(CDateTime)oMinimum;
    final CDateTime cdt2=(CDateTime)oMaximum;
    final double dNumberOfSteps=Math.ceil(CDateTime.computeDifference(cdt2,cdt1,asInteger(oUnit)));
    nTicks=(int)(dNumberOfSteps / asInteger(oStep)) + 1;
    dLength=Math.abs(dStart - dEnd);
  }
 else {
    throw new GenerationException(""String_Node_Str"");
  }
  final double dTickGap=dLength / (nTicks - 1) * iDirection;
  double d=dStart + dTickGap;
  final double[] da=new double[nTicks];
  for (int i=1; i < nTicks - 1; i++, d+=dTickGap) {
    da[i]=d;
  }
  da[0]=dStart;
  da[nTicks - 1]=dEnd;
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(da);
}",0.9729071537290715
79319,"/** 
 * @param iMinorUnitsPerMajor
 * @return
 */
public final double[] getMinorCoordinates(int iMinorUnitsPerMajor){
  if (daTickCoordinates == null || iMinorUnitsPerMajor <= 0) {
    return null;
  }
  final double[] da=new double[iMinorUnitsPerMajor];
  final double dUnit=getUnitSize();
  if ((iType & LOGARITHMIC) != LOGARITHMIC) {
    final double dEach=dUnit / iMinorUnitsPerMajor;
    for (int i=1; i < iMinorUnitsPerMajor; i++) {
      da[i - 1]=dEach * i;
    }
  }
 else {
    double dCount=iMinorUnitsPerMajor;
    final double dEach=10d / dCount;
    final double dMax=Math.log(dCount);
    for (int i=0; i < iMinorUnitsPerMajor; i++) {
      da[i]=(Math.log(i + 1) * dUnit) / dMax;
    }
  }
  da[iMinorUnitsPerMajor - 1]=dUnit;
  return da;
}","/** 
 * @param iMinorUnitsPerMajor
 * @return
 */
public final double[] getMinorCoordinates(int iMinorUnitsPerMajor){
  if (daTickCoordinates == null || iMinorUnitsPerMajor <= 0) {
    return null;
  }
  final double[] da=new double[iMinorUnitsPerMajor];
  final double dUnit=getUnitSize();
  if ((iType & LOGARITHMIC) != LOGARITHMIC) {
    final double dEach=dUnit / iMinorUnitsPerMajor;
    for (int i=1; i < iMinorUnitsPerMajor; i++) {
      da[i - 1]=dEach * i;
    }
  }
 else {
    final double dCount=iMinorUnitsPerMajor;
    final double dMax=Math.log(dCount);
    for (int i=0; i < iMinorUnitsPerMajor; i++) {
      da[i]=(Math.log(i + 1) * dUnit) / dMax;
    }
  }
  da[iMinorUnitsPerMajor - 1]=dUnit;
  return da;
}",0.971004720161834
79320,"/** 
 * Computes the axis start/end shifts (due to start/end labels) and also takes into consideration all start/end shifts of any overlay axes in the same direction as the current scale.
 * @param la
 * @param iOrientation
 * @param iLocation
 * @param aax
 */
final void computeAxisStartEndShifts(IDisplayServer xs,Label la,int iOrientation,int iLocation,AllAxes aax) throws GenerationException {
  final double dMaxSS=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxStartShift() : 0;
  final double dMaxES=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxEndShift() : 0;
  if (!la.isVisible()) {
    dStartShift=dMaxSS;
    dEndShift=dMaxES;
    return;
  }
  if (getType() == TEXT || bCategoryScale) {
    final double dUnitSize=getUnitSize();
    final DataSetIterator dsi=getData();
    final int iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
    la.getCaption().setValue(formatCategoryValue(getType(),dsi.first(),iDateTimeUnit));
    BoundingBox bb=null;
    try {
      bb=computeBox(xs,iLocation,la,0,0);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
    }
 else     if (iOrientation == HORIZONTAL) {
      dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
    }
    la.getCaption().setValue(formatCategoryValue(getType(),dsi.last(),iDateTimeUnit));
    try {
      bb=computeBox(xs,iLocation,la,0,dEnd);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dEndShift=Math.max(dMaxES,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
    }
 else     if (iOrientation == HORIZONTAL) {
      dEndShift=Math.max(dMaxES,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      DecimalFormat df=null;
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern());
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(getMinimum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=null;
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      try {
        sValue=ValueFormatter.format(getMaximum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dMinimum=asDouble(getMinimum()).doubleValue();
      DecimalFormat df=null;
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dMinimum));
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(getMinimum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=null;
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      final double dMaximum=asDouble(getMaximum()).doubleValue();
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dMaximum));
      }
      try {
        sValue=ValueFormatter.format(getMaximum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
  }
 else   if (getType() == DATE_TIME) {
    double dUnitSize=getUnitSize();
    CDateTime cdt=asDateTime(getMinimum());
    final int iUnit=asInteger(oUnit);
    SimpleDateFormat sdf=null;
    String sText=null;
    if (fs != null) {
      sdf=new SimpleDateFormat(CDateTime.getPreferredFormat(iUnit));
    }
    try {
      sText=ValueFormatter.format(cdt,fs,lcl,sdf);
    }
 catch (    DataFormatException dfex) {
      DefaultLoggerImpl.instance().log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    BoundingBox bb=null;
    try {
      bb=computeBox(xs,iLocation,la,0,0);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
    }
 else     if (iOrientation == HORIZONTAL) {
      dStartShift=Math.max(dMaxSS,bb.getHotPoint());
    }
    cdt=asDateTime(getMaximum());
    try {
      sText=ValueFormatter.format(cdt,fs,lcl,sdf);
    }
 catch (    DataFormatException dfex) {
      DefaultLoggerImpl.instance().log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    try {
      bb=computeBox(xs,iLocation,la,0,dEnd);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dEndShift=Math.max(dMaxES,bb.getHotPoint());
    }
 else     if (iOrientation == HORIZONTAL) {
      dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
    }
  }
}","/** 
 * Computes the axis start/end shifts (due to start/end labels) and also takes into consideration all start/end shifts of any overlay axes in the same direction as the current scale.
 * @param la
 * @param iOrientation
 * @param iLocation
 * @param aax
 */
final void computeAxisStartEndShifts(IDisplayServer xs,Label la,int iOrientation,int iLocation,AllAxes aax) throws GenerationException {
  final double dMaxSS=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxStartShift() : 0;
  final double dMaxES=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxEndShift() : 0;
  if (!la.isVisible()) {
    dStartShift=dMaxSS;
    dEndShift=dMaxES;
    return;
  }
  if (getType() == TEXT || bCategoryScale) {
    final double dUnitSize=getUnitSize();
    final DataSetIterator dsi=getData();
    final int iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
    la.getCaption().setValue(formatCategoryValue(getType(),dsi.first(),iDateTimeUnit));
    BoundingBox bb=null;
    try {
      bb=computeBox(xs,iLocation,la,0,0);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
    }
 else     if (iOrientation == HORIZONTAL) {
      dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
    }
    la.getCaption().setValue(formatCategoryValue(getType(),dsi.last(),iDateTimeUnit));
    try {
      bb=computeBox(xs,iLocation,la,0,dEnd);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dEndShift=Math.max(dMaxES,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
    }
 else     if (iOrientation == HORIZONTAL) {
      dEndShift=Math.max(dMaxES,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LINEAR) == LINEAR) {
      DecimalFormat df=null;
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern());
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(getMinimum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=null;
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      try {
        sValue=ValueFormatter.format(getMaximum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
 else     if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dMinimum=asDouble(getMinimum()).doubleValue();
      DecimalFormat df=null;
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dMinimum));
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(getMinimum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=null;
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      final double dMaximum=asDouble(getMaximum()).doubleValue();
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dMaximum));
      }
      try {
        sValue=ValueFormatter.format(getMaximum(),fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      try {
        bb=computeBox(xs,iLocation,la,0,0);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
  }
 else   if (getType() == DATE_TIME) {
    CDateTime cdt=asDateTime(getMinimum());
    final int iUnit=asInteger(oUnit);
    SimpleDateFormat sdf=null;
    String sText=null;
    if (fs != null) {
      sdf=new SimpleDateFormat(CDateTime.getPreferredFormat(iUnit));
    }
    try {
      sText=ValueFormatter.format(cdt,fs,lcl,sdf);
    }
 catch (    DataFormatException dfex) {
      DefaultLoggerImpl.instance().log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    BoundingBox bb=null;
    try {
      bb=computeBox(xs,iLocation,la,0,0);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
    }
 else     if (iOrientation == HORIZONTAL) {
      dStartShift=Math.max(dMaxSS,bb.getHotPoint());
    }
    cdt=asDateTime(getMaximum());
    try {
      sText=ValueFormatter.format(cdt,fs,lcl,sdf);
    }
 catch (    DataFormatException dfex) {
      DefaultLoggerImpl.instance().log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    try {
      bb=computeBox(xs,iLocation,la,0,dEnd);
    }
 catch (    UnexpectedInputException uiex) {
      throw new GenerationException(uiex);
    }
    if (iOrientation == VERTICAL) {
      dEndShift=Math.max(dMaxES,bb.getHotPoint());
    }
 else     if (iOrientation == HORIZONTAL) {
      dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
    }
  }
}",0.9973958333333334
79321,"/** 
 * Returns an auto computed decimal format pattern for representing axis labels on a numeric axis
 * @return
 */
public final String getNumericPattern(){
  final double dMinValue=asDouble(oMinimum).doubleValue();
  final double dStep=asDouble(oStep).doubleValue();
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    final DecimalFormatSymbols dfs=new DecimalFormatSymbols();
    final String sMinimum=oMinimum.toString();
    final int iDecimalPosition=sMinimum.indexOf(dfs.getDecimalSeparator());
    if (iDecimalPosition >= 0) {
      int n=sMinimum.length();
      for (int i=n - 1; i > 0; i--) {
        if (sMinimum.charAt(i) == '0') {
          n--;
        }
 else {
          break;
        }
      }
      final int iMantissaCount=n - 1 - iDecimalPosition;
      final StringBuffer sb=new StringBuffer(sNumericPattern);
      sb.append('.');
      for (int i=0; i < iMantissaCount; i++) {
        sb.append('0');
      }
      return sb.toString();
    }
 else {
      return sNumericPattern;
    }
  }
  if (dMinValue - (int)dMinValue == 0 && dStep - (int)dStep == 0) {
    return sNumericPattern;
  }
  final DecimalFormatSymbols dfs=new DecimalFormatSymbols();
  final String sStep=oStep.toString();
  final int iDecimalPosition=sStep.indexOf(dfs.getDecimalSeparator());
  if (iDecimalPosition >= 0) {
    int n=sStep.length();
    for (int i=n - 1; i > 0; i--) {
      if (sStep.charAt(i) == '0') {
        n--;
      }
 else {
        break;
      }
    }
    final int iMantissaCount=n - 1 - iDecimalPosition;
    final StringBuffer sb=new StringBuffer(sNumericPattern);
    sb.append('.');
    for (int i=0; i < iMantissaCount; i++) {
      sb.append('0');
    }
    return sb.toString();
  }
 else {
    return sNumericPattern;
  }
}","/** 
 * Returns an auto computed decimal format pattern for representing axis labels on a numeric axis
 * @return
 */
public final String getNumericPattern(){
  if (oMinimum == null || oStep == null) {
    return ""String_Node_Str"";
  }
  final double dMinValue=asDouble(oMinimum).doubleValue();
  final double dStep=asDouble(oStep).doubleValue();
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    final DecimalFormatSymbols dfs=new DecimalFormatSymbols();
    final String sMinimum=oMinimum.toString();
    final int iDecimalPosition=sMinimum.indexOf(dfs.getDecimalSeparator());
    if (iDecimalPosition >= 0) {
      int n=sMinimum.length();
      for (int i=n - 1; i > 0; i--) {
        if (sMinimum.charAt(i) == '0') {
          n--;
        }
 else {
          break;
        }
      }
      final int iMantissaCount=n - 1 - iDecimalPosition;
      final StringBuffer sb=new StringBuffer(sNumericPattern);
      sb.append('.');
      for (int i=0; i < iMantissaCount; i++) {
        sb.append('0');
      }
      return sb.toString();
    }
 else {
      return sNumericPattern;
    }
  }
  if (dMinValue - (int)dMinValue == 0 && dStep - (int)dStep == 0) {
    return sNumericPattern;
  }
  final DecimalFormatSymbols dfs=new DecimalFormatSymbols();
  final String sStep=oStep.toString();
  final int iDecimalPosition=sStep.indexOf(dfs.getDecimalSeparator());
  if (iDecimalPosition >= 0) {
    int n=sStep.length();
    for (int i=n - 1; i > 0; i--) {
      if (sStep.charAt(i) == '0') {
        n--;
      }
 else {
        break;
      }
    }
    final int iMantissaCount=n - 1 - iDecimalPosition;
    final StringBuffer sb=new StringBuffer(sNumericPattern);
    sb.append('.');
    for (int i=0; i < iMantissaCount; i++) {
      sb.append('0');
    }
    return sb.toString();
  }
 else {
    return sNumericPattern;
  }
}",0.9785216178521616
79322,"/** 
 * Checks all labels for any overlap for a given axis' scale
 * @param la
 * @param iLabelLocation
 * @return
 */
final boolean checkFit(IDisplayServer xs,Label la,int iLabelLocation) throws GenerationException {
  if (iType == TEXT || bCategoryScale) {
    return true;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iPointToCheck=0;
  if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
    iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 3 : 0;
  }
 else   if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
    iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 2 : 3;
  }
  double[] da=daTickCoordinates;
  RotatedRectangle rrPrev=null, rr;
  if ((iType & (NUMERICAL | LINEAR)) == (NUMERICAL | LINEAR)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df=null;
    if (fs == null) {
      df=new DecimalFormat(getNumericPattern());
    }
    final NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.length; i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i];
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i];
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
        return false;
      }
      rrPrev=rr;
      dAxisValue+=dAxisStep;
    }
  }
 else   if ((iType & (NUMERICAL | LOGARITHMIC)) == (NUMERICAL | LOGARITHMIC)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df;
    NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.length; i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,lcl,this);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i];
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i];
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
        return false;
      }
      rrPrev=rr;
      dAxisValue*=dAxisStep;
    }
  }
 else   if (iType == DATE_TIME) {
    CDateTime cdt, cdtAxisValue=asDateTime(oMinimum);
    final int iUnit=asInteger(oUnit);
    final int iStep=asInteger(oStep);
    final SimpleDateFormat sdf=new SimpleDateFormat(CDateTime.getPreferredFormat(iUnit));
    String sText;
    cdt=cdtAxisValue;
    for (int i=0; i < da.length; i++) {
      sText=sdf.format(cdt.getTime());
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW)       x=da[i];
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT)       y=da[i];
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
        return false;
      }
      rrPrev=rr;
      cdt=cdtAxisValue.forward(iUnit,iStep * (i + 1));
    }
  }
  return true;
}","/** 
 * Checks all labels for any overlap for a given axis' scale
 * @param la
 * @param iLabelLocation
 * @return
 */
final boolean checkFit(IDisplayServer xs,Label la,int iLabelLocation) throws GenerationException {
  if (iType == TEXT || bCategoryScale) {
    return true;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iPointToCheck=0;
  if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
    iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 3 : 0;
  }
 else   if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
    iPointToCheck=(dAngleInDegrees < 0 && dAngleInDegrees > -90) ? 2 : 3;
  }
  double[] da=daTickCoordinates;
  RotatedRectangle rrPrev=null, rr;
  if ((iType & (NUMERICAL | LINEAR)) == (NUMERICAL | LINEAR)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    DecimalFormat df=null;
    if (fs == null) {
      df=new DecimalFormat(getNumericPattern());
    }
    final NumberDataElement nde=NumberDataElementImpl.create(0);
    for (int i=0; i < da.length; i++) {
      nde.setValue(dAxisValue);
      try {
        sText=ValueFormatter.format(nde,fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i];
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i];
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
        return false;
      }
      rrPrev=rr;
      dAxisValue+=dAxisStep;
    }
  }
 else   if ((iType & (NUMERICAL | LOGARITHMIC)) == (NUMERICAL | LOGARITHMIC)) {
    double dAxisValue=asDouble(getMinimum()).doubleValue();
    final double dAxisStep=asDouble(getStep()).doubleValue();
    String sText;
    NumberDataElement nde=NumberDataElementImpl.create(0);
    DecimalFormat df=null;
    for (int i=0; i < da.length; i++) {
      nde.setValue(dAxisValue);
      if (fs == null) {
        df=new DecimalFormat(getNumericPattern(dAxisValue));
      }
      try {
        sText=ValueFormatter.format(nde,fs,lcl,df);
      }
 catch (      DataFormatException dfex) {
        DefaultLoggerImpl.instance().log(dfex);
        sText=NULL_STRING;
      }
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=da[i];
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=da[i];
      }
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
        return false;
      }
      rrPrev=rr;
      dAxisValue*=dAxisStep;
    }
  }
 else   if (iType == DATE_TIME) {
    CDateTime cdt, cdtAxisValue=asDateTime(oMinimum);
    final int iUnit=asInteger(oUnit);
    final int iStep=asInteger(oStep);
    final SimpleDateFormat sdf=new SimpleDateFormat(CDateTime.getPreferredFormat(iUnit));
    String sText;
    cdt=cdtAxisValue;
    for (int i=0; i < da.length; i++) {
      sText=sdf.format(cdt.getTime());
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW)       x=da[i];
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT)       y=da[i];
      la.getCaption().setValue(sText);
      try {
        rr=computePolygon(xs,iLabelLocation,la,x,y);
      }
 catch (      UnexpectedInputException uiex) {
        throw new GenerationException(uiex);
      }
      Point p=rr.getPoint(iPointToCheck);
      if (rrPrev != null && (rrPrev.contains(p) || rrPrev.getPoint(iPointToCheck).equals(p))) {
        return false;
      }
      rrPrev=rr;
      cdt=cdtAxisValue.forward(iUnit,iStep * (i + 1));
    }
  }
  return true;
}",0.9739069111424542
79323,"/** 
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @return
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,DataElement oMinimum,DataElement oMaximum,Double oStep,FormatSpecifier fs,Locale lcl) throws GenerationException {
  final Label la=ax.getLabel();
  final FontDefinition fd=la.getCaption().getFont();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final double dAngleInDegrees=fd.getRotation();
  AutoScale sc=null;
  AutoScale scCloned=null;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.bCategoryScale=true;
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=Double.MIN_VALUE;
    dsi.reset();
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
    }
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dDelta=1;
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    dStep=Math.floor(Math.log(dDelta) / LOG_10);
    dStep=Math.pow(10,dStep);
    sc=new AutoScale(iType,new Double(0),new Double(0),new Double(dStep));
    sc.setData(dsi);
    sc.fs=fs;
    sc.lcl=lcl;
    if (oMinimum != null) {
      if (oMinimum instanceof NumberDataElement) {
        sc.oMinimum=new Double(((NumberDataElement)oMinimum).getValue());
      }
 else       if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new GenerationException(""String_Node_Str"" + ax + ""String_Node_Str""+ sc.oMinimum);
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof NumberDataElement) {
        sc.oMaximum=new Double(((NumberDataElement)oMaximum).getValue());
      }
 else       if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new GenerationException(""String_Node_Str"" + ax + ""String_Node_Str""+ sc.oMaximum);
      }
      sc.bMaximumFixed=true;
    }
    if (oStep != null) {
      sc.oStep=oStep;
      sc.bStepFixed=true;
    }
    final Object oMinValue=new Double(dMinValue);
    final Object oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomMore, bZoomSuccess=false;
    while (bFits == bFirstFit) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCount() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCount() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=Double.MIN_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
    }
    final Object oMinValue=new Double(dMinValue);
    final Object oMaxValue=new Double(dMaxValue);
    sc=new AutoScale(iType,new Double(0),new Double(0),new Double(10));
    sc.fs=fs;
    sc.lcl=lcl;
    sc.setData(dsi);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
    }
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    if ((iType & PERCENT) == PERCENT) {
      return sc;
    }
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomMore, bZoomSuccess=false;
    while (bFits == bFirstFit) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCount() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCount() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      String s=cValue.toString();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    CDateTime cdtMinValue=new CDateTime(caMin);
    CDateTime cdtMaxValue=new CDateTime(caMax);
    int iUnit=CDateTime.getDifference(cdtMinValue,cdtMaxValue);
    CDateTime cdtMinAxis=cdtMinValue.backward(iUnit,1);
    CDateTime cdtMaxAxis=cdtMaxValue.forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis,new Integer(iUnit),new Integer(1));
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.fs=fs;
    sc.lcl=lcl;
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit, bZoomSuccess=false;
    while (bFits == bFirstFit) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCount() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.adjustAxisMinMax(cdtMinValue,cdtMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCount() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @return
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,DataElement oMinimum,DataElement oMaximum,Double oStep,FormatSpecifier fs,Locale lcl) throws GenerationException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  AutoScale sc=null;
  AutoScale scCloned=null;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.lcl=lcl;
    sc.bCategoryScale=true;
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=Double.MIN_VALUE;
    dsi.reset();
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
    }
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dDelta=1;
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    dStep=Math.floor(Math.log(dDelta) / LOG_10);
    dStep=Math.pow(10,dStep);
    sc=new AutoScale(iType,new Double(0),new Double(0),new Double(dStep));
    sc.setData(dsi);
    sc.fs=fs;
    sc.lcl=lcl;
    if (oMinimum != null) {
      if (oMinimum instanceof NumberDataElement) {
        sc.oMinimum=new Double(((NumberDataElement)oMinimum).getValue());
      }
 else {
        throw new GenerationException(""String_Node_Str"" + oMinimum + ""String_Node_Str""+ ax.getModelAxis().getType());
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof NumberDataElement) {
        sc.oMaximum=new Double(((NumberDataElement)oMaximum).getValue());
      }
 else {
        throw new GenerationException(""String_Node_Str"" + oMaximum + ""String_Node_Str""+ ax.getModelAxis().getType());
      }
      sc.bMaximumFixed=true;
    }
    if (oStep != null) {
      sc.oStep=oStep;
      sc.bStepFixed=true;
      if (((Double)sc.oStep).doubleValue() <= 0) {
        throw new GenerationException(""String_Node_Str"" + oStep + ""String_Node_Str"");
      }
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((Double)sc.oMinimum).doubleValue() > ((Double)sc.oMaximum).doubleValue()) {
        throw new GenerationException(""String_Node_Str"" + oMinimum + ""String_Node_Str""+ oMaximum+ ""String_Node_Str"");
      }
    }
    final Object oMinValue=new Double(dMinValue);
    final Object oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    while (bFits == bFirstFit) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCount() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCount() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=Double.MIN_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
    }
    final Object oMinValue=new Double(dMinValue);
    final Object oMaxValue=new Double(dMaxValue);
    sc=new AutoScale(iType,new Double(0),new Double(0),new Double(10));
    sc.fs=fs;
    sc.lcl=lcl;
    sc.setData(dsi);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
    }
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    if ((iType & PERCENT) == PERCENT) {
      return sc;
    }
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    while (bFits == bFirstFit) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCount() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCount() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new GenerationException(""String_Node_Str"" + oMinimum + ""String_Node_Str""+ ax.getModelAxis().getType());
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new GenerationException(""String_Node_Str"" + oMaximum + ""String_Node_Str""+ ax.getModelAxis().getType());
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(((CDateTime)sc.oMaximum))) {
        throw new GenerationException(""String_Node_Str"" + oMinimum + ""String_Node_Str""+ oMaximum+ ""String_Node_Str"");
      }
    }
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    CDateTime cdtMinValue=new CDateTime(caMin);
    CDateTime cdtMaxValue=new CDateTime(caMax);
    int iUnit=CDateTime.getDifference(cdtMinValue,cdtMaxValue);
    CDateTime cdtMinAxis=cdtMinValue.backward(iUnit,1);
    CDateTime cdtMaxAxis=cdtMaxValue.forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis,new Integer(iUnit),new Integer(1));
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.fs=fs;
    sc.lcl=lcl;
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit, bZoomSuccess=false;
    while (bFits == bFirstFit) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCount() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.adjustAxisMinMax(cdtMinValue,cdtMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCount() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.8795767950546838
79324,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.725469644440861
79325,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
        }
      }
    }
 else {
      return null;
    }
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.725469644440861
79326,"/** 
 * Sends a content changed and possibly element deleted event. This record is unusual because it must send two events: one for the container, one for the content. If we are dropping the content, then it is effectively deleted, and we must tell the content that it has been deleted.
 */
protected void sendNotifcations(boolean transactionStarted){
  NotificationEvent event=null;
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   event=new ContentEvent(container,slotID,ContentEvent.ADD);
 else   event=new ContentEvent(container,slotID,ContentEvent.REMOVE);
  event.setInTransaction(transactionStarted);
  if (state == DONE_STATE)   event.setSender(sender);
  container.broadcast(event);
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   return;
  event=new ElementDeletedEvent(content);
  if (state == DONE_STATE)   event.setSender(sender);
  content.broadcast(event);
}","/** 
 * Sends a content changed and possibly element deleted event. This record is unusual because it must send two events: one for the container, one for the content. If we are dropping the content, then it is effectively deleted, and we must tell the content that it has been deleted.
 */
protected void sendNotifcations(boolean transactionStarted){
  NotificationEvent event=null;
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   event=new ContentEvent(container,slotID,ContentEvent.ADD);
 else   event=new ContentEvent(container,slotID,ContentEvent.REMOVE);
  event.setInTransaction(transactionStarted);
  if (state == DONE_STATE)   event.setSender(sender);
  container.broadcast(event);
  if (add && state != UNDONE_STATE || !add && state == UNDONE_STATE)   return;
  event=new ElementDeletedEvent(content);
  if (state == DONE_STATE)   event.setSender(sender);
  content.broadcast(event,container.getRoot());
}",0.9892241379310344
79327,"public NotificationEvent getEvent(){
  return new NameEvent(element);
}","public NotificationEvent getEvent(){
  return new NameEvent(element,oldName,newName);
}",0.8987341772151899
79328,"/** 
 * Implements to broadcast an event to all listeners of this design element on a design tree. Note subclasses should override this method to change the behavior of broadcast method. Part of: Notification system.
 * @param ev the event to send
 * @param design the root node of the design tree.
 */
protected void broadcast(NotificationEvent ev,ReportDesign design){
  if (listeners != null) {
    ArrayList tmpListeners=new ArrayList(listeners);
    Iterator iter=tmpListeners.iterator();
    while (iter.hasNext()) {
      ((Listener)iter.next()).elementChanged(getHandle(design),ev);
    }
  }
  if (derived != null) {
    if (ev.getDeliveryPath() == NotificationEvent.ELEMENT_CLIENT)     return;
    if (ev.getDeliveryPath() != NotificationEvent.STYLE_CLIENT)     ev.setDeliveryPath(NotificationEvent.DESCENDENT);
    Iterator iter=derived.iterator();
    while (iter.hasNext()) {
      ((DesignElement)iter.next()).broadcast(ev,design);
    }
  }
}","/** 
 * Implements to broadcast an event to all listeners of this design element on a design tree. Note subclasses should override this method to change the behavior of broadcast method. Part of: Notification system.
 * @param ev the event to send
 * @param design the root node of the design tree.
 */
public void broadcast(NotificationEvent ev,ReportDesign design){
  if (listeners != null) {
    ArrayList tmpListeners=new ArrayList(listeners);
    Iterator iter=tmpListeners.iterator();
    while (iter.hasNext()) {
      ((Listener)iter.next()).elementChanged(getHandle(design),ev);
    }
  }
  if (derived != null) {
    if (ev.getDeliveryPath() == NotificationEvent.ELEMENT_CLIENT)     return;
    if (ev.getDeliveryPath() != NotificationEvent.STYLE_CLIENT)     ev.setDeliveryPath(NotificationEvent.DESCENDENT);
    Iterator iter=derived.iterator();
    while (iter.hasNext()) {
      ((DesignElement)iter.next()).broadcast(ev,design);
    }
  }
}",0.9931972789115646
79329,"/** 
 * Gets the root node of the design tree. This node must be a instance of <code>ReportDesign</code>.
 * @return the root node of the design tree
 */
protected ReportDesign getRoot(){
  DesignElement element=this;
  while (element.getContainer() != null)   element=element.getContainer();
  if (element instanceof ReportDesign == false)   return null;
  return (ReportDesign)element;
}","/** 
 * Gets the root node of the design tree. This node must be a instance of <code>ReportDesign</code>.
 * @return the root node of the design tree
 */
public ReportDesign getRoot(){
  DesignElement element=this;
  while (element.getContainer() != null)   element=element.getContainer();
  if (element instanceof ReportDesign == false)   return null;
  return (ReportDesign)element;
}",0.983225806451613
79330,"/** 
 * Sends the event to all clients in addition to the routing for a design element.
 * @param ev the event to send
 * @param design the root node of the design tree.
 */
protected void broadcast(NotificationEvent ev,ReportDesign design){
  super.broadcast(ev,design);
  adjustDeliveryPath(ev);
  broadcastToClients(ev,design);
}","/** 
 * Sends the event to all clients in addition to the routing for a design element.
 * @param ev the event to send
 * @param design the root node of the design tree.
 */
public void broadcast(NotificationEvent ev,ReportDesign design){
  super.broadcast(ev,design);
  adjustDeliveryPath(ev);
  broadcastToClients(ev,design);
}",0.9803328290468988
79331,"/** 
 * creates a new scripting scope
 */
public void newScope(){
  Scriptable newScope;
  try {
    newScope=context.newObject(scope);
    scope=newScope;
  }
 catch (  EvaluatorException e) {
    logger.error(e);
  }
catch (  JavaScriptException e) {
    logger.error(e);
  }
}","/** 
 * creates a new scripting scope
 */
public void newScope(){
  Scriptable newScope;
  try {
    newScope=context.newObject(scope);
    newScope.setParentScope(scope);
    scope=newScope;
  }
 catch (  EvaluatorException e) {
    logger.error(e);
  }
catch (  JavaScriptException e) {
    logger.error(e);
  }
}",0.9393939393939394
79332,"/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=(Stroke)_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID && lia.getThickness() > 1) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}","/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=(Stroke)_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}",0.9866529774127312
79333,"public ElementDefn getDefn(){
}","public ElementDefn getDefn(){
  ElementDefn extDefn=((ExtendedItem)getElement()).getExtDefn();
  if (extDefn != null)   return extDefn;
  return getElement().getDefn();
}",0.308457711442786
79334,"public char[] getCompletionProposalAutoActivationCharacters(){
  return new char[]{'?','.'};
}","public char[] getCompletionProposalAutoActivationCharacters(){
  return new char[]{'.'};
}",0.9782608695652174
79335,"public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  try {
    if (offset > viewer.getTopIndexStartOffset()) {
      char ch=viewer.getDocument().getChar(offset - 1);
      if (ch == '?') {
        lastProposals=getParameterCompletionProposals(viewer,offset);
        return lastProposals;
      }
 else       if (ch == '.') {
        lastProposals=getTableOrColumnCompletionProposals(viewer,offset);
        return lastProposals;
      }
 else {
        return getRelevantProposals(viewer,offset);
      }
    }
  }
 catch (  BadLocationException e) {
  }
  return null;
}","public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,int offset){
  try {
    if (offset > viewer.getTopIndexStartOffset()) {
      char ch=viewer.getDocument().getChar(offset - 1);
      if (ch == '.') {
        lastProposals=getTableOrColumnCompletionProposals(viewer,offset);
        return lastProposals;
      }
 else {
        return getRelevantProposals(viewer,offset);
      }
    }
  }
 catch (  BadLocationException e) {
  }
  return null;
}",0.8734995383194829
79336,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series=getConvertedSeries(series);
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
          }
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.8799283154121864
79337,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series=getConvertedSeries(series);
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
          }
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(""String_Node_Str"")) {
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().set(j,series);
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        if ((sNewSubType.equalsIgnoreCase(""String_Node_Str"") || sNewSubType.equalsIgnoreCase(""String_Node_Str""))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.8799283154121864
79338,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          currentChart.setSubType(sNewSubType);
          EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
          for (int i=0; i < axes.size(); i++) {
            ((Axis)axes.get(i)).setPercent(false);
            EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
            for (int j=0; j < seriesdefinitions.size(); j++) {
              Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series=getConvertedSeries(series);
            series.setStacked(false);
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
      ((ChartWithAxes)currentChart).setOrientation(newOrientation);
      currentChart.setDimension(getDimensionFor(sNewDimension));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(false);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9778761061946902
79339,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series=getConvertedSeries(series);
            series.setStacked(false);
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
            ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          }
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(sType)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          ((Axis)axes.get(i)).setPercent(false);
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            series.setStacked(false);
          }
        }
      }
    }
 else     if (currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"") || currentChart.getType().equals(""String_Node_Str"")) {
      if (!currentChart.getType().equals(""String_Node_Str"")) {
        currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData()));
      }
      currentChart.setType(sType);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
      currentChart.setSubType(sNewSubType);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        ((Axis)axes.get(i)).setPercent(false);
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series);
          series.setStacked(false);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(sType);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.DATE_TIME_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(getConvertedSampleData(helperModel.getSampleData()));
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getType().equals(""String_Node_Str"")) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      series=getConvertedSeries(series);
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series);
        series.setStacked(false);
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
    currentChart.setDimension(getDimensionFor(sNewDimension));
  }
  return currentChart;
}",0.9885938335412584
79340,"/** 
 * Parse the input stream to get a DOM tree.
 * @param in the input stream
 * @param textType the text type (case-insensitive). Valid types includesauto,plain,html. If null, it is regarded as auto; if set to any other value, treat the text as plain text.
 * @return DOM tree if no error exists,otherwise null.
 */
public Document parse(InputStream in,String textType){
}","/** 
 * Parse the input stream to get a DOM tree.
 * @param in the input stream
 * @param textType the text type (case-insensitive). Valid types includes auto,plain,html. If null, it is regarded as auto; if set to any other value, treat the text as plain text.
 * @return DOM tree if no error exists,otherwise null.
 */
public Document parse(InputStream in,String textType){
}",0.9986684420772304
79341,"public void startReport(Report report){
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"");
  }
  this.report=report;
  OutputStream out=this.resourceManager.openOutputStream(REPORT_FILE);
  writer.open(out,""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(""String_Node_Str"");
  StyleDesign style;
  boolean hasStyle=false;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"");
    }
  }
 else {
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.entrySet().size() == 0) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          StyleDesign tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(StyleDesign)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              if (!hasStyle) {
                hasStyle=true;
                writer.openTag(""String_Node_Str"");
                writer.attribute(""String_Node_Str"",""String_Node_Str"");
              }
              writer.style(style.getName(),styleBuffer.toString());
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  if (hasStyle) {
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
}","public void startReport(Report report){
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"");
  }
  this.report=report;
  OutputStream out=this.resourceManager.openOutputStream(REPORT_FILE);
  writer.open(out,""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeNoEndTag();
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.style(""String_Node_Str"",""String_Node_Str"",true);
  StyleDesign style;
  StringBuffer styleBuffer=new StringBuffer();
  if (report == null) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"");
    }
  }
 else {
    ArrayList styleList=new ArrayList();
    int styleNum=0;
    int m;
    for (int n=0; n < report.getStyleCount(); n++) {
      styleBuffer.delete(0,styleBuffer.capacity());
      style=report.getStyle(n);
      if (style != null) {
        if (style.entrySet().size() == 0) {
          styleNameMapping.put(style.getName(),null);
        }
 else {
          StyleDesign tempStyle;
          for (m=0; m < styleNum; m++) {
            tempStyle=(StyleDesign)styleList.get(m);
            if (style.isSameStyle(tempStyle)) {
              styleNameMapping.put(style.getName(),tempStyle.getName());
              break;
            }
          }
          if (m == styleNum) {
            AttributeBuilder.buildStyle(styleBuffer,style,this);
            if (styleBuffer.length() > 0) {
              styleList.add(style);
              styleNum++;
              styleNameMapping.put(style.getName(),style.getName());
              writer.style(style.getName(),styleBuffer.toString(),false);
            }
 else {
              styleNameMapping.put(style.getName(),null);
            }
          }
        }
      }
    }
  }
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.8090569561157797
79342,"/** 
 * @param value
 */
public void style(String name,String value){
}","/** 
 * @param value
 * @param isGeneral
 */
public void style(String name,String value,boolean isGeneral){
}",0.7888888888888889
79343,"/** 
 * Extract the file extension string from the given file name.
 * @param fileName The file name.
 * @param separatorFlag Specifies whether the file name uses File or URI separator character.
 * @return The file extension string containing the '.' character.
 */
public static String getExtFromFileName(String fileName,int separatorFlag){
}","/** 
 * Extract the file extension string from the given file name.
 * @param fileName The file name.
 * @param separatorFlag Specifies whether the file name uses File or URI separator character.
 * @return The file extension string containing the '.' character.
 */
public static String getExtFromFileName(String fileName,int separatorFlag){
  if (fileName != null) {
    int lastindex=fileName.lastIndexOf('.');
    if (lastindex > fileName.lastIndexOf(separators[separatorFlag])) {
      return fileName.substring(lastindex,fileName.length());
    }
  }
  return null;
}",0.7502726281352236
79344,"/** 
 * Generates an absolute file name from the give path and file name.
 * @param path The path name.
 * @param fileName The file name.
 * @return The absolute file path.
 */
public static String getAbsolutePath(String path,String fileName){
  if (fileName == null || fileName.length() == 0) {
    return null;
  }
  if (path == null || path.length() == 0 || fileName.indexOf(':') > 0) {
    return fileName;
  }
  StringBuffer fullPath=new StringBuffer();
  fullPath.append(path);
  if (path.charAt(path.length() - 1) != File.separatorChar) {
    fullPath.append(File.separatorChar);
  }
  fullPath.append(fileName);
  return fullPath.toString();
}","/** 
 * Generates an absolute file name from the give path and file name.
 * @param path The path name.
 * @param fileName The file name.
 * @return The absolute file path.
 */
public static String getAbsolutePath(String path,String fileName){
  File file=new File(fileName);
  if (!file.exists()) {
    file=new File(path,fileName);
  }
  if (file.exists()) {
    return file.getAbsolutePath();
  }
  return null;
}",0.5435801312089972
79345,"private void registerDriver(String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {
  Driver driver=(Driver)Class.forName(className).newInstance();
  DriverManager.registerDriver(driver);
}","/** 
 * Ensures that the JDBC driver with specified class name is loaded and registered with JDBC DriverManager
 */
private void registerDriver(String className) throws DriverException {
  if (className == null)   return;
  Class driverClass;
  try {
    driverClass=Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    throw new DriverException(e);
  }
  if (!registeredDrivers.contains(className)) {
    try {
      Driver driver=(Driver)driverClass.newInstance();
      DriverManager.registerDriver(driver);
    }
 catch (    SQLException e) {
    }
catch (    IllegalAccessException e) {
      throw new DriverException(e);
    }
catch (    InstantiationException e) {
      throw new DriverException(e);
    }
    registeredDrivers.add(className);
  }
}",0.1643835616438356
79346,"public void open(Properties connProperties) throws OdaException {
  if (JDBCConnectionFactory.isLoggable(Level.INFO_LEVEL)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      if (!propName.startsWith(""String_Node_Str"")) {
        logMsg+=(propName + ""String_Node_Str"" + connProperties.getProperty(propName)+ ""String_Node_Str"");
      }
    }
    JDBCConnectionFactory.log(Level.INFO_LEVEL,logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(""String_Node_Str"");
  if (dataSource != null) {
    JDBCConnectionFactory.log(Level.INFO_LEVEL,""String_Node_Str"");
  }
 else {
    String url=connProperties.getProperty(""String_Node_Str"");
    if (url == null) {
      throw new DriverException(""String_Node_Str"",DriverException.ERROR_MISSING_PROPERTIES);
    }
    JDBCConnectionFactory.log(Level.INFO_LEVEL,""String_Node_Str"");
    String className=connProperties.getProperty(""String_Node_Str"");
    try {
      Properties props=new Properties();
      String user=connProperties.getProperty(""String_Node_Str"");
      String pwd=connProperties.getProperty(""String_Node_Str"");
      if (user != null)       props.setProperty(""String_Node_Str"",user);
 else {
        for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
          String propName=(String)enumeration.nextElement();
          if (!propName.startsWith(""String_Node_Str"")) {
            props.setProperty(propName,connProperties.getProperty(propName));
          }
        }
      }
      if (pwd != null)       props.setProperty(""String_Node_Str"",pwd);
      JDBCConnectionFactory.log(Level.INFO_LEVEL,""String_Node_Str"" + url + ""String_Node_Str""+ props.toString());
      Class.forName(className);
      try {
        jdbcConn=getConnection(url,props);
      }
 catch (      Exception ex) {
      }
      if (jdbcConn == null) {
        registerDriver(className);
        jdbcConn=getConnection(url,props);
      }
    }
 catch (    SQLException e) {
      throw new JDBCException((SQLException)e);
    }
catch (    Exception e) {
      throw new DriverException(e);
    }
  }
}","public void open(Properties connProperties) throws OdaException {
  if (connProperties == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (JDBCConnectionFactory.isLoggable(Level.INFO_LEVEL)) {
    String logMsg=""String_Node_Str"";
    for (Enumeration enumeration=connProperties.propertyNames(); enumeration.hasMoreElements(); ) {
      String propName=(String)enumeration.nextElement();
      String lcPropName=propName.toLowerCase();
      String propVal;
      if (lcPropName.indexOf(""String_Node_Str"") >= 0 || lcPropName.indexOf(""String_Node_Str"") >= 0)       propVal=""String_Node_Str"";
 else       propVal=connProperties.getProperty(propName);
      logMsg+=propName + ""String_Node_Str"" + propVal+ ""String_Node_Str"";
    }
    JDBCConnectionFactory.log(Level.INFO_LEVEL,logMsg);
  }
  close();
  String dataSource=connProperties.getProperty(""String_Node_Str"");
  if (dataSource != null) {
    JDBCConnectionFactory.log(Level.INFO_LEVEL,""String_Node_Str"");
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
 else {
    String url=connProperties.getProperty(""String_Node_Str"");
    if (url == null || url.length() == 0) {
      throw new DriverException(""String_Node_Str"",DriverException.ERROR_MISSING_PROPERTIES);
    }
    connectByUrl(url,connProperties);
  }
}",0.4746335963923337
79347,"public void showTargetFeedback(Request request){
  if (this.getSelected() == 0) {
    this.getViewer().setCursor(ReportPlugin.getDefault().getCellCursor());
  }
  super.showTargetFeedback(request);
}","public void showTargetFeedback(Request request){
  if (this.getSelected() == 0 && request.getType() == RequestConstants.REQ_SELECTION) {
    this.getViewer().setCursor(ReportPlugin.getDefault().getCellCursor());
  }
  super.showTargetFeedback(request);
}",0.8785871964679912
79348,"/** 
 * @param reportDesign The reportDesign to set.
 */
public void setReportDesign(ReportDesign reportDesign){
  this.reportDesign=reportDesign;
  File file=new File(reportDesign.getFileName());
  basePath=file.getParent();
}","/** 
 * @param reportDesign The reportDesign to set.
 */
public void setReportDesign(ReportDesign reportDesign){
  this.reportDesign=reportDesign;
  if (basePath == null || basePath.equals(""String_Node_Str"")) {
    File file=new File(reportDesign.getFileName());
    basePath=file.getParent();
  }
}",0.8631178707224335
79349,"public void visitReportDesign(ReportDesignHandle handle){
  report.setUnit(handle.getDefaultUnits());
  defaultUnit=report.getUnit();
  SlotHandle paramSlot=handle.getParameters();
  IParameterDefnBase param;
  for (int i=0; i < paramSlot.getCount(); i++) {
    apply(paramSlot.get(i));
    assert(currentElement != null);
    param=(IParameterDefnBase)currentElement;
    report.addParameter(param);
  }
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    assert(currentElement != null);
    pageSetup.addMasterPage((MasterPageDesign)currentElement);
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    assert(currentElement != null);
    report.addContent((ReportItemDesign)currentElement);
  }
}","public void visitReportDesign(ReportDesignHandle handle){
  report.setUnit(handle.getDefaultUnits());
  if (handle.getBase() != null && !handle.getBase().equals(""String_Node_Str"")) {
    report.setBasePath(handle.getBase());
  }
  defaultUnit=report.getUnit();
  SlotHandle paramSlot=handle.getParameters();
  IParameterDefnBase param;
  for (int i=0; i < paramSlot.getCount(); i++) {
    apply(paramSlot.get(i));
    assert(currentElement != null);
    param=(IParameterDefnBase)currentElement;
    report.addParameter(param);
  }
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    assert(currentElement != null);
    pageSetup.addMasterPage((MasterPageDesign)currentElement);
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    assert(currentElement != null);
    report.addContent((ReportItemDesign)currentElement);
  }
}",0.9360845495722194
79350,"public void newScope(){
  Scriptable newScope=new NativeObject();
  newScope.setPrototype(scope);
  newScope.setParentScope(scope);
  scope=newScope;
}","/** 
 * creates a new scripting scope
 */
public void newScope(){
  Scriptable newScope;
  try {
    newScope=context.newObject(scope);
    scope=newScope;
  }
 catch (  EvaluatorException e) {
    logger.error(e);
  }
catch (  JavaScriptException e) {
    logger.error(e);
  }
}",0.2558139534883721
79351,"public Object eval(String source,String name,int lineNo){
  assert(this.context != null);
  try {
    Object value=context.evaluateString(this.scope,source,name,lineNo,null);
    return jsToJava(value);
  }
 catch (  Exception ex) {
    logger.error(source,ex);
    return null;
  }
}","/** 
 * evaluates a script 
 */
public Object eval(String source,String name,int lineNo){
  assert(this.context != null);
  try {
    Object value=context.evaluateString(scope,source,name,lineNo,null);
    return jsToJava(value);
  }
 catch (  Exception ex) {
    logger.error(source,ex);
    return null;
  }
}",0.4941176470588235
79352,"public ScriptContext(){
  try {
    this.context=Context.enter();
    this.scope=this.context.initStandardObjects();
    context.setWrapFactory(new BIRTWrapFactory());
    NativeFinance.init(context,scope,true);
    NativeDateTimeSpan.init(context,scope,true);
  }
 catch (  Exception ex) {
    Context.exit();
    this.scope=null;
    this.context=null;
    logger.error(ex);
  }
}","/** 
 * constructor
 */
public ScriptContext(){
  try {
    this.context=Context.enter();
    this.scope=this.context.initStandardObjects();
    context.setWrapFactory(new BIRTWrapFactory());
    NativeFinance.init(context,scope,true);
    NativeDateTimeSpan.init(context,scope,true);
  }
 catch (  Exception ex) {
    Context.exit();
    this.scope=null;
    this.context=null;
    logger.error(ex);
  }
}",0.9695431472081218
79353,"public Object jsToJava(Object jsValue){
  if (jsValue instanceof Scriptable) {
    String className=((Scriptable)jsValue).getClassName();
    if (""String_Node_Str"".equals(className)) {
      return Context.toType(jsValue,java.util.Date.class);
    }
 else     if (""String_Node_Str"".equals(className)) {
      return Boolean.valueOf(Context.toString(jsValue));
    }
 else     if (""String_Node_Str"".equals(className)) {
      return Context.toString(jsValue);
    }
  }
  return Context.toType(jsValue,Object.class);
}","/** 
 * converts a JS object to a Java object
 * @param jsValue javascript object
 * @return Java object
 */
public Object jsToJava(Object jsValue){
  if (jsValue instanceof Scriptable) {
    String className=((Scriptable)jsValue).getClassName();
    if (""String_Node_Str"".equals(className)) {
      return Context.toType(jsValue,java.util.Date.class);
    }
 else     if (""String_Node_Str"".equals(className)) {
      return Boolean.valueOf(Context.toString(jsValue));
    }
 else     if (""String_Node_Str"".equals(className)) {
      return Context.toString(jsValue);
    }
  }
  return Context.toType(jsValue,Object.class);
}",0.904636920384952
79354,"public void exitScope(){
  Scriptable parentScope=scope.getParentScope();
  if (parentScope != null) {
    scope=parentScope;
  }
}","/** 
 * exits from the current scripting scope
 */
public void exitScope(){
  Scriptable parentScope=scope.getParentScope();
  if (parentScope != null)   scope=parentScope;
}",0.8065573770491803
79355,"public void registerBean(String name,Object value){
  assert(this.context != null);
  Object sObj=Context.javaToJS(value,scope);
  scope.put(name,scope,sObj);
}","/** 
 * @param name the name of a property
 * @param value the value of a property
 */
public void registerBean(String name,Object value){
  assert(this.context != null);
  Object sObj=Context.javaToJS(value,scope);
  scope.put(name,scope,sObj);
}",0.7862407862407862
79356,"public Scriptable getCurrentScope(){
  return scope;
}","/** 
 * @return the current scope
 */
public Scriptable getCurrentScope(){
  return scope;
}",0.7397260273972602
79357,"public Object lookupBean(String name){
  assert(this.context != null);
  return this.scope.get(name,this.scope);
}","/** 
 * checks if a property is available in the scope
 * @param name 
 * @return
 */
public Object lookupBean(String name){
  assert(context != null);
  return scope.get(name,scope);
}",0.6622073578595318
79358,"/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  scriptContext.terminate();
}","/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  scriptContext.exit();
}",0.9531914893617022
79359,"/** 
 * Handles query creation and initialization with report-item related expressions 
 * @param item report item
 */
private void prepareVisit(ReportItemDesign item){
  tempQuery=null;
  tempQuery=createQuery(item);
  if (tempQuery != null) {
    pushQuery(tempQuery);
    pushExpressions(tempQuery.getRowExpressions());
  }
  handleReportItemExpressions(item);
}","/** 
 * Handles query creation and initialization with report-item related expressions 
 * @param item report item
 */
private void prepareVisit(ReportItemDesign item){
  tempQuery=null;
  if (item instanceof ListingDesign)   tempQuery=createQuery((ListingDesign)item);
 else   tempQuery=createQuery(item);
  if (tempQuery != null) {
    pushQuery(tempQuery);
    pushExpressions(tempQuery.getRowExpressions());
  }
  handleReportItemExpressions(item);
}",0.8913308913308914
79360,"public void visitTableItem(TableItemDesign table){
  BaseQueryDefn query=prepareVisit(table);
  for (int i=0; i < table.getColumnCount(); i++) {
    ColumnDesign column=table.getColumn(i);
    handleStyle(column.getStyle());
  }
  handleTableBand(table.getHeader());
  popExpressions();
  SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
  for (int i=0; i < table.getGroupCount(); i++) {
    handleTableGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i));
  }
  if (table.getDetail().getRowCount() != 0) {
    query.setUsesDetails(true);
  }
  pushExpressions(query.getRowExpressions());
  handleTableBand(table.getDetail());
  popExpressions();
  pushExpressions(query.getAfterExpressions());
  handleTableBand(table.getFooter());
  finishVisit(query);
}","public void visitTableItem(TableItemDesign table){
  BaseQueryDefn query=prepareVisit(table);
  for (int i=0; i < table.getColumnCount(); i++) {
    ColumnDesign column=table.getColumn(i);
    handleStyle(column.getStyle());
  }
  pushExpressions(query.getBeforeExpressions());
  handleTableBand(table.getHeader());
  popExpressions();
  SlotHandle groupsSlot=((TableHandle)table.getHandle()).getGroups();
  for (int i=0; i < table.getGroupCount(); i++) {
    handleTableGroup(table.getGroup(i),(GroupHandle)groupsSlot.get(i));
  }
  if (table.getDetail().getRowCount() != 0) {
    query.setUsesDetails(true);
  }
  pushExpressions(query.getRowExpressions());
  handleTableBand(table.getDetail());
  popExpressions();
  pushExpressions(query.getAfterExpressions());
  handleTableBand(table.getFooter());
  finishVisit(query);
}",0.550778816199377
79361,"public DataException(String errorCode,Throwable cause){
  super(cause);
  this.errorCode=errorCode;
}","public DataException(String errorCode,Throwable cause,Object argv[]){
  super(cause);
  this.errorCode=errorCode;
  this.argv=argv;
}",0.8632478632478633
79362,"/** 
 * Constructor of KeyHandler
 * @param viewer
 * @param actionRegistry
 */
public ReportViewerKeyHandler(GraphicalViewer viewer,ActionRegistry actionRegistry){
  super(viewer);
  this.actionRegistry=actionRegistry;
  put((char)3,'c',SWT.CTRL,ActionFactory.COPY.getId());
  put((char)22,'v',SWT.CTRL,ActionFactory.PASTE.getId());
  put(SWT.DEL,SWT.DEL,NO_MASK,ActionFactory.DELETE.getId());
  tableDelgate=new TableCellKeyDelegate(viewer);
}","/** 
 * Constructor of KeyHandler
 * @param viewer
 * @param actionRegistry
 */
public ReportViewerKeyHandler(GraphicalViewer viewer,ActionRegistry actionRegistry){
  super(viewer);
  this.actionRegistry=actionRegistry;
  put(SWT.DEL,SWT.DEL,NO_MASK,ActionFactory.DELETE.getId());
  tableDelgate=new TableCellKeyDelegate(viewer);
}",0.8530927835051546
79363,"protected IAction createActionHandler(ISelection model){
  Object target=null;
  if (model instanceof IStructuredSelection) {
    target=((IStructuredSelection)model).getFirstElement();
  }
  return new PasteAction(target);
}","protected IAction createActionHandler(ISelection model){
  Object target=null;
  if (model instanceof IStructuredSelection) {
    target=((IStructuredSelection)model).getFirstElement();
  }
  PasteAction action=new PasteAction(target);
  setEnabled(action.isEnabled());
  return action;
}",0.8499025341130604
79364,"/** 
 * Get GUI infromation of row.  For CSS table support auto layout, the GUI infor is different with model info.
 * @param row
 * @return
 */
public TableHandleAdapter.RowUIInfomation getRowInfo(Object row){
  if (checkDirty()) {
    reload();
  }
  return (TableHandleAdapter.RowUIInfomation)rowInfo.get(row);
}","/** 
 * Get GUI infromation of row. For CSS table support auto layout, the GUI infor is different with model info.
 * @param row
 * @return
 */
public TableHandleAdapter.RowUIInfomation getRowInfo(Object row){
  if (checkDirty()) {
    reload();
  }
  return (TableHandleAdapter.RowUIInfomation)rowInfo.get(row);
}",0.9984101748807632
79365,"/** 
 * Provides insert group function.
 * @return
 * @throws ContentException
 * @throws NameException
 */
public TableGroupHandle insertGroup() throws ContentException, NameException {
  transStar(TRANS_LABEL_INSERT_GROUP);
  RowHandle header=getTableHandle().getElementFactory().newTableRow();
  RowHandle footer=getTableHandle().getElementFactory().newTableRow();
  addCell(header);
  addCell(footer);
  TableGroupHandle groupHandle=getTableHandle().getElementFactory().newTableGroup();
  groupHandle.getSlot(TableGroup.HEADER_SLOT).add(header);
  groupHandle.getSlot(TableGroup.FOOTER_SLOT).add(footer);
  SlotHandle handle=getTableHandle().getGroups();
  handle.add(groupHandle);
  transEnd();
  return groupHandle;
}","/** 
 * Provides insert group function.
 * @return
 * @throws ContentException
 * @throws NameException
 */
public TableGroupHandle insertGroup() throws ContentException, NameException {
  if (DEUtil.getDataSetList(getTableHandle()).isEmpty()) {
    return null;
  }
  transStar(TRANS_LABEL_INSERT_GROUP);
  RowHandle header=getTableHandle().getElementFactory().newTableRow();
  RowHandle footer=getTableHandle().getElementFactory().newTableRow();
  addCell(header);
  addCell(footer);
  TableGroupHandle groupHandle=getTableHandle().getElementFactory().newTableGroup();
  groupHandle.getSlot(TableGroup.HEADER_SLOT).add(header);
  groupHandle.getSlot(TableGroup.FOOTER_SLOT).add(footer);
  SlotHandle handle=getTableHandle().getGroups();
  handle.add(groupHandle);
  transEnd();
  return groupHandle;
}",0.9475753604193972
79366,"protected void createEditPolicies(){
}","protected void createEditPolicies(){
  installEditPolicy(EditPolicy.LAYOUT_ROLE,new MasterPageEditPolicy());
}",0.5135135135135135
79367,"@Override public Object getEntity(){
  if (error != null)   Exceptions.propagate(error);
  return super.getEntity();
}","@Override public Object getEntity(){
  if (error != null) {
    throw new IllegalStateException(""String_Node_Str"",error);
  }
  return super.getEntity();
}",0.7985347985347986
79368,"private org.apache.brooklyn.util.core.internal.winrm.WinRmToolResponse exec(Function<io.cloudsoft.winrm4j.winrm.WinRmTool,io.cloudsoft.winrm4j.winrm.WinRmToolResponse> task){
  Collection<Throwable> exceptions=Lists.newArrayList();
  Stopwatch totalStopwatch=Stopwatch.createStarted();
  for (int i=0; i < execTries; i++) {
    Stopwatch stopwatch=Stopwatch.createStarted();
    Duration connectTimestamp=null;
    Duration execTimestamp=null;
    try {
      WinRmTool tool=connect();
      connectTimestamp=Duration.of(stopwatch);
      WinRmToolResponse result=task.apply(tool);
      execTimestamp=Duration.of(stopwatch);
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ Duration.of(execTimestamp).toStringRounded()+ ""String_Node_Str""+ Duration.of(connectTimestamp).toStringRounded()+ ""String_Node_Str"");
      }
      return wrap(result);
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      Duration sleep=Duration.millis(Math.min(Math.pow(2,i) * 1000,execRetryDelay.toMilliseconds()));
      Duration failTimestamp=Duration.of(stopwatch);
      String timeMsg=""String_Node_Str"" + Duration.of(totalStopwatch).toStringRounded() + ""String_Node_Str""+ Duration.of(failTimestamp).toStringRounded()+ (connectTimestamp != null ? ""String_Node_Str"" + Duration.of(connectTimestamp).toStringRounded() : ""String_Node_Str"");
      if (i == (execTries + 1)) {
        LOG.info(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ execTries+ ""String_Node_Str""+ timeMsg+ ""String_Node_Str"",e);
      }
 else       if (i == 0) {
        LOG.warn(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ sleep+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ execTries+ ""String_Node_Str""+ timeMsg+ ""String_Node_Str"",e);
        Time.sleep(sleep);
      }
 else {
        LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ sleep+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ execTries+ ""String_Node_Str""+ timeMsg+ ""String_Node_Str"",e);
        Time.sleep(sleep);
      }
      exceptions.add(e);
    }
  }
  throw Exceptions.propagate(""String_Node_Str"",exceptions);
}","private org.apache.brooklyn.util.core.internal.winrm.WinRmToolResponse exec(Function<io.cloudsoft.winrm4j.winrm.WinRmTool,io.cloudsoft.winrm4j.winrm.WinRmToolResponse> task){
  Collection<Throwable> exceptions=Lists.newArrayList();
  Stopwatch totalStopwatch=Stopwatch.createStarted();
  for (int i=0; i < execTries; i++) {
    Stopwatch stopwatch=Stopwatch.createStarted();
    Duration connectTimestamp=null;
    Duration execTimestamp=null;
    try {
      WinRmTool tool=connect();
      connectTimestamp=Duration.of(stopwatch);
      WinRmToolResponse result=task.apply(tool);
      execTimestamp=Duration.of(stopwatch);
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ Duration.of(execTimestamp).toStringRounded()+ ""String_Node_Str""+ Duration.of(connectTimestamp).toStringRounded()+ ""String_Node_Str"");
      }
      return wrap(result);
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      Duration sleep=Duration.millis(Math.min(Math.pow(2,i) * 1000,execRetryDelay.toMilliseconds()));
      Duration failTimestamp=Duration.of(stopwatch);
      String timeMsg=""String_Node_Str"" + Duration.of(totalStopwatch).toStringRounded() + ""String_Node_Str""+ Duration.of(failTimestamp).toStringRounded()+ (connectTimestamp != null ? ""String_Node_Str"" + Duration.of(connectTimestamp).toStringRounded() : ""String_Node_Str"");
      if ((i + 1) == execTries) {
        LOG.info(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ execTries+ ""String_Node_Str""+ timeMsg+ ""String_Node_Str"",e);
      }
 else       if (i == 0) {
        LOG.warn(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ sleep+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ execTries+ ""String_Node_Str""+ timeMsg+ ""String_Node_Str"",e);
        Time.sleep(sleep);
      }
 else {
        LOG.debug(""String_Node_Str"" + user + ""String_Node_Str""+ host+ ""String_Node_Str""+ port+ ""String_Node_Str""+ (logCredentials ? ""String_Node_Str"" + password : ""String_Node_Str"")+ ""String_Node_Str""+ sleep+ ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""+ execTries+ ""String_Node_Str""+ timeMsg+ ""String_Node_Str"",e);
        Time.sleep(sleep);
      }
      exceptions.add(e);
    }
  }
  throw Exceptions.propagate(""String_Node_Str"",exceptions);
}",0.9974016332590944
79369,"private synchronized void buildApiClasses(Application app){
  if (apiClasses == null) {
    apiClasses=new HashSet<>();
    if (app != null) {
      Set<Class<?>> classes=app.getClasses();
      if (classes != null) {
        addAnnotatedClasses(apiClasses,classes);
      }
      Set<Object> singletons=app.getSingletons();
      if (singletons != null) {
        for (        Object o : singletons) {
          addAnnotatedClasses(apiClasses,(MutableSet<Class<?>>)MutableSet.of(o.getClass()));
        }
      }
    }
  }
}","private synchronized void buildApiClasses(Application app){
  if (apiClasses == null) {
    apiClasses=new HashSet<>();
    if (app != null) {
      Set<Class<?>> classes=app.getClasses();
      if (classes != null) {
        final Class<?>[] template={};
        addAnnotatedClasses(apiClasses,classes.toArray(template));
      }
      Set<Object> singletons=app.getSingletons();
      if (singletons != null) {
        for (        Object o : singletons) {
          Class<?>[] types={o.getClass()};
          addAnnotatedClasses(apiClasses,types);
        }
      }
    }
  }
}",0.7638009049773755
79370,"private void addAnnotatedClasses(Set<Class<?>> output,Set<Class<?>> classes){
  for (  Class<?> clz : classes) {
    if (clz.getAnnotation(Api.class) != null) {
      output.add(clz);
    }
    addAnnotatedClasses(output,Sets.newHashSet(clz.getInterfaces()));
  }
}","private void addAnnotatedClasses(Set<Class<?>> output,Class<?>[] classes){
  for (  Class<?> clz : classes) {
    if (clz.getAnnotation(Api.class) != null) {
      output.add(clz);
    }
    addAnnotatedClasses(output,clz.getInterfaces());
  }
}",0.9529411764705882
79371,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void initEnrichers(){
  super.initEnrichers();
  propagateMasterAttribute(MySqlNode.HOSTNAME);
  propagateMasterAttribute(MySqlNode.ADDRESS);
  propagateMasterAttribute(MySqlNode.SUBNET_HOSTNAME);
  propagateMasterAttribute(MySqlNode.SUBNET_ADDRESS);
  propagateMasterAttribute(MySqlNode.MYSQL_PORT);
  propagateMasterAttribute(MySqlNode.DATASTORE_URL);
  enrichers().add(Enrichers.builder().aggregating(MySqlNode.DATASTORE_URL).publishing(SLAVE_DATASTORE_URL_LIST).computing((Function)Functions.identity()).entityFilter(Predicates.not(MySqlClusterUtils.IS_MASTER)).fromMembers().build());
  enrichers().add(Enrichers.builder().aggregating(MySqlNode.QUERIES_PER_SECOND_FROM_MYSQL).publishing(QUERIES_PER_SECOND_FROM_MYSQL_PER_NODE).fromMembers().computingAverage().defaultValueForUnreportedSensors(0d).build());
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected void initEnrichers(){
  super.initEnrichers();
  propagateMasterAttribute(MySqlNode.HOSTNAME);
  propagateMasterAttribute(MySqlNode.ADDRESS);
  propagateMasterAttribute(MySqlNode.SUBNET_HOSTNAME);
  propagateMasterAttribute(MySqlNode.SUBNET_ADDRESS);
  propagateMasterAttribute(MySqlNode.MYSQL_PORT);
  propagateMasterAttribute(MySqlNode.DATASTORE_URL);
  enrichers().add(Enrichers.builder().aggregating(MySqlNode.DATASTORE_URL).publishing(SLAVE_DATASTORE_URL_LIST).computing((Function<Collection<String>,List<String>>)(Function)Functions.identity()).entityFilter(Predicates.not(MySqlClusterUtils.IS_MASTER)).fromMembers().build());
  enrichers().add(Enrichers.builder().aggregating(MySqlNode.QUERIES_PER_SECOND_FROM_MYSQL).publishing(QUERIES_PER_SECOND_FROM_MYSQL_PER_NODE).fromMembers().computingAverage().defaultValueForUnreportedSensors(0d).build());
}",0.9764125068568296
79372,"/** 
 * Parses a string eg '5s' or '20m 22.123ms', returning the number of milliseconds it represents;  -1 on blank or never or off or false. Assumes unit is millisections if no unit is specified.
 * @throws NumberFormatException if cannot be parsed (or if null)
 */
public static double parseElapsedTimeAsDouble(final String timeStringOrig){
  String timeString=timeStringOrig;
  if (timeString == null)   throw new NumberFormatException(""String_Node_Str"");
  try {
    double d=Double.parseDouble(timeString);
    return d;
  }
 catch (  NumberFormatException e) {
    try {
      timeString=timeString.trim();
      String s=Strings.getLastWord(timeString).toLowerCase();
      timeString=timeString.substring(0,timeString.length() - s.length()).trim();
      int i=0;
      while (s.length() > i) {
        char c=s.charAt(i);
        if (c == '.' || Character.isDigit(c))         i++;
 else         break;
      }
      String num=s.substring(0,i);
      if (i == 0) {
        if (Strings.isNonBlank(timeString)) {
          num=Strings.getLastWord(timeString).toLowerCase();
          timeString=timeString.substring(0,timeString.length() - num.length()).trim();
        }
      }
 else {
        s=s.substring(i);
      }
      long multiplier=0;
      if (num.length() == 0) {
        if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str""))         return -1;
        throw new NumberFormatException(""String_Node_Str"" + s + ""String_Node_Str"");
      }
      if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=1;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=1000;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=60 * 1000;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=60 * 60 * 1000;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str""))       multiplier=24 * 60 * 60* 1000;
 else       throw new NumberFormatException(""String_Node_Str"" + s + ""String_Node_Str""+ timeStringOrig+ ""String_Node_Str"");
      double d=Double.parseDouble(num);
      double dd=0;
      if (timeString.length() > 0) {
        dd=parseElapsedTimeAsDouble(timeString);
        if (dd == -1) {
          throw new NumberFormatException(""String_Node_Str"" + timeString + ""String_Node_Str""+ num+ ""String_Node_Str""+ s+ ""String_Node_Str"");
        }
      }
      return d * multiplier + dd;
    }
 catch (    Exception ex) {
      if (ex instanceof NumberFormatException)       throw ex;
      log.trace(""String_Node_Str"",ex);
      throw new NumberFormatException(""String_Node_Str"" + timeStringOrig + ""String_Node_Str"");
    }
  }
}","/** 
 * Parses a string eg '5s' or '20m 22.123ms', returning the number of milliseconds it represents;  -1 on blank or never or off or false. Assumes unit is millisections if no unit is specified.
 * @throws NumberFormatException if cannot be parsed (or if null)
 */
public static double parseElapsedTimeAsDouble(final String timeStringOrig){
  String timeString=timeStringOrig;
  if (timeString == null)   throw new NumberFormatException(""String_Node_Str"");
  try {
    double d=Double.parseDouble(timeString);
    return d;
  }
 catch (  NumberFormatException e) {
    try {
      timeString=timeString.trim();
      String s=Strings.getLastWord(timeString).toLowerCase();
      timeString=timeString.substring(0,timeString.length() - s.length()).trim();
      int i=0;
      while (s.length() > i) {
        char c=s.charAt(i);
        if (c == '.' || Character.isDigit(c))         i++;
 else         break;
      }
      String num=s.substring(0,i);
      if (i == 0) {
        if (Strings.isNonBlank(timeString)) {
          num=Strings.getLastWord(timeString).toLowerCase();
          timeString=timeString.substring(0,timeString.length() - num.length()).trim();
        }
      }
 else {
        s=s.substring(i);
      }
      long multiplier=0;
      if (num.length() == 0) {
        if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str""))         return -1;
        throw new NumberFormatException(""String_Node_Str"" + s + ""String_Node_Str"");
      }
      if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=1;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=1000;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=60 * 1000;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str"")|| s.equalsIgnoreCase(""String_Node_Str""))       multiplier=60 * 60 * 1000;
 else       if (s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str"") || s.equalsIgnoreCase(""String_Node_Str""))       multiplier=24 * 60 * 60* 1000;
 else       throw new NumberFormatException(""String_Node_Str"" + s + ""String_Node_Str""+ timeStringOrig+ ""String_Node_Str"");
      double d=Double.parseDouble(num);
      double dd=0;
      if (timeString.length() > 0) {
        dd=parseElapsedTimeAsDouble(timeString);
        if (dd == -1) {
          throw new NumberFormatException(""String_Node_Str"" + timeString + ""String_Node_Str""+ num+ ""String_Node_Str""+ s+ ""String_Node_Str"");
        }
      }
      return d * multiplier + dd;
    }
 catch (    Exception ex) {
      if (ex instanceof NumberFormatException)       throw (NumberFormatException)ex;
      log.trace(""String_Node_Str"",ex);
      throw new NumberFormatException(""String_Node_Str"" + timeStringOrig + ""String_Node_Str"");
    }
  }
}",0.9797849462365592
79373,"/** 
 * @return the ports required for a specific child entity 
 */
protected Collection<Integer> getRequiredOpenPorts(Entity entity){
  Set<Integer> ports=MutableSet.of(22);
  for (  ConfigKey<?> k : entity.getEntityType().getConfigKeys()) {
    if (PortRange.class.isAssignableFrom(k.getType())) {
      PortRange p=(PortRange)entity.getConfig(k);
      if (p != null && !p.isEmpty())       ports.add(p.iterator().next());
    }
  }
  LOG.debug(""String_Node_Str"",ports,entity);
  for (  Entity child : entity.getChildren()) {
    ports.addAll(getRequiredOpenPorts(child));
  }
  return ports;
}","/** 
 * @return the ports required for a specific child entity 
 */
protected Collection<Integer> getRequiredOpenPorts(Entity entity){
  Set<Integer> ports=MutableSet.of(22);
  for (  ConfigKey<?> k : entity.getEntityType().getConfigKeys()) {
    Object value;
    if (PortRange.class.isAssignableFrom(k.getType()) || k.getName().matches(""String_Node_Str"")) {
      value=entity.config().get(k);
    }
 else {
      Maybe<Object> maybeValue=((AbstractEntity.BasicConfigurationSupport)entity.config()).getRaw(k);
      value=maybeValue.isPresent() ? maybeValue.get() : null;
    }
    Maybe<PortRange> maybePortRange=TypeCoercions.tryCoerce(value,new TypeToken<PortRange>(){
    }
);
    if (maybePortRange.isPresentAndNonNull()) {
      PortRange p=maybePortRange.get();
      if (p != null && !p.isEmpty())       ports.add(p.iterator().next());
    }
  }
  LOG.debug(""String_Node_Str"",ports,entity);
  for (  Entity child : entity.getChildren()) {
    ports.addAll(getRequiredOpenPorts(child));
  }
  return ports;
}",0.7117172969621822
79374,"/** 
 * returns the ports that this entity wants to use; default implementation returns   {@link SoftwareProcess#REQUIRED_OPEN_LOGIN_PORTS} plus first value for each  {@link PortAttributeSensorAndConfigKey} config key {@link PortRange}plus any ports defined with a config keys ending in   {@code .port}.
 */
protected Collection<Integer> getRequiredOpenPorts(){
  Set<Integer> ports=MutableSet.copyOf(getConfig(REQUIRED_OPEN_LOGIN_PORTS));
  Map<ConfigKey<?>,?> allConfig=config().getBag().getAllConfigAsConfigKeyMap();
  Set<ConfigKey<?>> configKeys=Sets.newHashSet(allConfig.keySet());
  configKeys.addAll(getEntityType().getConfigKeys());
  for (  ConfigKey<?> k : configKeys) {
    if (PortRange.class.isAssignableFrom(k.getType())) {
      PortRange p=(PortRange)getConfig(k);
      if (p != null && !p.isEmpty())       ports.add(p.iterator().next());
    }
 else     if (k.getName().matches(""String_Node_Str"")) {
      Object value=getConfig(k);
      if (value instanceof Integer) {
        ports.add((Integer)value);
      }
    }
  }
  log.debug(""String_Node_Str"",ports,this);
  return ports;
}","/** 
 * returns the ports that this entity wants to use; default implementation returns   {@link SoftwareProcess#REQUIRED_OPEN_LOGIN_PORTS} plus first value for each  {@link PortAttributeSensorAndConfigKey} config key {@link PortRange}plus any ports defined with a config keys ending in   {@code .port}.
 */
protected Collection<Integer> getRequiredOpenPorts(){
  Set<Integer> ports=MutableSet.copyOf(getConfig(REQUIRED_OPEN_LOGIN_PORTS));
  Map<ConfigKey<?>,?> allConfig=config().getBag().getAllConfigAsConfigKeyMap();
  Set<ConfigKey<?>> configKeys=Sets.newHashSet(allConfig.keySet());
  configKeys.addAll(getEntityType().getConfigKeys());
  for (  ConfigKey<?> k : configKeys) {
    Object value;
    if (PortRange.class.isAssignableFrom(k.getType()) || k.getName().matches(""String_Node_Str"")) {
      value=config().get(k);
    }
 else {
      Maybe<Object> maybeValue=config().getRaw(k);
      value=maybeValue.isPresent() ? maybeValue.get() : null;
    }
    Maybe<PortRange> maybePortRange=TypeCoercions.tryCoerce(value,new TypeToken<PortRange>(){
    }
);
    if (maybePortRange.isPresentAndNonNull()) {
      PortRange p=maybePortRange.get();
      if (p != null && !p.isEmpty())       ports.add(p.iterator().next());
    }
  }
  log.debug(""String_Node_Str"",ports,this);
  return ports;
}",0.7108333333333333
79375,"@Override public ComputeService findComputeService(ConfigBag conf,boolean allowReuse){
  String provider=checkNotNull(conf.get(CLOUD_PROVIDER),""String_Node_Str"");
  String identity=checkNotNull(conf.get(ACCESS_IDENTITY),""String_Node_Str"");
  String credential=checkNotNull(conf.get(ACCESS_CREDENTIAL),""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(Constants.PROPERTY_TRUST_ALL_CERTS,Boolean.toString(true));
  properties.setProperty(Constants.PROPERTY_RELAX_HOSTNAME,Boolean.toString(true));
  properties.setProperty(""String_Node_Str"",conf.getStringKey(""String_Node_Str"") != null ? conf.getStringKey(""String_Node_Str"").toString() : ""String_Node_Str"");
  if (""String_Node_Str"".equals(provider)) {
    if (groovyTruth(conf.get(IMAGE_ID))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
      properties.setProperty(PROPERTY_EC2_CC_AMI_QUERY,""String_Node_Str"");
    }
 else     if (groovyTruth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"" + conf.getStringKey(""String_Node_Str"") + ""String_Node_Str"");
    }
 else     if (groovyTruth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
    }
  }
  Map<String,Object> extra=Maps.filterKeys(conf.getAllConfig(),Predicates.containsPattern(""String_Node_Str""));
  if (extra.size() > 0) {
    LOG.warn(""String_Node_Str"" + Sanitizer.sanitize(extra));
  }
  properties.putAll(extra);
  String endpoint=conf.get(CLOUD_ENDPOINT);
  if (!groovyTruth(endpoint))   endpoint=getDeprecatedProperty(conf,Constants.PROPERTY_ENDPOINT);
  if (groovyTruth(endpoint))   properties.setProperty(Constants.PROPERTY_ENDPOINT,endpoint);
  Map<?,?> cacheKey=MutableMap.builder().putAll(properties).put(""String_Node_Str"",provider).put(""String_Node_Str"",identity).put(""String_Node_Str"",credential).putIfNotNull(""String_Node_Str"",endpoint).build().asUnmodifiable();
  if (allowReuse) {
    ComputeService result=cachedComputeServices.get(cacheKey);
    if (result != null) {
      LOG.trace(""String_Node_Str"" + Sanitizer.sanitize(properties));
      return result;
    }
    LOG.debug(""String_Node_Str"" + Sanitizer.sanitize(properties));
  }
  Iterable<Module> modules=getCommonModules();
  ComputeServiceContext computeServiceContext;
synchronized (createComputeServicesMutex) {
    computeServiceContext=ContextBuilder.newBuilder(provider).modules(modules).credentials(identity,credential).overrides(properties).build(ComputeServiceContext.class);
  }
  final ComputeService computeService=computeServiceContext.getComputeService();
  if (allowReuse) {
synchronized (cachedComputeServices) {
      ComputeService result=cachedComputeServices.get(cacheKey);
      if (result != null) {
        LOG.debug(""String_Node_Str"" + Sanitizer.sanitize(cacheKey));
        computeService.getContext().close();
        return result;
      }
      LOG.debug(""String_Node_Str"" + computeService + ""String_Node_Str""+ Sanitizer.sanitize(properties));
      cachedComputeServices.put(cacheKey,computeService);
    }
  }
  return computeService;
}","@Override public ComputeService findComputeService(ConfigBag conf,boolean allowReuse){
  String provider=checkNotNull(conf.get(CLOUD_PROVIDER),""String_Node_Str"");
  String identity=checkNotNull(conf.get(ACCESS_IDENTITY),""String_Node_Str"");
  String credential=checkNotNull(conf.get(ACCESS_CREDENTIAL),""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(Constants.PROPERTY_TRUST_ALL_CERTS,Boolean.toString(true));
  properties.setProperty(Constants.PROPERTY_RELAX_HOSTNAME,Boolean.toString(true));
  properties.setProperty(""String_Node_Str"",conf.getStringKey(""String_Node_Str"") != null ? conf.getStringKey(""String_Node_Str"").toString() : ""String_Node_Str"");
  if (""String_Node_Str"".equals(provider)) {
    if (groovyTruth(conf.get(IMAGE_ID))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
      properties.setProperty(PROPERTY_EC2_CC_AMI_QUERY,""String_Node_Str"");
    }
 else     if (groovyTruth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"" + conf.getStringKey(""String_Node_Str"") + ""String_Node_Str"");
    }
 else     if (groovyTruth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
    }
    properties.setProperty(EC2Constants.PROPERTY_EC2_TIMEOUT_SECURITYGROUP_PRESENT,""String_Node_Str"" + Duration.seconds(30).toMilliseconds());
  }
  Map<String,Object> extra=Maps.filterKeys(conf.getAllConfig(),Predicates.containsPattern(""String_Node_Str""));
  if (extra.size() > 0) {
    LOG.warn(""String_Node_Str"" + Sanitizer.sanitize(extra));
  }
  properties.putAll(extra);
  String endpoint=conf.get(CLOUD_ENDPOINT);
  if (!groovyTruth(endpoint))   endpoint=getDeprecatedProperty(conf,Constants.PROPERTY_ENDPOINT);
  if (groovyTruth(endpoint))   properties.setProperty(Constants.PROPERTY_ENDPOINT,endpoint);
  Map<?,?> cacheKey=MutableMap.builder().putAll(properties).put(""String_Node_Str"",provider).put(""String_Node_Str"",identity).put(""String_Node_Str"",credential).putIfNotNull(""String_Node_Str"",endpoint).build().asUnmodifiable();
  if (allowReuse) {
    ComputeService result=cachedComputeServices.get(cacheKey);
    if (result != null) {
      LOG.trace(""String_Node_Str"" + Sanitizer.sanitize(properties));
      return result;
    }
    LOG.debug(""String_Node_Str"" + Sanitizer.sanitize(properties));
  }
  Iterable<Module> modules=getCommonModules();
  ComputeServiceContext computeServiceContext;
synchronized (createComputeServicesMutex) {
    computeServiceContext=ContextBuilder.newBuilder(provider).modules(modules).credentials(identity,credential).overrides(properties).build(ComputeServiceContext.class);
  }
  final ComputeService computeService=computeServiceContext.getComputeService();
  if (allowReuse) {
synchronized (cachedComputeServices) {
      ComputeService result=cachedComputeServices.get(cacheKey);
      if (result != null) {
        LOG.debug(""String_Node_Str"" + Sanitizer.sanitize(cacheKey));
        computeService.getContext().close();
        return result;
      }
      LOG.debug(""String_Node_Str"" + computeService + ""String_Node_Str""+ Sanitizer.sanitize(properties));
      cachedComputeServices.put(cacheKey,computeService);
    }
  }
  return computeService;
}",0.9777362603144948
79376,"protected MachineLocation obtainOnce(ConfigBag setup) throws NoMachinesAvailableException {
  AccessController.Response access=getManagementContext().getAccessController().canProvisionLocation(this);
  if (!access.isAllowed()) {
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ access.getMsg());
  }
  setCreationString(setup);
  boolean waitForSshable=!""String_Node_Str"".equalsIgnoreCase(setup.get(WAIT_FOR_SSHABLE));
  boolean waitForWinRmable=!""String_Node_Str"".equalsIgnoreCase(setup.get(WAIT_FOR_WINRM_AVAILABLE));
  boolean usePortForwarding=setup.get(USE_PORT_FORWARDING);
  boolean skipJcloudsSshing=Boolean.FALSE.equals(setup.get(USE_JCLOUDS_SSH_INIT)) || usePortForwarding;
  JcloudsPortForwarderExtension portForwarder=setup.get(PORT_FORWARDER);
  if (usePortForwarding)   checkNotNull(portForwarder,""String_Node_Str"");
  final ComputeService computeService=getConfig(COMPUTE_SERVICE_REGISTRY).findComputeService(setup,true);
  CloudMachineNamer cloudMachineNamer=getCloudMachineNamer(setup);
  String groupId=elvis(setup.get(GROUP_ID),cloudMachineNamer.generateNewGroupId(setup));
  NodeMetadata node=null;
  JcloudsMachineLocation machineLocation=null;
  try {
    LOG.info(""String_Node_Str"" + setup.getDescription() + ""String_Node_Str""+ this);
    Semaphore machineCreationSemaphore=getMachineCreationSemaphore();
    boolean acquired=machineCreationSemaphore.tryAcquire(0,TimeUnit.SECONDS);
    if (!acquired) {
      LOG.info(""String_Node_Str"",new Object[]{this,machineCreationSemaphore.getQueueLength()});
      Stopwatch blockStopwatch=Stopwatch.createStarted();
      machineCreationSemaphore.acquire();
      LOG.info(""String_Node_Str"",this,Time.makeTimeStringRounded(blockStopwatch));
    }
 else {
      LOG.debug(""String_Node_Str"",this);
    }
    Stopwatch provisioningStopwatch=Stopwatch.createStarted();
    Duration templateTimestamp, provisionTimestamp, usableTimestamp, customizedTimestamp;
    LoginCredentials userCredentials=null;
    Set<? extends NodeMetadata> nodes;
    Template template;
    try {
      template=buildTemplate(computeService,setup);
      boolean expectWindows=isWindows(template,setup);
      if (!skipJcloudsSshing) {
        if (expectWindows) {
          LOG.warn(""String_Node_Str"" + template.getImage() + ""String_Node_Str""+ USE_JCLOUDS_SSH_INIT.getName()+ ""String_Node_Str"");
          skipJcloudsSshing=true;
        }
 else         if (waitForSshable) {
          userCredentials=initTemplateForCreateUser(template,setup);
        }
      }
      templateTimestamp=Duration.of(provisioningStopwatch);
      template.getOptions().getUserMetadata().put(""String_Node_Str"",cloudMachineNamer.generateNewMachineUniqueNameFromGroupId(setup,groupId));
      if (setup.get(JcloudsLocationConfig.INCLUDE_BROOKLYN_USER_METADATA)) {
        template.getOptions().getUserMetadata().put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
        Object context=setup.get(CALLER_CONTEXT);
        if (context instanceof Entity) {
          Entity entity=(Entity)context;
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getApplicationId());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getApplication().getDisplayName());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getId());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getDisplayName());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",Time.makeDateSimpleStampString());
        }
      }
      customizeTemplate(setup,computeService,template);
      LOG.debug(""String_Node_Str"",new Object[]{template,template.getOptions(),setup.getDescription()});
      if (!setup.getUnusedConfig().isEmpty())       LOG.debug(""String_Node_Str"" + setup.getDescription() + ""String_Node_Str""+ setup.getUnusedConfig());
      nodes=computeService.createNodesInGroup(groupId,1,template);
      provisionTimestamp=Duration.of(provisioningStopwatch);
    }
  finally {
      machineCreationSemaphore.release();
    }
    node=Iterables.getOnlyElement(nodes,null);
    LOG.debug(""String_Node_Str"",node,setup.getDescription());
    if (node == null)     throw new IllegalStateException(""String_Node_Str"" + setup.getDescription());
    boolean windows=isWindows(node,setup);
    if (windows) {
      int newLoginPort=node.getLoginPort() == 22 ? 5985 : node.getLoginPort();
      String newLoginUser=""String_Node_Str"".equals(node.getCredentials().getUser()) ? ""String_Node_Str"" : node.getCredentials().getUser();
      LOG.debug(""String_Node_Str"",new Object[]{node,node.getLoginPort(),newLoginPort,node.getCredentials().getUser(),newLoginUser});
      node=NodeMetadataBuilder.fromNodeMetadata(node).loginPort(newLoginPort).credentials(LoginCredentials.builder(node.getCredentials()).user(newLoginUser).build()).build();
    }
    Optional<HostAndPort> sshHostAndPortOverride;
    if (usePortForwarding) {
      sshHostAndPortOverride=Optional.of(portForwarder.openPortForwarding(node,node.getLoginPort(),Optional.<Integer>absent(),Protocol.TCP,Cidr.UNIVERSAL));
    }
 else {
      sshHostAndPortOverride=Optional.absent();
    }
    if (skipJcloudsSshing) {
      boolean waitForConnectable=(windows) ? waitForWinRmable : waitForSshable;
      if (waitForConnectable) {
        if (windows) {
          waitForWinRmAvailable(computeService,node,sshHostAndPortOverride,node.getCredentials(),setup);
        }
 else {
          waitForSshable(computeService,node,sshHostAndPortOverride,node.getCredentials(),setup);
        }
        userCredentials=createUser(computeService,node,sshHostAndPortOverride,setup);
      }
    }
    LoginCredentials customCredentials=setup.get(CUSTOM_CREDENTIALS);
    if (customCredentials != null) {
      userCredentials=customCredentials;
      Object oldUsername=setup.put(USER,customCredentials.getUser());
      LOG.debug(""String_Node_Str"",new Object[]{node,customCredentials.getUser(),oldUsername});
      if (customCredentials.getOptionalPassword().isPresent())       setup.put(PASSWORD,customCredentials.getOptionalPassword().get());
      if (customCredentials.getOptionalPrivateKey().isPresent())       setup.put(PRIVATE_KEY_DATA,customCredentials.getOptionalPrivateKey().get());
    }
    if (userCredentials == null) {
      userCredentials=extractVmCredentials(setup,node);
    }
    if (userCredentials != null) {
      node=NodeMetadataBuilder.fromNodeMetadata(node).credentials(userCredentials).build();
    }
 else {
      userCredentials=LoginCredentials.fromCredentials(node.getCredentials());
    }
    setup.putIfNotNull(JcloudsLocationConfig.PASSWORD,userCredentials.getOptionalPassword().orNull());
    setup.putIfNotNull(JcloudsLocationConfig.PRIVATE_KEY_DATA,userCredentials.getOptionalPrivateKey().orNull());
    if (waitForSshable && !windows) {
      waitForSshable(computeService,node,sshHostAndPortOverride,userCredentials,setup);
    }
 else {
      LOG.debug(""String_Node_Str"",node,setup.getDescription());
    }
    usableTimestamp=Duration.of(provisioningStopwatch);
    if (windows) {
      machineLocation=registerWinRmMachineLocation(computeService,node,userCredentials,sshHostAndPortOverride,setup);
    }
 else {
      machineLocation=registerJcloudsSshMachineLocation(computeService,node,userCredentials,sshHostAndPortOverride,setup);
      if (template != null && machineLocation.getTemplate() == null) {
        ((JcloudsSshMachineLocation)machineLocation).template=template;
      }
    }
    if (usePortForwarding && sshHostAndPortOverride.isPresent()) {
      PortForwardManager portForwardManager=setup.get(PORT_FORWARDING_MANAGER);
      if (portForwardManager != null) {
        portForwardManager.associate(node.getId(),sshHostAndPortOverride.get(),machineLocation,node.getLoginPort());
      }
 else {
        LOG.warn(""String_Node_Str"",new Object[]{this,node.getLoginPort(),sshHostAndPortOverride,machineLocation});
      }
    }
    if (""String_Node_Str"".equals(this.getProvider())) {
      if (windows) {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      Map<Integer,Integer> portMappings=JcloudsUtil.dockerPortMappingsFor(this,node.getId());
      PortForwardManager portForwardManager=setup.get(PORT_FORWARDING_MANAGER);
      if (portForwardManager != null) {
        for (        Integer containerPort : portMappings.keySet()) {
          Integer hostPort=portMappings.get(containerPort);
          String dockerHost=((JcloudsSshMachineLocation)machineLocation).getSshHostAndPort().getHostText();
          portForwardManager.associate(node.getId(),HostAndPort.fromParts(dockerHost,hostPort),machineLocation,containerPort);
        }
      }
 else {
        LOG.warn(""String_Node_Str"",this,machineLocation);
      }
    }
    List<String> customisationForLogging=new ArrayList<String>();
    if (waitForSshable) {
      String setupScript=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);
      List<String> setupScripts=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL_LIST);
      Collection<String> allScripts=new MutableList<String>().appendIfNotNull(setupScript).appendAll(setupScripts);
      for (      String setupScriptItem : allScripts) {
        if (Strings.isNonBlank(setupScriptItem)) {
          customisationForLogging.add(""String_Node_Str"" + setupScriptItem);
          String setupVarsString=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);
          Map<String,String> substitutions=(setupVarsString != null) ? Splitter.on(""String_Node_Str"").withKeyValueSeparator(""String_Node_Str"").split(setupVarsString) : ImmutableMap.<String,String>of();
          String scriptContent=ResourceUtils.create(this).getResourceAsString(setupScriptItem);
          String script=TemplateProcessor.processTemplateContents(scriptContent,getManagementContext(),substitutions);
          if (windows) {
            ((WinRmMachineLocation)machineLocation).executeScript(ImmutableList.copyOf((script.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str""))));
          }
 else {
            ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"" + this,ImmutableList.of(script));
          }
        }
      }
      if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          customisationForLogging.add(""String_Node_Str"");
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
        }
      }
      if (setup.get(GENERATE_HOSTNAME)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          customisationForLogging.add(""String_Node_Str"");
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"" + node.getName(),Arrays.asList(""String_Node_Str"" + node.getName(),""String_Node_Str"" + node.getName() + ""String_Node_Str"",""String_Node_Str""));
        }
      }
      if (setup.get(OPEN_IPTABLES)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          @SuppressWarnings(""String_Node_Str"") Iterable<Integer> inboundPorts=(Iterable<Integer>)setup.get(INBOUND_PORTS);
          if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {
            LOG.info(""String_Node_Str"",machineLocation,this);
          }
 else {
            customisationForLogging.add(""String_Node_Str"");
            List<String> iptablesRules=Lists.newArrayList();
            if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
              for (              Integer port : inboundPorts) {
                iptablesRules.add(IptablesCommands.addFirewalldRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
              }
            }
 else {
              iptablesRules=createIptablesRulesForNetworkInterface(inboundPorts);
              iptablesRules.add(IptablesCommands.saveIptablesRules());
            }
            List<String> batch=Lists.newArrayList();
            for (            String rule : iptablesRules) {
              batch.add(rule);
              if (batch.size() == 50) {
                ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",batch);
                batch.clear();
              }
            }
            if (batch.size() > 0) {
              ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",batch);
            }
            ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",ImmutableList.of(IptablesCommands.listIptablesRule()));
          }
        }
      }
      if (setup.get(STOP_IPTABLES)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          customisationForLogging.add(""String_Node_Str"");
          List<String> cmds=ImmutableList.<String>of();
          if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
            cmds=ImmutableList.of(IptablesCommands.firewalldServiceStop(),IptablesCommands.firewalldServiceStatus());
          }
 else {
            cmds=ImmutableList.of(IptablesCommands.iptablesServiceStop(),IptablesCommands.iptablesServiceStatus());
          }
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",cmds);
        }
      }
      List<String> extraKeyUrlsToAuth=setup.get(EXTRA_PUBLIC_KEY_URLS_TO_AUTH);
      if (extraKeyUrlsToAuth != null && !extraKeyUrlsToAuth.isEmpty()) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          List<String> extraKeyDataToAuth=MutableList.of();
          for (          String keyUrl : extraKeyUrlsToAuth) {
            extraKeyDataToAuth.add(ResourceUtils.create().getResourceAsString(keyUrl));
          }
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",ImmutableList.of(new AuthorizeRSAPublicKeys(extraKeyDataToAuth).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
        }
      }
    }
 else {
    }
    for (    JcloudsLocationCustomizer customizer : getCustomizers(setup)) {
      customizer.customize(this,computeService,machineLocation);
    }
    customizedTimestamp=Duration.of(provisioningStopwatch);
    try {
      String logMessage=""String_Node_Str"" + setup.getDescription() + ""String_Node_Str""+ ""String_Node_Str""+ machineLocation.getUser()+ ""String_Node_Str""+ machineLocation.getAddress()+ ""String_Node_Str""+ machineLocation.getPort()+ (Boolean.TRUE.equals(setup.get(LOG_CREDENTIALS)) ? ""String_Node_Str"" + userCredentials.getOptionalPassword().or(""String_Node_Str"") + ""String_Node_Str""+ userCredentials.getOptionalPrivateKey().or(""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ Duration.of(provisioningStopwatch).toStringRounded()+ ""String_Node_Str""+ template+ ""String_Node_Str""+ Duration.of(templateTimestamp).toStringRounded()+ ""String_Node_Str""+ ""String_Node_Str""+ node+ ""String_Node_Str""+ Duration.of(provisionTimestamp).subtract(templateTimestamp).toStringRounded()+ ""String_Node_Str""+ ""String_Node_Str""+ machineLocation+ ""String_Node_Str""+ Duration.of(usableTimestamp).subtract(provisionTimestamp).toStringRounded()+ ""String_Node_Str""+ ""String_Node_Str""+ Duration.of(customizedTimestamp).subtract(usableTimestamp).toStringRounded()+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(customisationForLogging)+ ""String_Node_Str"";
      LOG.info(logMessage);
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      LOG.warn(""String_Node_Str"" + machineLocation + ""String_Node_Str""+ this,e);
    }
    return machineLocation;
  }
 catch (  Exception e) {
    if (e instanceof RunNodesException && ((RunNodesException)e).getNodeErrors().size() > 0) {
      node=Iterables.get(((RunNodesException)e).getNodeErrors().keySet(),0);
    }
    boolean destroyNode=(node != null) && Boolean.TRUE.equals(setup.get(DESTROY_ON_FAILURE));
    LOG.error(""String_Node_Str"",new Object[]{setup.getDescription(),(destroyNode ? ""String_Node_Str"" + node + ""String_Node_Str"" : ""String_Node_Str""),e.getMessage()});
    LOG.debug(Throwables.getStackTraceAsString(e));
    if (destroyNode) {
      if (machineLocation != null) {
        releaseSafely(machineLocation);
      }
 else {
        releaseNodeSafely(node);
      }
    }
    throw Exceptions.propagate(e);
  }
}","protected MachineLocation obtainOnce(ConfigBag setup) throws NoMachinesAvailableException {
  AccessController.Response access=getManagementContext().getAccessController().canProvisionLocation(this);
  if (!access.isAllowed()) {
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ access.getMsg());
  }
  setCreationString(setup);
  boolean waitForSshable=!""String_Node_Str"".equalsIgnoreCase(setup.get(WAIT_FOR_SSHABLE));
  boolean waitForWinRmable=!""String_Node_Str"".equalsIgnoreCase(setup.get(WAIT_FOR_WINRM_AVAILABLE));
  boolean usePortForwarding=setup.get(USE_PORT_FORWARDING);
  boolean skipJcloudsSshing=Boolean.FALSE.equals(setup.get(USE_JCLOUDS_SSH_INIT)) || usePortForwarding;
  JcloudsPortForwarderExtension portForwarder=setup.get(PORT_FORWARDER);
  if (usePortForwarding)   checkNotNull(portForwarder,""String_Node_Str"");
  final ComputeService computeService=getConfig(COMPUTE_SERVICE_REGISTRY).findComputeService(setup,true);
  CloudMachineNamer cloudMachineNamer=getCloudMachineNamer(setup);
  String groupId=elvis(setup.get(GROUP_ID),cloudMachineNamer.generateNewGroupId(setup));
  NodeMetadata node=null;
  JcloudsMachineLocation machineLocation=null;
  try {
    LOG.info(""String_Node_Str"" + setup.getDescription() + ""String_Node_Str""+ this);
    Semaphore machineCreationSemaphore=getMachineCreationSemaphore();
    boolean acquired=machineCreationSemaphore.tryAcquire(0,TimeUnit.SECONDS);
    if (!acquired) {
      LOG.info(""String_Node_Str"",new Object[]{this,machineCreationSemaphore.getQueueLength()});
      Stopwatch blockStopwatch=Stopwatch.createStarted();
      machineCreationSemaphore.acquire();
      LOG.info(""String_Node_Str"",this,Time.makeTimeStringRounded(blockStopwatch));
    }
 else {
      LOG.debug(""String_Node_Str"",this);
    }
    Stopwatch provisioningStopwatch=Stopwatch.createStarted();
    Duration templateTimestamp, provisionTimestamp, usableTimestamp, customizedTimestamp;
    LoginCredentials userCredentials=null;
    Set<? extends NodeMetadata> nodes;
    Template template;
    try {
      template=buildTemplate(computeService,setup);
      boolean expectWindows=isWindows(template,setup);
      if (!skipJcloudsSshing) {
        if (expectWindows) {
          LOG.warn(""String_Node_Str"" + template.getImage() + ""String_Node_Str""+ USE_JCLOUDS_SSH_INIT.getName()+ ""String_Node_Str"");
          skipJcloudsSshing=true;
        }
 else         if (waitForSshable) {
          userCredentials=initTemplateForCreateUser(template,setup);
        }
      }
      templateTimestamp=Duration.of(provisioningStopwatch);
      template.getOptions().getUserMetadata().put(""String_Node_Str"",cloudMachineNamer.generateNewMachineUniqueNameFromGroupId(setup,groupId));
      if (setup.get(JcloudsLocationConfig.INCLUDE_BROOKLYN_USER_METADATA)) {
        template.getOptions().getUserMetadata().put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
        Object context=setup.get(CALLER_CONTEXT);
        if (context instanceof Entity) {
          Entity entity=(Entity)context;
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getApplicationId());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getApplication().getDisplayName());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getId());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",entity.getDisplayName());
          template.getOptions().getUserMetadata().put(""String_Node_Str"",Time.makeDateSimpleStampString());
        }
      }
      customizeTemplate(setup,computeService,template);
      LOG.debug(""String_Node_Str"",new Object[]{template,template.getOptions(),setup.getDescription()});
      if (!setup.getUnusedConfig().isEmpty())       LOG.debug(""String_Node_Str"" + setup.getDescription() + ""String_Node_Str""+ setup.getUnusedConfig());
      nodes=computeService.createNodesInGroup(groupId,1,template);
      provisionTimestamp=Duration.of(provisioningStopwatch);
    }
  finally {
      machineCreationSemaphore.release();
    }
    node=Iterables.getOnlyElement(nodes,null);
    LOG.debug(""String_Node_Str"",node,setup.getDescription());
    if (node == null)     throw new IllegalStateException(""String_Node_Str"" + setup.getDescription());
    boolean windows=isWindows(node,setup);
    if (windows) {
      int newLoginPort=node.getLoginPort() == 22 ? 5985 : node.getLoginPort();
      String newLoginUser=""String_Node_Str"".equals(node.getCredentials().getUser()) ? ""String_Node_Str"" : node.getCredentials().getUser();
      LOG.debug(""String_Node_Str"",new Object[]{node,node.getLoginPort(),newLoginPort,node.getCredentials().getUser(),newLoginUser});
      node=NodeMetadataBuilder.fromNodeMetadata(node).loginPort(newLoginPort).credentials(LoginCredentials.builder(node.getCredentials()).user(newLoginUser).build()).build();
    }
    Optional<HostAndPort> sshHostAndPortOverride;
    if (usePortForwarding) {
      sshHostAndPortOverride=Optional.of(portForwarder.openPortForwarding(node,node.getLoginPort(),Optional.<Integer>absent(),Protocol.TCP,Cidr.UNIVERSAL));
    }
 else {
      sshHostAndPortOverride=Optional.absent();
    }
    if (skipJcloudsSshing) {
      boolean waitForConnectable=(windows) ? waitForWinRmable : waitForSshable;
      if (waitForConnectable) {
        if (windows) {
          waitForWinRmAvailable(computeService,node,sshHostAndPortOverride,node.getCredentials(),setup);
        }
 else {
          waitForSshable(computeService,node,sshHostAndPortOverride,node.getCredentials(),setup);
        }
        userCredentials=createUser(computeService,node,sshHostAndPortOverride,setup);
      }
    }
    LoginCredentials customCredentials=setup.get(CUSTOM_CREDENTIALS);
    if (customCredentials != null) {
      userCredentials=customCredentials;
      Object oldUsername=setup.put(USER,customCredentials.getUser());
      LOG.debug(""String_Node_Str"",new Object[]{node,customCredentials.getUser(),oldUsername});
      if (customCredentials.getOptionalPassword().isPresent())       setup.put(PASSWORD,customCredentials.getOptionalPassword().get());
      if (customCredentials.getOptionalPrivateKey().isPresent())       setup.put(PRIVATE_KEY_DATA,customCredentials.getOptionalPrivateKey().get());
    }
    if (userCredentials == null) {
      userCredentials=extractVmCredentials(setup,node);
    }
    if (userCredentials != null) {
      node=NodeMetadataBuilder.fromNodeMetadata(node).credentials(userCredentials).build();
    }
 else {
      userCredentials=LoginCredentials.fromCredentials(node.getCredentials());
    }
    setup.putIfNotNull(JcloudsLocationConfig.PASSWORD,userCredentials.getOptionalPassword().orNull());
    setup.putIfNotNull(JcloudsLocationConfig.PRIVATE_KEY_DATA,userCredentials.getOptionalPrivateKey().orNull());
    if (waitForSshable && !windows) {
      waitForSshable(computeService,node,sshHostAndPortOverride,userCredentials,setup);
    }
 else {
      LOG.debug(""String_Node_Str"",node,setup.getDescription());
    }
    usableTimestamp=Duration.of(provisioningStopwatch);
    if (windows) {
      machineLocation=registerWinRmMachineLocation(computeService,node,userCredentials,sshHostAndPortOverride,setup);
    }
 else {
      machineLocation=registerJcloudsSshMachineLocation(computeService,node,userCredentials,sshHostAndPortOverride,setup);
      if (template != null && machineLocation.getTemplate() == null) {
        ((JcloudsSshMachineLocation)machineLocation).template=template;
      }
    }
    if (usePortForwarding && sshHostAndPortOverride.isPresent()) {
      PortForwardManager portForwardManager=setup.get(PORT_FORWARDING_MANAGER);
      if (portForwardManager != null) {
        portForwardManager.associate(node.getId(),sshHostAndPortOverride.get(),machineLocation,node.getLoginPort());
      }
 else {
        LOG.warn(""String_Node_Str"",new Object[]{this,node.getLoginPort(),sshHostAndPortOverride,machineLocation});
      }
    }
    if (""String_Node_Str"".equals(this.getProvider())) {
      if (windows) {
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      Map<Integer,Integer> portMappings=JcloudsUtil.dockerPortMappingsFor(this,node.getId());
      PortForwardManager portForwardManager=setup.get(PORT_FORWARDING_MANAGER);
      if (portForwardManager != null) {
        for (        Integer containerPort : portMappings.keySet()) {
          Integer hostPort=portMappings.get(containerPort);
          String dockerHost=((JcloudsSshMachineLocation)machineLocation).getSshHostAndPort().getHostText();
          portForwardManager.associate(node.getId(),HostAndPort.fromParts(dockerHost,hostPort),machineLocation,containerPort);
        }
      }
 else {
        LOG.warn(""String_Node_Str"",this,machineLocation);
      }
    }
    List<String> customisationForLogging=new ArrayList<String>();
    if (waitForSshable) {
      String setupScript=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);
      List<String> setupScripts=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL_LIST);
      Collection<String> allScripts=new MutableList<String>().appendIfNotNull(setupScript).appendAll(setupScripts);
      for (      String setupScriptItem : allScripts) {
        if (Strings.isNonBlank(setupScriptItem)) {
          customisationForLogging.add(""String_Node_Str"" + setupScriptItem);
          String setupVarsString=setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);
          Map<String,String> substitutions=(setupVarsString != null) ? Splitter.on(""String_Node_Str"").withKeyValueSeparator(""String_Node_Str"").split(setupVarsString) : ImmutableMap.<String,String>of();
          String scriptContent=ResourceUtils.create(this).getResourceAsString(setupScriptItem);
          String script=TemplateProcessor.processTemplateContents(scriptContent,getManagementContext(),substitutions);
          if (windows) {
            ((WinRmMachineLocation)machineLocation).executeScript(ImmutableList.copyOf((script.replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str""))));
          }
 else {
            ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"" + this,ImmutableList.of(script));
          }
        }
      }
      if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          customisationForLogging.add(""String_Node_Str"");
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",Arrays.asList(""String_Node_Str"",""String_Node_Str""));
        }
      }
      if (setup.get(GENERATE_HOSTNAME)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          customisationForLogging.add(""String_Node_Str"");
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"" + node.getName(),Arrays.asList(""String_Node_Str"" + node.getName(),""String_Node_Str"" + node.getName() + ""String_Node_Str"",""String_Node_Str""));
        }
      }
      if (setup.get(OPEN_IPTABLES)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          @SuppressWarnings(""String_Node_Str"") Iterable<Integer> inboundPorts=(Iterable<Integer>)setup.get(INBOUND_PORTS);
          if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {
            LOG.info(""String_Node_Str"",machineLocation,this);
          }
 else {
            customisationForLogging.add(""String_Node_Str"");
            List<String> iptablesRules=Lists.newArrayList();
            if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
              for (              Integer port : inboundPorts) {
                iptablesRules.add(IptablesCommands.addFirewalldRule(Chain.INPUT,Protocol.TCP,port,Policy.ACCEPT));
              }
            }
 else {
              iptablesRules=createIptablesRulesForNetworkInterface(inboundPorts);
              iptablesRules.add(IptablesCommands.saveIptablesRules());
            }
            List<String> batch=Lists.newArrayList();
            for (            String rule : iptablesRules) {
              batch.add(rule);
              if (batch.size() == 50) {
                ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",batch);
                batch.clear();
              }
            }
            if (batch.size() > 0) {
              ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",batch);
            }
            ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",ImmutableList.of(IptablesCommands.listIptablesRule()));
          }
        }
      }
      if (setup.get(STOP_IPTABLES)) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          customisationForLogging.add(""String_Node_Str"");
          List<String> cmds=ImmutableList.<String>of();
          if (isLocationFirewalldEnabled((SshMachineLocation)machineLocation)) {
            cmds=ImmutableList.of(IptablesCommands.firewalldServiceStop(),IptablesCommands.firewalldServiceStatus());
          }
 else {
            cmds=ImmutableList.of(IptablesCommands.iptablesServiceStop(),IptablesCommands.iptablesServiceStatus());
          }
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",cmds);
        }
      }
      List<String> extraKeyUrlsToAuth=setup.get(EXTRA_PUBLIC_KEY_URLS_TO_AUTH);
      if (extraKeyUrlsToAuth != null && !extraKeyUrlsToAuth.isEmpty()) {
        if (windows) {
          LOG.warn(""String_Node_Str"",machineLocation);
        }
 else {
          List<String> extraKeyDataToAuth=MutableList.of();
          for (          String keyUrl : extraKeyUrlsToAuth) {
            extraKeyDataToAuth.add(ResourceUtils.create().getResourceAsString(keyUrl));
          }
          ((SshMachineLocation)machineLocation).execCommands(""String_Node_Str"",ImmutableList.of(new AuthorizeRSAPublicKeys(extraKeyDataToAuth).render(org.jclouds.scriptbuilder.domain.OsFamily.UNIX)));
        }
      }
    }
 else {
    }
    for (    JcloudsLocationCustomizer customizer : getCustomizers(setup)) {
      customizer.customize(this,computeService,machineLocation);
    }
    customizedTimestamp=Duration.of(provisioningStopwatch);
    try {
      String logMessage=""String_Node_Str"" + setup.getDescription() + ""String_Node_Str""+ ""String_Node_Str""+ machineLocation.getUser()+ ""String_Node_Str""+ machineLocation.getAddress()+ ""String_Node_Str""+ machineLocation.getPort()+ (Boolean.TRUE.equals(setup.get(LOG_CREDENTIALS)) ? ""String_Node_Str"" + userCredentials.getOptionalPassword().or(""String_Node_Str"") + ""String_Node_Str""+ userCredentials.getOptionalPrivateKey().or(""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ Duration.of(provisioningStopwatch).toStringRounded()+ ""String_Node_Str""+ template+ ""String_Node_Str""+ Duration.of(templateTimestamp).toStringRounded()+ ""String_Node_Str""+ ""String_Node_Str""+ node+ ""String_Node_Str""+ Duration.of(provisionTimestamp).subtract(templateTimestamp).toStringRounded()+ ""String_Node_Str""+ ""String_Node_Str""+ machineLocation+ ""String_Node_Str""+ Duration.of(usableTimestamp).subtract(provisionTimestamp).toStringRounded()+ ""String_Node_Str""+ ""String_Node_Str""+ Duration.of(customizedTimestamp).subtract(usableTimestamp).toStringRounded()+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(customisationForLogging)+ ""String_Node_Str"";
      LOG.info(logMessage);
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      LOG.warn(""String_Node_Str"" + machineLocation + ""String_Node_Str""+ this,e);
    }
    return machineLocation;
  }
 catch (  Exception e) {
    if (e instanceof RunNodesException && ((RunNodesException)e).getNodeErrors().size() > 0) {
      node=Iterables.get(((RunNodesException)e).getNodeErrors().keySet(),0);
    }
    boolean destroyNode=(node != null) && Boolean.TRUE.equals(setup.get(DESTROY_ON_FAILURE));
    if (e.toString().contains(""String_Node_Str"")) {
      LOG.error(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
    LOG.error(""String_Node_Str"",new Object[]{setup.getDescription(),(destroyNode ? ""String_Node_Str"" + node + ""String_Node_Str"" : ""String_Node_Str""),e.getMessage()});
    LOG.debug(Throwables.getStackTraceAsString(e));
    if (destroyNode) {
      if (machineLocation != null) {
        releaseSafely(machineLocation);
      }
 else {
        releaseNodeSafely(node);
      }
    }
    throw Exceptions.propagate(e);
  }
}",0.9936548223350252
79377,"@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  try {
    Object result1=method.invoke(result0,args);
    if (result1 instanceof Response) {
      String responseClass=method.getAnnotation(ApiOperation.class).responseClass();
      Class<?> type=Class.forName(responseClass);
      result1=BuiltResponsePreservingError.copyResponseAndClose((Response)result1,type);
    }
    return result1;
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException) {
      e=((InvocationTargetException)e).getTargetException();
    }
    throw Exceptions.propagate(e);
  }
}","@Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  try {
    Object result1=method.invoke(result0,args);
    Class<?> type=String.class;
    if (result1 instanceof Response) {
      if (((Response)result1).getStatus() / 100 == 2) {
        String responseClass=method.getAnnotation(ApiOperation.class).responseClass();
        type=Class.forName(responseClass);
      }
      result1=BuiltResponsePreservingError.copyResponseAndClose((Response)result1,type);
    }
    return result1;
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException) {
      e=((InvocationTargetException)e).getTargetException();
    }
    throw Exceptions.propagate(e);
  }
}",0.743455497382199
79378,"@SuppressWarnings(""String_Node_Str"") private <T>T proxy(Class<T> clazz){
  final T result0=ProxyFactory.create(clazz,target,clientExecutor);
  return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class<?>[]{clazz},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      try {
        Object result1=method.invoke(result0,args);
        if (result1 instanceof Response) {
          String responseClass=method.getAnnotation(ApiOperation.class).responseClass();
          Class<?> type=Class.forName(responseClass);
          result1=BuiltResponsePreservingError.copyResponseAndClose((Response)result1,type);
        }
        return result1;
      }
 catch (      Throwable e) {
        if (e instanceof InvocationTargetException) {
          e=((InvocationTargetException)e).getTargetException();
        }
        throw Exceptions.propagate(e);
      }
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") private <T>T proxy(Class<T> clazz){
  final T result0=ProxyFactory.create(clazz,target,clientExecutor);
  return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class<?>[]{clazz},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      try {
        Object result1=method.invoke(result0,args);
        Class<?> type=String.class;
        if (result1 instanceof Response) {
          if (((Response)result1).getStatus() / 100 == 2) {
            String responseClass=method.getAnnotation(ApiOperation.class).responseClass();
            type=Class.forName(responseClass);
          }
          result1=BuiltResponsePreservingError.copyResponseAndClose((Response)result1,type);
        }
        return result1;
      }
 catch (      Throwable e) {
        if (e instanceof InvocationTargetException) {
          e=((InvocationTargetException)e).getTargetException();
        }
        throw Exceptions.propagate(e);
      }
    }
  }
);
}",0.816245666171372
79379,"public static boolean isReachable(HostAndPort endpoint){
  try {
    Socket s=new Socket(endpoint.getHostText(),endpoint.getPort());
    try {
      s.close();
    }
 catch (    Exception e) {
      log.debug(""String_Node_Str"" + endpoint + ""String_Node_Str"",e);
    }
    return true;
  }
 catch (  Exception e) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + endpoint + ""String_Node_Str"",e);
    return false;
  }
}","public static boolean isReachable(HostAndPort endpoint){
  try {
    Socket s=new Socket(endpoint.getHostText(),endpoint.getPort());
    closeQuietly(s);
    return true;
  }
 catch (  Exception e) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"" + endpoint + ""String_Node_Str"",e);
    return false;
  }
}",0.6286472148541115
79380,"public static boolean isPortAvailable(InetAddress localAddress,int port){
  if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {
    throw new IllegalArgumentException(""String_Node_Str"" + port);
  }
  InetAddress localAddressNotAny=(localAddress == null || ANY_NIC.equals(localAddress)) ? LOOPBACK : localAddress;
  Stopwatch watch=Stopwatch.createStarted();
  try {
    ServerSocket ss=null;
    DatagramSocket ds=null;
    try {
      ss=new ServerSocket();
      ss.setSoTimeout(250);
      ss.setReuseAddress(true);
      ss.bind(new InetSocketAddress(localAddress,port));
      ds=new DatagramSocket(null);
      ds.setSoTimeout(250);
      ds.setReuseAddress(true);
      ds.bind(new InetSocketAddress(localAddress,port));
    }
 catch (    IOException e) {
      return false;
    }
 finally {
      if (ds != null) {
        ds.close();
      }
      if (ss != null) {
        try {
          ss.close();
        }
 catch (        IOException e) {
        }
      }
    }
    if (localAddress == null || ANY_NIC.equals(localAddress)) {
      Enumeration<NetworkInterface> nis=null;
      try {
        nis=NetworkInterface.getNetworkInterfaces();
      }
 catch (      SocketException e) {
        throw Exceptions.propagate(e);
      }
      while (nis.hasMoreElements()) {
        NetworkInterface ni=nis.nextElement();
        Enumeration<InetAddress> as=ni.getInetAddresses();
        while (as.hasMoreElements()) {
          InetAddress a=as.nextElement();
          if (!isPortAvailable(a,port))           return false;
        }
      }
    }
    return true;
  }
  finally {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",new Object[]{Time.makeTimeString(watch.elapsed(TimeUnit.MILLISECONDS),true),localAddress,port});
  }
}","public static boolean isPortAvailable(InetAddress localAddress,int port){
  if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {
    throw new IllegalArgumentException(""String_Node_Str"" + port);
  }
  Stopwatch watch=Stopwatch.createStarted();
  try {
    ServerSocket ss=null;
    DatagramSocket ds=null;
    try {
      ss=new ServerSocket();
      ss.setSoTimeout(250);
      ss.setReuseAddress(true);
      ss.bind(new InetSocketAddress(localAddress,port));
      ds=new DatagramSocket(null);
      ds.setSoTimeout(250);
      ds.setReuseAddress(true);
      ds.bind(new InetSocketAddress(localAddress,port));
    }
 catch (    IOException e) {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + localAddress + ""String_Node_Str""+ port,e);
      return false;
    }
 finally {
      closeQuietly(ds);
      closeQuietly(ss);
    }
    if (localAddress == null || ANY_NIC.equals(localAddress)) {
      Enumeration<NetworkInterface> nis=null;
      try {
        nis=NetworkInterface.getNetworkInterfaces();
      }
 catch (      SocketException e) {
        throw Exceptions.propagate(e);
      }
      boolean foundAvailableInterface=false;
      while (nis.hasMoreElements()) {
        NetworkInterface ni=nis.nextElement();
        Enumeration<InetAddress> as=ni.getInetAddresses();
        while (as.hasMoreElements()) {
          InetAddress a=as.nextElement();
          if (!isPortAvailable(a,port)) {
            if (isAddressValid(a)) {
              if (log.isTraceEnabled())               log.trace(""String_Node_Str"",new Object[]{a,port,nis});
              return false;
            }
          }
 else {
            foundAvailableInterface=true;
          }
        }
      }
      if (!foundAvailableInterface) {
        throw new RuntimeException(""String_Node_Str"" + localAddress + ""String_Node_Str""+ port+ ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    long elapsed=watch.elapsed(TimeUnit.SECONDS);
    boolean isDelayed=(elapsed >= 1);
    boolean isDelayedByMuch=(elapsed >= 30);
    if (isDelayed || log.isTraceEnabled()) {
      String msg=""String_Node_Str"";
      Object[] args=new Object[]{Time.makeTimeString(watch.elapsed(TimeUnit.MILLISECONDS),true),localAddress,port};
      if (isDelayedByMuch) {
        log.warn(msg,args);
      }
 else       if (isDelayed) {
        log.debug(msg,args);
      }
 else {
        log.trace(msg,args);
      }
    }
  }
}",0.1911132345914954
79381,"@Test(groups=""String_Node_Str"") public void testIsPortAvailableReportsTrueWhenPortIsFree() throws Exception {
  int port=58769;
  int numFree=0;
  for (int i=0; i < 10; i++) {
    if (Networking.isPortAvailable(port))     numFree++;
  }
  if (numFree <= 5)   fail(""String_Node_Str"");
}","@Test public void testIsPortAvailableReportsTrueWhenPortIsFree() throws Exception {
  int port=58769;
  int numFree=0;
  for (int i=0; i < 10; i++) {
    if (Networking.isPortAvailable(port))     numFree++;
  }
  if (numFree <= 5)   fail(""String_Node_Str"");
}",0.9522058823529412
79382,"@Test(groups=""String_Node_Str"") public void testIsPortAvailableReportsFalseWhenPortIsInUse() throws Exception {
  int port=58767;
  ServerSocket ss=null;
  do {
    port++;
    if (Networking.isPortAvailable(port)) {
      try {
        ss=new ServerSocket(port);
        log.info(""String_Node_Str"" + port + ""String_Node_Str""+ JavaClassNames.niceClassAndMethod());
        assertFalse(Networking.isPortAvailable(port),""String_Node_Str"");
      }
  finally {
        if (ss != null) {
          ss.close();
        }
      }
    }
  }
 while (ss == null && port < 60000);
  Assert.assertNotNull(ss,""String_Node_Str"");
  final int portF=port;
  Asserts.succeedsEventually(new Runnable(){
    @Override public void run(){
      assertTrue(Networking.isPortAvailable(portF),""String_Node_Str"" + portF + ""String_Node_Str"");
    }
  }
);
}","@Test public void testIsPortAvailableReportsFalseWhenPortIsInUse() throws Exception {
  int port=58767;
  ServerSocket ss=null;
  do {
    port++;
    if (Networking.isPortAvailable(port)) {
      try {
        ss=new ServerSocket(port);
        log.info(""String_Node_Str"" + port + ""String_Node_Str""+ JavaClassNames.niceClassAndMethod());
        assertFalse(Networking.isPortAvailable(port),""String_Node_Str"");
      }
  finally {
        if (ss != null) {
          ss.close();
        }
      }
    }
  }
 while (ss == null && port < 60000);
  Assert.assertNotNull(ss,""String_Node_Str"");
  final int portF=port;
  Asserts.succeedsEventually(new Runnable(){
    @Override public void run(){
      assertTrue(Networking.isPortAvailable(portF),""String_Node_Str"" + portF + ""String_Node_Str"");
    }
  }
);
}",0.984126984126984
79383,"@Test(groups=""String_Node_Str"") public void testIsPortAvailableReportsPromptly() throws Exception {
  int port=58767;
  boolean available=false;
  do {
    port++;
    Stopwatch watch=Stopwatch.createStarted();
    if (Networking.isPortAvailable(null,port)) {
      available=true;
    }
    long elapsedMillis=watch.elapsed(TimeUnit.MILLISECONDS);
    assertTrue(elapsedMillis < 5000,""String_Node_Str"" + elapsedMillis + ""String_Node_Str""+ port+ ""String_Node_Str"");
  }
 while (!available && port < 60000);
  Assert.assertTrue(available);
}","@Test public void testIsPortAvailableReportsPromptly() throws Exception {
  int port=58767;
  boolean available=false;
  do {
    port++;
    Stopwatch watch=Stopwatch.createStarted();
    if (Networking.isPortAvailable(null,port)) {
      available=true;
    }
    long elapsedMillis=watch.elapsed(TimeUnit.MILLISECONDS);
    assertTrue(elapsedMillis < 5000,""String_Node_Str"" + elapsedMillis + ""String_Node_Str""+ port+ ""String_Node_Str"");
  }
 while (!available && port < 60000);
  Assert.assertTrue(available);
}",0.9753320683111956
79384,"protected void onServerPoolMemberChanged(final Entity member){
synchronized (mutex) {
    log.trace(""String_Node_Str"",new Object[]{this,member,member.getLocations()});
    Map<Entity,String> nodes=getAttribute(RIAK_CLUSTER_NODES);
    if (belongsInServerPool(member)) {
      if (nodes == null) {
        nodes=Maps.newLinkedHashMap();
      }
      String riakName=getRiakName(member);
      Preconditions.checkNotNull(riakName);
      Boolean firstNode=getAttribute(IS_FIRST_NODE_SET);
      if (!Boolean.TRUE.equals(firstNode)) {
        setAttribute(IS_FIRST_NODE_SET,Boolean.TRUE);
        nodes.put(member,riakName);
        setAttribute(RIAK_CLUSTER_NODES,nodes);
        ((EntityInternal)member).setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Boolean.TRUE);
        log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
      }
 else {
        Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),Predicates.and(Predicates.instanceOf(RiakNode.class),EntityPredicates.attributeEqualTo(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,true)));
        if (anyNodeInCluster.isPresent()) {
          if (!nodes.containsKey(member) && member.getAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER) == null) {
            String anyNodeName=anyNodeInCluster.get().getAttribute(RiakNode.RIAK_NODE_NAME);
            Entities.invokeEffectorWithArgs(this,member,RiakNode.JOIN_RIAK_CLUSTER,anyNodeName).blockUntilEnded();
            if (getAttribute(IS_CLUSTER_INIT)) {
              Entities.invokeEffector(this,member,RiakNode.COMMIT_RIAK_CLUSTER).blockUntilEnded();
            }
            nodes.put(member,riakName);
            setAttribute(RIAK_CLUSTER_NODES,nodes);
            log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
          }
        }
 else {
          log.error(""String_Node_Str"",member.getId());
        }
      }
    }
 else {
      if (nodes != null && nodes.containsKey(member)) {
        Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),Predicates.and(Predicates.instanceOf(RiakNode.class),EntityPredicates.attributeEqualTo(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,true),Predicates.not(Predicates.equalTo(member))));
        if (anyNodeInCluster.isPresent()) {
          Entities.invokeEffectorWithArgs(this,anyNodeInCluster.get(),RiakNode.LEAVE_RIAK_CLUSTER,getRiakName(member)).blockUntilEnded();
        }
        nodes.remove(member);
        setAttribute(RIAK_CLUSTER_NODES,nodes);
        log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
      }
    }
    ServiceNotUpLogic.updateNotUpIndicatorRequiringNonEmptyMap(this,RIAK_CLUSTER_NODES);
    calculateClusterAddresses();
  }
}","protected void onServerPoolMemberChanged(final Entity member){
synchronized (mutex) {
    log.trace(""String_Node_Str"",new Object[]{this,member,member.getLocations()});
    Map<Entity,String> nodes=getAttribute(RIAK_CLUSTER_NODES);
    if (belongsInServerPool(member)) {
      if (nodes == null) {
        nodes=Maps.newLinkedHashMap();
      }
      String riakName=getRiakName(member);
      Preconditions.checkNotNull(riakName);
      Boolean firstNode=getAttribute(IS_FIRST_NODE_SET);
      if (!Boolean.TRUE.equals(firstNode)) {
        setAttribute(IS_FIRST_NODE_SET,Boolean.TRUE);
        nodes.put(member,riakName);
        setAttribute(RIAK_CLUSTER_NODES,nodes);
        ((EntityInternal)member).setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Boolean.TRUE);
        log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
      }
 else {
        Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),Predicates.and(Predicates.instanceOf(RiakNode.class),EntityPredicates.attributeEqualTo(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,true)));
        if (anyNodeInCluster.isPresent()) {
          if (!nodes.containsKey(member) && member.getAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER) == null) {
            String anyNodeName=anyNodeInCluster.get().getAttribute(RiakNode.RIAK_NODE_NAME);
            Entities.invokeEffectorWithArgs(this,member,RiakNode.JOIN_RIAK_CLUSTER,anyNodeName).blockUntilEnded();
            if (getAttribute(IS_CLUSTER_INIT)) {
              Entities.invokeEffector(this,member,RiakNode.COMMIT_RIAK_CLUSTER).blockUntilEnded();
            }
            nodes.put(member,riakName);
            setAttribute(RIAK_CLUSTER_NODES,nodes);
            log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
          }
        }
 else {
          log.error(""String_Node_Str"",member.getId());
        }
      }
    }
 else {
      if (nodes != null && nodes.containsKey(member)) {
        boolean timeout=DependentConfiguration.attributeWhenReady(member,RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Predicates.equalTo(false)).blockUntilEnded(Duration.TWO_MINUTES);
        Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),Predicates.and(Predicates.instanceOf(RiakNode.class),EntityPredicates.attributeEqualTo(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,true),Predicates.not(Predicates.equalTo(member))));
        if (timeout && anyNodeInCluster.isPresent()) {
          Entities.invokeEffectorWithArgs(this,anyNodeInCluster.get(),RiakNode.REMOVE_FROM_CLUSTER,getRiakName(member)).blockUntilEnded();
        }
        nodes.remove(member);
        setAttribute(RIAK_CLUSTER_NODES,nodes);
        log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
      }
    }
    ServiceNotUpLogic.updateNotUpIndicatorRequiringNonEmptyMap(this,RIAK_CLUSTER_NODES);
    calculateClusterAddresses();
  }
}",0.8243701983205288
79385,"@Effector(description=""String_Node_Str"") public void leaveCluster(@EffectorParam(name=""String_Node_Str"") String nodeName);","@Effector(description=""String_Node_Str"") public void leaveCluster();",0.7157894736842105
79386,public void leaveCluster(String nodeName);,public void leaveCluster();,0.782608695652174
79387,"@Override public void leaveCluster(String nodeName){
  getDriver().leaveCluster(nodeName);
}","@Override public void leaveCluster(){
  getDriver().leaveCluster();
}",0.8571428571428571
79388,"@Override public void leaveCluster(String nodeName){
  if (hasJoinedCluster()) {
    ScriptHelper leaveClusterScript=newScript(""String_Node_Str"").body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd(),nodeName))).body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd()))).body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd()))).failOnNonZeroResultCode();
    if (!isRiakOnPath()) {
      Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
      log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
      leaveClusterScript.environmentVariablesReset(newPathVariable);
    }
    leaveClusterScript.execute();
    entity.setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Boolean.FALSE);
  }
 else {
    log.warn(""String_Node_Str"",entity.getId());
  }
}","@Override public void leaveCluster(){
  if (hasJoinedCluster()) {
    ScriptHelper leaveClusterScript=newScript(""String_Node_Str"").body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd()))).body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd()))).body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd()))).failOnNonZeroResultCode();
    if (!isRiakOnPath()) {
      Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
      log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
      leaveClusterScript.environmentVariablesReset(newPathVariable);
    }
    leaveClusterScript.execute();
    entity.setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Boolean.FALSE);
  }
 else {
    log.warn(""String_Node_Str"",entity.getId());
  }
}",0.9849435382685068
79389,"@Override public void stop(){
  leaveCluster(""String_Node_Str"");
  String command=format(""String_Node_Str"",getRiakCmd());
  command=isPackageInstall() ? sudo(command) : command;
  ScriptHelper stopScript=newScript(ImmutableMap.of(USE_PID_FILE,false),STOPPING).body.append(command);
  if (!isRiakOnPath()) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    stopScript.environmentVariablesReset(newPathVariable);
  }
  int result=stopScript.failOnNonZeroResultCode().execute();
  if (result != 0) {
    newScript(ImmutableMap.of(USE_PID_FILE,false),STOPPING).execute();
  }
}","@Override public void stop(){
  leaveCluster();
  String command=format(""String_Node_Str"",getRiakCmd());
  command=isPackageInstall() ? sudo(command) : command;
  ScriptHelper stopScript=newScript(ImmutableMap.of(USE_PID_FILE,false),STOPPING).body.append(command);
  if (!isRiakOnPath()) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    stopScript.environmentVariablesReset(newPathVariable);
  }
  int result=stopScript.failOnNonZeroResultCode().execute();
  if (result != 0) {
    newScript(ImmutableMap.of(USE_PID_FILE,false),STOPPING).execute();
  }
}",0.9873980726464048
79390,"@Override protected Collection<Integer> getRequiredOpenPorts(){
  int erlangRangeStart=getConfig(ERLANG_PORT_RANGE_START).iterator().next();
  int erlangRangeEnd=getConfig(ERLANG_PORT_RANGE_END).iterator().next();
  Set<Integer> newPorts=MutableSet.<Integer>copyOf(super.getRequiredOpenPorts());
  newPorts.remove(erlangRangeStart);
  newPorts.remove(erlangRangeEnd);
  for (int i=erlangRangeStart; i <= erlangRangeEnd; i++)   newPorts.add(i);
  return newPorts;
}","@Override protected Collection<Integer> getRequiredOpenPorts(){
  int erlangRangeStart=getConfig(ERLANG_PORT_RANGE_START).iterator().next();
  int erlangRangeEnd=getConfig(ERLANG_PORT_RANGE_END).iterator().next();
  Set<Integer> ports=MutableSet.copyOf(super.getRequiredOpenPorts());
  Set<Integer> erlangPorts=ContiguousSet.create(Range.open(erlangRangeStart,erlangRangeEnd),DiscreteDomain.integers());
  ports.addAll(erlangPorts);
  return ports;
}",0.5754923413566739
79391,"@Override public void customize(){
  newScript(CUSTOMIZING).execute();
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  if (isVersion1()) {
    String vmArgsTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));
    String saveAsVmArgs=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsVmArgs).contents(vmArgsTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsVmArgs + ""String_Node_Str""+ getRiakEtcDir()));
    String appConfigTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_APP_CONFIG_TEMPLATE_URL));
    String saveAsAppConfig=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsAppConfig).contents(appConfigTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsAppConfig + ""String_Node_Str""+ getRiakEtcDir()));
  }
 else {
    String templateUrl=osDetails.isMac() ? entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_MAC) : entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_LINUX);
    String riakConfTemplate=processTemplate(templateUrl);
    String saveAsRiakConf=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsRiakConf).contents(riakConfTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsRiakConf + ""String_Node_Str""+ getRiakEtcDir()));
  }
  if (osDetails.isMac()) {
    commands.add(""String_Node_Str"");
  }
 else   if (osDetails.isLinux() && isVersion1()) {
    commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  }
  ScriptHelper customizeScript=newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(commands);
  if (!isRiakOnPath()) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    customizeScript.environmentVariablesReset(newPathVariable);
  }
  customizeScript.failOnNonZeroResultCode().execute();
  if (osDetails.isLinux()) {
    ImmutableMap<String,String> sysctl=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
    ScriptHelper optimize=newScript(CUSTOMIZING + ""String_Node_Str"").body.append(sudo(""String_Node_Str"" + Joiner.on(' ').withKeyValueSeparator(""String_Node_Str"").join(sysctl)));
    Optional<Boolean> enable=Optional.fromNullable(entity.getConfig(RiakNode.OPTIMIZE_HOST_NETWORKING));
    if (!enable.isPresent())     optimize.inessential();
    if (enable.or(true))     optimize.execute();
  }
  entity.setAttribute(RiakNode.RIAK_NODE_NAME,format(""String_Node_Str"",getSubnetHostname()));
}","@Override public void customize(){
  checkRiakOnPath();
  newScript(CUSTOMIZING).execute();
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  if (isVersion1()) {
    String vmArgsTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));
    String saveAsVmArgs=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsVmArgs).contents(vmArgsTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsVmArgs + ""String_Node_Str""+ getRiakEtcDir()));
    String appConfigTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_APP_CONFIG_TEMPLATE_URL));
    String saveAsAppConfig=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsAppConfig).contents(appConfigTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsAppConfig + ""String_Node_Str""+ getRiakEtcDir()));
  }
 else {
    String templateUrl=osDetails.isMac() ? entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_MAC) : entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_LINUX);
    String riakConfTemplate=processTemplate(templateUrl);
    String saveAsRiakConf=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsRiakConf).contents(riakConfTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsRiakConf + ""String_Node_Str""+ getRiakEtcDir()));
  }
  if (osDetails.isMac()) {
    commands.add(""String_Node_Str"");
  }
  if (osDetails.isLinux() && isVersion1()) {
    commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  }
  ScriptHelper customizeScript=newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(commands);
  if (!isRiakOnPath()) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    customizeScript.environmentVariablesReset(newPathVariable);
  }
  customizeScript.failOnNonZeroResultCode().execute();
  if (osDetails.isLinux()) {
    ImmutableMap<String,String> sysctl=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
    ScriptHelper optimize=newScript(CUSTOMIZING + ""String_Node_Str"").body.append(sudo(""String_Node_Str"" + Joiner.on(' ').withKeyValueSeparator(""String_Node_Str"").join(sysctl)));
    Optional<Boolean> enable=Optional.fromNullable(entity.getConfig(RiakNode.OPTIMIZE_HOST_NETWORKING));
    if (!enable.isPresent())     optimize.inessential();
    if (enable.or(true))     optimize.execute();
  }
  entity.setAttribute(RiakNode.RIAK_NODE_NAME,format(""String_Node_Str"",getSubnetHostname()));
}",0.995610469842302
79392,"private List<String> installFromPackageCloud(){
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  return ImmutableList.<String>builder().add(osDetails.getName().toLowerCase().contains(""String_Node_Str"") ? addSbinPathCommand() : ""String_Node_Str"").add(ifNotExecutable(""String_Node_Str"",Joiner.on('\n').join(installCurl()))).addAll(ifExecutableElse(""String_Node_Str"",installDebianBased(),installRpmBased())).build();
}","private List<String> installFromPackageCloud(){
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  return ImmutableList.<String>builder().add(osDetails.getName().toLowerCase().contains(""String_Node_Str"") ? addSbinPathCommand() : ""String_Node_Str"").add(ifNotExecutable(""String_Node_Str"",INSTALL_CURL)).addAll(ifExecutableElse(""String_Node_Str"",installDebianBased(),installRpmBased())).build();
}",0.9473684210526316
79393,"protected List<String> installMac(){
  String saveAs=resolver.getFilename();
  String url=entity.getAttribute(RiakNode.DOWNLOAD_URL_MAC).toString();
  return ImmutableList.<String>builder().add(INSTALL_TAR).add(INSTALL_CURL).add(commandToDownloadUrlAs(url,saveAs)).add(""String_Node_Str"" + saveAs).build();
}","protected List<String> installMac(){
  String saveAs=resolver.getFilename();
  String url=entity.getAttribute(RiakNode.DOWNLOAD_URL_MAC);
  return ImmutableList.<String>builder().add(INSTALL_TAR).add(INSTALL_CURL).add(commandToDownloadUrlAs(url,saveAs)).add(""String_Node_Str"" + saveAs).build();
}",0.9817578772802652
79394,"@Override public void preInstall(){
  resolver=Entities.newDownloader(this);
  setExpandedInstallDir(Os.mergePaths(getInstallDir(),resolver.getUnpackedDirectoryName(format(""String_Node_Str"",getVersion()))));
}","@Override public void preInstall(){
  resolver=Entities.newDownloader(this);
  setExpandedInstallDir(Os.mergePaths(getInstallDir(),resolver.getUnpackedDirectoryName(format(""String_Node_Str"",getVersion()))));
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  if (osDetails.isLinux()) {
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,true);
  }
 else   if (osDetails.isMac()) {
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,false);
  }
}",0.6129032258064516
79395,"private List<String> installLinuxFromPackageUrl(String expandedInstallDir){
  DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(),SshTasks.OnFailingTask.WARN_OR_IF_DYNAMIC_FAIL_MARKING_INESSENTIAL)).orSubmitAndBlock();
  String installBin=Urls.mergePaths(expandedInstallDir,""String_Node_Str"");
  String saveAsYum=""String_Node_Str"";
  String saveAsApt=""String_Node_Str"";
  OsDetails osDetails=getMachine().getOsDetails();
  String downloadUrl;
  String osReleaseCmd;
  if (""String_Node_Str"".equalsIgnoreCase(osDetails.getName())) {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_DEBIAN);
    osReleaseCmd=osDetails.getVersion().substring(0,osDetails.getVersion().indexOf(""String_Node_Str""));
  }
 else {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_UBUNTU);
    osReleaseCmd=""String_Node_Str"" + ""String_Node_Str"";
  }
  String apt=chainGroup(""String_Node_Str"",""String_Node_Str"",ok(sudo(""String_Node_Str"")),""String_Node_Str"" + Strings.toLowerCase(osDetails.getName()),""String_Node_Str"" + osReleaseCmd,String.format(""String_Node_Str"",saveAsApt,downloadUrl),sudo(String.format(""String_Node_Str"",saveAsApt)));
  String yum=chainGroup(""String_Node_Str"",ok(sudo(""String_Node_Str"")),String.format(""String_Node_Str"",saveAsYum,entity.getAttribute(RiakNode.DOWNLOAD_URL_RHEL_CENTOS)),sudo(String.format(""String_Node_Str"",saveAsYum)));
  return ImmutableList.<String>builder().add(""String_Node_Str"" + installBin).add(INSTALL_CURL).add(alternatives(apt,yum)).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).build();
}","private List<String> installLinuxFromPackageUrl(){
  DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(),SshTasks.OnFailingTask.WARN_OR_IF_DYNAMIC_FAIL_MARKING_INESSENTIAL)).orSubmitAndBlock();
  String expandedInstallDir=getExpandedInstallDir();
  String installBin=Urls.mergePaths(expandedInstallDir,""String_Node_Str"");
  String saveAsYum=""String_Node_Str"";
  String saveAsApt=""String_Node_Str"";
  OsDetails osDetails=getMachine().getOsDetails();
  String downloadUrl;
  String osReleaseCmd;
  if (""String_Node_Str"".equalsIgnoreCase(osDetails.getName())) {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_DEBIAN);
    osReleaseCmd=osDetails.getVersion().substring(0,osDetails.getVersion().indexOf(""String_Node_Str""));
  }
 else {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_UBUNTU);
    osReleaseCmd=""String_Node_Str"" + ""String_Node_Str"";
  }
  String apt=chainGroup(""String_Node_Str"" + sbinPath,""String_Node_Str"",ok(sudo(""String_Node_Str"")),""String_Node_Str"" + Strings.toLowerCase(osDetails.getName()),""String_Node_Str"" + osReleaseCmd,String.format(""String_Node_Str"",saveAsApt,downloadUrl),sudo(String.format(""String_Node_Str"",saveAsApt)));
  String yum=chainGroup(""String_Node_Str"",ok(sudo(""String_Node_Str"")),String.format(""String_Node_Str"",saveAsYum,entity.getAttribute(RiakNode.DOWNLOAD_URL_RHEL_CENTOS)),sudo(String.format(""String_Node_Str"",saveAsYum)));
  return ImmutableList.<String>builder().add(""String_Node_Str"" + installBin).add(INSTALL_CURL).add(alternatives(apt,yum)).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).build();
}",0.9734882335418528
79396,"@Override public void install(){
  if (entity.getConfig(Attributes.DOWNLOAD_URL) != null) {
    LOG.warn(""String_Node_Str"",entity.getConfig(Attributes.DOWNLOAD_URL));
  }
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  if (osDetails.isLinux()) {
    if (getEntity().isPackageDownloadUrlProvided()) {
      commands.addAll(installLinuxFromPackageUrl(getExpandedInstallDir()));
    }
 else {
      commands.addAll(installFromPackageCloud());
    }
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,true);
  }
 else   if (osDetails.isMac()) {
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,false);
    commands.addAll(installMac());
  }
 else   if (osDetails.isWindows()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + getMachine() + ""String_Node_Str""+ getMachine().getMachineDetails().getOsDetails());
  }
  try {
    newScript(INSTALLING).body.append(commands).failIfBodyEmpty().failOnNonZeroResultCode().inessential().execute();
  }
 catch (  RuntimeException e) {
    if (osDetails.isLinux()) {
      newScript(INSTALLING_FALLBACK).body.append(installLinuxFromPackageUrl(getExpandedInstallDir())).failIfBodyEmpty().failOnNonZeroResultCode().execute();
    }
  }
  checkRiakOnPath();
}","@Override public void install(){
  if (entity.getConfig(Attributes.DOWNLOAD_URL) != null) {
    LOG.warn(""String_Node_Str"",entity.getConfig(Attributes.DOWNLOAD_URL));
  }
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  if (osDetails.isLinux()) {
    if (getEntity().isPackageDownloadUrlProvided()) {
      commands.addAll(installLinuxFromPackageUrl());
    }
 else {
      commands.addAll(installFromPackageCloud());
    }
  }
 else   if (osDetails.isMac()) {
    commands.addAll(installMac());
  }
 else   if (osDetails.isWindows()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + getMachine() + ""String_Node_Str""+ getMachine().getMachineDetails().getOsDetails());
  }
  int result=newScript(INSTALLING).body.append(commands).failIfBodyEmpty().execute();
  if (result != 0 && osDetails.isLinux()) {
    result=newScript(INSTALLING_FALLBACK).body.append(installLinuxFromPackageUrl()).execute();
  }
  if (result != 0) {
    throw new IllegalStateException(String.format(""String_Node_Str"",result));
  }
}",0.5564387917329093
79397,"@Override protected Collection<Integer> getRequiredOpenPorts(){
  int erlangRangeStart=getConfig(ERLANG_PORT_RANGE_START).iterator().next();
  int erlangRangeEnd=getConfig(ERLANG_PORT_RANGE_END).iterator().next();
  Set<Integer> newPorts=MutableSet.<Integer>copyOf(super.getRequiredOpenPorts());
  newPorts.remove(erlangRangeStart);
  newPorts.remove(erlangRangeEnd);
  for (int i=erlangRangeStart; i <= erlangRangeEnd; i++)   newPorts.add(i);
  return newPorts;
}","@Override protected Collection<Integer> getRequiredOpenPorts(){
  int erlangRangeStart=getConfig(ERLANG_PORT_RANGE_START).iterator().next();
  int erlangRangeEnd=getConfig(ERLANG_PORT_RANGE_END).iterator().next();
  Set<Integer> ports=MutableSet.copyOf(super.getRequiredOpenPorts());
  Set<Integer> erlangPorts=ContiguousSet.create(Range.open(erlangRangeStart,erlangRangeEnd),DiscreteDomain.integers());
  ports.addAll(erlangPorts);
  return ports;
}",0.5754923413566739
79398,"@Override public void customize(){
  newScript(CUSTOMIZING).execute();
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  if (isVersion1()) {
    String vmArgsTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));
    String saveAsVmArgs=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsVmArgs).contents(vmArgsTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsVmArgs + ""String_Node_Str""+ getRiakEtcDir()));
    String appConfigTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_APP_CONFIG_TEMPLATE_URL));
    String saveAsAppConfig=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsAppConfig).contents(appConfigTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsAppConfig + ""String_Node_Str""+ getRiakEtcDir()));
  }
 else {
    String templateUrl=osDetails.isMac() ? entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_MAC) : entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_LINUX);
    String riakConfTemplate=processTemplate(templateUrl);
    String saveAsRiakConf=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsRiakConf).contents(riakConfTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsRiakConf + ""String_Node_Str""+ getRiakEtcDir()));
  }
  if (osDetails.isMac()) {
    commands.add(""String_Node_Str"");
  }
 else   if (osDetails.isLinux() && isVersion1()) {
    commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  }
  ScriptHelper customizeScript=newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(commands);
  if (!isRiakOnPath()) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    customizeScript.environmentVariablesReset(newPathVariable);
  }
  customizeScript.failOnNonZeroResultCode().execute();
  if (osDetails.isLinux()) {
    ImmutableMap<String,String> sysctl=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
    ScriptHelper optimize=newScript(CUSTOMIZING + ""String_Node_Str"").body.append(sudo(""String_Node_Str"" + Joiner.on(' ').withKeyValueSeparator(""String_Node_Str"").join(sysctl)));
    Optional<Boolean> enable=Optional.fromNullable(entity.getConfig(RiakNode.OPTIMIZE_HOST_NETWORKING));
    if (!enable.isPresent())     optimize.inessential();
    if (enable.or(true))     optimize.execute();
  }
  entity.setAttribute(RiakNode.RIAK_NODE_NAME,format(""String_Node_Str"",getSubnetHostname()));
}","@Override public void customize(){
  checkRiakOnPath();
  newScript(CUSTOMIZING).execute();
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  if (isVersion1()) {
    String vmArgsTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));
    String saveAsVmArgs=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsVmArgs).contents(vmArgsTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsVmArgs + ""String_Node_Str""+ getRiakEtcDir()));
    String appConfigTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_APP_CONFIG_TEMPLATE_URL));
    String saveAsAppConfig=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsAppConfig).contents(appConfigTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsAppConfig + ""String_Node_Str""+ getRiakEtcDir()));
  }
 else {
    String templateUrl=osDetails.isMac() ? entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_MAC) : entity.getConfig(RiakNode.RIAK_CONF_TEMPLATE_URL_LINUX);
    String riakConfTemplate=processTemplate(templateUrl);
    String saveAsRiakConf=Urls.mergePaths(getRunDir(),""String_Node_Str"");
    DynamicTasks.queueIfPossible(SshEffectorTasks.put(saveAsRiakConf).contents(riakConfTemplate));
    commands.add(sudo(""String_Node_Str"" + saveAsRiakConf + ""String_Node_Str""+ getRiakEtcDir()));
  }
  if (osDetails.isMac()) {
    commands.add(""String_Node_Str"");
  }
  if (osDetails.isLinux() && isVersion1()) {
    commands.add(sudo(""String_Node_Str"" + getRiakEtcDir()));
  }
  ScriptHelper customizeScript=newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(commands);
  if (!isRiakOnPath()) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    customizeScript.environmentVariablesReset(newPathVariable);
  }
  customizeScript.failOnNonZeroResultCode().execute();
  if (osDetails.isLinux()) {
    ImmutableMap<String,String> sysctl=ImmutableMap.<String,String>builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",""String_Node_Str"").build();
    ScriptHelper optimize=newScript(CUSTOMIZING + ""String_Node_Str"").body.append(sudo(""String_Node_Str"" + Joiner.on(' ').withKeyValueSeparator(""String_Node_Str"").join(sysctl)));
    Optional<Boolean> enable=Optional.fromNullable(entity.getConfig(RiakNode.OPTIMIZE_HOST_NETWORKING));
    if (!enable.isPresent())     optimize.inessential();
    if (enable.or(true))     optimize.execute();
  }
  entity.setAttribute(RiakNode.RIAK_NODE_NAME,format(""String_Node_Str"",getSubnetHostname()));
}",0.995610469842302
79399,"private List<String> installFromPackageCloud(){
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  return ImmutableList.<String>builder().add(osDetails.getName().toLowerCase().contains(""String_Node_Str"") ? addSbinPathCommand() : ""String_Node_Str"").add(ifNotExecutable(""String_Node_Str"",Joiner.on('\n').join(installCurl()))).addAll(ifExecutableElse(""String_Node_Str"",installDebianBased(),installRpmBased())).build();
}","private List<String> installFromPackageCloud(){
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  return ImmutableList.<String>builder().add(osDetails.getName().toLowerCase().contains(""String_Node_Str"") ? addSbinPathCommand() : ""String_Node_Str"").add(ifNotExecutable(""String_Node_Str"",INSTALL_CURL)).addAll(ifExecutableElse(""String_Node_Str"",installDebianBased(),installRpmBased())).build();
}",0.9473684210526316
79400,"protected List<String> installMac(){
  String saveAs=resolver.getFilename();
  String url=entity.getAttribute(RiakNode.DOWNLOAD_URL_MAC).toString();
  return ImmutableList.<String>builder().add(INSTALL_TAR).add(INSTALL_CURL).add(commandToDownloadUrlAs(url,saveAs)).add(""String_Node_Str"" + saveAs).build();
}","protected List<String> installMac(){
  String saveAs=resolver.getFilename();
  String url=entity.getAttribute(RiakNode.DOWNLOAD_URL_MAC);
  return ImmutableList.<String>builder().add(INSTALL_TAR).add(INSTALL_CURL).add(commandToDownloadUrlAs(url,saveAs)).add(""String_Node_Str"" + saveAs).build();
}",0.9817578772802652
79401,"@Override public void preInstall(){
  resolver=Entities.newDownloader(this);
  setExpandedInstallDir(Os.mergePaths(getInstallDir(),resolver.getUnpackedDirectoryName(format(""String_Node_Str"",getVersion()))));
}","@Override public void preInstall(){
  resolver=Entities.newDownloader(this);
  setExpandedInstallDir(Os.mergePaths(getInstallDir(),resolver.getUnpackedDirectoryName(format(""String_Node_Str"",getVersion()))));
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  if (osDetails.isLinux()) {
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,true);
  }
 else   if (osDetails.isMac()) {
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,false);
  }
}",0.6129032258064516
79402,"private List<String> installLinuxFromPackageUrl(String expandedInstallDir){
  DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(),SshTasks.OnFailingTask.WARN_OR_IF_DYNAMIC_FAIL_MARKING_INESSENTIAL)).orSubmitAndBlock();
  String installBin=Urls.mergePaths(expandedInstallDir,""String_Node_Str"");
  String saveAsYum=""String_Node_Str"";
  String saveAsApt=""String_Node_Str"";
  OsDetails osDetails=getMachine().getOsDetails();
  String downloadUrl;
  String osReleaseCmd;
  if (""String_Node_Str"".equalsIgnoreCase(osDetails.getName())) {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_DEBIAN);
    osReleaseCmd=osDetails.getVersion().substring(0,osDetails.getVersion().indexOf(""String_Node_Str""));
  }
 else {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_UBUNTU);
    osReleaseCmd=""String_Node_Str"" + ""String_Node_Str"";
  }
  String apt=chainGroup(""String_Node_Str"",""String_Node_Str"",ok(sudo(""String_Node_Str"")),""String_Node_Str"" + Strings.toLowerCase(osDetails.getName()),""String_Node_Str"" + osReleaseCmd,String.format(""String_Node_Str"",saveAsApt,downloadUrl),sudo(String.format(""String_Node_Str"",saveAsApt)));
  String yum=chainGroup(""String_Node_Str"",ok(sudo(""String_Node_Str"")),String.format(""String_Node_Str"",saveAsYum,entity.getAttribute(RiakNode.DOWNLOAD_URL_RHEL_CENTOS)),sudo(String.format(""String_Node_Str"",saveAsYum)));
  return ImmutableList.<String>builder().add(""String_Node_Str"" + installBin).add(INSTALL_CURL).add(alternatives(apt,yum)).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).build();
}","private List<String> installLinuxFromPackageUrl(){
  DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(),SshTasks.OnFailingTask.WARN_OR_IF_DYNAMIC_FAIL_MARKING_INESSENTIAL)).orSubmitAndBlock();
  String expandedInstallDir=getExpandedInstallDir();
  String installBin=Urls.mergePaths(expandedInstallDir,""String_Node_Str"");
  String saveAsYum=""String_Node_Str"";
  String saveAsApt=""String_Node_Str"";
  OsDetails osDetails=getMachine().getOsDetails();
  String downloadUrl;
  String osReleaseCmd;
  if (""String_Node_Str"".equalsIgnoreCase(osDetails.getName())) {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_DEBIAN);
    osReleaseCmd=osDetails.getVersion().substring(0,osDetails.getVersion().indexOf(""String_Node_Str""));
  }
 else {
    downloadUrl=(String)entity.getAttribute(RiakNode.DOWNLOAD_URL_UBUNTU);
    osReleaseCmd=""String_Node_Str"" + ""String_Node_Str"";
  }
  String apt=chainGroup(""String_Node_Str"" + sbinPath,""String_Node_Str"",ok(sudo(""String_Node_Str"")),""String_Node_Str"" + Strings.toLowerCase(osDetails.getName()),""String_Node_Str"" + osReleaseCmd,String.format(""String_Node_Str"",saveAsApt,downloadUrl),sudo(String.format(""String_Node_Str"",saveAsApt)));
  String yum=chainGroup(""String_Node_Str"",ok(sudo(""String_Node_Str"")),String.format(""String_Node_Str"",saveAsYum,entity.getAttribute(RiakNode.DOWNLOAD_URL_RHEL_CENTOS)),sudo(String.format(""String_Node_Str"",saveAsYum)));
  return ImmutableList.<String>builder().add(""String_Node_Str"" + installBin).add(INSTALL_CURL).add(alternatives(apt,yum)).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).build();
}",0.9734882335418528
79403,"@Override public void install(){
  if (entity.getConfig(Attributes.DOWNLOAD_URL) != null) {
    LOG.warn(""String_Node_Str"",entity.getConfig(Attributes.DOWNLOAD_URL));
  }
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  if (osDetails.isLinux()) {
    if (getEntity().isPackageDownloadUrlProvided()) {
      commands.addAll(installLinuxFromPackageUrl(getExpandedInstallDir()));
    }
 else {
      commands.addAll(installFromPackageCloud());
    }
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,true);
  }
 else   if (osDetails.isMac()) {
    entity.setAttribute(RiakNode.RIAK_PACKAGE_INSTALL,false);
    commands.addAll(installMac());
  }
 else   if (osDetails.isWindows()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + getMachine() + ""String_Node_Str""+ getMachine().getMachineDetails().getOsDetails());
  }
  try {
    newScript(INSTALLING).body.append(commands).failIfBodyEmpty().failOnNonZeroResultCode().inessential().execute();
  }
 catch (  RuntimeException e) {
    if (osDetails.isLinux()) {
      newScript(INSTALLING_FALLBACK).body.append(installLinuxFromPackageUrl(getExpandedInstallDir())).failIfBodyEmpty().failOnNonZeroResultCode().execute();
    }
  }
  checkRiakOnPath();
}","@Override public void install(){
  if (entity.getConfig(Attributes.DOWNLOAD_URL) != null) {
    LOG.warn(""String_Node_Str"",entity.getConfig(Attributes.DOWNLOAD_URL));
  }
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  if (osDetails.isLinux()) {
    if (getEntity().isPackageDownloadUrlProvided()) {
      commands.addAll(installLinuxFromPackageUrl());
    }
 else {
      commands.addAll(installFromPackageCloud());
    }
  }
 else   if (osDetails.isMac()) {
    commands.addAll(installMac());
  }
 else   if (osDetails.isWindows()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + getMachine() + ""String_Node_Str""+ getMachine().getMachineDetails().getOsDetails());
  }
  int result=newScript(INSTALLING).body.append(commands).failIfBodyEmpty().execute();
  if (result != 0 && osDetails.isLinux()) {
    result=newScript(INSTALLING_FALLBACK).body.append(installLinuxFromPackageUrl()).execute();
  }
  if (result != 0) {
    throw new IllegalStateException(String.format(""String_Node_Str"",result));
  }
}",0.5564387917329093
79404,"public static CatalogItemMemento newCatalogItemMemento(CatalogItem<?,?> catalogItem){
  BasicCatalogItemMemento.Builder builder=BasicCatalogItemMemento.builder();
  populateBrooklynObjectMementoBuilder(catalogItem,builder);
  builder.catalogItemJavaType(catalogItem.getCatalogItemJavaType()).catalogItemType(catalogItem.getCatalogItemType()).description(catalogItem.getDescription()).iconUrl(catalogItem.getIconUrl()).javaType(catalogItem.getJavaType()).libraries(catalogItem.getLibraries()).symbolicName(catalogItem.getSymbolicName()).specType(catalogItem.getSpecType()).version(catalogItem.getVersion()).planYaml(catalogItem.getPlanYaml()).deprecated(catalogItem.isDeprecated());
  return builder.build();
}","public static CatalogItemMemento newCatalogItemMemento(CatalogItem<?,?> catalogItem){
  if (catalogItem instanceof CatalogItemDo<?,?>) {
    catalogItem=((CatalogItemDo<?,?>)catalogItem).getDto();
  }
  BasicCatalogItemMemento.Builder builder=BasicCatalogItemMemento.builder();
  populateBrooklynObjectMementoBuilder(catalogItem,builder);
  builder.catalogItemJavaType(catalogItem.getCatalogItemJavaType()).catalogItemType(catalogItem.getCatalogItemType()).description(catalogItem.getDescription()).iconUrl(catalogItem.getIconUrl()).javaType(catalogItem.getJavaType()).libraries(catalogItem.getLibraries()).symbolicName(catalogItem.getSymbolicName()).specType(catalogItem.getSpecType()).version(catalogItem.getVersion()).planYaml(catalogItem.getPlanYaml()).deprecated(catalogItem.isDeprecated());
  return builder.build();
}",0.9249836921069796
79405,"private Map<String,Object> augmentPropertiesWithSshConfigGivenToProps(Map<String,?> props){
  Map<String,Object> augmentedProps=Maps.newHashMap(props);
  for (  ConfigKey<?> config : SSH_CONFIG_GIVEN_TO_PROPS) {
    if (!props.containsKey(config.getName()))     augmentedProps.put(config.getName(),getConfig(config));
  }
  return augmentedProps;
}","private Map<String,Object> augmentPropertiesWithSshConfigGivenToProps(Map<String,?> props){
  Map<String,Object> augmentedProps=Maps.newHashMap(props);
  for (  ConfigKey<?> config : SSH_CONFIG_GIVEN_TO_PROPS) {
    if (!augmentedProps.containsKey(config.getName()) && hasConfig(config,true))     augmentedProps.put(config.getName(),getConfig(config));
  }
  return augmentedProps;
}",0.9493844049247606
79406,"protected JcloudsSshMachineLocation createJcloudsSshMachineLocation(ComputeService computeService,NodeMetadata node,String vmHostname,Optional<HostAndPort> sshHostAndPort,ConfigBag setup) throws IOException {
  Map<?,?> sshConfig=extractSshConfig(setup,node);
  String nodeAvailabilityZone=extractAvailabilityZone(setup,node);
  String nodeRegion=extractRegion(setup,node);
  if (nodeRegion == null) {
    nodeRegion=extractProvider(setup,node);
  }
  String address=sshHostAndPort.isPresent() ? sshHostAndPort.get().getHostText() : vmHostname;
  try {
    Networking.getInetAddressWithFixedName(address);
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    LOG.debug(""String_Node_Str"" + address + ""String_Node_Str""+ vmHostname+ ""String_Node_Str""+ setup.getDescription()+ ""String_Node_Str""+ node+ ""String_Node_Str"");
    if (computeService == null)     throw Exceptions.propagate(e);
    address=JcloudsUtil.getFirstReachableAddress(computeService.getContext(),node);
  }
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",new Object[]{getUser(setup),address,Entities.sanitize(sshConfig),sshHostAndPort,setup.getDescription(),node});
  if (isManaged()) {
    return getManagementContext().getLocationManager().createLocation(LocationSpec.create(JcloudsSshMachineLocation.class).configure(""String_Node_Str"",vmHostname).configure(""String_Node_Str"",address).configure(JcloudsSshMachineLocation.SSH_PORT,sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).configure(""String_Node_Str"",getUser(setup)).configure(sshConfig).configure(""String_Node_Str"",sshConfig).configure(""String_Node_Str"",this).configure(""String_Node_Str"",node).configureIfNotNull(CLOUD_AVAILABILITY_ZONE_ID,nodeAvailabilityZone).configureIfNotNull(CLOUD_REGION_ID,nodeRegion).configure(CALLER_CONTEXT,setup.get(CALLER_CONTEXT)).configure(SshMachineLocation.DETECT_MACHINE_DETAILS,setup.get(SshMachineLocation.DETECT_MACHINE_DETAILS)).configure(SshMachineLocation.SCRIPT_DIR,setup.get(SshMachineLocation.SCRIPT_DIR)).configureIfNotNull(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).configureIfNotNull(PORT_FORWARDER,setup.get(PORT_FORWARDER)).configureIfNotNull(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)));
  }
 else {
    LOG.warn(""String_Node_Str"" + this + ""String_Node_Str"");
    return new JcloudsSshMachineLocation(MutableMap.builder().put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",address).put(""String_Node_Str"",sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).put(""String_Node_Str"",getUser(setup)).putAll(sshConfig).put(""String_Node_Str"",sshConfig).put(""String_Node_Str"",setup.get(CALLER_CONTEXT)).putIfNotNull(CLOUD_AVAILABILITY_ZONE_ID.getName(),nodeAvailabilityZone).putIfNotNull(CLOUD_REGION_ID.getName(),nodeRegion).put(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).put(PORT_FORWARDER,setup.get(PORT_FORWARDER)).put(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)).build(),this,node);
  }
}","protected JcloudsSshMachineLocation createJcloudsSshMachineLocation(ComputeService computeService,NodeMetadata node,String vmHostname,Optional<HostAndPort> sshHostAndPort,ConfigBag setup) throws IOException {
  Map<?,?> sshConfig=extractSshConfig(setup,node);
  String nodeAvailabilityZone=extractAvailabilityZone(setup,node);
  String nodeRegion=extractRegion(setup,node);
  if (nodeRegion == null) {
    nodeRegion=extractProvider(setup,node);
  }
  String address=sshHostAndPort.isPresent() ? sshHostAndPort.get().getHostText() : vmHostname;
  try {
    Networking.getInetAddressWithFixedName(address);
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    LOG.debug(""String_Node_Str"" + address + ""String_Node_Str""+ vmHostname+ ""String_Node_Str""+ setup.getDescription()+ ""String_Node_Str""+ node+ ""String_Node_Str"");
    if (computeService == null)     throw Exceptions.propagate(e);
    address=JcloudsUtil.getFirstReachableAddress(computeService.getContext(),node);
  }
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",new Object[]{getUser(setup),address,Entities.sanitize(sshConfig),sshHostAndPort,setup.getDescription(),node});
  if (isManaged()) {
    return getManagementContext().getLocationManager().createLocation(LocationSpec.create(JcloudsSshMachineLocation.class).configure(""String_Node_Str"",vmHostname).configure(""String_Node_Str"",address).configure(JcloudsSshMachineLocation.SSH_PORT,sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).configure(""String_Node_Str"",getUser(setup)).configure(sshConfig).configure(""String_Node_Str"",sshConfig).configure(""String_Node_Str"",this).configure(""String_Node_Str"",node).configureIfNotNull(CLOUD_AVAILABILITY_ZONE_ID,nodeAvailabilityZone).configureIfNotNull(CLOUD_REGION_ID,nodeRegion).configure(CALLER_CONTEXT,setup.get(CALLER_CONTEXT)).configure(SshMachineLocation.DETECT_MACHINE_DETAILS,setup.get(SshMachineLocation.DETECT_MACHINE_DETAILS)).configureIfNotNull(SshMachineLocation.SCRIPT_DIR,setup.get(SshMachineLocation.SCRIPT_DIR)).configureIfNotNull(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).configureIfNotNull(PORT_FORWARDER,setup.get(PORT_FORWARDER)).configureIfNotNull(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)));
  }
 else {
    LOG.warn(""String_Node_Str"" + this + ""String_Node_Str"");
    return new JcloudsSshMachineLocation(MutableMap.builder().put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",address).put(""String_Node_Str"",sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).put(""String_Node_Str"",getUser(setup)).putAll(sshConfig).put(""String_Node_Str"",sshConfig).put(""String_Node_Str"",setup.get(CALLER_CONTEXT)).putIfNotNull(CLOUD_AVAILABILITY_ZONE_ID.getName(),nodeAvailabilityZone).putIfNotNull(CLOUD_REGION_ID.getName(),nodeRegion).put(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).put(PORT_FORWARDER,setup.get(PORT_FORWARDER)).put(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)).build(),this,node);
  }
}",0.9985037406483792
79407,"private Map<String,Object> augmentPropertiesWithSshConfigGivenToProps(Map<String,?> props){
  Map<String,Object> augmentedProps=Maps.newHashMap(props);
  for (  ConfigKey<?> config : SSH_CONFIG_GIVEN_TO_PROPS) {
    if (!props.containsKey(config.getName()))     augmentedProps.put(config.getName(),getConfig(config));
  }
  return augmentedProps;
}","private Map<String,Object> augmentPropertiesWithSshConfigGivenToProps(Map<String,?> props){
  Map<String,Object> augmentedProps=Maps.newHashMap(props);
  for (  ConfigKey<?> config : SSH_CONFIG_GIVEN_TO_PROPS) {
    if (!augmentedProps.containsKey(config.getName()) && hasConfig(config,true))     augmentedProps.put(config.getName(),getConfig(config));
  }
  return augmentedProps;
}",0.9493844049247606
79408,"protected JcloudsSshMachineLocation createJcloudsSshMachineLocation(ComputeService computeService,NodeMetadata node,String vmHostname,Optional<HostAndPort> sshHostAndPort,ConfigBag setup) throws IOException {
  Map<?,?> sshConfig=extractSshConfig(setup,node);
  String nodeAvailabilityZone=extractAvailabilityZone(setup,node);
  String nodeRegion=extractRegion(setup,node);
  if (nodeRegion == null) {
    nodeRegion=extractProvider(setup,node);
  }
  String address=sshHostAndPort.isPresent() ? sshHostAndPort.get().getHostText() : vmHostname;
  try {
    Networking.getInetAddressWithFixedName(address);
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    LOG.debug(""String_Node_Str"" + address + ""String_Node_Str""+ vmHostname+ ""String_Node_Str""+ setup.getDescription()+ ""String_Node_Str""+ node+ ""String_Node_Str"");
    if (computeService == null)     throw Exceptions.propagate(e);
    address=JcloudsUtil.getFirstReachableAddress(computeService.getContext(),node);
  }
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",new Object[]{getUser(setup),address,Entities.sanitize(sshConfig),sshHostAndPort,setup.getDescription(),node});
  if (isManaged()) {
    return getManagementContext().getLocationManager().createLocation(LocationSpec.create(JcloudsSshMachineLocation.class).configure(""String_Node_Str"",vmHostname).configure(""String_Node_Str"",address).configure(JcloudsSshMachineLocation.SSH_PORT,sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).configure(""String_Node_Str"",getUser(setup)).configure(sshConfig).configure(""String_Node_Str"",sshConfig).configure(""String_Node_Str"",this).configure(""String_Node_Str"",node).configureIfNotNull(CLOUD_AVAILABILITY_ZONE_ID,nodeAvailabilityZone).configureIfNotNull(CLOUD_REGION_ID,nodeRegion).configure(CALLER_CONTEXT,setup.get(CALLER_CONTEXT)).configure(SshMachineLocation.DETECT_MACHINE_DETAILS,setup.get(SshMachineLocation.DETECT_MACHINE_DETAILS)).configure(SshMachineLocation.SCRIPT_DIR,setup.get(SshMachineLocation.SCRIPT_DIR)).configureIfNotNull(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).configureIfNotNull(PORT_FORWARDER,setup.get(PORT_FORWARDER)).configureIfNotNull(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)));
  }
 else {
    LOG.warn(""String_Node_Str"" + this + ""String_Node_Str"");
    return new JcloudsSshMachineLocation(MutableMap.builder().put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",address).put(""String_Node_Str"",sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).put(""String_Node_Str"",getUser(setup)).putAll(sshConfig).put(""String_Node_Str"",sshConfig).put(""String_Node_Str"",setup.get(CALLER_CONTEXT)).putIfNotNull(CLOUD_AVAILABILITY_ZONE_ID.getName(),nodeAvailabilityZone).putIfNotNull(CLOUD_REGION_ID.getName(),nodeRegion).put(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).put(PORT_FORWARDER,setup.get(PORT_FORWARDER)).put(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)).build(),this,node);
  }
}","protected JcloudsSshMachineLocation createJcloudsSshMachineLocation(ComputeService computeService,NodeMetadata node,String vmHostname,Optional<HostAndPort> sshHostAndPort,ConfigBag setup) throws IOException {
  Map<?,?> sshConfig=extractSshConfig(setup,node);
  String nodeAvailabilityZone=extractAvailabilityZone(setup,node);
  String nodeRegion=extractRegion(setup,node);
  if (nodeRegion == null) {
    nodeRegion=extractProvider(setup,node);
  }
  String address=sshHostAndPort.isPresent() ? sshHostAndPort.get().getHostText() : vmHostname;
  try {
    Networking.getInetAddressWithFixedName(address);
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    LOG.debug(""String_Node_Str"" + address + ""String_Node_Str""+ vmHostname+ ""String_Node_Str""+ setup.getDescription()+ ""String_Node_Str""+ node+ ""String_Node_Str"");
    if (computeService == null)     throw Exceptions.propagate(e);
    address=JcloudsUtil.getFirstReachableAddress(computeService.getContext(),node);
  }
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",new Object[]{getUser(setup),address,Entities.sanitize(sshConfig),sshHostAndPort,setup.getDescription(),node});
  if (isManaged()) {
    return getManagementContext().getLocationManager().createLocation(LocationSpec.create(JcloudsSshMachineLocation.class).configure(""String_Node_Str"",vmHostname).configure(""String_Node_Str"",address).configure(JcloudsSshMachineLocation.SSH_PORT,sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).configure(""String_Node_Str"",getUser(setup)).configure(sshConfig).configure(""String_Node_Str"",sshConfig).configure(""String_Node_Str"",this).configure(""String_Node_Str"",node).configureIfNotNull(CLOUD_AVAILABILITY_ZONE_ID,nodeAvailabilityZone).configureIfNotNull(CLOUD_REGION_ID,nodeRegion).configure(CALLER_CONTEXT,setup.get(CALLER_CONTEXT)).configure(SshMachineLocation.DETECT_MACHINE_DETAILS,setup.get(SshMachineLocation.DETECT_MACHINE_DETAILS)).configureIfNotNull(SshMachineLocation.SCRIPT_DIR,setup.get(SshMachineLocation.SCRIPT_DIR)).configureIfNotNull(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).configureIfNotNull(PORT_FORWARDER,setup.get(PORT_FORWARDER)).configureIfNotNull(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)));
  }
 else {
    LOG.warn(""String_Node_Str"" + this + ""String_Node_Str"");
    return new JcloudsSshMachineLocation(MutableMap.builder().put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",address).put(""String_Node_Str"",sshHostAndPort.isPresent() ? sshHostAndPort.get().getPort() : node.getLoginPort()).put(""String_Node_Str"",getUser(setup)).putAll(sshConfig).put(""String_Node_Str"",sshConfig).put(""String_Node_Str"",setup.get(CALLER_CONTEXT)).putIfNotNull(CLOUD_AVAILABILITY_ZONE_ID.getName(),nodeAvailabilityZone).putIfNotNull(CLOUD_REGION_ID.getName(),nodeRegion).put(USE_PORT_FORWARDING,setup.get(USE_PORT_FORWARDING)).put(PORT_FORWARDER,setup.get(PORT_FORWARDER)).put(PORT_FORWARDING_MANAGER,setup.get(PORT_FORWARDING_MANAGER)).build(),this,node);
  }
}",0.9985037406483792
79409,"@Override protected void doStart(){
  setAttribute(IS_CLUSTER_INITIALIZED,false);
  super.doStart();
  connectSensors();
  setAttribute(BUCKET_CREATION_IN_PROGRESS,false);
  Tasks.setBlockingDetails(""String_Node_Str"");
  Time.sleep(getConfig(NODES_STARTED_STABILIZATION_DELAY));
  Optional<Set<Entity>> upNodes=Optional.<Set<Entity>>fromNullable(getAttribute(COUCHBASE_CLUSTER_UP_NODES));
  if (upNodes.isPresent() && !upNodes.get().isEmpty()) {
    Tasks.setBlockingDetails(""String_Node_Str"");
    Entity primaryNode=upNodes.get().iterator().next();
    ((EntityInternal)primaryNode).setAttribute(CouchbaseNode.IS_PRIMARY_NODE,true);
    setAttribute(COUCHBASE_PRIMARY_NODE,primaryNode);
    Set<Entity> serversToAdd=MutableSet.<Entity>copyOf(getUpNodes());
    if (serversToAdd.size() >= getQuorumSize() && serversToAdd.size() > 1) {
      log.info(""String_Node_Str"",new Object[]{serversToAdd.size(),getId(),getQuorumSize()});
      addServers(serversToAdd);
      try {
        Tasks.setBlockingDetails(""String_Node_Str"");
        Time.sleep(getConfig(DELAY_BEFORE_ADVERTISING_CLUSTER));
      }
  finally {
        Tasks.resetBlockingDetails();
      }
      ((CouchbaseNode)getPrimaryNode()).rebalance();
    }
 else     if (getQuorumSize() > 1) {
      log.warn(this + ""String_Node_Str"");
    }
    if (getConfig(CREATE_BUCKETS) != null) {
      try {
        Tasks.setBlockingDetails(""String_Node_Str"");
        createBuckets();
        DependentConfiguration.waitInTaskForAttributeReady(this,CouchbaseCluster.BUCKET_CREATION_IN_PROGRESS,Predicates.equalTo(false));
      }
  finally {
        Tasks.resetBlockingDetails();
      }
    }
    if (getConfig(REPLICATION) != null) {
      try {
        Tasks.setBlockingDetails(""String_Node_Str"");
        List<Map<String,Object>> replRules=getConfig(REPLICATION);
        for (        Map<String,Object> replRule : replRules) {
          DynamicTasks.queue(Effectors.invocation(getPrimaryNode(),CouchbaseNode.ADD_REPLICATION_RULE,replRule));
        }
        DynamicTasks.waitForLast();
      }
  finally {
        Tasks.resetBlockingDetails();
      }
    }
    setAttribute(IS_CLUSTER_INITIALIZED,true);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override protected void doStart(){
  setAttribute(IS_CLUSTER_INITIALIZED,false);
  super.doStart();
  connectSensors();
  setAttribute(BUCKET_CREATION_IN_PROGRESS,false);
  Tasks.setBlockingDetails(""String_Node_Str"");
  Time.sleep(getConfig(NODES_STARTED_STABILIZATION_DELAY));
  Optional<Set<Entity>> upNodes=Optional.<Set<Entity>>fromNullable(getAttribute(COUCHBASE_CLUSTER_UP_NODES));
  if (upNodes.isPresent() && !upNodes.get().isEmpty()) {
    Tasks.setBlockingDetails(""String_Node_Str"");
    Entity primaryNode=upNodes.get().iterator().next();
    ((EntityInternal)primaryNode).setAttribute(CouchbaseNode.IS_PRIMARY_NODE,true);
    setAttribute(COUCHBASE_PRIMARY_NODE,primaryNode);
    Set<Entity> serversToAdd=MutableSet.<Entity>copyOf(getUpNodes());
    if (serversToAdd.size() >= getQuorumSize() && serversToAdd.size() > 1) {
      log.info(""String_Node_Str"",new Object[]{serversToAdd.size(),getId(),getQuorumSize()});
      addServers(serversToAdd);
      try {
        Tasks.setBlockingDetails(""String_Node_Str"");
        Time.sleep(getConfig(DELAY_BEFORE_ADVERTISING_CLUSTER));
      }
  finally {
        Tasks.resetBlockingDetails();
      }
      ((CouchbaseNode)getPrimaryNode()).rebalance();
    }
 else {
      if (getQuorumSize() > 1) {
        log.warn(this + ""String_Node_Str"");
      }
      if (!serversToAdd.isEmpty()) {
        ((EntityInternal)Iterables.getOnlyElement(serversToAdd)).setAttribute(CouchbaseNode.IS_IN_CLUSTER,true);
      }
    }
    if (getConfig(CREATE_BUCKETS) != null) {
      try {
        Tasks.setBlockingDetails(""String_Node_Str"");
        createBuckets();
        DependentConfiguration.waitInTaskForAttributeReady(this,CouchbaseCluster.BUCKET_CREATION_IN_PROGRESS,Predicates.equalTo(false));
      }
  finally {
        Tasks.resetBlockingDetails();
      }
    }
    if (getConfig(REPLICATION) != null) {
      try {
        Tasks.setBlockingDetails(""String_Node_Str"");
        List<Map<String,Object>> replRules=getConfig(REPLICATION);
        for (        Map<String,Object> replRule : replRules) {
          DynamicTasks.queue(Effectors.invocation(getPrimaryNode(),CouchbaseNode.ADD_REPLICATION_RULE,replRule));
        }
        DynamicTasks.waitForLast();
      }
  finally {
        Tasks.resetBlockingDetails();
      }
    }
    setAttribute(IS_CLUSTER_INITIALIZED,true);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.962947005601034
79410,"@Override public void launch(){
  Entity cbNode=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER);
  Entities.waitForServiceUp(cbNode,Duration.ONE_HOUR);
  DependentConfiguration.waitInTaskForAttributeReady(cbNode,CouchbaseCluster.IS_CLUSTER_INITIALIZED,Predicates.equalTo(true));
  Time.sleep(10 * 1000);
  if (cbNode instanceof CouchbaseCluster) {
    Optional<Entity> cbClusterNode=Iterables.tryFind(cbNode.getAttribute(CouchbaseCluster.GROUP_MEMBERS),new Predicate<Entity>(){
      @Override public boolean apply(      @Nullable Entity entity){
        return entity instanceof CouchbaseNode && (Boolean.TRUE.equals(entity.getAttribute(CouchbaseNode.IS_IN_CLUSTER)) || Boolean.TRUE.equals(entity.getAttribute(CouchbaseNode.IS_PRIMARY_NODE)));
      }
    }
);
    if (cbClusterNode.isPresent()) {
      cbNode=cbClusterNode.get();
    }
 else {
      throw new IllegalArgumentException(format(""String_Node_Str"",cbNode.getId()));
    }
  }
  String hostname=cbNode.getAttribute(CouchbaseNode.HOSTNAME);
  String webPort=cbNode.getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT).toString();
  String username=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME);
  String password=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD);
  String bucketName=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_BUCKET);
  String pool=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_POOL);
  String pretty=entity.getConfig(CouchbaseSyncGateway.PRETTY) ? ""String_Node_Str"" : ""String_Node_Str"";
  String verbose=entity.getConfig(CouchbaseSyncGateway.VERBOSE) ? ""String_Node_Str"" : ""String_Node_Str"";
  String adminRestApiPort=entity.getConfig(CouchbaseSyncGateway.ADMIN_REST_API_PORT).iterator().next().toString();
  String syncRestApiPort=entity.getConfig(CouchbaseSyncGateway.SYNC_REST_API_PORT).iterator().next().toString();
  String serverWebAdminUrl=format(""String_Node_Str"",username,password,hostname,webPort);
  String options=format(""String_Node_Str"",serverWebAdminUrl,bucketName,adminRestApiPort,syncRestApiPort,pool,pretty,verbose);
  newScript(ImmutableMap.of(""String_Node_Str"",true),LAUNCHING).body.append(format(""String_Node_Str"",options) + ""String_Node_Str"").failOnNonZeroResultCode().execute();
}","@Override public void launch(){
  Entity cbNode=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER);
  Entities.waitForServiceUp(cbNode,Duration.ONE_HOUR);
  DependentConfiguration.waitInTaskForAttributeReady(cbNode,CouchbaseCluster.IS_CLUSTER_INITIALIZED,Predicates.equalTo(true));
  Time.sleep(10 * 1000);
  if (cbNode instanceof CouchbaseCluster) {
    Optional<Entity> cbClusterNode=Iterables.tryFind(cbNode.getAttribute(CouchbaseCluster.GROUP_MEMBERS),Predicates.and(Predicates.instanceOf(CouchbaseNode.class),EntityPredicates.attributeEqualTo(CouchbaseNode.IS_IN_CLUSTER,Boolean.TRUE)));
    if (!cbClusterNode.isPresent()) {
      throw new IllegalArgumentException(format(""String_Node_Str"",cbNode.getId()));
    }
    cbNode=cbClusterNode.get();
  }
  String hostname=cbNode.getAttribute(CouchbaseNode.HOSTNAME);
  String webPort=cbNode.getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT).toString();
  String username=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME);
  String password=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD);
  String bucketName=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_BUCKET);
  String pool=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_POOL);
  String pretty=entity.getConfig(CouchbaseSyncGateway.PRETTY) ? ""String_Node_Str"" : ""String_Node_Str"";
  String verbose=entity.getConfig(CouchbaseSyncGateway.VERBOSE) ? ""String_Node_Str"" : ""String_Node_Str"";
  String adminRestApiPort=entity.getConfig(CouchbaseSyncGateway.ADMIN_REST_API_PORT).iterator().next().toString();
  String syncRestApiPort=entity.getConfig(CouchbaseSyncGateway.SYNC_REST_API_PORT).iterator().next().toString();
  String serverWebAdminUrl=format(""String_Node_Str"",username,password,hostname,webPort);
  String options=format(""String_Node_Str"",serverWebAdminUrl,bucketName,adminRestApiPort,syncRestApiPort,pool,pretty,verbose);
  newScript(ImmutableMap.of(""String_Node_Str"",true),LAUNCHING).body.append(format(""String_Node_Str"",options) + ""String_Node_Str"").failOnNonZeroResultCode().execute();
}",0.8917465513210194
79411,"@Override public boolean apply(@Nullable Entity entity){
  return entity instanceof CouchbaseNode && (Boolean.TRUE.equals(entity.getAttribute(entity.IS_IN_CLUSTER)) || Boolean.TRUE.equals(entity.getAttribute(entity.IS_PRIMARY_NODE)));
}","@Override public boolean apply(@Nullable Entity entity){
  return entity instanceof CouchbaseNode && (Boolean.TRUE.equals(entity.getAttribute(CouchbaseNode.IS_IN_CLUSTER)) || Boolean.TRUE.equals(entity.getAttribute(CouchbaseNode.IS_PRIMARY_NODE)));
}",0.9218106995884774
79412,"@Override public void launch(){
  Entity cbNode=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER);
  Entities.waitForServiceUp(cbNode,Duration.ONE_HOUR);
  DependentConfiguration.waitInTaskForAttributeReady(cbNode,CouchbaseCluster.IS_CLUSTER_INITIALIZED,Predicates.equalTo(true));
  Time.sleep(10 * 1000);
  if (cbNode instanceof CouchbaseCluster) {
    Optional<Entity> cbClusterNode=Iterables.tryFind(cbNode.getAttribute(CouchbaseCluster.GROUP_MEMBERS),new Predicate<Entity>(){
      @Override public boolean apply(      @Nullable Entity entity){
        return entity instanceof CouchbaseNode && (Boolean.TRUE.equals(entity.getAttribute(entity.IS_IN_CLUSTER)) || Boolean.TRUE.equals(entity.getAttribute(entity.IS_PRIMARY_NODE)));
      }
    }
);
    if (cbClusterNode.isPresent()) {
      cbNode=cbClusterNode.get();
    }
 else {
      throw new IllegalArgumentException(format(""String_Node_Str"",cbNode.getId()));
    }
  }
  String hostname=cbNode.getAttribute(CouchbaseNode.HOSTNAME);
  String webPort=cbNode.getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT).toString();
  String username=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME);
  String password=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD);
  String bucketName=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_BUCKET);
  String pool=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_POOL);
  String pretty=entity.getConfig(CouchbaseSyncGateway.PRETTY) ? ""String_Node_Str"" : ""String_Node_Str"";
  String verbose=entity.getConfig(CouchbaseSyncGateway.VERBOSE) ? ""String_Node_Str"" : ""String_Node_Str"";
  String adminRestApiPort=entity.getConfig(CouchbaseSyncGateway.ADMIN_REST_API_PORT).iterator().next().toString();
  String syncRestApiPort=entity.getConfig(CouchbaseSyncGateway.SYNC_REST_API_PORT).iterator().next().toString();
  String serverWebAdminUrl=format(""String_Node_Str"",username,password,hostname,webPort);
  String options=format(""String_Node_Str"",serverWebAdminUrl,bucketName,adminRestApiPort,syncRestApiPort,pool,pretty,verbose);
  newScript(ImmutableMap.of(""String_Node_Str"",true),LAUNCHING).body.append(format(""String_Node_Str"",options) + ""String_Node_Str"").failOnNonZeroResultCode().execute();
}","@Override public void launch(){
  Entity cbNode=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER);
  Entities.waitForServiceUp(cbNode,Duration.ONE_HOUR);
  DependentConfiguration.waitInTaskForAttributeReady(cbNode,CouchbaseCluster.IS_CLUSTER_INITIALIZED,Predicates.equalTo(true));
  Time.sleep(10 * 1000);
  if (cbNode instanceof CouchbaseCluster) {
    Optional<Entity> cbClusterNode=Iterables.tryFind(cbNode.getAttribute(CouchbaseCluster.GROUP_MEMBERS),new Predicate<Entity>(){
      @Override public boolean apply(      @Nullable Entity entity){
        return entity instanceof CouchbaseNode && (Boolean.TRUE.equals(entity.getAttribute(CouchbaseNode.IS_IN_CLUSTER)) || Boolean.TRUE.equals(entity.getAttribute(CouchbaseNode.IS_PRIMARY_NODE)));
      }
    }
);
    if (cbClusterNode.isPresent()) {
      cbNode=cbClusterNode.get();
    }
 else {
      throw new IllegalArgumentException(format(""String_Node_Str"",cbNode.getId()));
    }
  }
  String hostname=cbNode.getAttribute(CouchbaseNode.HOSTNAME);
  String webPort=cbNode.getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT).toString();
  String username=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME);
  String password=cbNode.getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD);
  String bucketName=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_BUCKET);
  String pool=entity.getConfig(CouchbaseSyncGateway.COUCHBASE_SERVER_POOL);
  String pretty=entity.getConfig(CouchbaseSyncGateway.PRETTY) ? ""String_Node_Str"" : ""String_Node_Str"";
  String verbose=entity.getConfig(CouchbaseSyncGateway.VERBOSE) ? ""String_Node_Str"" : ""String_Node_Str"";
  String adminRestApiPort=entity.getConfig(CouchbaseSyncGateway.ADMIN_REST_API_PORT).iterator().next().toString();
  String syncRestApiPort=entity.getConfig(CouchbaseSyncGateway.SYNC_REST_API_PORT).iterator().next().toString();
  String serverWebAdminUrl=format(""String_Node_Str"",username,password,hostname,webPort);
  String options=format(""String_Node_Str"",serverWebAdminUrl,bucketName,adminRestApiPort,syncRestApiPort,pool,pretty,verbose);
  newScript(ImmutableMap.of(""String_Node_Str"",true),LAUNCHING).body.append(format(""String_Node_Str"",options) + ""String_Node_Str"").failOnNonZeroResultCode().execute();
}",0.9914606741573032
79413,"/** 
 * returns the first port available on the local machine >= the port supplied 
 */
public static int nextAvailablePort(int port){
  checkArgument(port >= MIN_PORT_NUMBER && port <= MAX_PORT_NUMBER,""String_Node_Str"",port,MIN_PORT_NUMBER,MAX_PORT_NUMBER);
  int originalPort=port;
  while (!isPortAvailable(port) && port <= MAX_PORT_NUMBER)   port++;
  if (port > MAX_PORT_NUMBER)   throw new RuntimeException(""String_Node_Str"" + originalPort);
  return port;
}","/** 
 * returns the first port available on the local machine >= the port supplied 
 */
public static int nextAvailablePort(int port){
  checkArgument(port >= MIN_PORT_NUMBER && port <= MAX_PORT_NUMBER,""String_Node_Str"",port,MIN_PORT_NUMBER,MAX_PORT_NUMBER);
  int originalPort=port;
  while (!isPortAvailable(port) && port < MAX_PORT_NUMBER)   port++;
  if (port >= MAX_PORT_NUMBER)   throw new RuntimeException(""String_Node_Str"" + originalPort);
  return port;
}",0.9978448275862069
79414,"@Test public void testCheckRunningForcesInessential(){
  MyService entity=app.createAndManageChild(EntitySpec.create(MyService.class,MyServiceInessentialDriverImpl.class));
  Assert.assertFalse(entity.getAttribute(Startable.SERVICE_UP));
  entity.start(ImmutableList.of(loc));
  SimulatedInessentialIsRunningDriver driver=(SimulatedInessentialIsRunningDriver)entity.getDriver();
  Assert.assertTrue(driver.isRunning());
  Assert.assertTrue(entity.getAttribute(Startable.SERVICE_UP));
  EntityTestUtils.assertAttributeEqualsEventually(entity,SoftwareProcess.SERVICE_PROCESS_IS_RUNNING,true);
  EntityTestUtils.assertAttributeEqualsEventually(entity,Startable.SERVICE_UP,true);
  log.debug(""String_Node_Str"");
  driver.setFailExecution(true);
  EntityTestUtils.assertAttributeEqualsEventually(entity,SoftwareProcess.SERVICE_PROCESS_IS_RUNNING,false);
  EntityTestUtils.assertAttributeEqualsEventually(entity,Startable.SERVICE_UP,false);
  log.debug(""String_Node_Str"");
  driver.setFailExecution(false);
  EntityTestUtils.assertAttributeEqualsEventually(entity,SoftwareProcess.SERVICE_PROCESS_IS_RUNNING,true);
  EntityTestUtils.assertAttributeEqualsEventually(entity,Startable.SERVICE_UP,true);
}","@Test public void testCheckRunningForcesInessential(){
  MyService entity=app.createAndManageChild(EntitySpec.create(MyService.class,MyServiceInessentialDriverImpl.class));
  entity.start(ImmutableList.of(loc));
  SimulatedInessentialIsRunningDriver driver=(SimulatedInessentialIsRunningDriver)entity.getDriver();
  Assert.assertTrue(driver.isRunning());
  EntityTestUtils.assertAttributeEqualsEventually(entity,SoftwareProcess.SERVICE_PROCESS_IS_RUNNING,true);
  EntityTestUtils.assertAttributeEqualsEventually(entity,Startable.SERVICE_UP,true);
  log.debug(""String_Node_Str"");
  driver.setFailExecution(true);
  EntityTestUtils.assertAttributeEqualsEventually(entity,SoftwareProcess.SERVICE_PROCESS_IS_RUNNING,false);
  log.debug(""String_Node_Str"");
  driver.setFailExecution(false);
  EntityTestUtils.assertAttributeEqualsEventually(entity,SoftwareProcess.SERVICE_PROCESS_IS_RUNNING,true);
}",0.8563218390804598
79415,"@Override protected void disconnectSensors(){
  disconnectServiceUpIsRunning();
  if (serviceStats != null)   serviceStats.stop();
  if (replicaSetStats != null)   replicaSetStats.stop();
}","@Override protected void disconnectSensors(){
  super.disconnectSensors();
  disconnectServiceUpIsRunning();
  if (serviceStats != null)   serviceStats.stop();
  if (replicaSetStats != null)   replicaSetStats.stop();
}",0.9287469287469288
79416,"private void calculateClusterAddresses(){
  String addresses=""String_Node_Str"";
  for (  Entity entity : this.getMembers()) {
    if (entity instanceof RiakNode && entity.getAttribute(Attributes.SERVICE_UP)) {
      RiakNode riakNode=(RiakNode)entity;
      addresses+=riakNode.getAttribute(Attributes.SUBNET_HOSTNAME) + ""String_Node_Str"" + riakNode.getAttribute(RiakNode.RIAK_WEB_PORT)+ ""String_Node_Str"";
    }
  }
  if (addresses.length() > 0) {
    setAttribute(RiakCluster.NODE_LIST,addresses.substring(0,addresses.length() - 1));
  }
 else {
    setAttribute(RiakCluster.NODE_LIST,null);
  }
}","private void calculateClusterAddresses(){
  List<String> addresses=Lists.newArrayList();
  for (  Entity entity : this.getMembers()) {
    if (entity instanceof RiakNode && entity.getAttribute(Attributes.SERVICE_UP)) {
      RiakNode riakNode=(RiakNode)entity;
      addresses.add(riakNode.getAttribute(Attributes.SUBNET_HOSTNAME) + ""String_Node_Str"" + riakNode.getAttribute(RiakNode.RIAK_WEB_PORT));
    }
  }
  setAttribute(RiakCluster.NODE_LIST,Joiner.on(""String_Node_Str"").join(addresses));
}",0.7579908675799086
79417,"protected synchronized void onServerPoolMemberChanged(Entity member){
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"",new Object[]{this,member,member.getLocations()});
  Map<Entity,String> nodes=getAttribute(RIAK_CLUSTER_NODES);
  if (belongsInServerPool(member)) {
    if (nodes == null) {
      nodes=Maps.newLinkedHashMap();
    }
    String riakName=getRiakName(member);
    Preconditions.checkNotNull(riakName);
    if (!isFirstNodeSet.getAndSet(true)) {
      nodes.put(member,riakName);
      setAttribute(RIAK_CLUSTER_NODES,nodes);
      ((EntityInternal)member).setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Boolean.TRUE);
      log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
    }
 else {
      Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),new Predicate<Entity>(){
        @Override public boolean apply(        @Nullable Entity node){
          return (node instanceof RiakNode && hasMemberJoinedCluster(node));
        }
      }
);
      if (anyNodeInCluster.isPresent()) {
        if (!nodes.containsKey(member) && !hasMemberJoinedCluster(member)) {
          String anyNodeName=anyNodeInCluster.get().getAttribute(RiakNode.RIAK_NODE_NAME);
          Entities.invokeEffectorWithArgs(this,member,RiakNode.JOIN_RIAK_CLUSTER,anyNodeName);
          if (getAttribute(IS_CLUSTER_INIT)) {
            Entities.invokeEffector(RiakClusterImpl.this,anyNodeInCluster.get(),RiakNode.COMMIT_RIAK_CLUSTER);
          }
          nodes.put(member,riakName);
          setAttribute(RIAK_CLUSTER_NODES,nodes);
          log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
        }
      }
 else {
        log.error(""String_Node_Str"",member.getId());
      }
    }
  }
 else {
    if (nodes != null && nodes.containsKey(member)) {
      final Entity memberToBeRemoved=member;
      Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),new Predicate<Entity>(){
        @Override public boolean apply(        @Nullable Entity node){
          return (node instanceof RiakNode && hasMemberJoinedCluster(node) && !node.equals(memberToBeRemoved));
        }
      }
);
      if (anyNodeInCluster.isPresent()) {
        Entities.invokeEffectorWithArgs(this,anyNodeInCluster.get(),RiakNode.LEAVE_RIAK_CLUSTER,getRiakName(memberToBeRemoved));
      }
      nodes.remove(member);
      setAttribute(RIAK_CLUSTER_NODES,nodes);
      log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
    }
  }
  ServiceNotUpLogic.updateNotUpIndicatorRequiringNonEmptyMap(this,RIAK_CLUSTER_NODES);
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"",this,member);
  calculateClusterAddresses();
}","protected void onServerPoolMemberChanged(Entity member){
synchronized (mutex) {
    log.trace(""String_Node_Str"",new Object[]{this,member,member.getLocations()});
    Map<Entity,String> nodes=getAttribute(RIAK_CLUSTER_NODES);
    if (belongsInServerPool(member)) {
      if (nodes == null) {
        nodes=Maps.newLinkedHashMap();
      }
      String riakName=getRiakName(member);
      Preconditions.checkNotNull(riakName);
      Boolean firstNode=getAttribute(IS_FIRST_NODE_SET);
      if (!Boolean.TRUE.equals(firstNode)) {
        setAttribute(IS_FIRST_NODE_SET,Boolean.TRUE);
        nodes.put(member,riakName);
        setAttribute(RIAK_CLUSTER_NODES,nodes);
        ((EntityInternal)member).setAttribute(RiakNode.RIAK_NODE_HAS_JOINED_CLUSTER,Boolean.TRUE);
        log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
      }
 else {
        Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),new Predicate<Entity>(){
          @Override public boolean apply(          @Nullable Entity node){
            return (node instanceof RiakNode && hasMemberJoinedCluster(node));
          }
        }
);
        if (anyNodeInCluster.isPresent()) {
          if (!nodes.containsKey(member) && !hasMemberJoinedCluster(member)) {
            String anyNodeName=anyNodeInCluster.get().getAttribute(RiakNode.RIAK_NODE_NAME);
            Entities.invokeEffectorWithArgs(this,member,RiakNode.JOIN_RIAK_CLUSTER,anyNodeName);
            if (getAttribute(IS_CLUSTER_INIT)) {
              Entities.invokeEffector(RiakClusterImpl.this,anyNodeInCluster.get(),RiakNode.COMMIT_RIAK_CLUSTER);
            }
            nodes.put(member,riakName);
            setAttribute(RIAK_CLUSTER_NODES,nodes);
            log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
          }
        }
 else {
          log.error(""String_Node_Str"",member.getId());
        }
      }
    }
 else {
      if (nodes != null && nodes.containsKey(member)) {
        final Entity memberToBeRemoved=member;
        Optional<Entity> anyNodeInCluster=Iterables.tryFind(nodes.keySet(),new Predicate<Entity>(){
          @Override public boolean apply(          @Nullable Entity node){
            return (node instanceof RiakNode && hasMemberJoinedCluster(node) && !node.equals(memberToBeRemoved));
          }
        }
);
        if (anyNodeInCluster.isPresent()) {
          Entities.invokeEffectorWithArgs(this,anyNodeInCluster.get(),RiakNode.LEAVE_RIAK_CLUSTER,getRiakName(memberToBeRemoved));
        }
        nodes.remove(member);
        setAttribute(RIAK_CLUSTER_NODES,nodes);
        log.info(""String_Node_Str"",new Object[]{this,member,getRiakName(member)});
      }
    }
    ServiceNotUpLogic.updateNotUpIndicatorRequiringNonEmptyMap(this,RIAK_CLUSTER_NODES);
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",this,member);
    calculateClusterAddresses();
  }
}",0.9252453166815344
79418,"@Override public String apply(@javax.annotation.Nullable StorageMetadata input){
  return input.getName();
}","@Override public String apply(@javax.annotation.Nullable StorageMetadata input){
  String result=input.getName();
  result=Strings.removeFromStart(result,containerSubPath);
  result=Strings.removeFromStart(result,""String_Node_Str"");
  return result;
}",0.5626740947075209
79419,"@Override public void prepareForSharedUse(@Nullable PersistMode persistMode,HighAvailabilityMode haMode){
  if (mgmt == null)   throw new NullPointerException(""String_Node_Str"" + this);
  getBlobStoreContext();
  if (persistMode == null || persistMode == PersistMode.DISABLED) {
    log.warn(""String_Node_Str"" + this + ""String_Node_Str""+ persistMode);
    return;
  }
  Boolean backups=mgmt.getConfig().getConfig(BrooklynServerConfig.PERSISTENCE_BACKUPS_REQUIRED);
  if (Boolean.TRUE.equals(backups)) {
    log.warn(""String_Node_Str"" + this + ""String_Node_Str"");
    throw new FatalConfigurationRuntimeException(""String_Node_Str"" + this + ""String_Node_Str"");
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void prepareForSharedUse(@Nullable PersistMode persistMode,HighAvailabilityMode haMode){
  if (mgmt == null)   throw new NullPointerException(""String_Node_Str"" + this);
  getBlobStoreContext();
  if (persistMode == null || persistMode == PersistMode.DISABLED) {
    log.warn(""String_Node_Str"" + this + ""String_Node_Str""+ persistMode);
    return;
  }
  Boolean backups=mgmt.getConfig().getConfig(BrooklynServerConfig.PERSISTENCE_BACKUPS_REQUIRED);
  if (Boolean.TRUE.equals(backups)) {
    log.warn(""String_Node_Str"" + this + ""String_Node_Str"");
    throw new FatalConfigurationRuntimeException(""String_Node_Str"" + this + ""String_Node_Str"");
  }
}",0.9728937728937728
79420,"@Override public List<String> listContentsWithSubPath(final String parentSubPath){
  checkPrepared();
  return FluentIterable.from(context.getBlobStore().list(getContainerNameFirstPart(),ListContainerOptions.Builder.inDirectory(getItemInContainerSubPath(parentSubPath)))).transform(new Function<StorageMetadata,String>(){
    @Override public String apply(    @javax.annotation.Nullable StorageMetadata input){
      return input.getName();
    }
  }
).toList();
}","@Override public List<String> listContentsWithSubPath(final String parentSubPath){
  checkPrepared();
  return FluentIterable.from(context.getBlobStore().list(getContainerNameFirstPart(),ListContainerOptions.Builder.inDirectory(getItemInContainerSubPath(parentSubPath)))).transform(new Function<StorageMetadata,String>(){
    @Override public String apply(    @javax.annotation.Nullable StorageMetadata input){
      String result=input.getName();
      result=Strings.removeFromStart(result,containerSubPath);
      result=Strings.removeFromStart(result,""String_Node_Str"");
      return result;
    }
  }
).toList();
}",0.8439519852262235
79421,"/** 
 * removes the first prefix in the list which is present at the start of string and returns that string; ignores subsequent prefixes if a matching one is found; returns the original string if no prefixes match
 */
public static String removeFromStart(String string,String... prefixes){
  if (isEmpty(string))   return string;
  for (  String prefix : prefixes)   if (string.startsWith(prefix))   return string.substring(prefix.length());
  return string;
}","/** 
 * removes the first prefix in the list which is present at the start of string and returns that string; ignores subsequent prefixes if a matching one is found; returns the original string if no prefixes match
 */
public static String removeFromStart(String string,String... prefixes){
  if (isEmpty(string))   return string;
  for (  String prefix : prefixes)   if (prefix != null && string.startsWith(prefix))   return string.substring(prefix.length());
  return string;
}",0.9808510638297872
79422,"@Override public String toString(){
  return ""String_Node_Str"" + getJmxUri() + ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + (getManagementContext() != null && getManagementContext().isRunning() ? getJmxUri() : ""String_Node_Str"") + ""String_Node_Str"";
}",0.6804123711340206
79423,"public String getHttpsSslKeystorePassword(){
  HttpsSslConfig config=getAttribute(HTTPS_SSL_CONFIG);
  return (config == null) ? null : config.getKeystorePassword();
}","public String getHttpsSslKeystorePassword(){
  HttpsSslConfig config=getAttribute(HTTPS_SSL_CONFIG);
  return (config == null) ? ""String_Node_Str"" : config.getKeystorePassword();
}",0.9452449567723344
79424,"public XmlMementoSerializer(ClassLoader classLoader){
  this.classLoader=checkNotNull(classLoader,""String_Node_Str"");
  xstream.alias(""String_Node_Str"",MutableBrooklynMemento.class);
  xstream.alias(""String_Node_Str"",BasicEntityMemento.class);
  xstream.alias(""String_Node_Str"",BasicLocationMemento.class);
  xstream.alias(""String_Node_Str"",BasicPolicyMemento.class);
  xstream.alias(""String_Node_Str"",BasicEnricherMemento.class);
  xstream.alias(""String_Node_Str"",BasicConfigKey.class);
  xstream.alias(""String_Node_Str"",BasicCatalogItemMemento.class);
  xstream.alias(""String_Node_Str"",BasicAttributeSensor.class);
  xstream.alias(""String_Node_Str"",Effector.class);
  xstream.addDefaultImplementation(EffectorAndBody.class,Effector.class);
  xstream.alias(""String_Node_Str"",BasicParameterType.class);
  xstream.addDefaultImplementation(EffectorBodyTaskFactory.class,EffectorTaskFactory.class);
  xstream.alias(""String_Node_Str"",Entity.class);
  xstream.alias(""String_Node_Str"",Location.class);
  xstream.alias(""String_Node_Str"",Policy.class);
  xstream.alias(""String_Node_Str"",Enricher.class);
  xstream.registerConverter(new LocationConverter());
  xstream.registerConverter(new PolicyConverter());
  xstream.registerConverter(new EnricherConverter());
  xstream.registerConverter(new EntityConverter());
  xstream.registerConverter(new FeedConverter());
  xstream.registerConverter(new CatalogItemConverter());
  xstream.registerConverter(new ManagementContextConverter());
  xstream.registerConverter(new TaskConverter(xstream.getMapper()));
}","public XmlMementoSerializer(ClassLoader classLoader){
  this.classLoader=checkNotNull(classLoader,""String_Node_Str"");
  xstream.alias(""String_Node_Str"",MutableBrooklynMemento.class);
  xstream.alias(""String_Node_Str"",BasicEntityMemento.class);
  xstream.alias(""String_Node_Str"",BasicLocationMemento.class);
  xstream.alias(""String_Node_Str"",BasicPolicyMemento.class);
  xstream.alias(""String_Node_Str"",BasicFeedMemento.class);
  xstream.alias(""String_Node_Str"",BasicEnricherMemento.class);
  xstream.alias(""String_Node_Str"",BasicConfigKey.class);
  xstream.alias(""String_Node_Str"",BasicCatalogItemMemento.class);
  xstream.alias(""String_Node_Str"",BasicAttributeSensor.class);
  xstream.alias(""String_Node_Str"",Effector.class);
  xstream.addDefaultImplementation(EffectorAndBody.class,Effector.class);
  xstream.alias(""String_Node_Str"",BasicParameterType.class);
  xstream.addDefaultImplementation(EffectorBodyTaskFactory.class,EffectorTaskFactory.class);
  xstream.alias(""String_Node_Str"",Entity.class);
  xstream.alias(""String_Node_Str"",Location.class);
  xstream.alias(""String_Node_Str"",Policy.class);
  xstream.alias(""String_Node_Str"",Enricher.class);
  xstream.registerConverter(new LocationConverter());
  xstream.registerConverter(new PolicyConverter());
  xstream.registerConverter(new EnricherConverter());
  xstream.registerConverter(new EntityConverter());
  xstream.registerConverter(new FeedConverter());
  xstream.registerConverter(new CatalogItemConverter());
  xstream.registerConverter(new ManagementContextConverter());
  xstream.registerConverter(new TaskConverter(xstream.getMapper()));
}",0.9812995245641838
79425,"@Override public void init(){
  super.init();
  addFeed(FunctionFeed.builder().entity(this).poll(FunctionPollConfig.forSensor(SENSOR_INT).period(POLL_PERIOD).callable(Callables.returning(1))).build());
}","@Override public void init(){
  super.init();
  addFeed(FunctionFeed.builder().entity(this).poll(FunctionPollConfig.forSensor(SENSOR_INT).period(POLL_PERIOD).callable(Callables.returning(1))).build());
  addFeed(FunctionFeed.builder().entity(this).poll(FunctionPollConfig.forSensor(SENSOR_STRING).period(POLL_PERIOD).callable(Callables.returning(""String_Node_Str""))).build());
}",0.6987951807228916
79426,"@Test public void testFunctionFeedRegisteredInInitIsPersisted() throws Exception {
  TestEntity origEntity=origApp.createAndManageChild(EntitySpec.create(TestEntity.class).impl(MyEntityWithFunctionFeedImpl.class));
  EntityTestUtils.assertAttributeEqualsEventually(origEntity,SENSOR_INT,(Integer)1);
  assertEquals(origEntity.feeds().getFeeds().size(),1);
  newApp=rebind(false);
  TestEntity newEntity=(TestEntity)Iterables.getOnlyElement(newApp.getChildren());
  Collection<Feed> newFeeds=newEntity.feeds().getFeeds();
  assertEquals(newFeeds.size(),1);
  newEntity.setAttribute(SENSOR_INT,null);
  EntityTestUtils.assertAttributeEqualsEventually(newEntity,SENSOR_INT,(Integer)1);
}","@Test public void testFunctionFeedRegisteredInInitIsPersisted() throws Exception {
  TestEntity origEntity=origApp.createAndManageChild(EntitySpec.create(TestEntity.class).impl(MyEntityWithFunctionFeedImpl.class));
  EntityTestUtils.assertAttributeEqualsEventually(origEntity,SENSOR_INT,(Integer)1);
  assertEquals(origEntity.feeds().getFeeds().size(),2);
  newApp=rebind(false);
  TestEntity newEntity=(TestEntity)Iterables.getOnlyElement(newApp.getChildren());
  Collection<Feed> newFeeds=newEntity.feeds().getFeeds();
  assertEquals(newFeeds.size(),2);
  newEntity.setAttribute(SENSOR_INT,null);
  EntityTestUtils.assertAttributeEqualsEventually(newEntity,SENSOR_INT,(Integer)1);
}",0.9970760233918128
79427,"protected void doStart(){
  if (isQuarantineEnabled()) {
    QuarantineGroup quarantineGroup=getAttribute(QUARANTINE_GROUP);
    if (quarantineGroup == null || !Entities.isManaged(quarantineGroup)) {
      quarantineGroup=addChild(EntitySpec.create(QuarantineGroup.class).displayName(""String_Node_Str""));
      Entities.manage(quarantineGroup);
      setAttribute(QUARANTINE_GROUP,quarantineGroup);
    }
  }
  int initialSize=getConfig(INITIAL_SIZE).intValue();
  int initialQuorumSize=getInitialQuorumSize();
  Exception resizeException=null;
  try {
    resize(initialSize);
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ e,e);
    resizeException=e;
  }
  Iterable<Task<?>> failed=Tasks.failed(Tasks.children(Tasks.current()));
  Iterator<Task<?>> fi=failed.iterator();
  boolean noFailed=true, severalFailed=false;
  if (fi.hasNext()) {
    noFailed=false;
    fi.next();
    if (fi.hasNext())     severalFailed=true;
  }
  int currentSize=getCurrentSize().intValue();
  if (currentSize < initialQuorumSize) {
    String message;
    if (currentSize == 0 && !noFailed) {
      if (severalFailed)       message=""String_Node_Str"" + this + ""String_Node_Str"";
 else       message=""String_Node_Str"" + this + ""String_Node_Str"";
    }
 else {
      message=""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ getCurrentSize()+ (initialQuorumSize != initialSize ? ""String_Node_Str"" + initialQuorumSize + ""String_Node_Str"" : ""String_Node_Str"");
    }
    Throwable firstError=Tasks.getError(Maybe.next(failed.iterator()).orNull());
    if (firstError != null) {
      if (severalFailed) {
        message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      }
 else {
        message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      }
    }
 else {
      firstError=resizeException;
    }
    throw new IllegalStateException(message,firstError);
  }
 else   if (currentSize < initialSize) {
    LOG.warn(""String_Node_Str"",new Object[]{this,currentSize,initialQuorumSize,initialSize});
  }
  for (  Policy it : getPolicies()) {
    it.resume();
  }
}","protected void doStart(){
  if (isQuarantineEnabled()) {
    QuarantineGroup quarantineGroup=getAttribute(QUARANTINE_GROUP);
    if (quarantineGroup == null || !Entities.isManaged(quarantineGroup)) {
      quarantineGroup=addChild(EntitySpec.create(QuarantineGroup.class).displayName(""String_Node_Str""));
      Entities.manage(quarantineGroup);
      setAttribute(QUARANTINE_GROUP,quarantineGroup);
    }
  }
  int initialSize=getConfig(INITIAL_SIZE).intValue();
  int initialQuorumSize=getInitialQuorumSize();
  Exception internalError=null;
  try {
    resize(initialSize);
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ e,e);
    internalError=e;
  }
  Iterable<Task<?>> failed=Tasks.failed(Tasks.children(Tasks.current()));
  boolean noFailed=Iterables.isEmpty(failed);
  boolean severalFailed=Iterables.size(failed) > 1;
  int currentSize=getCurrentSize().intValue();
  if (currentSize < initialQuorumSize) {
    String message;
    if (currentSize == 0 && !noFailed) {
      if (severalFailed)       message=""String_Node_Str"" + this + ""String_Node_Str"";
 else       message=""String_Node_Str"" + this + ""String_Node_Str"";
    }
 else {
      message=""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ getCurrentSize()+ (initialQuorumSize != initialSize ? ""String_Node_Str"" + initialQuorumSize + ""String_Node_Str"" : ""String_Node_Str"");
    }
    Throwable firstError=Tasks.getError(Maybe.next(failed.iterator()).orNull());
    if (firstError == null && internalError != null) {
      firstError=internalError;
    }
    if (firstError != null) {
      if (severalFailed) {
        message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      }
 else {
        message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      }
    }
    throw new IllegalStateException(message,firstError);
  }
 else   if (currentSize < initialSize) {
    LOG.warn(""String_Node_Str"",new Object[]{this,currentSize,initialQuorumSize,initialSize});
  }
  for (  Policy it : getPolicies()) {
    it.resume();
  }
}",0.8916934373565856
79428,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected synchronized Map<String,CatalogItemDo<?,?>> buildCaches(){
  if (cacheById != null)   return cacheById;
  log.debug(""String_Node_Str"" + this);
  if (!isLoaded())   log.debug(""String_Node_Str"" + this);
  Map<String,CatalogItemDo<?,?>> cache=new LinkedHashMap<String,CatalogItemDo<?,?>>();
  if (dto.catalogs != null) {
    List<CatalogDo> catalogsReversed=new ArrayList<CatalogDo>(childrenCatalogs);
    Collections.reverse(catalogsReversed);
    for (    CatalogDo child : catalogsReversed) {
      cache.putAll(child.getIdCache());
    }
  }
  if (dto.entries != null) {
    List<CatalogItemDtoAbstract<?,?>> entriesReversed=new ArrayList<CatalogItemDtoAbstract<?,?>>(dto.entries);
    Collections.reverse(entriesReversed);
    for (    CatalogItemDtoAbstract<?,?> entry : entriesReversed)     cache.put(entry.getId(),new CatalogItemDo(this,entry));
  }
  Map<String,CatalogItemDo<?,?>> typeNameCache=Maps.newHashMap();
  for (  CatalogItemDo<?,?> entry : cache.values()) {
    typeNameCache.put(entry.getRegisteredTypeName(),entry);
  }
  this.cacheById=cache;
  this.cacheByRegisteredTypeName=typeNameCache;
  return cache;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected synchronized Map<String,CatalogItemDo<?,?>> buildCaches(){
  if (cacheById != null)   return cacheById;
  log.debug(""String_Node_Str"" + this);
  if (!isLoaded())   log.debug(""String_Node_Str"" + this);
  Map<String,CatalogItemDo<?,?>> cache=new LinkedHashMap<String,CatalogItemDo<?,?>>();
  if (dto.catalogs != null) {
    List<CatalogDo> catalogsReversed=new ArrayList<CatalogDo>(childrenCatalogs);
    Collections.reverse(catalogsReversed);
    for (    CatalogDo child : catalogsReversed) {
      cache.putAll(child.getIdCache());
    }
  }
  if (dto.getUniqueEntries() != null) {
    List<CatalogItemDtoAbstract<?,?>> entriesReversed=MutableList.copyOf(dto.getUniqueEntries());
    Collections.reverse(entriesReversed);
    for (    CatalogItemDtoAbstract<?,?> entry : entriesReversed)     cache.put(entry.getId(),new CatalogItemDo(this,entry));
  }
  Map<String,CatalogItemDo<?,?>> typeNameCache=Maps.newHashMap();
  for (  CatalogItemDo<?,?> entry : cache.values()) {
    typeNameCache.put(entry.getRegisteredTypeName(),entry);
  }
  this.cacheById=cache;
  this.cacheByRegisteredTypeName=typeNameCache;
  return cache;
}",0.9045226130653268
79429,"/** 
 * Adds the given entry to the catalog, with no enrichment. Callers may prefer   {@link CatalogClasspathDo#addCatalogEntry(CatalogItemDtoAbstract,Class)}
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public synchronized void addEntry(CatalogItemDtoAbstract<?,?> entry){
  if (dto.entries == null)   dto.entries=new ArrayList<CatalogItemDtoAbstract<?,?>>();
  dto.entries.add(entry);
  if (cacheById != null) {
    CatalogItemDo<?,?> cdo=new CatalogItemDo(this,entry);
    cacheById.put(entry.getId(),cdo);
    cacheByRegisteredTypeName.put(entry.getRegisteredTypeName(),cdo);
  }
  if (mgmt != null) {
    mgmt.getRebindManager().getChangeListener().onManaged(entry);
  }
}","/** 
 * Adds the given entry to the catalog, with no enrichment. Callers may prefer   {@link CatalogClasspathDo#addCatalogEntry(CatalogItemDtoAbstract,Class)}
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public synchronized void addEntry(CatalogItemDtoAbstract<?,?> entry){
  dto.addEntry(entry);
  if (cacheById != null) {
    CatalogItemDo<?,?> cdo=new CatalogItemDo(this,entry);
    cacheById.put(entry.getId(),cdo);
    cacheByRegisteredTypeName.put(entry.getRegisteredTypeName(),cdo);
  }
  if (mgmt != null) {
    mgmt.getRebindManager().getChangeListener().onManaged(entry);
  }
}",0.5617283950617284
79430,"/** 
 * Removes the given entry from the catalog.
 */
public synchronized void deleteEntry(CatalogItemDtoAbstract<?,?> entry){
  if (dto.entries != null)   dto.entries.remove(entry);
  if (cacheById != null) {
    cacheById.remove(entry.getId());
    cacheByRegisteredTypeName.remove(entry.getRegisteredTypeName());
  }
  if (mgmt != null) {
    mgmt.getRebindManager().getChangeListener().onUnmanaged(entry);
  }
}","/** 
 * Removes the given entry from the catalog.
 */
public synchronized void deleteEntry(CatalogItemDtoAbstract<?,?> entry){
  dto.removeEntry(entry);
  if (cacheById != null) {
    cacheById.remove(entry.getId());
    cacheByRegisteredTypeName.remove(entry.getRegisteredTypeName());
  }
  if (mgmt != null) {
    mgmt.getRebindManager().getChangeListener().onUnmanaged(entry);
  }
}",0.44
79431,"private void loadCatalogItems(){
  List<CatalogItemDtoAbstract<?,?>> entries=dto.entries;
  if (entries != null) {
    for (    CatalogItemDtoAbstract<?,?> entry : entries) {
      CatalogUtils.installLibraries(mgmt,entry.getLibrariesDto());
    }
  }
}","private void loadCatalogItems(){
  Iterable<CatalogItemDtoAbstract<?,?>> entries=dto.getUniqueEntries();
  if (entries != null) {
    for (    CatalogItemDtoAbstract<?,?> entry : entries) {
      CatalogUtils.installLibraries(mgmt,entry.getLibrariesDto());
    }
  }
}",0.9289827255278312
79432,"@Test public void testLoadCatalog(){
  CatalogDto catalog=(CatalogDto)serializer.fromString(loadFile(""String_Node_Str""));
  assertNotNull(catalog);
  assertEquals(catalog.name,""String_Node_Str"");
  assertEquals(catalog.entries.size(),1,""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(catalog.entries));
  CatalogItemDtoAbstract<?,?> template=Iterables.getOnlyElement(catalog.entries);
  assertEquals(template.getDisplayName(),""String_Node_Str"");
  assertEquals(template.getVersion(),""String_Node_Str"");
  assertEquals(template.getJavaType(),""String_Node_Str"");
  assertEquals(template.getLibraries().getBundles().size(),2,""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(template.getLibraries().getBundles()));
  assertEquals(Sets.newHashSet(template.getLibraries().getBundles()),Sets.newHashSet(""String_Node_Str"",""String_Node_Str""));
}","@Test public void testLoadCatalog(){
  CatalogDto catalog=(CatalogDto)serializer.fromString(loadFile(""String_Node_Str""));
  assertNotNull(catalog);
  assertEquals(catalog.name,""String_Node_Str"");
  assertEquals(Iterables.size(catalog.getUniqueEntries()),1,""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(catalog.getUniqueEntries()));
  CatalogItemDtoAbstract<?,?> template=Iterables.getOnlyElement(catalog.getUniqueEntries());
  assertEquals(template.getDisplayName(),""String_Node_Str"");
  assertEquals(template.getVersion(),""String_Node_Str"");
  assertEquals(template.getJavaType(),""String_Node_Str"");
  assertEquals(template.getLibraries().getBundles().size(),2,""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(template.getLibraries().getBundles()));
  assertEquals(Sets.newHashSet(template.getLibraries().getBundles()),Sets.newHashSet(""String_Node_Str"",""String_Node_Str""));
}",0.9447004608294932
79433,"/** 
 * stops all tasks (apart from any current one or its descendants) on this entity, optionally -- if a timeout is given -- waiting for completion and warning on incomplete tasks 
 */
@Beta public void stopTasks(Entity entity,@Nullable Duration timeout){
  CountdownTimer timeleft=timeout == null ? null : timeout.countdownTimer();
  Collection<Exception> exceptions=MutableSet.of();
  try {
    Set<Task<?>> tasksCancelled=MutableSet.of();
    for (    Task<?> t : managementContext.getExecutionContext(entity).getTasks()) {
      if (hasTaskAsAncestor(t,Tasks.current()))       continue;
      if (!t.isDone()) {
        try {
          log.debug(""String_Node_Str"" + t + ""String_Node_Str""+ entity);
          tasksCancelled.add(t);
          t.cancel(true);
        }
 catch (        Exception e) {
          Exceptions.propagateIfFatal(e);
          log.debug(""String_Node_Str"" + t + ""String_Node_Str""+ entity+ ""String_Node_Str""+ e,e);
          exceptions.add(e);
        }
      }
    }
    if (timeleft != null) {
      Set<Task<?>> tasksIncomplete=MutableSet.of();
      for (      Task<?> t : managementContext.getExecutionContext(entity).getTasks()) {
        if (hasTaskAsAncestor(t,Tasks.current()))         continue;
        if (!Tasks.blockUntilInternalTasksEnded(t,timeleft.getDurationRemaining())) {
          tasksIncomplete.add(t);
        }
      }
      if (!tasksIncomplete.isEmpty()) {
        log.warn(""String_Node_Str"" + entity + ""String_Node_Str""+ tasksIncomplete);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + tasksCancelled + ""String_Node_Str""+ entity+ ""String_Node_Str""+ timeleft.getDurationRemaining()+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ tasksCancelled);
    }
 else {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + tasksCancelled + ""String_Node_Str""+ entity+ ""String_Node_Str""+ tasksCancelled);
    }
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    log.warn(""String_Node_Str"" + e,e);
  }
  if (!exceptions.isEmpty())   log.warn(""String_Node_Str"" + entity + ""String_Node_Str""+ Exceptions.create(exceptions));
}","/** 
 * stops all tasks (apart from any current one or its descendants) on this entity, optionally -- if a timeout is given -- waiting for completion and warning on incomplete tasks 
 */
@Beta public void stopTasks(Entity entity,@Nullable Duration timeout){
  CountdownTimer timeleft=timeout == null ? null : timeout.countdownTimer();
  Collection<Exception> exceptions=MutableSet.of();
  try {
    Set<Task<?>> tasksCancelled=MutableSet.of();
    for (    Task<?> t : managementContext.getExecutionContext(entity).getTasks()) {
      if (entity.equals(BrooklynTaskTags.getContextEntity(Tasks.current())) && hasTaskAsAncestor(t,Tasks.current())) {
        continue;
      }
      if (!t.isDone()) {
        try {
          log.debug(""String_Node_Str"" + t + ""String_Node_Str""+ entity);
          tasksCancelled.add(t);
          t.cancel(true);
        }
 catch (        Exception e) {
          Exceptions.propagateIfFatal(e);
          log.debug(""String_Node_Str"" + t + ""String_Node_Str""+ entity+ ""String_Node_Str""+ e,e);
          exceptions.add(e);
        }
      }
    }
    if (timeleft != null) {
      Set<Task<?>> tasksIncomplete=MutableSet.of();
      for (      Task<?> t : managementContext.getExecutionContext(entity).getTasks()) {
        if (hasTaskAsAncestor(t,Tasks.current()))         continue;
        if (!Tasks.blockUntilInternalTasksEnded(t,timeleft.getDurationRemaining())) {
          tasksIncomplete.add(t);
        }
      }
      if (!tasksIncomplete.isEmpty()) {
        log.warn(""String_Node_Str"" + entity + ""String_Node_Str""+ tasksIncomplete);
      }
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + tasksCancelled + ""String_Node_Str""+ entity+ ""String_Node_Str""+ timeleft.getDurationRemaining()+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ tasksCancelled);
    }
 else {
      if (log.isTraceEnabled())       log.trace(""String_Node_Str"" + tasksCancelled + ""String_Node_Str""+ entity+ ""String_Node_Str""+ tasksCancelled);
    }
  }
 catch (  Exception e) {
    Exceptions.propagateIfFatal(e);
    log.warn(""String_Node_Str"" + e,e);
  }
  if (!exceptions.isEmpty())   log.warn(""String_Node_Str"" + entity + ""String_Node_Str""+ Exceptions.create(exceptions));
}",0.981306254327256
79434,"public UpdatingMap(Map<Object,Object> flags){
  super(flags);
  if (suppressDuplicates == null) {
    suppressDuplicates=true;
  }
}","public UpdatingMap(Map<Object,Object> flags){
  super(flags);
  suppressDuplicates=false;
}",0.7802690582959642
79435,"@Override public void clearParent(){
  if (parent.isNull())   return;
  Entity oldParent=parent.get();
  parent.clear();
  if (oldParent != null)   oldParent.removeChild(getProxyIfAvailable());
}","@Override public void clearParent(){
  if (parent.isNull())   return;
  Entity oldParent=parent.get();
  parent.clear();
  if (oldParent != null) {
    if (!Entities.isNoLongerManaged(oldParent))     oldParent.removeChild(getProxyIfAvailable());
  }
}",0.874439461883408
79436,"/** 
 * update the given key in the given map sensor 
 */
public static <TKey,TVal>void updateMapSensorEntry(EntityLocal entity,AttributeSensor<Map<TKey,TVal>> sensor,TKey key,TVal v){
  Map<TKey,TVal> map=entity.getAttribute(sensor);
  boolean created=(map == null);
  if (created)   map=MutableMap.of();
  boolean changed;
  if (v == Entities.REMOVE) {
    changed=map.containsKey(key);
    if (changed)     map.remove(key);
  }
 else {
    TVal oldV=map.get(key);
    if (oldV == null)     changed=(v != null || !map.containsKey(key));
 else     changed=!oldV.equals(v);
    if (changed)     map.put(key,(TVal)v);
  }
  if (changed || created) {
    entity.setAttribute(sensor,map);
  }
}","/** 
 * update the given key in the given map sensor 
 */
public static <TKey,TVal>void updateMapSensorEntry(EntityLocal entity,AttributeSensor<Map<TKey,TVal>> sensor,TKey key,TVal v){
  Map<TKey,TVal> map=entity.getAttribute(sensor);
  boolean created=(map == null);
  if (created)   map=MutableMap.of();
  boolean changed;
  if (v == Entities.REMOVE) {
    changed=map.containsKey(key);
    if (changed)     map.remove(key);
  }
 else {
    TVal oldV=map.get(key);
    if (oldV == null)     changed=(v != null || !map.containsKey(key));
 else     changed=!oldV.equals(v);
    if (changed)     map.put(key,(TVal)v);
  }
  if (changed || created) {
    if (!Entities.isNoLongerManaged(entity)) {
      entity.setAttribute(sensor,map);
    }
  }
}",0.9617258176757132
79437,"protected void logProblem(String type,Object val){
  if (lastWasProblem && currentProblemLoggedAsWarning) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",new Object[]{type,this,getBriefDescription(),val});
  }
 else {
    long nowTime=System.currentTimeMillis();
    Long currentProblemStartTimeCache=currentProblemStartTime;
    long expiryTime=lastSuccessTime != null ? lastSuccessTime + logWarningGraceTime.toMilliseconds() : currentProblemStartTimeCache != null ? currentProblemStartTimeCache + logWarningGraceTimeOnStartup.toMilliseconds() : nowTime + logWarningGraceTimeOnStartup.toMilliseconds();
    if (!lastWasProblem) {
      if (expiryTime <= nowTime) {
        currentProblemLoggedAsWarning=true;
        log.warn(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ val);
        if (log.isDebugEnabled() && val instanceof Throwable)         log.debug(""String_Node_Str"" + type + ""String_Node_Str""+ getBriefDescription()+ ""String_Node_Str""+ val,(Throwable)val);
      }
 else {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ val);
      }
      lastWasProblem=true;
      currentProblemStartTime=nowTime;
    }
 else {
      if (expiryTime <= nowTime) {
        currentProblemLoggedAsWarning=true;
        log.warn(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ Duration.millis(nowTime - currentProblemStartTimeCache)+ (config.hasExceptionHandler() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ val);
        if (log.isDebugEnabled() && val instanceof Throwable)         log.debug(""String_Node_Str"" + type + ""String_Node_Str""+ getBriefDescription()+ ""String_Node_Str""+ val,(Throwable)val);
      }
 else {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"",new Object[]{type,this,getBriefDescription(),val});
      }
    }
  }
}","protected void logProblem(String type,Object val){
  if (lastWasProblem && currentProblemLoggedAsWarning) {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",new Object[]{type,this,getBriefDescription(),val});
  }
 else {
    long nowTime=System.currentTimeMillis();
    Long currentProblemStartTimeCache=currentProblemStartTime;
    long expiryTime=lastSuccessTime != null ? lastSuccessTime + logWarningGraceTime.toMilliseconds() : currentProblemStartTimeCache != null ? currentProblemStartTimeCache + logWarningGraceTimeOnStartup.toMilliseconds() : nowTime + logWarningGraceTimeOnStartup.toMilliseconds();
    if (!lastWasProblem) {
      if (expiryTime <= nowTime) {
        currentProblemLoggedAsWarning=true;
        if (entity == null || !Entities.isNoLongerManaged(entity)) {
          log.warn(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ val);
        }
 else {
          log.debug(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ val);
        }
        if (log.isDebugEnabled() && val instanceof Throwable)         log.debug(""String_Node_Str"" + type + ""String_Node_Str""+ getBriefDescription()+ ""String_Node_Str""+ val,(Throwable)val);
      }
 else {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ val);
      }
      lastWasProblem=true;
      currentProblemStartTime=nowTime;
    }
 else {
      if (expiryTime <= nowTime) {
        currentProblemLoggedAsWarning=true;
        log.warn(""String_Node_Str"" + getBriefDescription() + ""String_Node_Str""+ type+ ""String_Node_Str""+ Duration.millis(nowTime - currentProblemStartTimeCache)+ (config.hasExceptionHandler() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ val);
        if (log.isDebugEnabled() && val instanceof Throwable)         log.debug(""String_Node_Str"" + type + ""String_Node_Str""+ getBriefDescription()+ ""String_Node_Str""+ val,(Throwable)val);
      }
 else {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"",new Object[]{type,this,getBriefDescription(),val});
      }
    }
  }
}",0.9489331095660511
79438,"/** 
 * Should ensure that the entity is no longer managed anywhere, remove from all lists. Returns true if the entity has been removed from management; if it was not previously managed (anything else throws exception) 
 */
private boolean unmanageNonRecursive(Entity e){
  if (!getLastManagementTransitionMode(e.getId()).isReadOnly()) {
    Collection<Group> groups=e.getGroups();
    e.clearParent();
    for (    Group group : groups) {
      group.removeMember(e);
    }
    if (e instanceof Group) {
      Collection<Entity> members=((Group)e).getMembers();
      for (      Entity member : members) {
        member.removeGroup((Group)e);
      }
    }
  }
 else {
    log.debug(""String_Node_Str"",e);
  }
synchronized (this) {
    Entity proxyE=toProxyEntityIfAvailable(e);
    if (e instanceof Application) {
      applications.remove(proxyE);
      applicationIds.remove(e.getId());
    }
    entities.remove(proxyE);
    entityProxiesById.remove(e.getId());
    entityModesById.remove(e.getId());
    Object old=entitiesById.remove(e.getId());
    entityTypes.remove(e.getId());
    if (old == null) {
      log.warn(""String_Node_Str"",this,e);
      return false;
    }
 else     if (!old.equals(e)) {
      log.error(""String_Node_Str"",new Object[]{this,e,old});
      return true;
    }
 else {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"",this,e);
      return true;
    }
  }
}","/** 
 * Should ensure that the entity is no longer managed anywhere, remove from all lists. Returns true if the entity has been removed from management; if it was not previously managed (anything else throws exception) 
 */
private boolean unmanageNonRecursive(Entity e){
  if (!getLastManagementTransitionMode(e.getId()).isReadOnly()) {
    e.clearParent();
    Collection<Group> groups=e.getGroups();
    for (    Group group : groups) {
      if (!Entities.isNoLongerManaged(group))       group.removeMember(e);
    }
    if (e instanceof Group) {
      Collection<Entity> members=((Group)e).getMembers();
      for (      Entity member : members) {
        if (!Entities.isNoLongerManaged(member))         member.removeGroup((Group)e);
      }
    }
  }
 else {
    log.debug(""String_Node_Str"",e);
  }
synchronized (this) {
    Entity proxyE=toProxyEntityIfAvailable(e);
    if (e instanceof Application) {
      applications.remove(proxyE);
      applicationIds.remove(e.getId());
    }
    entities.remove(proxyE);
    entityProxiesById.remove(e.getId());
    entityModesById.remove(e.getId());
    Object old=entitiesById.remove(e.getId());
    entityTypes.remove(e.getId());
    if (old == null) {
      log.warn(""String_Node_Str"",this,e);
      return false;
    }
 else     if (!old.equals(e)) {
      log.error(""String_Node_Str"",new Object[]{this,e,old});
      return true;
    }
 else {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"",this,e);
      return true;
    }
  }
}",0.9530017152658662
79439,"public void run(){
  try {
    sAtClosureCreation.listener.onEvent(event);
  }
 catch (  Throwable t) {
    LOG.warn(""String_Node_Str"" + this + ""String_Node_Str""+ t,t);
  }
}","public void run(){
  try {
    sAtClosureCreation.listener.onEvent(event);
  }
 catch (  Throwable t) {
    if (event != null && event.getSource() != null && Entities.isNoLongerManaged(event.getSource())) {
      LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ t,t);
    }
 else {
      LOG.warn(""String_Node_Str"" + this + ""String_Node_Str""+ t,t);
    }
  }
}",0.6321626617375231
79440,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>void publish(final SensorEvent<T> event){
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"",this,event);
  totalEventsPublishedCount.incrementAndGet();
  Set<Subscription> subs=(Set<Subscription>)((Set<?>)getSubscriptionsForEntitySensor(event.getSource(),event.getSensor()));
  if (groovyTruth(subs)) {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"",new Object[]{event.getSensor().getName(),event,join(subs,""String_Node_Str"")});
    for (    Subscription s : subs) {
      if (s.eventFilter != null && !s.eventFilter.apply(event))       continue;
      final Subscription sAtClosureCreation=s;
      Map<String,Object> tagsMap=mapOf(""String_Node_Str"",s.subscriberExecutionManagerTag);
      em.submit(tagsMap,new Runnable(){
        @Override public String toString(){
          return ""String_Node_Str"" + event + ""String_Node_Str"";
        }
        public void run(){
          try {
            sAtClosureCreation.listener.onEvent(event);
          }
 catch (          Throwable t) {
            LOG.warn(""String_Node_Str"" + this + ""String_Node_Str""+ t,t);
          }
        }
      }
);
      totalEventsDeliveredCount.incrementAndGet();
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>void publish(final SensorEvent<T> event){
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"",this,event);
  totalEventsPublishedCount.incrementAndGet();
  Set<Subscription> subs=(Set<Subscription>)((Set<?>)getSubscriptionsForEntitySensor(event.getSource(),event.getSensor()));
  if (groovyTruth(subs)) {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"",new Object[]{event.getSensor().getName(),event,join(subs,""String_Node_Str"")});
    for (    Subscription s : subs) {
      if (s.eventFilter != null && !s.eventFilter.apply(event))       continue;
      final Subscription sAtClosureCreation=s;
      Map<String,Object> tagsMap=mapOf(""String_Node_Str"",s.subscriberExecutionManagerTag);
      em.submit(tagsMap,new Runnable(){
        @Override public String toString(){
          return ""String_Node_Str"" + event + ""String_Node_Str"";
        }
        public void run(){
          try {
            sAtClosureCreation.listener.onEvent(event);
          }
 catch (          Throwable t) {
            if (event != null && event.getSource() != null && Entities.isNoLongerManaged(event.getSource())) {
              LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ t,t);
            }
 else {
              LOG.warn(""String_Node_Str"" + this + ""String_Node_Str""+ t,t);
            }
          }
        }
      }
);
      totalEventsDeliveredCount.incrementAndGet();
    }
  }
}",0.9171270718232044
79441,"@Override public void connectSensors(){
  super.connectSensors();
  ConfigToAttributes.apply(this);
  String accessibleRootUrl=inferUrl(true);
  httpFeed=HttpFeed.builder().entity(this).period(getConfig(HTTP_POLL_PERIOD)).baseUri(accessibleRootUrl).baseUriVars(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")).poll(new HttpPollConfig<Boolean>(NGINX_URL_ANSWERS_NICELY).checkSuccess(Predicates.alwaysTrue()).onResult(new Function<HttpToolResponse,Boolean>(){
    @Override public Boolean apply(    HttpToolResponse input){
      List<String> actual=input.getHeaderLists().get(""String_Node_Str"");
      return actual != null && actual.size() == 1;
    }
  }
).setOnException(false)).build();
  addEnricher(Enrichers.builder().updatingMap(Attributes.SERVICE_NOT_UP_INDICATORS).from(NGINX_URL_ANSWERS_NICELY).computing(Functionals.ifNotEquals(true).value(""String_Node_Str"")).build());
  connectServiceUpIsRunning();
  Group urlMappings=getConfig(URL_MAPPINGS);
  if (urlMappings != null) {
    subscribeToMembers(urlMappings,UrlMapping.TARGET_ADDRESSES,new SensorEventListener<Collection<String>>(){
      @Override public void onEvent(      SensorEvent<Collection<String>> event){
        updateNeeded();
      }
    }
);
    urlMappingsMemberTrackerPolicy=addPolicy(PolicySpec.create(UrlMappingsMemberTrackerPolicy.class).configure(""String_Node_Str"",urlMappings));
  }
}","@Override public void connectSensors(){
  super.connectSensors();
  ConfigToAttributes.apply(this);
  String accessibleRootUrl=inferUrl(true);
  httpFeed=HttpFeed.builder().entity(this).period(getConfig(HTTP_POLL_PERIOD)).baseUri(accessibleRootUrl).baseUriVars(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")).poll(new HttpPollConfig<Boolean>(NGINX_URL_ANSWERS_NICELY).checkSuccess(Predicates.alwaysTrue()).onResult(new Function<HttpToolResponse,Boolean>(){
    @Override public Boolean apply(    HttpToolResponse input){
      List<String> actual=input.getHeaderLists().get(""String_Node_Str"");
      return actual != null && actual.size() == 1;
    }
  }
).setOnException(false)).build();
  if (!Lifecycle.RUNNING.equals(getAttribute(SERVICE_STATE_ACTUAL))) {
    ServiceNotUpLogic.updateNotUpIndicator(this,NGINX_URL_ANSWERS_NICELY,""String_Node_Str"");
  }
  addEnricher(Enrichers.builder().updatingMap(Attributes.SERVICE_NOT_UP_INDICATORS).from(NGINX_URL_ANSWERS_NICELY).computing(Functionals.ifNotEquals(true).value(""String_Node_Str"")).build());
  connectServiceUpIsRunning();
  Group urlMappings=getConfig(URL_MAPPINGS);
  if (urlMappings != null) {
    subscribeToMembers(urlMappings,UrlMapping.TARGET_ADDRESSES,new SensorEventListener<Collection<String>>(){
      @Override public void onEvent(      SensorEvent<Collection<String>> event){
        updateNeeded();
      }
    }
);
    urlMappingsMemberTrackerPolicy=addPolicy(PolicySpec.create(UrlMappingsMemberTrackerPolicy.class).configure(""String_Node_Str"",urlMappings));
  }
}",0.942347288949897
79442,"private void unmanage(final Entity e,ManagementTransitionMode mode,boolean hasBeenReplaced){
  if (shouldSkipUnmanagement(e))   return;
  final ManagementTransitionInfo info=new ManagementTransitionInfo(managementContext,mode);
  if (hasBeenReplaced) {
    if (mode == ManagementTransitionMode.REBINDING_NO_LONGER_PRIMARY) {
      ((EntityInternal)e).getManagementSupport().onManagementStopping(info);
      stopTasks(e);
      ((EntityInternal)e).getManagementSupport().onManagementStopped(info);
    }
 else {
      if (!mode.wasReadOnly()) {
        log.warn(""String_Node_Str"" + e + ""String_Node_Str""+ mode+ ""String_Node_Str"");
      }
    }
    return;
  }
 else   if (mode == ManagementTransitionMode.REBINDING_DESTROYED) {
    ((EntityInternal)e).getManagementSupport().onManagementStopping(info);
    unmanageNonRecursive(e);
    stopTasks(e);
    ((EntityInternal)e).getManagementSupport().onManagementStopped(info);
    managementContext.getRebindManager().getChangeListener().onUnmanaged(e);
    if (managementContext.getGarbageCollector() != null)     managementContext.getGarbageCollector().onUnmanaged(e);
  }
 else   if (mode == ManagementTransitionMode.DESTROYING) {
    final List<EntityInternal> allEntities=Lists.newArrayList();
    recursively(e,new Predicate<EntityInternal>(){
      public boolean apply(      EntityInternal it){
        if (shouldSkipUnmanagement(it))         return false;
        allEntities.add(it);
        it.getManagementSupport().onManagementStopping(info);
        return true;
      }
    }
);
    for (    EntityInternal it : allEntities) {
      if (shouldSkipUnmanagement(it))       continue;
      unmanageNonRecursive(it);
      stopTasks(it);
    }
    for (    EntityInternal it : allEntities) {
      it.getManagementSupport().onManagementStopped(info);
      managementContext.getRebindManager().getChangeListener().onUnmanaged(e);
      if (managementContext.getGarbageCollector() != null)       managementContext.getGarbageCollector().onUnmanaged(e);
    }
  }
 else {
    log.warn(""String_Node_Str"" + mode + ""String_Node_Str""+ e+ ""String_Node_Str"");
  }
  preRegisteredEntitiesById.remove(e.getId());
  preManagedEntitiesById.remove(e.getId());
  entityProxiesById.remove(e.getId());
  entitiesById.remove(e.getId());
  entityModesById.remove(e.getId());
}","private void unmanage(final Entity e,ManagementTransitionMode mode,boolean hasBeenReplaced){
  if (shouldSkipUnmanagement(e))   return;
  final ManagementTransitionInfo info=new ManagementTransitionInfo(managementContext,mode);
  if (hasBeenReplaced) {
    if (mode == ManagementTransitionMode.REBINDING_NO_LONGER_PRIMARY) {
      ((EntityInternal)e).getManagementSupport().onManagementStopping(info);
      stopTasks(e);
      ((EntityInternal)e).getManagementSupport().onManagementStopped(info);
    }
 else {
      if (!mode.wasReadOnly()) {
        log.warn(""String_Node_Str"" + e + ""String_Node_Str""+ mode+ ""String_Node_Str"");
      }
    }
    return;
  }
 else   if (mode == ManagementTransitionMode.REBINDING_DESTROYED) {
    ((EntityInternal)e).getManagementSupport().onManagementStopping(info);
    unmanageNonRecursive(e);
    stopTasks(e);
    ((EntityInternal)e).getManagementSupport().onManagementStopped(info);
    managementContext.getRebindManager().getChangeListener().onUnmanaged(e);
    if (managementContext.getGarbageCollector() != null)     managementContext.getGarbageCollector().onUnmanaged(e);
  }
 else   if (mode == ManagementTransitionMode.DESTROYING) {
    final List<EntityInternal> allEntities=Lists.newArrayList();
    recursively(e,new Predicate<EntityInternal>(){
      public boolean apply(      EntityInternal it){
        if (shouldSkipUnmanagement(it))         return false;
        allEntities.add(it);
        it.getManagementSupport().onManagementStopping(info);
        return true;
      }
    }
);
    for (    EntityInternal it : allEntities) {
      if (shouldSkipUnmanagement(it))       continue;
      unmanageNonRecursive(it);
      stopTasks(it);
    }
    for (    EntityInternal it : allEntities) {
      it.getManagementSupport().onManagementStopped(info);
      managementContext.getRebindManager().getChangeListener().onUnmanaged(it);
      if (managementContext.getGarbageCollector() != null)       managementContext.getGarbageCollector().onUnmanaged(e);
    }
  }
 else {
    log.warn(""String_Node_Str"" + mode + ""String_Node_Str""+ e+ ""String_Node_Str"");
  }
  preRegisteredEntitiesById.remove(e.getId());
  preManagedEntitiesById.remove(e.getId());
  entityProxiesById.remove(e.getId());
  entitiesById.remove(e.getId());
  entityModesById.remove(e.getId());
}",0.9993524714008202
79443,"static String appendSeparator(String message,String next){
  if (Strings.isBlank(message))   return next;
  if (message.trim().endsWith(""String_Node_Str"") || message.trim().endsWith(""String_Node_Str""))   return message.trim() + ""String_Node_Str"" + next;
  return message + ""String_Node_Str"" + next;
}","static String appendSeparator(String message,String next){
  if (Strings.isBlank(message))   return next;
  if (Strings.isBlank(next))   return message;
  if (message.endsWith(next))   return message;
  if (message.trim().endsWith(""String_Node_Str"") || message.trim().endsWith(""String_Node_Str""))   return message.trim() + ""String_Node_Str"" + next;
  return message + ""String_Node_Str"" + next;
}",0.8633093525179856
79444,"private static String stripBoringPrefixes(String s){
  String was;
  do {
    was=s;
    for (    Class<? extends Throwable> type : BORING_PREFIX_THROWABLE_EXACT_TYPES) {
      s=Strings.removeAllFromStart(type.getCanonicalName(),type.getName(),type.getSimpleName(),""String_Node_Str"",""String_Node_Str"");
    }
  }
 while (!was.equals(s));
  return s;
}","private static String stripBoringPrefixes(String s){
  String was;
  do {
    was=s;
    for (    Class<? extends Throwable> type : BORING_PREFIX_THROWABLE_EXACT_TYPES) {
      s=Strings.removeAllFromStart(s,type.getCanonicalName(),type.getName(),type.getSimpleName(),""String_Node_Str"",""String_Node_Str"");
    }
  }
 while (!was.equals(s));
  return s;
}",0.9971671388101984
79445,"/** 
 * creates (but does not throw) a new   {@link PropagatedRuntimeException} whose message is taken from the first _interesting_ element in the source, and optionally also the causal chain 
 */
public static Throwable collapse(Throwable source,boolean collapseCausalChain){
  String message=""String_Node_Str"";
  Throwable collapsed=source;
  int collapseCount=0;
  while (isBoring(collapsed)) {
    collapseCount++;
    Throwable cause=collapsed.getCause();
    if (cause == null)     return source;
    String collapsedS=collapsed.getMessage();
    if (Strings.isNonBlank(collapsedS)) {
      collapsedS=Strings.removeFromEnd(collapsedS,cause.toString(),stripBoringPrefixes(cause.toString()),cause.getMessage());
      collapsedS=stripBoringPrefixes(collapsedS);
      if (Strings.isNonBlank(collapsedS))       message=appendSeparator(message,collapsedS);
    }
    collapsed=cause;
  }
  Throwable messagesCause=collapsed;
  while (isPrefixBoring(messagesCause) && Strings.isBlank(message)) {
    collapseCount++;
    if (Strings.isNonBlank(messagesCause.getMessage())) {
      message=messagesCause.getMessage();
      break;
    }
    messagesCause=messagesCause.getCause();
  }
  if (collapseCount == 0)   return source;
  if (Strings.isBlank(message))   return new PropagatedRuntimeException(collapseCausalChain ? collapsed : source);
 else   return new PropagatedRuntimeException(message,collapseCausalChain ? collapsed : source,true);
}","/** 
 * creates (but does not throw) a new   {@link PropagatedRuntimeException} whose message is taken from the first _interesting_ element in the source, and optionally also the causal chain 
 */
public static Throwable collapse(Throwable source,boolean collapseCausalChain){
  String message=""String_Node_Str"";
  Throwable collapsed=source;
  int collapseCount=0;
  while (isBoring(collapsed)) {
    collapseCount++;
    Throwable cause=collapsed.getCause();
    if (cause == null)     return source;
    String collapsedS=collapsed.getMessage();
    if (Strings.isNonBlank(collapsedS)) {
      collapsedS=Strings.removeFromEnd(collapsedS,cause.toString(),stripBoringPrefixes(cause.toString()),cause.getMessage());
      collapsedS=stripBoringPrefixes(collapsedS);
      if (Strings.isNonBlank(collapsedS))       message=appendSeparator(message,collapsedS);
    }
    collapsed=cause;
  }
  Throwable messagesCause=collapsed;
  while (isPrefixBoring(messagesCause) && Strings.isBlank(message)) {
    collapseCount++;
    if (Strings.isNonBlank(messagesCause.getMessage())) {
      message=messagesCause.getMessage();
      messagesCause=messagesCause.getCause();
      break;
    }
    messagesCause=messagesCause.getCause();
  }
  if (collapseCount == 0)   return source;
  if (Strings.isBlank(message)) {
    return new PropagatedRuntimeException(collapseCausalChain ? collapsed : source);
  }
 else {
    if (messagesCause != null) {
      String extraMessage=collapseText(messagesCause);
      message=appendSeparator(message,extraMessage);
    }
    return new PropagatedRuntimeException(message,collapseCausalChain ? collapsed : source,true);
  }
}",0.9300676764421528
79446,"@Override public boolean tryAcquireMutex(String mutexId,String description){
  return mutexSupport.tryAcquireMutex(mutexId,description);
}","@Override public boolean tryAcquireMutex(String mutexId,String description){
  return getMutexSupport().tryAcquireMutex(mutexId,description);
}",0.9750889679715302
79447,"@Override public boolean hasMutex(String mutexId){
  return mutexSupport.hasMutex(mutexId);
}","@Override public boolean hasMutex(String mutexId){
  return getMutexSupport().hasMutex(mutexId);
}",0.9633507853403142
79448,"@Override public void releaseMutex(String mutexId){
  mutexSupport.releaseMutex(mutexId);
}","@Override public void releaseMutex(String mutexId){
  getMutexSupport().releaseMutex(mutexId);
}",0.962566844919786
79449,"@Override public void acquireMutex(String mutexId,String description) throws RuntimeInterruptedException {
  try {
    mutexSupport.acquireMutex(mutexId,description);
  }
 catch (  InterruptedException ie) {
    throw new RuntimeInterruptedException(""String_Node_Str"" + mutexId,ie);
  }
}","@Override public void acquireMutex(String mutexId,String description) throws RuntimeInterruptedException {
  try {
    getMutexSupport().acquireMutex(mutexId,description);
  }
 catch (  InterruptedException ie) {
    throw new RuntimeInterruptedException(""String_Node_Str"" + mutexId,ie);
  }
}",0.9500860585197934
79450,"@Override public SshMachineLocation configure(Map properties){
  super.configure(properties);
  if (mutexSupport == null) {
    mutexSupport=new MutexSupport();
  }
  boolean deferConstructionChecks=(properties.containsKey(""String_Node_Str"") && TypeCoercions.coerce(properties.get(""String_Node_Str""),Boolean.class));
  if (!deferConstructionChecks) {
    if (getDisplayName() == null) {
      setDisplayName((truth(user) ? user + ""String_Node_Str"" : ""String_Node_Str"") + address.getHostName());
    }
  }
  return this;
}","@Override public SshMachineLocation configure(Map properties){
  super.configure(properties);
  boolean deferConstructionChecks=(properties.containsKey(""String_Node_Str"") && TypeCoercions.coerce(properties.get(""String_Node_Str""),Boolean.class));
  if (!deferConstructionChecks) {
    if (getDisplayName() == null) {
      setDisplayName((truth(user) ? user + ""String_Node_Str"" : ""String_Node_Str"") + address.getHostName());
    }
  }
  return this;
}",0.2595262615859938
79451,"@Override public void connectSensors(){
  super.connectSensors();
  if (getDriver().isJmxEnabled()) {
    String requestProcessorMbeanName=""String_Node_Str"";
    String connectorMbeanName=format(""String_Node_Str"",getAttribute(HTTP_PORT));
    jmxWebFeed=JmxFeed.builder().entity(this).period(3000,TimeUnit.MILLISECONDS).pollAttribute(new JmxAttributePollConfig<Integer>(ERROR_COUNT).objectName(requestProcessorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<Integer>(REQUEST_COUNT).objectName(requestProcessorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<Integer>(TOTAL_PROCESSING_TIME).objectName(requestProcessorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<String>(CONNECTOR_STATUS).objectName(connectorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_UP).objectName(connectorMbeanName).attributeName(""String_Node_Str"").onSuccess(Functions.forPredicate(Predicates.<Object>equalTo(""String_Node_Str""))).setOnFailureOrException(false)).build();
    jmxAppFeed=JavaAppUtils.connectMXBeanSensors(this);
  }
 else {
    LOG.warn(""String_Node_Str"");
    connectServiceUpIsRunning();
  }
}","@Override public void connectSensors(){
  super.connectSensors();
  if (getDriver().isJmxEnabled()) {
    String requestProcessorMbeanName=""String_Node_Str"";
    String connectorMbeanName=format(""String_Node_Str"",getAttribute(HTTP_PORT));
    jmxWebFeed=JmxFeed.builder().entity(this).period(3000,TimeUnit.MILLISECONDS).pollAttribute(new JmxAttributePollConfig<Integer>(ERROR_COUNT).objectName(requestProcessorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<Integer>(REQUEST_COUNT).objectName(requestProcessorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<Integer>(TOTAL_PROCESSING_TIME).objectName(requestProcessorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<String>(CONNECTOR_STATUS).objectName(connectorMbeanName).attributeName(""String_Node_Str"")).pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_PROCESS_IS_RUNNING).objectName(connectorMbeanName).attributeName(""String_Node_Str"").onSuccess(Functions.forPredicate(Predicates.<Object>equalTo(""String_Node_Str""))).setOnFailureOrException(false)).build();
    jmxAppFeed=JavaAppUtils.connectMXBeanSensors(this);
  }
 else {
    LOG.warn(""String_Node_Str"");
    connectServiceUpIsRunning();
  }
}",0.992879746835443
79452,"private JsonNode fromEntity(Entity entity){
  ObjectNode aRoot=entityBase(entity);
  aRoot.put(""String_Node_Str"",entity.getApplicationId());
  if (entity.getParent() != null) {
    aRoot.put(""String_Node_Str"",entity.getParent().getId());
  }
  if (!entity.getGroups().isEmpty())   aRoot.put(""String_Node_Str"",entitiesIdAsArray(entity.getGroups()));
  if (!entity.getChildren().isEmpty())   aRoot.put(""String_Node_Str"",entitiesIdAndNameAsArray(entity.getChildren()));
  if ((entity instanceof Group) && !((Group)entity).getMembers().isEmpty())   aRoot.put(""String_Node_Str"",entitiesIdAndNameAsArray(((Group)entity).getMembers()));
  return aRoot;
}","private JsonNode fromEntity(Entity entity){
  ObjectNode aRoot=entityBase(entity);
  aRoot.put(""String_Node_Str"",entity.getApplicationId());
  if (entity.getParent() != null) {
    aRoot.put(""String_Node_Str"",entity.getParent().getId());
  }
  if (!entity.getGroups().isEmpty())   aRoot.put(""String_Node_Str"",entitiesIdAsArray(entity.getGroups()));
  if (!entity.getChildren().isEmpty())   aRoot.put(""String_Node_Str"",entitiesIdAndNameAsArray(entity.getChildren()));
  if (entity instanceof Group) {
    Collection<Entity> members=entity.getAttribute(AbstractGroup.GROUP_MEMBERS);
    if (members != null && !members.isEmpty())     aRoot.put(""String_Node_Str"",entitiesIdAndNameAsArray(members));
  }
  return aRoot;
}",0.8826979472140762
79453,"static ManagementTransitionMode computeMode(BrooklynObject item,Boolean wasReadOnly,boolean isNowReadOnly){
  if (wasReadOnly == null) {
    if (Boolean.TRUE.equals(isNowReadOnly))     return ManagementTransitionMode.REBINDING_READONLY;
 else     return ManagementTransitionMode.CREATING;
  }
 else {
    if (wasReadOnly && isNowReadOnly)     return ManagementTransitionMode.REBINDING_READONLY;
 else     if (wasReadOnly)     return ManagementTransitionMode.REBINDING_BECOMING_PRIMARY;
 else     if (isNowReadOnly)     return ManagementTransitionMode.REBINDING_NO_LONGER_PRIMARY;
 else     throw new IllegalStateException(""String_Node_Str"" + item);
  }
}","static ManagementTransitionMode computeMode(BrooklynObject item,Boolean wasReadOnly,boolean isNowReadOnly){
  if (wasReadOnly == null) {
    if (Boolean.TRUE.equals(isNowReadOnly))     return ManagementTransitionMode.REBINDING_READONLY;
 else     return ManagementTransitionMode.CREATING;
  }
 else {
    if (wasReadOnly && isNowReadOnly)     return ManagementTransitionMode.REBINDING_READONLY;
 else     if (wasReadOnly)     return ManagementTransitionMode.REBINDING_BECOMING_PRIMARY;
 else     if (isNowReadOnly)     return ManagementTransitionMode.REBINDING_NO_LONGER_PRIMARY;
 else {
      LOG.warn(""String_Node_Str"" + item);
      return ManagementTransitionMode.REBINDING_BECOMING_PRIMARY;
    }
  }
}",0.911094783247612
79454,"/** 
 * Looks up the state of all nodes in the management plane, and checks if the master is still ok. If it's not then determines which node should be promoted to master. If it is ourself, then promotes.
 */
protected void checkMaster(boolean initializing){
  ManagementPlaneSyncRecord memento=loadManagementPlaneSyncRecord(false);
  if (getNodeState() == ManagementNodeState.FAILED) {
    return;
  }
  String currMasterNodeId=memento.getMasterNodeId();
  ManagementNodeSyncRecord currMasterNodeRecord=memento.getManagementNodes().get(currMasterNodeId);
  ManagementNodeSyncRecord ownNodeRecord=memento.getManagementNodes().get(ownNodeId);
  ManagementNodeSyncRecord newMasterNodeRecord=null;
  boolean demotingSelfInFavourOfOtherMaster=false;
  if (currMasterNodeRecord != null && currMasterNodeRecord.getStatus() == ManagementNodeState.MASTER && isHeartbeatOk(currMasterNodeRecord,ownNodeRecord)) {
    if (ownNodeId.equals(currMasterNodeId)) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",currMasterNodeRecord.toVerboseString());
      return;
    }
 else {
      if (ownNodeRecord != null && ownNodeRecord.getStatus() == ManagementNodeState.MASTER) {
        LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ currMasterNodeId);
        newMasterNodeRecord=currMasterNodeRecord;
        demotingSelfInFavourOfOtherMaster=true;
      }
 else {
        if (LOG.isTraceEnabled())         LOG.trace(""String_Node_Str"",currMasterNodeRecord.toVerboseString());
        return;
      }
    }
  }
 else   if (ownNodeRecord == null || !isHeartbeatOk(ownNodeRecord,ownNodeRecord)) {
    if (ownNodeRecord == null) {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ currMasterNodeId+ ""String_Node_Str"");
    }
 else {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ currMasterNodeId+ ""String_Node_Str""+ ""String_Node_Str""+ ownNodeRecord.toVerboseString());
    }
    return;
  }
 else   if (ownNodeId.equals(currMasterNodeId)) {
    LOG.warn(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ ownNodeRecord.toVerboseString());
    return;
  }
  if (demotingSelfInFavourOfOtherMaster) {
    LOG.debug(""String_Node_Str"" + ownNodeRecord.toVerboseString() + ""String_Node_Str""+ newMasterNodeRecord.toVerboseString());
    demoteToStandby(BrooklynFeatureEnablement.isEnabled(BrooklynFeatureEnablement.FEATURE_DEFAULT_STANDBY_IS_HOT_PROPERTY));
    return;
  }
  newMasterNodeRecord=masterChooser.choose(memento,heartbeatTimeout,ownNodeId);
  String newMasterNodeId=(newMasterNodeRecord == null) ? null : newMasterNodeRecord.getNodeId();
  URI newMasterNodeUri=(newMasterNodeRecord == null) ? null : newMasterNodeRecord.getUri();
  boolean weAreNewMaster=ownNodeId.equals(newMasterNodeId);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",new Object[]{(newMasterNodeRecord == null ? ""String_Node_Str"" : newMasterNodeRecord.toVerboseString()),(currMasterNodeRecord == null ? currMasterNodeId + ""String_Node_Str"" : currMasterNodeRecord.toVerboseString()),memento,ownNodeRecord.toVerboseString(),heartbeatTimeout});
  }
  if (!initializing) {
    String message=""String_Node_Str"" + ownNodeId + ""String_Node_Str"";
    if (weAreNewMaster)     message+=""String_Node_Str"";
 else     message+=""String_Node_Str"";
    message+=currMasterNodeId + ""String_Node_Str"" + (currMasterNodeRecord == null ? ""String_Node_Str"" : currMasterNodeRecord.getRemoteTimestamp())+ ""String_Node_Str""+ ""String_Node_Str""+ (newMasterNodeId == null ? ""String_Node_Str"" : (weAreNewMaster ? ""String_Node_Str"" : ""String_Node_Str"") + newMasterNodeId + ""String_Node_Str""+ newMasterNodeRecord.getRemoteTimestamp()+ ""String_Node_Str""+ (newMasterNodeUri != null ? ""String_Node_Str"" + newMasterNodeUri : ""String_Node_Str""));
    LOG.warn(message);
  }
  if (weAreNewMaster) {
    promoteToMaster();
  }
}","/** 
 * Looks up the state of all nodes in the management plane, and checks if the master is still ok. If it's not then determines which node should be promoted to master. If it is ourself, then promotes.
 */
protected void checkMaster(boolean initializing){
  ManagementPlaneSyncRecord memento=loadManagementPlaneSyncRecord(false);
  if (getNodeState() == ManagementNodeState.FAILED) {
    return;
  }
  String currMasterNodeId=memento.getMasterNodeId();
  ManagementNodeSyncRecord currMasterNodeRecord=memento.getManagementNodes().get(currMasterNodeId);
  ManagementNodeSyncRecord ownNodeRecord=memento.getManagementNodes().get(ownNodeId);
  ManagementNodeSyncRecord newMasterNodeRecord=null;
  boolean demotingSelfInFavourOfOtherMaster=false;
  if (currMasterNodeRecord != null && currMasterNodeRecord.getStatus() == ManagementNodeState.MASTER && isHeartbeatOk(currMasterNodeRecord,ownNodeRecord)) {
    if (ownNodeId.equals(currMasterNodeId)) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",currMasterNodeRecord.toVerboseString());
      return;
    }
 else {
      if (ownNodeRecord != null && ownNodeRecord.getStatus() == ManagementNodeState.MASTER) {
        LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ currMasterNodeId);
        newMasterNodeRecord=currMasterNodeRecord;
        demotingSelfInFavourOfOtherMaster=true;
      }
 else {
        if (LOG.isTraceEnabled())         LOG.trace(""String_Node_Str"",currMasterNodeRecord.toVerboseString());
        return;
      }
    }
  }
 else   if (ownNodeRecord == null || !isHeartbeatOk(ownNodeRecord,ownNodeRecord)) {
    if (ownNodeRecord == null) {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ currMasterNodeId+ ""String_Node_Str"");
    }
 else {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ currMasterNodeId+ ""String_Node_Str""+ ""String_Node_Str""+ ownNodeRecord.toVerboseString());
    }
    return;
  }
 else   if (ownNodeId.equals(currMasterNodeId)) {
    LOG.warn(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ ownNodeRecord.toVerboseString());
    return;
  }
  if (demotingSelfInFavourOfOtherMaster) {
    LOG.debug(""String_Node_Str"" + ownNodeRecord.toVerboseString() + ""String_Node_Str""+ newMasterNodeRecord.toVerboseString());
    demoteToStandby(BrooklynFeatureEnablement.isEnabled(BrooklynFeatureEnablement.FEATURE_DEFAULT_STANDBY_IS_HOT_PROPERTY));
    return;
  }
 else {
    LOG.debug(""String_Node_Str"" + currMasterNodeRecord);
  }
  newMasterNodeRecord=masterChooser.choose(memento,heartbeatTimeout,ownNodeId);
  String newMasterNodeId=(newMasterNodeRecord == null) ? null : newMasterNodeRecord.getNodeId();
  URI newMasterNodeUri=(newMasterNodeRecord == null) ? null : newMasterNodeRecord.getUri();
  boolean weAreNewMaster=ownNodeId.equals(newMasterNodeId);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",new Object[]{(newMasterNodeRecord == null ? ""String_Node_Str"" : newMasterNodeRecord.toVerboseString()),(currMasterNodeRecord == null ? currMasterNodeId + ""String_Node_Str"" : currMasterNodeRecord.toVerboseString()),memento,ownNodeRecord.toVerboseString(),heartbeatTimeout});
  }
  if (!initializing) {
    String message=""String_Node_Str"" + ownNodeId + ""String_Node_Str"";
    if (weAreNewMaster)     message+=""String_Node_Str"";
 else     message+=""String_Node_Str"";
    message+=currMasterNodeId + ""String_Node_Str"" + (currMasterNodeRecord == null ? ""String_Node_Str"" : currMasterNodeRecord.getRemoteTimestamp())+ ""String_Node_Str""+ ""String_Node_Str""+ (newMasterNodeId == null ? ""String_Node_Str"" : (weAreNewMaster ? ""String_Node_Str"" : ""String_Node_Str"") + newMasterNodeId + ""String_Node_Str""+ newMasterNodeRecord.getRemoteTimestamp()+ ""String_Node_Str""+ (newMasterNodeUri != null ? ""String_Node_Str"" + newMasterNodeUri : ""String_Node_Str""));
    LOG.warn(message);
  }
  if (weAreNewMaster) {
    promoteToMaster();
  }
}",0.9011353488965428
79455,"public static void main(String[] argv){
  List<String> args=Lists.newArrayList(argv);
  String port=CommandLineUtil.getCommandLineOption(args,""String_Node_Str"",""String_Node_Str"");
  String location=CommandLineUtil.getCommandLineOption(args,""String_Node_Str"",""String_Node_Str"");
  BrooklynServerDetails server=BrooklynLauncher.newLauncher().webconsolePort(port).launch();
  Location loc=server.getManagementContext().getLocationRegistry().resolve(location);
  StartableApplication app=new WebClusterDatabaseOpenLoopExample().appDisplayName(""String_Node_Str"").manage(server.getManagementContext());
  app.start(ImmutableList.of(loc));
  Entities.dumpInfo(app);
}","public static void main(String[] argv){
  List<String> args=Lists.newArrayList(argv);
  String port=CommandLineUtil.getCommandLineOption(args,""String_Node_Str"",""String_Node_Str"");
  String location=CommandLineUtil.getCommandLineOption(args,""String_Node_Str"",""String_Node_Str"");
  BrooklynLauncher launcher=BrooklynLauncher.newInstance().webconsolePort(port).start();
  BrooklynServerDetails server=launcher.getServerDetails();
  Location loc=server.getManagementContext().getLocationRegistry().resolve(location);
  StartableApplication app=new WebClusterDatabaseOpenLoopExample().appDisplayName(""String_Node_Str"").manage(server.getManagementContext());
  app.start(ImmutableList.of(loc));
  Entities.dumpInfo(app);
}",0.8880813953488372
79456,"@Deprecated @SuppressWarnings(""String_Node_Str"") public static Set<Hint<?>> getHintsFor(Object element,Class<? extends Hint> optionalHintSuperClass){
  return getHintsFor(element,optionalHintSuperClass);
}","@Deprecated @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static Set<Hint<?>> getHintsFor(Object element,Class<? extends Hint> optionalHintSuperClass){
  return (Set<Hint<?>>)_getHintsFor(element,optionalHintSuperClass);
}",0.9213483146067416
79457,"@Override protected void disconnectSensors(){
  if (httpFeed != null)   httpFeed.stop();
  super.disconnectSensors();
}","@Override protected void disconnectSensors(){
  if (httpFeed != null)   httpFeed.stop();
  disconnectServiceUpIsRunning();
  super.disconnectSensors();
}",0.875
79458,"protected List<Entity> pickAndRemoveMembers(int delta){
  if (delta == 0)   return Lists.newArrayList();
  if (delta == 1 && !isAvailabilityZoneEnabled()) {
    return ImmutableList.of(pickAndRemoveMember());
  }
  Preconditions.checkState(getMembers().size() > 0,""String_Node_Str"" + delta + ""String_Node_Str""+ this);
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",this);
  if (isAvailabilityZoneEnabled()) {
    Multimap<Location,Entity> membersByLocation=getMembersByLocation();
    List<Entity> entities=getZonePlacementStrategy().entitiesToRemove(membersByLocation,delta);
    Preconditions.checkState(entities.size() == delta,""String_Node_Str"",getId(),entities.size(),delta);
    for (    Entity entity : entities) {
      removeMember(entity);
    }
    return entities;
  }
 else {
    List<Entity> entities=Lists.newArrayList();
    for (int i=0; i < delta; i++) {
      entities.add(pickAndRemoveMember());
    }
    return entities;
  }
}","protected List<Entity> pickAndRemoveMembers(int delta){
  if (delta == 0)   return Lists.newArrayList();
  if (delta == 1 && !isAvailabilityZoneEnabled()) {
    Maybe<Entity> member=tryPickAndRemoveMember();
    return (member.isPresent()) ? ImmutableList.of(member.get()) : ImmutableList.<Entity>of();
  }
  Preconditions.checkState(getMembers().size() > 0,""String_Node_Str"" + delta + ""String_Node_Str""+ this);
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",this);
  if (isAvailabilityZoneEnabled()) {
    Multimap<Location,Entity> membersByLocation=getMembersByLocation();
    List<Entity> entities=getZonePlacementStrategy().entitiesToRemove(membersByLocation,delta);
    Preconditions.checkState(entities.size() == delta,""String_Node_Str"",getId(),entities.size(),delta);
    for (    Entity entity : entities) {
      removeMember(entity);
    }
    return entities;
  }
 else {
    List<Entity> entities=Lists.newArrayList();
    for (int i=0; i < delta; i++) {
      Maybe<Entity> member=tryPickAndRemoveMember();
      if (member.isPresent())       entities.add(member.get());
    }
    return entities;
  }
}",0.8820709491850431
79459,"public String getJmxUrl(){
  init();
  HostAndPort jmx=BrooklynAccessUtils.getBrooklynAccessibleAddress(entity,entity.getAttribute(JMX_PORT));
  HostAndPort rmi=BrooklynAccessUtils.getBrooklynAccessibleAddress(entity,entity.getAttribute(RMI_REGISTRY_PORT));
  if (EnumSet.of(JmxAgentModes.JMXMP,JmxAgentModes.JMXMP_AND_RMI).contains(getJmxAgentMode())) {
    return JmxHelper.toJmxmpUrl(jmx.getHostText(),jmx.getPort());
  }
 else {
    if (getJmxAgentMode() == JmxAgentModes.NONE) {
      fixPortsForModeNone();
    }
    return JmxHelper.toRmiJmxUrl(jmx.getHostText(),jmx.getPort(),rmi.getPort(),entity.getAttribute(JMX_CONTEXT));
  }
}","public String getJmxUrl(){
  init();
  HostAndPort jmx=BrooklynAccessUtils.getBrooklynAccessibleAddress(entity,entity.getAttribute(JMX_PORT));
  if (EnumSet.of(JmxAgentModes.JMXMP,JmxAgentModes.JMXMP_AND_RMI).contains(getJmxAgentMode())) {
    return JmxHelper.toJmxmpUrl(jmx.getHostText(),jmx.getPort());
  }
 else {
    if (getJmxAgentMode() == JmxAgentModes.NONE) {
      fixPortsForModeNone();
    }
    HostAndPort rmi=BrooklynAccessUtils.getBrooklynAccessibleAddress(entity,entity.getAttribute(RMI_REGISTRY_PORT));
    return JmxHelper.toRmiJmxUrl(jmx.getHostText(),jmx.getPort(),rmi.getPort(),entity.getAttribute(JMX_CONTEXT));
  }
}",0.5899843505477308
79460,"@Override protected void connectSensors(){
  super.connectSensors();
  ConfigToAttributes.apply(this);
  HostAndPort accessible=BrooklynAccessUtils.getBrooklynAccessibleAddress(this,getAttribute(Attributes.HTTP_PORT));
  String nodeJsUrl=String.format(""String_Node_Str"",accessible.getHostText(),accessible.getPort());
  LOG.info(""String_Node_Str"",nodeJsUrl);
  httpFeed=HttpFeed.builder().entity(this).baseUri(nodeJsUrl).poll(new HttpPollConfig<Boolean>(SERVICE_UP).suburl(getConfig(NodeJsWebAppService.SERVICE_UP_PATH)).checkSuccess(Predicates.alwaysTrue()).onSuccess(HttpValueFunctions.responseCodeEquals(200)).setOnException(false)).build();
  WebAppServiceMethods.connectWebAppServerPolicies(this);
}","@Override protected void connectSensors(){
  super.connectSensors();
  ConfigToAttributes.apply(this);
  HostAndPort accessible=BrooklynAccessUtils.getBrooklynAccessibleAddress(this,getHttpPort());
  String nodeJsUrl=String.format(""String_Node_Str"",accessible.getHostText(),accessible.getPort());
  LOG.info(""String_Node_Str"",nodeJsUrl);
  httpFeed=HttpFeed.builder().entity(this).baseUri(nodeJsUrl).poll(new HttpPollConfig<Boolean>(SERVICE_UP).suburl(getConfig(NodeJsWebAppService.SERVICE_UP_PATH)).checkSuccess(Predicates.alwaysTrue()).onSuccess(HttpValueFunctions.responseCodeEquals(200)).setOnException(false)).build();
  WebAppServiceMethods.connectWebAppServerPolicies(this);
}",0.9733237202595528
79461,"/** 
 * returns a reference which includes an error, and where attempts to get the content cause the error to throw 
 */
public static <T>ReferenceWithError<T> newInstanceThrowingError(T object,Throwable error){
  return new ReferenceWithError<T>(object,error,true);
}","/** 
 * returns a reference which includes an error, and where attempts to get the content cause the error to throw 
 */
public static <T>ReferenceWithError<T> newInstanceThrowingError(T object,Throwable error){
  return new ReferenceWithError<T>(object,error,false);
}",0.9869646182495344
79462,"protected ReferenceWithError(@Nullable T object,@Nullable Throwable error,boolean throwErrorOnAccess){
  this.object=object;
  this.error=error;
  this.maskError=throwErrorOnAccess;
}","protected ReferenceWithError(@Nullable T object,@Nullable Throwable error,boolean maskError){
  this.object=object;
  this.error=error;
  this.maskError=maskError;
}",0.9022988505747126
79463,"/** 
 * returns a reference which includes an error, but attempts to get the content do not cause the error to throw 
 */
public static <T>ReferenceWithError<T> newInstanceMaskingError(T object,Throwable error){
  return new ReferenceWithError<T>(object,error,false);
}","/** 
 * returns a reference which includes an error, but attempts to get the content do not cause the error to throw 
 */
public static <T>ReferenceWithError<T> newInstanceMaskingError(T object,Throwable error){
  return new ReferenceWithError<T>(object,error,true);
}",0.9869646182495344
79464,"@SuppressWarnings(""String_Node_Str"") protected void registerPollTask(){
  final Runnable job=new Runnable(){
    @Override public void run(){
      try {
        publishAndCheck(false);
      }
 catch (      Exception e) {
        if (running) {
          LOG.error(""String_Node_Str"" + e,e);
        }
 else {
          if (LOG.isDebugEnabled())           LOG.debug(""String_Node_Str"" + e,e);
        }
      }
catch (      Throwable t) {
        LOG.error(""String_Node_Str"" + t,t);
        throw Exceptions.propagate(t);
      }
    }
  }
;
  Callable<Task<?>> taskFactory=new Callable<Task<?>>(){
    @Override public Task<?> call(){
      return new BasicTask<Void>(job);
    }
  }
;
  if (pollPeriod == null || pollPeriod.equals(Duration.PRACTICALLY_FOREVER)) {
  }
 else {
    ScheduledTask task=new ScheduledTask(MutableMap.of(""String_Node_Str"",pollPeriod),taskFactory);
    pollingTask=managementContext.getExecutionManager().submit(task);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void registerPollTask(){
  final Runnable job=new Runnable(){
    @Override public void run(){
      try {
        publishAndCheck(false);
      }
 catch (      Exception e) {
        if (running) {
          LOG.error(""String_Node_Str"" + e,e);
        }
 else {
          if (LOG.isDebugEnabled())           LOG.debug(""String_Node_Str"" + e,e);
        }
      }
catch (      Throwable t) {
        LOG.error(""String_Node_Str"" + t,t);
        throw Exceptions.propagate(t);
      }
    }
  }
;
  Callable<Task<?>> taskFactory=new Callable<Task<?>>(){
    @Override public Task<?> call(){
      return new BasicTask<Void>(job);
    }
  }
;
  LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ pollPeriod);
  if (pollPeriod == null || pollPeriod.equals(Duration.PRACTICALLY_FOREVER)) {
  }
 else {
    ScheduledTask task=new ScheduledTask(MutableMap.of(""String_Node_Str"",pollPeriod),taskFactory);
    pollingTask=managementContext.getExecutionManager().submit(task);
  }
}",0.9640141915864168
79465,"@Override public void stop(){
  boolean wasRunning=running;
  running=false;
  nodeState=ManagementNodeState.TERMINATED;
  if (pollingTask != null)   pollingTask.cancel(true);
  if (wasRunning) {
    try {
      publishHealth();
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      LOG.error(""String_Node_Str"",e);
    }
  }
}","@Override public void stop(){
  LOG.debug(""String_Node_Str"" + this);
  boolean wasRunning=running;
  running=false;
  nodeState=ManagementNodeState.TERMINATED;
  if (pollingTask != null)   pollingTask.cancel(true);
  if (wasRunning) {
    try {
      publishHealth();
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.9470827679782904
79466,"public HighAvailabilityManagerImpl setPollPeriod(Duration val){
  this.pollPeriod=checkNotNull(val,""String_Node_Str"");
  if (running && pollingTask != null) {
    pollingTask.cancel(true);
    registerPollTask();
  }
  return this;
}","public HighAvailabilityManagerImpl setPollPeriod(Duration val){
  this.pollPeriod=checkNotNull(val,""String_Node_Str"");
  if (running) {
    if (pollingTask != null) {
      pollingTask.cancel(true);
    }
    registerPollTask();
  }
  return this;
}",0.950207468879668
79467,"protected boolean isHeartbeatOk(ManagementNodeSyncRecord masterNode,ManagementNodeSyncRecord meNode){
  if (masterNode == null || meNode == null)   return false;
  Long timestampMaster=masterNode.getRemoteTimestamp();
  Long timestampMe=meNode.getRemoteTimestamp();
  if (timestampMaster == null || timestampMe == null)   return false;
  return (timestampMe - timestampMaster) <= heartbeatTimeout.toMilliseconds();
}","protected boolean isHeartbeatOk(ManagementNodeSyncRecord masterNode,ManagementNodeSyncRecord meNode){
  if (masterNode == null)   return false;
  if (meNode == null) {
    return true;
  }
  Long timestampMaster=masterNode.getRemoteTimestamp();
  Long timestampMe=meNode.getRemoteTimestamp();
  if (timestampMaster == null || timestampMe == null)   return false;
  return (timestampMe - timestampMaster) <= heartbeatTimeout.toMilliseconds();
}",0.4167636786961583
79468,"protected ManagementNodeSyncRecord hasHealthyMaster(){
  ManagementPlaneSyncRecord memento=loadManagementPlaneSyncRecord(false);
  String nodeId=memento.getMasterNodeId();
  ManagementNodeSyncRecord masterMemento=(nodeId == null) ? null : memento.getManagementNodes().get(nodeId);
  boolean result=masterMemento != null && masterMemento.getStatus() == ManagementNodeState.MASTER && isHeartbeatOk(masterMemento,memento.getManagementNodes().get(ownNodeId));
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",new Object[]{result,nodeId,(masterMemento == null ? ""String_Node_Str"" : masterMemento.toVerboseString())});
  return (result ? masterMemento : null);
}","protected ManagementNodeSyncRecord hasHealthyMaster(){
  ManagementPlaneSyncRecord memento=loadManagementPlaneSyncRecord(false);
  String nodeId=memento.getMasterNodeId();
  ManagementNodeSyncRecord masterMemento=(nodeId == null) ? null : memento.getManagementNodes().get(nodeId);
  ManagementNodeSyncRecord ourMemento=memento.getManagementNodes().get(ownNodeId);
  boolean result=masterMemento != null && masterMemento.getStatus() == ManagementNodeState.MASTER && isHeartbeatOk(masterMemento,ourMemento);
  if (LOG.isDebugEnabled())   LOG.debug(""String_Node_Str"",new Object[]{result,nodeId,(masterMemento == null ? ""String_Node_Str"" : masterMemento.toVerboseString()),(ourMemento == null ? ""String_Node_Str"" : ourMemento.toVerboseString())});
  return (result ? masterMemento : null);
}",0.8567493112947658
79469,"protected void doTestConcurrentStartup(int size,final Duration staggerStart) throws Exception {
  useSharedTime();
  List<Thread> spawned=MutableList.of();
  for (int i=0; i < size; i++) {
    final HaMgmtNode n=newNode();
    Thread t=new Thread(){
      public void run(){
        if (staggerStart != null)         Time.sleep(staggerStart.multiply(Math.random()));
        n.ha.start(HighAvailabilityMode.AUTO);
      }
    }
;
    spawned.add(t);
    t.start();
  }
  Assert.assertTrue(Repeater.create().every(Duration.millis(1)).limitTimeTo(Duration.THIRTY_SECONDS).until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      ManagementPlaneSyncRecord memento=nodes.get(0).ha.getManagementPlaneSyncState();
      int masters=0, standbys=0, savedMasters=0, savedStandbys=0;
      for (      HaMgmtNode n : nodes) {
        if (n.ha.getNodeState() == ManagementNodeState.MASTER)         masters++;
        if (n.ha.getNodeState() == ManagementNodeState.STANDBY)         standbys++;
        ManagementNodeSyncRecord m=memento.getManagementNodes().get(n.ownNodeId);
        if (m != null) {
          if (m.getStatus() == ManagementNodeState.MASTER)           savedMasters++;
          if (m.getStatus() == ManagementNodeState.STANDBY)           savedStandbys++;
        }
      }
      log.info(""String_Node_Str"" + nodes.size() + ""String_Node_Str""+ masters+ ""String_Node_Str""+ standbys+ ""String_Node_Str""+ memento.getManagementNodes().size()+ ""String_Node_Str""+ memento.getMasterNodeId()+ ""String_Node_Str""+ savedMasters+ ""String_Node_Str""+ savedStandbys+ ""String_Node_Str"");
      return masters == 1 && standbys == nodes.size() - 1 && savedMasters == 1 && savedStandbys == nodes.size() - 1;
    }
  }
).run());
  for (  Thread t : spawned)   t.join(Duration.THIRTY_SECONDS.toMilliseconds());
}","protected void doTestConcurrentStartup(int size,final Duration staggerStart) throws Exception {
  useSharedTime();
  List<Thread> spawned=MutableList.of();
  for (int i=0; i < size; i++) {
    final HaMgmtNode n=newNode();
    Thread t=new Thread(){
      public void run(){
        if (staggerStart != null)         Time.sleep(staggerStart.multiply(Math.random()));
        n.ha.start(HighAvailabilityMode.AUTO);
        n.ha.setPollPeriod(Duration.millis(20));
      }
    }
;
    spawned.add(t);
    t.start();
  }
  try {
    final Stopwatch timer=Stopwatch.createStarted();
    Assert.assertTrue(Repeater.create().backoff(Duration.millis(1),1.2,Duration.millis(50)).limitTimeTo(Duration.THIRTY_SECONDS).until(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        ManagementPlaneSyncRecord memento=nodes.get(0).ha.getManagementPlaneSyncState();
        int masters=0, standbys=0, savedMasters=0, savedStandbys=0;
        for (        HaMgmtNode n : nodes) {
          if (n.ha.getNodeState() == ManagementNodeState.MASTER)           masters++;
          if (n.ha.getNodeState() == ManagementNodeState.STANDBY)           standbys++;
          ManagementNodeSyncRecord m=memento.getManagementNodes().get(n.ownNodeId);
          if (m != null) {
            if (m.getStatus() == ManagementNodeState.MASTER)             savedMasters++;
            if (m.getStatus() == ManagementNodeState.STANDBY)             savedStandbys++;
          }
        }
        log.info(""String_Node_Str"" + nodes.size() + ""String_Node_Str""+ masters+ ""String_Node_Str""+ standbys+ ""String_Node_Str""+ memento.getManagementNodes().size()+ ""String_Node_Str""+ memento.getMasterNodeId()+ ""String_Node_Str""+ savedMasters+ ""String_Node_Str""+ savedStandbys+ ""String_Node_Str"");
        if (timer.isRunning() && Duration.of(timer).compareTo(Duration.TEN_SECONDS) > 0) {
          log.warn(""String_Node_Str"");
          timer.stop();
        }
        return masters == 1 && standbys == nodes.size() - 1 && savedMasters == 1 && savedStandbys == nodes.size() - 1;
      }
    }
).run());
  }
 catch (  Throwable t) {
    log.warn(""String_Node_Str"" + t,t);
    throw Exceptions.propagate(t);
  }
  for (  Thread t : spawned)   t.join(Duration.THIRTY_SECONDS.toMilliseconds());
}",0.8731434136839542
79470,"public void run(){
  if (staggerStart != null)   Time.sleep(staggerStart.multiply(Math.random()));
  n.ha.start(HighAvailabilityMode.AUTO);
}","public void run(){
  if (staggerStart != null)   Time.sleep(staggerStart.multiply(Math.random()));
  n.ha.start(HighAvailabilityMode.AUTO);
  n.ha.setPollPeriod(Duration.millis(20));
}",0.8676923076923077
79471,"@Override public Boolean call() throws Exception {
  ManagementPlaneSyncRecord memento=nodes.get(0).ha.getManagementPlaneSyncState();
  int masters=0, standbys=0, savedMasters=0, savedStandbys=0;
  for (  HaMgmtNode n : nodes) {
    if (n.ha.getNodeState() == ManagementNodeState.MASTER)     masters++;
    if (n.ha.getNodeState() == ManagementNodeState.STANDBY)     standbys++;
    ManagementNodeSyncRecord m=memento.getManagementNodes().get(n.ownNodeId);
    if (m != null) {
      if (m.getStatus() == ManagementNodeState.MASTER)       savedMasters++;
      if (m.getStatus() == ManagementNodeState.STANDBY)       savedStandbys++;
    }
  }
  log.info(""String_Node_Str"" + nodes.size() + ""String_Node_Str""+ masters+ ""String_Node_Str""+ standbys+ ""String_Node_Str""+ memento.getManagementNodes().size()+ ""String_Node_Str""+ memento.getMasterNodeId()+ ""String_Node_Str""+ savedMasters+ ""String_Node_Str""+ savedStandbys+ ""String_Node_Str"");
  return masters == 1 && standbys == nodes.size() - 1 && savedMasters == 1 && savedStandbys == nodes.size() - 1;
}","@Override public Boolean call() throws Exception {
  ManagementPlaneSyncRecord memento=nodes.get(0).ha.getManagementPlaneSyncState();
  int masters=0, standbys=0, savedMasters=0, savedStandbys=0;
  for (  HaMgmtNode n : nodes) {
    if (n.ha.getNodeState() == ManagementNodeState.MASTER)     masters++;
    if (n.ha.getNodeState() == ManagementNodeState.STANDBY)     standbys++;
    ManagementNodeSyncRecord m=memento.getManagementNodes().get(n.ownNodeId);
    if (m != null) {
      if (m.getStatus() == ManagementNodeState.MASTER)       savedMasters++;
      if (m.getStatus() == ManagementNodeState.STANDBY)       savedStandbys++;
    }
  }
  log.info(""String_Node_Str"" + nodes.size() + ""String_Node_Str""+ masters+ ""String_Node_Str""+ standbys+ ""String_Node_Str""+ memento.getManagementNodes().size()+ ""String_Node_Str""+ memento.getMasterNodeId()+ ""String_Node_Str""+ savedMasters+ ""String_Node_Str""+ savedStandbys+ ""String_Node_Str"");
  if (timer.isRunning() && Duration.of(timer).compareTo(Duration.TEN_SECONDS) > 0) {
    log.warn(""String_Node_Str"");
    timer.stop();
  }
  return masters == 1 && standbys == nodes.size() - 1 && savedMasters == 1 && savedStandbys == nodes.size() - 1;
}",0.9214285714285714
79472,"protected abstract <T>Task<T> submitInternal(Map<?,?> properties,Object task);","/** 
 * does the work internally of submitting the task; note that the return value may be a wrapper task even if a task is passed in, if the execution context where the target should run is different (e.g. submitting an effector task cross-context) 
 */
protected abstract <T>Task<T> submitInternal(Map<?,?> properties,Object task);",0.3795620437956204
79473,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public CompoundTask(Map<String,?> flags,Collection<?> jobs){
  super(flags);
  super.job=new Callable<List<T>>(){
    @Override public List<T> call() throws Exception {
      return runJobs();
    }
  }
;
  this.result=new ArrayList<Object>(jobs.size());
  this.children=new ArrayList<Task<? extends T>>(jobs.size());
  for (  Object job : jobs) {
    Task subtask;
    if (job instanceof TaskAdaptable) {
      subtask=((TaskAdaptable)job).asTask();
    }
 else     if (job instanceof Closure) {
      subtask=new BasicTask<T>((Closure)job);
    }
 else     if (job instanceof Callable) {
      subtask=new BasicTask<T>((Callable)job);
    }
 else     if (job instanceof Runnable) {
      subtask=new BasicTask<T>((Runnable)job);
    }
 else     throw new IllegalArgumentException(""String_Node_Str"" + (job == null ? null : job.getClass() + ""String_Node_Str"" + job+ ""String_Node_Str"") + ""String_Node_Str"");
    BrooklynTaskTags.addTagDynamically(subtask,ManagementContextInternal.SUB_TASK_TAG);
    children.add(subtask);
  }
  for (  Task<?> t : getChildren())   ((TaskInternal<?>)t).markQueued();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public CompoundTask(Map<String,?> flags,Collection<?> jobs){
  super(flags);
  super.job=new Callable<List<T>>(){
    @Override public List<T> call() throws Exception {
      return runJobs();
    }
  }
;
  this.result=new ArrayList<Object>(jobs.size());
  this.children=new ArrayList<Task<? extends T>>(jobs.size());
  for (  Object job : jobs) {
    Task subtask;
    if (job instanceof TaskAdaptable) {
      subtask=((TaskAdaptable)job).asTask();
    }
 else     if (job instanceof Closure) {
      subtask=new BasicTask<T>((Closure)job);
    }
 else     if (job instanceof Callable) {
      subtask=new BasicTask<T>((Callable)job);
    }
 else     if (job instanceof Runnable) {
      subtask=new BasicTask<T>((Runnable)job);
    }
 else     throw new IllegalArgumentException(""String_Node_Str"" + (job == null ? null : job.getClass() + ""String_Node_Str"" + job+ ""String_Node_Str"") + ""String_Node_Str"");
    BrooklynTaskTags.addTagDynamically(subtask,ManagementContextInternal.SUB_TASK_TAG);
    children.add(subtask);
  }
  for (  Task<?> t : getChildren()) {
    ((TaskInternal<?>)t).markQueued();
  }
}",0.9965546942291128
79474,"@SuppressWarnings(""String_Node_Str"") public <T extends Entity>T createEntityProxy(EntitySpec<T> spec,T entity){
  ClassLoader classloader=(spec.getImplementation() != null ? spec.getImplementation() : spec.getType()).getClassLoader();
  MutableSet.Builder<Class<?>> builder=MutableSet.<Class<?>>builder().add(EntityProxy.class,Entity.class,EntityLocal.class,EntityInternal.class);
  if (spec.getType().isInterface()) {
    builder.add(spec.getType());
  }
 else {
    log.warn(""String_Node_Str"" + spec.getType() + ""String_Node_Str"");
  }
  builder.addAll(spec.getAdditionalInterfaces());
  Set<Class<?>> interfaces=builder.build();
  AggregateClassLoader aggregateClassLoader=AggregateClassLoader.newInstanceWithNoLoaders();
  aggregateClassLoader.addFirst(classloader);
  aggregateClassLoader.addFirst(entity.getClass().getClassLoader());
  for (  Class<?> iface : interfaces) {
    aggregateClassLoader.addLast(iface.getClassLoader());
  }
  return (T)java.lang.reflect.Proxy.newProxyInstance(aggregateClassLoader,interfaces.toArray(new Class[interfaces.size()]),new EntityProxyImpl(entity));
}","@SuppressWarnings(""String_Node_Str"") public <T extends Entity>T createEntityProxy(EntitySpec<T> spec,T entity){
  MutableSet.Builder<Class<?>> builder=MutableSet.<Class<?>>builder().add(EntityProxy.class,Entity.class,EntityLocal.class,EntityInternal.class);
  if (spec.getType().isInterface()) {
    builder.add(spec.getType());
  }
 else {
    log.warn(""String_Node_Str"" + spec.getType() + ""String_Node_Str"");
  }
  builder.addAll(spec.getAdditionalInterfaces());
  Set<Class<?>> interfaces=builder.build();
  AggregateClassLoader aggregateClassLoader=AggregateClassLoader.newInstanceWithNoLoaders();
  aggregateClassLoader.addFirst(entity.getClass().getClassLoader());
  for (  Class<?> iface : interfaces) {
    aggregateClassLoader.addLast(iface.getClassLoader());
  }
  return (T)java.lang.reflect.Proxy.newProxyInstance(aggregateClassLoader,interfaces.toArray(new Class[interfaces.size()]),new EntityProxyImpl(entity));
}",0.91646070192783
79475,"public <T>Maybe<Class<T>> tryResolveClass(String type,Iterable<String> bundleUrlsOrNameVersionString){
  Map<String,Throwable> bundleProblems=MutableMap.of();
  for (  String bundleUrlOrNameVersionString : bundleUrlsOrNameVersionString) {
    try {
      String bundleNameVersion=bundleUrlToNameVersionString.get(bundleUrlOrNameVersionString);
      if (bundleNameVersion == null) {
        bundleNameVersion=bundleUrlOrNameVersionString;
      }
      Maybe<Bundle> bundle=Osgis.getBundle(framework,bundleNameVersion);
      if (bundle.isPresent()) {
        @SuppressWarnings(""String_Node_Str"") Class<T> clazz=(Class<T>)bundle.get().loadClass(type);
        return Maybe.of(clazz);
      }
 else {
        bundleProblems.put(bundleUrlOrNameVersionString,new IllegalStateException(""String_Node_Str"" + bundleUrlOrNameVersionString));
      }
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      bundleProblems.put(bundleUrlOrNameVersionString,e);
    }
  }
  return Maybe.absent(""String_Node_Str"" + type + ""String_Node_Str""+ bundleProblems);
}","public <T>Maybe<Class<T>> tryResolveClass(String type,Iterable<String> bundleUrlsOrNameVersionString){
  Map<String,Throwable> bundleProblems=MutableMap.of();
  for (  String bundleUrlOrNameVersionString : bundleUrlsOrNameVersionString) {
    try {
      String bundleNameVersion=bundleUrlToNameVersionString.get(bundleUrlOrNameVersionString);
      if (bundleNameVersion == null) {
        bundleNameVersion=bundleUrlOrNameVersionString;
      }
      Maybe<Bundle> bundle=Osgis.getBundle(framework,bundleNameVersion);
      if (bundle.isPresent()) {
        Bundle b=bundle.get();
        Class<T> clazz;
        if (Osgis.isExtensionBundle(b)) {
          @SuppressWarnings(""String_Node_Str"") Class<T> c=(Class<T>)Class.forName(type);
          clazz=c;
        }
 else {
          @SuppressWarnings(""String_Node_Str"") Class<T> c=(Class<T>)b.loadClass(type);
          clazz=c;
        }
        return Maybe.of(clazz);
      }
 else {
        bundleProblems.put(bundleUrlOrNameVersionString,new IllegalStateException(""String_Node_Str"" + bundleUrlOrNameVersionString));
      }
    }
 catch (    Exception e) {
      Exceptions.propagateIfFatal(e);
      bundleProblems.put(bundleUrlOrNameVersionString,e);
      Throwable cause=e.getCause();
      if (cause != null && cause.getMessage().contains(""String_Node_Str"")) {
        log.warn(""String_Node_Str"" + bundleUrlOrNameVersionString + ""String_Node_Str""+ type+ ""String_Node_Str""+ cause.getMessage());
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"",e);
      }
    }
  }
  return Maybe.absent(""String_Node_Str"" + type + ""String_Node_Str""+ bundleProblems);
}",0.7486116253239541
79476,"public String getClassLoaderDir(String resourceInThatDir){
  resourceInThatDir=Strings.removeFromStart(resourceInThatDir,""String_Node_Str"");
  URL url=getLoader().getResource(resourceInThatDir);
  if (url == null)   throw new NoSuchElementException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str"");
  boolean isJar=""String_Node_Str"".equals(url.getProtocol());
  if (isJar) {
    try {
      JarURLConnection connection=(JarURLConnection)url.openConnection();
      url=connection.getJarFileURL();
    }
 catch (    IOException e) {
      throw new IllegalStateException(e);
    }
  }
 else {
    String path=url.toString();
    int i=path.indexOf(resourceInThatDir);
    if (i == -1)     throw new IllegalStateException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str""+ url+ ""String_Node_Str"");
    String parent=path.substring(0,i);
    try {
      url=new URL(parent);
    }
 catch (    MalformedURLException e) {
      throw new IllegalStateException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str""+ parent+ ""String_Node_Str"",e);
    }
  }
  if (!""String_Node_Str"".equals(url.getProtocol()))   throw new IllegalStateException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str""+ url+ ""String_Node_Str"");
  File file;
  try {
    file=new File(url.toURI());
  }
 catch (  URISyntaxException e) {
    throw new IllegalStateException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str""+ url+ ""String_Node_Str"",e);
  }
  if (!file.exists())   throw new IllegalStateException(""String_Node_Str"" + url + ""String_Node_Str"");
  return file.getPath();
}","public String getClassLoaderDir(String resourceInThatDir){
  resourceInThatDir=Strings.removeFromStart(resourceInThatDir,""String_Node_Str"");
  URL resourceUrl=getLoader().getResource(resourceInThatDir);
  if (resourceUrl == null)   throw new NoSuchElementException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str"");
  URL containerUrl=getContainerUrl(resourceUrl,resourceInThatDir);
  if (!""String_Node_Str"".equals(containerUrl.getProtocol()))   throw new IllegalStateException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str""+ containerUrl+ ""String_Node_Str"");
  File file;
  try {
    file=new File(containerUrl.toURI());
  }
 catch (  URISyntaxException e) {
    throw new IllegalStateException(""String_Node_Str"" + resourceInThatDir + ""String_Node_Str""+ containerUrl+ ""String_Node_Str"",e);
  }
  if (!file.exists())   throw new IllegalStateException(""String_Node_Str"" + containerUrl + ""String_Node_Str"");
  return file.getPath();
}",0.5080740448995668
79477,"/** 
 * creates a task which returns modifies sudoers to ensure non-tty access is permitted; also gives nice warnings if sudo is not permitted 
 */
public static ProcessTaskFactory<Boolean> dontRequireTtyForSudo(SshMachineLocation machine,final boolean requireSuccess){
  final String id=Identifiers.makeRandomId(6);
  return newSshExecTaskFactory(machine,BashCommands.dontRequireTtyForSudo(),BashCommands.sudo(""String_Node_Str"" + id)).summary(""String_Node_Str"").configure(SshTool.PROP_ALLOCATE_PTY,true).allowingNonZeroExitCode().returning(new Function<ProcessTaskWrapper<?>,Boolean>(){
    public Boolean apply(    ProcessTaskWrapper<?> task){
      if (task.getExitCode() == 0 && task.getStdout().contains(""String_Node_Str"" + id))       return true;
      Entity entity=BrooklynTaskTags.getTargetOrContextEntity(Tasks.current());
      log.warn(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ ""String_Node_Str""+ ""String_Node_Str""+ task.getExitCode()+ (entity != null ? ""String_Node_Str"" + entity : ""String_Node_Str"")+ ""String_Node_Str"");
      Streams.logStreamTail(log,""String_Node_Str"",Streams.byteArrayOfString(task.getStderr()),1024);
      if (requireSuccess) {
        throw new IllegalStateException(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ (entity != null ? ""String_Node_Str"" + entity + ""String_Node_Str"" : ""String_Node_Str""));
      }
      return true;
    }
  }
);
}","/** 
 * creates a task which returns modifies sudoers to ensure non-tty access is permitted; also gives nice warnings if sudo is not permitted 
 */
public static ProcessTaskFactory<Boolean> dontRequireTtyForSudo(SshMachineLocation machine,final boolean requireSuccess){
  final String id=Identifiers.makeRandomId(6);
  return newSshExecTaskFactory(machine,BashCommands.dontRequireTtyForSudo(),BashCommands.sudo(""String_Node_Str"" + id)).summary(""String_Node_Str"").configure(SshTool.PROP_ALLOCATE_PTY,true).allowingNonZeroExitCode().returning(new Function<ProcessTaskWrapper<?>,Boolean>(){
    public Boolean apply(    ProcessTaskWrapper<?> task){
      if (task.getExitCode() == 0 && task.getStdout().contains(""String_Node_Str"" + id))       return true;
      Entity entity=BrooklynTaskTags.getTargetOrContextEntity(Tasks.current());
      String message=""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ ""String_Node_Str""+ ""String_Node_Str""+ task.getExitCode()+ (entity != null ? ""String_Node_Str"" + entity : ""String_Node_Str"")+ ""String_Node_Str"";
      DynamicTasks.queueIfPossible(Tasks.warning(message,null));
      Streams.logStreamTail(log,""String_Node_Str"",Streams.byteArrayOfString(task.getStderr()),1024);
      if (requireSuccess) {
        throw new IllegalStateException(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ (entity != null ? ""String_Node_Str"" + entity + ""String_Node_Str"" : ""String_Node_Str""));
      }
      return true;
    }
  }
);
}",0.9717223650385604
79478,"/** 
 * Runs a script and returns the result code, supporting flags including: out, err as output/error streams; logPrefix, prefix string to put in log output; env, map of environment vars to pass to shell environment 
 */
int execute(Map flags,List<String> script,String summaryForLogging);","/** 
 * Runs a script and returns the result code, supporting flags including: out, err as output/error streams; logPrefix, prefix string to put in log output; env, map of environment vars to pass to shell environment 
 */
@SuppressWarnings(""String_Node_Str"") int execute(Map flags,List<String> script,String summaryForLogging);",0.9402261712439418
79479,"public int executeInternal(){
  if (!executionCheck.apply(this)) {
    return 0;
  }
  List<String> lines=getLines();
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"",summary,lines);
  int result;
  try {
    mutexAcquire.run();
    Map flags=getFlags();
    if (closeSshConnection) {
      flags.put(""String_Node_Str"",true);
    }
    if (gatherOutput) {
      if (stdout == null)       stdout=new ByteArrayOutputStream();
      if (stderr == null)       stderr=new ByteArrayOutputStream();
      flags.put(""String_Node_Str"",stdout);
      flags.put(""String_Node_Str"",stderr);
    }
    result=runner.execute(flags,lines,summary);
  }
 catch (  RuntimeInterruptedException e) {
    throw logWithDetailsAndThrow(format(""String_Node_Str"",summary,e.getMessage()),e);
  }
catch (  Exception e) {
    throw logWithDetailsAndThrow(format(""String_Node_Str"",summary,e.getMessage()),e);
  }
 finally {
    mutexRelease.run();
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"",summary,result);
  if (!resultCodeCheck.apply(result)) {
    throw logWithDetailsAndThrow(format(""String_Node_Str"",result,summary),null);
  }
  return result;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int executeInternal(){
  if (!executionCheck.apply(this)) {
    return 0;
  }
  List<String> lines=getLines();
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"",summary,lines);
  int result;
  try {
    mutexAcquire.run();
    Map flags=getFlags();
    if (closeSshConnection) {
      flags.put(""String_Node_Str"",true);
    }
    if (gatherOutput) {
      if (stdout == null)       stdout=new ByteArrayOutputStream();
      if (stderr == null)       stderr=new ByteArrayOutputStream();
      flags.put(""String_Node_Str"",stdout);
      flags.put(""String_Node_Str"",stderr);
    }
    result=runner.execute(flags,lines,summary);
  }
 catch (  RuntimeInterruptedException e) {
    throw logWithDetailsAndThrow(format(""String_Node_Str"",summary,e.getMessage()),e);
  }
catch (  Exception e) {
    throw logWithDetailsAndThrow(format(""String_Node_Str"",summary,e.getMessage()),e);
  }
 finally {
    mutexRelease.run();
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"",summary,result);
  if (!resultCodeCheck.apply(result)) {
    throw logWithDetailsAndThrow(format(""String_Node_Str"",result,summary),null);
  }
  return result;
}",0.975796178343949
79480,"public Map getFlags(){
  return flags;
}","@SuppressWarnings(""String_Node_Str"") public Map getFlags(){
  return flags;
}",0.6837606837606838
79481,"@Override public void redeployAll(){
  Map<String,String> wars=MutableMap.copyOf(getConfig(WARS_BY_CONTEXT));
  String redeployPrefix=""String_Node_Str"" + wars.size() + ""String_Node_Str"";
  log.debug(""String_Node_Str"" + this + ""String_Node_Str""+ getConfig(WARS_BY_CONTEXT));
  Iterable<CanDeployAndUndeploy> targets=Iterables.filter(getChildren(),CanDeployAndUndeploy.class);
  TaskBuilder<Void> tb=Tasks.<Void>builder().parallel(true).name(redeployPrefix + ""String_Node_Str"" + Iterables.size(targets)+ ""String_Node_Str"");
  for (  Entity target : targets) {
    TaskBuilder<Void> redeployAllToTarget=Tasks.<Void>builder().name(redeployPrefix + ""String_Node_Str"" + target+ ""String_Node_Str"");
    for (    String targetName : wars.keySet()) {
      redeployAllToTarget.add(Effectors.invocation(target,DEPLOY,MutableMap.of(""String_Node_Str"",wars.get(targetName),""String_Node_Str"",targetName)));
    }
    tb.add(redeployAllToTarget.build());
  }
  DynamicTasks.queueIfPossible(tb.build()).orSubmitAsync(this).asTask().getUnchecked();
}","@Override public void redeployAll(){
  Map<String,String> wars=MutableMap.copyOf(getConfig(WARS_BY_CONTEXT));
  String redeployPrefix=""String_Node_Str"" + wars.size() + ""String_Node_Str"";
  log.debug(""String_Node_Str"" + this + ""String_Node_Str""+ getConfig(WARS_BY_CONTEXT));
  Iterable<CanDeployAndUndeploy> targets=Iterables.filter(getChildren(),CanDeployAndUndeploy.class);
  TaskBuilder<Void> tb=Tasks.<Void>builder().parallel(true).name(redeployPrefix + ""String_Node_Str"" + Iterables.size(targets)+ ""String_Node_Str"");
  for (  Entity target : targets) {
    TaskBuilder<Void> redeployAllToTarget=Tasks.<Void>builder().name(redeployPrefix + ""String_Node_Str"" + target+ ""String_Node_Str"");
    for (    String targetName : wars.keySet()) {
      redeployAllToTarget.add(Effectors.invocation(target,DEPLOY,MutableMap.of(""String_Node_Str"",wars.get(targetName),""String_Node_Str"",targetName)));
    }
    tb.add(whenServiceUp(target,redeployAllToTarget.build(),redeployPrefix + ""String_Node_Str"" + target+ ""String_Node_Str""));
  }
  DynamicTasks.queueIfPossible(tb.build()).orSubmitAsync(this).asTask().getUnchecked();
}",0.9604834960483496
79482,"/** 
 * Clear the registry. 
 */
public static void clearRegistry(){
  RendererHints.registry.clear();
}","/** 
 * Clear the registry.  MUST be used by a single test only. TestNG interleaves the tests (sequentially) which results in tearDown  executing in the middle of another class' tests. Only one tearDown may call this method.
 */
public static void clearRegistry(){
  RendererHints.registry.clear();
}",0.5148514851485149
79483,"/** 
 * Sets up the application and entity. <p> Adds a sensor and sets its value to   {@code 12345}. Configures a display value hint that appends   {@code frogs} to the value of the sensor.
 */
@BeforeClass(alwaysRun=true) @Override public void setUp() throws Exception {
  super.setUp();
  ClientResponse deploy=clientDeploy(simpleSpec);
  waitForApplicationToBeRunning(deploy.getLocation());
  entity=(EntityInternal)Iterables.find(getManagementContext().getEntityManager().getEntities(),new Predicate<Entity>(){
    @Override public boolean apply(    @Nullable Entity input){
      return ""String_Node_Str"".equals(input.getEntityType().getSimpleName());
    }
  }
);
}","@BeforeClass(alwaysRun=true) @Override public void setUp() throws Exception {
  super.setUp();
  ClientResponse deploy=clientDeploy(simpleSpec);
  waitForApplicationToBeRunning(deploy.getLocation());
  entity=(EntityInternal)Iterables.find(getManagementContext().getEntityManager().getEntities(),new Predicate<Entity>(){
    @Override public boolean apply(    @Nullable Entity input){
      return ""String_Node_Str"".equals(input.getEntityType().getSimpleName());
    }
  }
);
}",0.8310104529616724
79484,"@VisibleForTesting public void waitForPendingComplete(Duration duration) throws InterruptedException, TimeoutException ;","/** 
 * waits for any needed or pending writes to complete 
 */
@VisibleForTesting public void waitForPendingComplete(Duration duration) throws InterruptedException, TimeoutException ;",0.7894736842105263
79485,"public void start(){
  running=true;
  Callable<Task<?>> taskFactory=new Callable<Task<?>>(){
    @Override public Task<Void> call(){
      return new BasicTask<Void>(new Callable<Void>(){
        public Void call(){
          try {
            persistNow();
            return null;
          }
 catch (          Exception e) {
            LOG.warn(""String_Node_Str"",e);
            return null;
          }
catch (          Throwable t) {
            LOG.warn(""String_Node_Str"",t);
            throw Exceptions.propagate(t);
          }
        }
      }
);
    }
  }
;
  scheduledTask=(ScheduledTask)executionManager.submit(new ScheduledTask(taskFactory).period(period));
}","@SuppressWarnings(""String_Node_Str"") public void start(){
  running=true;
  Callable<Task<?>> taskFactory=new Callable<Task<?>>(){
    @Override public Task<Void> call(){
      return new BasicTask<Void>(new Callable<Void>(){
        public Void call(){
          try {
            persistNow();
            return null;
          }
 catch (          Exception e) {
            LOG.warn(""String_Node_Str"",e);
            return null;
          }
catch (          Throwable t) {
            LOG.warn(""String_Node_Str"",t);
            throw Exceptions.propagate(t);
          }
        }
      }
);
    }
  }
;
  scheduledTask=(ScheduledTask)executionManager.submit(new ScheduledTask(taskFactory).period(period));
}",0.9733621310295176
79486,"private void persistNow(){
  if (isActive()) {
    try {
      DeltaCollector prevDeltaCollector;
synchronized (this) {
        prevDeltaCollector=deltaCollector;
        deltaCollector=new DeltaCollector();
      }
      if (prevDeltaCollector.isEmpty()) {
        if (LOG.isTraceEnabled())         LOG.trace(""String_Node_Str"");
      }
 else {
        PersisterDeltaImpl persisterDelta=new PersisterDeltaImpl();
        for (        Location location : prevDeltaCollector.locations) {
          try {
            persisterDelta.locations.add(((LocationInternal)location).getRebindSupport().getMemento());
          }
 catch (          Exception e) {
            handleGenerateMementoException(e,""String_Node_Str"" + location.getClass().getSimpleName() + ""String_Node_Str""+ location.getId()+ ""String_Node_Str"");
          }
        }
        for (        Entity entity : prevDeltaCollector.entities) {
          try {
            persisterDelta.entities.add(((EntityInternal)entity).getRebindSupport().getMemento());
          }
 catch (          Exception e) {
            handleGenerateMementoException(e,""String_Node_Str"" + entity.getEntityType().getSimpleName() + ""String_Node_Str""+ entity.getId()+ ""String_Node_Str"");
          }
        }
        for (        Policy policy : prevDeltaCollector.policies) {
          try {
            persisterDelta.policies.add(policy.getRebindSupport().getMemento());
          }
 catch (          Exception e) {
            handleGenerateMementoException(e,""String_Node_Str"" + policy.getClass().getSimpleName() + ""String_Node_Str""+ policy.getId()+ ""String_Node_Str"");
          }
        }
        for (        Enricher enricher : prevDeltaCollector.enrichers) {
          try {
            persisterDelta.enrichers.add(enricher.getRebindSupport().getMemento());
          }
 catch (          Exception e) {
            handleGenerateMementoException(e,""String_Node_Str"" + enricher.getClass().getSimpleName() + ""String_Node_Str""+ enricher.getId()+ ""String_Node_Str"");
          }
        }
        persisterDelta.removedLocationIds=prevDeltaCollector.removedLocationIds;
        persisterDelta.removedEntityIds=prevDeltaCollector.removedEntityIds;
        persisterDelta.removedPolicyIds=prevDeltaCollector.removedPolicyIds;
        persisterDelta.removedEnricherIds=prevDeltaCollector.removedEnricherIds;
synchronized (new Object()) {
        }
        persister.delta(persisterDelta);
      }
    }
 catch (    Exception e) {
      if (isActive()) {
        throw Exceptions.propagate(e);
      }
 else {
        Exceptions.propagateIfFatal(e);
        LOG.debug(""String_Node_Str"",e);
      }
    }
 finally {
      writeCount.incrementAndGet();
    }
  }
}","@VisibleForTesting public void persistNow(){
  if (!isActive())   return;
  try {
    persistingMutex.acquire();
    if (!isActive())     return;
    DeltaCollector prevDeltaCollector;
synchronized (this) {
      prevDeltaCollector=deltaCollector;
      deltaCollector=new DeltaCollector();
    }
    if (prevDeltaCollector.isEmpty()) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"");
    }
 else {
      PersisterDeltaImpl persisterDelta=new PersisterDeltaImpl();
      for (      Location location : prevDeltaCollector.locations) {
        try {
          persisterDelta.locations.add(((LocationInternal)location).getRebindSupport().getMemento());
        }
 catch (        Exception e) {
          handleGenerateMementoException(e,""String_Node_Str"" + location.getClass().getSimpleName() + ""String_Node_Str""+ location.getId()+ ""String_Node_Str"");
        }
      }
      for (      Entity entity : prevDeltaCollector.entities) {
        try {
          persisterDelta.entities.add(((EntityInternal)entity).getRebindSupport().getMemento());
        }
 catch (        Exception e) {
          handleGenerateMementoException(e,""String_Node_Str"" + entity.getEntityType().getSimpleName() + ""String_Node_Str""+ entity.getId()+ ""String_Node_Str"");
        }
      }
      for (      Policy policy : prevDeltaCollector.policies) {
        try {
          persisterDelta.policies.add(policy.getRebindSupport().getMemento());
        }
 catch (        Exception e) {
          handleGenerateMementoException(e,""String_Node_Str"" + policy.getClass().getSimpleName() + ""String_Node_Str""+ policy.getId()+ ""String_Node_Str"");
        }
      }
      for (      Enricher enricher : prevDeltaCollector.enrichers) {
        try {
          persisterDelta.enrichers.add(enricher.getRebindSupport().getMemento());
        }
 catch (        Exception e) {
          handleGenerateMementoException(e,""String_Node_Str"" + enricher.getClass().getSimpleName() + ""String_Node_Str""+ enricher.getId()+ ""String_Node_Str"");
        }
      }
      persisterDelta.removedLocationIds=prevDeltaCollector.removedLocationIds;
      persisterDelta.removedEntityIds=prevDeltaCollector.removedEntityIds;
      persisterDelta.removedPolicyIds=prevDeltaCollector.removedPolicyIds;
      persisterDelta.removedEnricherIds=prevDeltaCollector.removedEnricherIds;
synchronized (new Object()) {
      }
      persister.delta(persisterDelta);
    }
  }
 catch (  Exception e) {
    if (isActive()) {
      throw Exceptions.propagate(e);
    }
 else {
      Exceptions.propagateIfFatal(e);
      LOG.debug(""String_Node_Str"",e);
    }
  }
 finally {
    writeCount.incrementAndGet();
    persistingMutex.release();
  }
}",0.9414163885799036
79487,"/** 
 * Looks up the state of all nodes in the management plane, and checks if the master is still ok. If it's not then determines which node should be promoted to master. If it is ourself, then promotes.
 */
protected void checkMaster(boolean initializing){
  ManagementPlaneSyncRecord memento=loadManagementPlaneSyncRecord(false);
  String masterNodeId=memento.getMasterNodeId();
  ManagementNodeSyncRecord masterNodeMemento=memento.getManagementNodes().get(masterNodeId);
  ManagementNodeSyncRecord ownNodeMemento=memento.getManagementNodes().get(ownNodeId);
  if (masterNodeMemento != null && masterNodeMemento.getStatus() == ManagementNodeState.MASTER && isHeartbeatOk(masterNodeMemento,ownNodeMemento)) {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"",masterNodeMemento.toVerboseString());
    return;
  }
 else   if (ownNodeMemento == null || !isHeartbeatOk(ownNodeMemento,ownNodeMemento)) {
    if (ownNodeMemento == null) {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ masterNodeId+ ""String_Node_Str"");
    }
 else {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ masterNodeId+ ""String_Node_Str""+ ""String_Node_Str""+ ownNodeMemento.toVerboseString());
    }
    return;
  }
 else   if (ownNodeId.equals(masterNodeId)) {
    LOG.warn(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ ownNodeMemento.toVerboseString());
    return;
  }
  ManagementNodeSyncRecord newMasterRecord=masterChooser.choose(memento,heartbeatTimeout,ownNodeId);
  String newMasterNodeId=(newMasterRecord == null) ? null : newMasterRecord.getNodeId();
  URI newMasterNodeUri=(newMasterRecord == null) ? null : newMasterRecord.getUri();
  boolean newMasterIsSelf=ownNodeId.equals(newMasterNodeId);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",new Object[]{(newMasterRecord == null ? ""String_Node_Str"" : newMasterRecord.toVerboseString()),(masterNodeMemento == null ? masterNodeId + ""String_Node_Str"" : masterNodeMemento.toVerboseString()),memento,ownNodeMemento.toVerboseString(),heartbeatTimeout});
  }
  if (!initializing) {
    LOG.warn(""String_Node_Str"" + masterNodeId + ""String_Node_Str""+ (masterNodeMemento == null ? ""String_Node_Str"" : masterNodeMemento.getRemoteTimestamp())+ ""String_Node_Str""+ ""String_Node_Str""+ (newMasterNodeId == null ? ""String_Node_Str"" : newMasterNodeId + ""String_Node_Str"" + newMasterRecord.getRemoteTimestamp()+ ""String_Node_Str""+ (newMasterNodeUri != null ? ""String_Node_Str"" + newMasterNodeUri : ""String_Node_Str"")+ (newMasterIsSelf ? ""String_Node_Str"" : ""String_Node_Str"")));
  }
  if (newMasterIsSelf) {
    promoteToMaster();
  }
}","/** 
 * Looks up the state of all nodes in the management plane, and checks if the master is still ok. If it's not then determines which node should be promoted to master. If it is ourself, then promotes.
 */
protected void checkMaster(boolean initializing){
  ManagementPlaneSyncRecord memento=loadManagementPlaneSyncRecord(false);
  String masterNodeId=memento.getMasterNodeId();
  ManagementNodeSyncRecord masterNodeMemento=memento.getManagementNodes().get(masterNodeId);
  ManagementNodeSyncRecord ownNodeMemento=memento.getManagementNodes().get(ownNodeId);
  ManagementNodeSyncRecord newMasterRecord=null;
  boolean demotingSelfInFavourOfOtherMaster=false;
  if (masterNodeMemento != null && masterNodeMemento.getStatus() == ManagementNodeState.MASTER && isHeartbeatOk(masterNodeMemento,ownNodeMemento)) {
    if (ownNodeId.equals(masterNodeId)) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",masterNodeMemento.toVerboseString());
      return;
    }
 else {
      if (ownNodeMemento != null && ownNodeMemento.getStatus() == ManagementNodeState.MASTER) {
        LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ masterNodeId);
        newMasterRecord=masterNodeMemento;
        demotingSelfInFavourOfOtherMaster=true;
      }
 else {
        if (LOG.isTraceEnabled())         LOG.trace(""String_Node_Str"",masterNodeMemento.toVerboseString());
        return;
      }
    }
  }
 else   if (ownNodeMemento == null || !isHeartbeatOk(ownNodeMemento,ownNodeMemento)) {
    if (ownNodeMemento == null) {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ masterNodeId+ ""String_Node_Str"");
    }
 else {
      LOG.error(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ masterNodeId+ ""String_Node_Str""+ ""String_Node_Str""+ ownNodeMemento.toVerboseString());
    }
    return;
  }
 else   if (ownNodeId.equals(masterNodeId)) {
    LOG.warn(""String_Node_Str"" + ownNodeId + ""String_Node_Str""+ ""String_Node_Str""+ ownNodeMemento.toVerboseString());
    return;
  }
  if (demotingSelfInFavourOfOtherMaster) {
    LOG.debug(""String_Node_Str"" + ownNodeMemento.toVerboseString() + ""String_Node_Str""+ newMasterRecord);
    demoteToStandby();
    return;
  }
  newMasterRecord=masterChooser.choose(memento,heartbeatTimeout,ownNodeId);
  String newMasterNodeId=(newMasterRecord == null) ? null : newMasterRecord.getNodeId();
  URI newMasterNodeUri=(newMasterRecord == null) ? null : newMasterRecord.getUri();
  boolean newMasterIsSelf=ownNodeId.equals(newMasterNodeId);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",new Object[]{(newMasterRecord == null ? ""String_Node_Str"" : newMasterRecord.toVerboseString()),(masterNodeMemento == null ? masterNodeId + ""String_Node_Str"" : masterNodeMemento.toVerboseString()),memento,ownNodeMemento.toVerboseString(),heartbeatTimeout});
  }
  if (!initializing) {
    if (!demotingSelfInFavourOfOtherMaster) {
      LOG.warn(""String_Node_Str"" + masterNodeId + ""String_Node_Str""+ (masterNodeMemento == null ? ""String_Node_Str"" : masterNodeMemento.getRemoteTimestamp())+ ""String_Node_Str""+ ""String_Node_Str""+ (newMasterNodeId == null ? ""String_Node_Str"" : (newMasterIsSelf ? ""String_Node_Str"" : ""String_Node_Str"") + newMasterNodeId + ""String_Node_Str""+ newMasterRecord.getRemoteTimestamp()+ ""String_Node_Str""+ (newMasterNodeUri != null ? ""String_Node_Str"" + newMasterNodeUri : ""String_Node_Str"")));
    }
  }
  if (newMasterIsSelf) {
    promoteToMaster();
  }
}",0.7047371836469825
79488,"/** 
 * Publishes (via   {@link #persister}) the state of this management node with itself set to master.
 */
protected synchronized void publishDemotionFromMasterOnFailure(){
  checkState(getNodeState() == ManagementNodeState.FAILED,""String_Node_Str"",getNodeState());
  if (persister == null) {
    LOG.info(""String_Node_Str"");
    return;
  }
  ManagementNodeSyncRecord memento=createManagementNodeSyncRecord(false);
  Delta delta=ManagementPlaneSyncRecordDeltaImpl.builder().node(memento).clearMaster(ownNodeId).build();
  persister.delta(delta);
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"",memento);
}","/** 
 * Publishes (via   {@link #persister}) the state of this management node with itself set to master.
 */
protected synchronized void publishDemotionFromMasterOnFailure(){
  checkState(getNodeState() == ManagementNodeState.FAILED,""String_Node_Str"",getNodeState());
  publishDemotionFromMaster(true);
}",0.5974025974025974
79489,"public void waitForPendingComplete(Duration timeout) throws InterruptedException, TimeoutException {
  throw new IllegalStateException(""String_Node_Str"" + NonDeploymentManagementContext.this + ""String_Node_Str"");
}","@Override public void waitForPendingComplete(Duration timeout) throws InterruptedException, TimeoutException {
  throw new IllegalStateException(""String_Node_Str"" + NonDeploymentManagementContext.this + ""String_Node_Str"");
}",0.9771689497716894
79490,"public InMemoryObjectStore(Map<String,String> map,Map<String,Date> fileModTimesByName){
  filesByName=map;
  this.fileModTimesByName=fileModTimesByName;
  log.info(""String_Node_Str"");
}","public InMemoryObjectStore(Map<String,String> map,Map<String,Date> fileModTimesByName){
  filesByName=map;
  this.fileModTimesByName=fileModTimesByName;
  log.debug(""String_Node_Str"");
}",0.9757412398921832
79491,"/** 
 * returns a (mutable) map of the standard flags which should be placed on an effector 
 */
public static Map<Object,Object> getTaskFlagsForEffectorInvocation(Entity entity,Effector<?> effector){
  return MutableMap.builder().put(""String_Node_Str"",""String_Node_Str"" + effector.getName() + ""String_Node_Str""+ entity.getDisplayName()).put(""String_Node_Str"",effector.getName()).put(""String_Node_Str"",MutableList.of(ManagementContextInternal.EFFECTOR_TAG,BrooklynTaskTags.tagForTargetEntity(entity))).build();
}","/** 
 * returns a (mutable) map of the standard flags which should be placed on an effector 
 */
public static Map<Object,Object> getTaskFlagsForEffectorInvocation(Entity entity,Effector<?> effector){
  return MutableMap.builder().put(""String_Node_Str"",""String_Node_Str"" + effector.getName() + ""String_Node_Str""+ entity.getDisplayName()).put(""String_Node_Str"",effector.getName()).put(""String_Node_Str"",MutableList.of(BrooklynTaskTags.EFFECTOR_TAG,BrooklynTaskTags.tagForEffectorName(effector.getName()),BrooklynTaskTags.tagForTargetEntity(entity))).build();
}",0.9094304388422036
79492,"public synchronized BlobStoreContext getBlobStoreContext(){
  if (context == null) {
    if (location == null) {
      Preconditions.checkNotNull(locationSpec,""String_Node_Str"");
      Preconditions.checkNotNull(mgmt,""String_Node_Str"");
      location=(JcloudsLocation)mgmt.getLocationRegistry().resolve(locationSpec);
    }
    String identity=checkNotNull(location.getConfig(LocationConfigKeys.ACCESS_IDENTITY),""String_Node_Str"");
    String credential=checkNotNull(location.getConfig(LocationConfigKeys.ACCESS_CREDENTIAL),""String_Node_Str"");
    String provider=checkNotNull(location.getConfig(LocationConfigKeys.CLOUD_PROVIDER),""String_Node_Str"");
    String endpoint=location.getConfig(CloudLocationConfig.CLOUD_ENDPOINT);
    ContextBuilder contextBuilder=ContextBuilder.newBuilder(provider).credentials(identity,credential);
    if (!Strings.isBlank(endpoint)) {
      contextBuilder.endpoint(endpoint);
    }
    context=contextBuilder.buildView(BlobStoreContext.class);
    context.getBlobStore().createContainerInLocation(null,getContainerName());
  }
  return context;
}","public synchronized BlobStoreContext getBlobStoreContext(){
  if (context == null) {
    if (location == null) {
      Preconditions.checkNotNull(locationSpec,""String_Node_Str"");
      Preconditions.checkNotNull(mgmt,""String_Node_Str"");
      location=(JcloudsLocation)mgmt.getLocationRegistry().resolve(locationSpec);
    }
    String identity=checkNotNull(location.getConfig(LocationConfigKeys.ACCESS_IDENTITY),""String_Node_Str"");
    String credential=checkNotNull(location.getConfig(LocationConfigKeys.ACCESS_CREDENTIAL),""String_Node_Str"");
    String provider=checkNotNull(location.getConfig(LocationConfigKeys.CLOUD_PROVIDER),""String_Node_Str"");
    String endpoint=location.getConfig(CloudLocationConfig.CLOUD_ENDPOINT);
    context=JcloudsUtil.newBlobstoreContext(provider,endpoint,identity,credential,true);
    context.getBlobStore().createContainerInLocation(null,getContainerName());
  }
  return context;
}",0.792
79493,"public static String waitForPasswordOnAws(ComputeService computeService,final NodeMetadata node,long timeout,TimeUnit timeUnit) throws TimeoutException {
  ComputeServiceContext computeServiceContext=computeService.getContext();
  AWSEC2Api ec2Client=computeServiceContext.unwrapApi(AWSEC2Api.class);
  final WindowsApi client=ec2Client.getWindowsApi().get();
  final String region=node.getLocation().getParent().getId();
  Predicate<String> passwordReady=new Predicate<String>(){
    @Override public boolean apply(    String s){
      if (Strings.isNullOrEmpty(s))       return false;
      PasswordData data=client.getPasswordDataInRegion(region,s);
      if (data == null)       return false;
      return !Strings.isNullOrEmpty(data.getPasswordData());
    }
  }
;
  LOG.info(""String_Node_Str"" + node.getProviderId() + ""String_Node_Str""+ node.getId());
  Predicate passwordReadyRetryable=Predicates2.retry(passwordReady,timeUnit.toMillis(timeout),10 * 1000,TimeUnit.MILLISECONDS);
  boolean ready=passwordReadyRetryable.apply(node.getProviderId());
  if (!ready)   throw new TimeoutException(""String_Node_Str"" + node + ""String_Node_Str""+ region+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ timeUnit.name());
  PasswordDataAndPrivateKey dataAndKey=new PasswordDataAndPrivateKey(client.getPasswordDataInRegion(region,node.getProviderId()),node.getCredentials().getPrivateKey());
  WindowsLoginCredentialsFromEncryptedData f=computeServiceContext.utils().injector().getInstance(WindowsLoginCredentialsFromEncryptedData.class);
  LoginCredentials credentials=f.apply(dataAndKey);
  return credentials.getPassword();
}","public static String waitForPasswordOnAws(ComputeService computeService,final NodeMetadata node,long timeout,TimeUnit timeUnit) throws TimeoutException {
  ComputeServiceContext computeServiceContext=computeService.getContext();
  AWSEC2Api ec2Client=computeServiceContext.unwrapApi(AWSEC2Api.class);
  final WindowsApi client=ec2Client.getWindowsApi().get();
  final String region=node.getLocation().getParent().getId();
  Predicate<String> passwordReady=new Predicate<String>(){
    @Override public boolean apply(    String s){
      if (Strings.isNullOrEmpty(s))       return false;
      PasswordData data=client.getPasswordDataInRegion(region,s);
      if (data == null)       return false;
      return !Strings.isNullOrEmpty(data.getPasswordData());
    }
  }
;
  LOG.info(""String_Node_Str"" + node.getProviderId() + ""String_Node_Str""+ node.getId());
  Predicate<String> passwordReadyRetryable=Predicates2.retry(passwordReady,timeUnit.toMillis(timeout),10 * 1000,TimeUnit.MILLISECONDS);
  boolean ready=passwordReadyRetryable.apply(node.getProviderId());
  if (!ready)   throw new TimeoutException(""String_Node_Str"" + node + ""String_Node_Str""+ region+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ timeUnit.name());
  PasswordDataAndPrivateKey dataAndKey=new PasswordDataAndPrivateKey(client.getPasswordDataInRegion(region,node.getProviderId()),node.getCredentials().getPrivateKey());
  WindowsLoginCredentialsFromEncryptedData f=computeServiceContext.utils().injector().getInstance(WindowsLoginCredentialsFromEncryptedData.class);
  LoginCredentials credentials=f.apply(dataAndKey);
  return credentials.getPassword();
}",0.9975384615384616
79494,"public static ComputeService findComputeService(ConfigBag conf,boolean allowReuse){
  String provider=checkNotNull(conf.get(CLOUD_PROVIDER),""String_Node_Str"");
  String identity=checkNotNull(conf.get(ACCESS_IDENTITY),""String_Node_Str"");
  String credential=checkNotNull(conf.get(ACCESS_CREDENTIAL),""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(Constants.PROPERTY_TRUST_ALL_CERTS,Boolean.toString(true));
  properties.setProperty(Constants.PROPERTY_RELAX_HOSTNAME,Boolean.toString(true));
  properties.setProperty(""String_Node_Str"",conf.getStringKey(""String_Node_Str"") != null ? conf.getStringKey(""String_Node_Str"").toString() : ""String_Node_Str"");
  if (""String_Node_Str"".equals(provider)) {
    if (truth(conf.get(IMAGE_ID))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
      properties.setProperty(PROPERTY_EC2_CC_AMI_QUERY,""String_Node_Str"");
    }
 else     if (truth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"" + conf.getStringKey(""String_Node_Str"") + ""String_Node_Str"");
    }
 else     if (truth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
    }
  }
  Map<String,Object> extra=Maps.filterKeys(conf.getAllConfig(),Predicates.containsPattern(""String_Node_Str""));
  if (extra.size() > 0) {
    LOG.warn(""String_Node_Str"" + Entities.sanitize(extra));
  }
  properties.putAll(extra);
  String endpoint=conf.get(CLOUD_ENDPOINT);
  if (!truth(endpoint))   endpoint=getDeprecatedProperty(conf,Constants.PROPERTY_ENDPOINT);
  if (truth(endpoint))   properties.setProperty(Constants.PROPERTY_ENDPOINT,endpoint);
  Map<?,?> cacheKey=MutableMap.builder().putAll(properties).put(""String_Node_Str"",provider).put(""String_Node_Str"",identity).put(""String_Node_Str"",credential).putIfNotNull(""String_Node_Str"",endpoint).build().toImmutable();
  if (allowReuse) {
    ComputeService result=cachedComputeServices.get(cacheKey);
    if (result != null) {
      LOG.debug(""String_Node_Str"" + Entities.sanitize(properties));
      return result;
    }
    LOG.debug(""String_Node_Str"" + Entities.sanitize(properties));
  }
  Iterable<Module> modules=ImmutableSet.<Module>of(new SshjSshClientModule(),new SLF4JLoggingModule(),new BouncyCastleCryptoModule(),new BrooklynStandardJcloudsGuiceModule());
  ComputeServiceContext computeServiceContext;
synchronized (createComputeServicesMutex) {
    computeServiceContext=ContextBuilder.newBuilder(provider).modules(modules).credentials(identity,credential).overrides(properties).build(ComputeServiceContext.class);
  }
  final ComputeService computeService=computeServiceContext.getComputeService();
  if (allowReuse) {
synchronized (cachedComputeServices) {
      ComputeService result=cachedComputeServices.get(cacheKey);
      if (result != null) {
        LOG.debug(""String_Node_Str"" + Entities.sanitize(cacheKey));
        computeService.getContext().close();
        return result;
      }
      LOG.debug(""String_Node_Str"" + computeService + ""String_Node_Str""+ Entities.sanitize(properties));
      cachedComputeServices.put(cacheKey,computeService);
    }
  }
  return computeService;
}","public static ComputeService findComputeService(ConfigBag conf,boolean allowReuse){
  String provider=checkNotNull(conf.get(CLOUD_PROVIDER),""String_Node_Str"");
  String identity=checkNotNull(conf.get(ACCESS_IDENTITY),""String_Node_Str"");
  String credential=checkNotNull(conf.get(ACCESS_CREDENTIAL),""String_Node_Str"");
  Properties properties=new Properties();
  properties.setProperty(Constants.PROPERTY_TRUST_ALL_CERTS,Boolean.toString(true));
  properties.setProperty(Constants.PROPERTY_RELAX_HOSTNAME,Boolean.toString(true));
  properties.setProperty(""String_Node_Str"",conf.getStringKey(""String_Node_Str"") != null ? conf.getStringKey(""String_Node_Str"").toString() : ""String_Node_Str"");
  if (""String_Node_Str"".equals(provider)) {
    if (truth(conf.get(IMAGE_ID))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
      properties.setProperty(PROPERTY_EC2_CC_AMI_QUERY,""String_Node_Str"");
    }
 else     if (truth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"" + conf.getStringKey(""String_Node_Str"") + ""String_Node_Str"");
    }
 else     if (truth(conf.getStringKey(""String_Node_Str""))) {
      properties.setProperty(PROPERTY_EC2_AMI_QUERY,""String_Node_Str"");
    }
  }
  Map<String,Object> extra=Maps.filterKeys(conf.getAllConfig(),Predicates.containsPattern(""String_Node_Str""));
  if (extra.size() > 0) {
    LOG.warn(""String_Node_Str"" + Entities.sanitize(extra));
  }
  properties.putAll(extra);
  String endpoint=conf.get(CLOUD_ENDPOINT);
  if (!truth(endpoint))   endpoint=getDeprecatedProperty(conf,Constants.PROPERTY_ENDPOINT);
  if (truth(endpoint))   properties.setProperty(Constants.PROPERTY_ENDPOINT,endpoint);
  Map<?,?> cacheKey=MutableMap.builder().putAll(properties).put(""String_Node_Str"",provider).put(""String_Node_Str"",identity).put(""String_Node_Str"",credential).putIfNotNull(""String_Node_Str"",endpoint).build().toImmutable();
  if (allowReuse) {
    ComputeService result=cachedComputeServices.get(cacheKey);
    if (result != null) {
      LOG.debug(""String_Node_Str"" + Entities.sanitize(properties));
      return result;
    }
    LOG.debug(""String_Node_Str"" + Entities.sanitize(properties));
  }
  Iterable<Module> modules=getCommonModules();
  ComputeServiceContext computeServiceContext;
synchronized (createComputeServicesMutex) {
    computeServiceContext=ContextBuilder.newBuilder(provider).modules(modules).credentials(identity,credential).overrides(properties).build(ComputeServiceContext.class);
  }
  final ComputeService computeService=computeServiceContext.getComputeService();
  if (allowReuse) {
synchronized (cachedComputeServices) {
      ComputeService result=cachedComputeServices.get(cacheKey);
      if (result != null) {
        LOG.debug(""String_Node_Str"" + Entities.sanitize(cacheKey));
        computeService.getContext().close();
        return result;
      }
      LOG.debug(""String_Node_Str"" + computeService + ""String_Node_Str""+ Entities.sanitize(properties));
      cachedComputeServices.put(cacheKey,computeService);
    }
  }
  return computeService;
}",0.9767662399241348
79495,"@Override public Map<String,String> getShellEnvironment(){
  return MutableMap.<String,String>builder().putAll(super.getShellEnvironment()).put(""String_Node_Str"",Os.mergePathsUnix(getRunDir(),""String_Node_Str"")).renameKey(""String_Node_Str"",""String_Node_Str"").build();
}","@Override public Map<String,String> getShellEnvironment(){
  return MutableMap.<String,String>builder().putAll(super.getShellEnvironment()).put(""String_Node_Str"",getRunDir()).put(""String_Node_Str"",Os.mergePathsUnix(getRunDir(),""String_Node_Str"")).renameKey(""String_Node_Str"",""String_Node_Str"").build();
}",0.9389179755671904
79496,"@Override public void launch(){
  Map ports=MutableMap.of(""String_Node_Str"",getHttpPort(),""String_Node_Str"",getJmxPort(),""String_Node_Str"",getRmiRegistryPort());
  Networking.checkPortsValid(ports);
  newScript(MutableMap.of(USE_PID_FILE,false),LAUNCHING).body.append(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + getLogFileLocation() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"").execute();
  log.debug(""String_Node_Str"");
}","@Override public void launch(){
  Map ports=MutableMap.of(""String_Node_Str"",getHttpPort(),""String_Node_Str"",getJmxPort(),""String_Node_Str"",getRmiRegistryPort());
  Networking.checkPortsValid(ports);
  newScript(MutableMap.of(USE_PID_FILE,false),LAUNCHING).body.append(""String_Node_Str"" + (Strings.isEmpty(getConfigXmlTemplateUrl()) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + getLogFileLocation() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",""String_Node_Str"").execute();
  log.debug(""String_Node_Str"");
}",0.9181561618062088
79497,"@Override public void customize(){
  newScript(CUSTOMIZING).body.append(""String_Node_Str"",format(""String_Node_Str"",getExpandedInstallDir()),format(""String_Node_Str"",getExpandedInstallDir())).execute();
  String destinationBrooklynConfig=Os.mergePathsUnix(getRunDir(),""String_Node_Str"");
  copyTemplate(""String_Node_Str"",destinationBrooklynConfig);
  String customConfigTemplateUrl=getConfigXmlTemplateUrl();
  if (customConfigTemplateUrl != null) {
    String destinationConfigFile=Os.mergePathsUnix(getRunDir(),""String_Node_Str"");
    copyTemplate(customConfigTemplateUrl,destinationConfigFile);
  }
  getEntity().deployInitialWars();
}","@Override public void customize(){
  newScript(CUSTOMIZING).body.append(""String_Node_Str"",format(""String_Node_Str"",getExpandedInstallDir()),format(""String_Node_Str"",getExpandedInstallDir())).execute();
  String destinationBrooklynConfig=Os.mergePathsUnix(getRunDir(),""String_Node_Str"");
  copyTemplate(""String_Node_Str"",destinationBrooklynConfig);
  String customConfigTemplateUrl=getConfigXmlTemplateUrl();
  if (Strings.isNonEmpty(customConfigTemplateUrl)) {
    String destinationConfigFile=Os.mergePathsUnix(getRunDir(),""String_Node_Str"");
    copyTemplate(customConfigTemplateUrl,destinationConfigFile);
  }
  getEntity().deployInitialWars();
}",0.9782270606531882
79498,"@Override public void start(Collection<? extends Location> locsO){
  if (locsO != null) {
    checkArgument(locsO.size() <= 1,""String_Node_Str"",this,locsO);
    addLocations(locsO);
  }
  Location loc=getLocation();
  EntitySpec<?> spec=getConfig(MEMBER_SPEC);
  if (spec != null) {
    setDefaultDisplayName(""String_Node_Str"" + JavaClassNames.simpleClassName(spec.getType()) + ""String_Node_Str""+ loc+ ""String_Node_Str"");
  }
  if (isAvailabilityZoneEnabled()) {
    setAttribute(SUB_LOCATIONS,findSubLocations(loc));
  }
  setAttribute(SERVICE_STATE,Lifecycle.STARTING);
  try {
    if (isQuarantineEnabled()) {
      Group quarantineGroup=addChild(EntitySpec.create(BasicGroup.class).displayName(""String_Node_Str""));
      Entities.manage(quarantineGroup);
      setAttribute(QUARANTINE_GROUP,quarantineGroup);
    }
    int initialSize=getConfig(INITIAL_SIZE).intValue();
    int initialQuorumSize=getInitialQuorumSize();
    resize(initialSize);
    Maybe<Task<?>> firstFailed=Maybe.next(Tasks.failed(Tasks.children(Tasks.current())).iterator());
    int currentSize=getCurrentSize().intValue();
    if (currentSize < initialQuorumSize) {
      String message;
      if (currentSize == 0 && firstFailed.isPresent()) {
        message=""String_Node_Str"" + this + ""String_Node_Str"";
      }
 else {
        message=""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ getCurrentSize()+ (initialQuorumSize != initialSize ? ""String_Node_Str"" + initialQuorumSize + ""String_Node_Str"" : ""String_Node_Str"");
      }
      Throwable firstError=Tasks.getError(firstFailed.orNull());
      if (firstError != null)       message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      throw new IllegalStateException(message,firstError);
    }
 else     if (currentSize < initialSize) {
      LOG.warn(""String_Node_Str"",new Object[]{this,currentSize,initialQuorumSize,initialSize});
    }
    for (    Policy it : getPolicies()) {
      it.resume();
    }
    setAttribute(SERVICE_UP,calculateServiceUp());
    setAttribute(SERVICE_STATE,Lifecycle.RUNNING);
  }
 catch (  Exception e) {
    setAttribute(SERVICE_STATE,Lifecycle.ON_FIRE);
    throw Exceptions.propagate(e);
  }
}","@Override public void start(Collection<? extends Location> locsO){
  if (locsO != null) {
    checkArgument(locsO.size() <= 1,""String_Node_Str"",this,locsO);
    addLocations(locsO);
  }
  Location loc=getLocation();
  EntitySpec<?> spec=getConfig(MEMBER_SPEC);
  if (spec != null) {
    setDefaultDisplayName(""String_Node_Str"" + JavaClassNames.simpleClassName(spec.getType()) + ""String_Node_Str""+ loc+ ""String_Node_Str"");
  }
  if (isAvailabilityZoneEnabled()) {
    setAttribute(SUB_LOCATIONS,findSubLocations(loc));
  }
  setAttribute(SERVICE_STATE,Lifecycle.STARTING);
  setAttribute(SERVICE_UP,calculateServiceUp());
  try {
    if (isQuarantineEnabled()) {
      Group quarantineGroup=addChild(EntitySpec.create(BasicGroup.class).displayName(""String_Node_Str""));
      Entities.manage(quarantineGroup);
      setAttribute(QUARANTINE_GROUP,quarantineGroup);
    }
    int initialSize=getConfig(INITIAL_SIZE).intValue();
    int initialQuorumSize=getInitialQuorumSize();
    resize(initialSize);
    Maybe<Task<?>> firstFailed=Maybe.next(Tasks.failed(Tasks.children(Tasks.current())).iterator());
    int currentSize=getCurrentSize().intValue();
    if (currentSize < initialQuorumSize) {
      String message;
      if (currentSize == 0 && firstFailed.isPresent()) {
        message=""String_Node_Str"" + this + ""String_Node_Str"";
      }
 else {
        message=""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ getCurrentSize()+ (initialQuorumSize != initialSize ? ""String_Node_Str"" + initialQuorumSize + ""String_Node_Str"" : ""String_Node_Str"");
      }
      Throwable firstError=Tasks.getError(firstFailed.orNull());
      if (firstError != null)       message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      throw new IllegalStateException(message,firstError);
    }
 else     if (currentSize < initialSize) {
      LOG.warn(""String_Node_Str"",new Object[]{this,currentSize,initialQuorumSize,initialSize});
    }
    for (    Policy it : getPolicies()) {
      it.resume();
    }
    setAttribute(SERVICE_STATE,Lifecycle.RUNNING);
    setAttribute(SERVICE_UP,calculateServiceUp());
  }
 catch (  Exception e) {
    setAttribute(SERVICE_STATE,Lifecycle.ON_FIRE);
    throw Exceptions.propagate(e);
  }
}",0.9696833595328992
79499,"@Test public void testAggregatingExcludingBlankString(){
  group.addMember(entity);
  group.addMember(entity2);
  group.addEnricher(Enrichers.builder().aggregating(STR1).publishing(SET1).fromMembers().excludingBlank().computing(new Function<Collection<?>,Set<Object>>(){
    @Override public Set<Object> apply(    Collection<?> input){
      return (input == null) ? ImmutableSet.<Object>of() : MutableSet.<Object>copyOf(input);
    }
  }
).build());
  entity.setAttribute(STR1,""String_Node_Str"");
  entity2.setAttribute(STR1,""String_Node_Str"");
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(""String_Node_Str"",""String_Node_Str""));
  entity.setAttribute(STR1,""String_Node_Str"");
  entity2.setAttribute(STR1,null);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(""String_Node_Str""));
  entity.setAttribute(STR1,""String_Node_Str"");
  entity2.setAttribute(STR1,""String_Node_Str"");
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(""String_Node_Str""));
}","@Test public void testAggregatingExcludingBlankString(){
  group.addMember(entity);
  group.addMember(entity2);
  group.addEnricher(Enrichers.builder().aggregating(STR1).publishing(SET1).fromMembers().excludingBlank().computing((Function)new Function<Collection<?>,Set<Object>>(){
    @Override public Set<Object> apply(    Collection<?> input){
      return (input == null) ? ImmutableSet.<Object>of() : MutableSet.<Object>copyOf(input);
    }
  }
).build());
  entity.setAttribute(STR1,""String_Node_Str"");
  entity2.setAttribute(STR1,""String_Node_Str"");
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(""String_Node_Str"",""String_Node_Str""));
  entity.setAttribute(STR1,""String_Node_Str"");
  entity2.setAttribute(STR1,null);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(""String_Node_Str""));
  entity.setAttribute(STR1,""String_Node_Str"");
  entity2.setAttribute(STR1,""String_Node_Str"");
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(""String_Node_Str""));
}",0.9953051643192488
79500,"@Test public void testAggregatingExcludingNull(){
  group.addMember(entity);
  group.addEnricher(Enrichers.builder().aggregating(NUM1).publishing(SET1).fromMembers().excludingBlank().computing(new Function<Collection<?>,Set<Object>>(){
    @Override public Set<Object> apply(    Collection<?> input){
      return (input == null) ? ImmutableSet.<Object>of() : MutableSet.<Object>copyOf(input);
    }
  }
).build());
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of());
  entity.setAttribute(NUM1,1);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(1));
  entity.setAttribute(NUM1,null);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of());
  entity.setAttribute(NUM1,2);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(2));
}","@Test public void testAggregatingExcludingNull(){
  group.addMember(entity);
  group.addEnricher(Enrichers.builder().aggregating(NUM1).publishing(SET1).fromMembers().excludingBlank().computing((Function)new Function<Collection<?>,Set<Object>>(){
    @Override public Set<Object> apply(    Collection<?> input){
      return (input == null) ? ImmutableSet.<Object>of() : MutableSet.<Object>copyOf(input);
    }
  }
).build());
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of());
  entity.setAttribute(NUM1,1);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(1));
  entity.setAttribute(NUM1,null);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of());
  entity.setAttribute(NUM1,2);
  EntityTestUtils.assertAttributeEqualsEventually(group,SET1,ImmutableSet.<Object>of(2));
}",0.9942922374429224
79501,"@Override public void start(Collection<? extends Location> locations){
  super.start(locations);
  policy=new AbstractMembershipTrackingPolicy(MutableMap.of(""String_Node_Str"",getName() + ""String_Node_Str"")){
    @Override protected void onEntityChange(    Entity member){
    }
    @Override protected void onEntityAdded(    Entity member){
      serverAdded((MongoDBServer)member);
    }
    @Override protected void onEntityRemoved(    Entity member){
      serverRemoved((MongoDBServer)member);
    }
  }
;
  addPolicy(policy);
  policy.setGroup(this);
  for (  AttributeSensor<Long> sensor : SENSORS_TO_SUM)   addEnricher(Enrichers.builder().aggregating(sensor).publishing(sensor).fromMembers().computingSum().valueToReportIfNoSensors(null).defaultValueForUnreportedSensors(null).build());
  addEnricher(Enrichers.builder().aggregating(MongoDBServer.REPLICA_SET_PRIMARY_ENDPOINT).publishing(MongoDBServer.REPLICA_SET_PRIMARY_ENDPOINT).fromMembers().valueToReportIfNoSensors(null).computing(new Function<Collection<String>,String>(){
    @Override public String apply(    Collection<String> input){
      if (input == null || input.isEmpty())       return null;
      Set<String> distinct=MutableSet.of();
      for (      String endpoint : input)       if (!Strings.isBlank(endpoint))       distinct.add(endpoint);
      if (distinct.size() > 1)       LOG.warn(""String_Node_Str"" + MongoDBReplicaSetImpl.this + ""String_Node_Str""+ distinct);
      return input.iterator().next();
    }
  }
).build());
  addEnricher(Enrichers.builder().aggregating(MongoDBServer.MONGO_SERVER_ENDPOINT).publishing(REPLICA_SET_ENDPOINTS).fromMembers().valueToReportIfNoSensors(null).computing(new Function<Collection<String>,List<String>>(){
    @Override public List<String> apply(    Collection<String> input){
      Set<String> endpoints=new TreeSet<String>();
      for (      String endpoint : input) {
        if (!Strings.isBlank(endpoint)) {
          endpoints.add(endpoint);
        }
      }
      return MutableList.copyOf(endpoints);
    }
  }
).build());
  subscribeToMembers(this,MongoDBServer.IS_PRIMARY_FOR_REPLICA_SET,new SensorEventListener<Boolean>(){
    @Override public void onEvent(    SensorEvent<Boolean> event){
      if (Boolean.TRUE == event.getValue())       setAttribute(PRIMARY_ENTITY,(MongoDBServer)event.getSource());
    }
  }
);
}","@Override public void start(Collection<? extends Location> locations){
  super.start(locations);
  policy=new AbstractMembershipTrackingPolicy(MutableMap.of(""String_Node_Str"",getName() + ""String_Node_Str"")){
    @Override protected void onEntityChange(    Entity member){
    }
    @Override protected void onEntityAdded(    Entity member){
      serverAdded((MongoDBServer)member);
    }
    @Override protected void onEntityRemoved(    Entity member){
      serverRemoved((MongoDBServer)member);
    }
  }
;
  addPolicy(policy);
  policy.setGroup(this);
  for (  AttributeSensor<Long> sensor : SENSORS_TO_SUM)   addEnricher(Enrichers.builder().aggregating(sensor).publishing(sensor).fromMembers().computingSum().valueToReportIfNoSensors(null).defaultValueForUnreportedSensors(null).build());
  addEnricher(Enrichers.builder().aggregating(MongoDBServer.REPLICA_SET_PRIMARY_ENDPOINT).publishing(MongoDBServer.REPLICA_SET_PRIMARY_ENDPOINT).fromMembers().valueToReportIfNoSensors(null).computing((Function)new Function<Collection<String>,String>(){
    @Override public String apply(    Collection<String> input){
      if (input == null || input.isEmpty())       return null;
      Set<String> distinct=MutableSet.of();
      for (      String endpoint : input)       if (!Strings.isBlank(endpoint))       distinct.add(endpoint);
      if (distinct.size() > 1)       LOG.warn(""String_Node_Str"" + MongoDBReplicaSetImpl.this + ""String_Node_Str""+ distinct);
      return input.iterator().next();
    }
  }
).build());
  addEnricher(Enrichers.builder().aggregating(MongoDBServer.MONGO_SERVER_ENDPOINT).publishing(REPLICA_SET_ENDPOINTS).fromMembers().valueToReportIfNoSensors(null).computing((Function)new Function<Collection<String>,List<String>>(){
    @Override public List<String> apply(    Collection<String> input){
      Set<String> endpoints=new TreeSet<String>();
      for (      String endpoint : input) {
        if (!Strings.isBlank(endpoint)) {
          endpoints.add(endpoint);
        }
      }
      return MutableList.copyOf(endpoints);
    }
  }
).build());
  subscribeToMembers(this,MongoDBServer.IS_PRIMARY_FOR_REPLICA_SET,new SensorEventListener<Boolean>(){
    @Override public void onEvent(    SensorEvent<Boolean> event){
      if (Boolean.TRUE == event.getValue())       setAttribute(PRIMARY_ENTITY,(MongoDBServer)event.getSource());
    }
  }
);
}",0.9957609156422212
79502,"@Test(groups=""String_Node_Str"",dependsOnMethods={""String_Node_Str"",""String_Node_Str""}) public void testTriggerRedisStopEffector() throws Exception {
  String entityId=getManagementContext().getApplications().iterator().next().getChildren().iterator().next().getId();
  Response response=api.getEffectorApi().invoke(""String_Node_Str"",entityId,""String_Node_Str"",""String_Node_Str"",ImmutableMap.<String,String>of());
  assertEquals(response.getStatus(),Response.Status.ACCEPTED.getStatusCode());
  while (!api.getSensorApi().get(""String_Node_Str"",entityId,""String_Node_Str"").equals(Lifecycle.STOPPED.toString())) {
    Thread.sleep(5000);
  }
}","@Test(groups=""String_Node_Str"",dependsOnMethods={""String_Node_Str"",""String_Node_Str""}) public void testTriggerRedisStopEffector() throws Exception {
  String entityId=getManagementContext().getApplications().iterator().next().getChildren().iterator().next().getId();
  Response response=api.getEffectorApi().invoke(""String_Node_Str"",entityId,""String_Node_Str"",""String_Node_Str"",ImmutableMap.<String,String>of());
  assertEquals(response.getStatus(),Response.Status.ACCEPTED.getStatusCode());
  while (!api.getSensorApi().get(""String_Node_Str"",entityId,""String_Node_Str"",false).equals(Lifecycle.STOPPED.toString())) {
    Thread.sleep(5000);
  }
}",0.995334370139969
79503,"@Test(groups=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testDeployLegacyRedisApplication() throws Exception {
  @SuppressWarnings(""String_Node_Str"") Response response=api.getApplicationApi().create(legacyRedisSpec);
  assertEquals(response.getStatus(),201);
  assertEquals(getManagementContext().getApplications().size(),2);
  while (!api.getSensorApi().get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").equals(Lifecycle.RUNNING.toString())) {
    Thread.sleep(100);
  }
  Response deleteResponse=api.getApplicationApi().delete(""String_Node_Str"");
  assertEquals(deleteResponse.getStatus(),202);
  assertEquals(getManagementContext().getApplications().size(),1);
}","@Test(groups=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testDeployLegacyRedisApplication() throws Exception {
  @SuppressWarnings(""String_Node_Str"") Response response=api.getApplicationApi().create(legacyRedisSpec);
  assertEquals(response.getStatus(),201);
  assertEquals(getManagementContext().getApplications().size(),2);
  while (!api.getSensorApi().get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false).equals(Lifecycle.RUNNING.toString())) {
    Thread.sleep(100);
  }
  Response deleteResponse=api.getApplicationApi().delete(""String_Node_Str"");
  assertEquals(deleteResponse.getStatus(),202);
  assertEquals(getManagementContext().getApplications().size(),1);
}",0.9957081545064378
79504,"@Test(groups=""String_Node_Str"") public void testDeployRedisApplication() throws Exception {
  Response response=api.getApplicationApi().createPoly(redisSpec.getBytes());
  assertEquals(response.getStatus(),201);
  assertEquals(getManagementContext().getApplications().size(),1);
  String entityId=getManagementContext().getApplications().iterator().next().getChildren().iterator().next().getId();
  while (!api.getSensorApi().get(""String_Node_Str"",entityId,""String_Node_Str"").equals(Lifecycle.RUNNING.toString())) {
    Thread.sleep(100);
  }
}","@Test(groups=""String_Node_Str"") public void testDeployRedisApplication() throws Exception {
  Response response=api.getApplicationApi().createPoly(redisSpec.getBytes());
  assertEquals(response.getStatus(),201);
  assertEquals(getManagementContext().getApplications().size(),1);
  String entityId=getManagementContext().getApplications().iterator().next().getChildren().iterator().next().getId();
  while (!api.getSensorApi().get(""String_Node_Str"",entityId,""String_Node_Str"",false).equals(Lifecycle.RUNNING.toString())) {
    Thread.sleep(100);
  }
}",0.9945155393053016
79505,"protected CloudMachineNamer getCloudMachineNamer(ConfigBag config){
  String namerClass=config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS);
  if (Strings.isNonBlank(namerClass)) {
    Optional<CloudMachineNamer> cloudNamer=Reflections.invokeConstructorWithArgs(getManagementContext().getCatalog().getRootClassLoader(),namerClass,config);
    if (cloudNamer.isPresent()) {
      return cloudNamer.get();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + namerClass);
    }
  }
 else {
    return new JcloudsMachineNamer(config);
  }
}","protected CloudMachineNamer getCloudMachineNamer(ConfigBag config){
  String namerClass=config.get(LocationConfigKeys.CLOUD_MACHINE_NAMER_CLASS);
  if (Strings.isNonBlank(namerClass)) {
    Optional<CloudMachineNamer> cloudNamer=Reflections.invokeConstructorWithArgs(getManagementContext().getCatalog().getRootClassLoader(),namerClass,config);
    if (cloudNamer.isPresent()) {
      return cloudNamer.get();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + namerClass + ""String_Node_Str""+ this);
    }
  }
 else {
    return new JcloudsMachineNamer(config);
  }
}",0.9773519163763066
79506,"@Override public void joinCluster(@EffectorParam(name=""String_Node_Str"") RiakNode node){
  getDriver().joinCluster(node);
}","@Override public void joinCluster(RiakNode node){
  getDriver().joinCluster(node);
}",0.8115942028985508
79507,"@Override public void joinCluster(RiakNode node){
  if (!isInCluster()) {
    String riakName=node.getAttribute(RiakNode.RIAK_NODE_NAME);
    newScript(""String_Node_Str"").body.append(format(""String_Node_Str"",getRiakAdminCmd(),riakName)).body.append(format(""String_Node_Str"",getRiakAdminCmd())).body.append(format(""String_Node_Str"",getRiakAdminCmd())).failOnNonZeroResultCode().execute();
    entity.setAttribute(RiakNode.RIAK_NODE_IN_CLUSTER,Boolean.TRUE);
  }
 else {
    log.warn(""String_Node_Str"",entity.getId());
  }
}","@Override public void joinCluster(RiakNode node){
  if (!isInCluster()) {
    String riakName=node.getAttribute(RiakNode.RIAK_NODE_NAME);
    ScriptHelper joinClusterScript=newScript(""String_Node_Str"").body.append(format(""String_Node_Str"",getRiakAdminCmd(),riakName)).body.append(format(""String_Node_Str"",getRiakAdminCmd())).body.append(format(""String_Node_Str"",getRiakAdminCmd())).failOnNonZeroResultCode();
    if (!isRiakOnPath) {
      Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
      log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
      joinClusterScript.environmentVariablesReset(newPathVariable);
    }
    joinClusterScript.execute();
    entity.setAttribute(RiakNode.RIAK_NODE_IN_CLUSTER,Boolean.TRUE);
  }
 else {
    log.warn(""String_Node_Str"",entity.getId());
  }
}",0.7699115044247787
79508,"private Boolean isInCluster(){
  Optional<Boolean> inCluster=Optional.of(entity.getAttribute(RiakNode.RIAK_NODE_IN_CLUSTER));
  if (inCluster.isPresent())   return inCluster.get();
 else   return Boolean.FALSE;
}","private Boolean isInCluster(){
  return Optional.fromNullable(entity.getAttribute(RiakNode.RIAK_NODE_IN_CLUSTER)).or(Boolean.FALSE);
}",0.6647398843930635
79509,"@Override public void launch(){
  newScript(LAUNCHING).failOnNonZeroResultCode().body.append(format(""String_Node_Str"",getRiakCmd())).execute();
}","@Override public void launch(){
  String command=format(""String_Node_Str"",getRiakCmd());
  command=isPackageInstall ? ""String_Node_Str"" + command : command;
  ScriptHelper launchScript=newScript(LAUNCHING).failOnNonZeroResultCode().body.append(command);
  if (!isRiakOnPath) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    launchScript.environmentVariablesReset(newPathVariable);
  }
  launchScript.execute();
}",0.3258594917787742
79510,"@Override public void customize(){
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  String vmArgsTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));
  DynamicTasks.queueIfPossible(newScript(CUSTOMIZING).body.append(""String_Node_Str"").newTask());
  DynamicTasks.queueIfPossible(SshEffectorTasks.put(getRunDir() + ""String_Node_Str"").contents(Streams.newInputStreamWithContents(vmArgsTemplate)).machine(getMachine()).summary(""String_Node_Str""));
  commands.add(sudo(""String_Node_Str"" + getRunDir() + ""String_Node_Str""));
  commands.add(sudo(""String_Node_Str"" + getRunDir() + ""String_Node_Str""+ getEtcDir()));
  commands.add(sudo(format(""String_Node_Str"",getPrivateIp(),getAppConfigLocation())));
  if (osDetails.isMac())   commands.add(""String_Node_Str"");
  DynamicTasks.queueIfPossible(newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(commands).newTask());
  entity.setAttribute(RiakNode.RIAK_NODE_NAME,format(""String_Node_Str"",getHostname()));
}","@Override public void customize(){
  isRiakOnPath=isPackageInstall ? isRiakOnPath() : true;
  OsDetails osDetails=getMachine().getMachineDetails().getOsDetails();
  List<String> commands=Lists.newLinkedList();
  String vmArgsTemplate=processTemplate(entity.getConfig(RiakNode.RIAK_VM_ARGS_TEMPLATE_URL));
  DynamicTasks.queueIfPossible(newScript(CUSTOMIZING).body.append(""String_Node_Str"").newTask());
  DynamicTasks.queueIfPossible(SshEffectorTasks.put(getRunDir() + ""String_Node_Str"").contents(Streams.newInputStreamWithContents(vmArgsTemplate)).machine(getMachine()).summary(""String_Node_Str""));
  if (osDetails.isMac())   commands.add(""String_Node_Str"");
 else   if (osDetails.isLinux()) {
    commands.add(sudo(""String_Node_Str"" + getRunDir() + ""String_Node_Str""));
  }
  commands.add(sudo(""String_Node_Str"" + getRunDir() + ""String_Node_Str""+ getEtcDir()));
  commands.add(sudo(format(""String_Node_Str"",getPrivateIp(),getAppConfigLocation())));
  ScriptHelper customizeScript=newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(commands);
  if (!isRiakOnPath) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    customizeScript.environmentVariablesReset(newPathVariable);
  }
  customizeScript.execute();
  entity.setAttribute(RiakNode.RIAK_NODE_NAME,format(""String_Node_Str"",getHostname()));
}",0.7758899676375405
79511,"private String getPrivateIp(){
  Optional<String> subnetAddress=Optional.of(entity.getAttribute(Attributes.SUBNET_ADDRESS));
  if (subnetAddress.isPresent())   return subnetAddress.get();
 else   throw new IllegalArgumentException(""String_Node_Str"");
}","private String getPrivateIp(){
  Optional<String> subnetAddress=Optional.fromNullable(entity.getAttribute(Attributes.SUBNET_ADDRESS));
  if (subnetAddress.isPresent())   return subnetAddress.get();
 else   throw new IllegalArgumentException(""String_Node_Str"");
}",0.9766536964980544
79512,"@Override public void stop(){
  newScript(STOPPING).failOnNonZeroResultCode().body.append(sudo(format(""String_Node_Str"",getRiakCmd()))).execute();
}","@Override public void stop(){
  leaveCluster();
  String command=format(""String_Node_Str"",getRiakCmd());
  command=isPackageInstall ? ""String_Node_Str"" + command : command;
  ScriptHelper stopScript=newScript(STOPPING).failOnNonZeroResultCode().body.append(command);
  if (!isRiakOnPath) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    stopScript.environmentVariablesReset(newPathVariable);
  }
  stopScript.execute();
}",0.3671071953010279
79513,"@Override public boolean isRunning(){
  return newScript(CHECK_RUNNING).body.append(sudo(format(""String_Node_Str"",getRiakAdminCmd()))).execute() == 0;
}","@Override public boolean isRunning(){
  ScriptHelper checkRunningScript=newScript(CHECK_RUNNING).body.append(format(""String_Node_Str"",getRiakCmd()));
  if (!isRiakOnPath) {
    Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
    log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
    checkRunningScript.environmentVariablesReset(newPathVariable);
  }
  return (checkRunningScript.execute() == 0);
}",0.391304347826087
79514,"@Override public void leaveCluster(){
  if (isInCluster()) {
    newScript(""String_Node_Str"").body.append(format(""String_Node_Str"")).body.append(format(""String_Node_Str"",getRiakAdminCmd())).body.append(format(""String_Node_Str"",getRiakAdminCmd())).failOnNonZeroResultCode().execute();
    entity.setAttribute(RiakNode.RIAK_NODE_IN_CLUSTER,Boolean.FALSE);
  }
 else {
    log.warn(""String_Node_Str"",entity.getId());
  }
}","@Override public void leaveCluster(){
  if (isInCluster()) {
    ScriptHelper leaveClusterScript=newScript(""String_Node_Str"").body.append(format(""String_Node_Str"")).body.append(format(""String_Node_Str"",getRiakAdminCmd())).body.append(format(""String_Node_Str"",getRiakAdminCmd())).failOnNonZeroResultCode();
    if (!isRiakOnPath) {
      Map<String,String> newPathVariable=ImmutableMap.of(""String_Node_Str"",sbinPath);
      log.warn(""String_Node_Str"",getShellEnvironment(),newPathVariable);
      leaveClusterScript.environmentVariablesReset(newPathVariable);
    }
    leaveClusterScript.execute();
    entity.setAttribute(RiakNode.RIAK_NODE_IN_CLUSTER,Boolean.FALSE);
  }
 else {
    log.warn(""String_Node_Str"",entity.getId());
  }
}",0.7267996530789246
79515,"private List<String> installLinux(String expandedInstallDir){
  LOG.info(""String_Node_Str"",getEntity().getConfig(RiakNode.SUGGESTED_VERSION));
  isPackageInstall=true;
  String installBin=Urls.mergePaths(expandedInstallDir,""String_Node_Str"");
  String apt=chainGroup(""String_Node_Str"",""String_Node_Str"" + sudo(""String_Node_Str""),sudo(""String_Node_Str""),sudo(""String_Node_Str""),sudo(""String_Node_Str"" + getEntity().getConfig(RiakNode.SUGGESTED_VERSION) + ""String_Node_Str""));
  String yum=chainGroup(""String_Node_Str"",sudo(""String_Node_Str""),sudo(""String_Node_Str"" + getEntity().getConfig(RiakNode.SUGGESTED_VERSION) + ""String_Node_Str""));
  return ImmutableList.<String>builder().add(""String_Node_Str"" + installBin).add(INSTALL_CURL).add(alternatives(apt,yum)).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).build();
}","private List<String> installLinux(String expandedInstallDir){
  LOG.info(""String_Node_Str"",getEntity().getConfig(RiakNode.SUGGESTED_VERSION));
  isPackageInstall=true;
  String installBin=Urls.mergePaths(expandedInstallDir,""String_Node_Str"");
  String apt=chainGroup(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + sudo(""String_Node_Str""),sudo(""String_Node_Str""),sudo(""String_Node_Str""),sudo(""String_Node_Str"" + getEntity().getConfig(RiakNode.SUGGESTED_VERSION) + ""String_Node_Str""));
  String yum=chainGroup(""String_Node_Str"",sudo(""String_Node_Str""),sudo(""String_Node_Str"" + getEntity().getConfig(RiakNode.SUGGESTED_VERSION) + ""String_Node_Str""));
  return ImmutableList.<String>builder().add(""String_Node_Str"" + installBin).add(INSTALL_CURL).add(alternatives(apt,yum)).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).add(""String_Node_Str"" + Urls.mergePaths(installBin,""String_Node_Str"")).build();
}",0.990238611713666
79516,"private static String sudoNew(String command){
  if (command == null)   return null;
  return ""String_Node_Str"" + command + ""String_Node_Str""+ BashStringEscapes.wrapBash(command)+ ""String_Node_Str"";
}","private static String sudoNew(String command){
  if (command == null)   return null;
  return ""String_Node_Str"" + command + ""String_Node_Str""+ ""String_Node_Str""+ BashStringEscapes.wrapBash(command)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.87527352297593
79517,"@Override public void reloadBrooklynProperties(){
  log.info(""String_Node_Str"" + builder);
  BrooklynProperties properties=builder.build();
  configMap=properties;
  if (brooklynAdditionalProperties != null) {
    log.info(""String_Node_Str"" + brooklynAdditionalProperties);
    configMap.addFromMap(brooklynAdditionalProperties);
  }
  this.downloadsManager=BasicDownloadsManager.newDefault(configMap);
  this.locationRegistry=null;
  for (  PropertiesReloadListener listener : reloadListeners) {
    listener.reloaded();
  }
}","@Override public void reloadBrooklynProperties(){
  log.info(""String_Node_Str"" + builder);
  if (builder.hasDelegateOriginalProperties())   log.warn(""String_Node_Str"" + this + ""String_Node_Str"");
  BrooklynProperties properties=builder.build();
  configMap=properties;
  if (brooklynAdditionalProperties != null) {
    log.info(""String_Node_Str"" + brooklynAdditionalProperties);
    configMap.addFromMap(brooklynAdditionalProperties);
  }
  this.downloadsManager=BasicDownloadsManager.newDefault(configMap);
  this.locationRegistry=null;
  for (  PropertiesReloadListener listener : reloadListeners) {
    listener.reloaded();
  }
}",0.909404659188956
79518,"/** 
 * @see LocationPropertiesFromBrooklynProperties#getLocationProperties(String,String,Map)
 */
public Map<String,Object> getJcloudsProperties(String providerOrApi,String regionName,String namedLocation,Map<String,?> properties){
  if (Strings.isNullOrEmpty(namedLocation) && Strings.isNullOrEmpty(providerOrApi)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigBag jcloudsProperties=ConfigBag.newInstance();
  String provider=getProviderName(providerOrApi,namedLocation,properties);
  jcloudsProperties.put(LocationConfigKeys.CLOUD_PROVIDER,provider);
  jcloudsProperties.putAll(transformDeprecated(getGenericLocationSingleWordProperties(properties)));
  jcloudsProperties.putAll(transformDeprecated(getGenericJcloudsSingleWordProperties(providerOrApi,properties)));
  jcloudsProperties.putAll(transformDeprecated(getProviderOrApiJcloudsProperties(providerOrApi,properties)));
  jcloudsProperties.putAll(transformDeprecated(getRegionJcloudsProperties(providerOrApi,regionName,properties)));
  if (!Strings.isNullOrEmpty(namedLocation))   jcloudsProperties.putAll(transformDeprecated(getNamedJcloudsProperties(namedLocation,properties)));
  setLocalTempDir(properties,jcloudsProperties);
  return jcloudsProperties.getAllConfigRaw();
}","/** 
 * @see LocationPropertiesFromBrooklynProperties#getLocationProperties(String,String,Map)
 */
public Map<String,Object> getJcloudsProperties(String providerOrApi,String regionOrEndpoint,String namedLocation,Map<String,?> properties){
  if (Strings.isNullOrEmpty(namedLocation) && Strings.isNullOrEmpty(providerOrApi)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ConfigBag jcloudsProperties=ConfigBag.newInstance();
  String provider=getProviderName(providerOrApi,namedLocation,properties);
  jcloudsProperties.put(LocationConfigKeys.CLOUD_PROVIDER,provider);
  jcloudsProperties.putAll(transformDeprecated(getGenericLocationSingleWordProperties(properties)));
  jcloudsProperties.putAll(transformDeprecated(getGenericJcloudsSingleWordProperties(providerOrApi,properties)));
  jcloudsProperties.putAll(transformDeprecated(getProviderOrApiJcloudsProperties(providerOrApi,properties)));
  jcloudsProperties.putAll(transformDeprecated(getRegionJcloudsProperties(providerOrApi,regionOrEndpoint,properties)));
  if (!Strings.isNullOrEmpty(namedLocation))   jcloudsProperties.putAll(transformDeprecated(getNamedJcloudsProperties(namedLocation,properties)));
  setLocalTempDir(properties,jcloudsProperties);
  return jcloudsProperties.getAllConfigRaw();
}",0.8037825059101655
79519,"@SuppressWarnings(""String_Node_Str"") protected JcloudsLocation newLocationFromString(String spec,brooklyn.location.LocationRegistry registry,Map properties,Map locationFlags){
  JcloudsSpecParser details=JcloudsSpecParser.parse(spec,false);
  String namedLocation=(String)locationFlags.get(LocationInternal.NAMED_SPEC_NAME.getName());
  boolean isProvider=details.isProvider();
  String providerOrApi=details.providerOrApi;
  String regionName=details.parameter;
  if (Strings.isEmpty(providerOrApi)) {
    throw new IllegalArgumentException(""String_Node_Str"" + spec + ""String_Node_Str"");
  }
  if (!isProvider && !details.isApi()) {
    throw new NoSuchElementException(""String_Node_Str"" + providerOrApi + ""String_Node_Str"");
  }
  Map allProperties=getAllProperties(registry,properties);
  if (regionName == null)   regionName=(String)locationFlags.get(LocationConfigKeys.CLOUD_REGION_ID.getName());
  Map jcloudsProperties=new JcloudsPropertiesFromBrooklynProperties().getJcloudsProperties(providerOrApi,regionName,namedLocation,allProperties);
  jcloudsProperties.putAll(locationFlags);
  if (isProvider) {
    if (regionName != null)     jcloudsProperties.put(JcloudsLocationConfig.CLOUD_REGION_ID.getName(),regionName);
  }
 else {
    if (regionName != null)     jcloudsProperties.put(JcloudsLocationConfig.CLOUD_ENDPOINT.getName(),regionName);
  }
  return managementContext.getLocationManager().createLocation(LocationSpec.create(JcloudsLocation.class).configure(LocationConfigUtils.finalAndOriginalSpecs(spec,jcloudsProperties,properties,namedLocation)).configure(jcloudsProperties));
}","@SuppressWarnings(""String_Node_Str"") protected JcloudsLocation newLocationFromString(String spec,brooklyn.location.LocationRegistry registry,Map properties,Map locationFlags){
  JcloudsSpecParser details=JcloudsSpecParser.parse(spec,false);
  String namedLocation=(String)locationFlags.get(LocationInternal.NAMED_SPEC_NAME.getName());
  boolean isProvider=details.isProvider();
  String providerOrApi=details.providerOrApi;
  isProvider=isProvider || ""String_Node_Str"".equals(providerOrApi);
  if (Strings.isEmpty(providerOrApi)) {
    throw new IllegalArgumentException(""String_Node_Str"" + spec + ""String_Node_Str"");
  }
  if (!isProvider && !details.isApi()) {
    throw new NoSuchElementException(""String_Node_Str"" + providerOrApi + ""String_Node_Str"");
  }
  Map allProperties=getAllProperties(registry,properties);
  String regionOrEndpoint=details.parameter;
  if (regionOrEndpoint == null && isProvider)   regionOrEndpoint=(String)locationFlags.get(LocationConfigKeys.CLOUD_REGION_ID.getName());
  Map jcloudsProperties=new JcloudsPropertiesFromBrooklynProperties().getJcloudsProperties(providerOrApi,regionOrEndpoint,namedLocation,allProperties);
  jcloudsProperties.putAll(locationFlags);
  if (isProvider) {
    if (regionOrEndpoint != null)     jcloudsProperties.put(JcloudsLocationConfig.CLOUD_REGION_ID.getName(),regionOrEndpoint);
  }
 else {
    if (regionOrEndpoint != null)     jcloudsProperties.put(JcloudsLocationConfig.CLOUD_ENDPOINT.getName(),regionOrEndpoint);
  }
  return managementContext.getLocationManager().createLocation(LocationSpec.create(JcloudsLocation.class).configure(LocationConfigUtils.finalAndOriginalSpecs(spec,jcloudsProperties,properties,namedLocation)).configure(jcloudsProperties));
}",0.9108970499698976
79520,"private Map getAllProperties(brooklyn.location.LocationRegistry registry,Map<?,?> properties){
  Map<Object,Object> allProperties=Maps.newHashMap();
  if (registry != null)   allProperties.putAll(registry.getProperties());
  allProperties.putAll(properties);
  return allProperties;
}","@SuppressWarnings(""String_Node_Str"") private Map getAllProperties(brooklyn.location.LocationRegistry registry,Map<?,?> properties){
  Map<Object,Object> allProperties=Maps.newHashMap();
  if (registry != null)   allProperties.putAll(registry.getProperties());
  allProperties.putAll(properties);
  return allProperties;
}",0.9388429752066116
79521,"public String getInstallDir(){
  if (installDir != null)   return installDir;
  String existingVal=getEntity().getAttribute(SoftwareProcess.INSTALL_DIR);
  if (Strings.isNonBlank(existingVal)) {
    installDir=existingVal;
    return installDir;
  }
  setInstallLabel();
  Maybe<Object> minstallDir=getEntity().getConfigRaw(SoftwareProcess.INSTALL_DIR,true);
  if (!minstallDir.isPresent() || minstallDir.get() == null) {
    String installBasedir=((EntityInternal)entity).getManagementContext().getConfig().getFirst(""String_Node_Str"");
    if (installBasedir != null) {
      log.warn(""String_Node_Str"" + entity + ""String_Node_Str"");
      installDir=Os.mergePathsUnix(installBasedir,getEntityVersionLabel() + ""String_Node_Str"" + entity.getId());
      installDir=Os.tidyPath(installDir);
      getEntity().setAttribute(SoftwareProcess.INSTALL_DIR,installDir);
      return installDir;
    }
  }
  installDir=Os.tidyPath(ConfigToAttributes.apply(getEntity(),SoftwareProcess.INSTALL_DIR));
  entity.setAttribute(SoftwareProcess.INSTALL_DIR,installDir);
  return installDir;
}","public String getInstallDir(){
  if (installDir != null)   return installDir;
  String existingVal=getEntity().getAttribute(SoftwareProcess.INSTALL_DIR);
  if (Strings.isNonBlank(existingVal)) {
    installDir=existingVal;
    return installDir;
  }
  setInstallLabel();
  Maybe<Object> minstallDir=getEntity().getConfigRaw(SoftwareProcess.INSTALL_DIR,true);
  if (!minstallDir.isPresent() || minstallDir.get() == null) {
    String installBasedir=((EntityInternal)entity).getManagementContext().getConfig().getFirst(""String_Node_Str"");
    if (installBasedir != null) {
      log.warn(""String_Node_Str"" + entity + ""String_Node_Str"");
      installDir=Os.mergePathsUnix(installBasedir,getEntityVersionLabel() + ""String_Node_Str"" + entity.getId());
      installDir=Os.tidyPath(installDir);
      getEntity().setAttribute(SoftwareProcess.INSTALL_DIR,installDir);
      return installDir;
    }
  }
  setInstallDir(Os.tidyPath(ConfigToAttributes.apply(getEntity(),SoftwareProcess.INSTALL_DIR)));
  return installDir;
}",0.958393113342898
79522,"public String getRunDir(){
  if (runDir != null)   return runDir;
  String existingVal=getEntity().getAttribute(SoftwareProcess.RUN_DIR);
  if (Strings.isNonBlank(existingVal)) {
    runDir=existingVal;
    return runDir;
  }
  Maybe<Object> mRunDir=getEntity().getConfigRaw(SoftwareProcess.RUN_DIR,true);
  if (!mRunDir.isPresent() || mRunDir.get() == null) {
    String runBasedir=((EntityInternal)entity).getManagementContext().getConfig().getFirst(""String_Node_Str"");
    if (runBasedir != null) {
      log.warn(""String_Node_Str"" + entity + ""String_Node_Str"");
      runDir=Os.mergePathsUnix(runBasedir,entity.getApplication().getId() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ getEntityVersionLabel()+ ""String_Node_Str""+ entity.getId());
      runDir=Os.tidyPath(runDir);
      getEntity().setAttribute(SoftwareProcess.RUN_DIR,runDir);
      return runDir;
    }
  }
  runDir=Os.tidyPath(ConfigToAttributes.apply(getEntity(),SoftwareProcess.RUN_DIR));
  entity.setAttribute(SoftwareProcess.RUN_DIR,runDir);
  return runDir;
}","public String getRunDir(){
  if (runDir != null)   return runDir;
  String existingVal=getEntity().getAttribute(SoftwareProcess.RUN_DIR);
  if (Strings.isNonBlank(existingVal)) {
    runDir=existingVal;
    return runDir;
  }
  Maybe<Object> mRunDir=getEntity().getConfigRaw(SoftwareProcess.RUN_DIR,true);
  if (!mRunDir.isPresent() || mRunDir.get() == null) {
    String runBasedir=((EntityInternal)entity).getManagementContext().getConfig().getFirst(""String_Node_Str"");
    if (runBasedir != null) {
      log.warn(""String_Node_Str"" + entity + ""String_Node_Str"");
      runDir=Os.mergePathsUnix(runBasedir,entity.getApplication().getId() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ getEntityVersionLabel()+ ""String_Node_Str""+ entity.getId());
      runDir=Os.tidyPath(runDir);
      getEntity().setAttribute(SoftwareProcess.RUN_DIR,runDir);
      return runDir;
    }
  }
  setRunDir(Os.tidyPath(ConfigToAttributes.apply(getEntity(),SoftwareProcess.RUN_DIR)));
  return runDir;
}",0.965281173594132
79523,"@Override public void install(){
  String version=getEntity().getConfig(SoftwareProcess.SUGGESTED_VERSION);
  String majorMinorVersion=version.substring(0,version.lastIndexOf(""String_Node_Str""));
  String shortVersion=majorMinorVersion.replace(""String_Node_Str"",""String_Node_Str"");
  Iterable<String> pgctlLocations=ImmutableList.of(""String_Node_Str"" + majorMinorVersion + ""String_Node_Str"",""String_Node_Str"" + shortVersion + ""String_Node_Str"",""String_Node_Str"" + majorMinorVersion + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(),true)).orSubmitAndBlock();
  MutableList<String> findOrInstall=MutableList.<String>of().append(""String_Node_Str"").appendAll(Iterables.transform(pgctlLocations,StringFunctions.formatter(""String_Node_Str""))).append(installPackage(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"" + shortVersion + ""String_Node_Str""+ shortVersion+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + majorMinorVersion,""String_Node_Str"",""String_Node_Str"" + shortVersion + ""String_Node_Str""+ shortVersion+ ""String_Node_Str""),null)).append(warn(format(""String_Node_Str"",majorMinorVersion)));
  MutableList<String> linkFromHere=MutableList.<String>of().append(ifExecutableElse1(""String_Node_Str"",chainGroup(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))).appendAll(Iterables.transform(pgctlLocations,givenDirIfFileExistsInItLinkToDir(""String_Node_Str"",""String_Node_Str""))).append(fail(format(""String_Node_Str"",majorMinorVersion),9));
  newScript(INSTALLING).body.append(dontRequireTtyForSudo(),ifExecutableElse0(""String_Node_Str"",getYumRepository(version,majorMinorVersion,shortVersion)),ifExecutableElse0(""String_Node_Str"",getAptRepository()),""String_Node_Str"",alternativesGroup(findOrInstall),alternativesGroup(linkFromHere)).failOnNonZeroResultCode().queue();
}","@Override public void install(){
  String version=getEntity().getConfig(SoftwareProcess.SUGGESTED_VERSION);
  String majorMinorVersion=version.substring(0,version.lastIndexOf(""String_Node_Str""));
  String shortVersion=majorMinorVersion.replace(""String_Node_Str"",""String_Node_Str"");
  String altTarget=""String_Node_Str"";
  String altInstallDir=Urls.mergePaths(altTarget,""String_Node_Str"" + majorMinorVersion);
  Iterable<String> pgctlLocations=ImmutableList.of(altInstallDir + ""String_Node_Str"",""String_Node_Str"" + majorMinorVersion + ""String_Node_Str"",""String_Node_Str"" + shortVersion + ""String_Node_Str"",""String_Node_Str"" + majorMinorVersion + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  DynamicTasks.queueIfPossible(SshTasks.dontRequireTtyForSudo(getMachine(),true)).orSubmitAndBlock();
  DynamicTasks.waitForLast();
  MutableList<String> findOrInstall=MutableList.<String>of().append(""String_Node_Str"").appendAll(Iterables.transform(pgctlLocations,StringFunctions.formatter(""String_Node_Str""))).append(installPackage(ImmutableMap.of(""String_Node_Str"",""String_Node_Str"" + shortVersion + ""String_Node_Str""+ shortVersion+ ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + majorMinorVersion,""String_Node_Str"",""String_Node_Str"" + shortVersion + ""String_Node_Str""+ shortVersion+ ""String_Node_Str""),null)).append(warn(format(""String_Node_Str"",majorMinorVersion)));
  MutableList<String> linkFromHere=MutableList.<String>of().append(ifExecutableElse1(""String_Node_Str"",chainGroup(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""))).appendAll(Iterables.transform(pgctlLocations,givenDirIfFileExistsInItLinkToDir(""String_Node_Str"",""String_Node_Str""))).append(fail(format(""String_Node_Str"",majorMinorVersion),9));
  newScript(INSTALLING).body.append(dontRequireTtyForSudo(),ifExecutableElse0(""String_Node_Str"",getYumRepository(version,majorMinorVersion,shortVersion)),ifExecutableElse0(""String_Node_Str"",getAptRepository()),""String_Node_Str"",alternativesGroup(findOrInstall),alternativesGroup(linkFromHere)).failOnNonZeroResultCode().queue();
  if (DynamicTasks.queue(SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str"" + getInstallDir())).allowingNonZeroExitCode().summary(""String_Node_Str"")).asTask().getUnchecked() != 0) {
    log.info(""String_Node_Str"" + getInstallDir() + ""String_Node_Str""+ getEntity()+ ""String_Node_Str""+ ""String_Node_Str""+ altInstallDir+ ""String_Node_Str"");
    String newRunDir=Urls.mergePaths(altTarget,""String_Node_Str"",getEntity().getApplication().getId(),getEntity().getId());
    if (DynamicTasks.queue(SshEffectorTasks.ssh(""String_Node_Str"" + altInstallDir + ""String_Node_Str"").allowingNonZeroExitCode().summary(""String_Node_Str"" + altInstallDir + ""String_Node_Str"")).asTask().getUnchecked() == 0) {
    }
 else {
      DynamicTasks.queue(SshEffectorTasks.ssh(""String_Node_Str"" + altInstallDir,""String_Node_Str"" + altInstallDir + ""String_Node_Str"",""String_Node_Str"" + getInstallDir() + ""String_Node_Str""+ altInstallDir,""String_Node_Str"" + getInstallDir() + ""String_Node_Str"",""String_Node_Str"" + altInstallDir + ""String_Node_Str""+ getInstallDir(),""String_Node_Str"" + newRunDir,""String_Node_Str"" + altTarget).runAsRoot().requiringExitCodeZero().summary(""String_Node_Str""));
    }
    DynamicTasks.waitForLast();
    setInstallDir(altInstallDir);
    setRunDir(newRunDir);
  }
}",0.7218329861768604
79524,"public static String render(Object focus){
  if (focus instanceof Map) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    boolean first=true;
    for (    Object entry : ((Map<?,?>)focus).entrySet()) {
      if (!first)       sb.append(""String_Node_Str"");
 else       first=false;
      sb.append(""String_Node_Str"");
      sb.append(render(((Map.Entry<?,?>)entry).getKey()));
      sb.append(""String_Node_Str"");
      sb.append(render(((Map.Entry<?,?>)entry).getValue()));
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
  if (focus instanceof Collection) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    boolean first=true;
    for (    Object entry : ((Map<?,?>)focus).entrySet()) {
      if (!first)       sb.append(""String_Node_Str"");
 else       first=false;
      sb.append(""String_Node_Str"");
      sb.append(render(((Map.Entry<?,?>)entry).getKey()));
      sb.append(""String_Node_Str"");
      sb.append(render(((Map.Entry<?,?>)entry).getValue()));
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
  if (focus instanceof String) {
    return JavaStringEscapes.wrapJavaString((String)focus);
  }
  if (focus == null || focus instanceof Number || focus instanceof Boolean)   return ""String_Node_Str"" + focus;
  return render(""String_Node_Str"" + focus);
}","public static String render(Object focus){
  if (focus instanceof Map) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    boolean first=true;
    for (    Object entry : ((Map<?,?>)focus).entrySet()) {
      if (!first)       sb.append(""String_Node_Str"");
 else       first=false;
      sb.append(""String_Node_Str"");
      sb.append(render(((Map.Entry<?,?>)entry).getKey()));
      sb.append(""String_Node_Str"");
      sb.append(render(((Map.Entry<?,?>)entry).getValue()));
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
  if (focus instanceof Collection) {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    boolean first=true;
    for (    Object entry : (Collection<?>)focus) {
      if (!first)       sb.append(""String_Node_Str"");
 else       first=false;
      sb.append(render(entry));
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
  if (focus instanceof String) {
    return JavaStringEscapes.wrapJavaString((String)focus);
  }
  if (focus == null || focus instanceof Number || focus instanceof Boolean)   return ""String_Node_Str"" + focus;
  return render(""String_Node_Str"" + focus);
}",0.8447737909516381
79525,"public byte[] getContent(){
synchronized (mutex) {
    if (content == null) {
      InputStream in=null;
      try {
        in=response.getEntity().getContent();
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        ByteStreams.copy(in,out);
        content=out.toByteArray();
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
 finally {
        Closeables.closeQuietly(in);
      }
    }
  }
  return content;
}","public byte[] getContent(){
synchronized (mutex) {
    if (content == null) {
      InputStream in=null;
      try {
        in=response.getEntity().getContent();
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        ByteStreams.copy(in,out);
        content=out.toByteArray();
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
 finally {
        Streams.closeQuietly(in);
      }
    }
  }
  return content;
}",0.9838536060279872
79526,"protected boolean removeChild(Location child){
  boolean removed;
synchronized (children) {
    removed=children.remove(child);
  }
  if (removed) {
    if (child instanceof Closeable) {
      Closeables.closeQuietly((Closeable)child);
    }
    child.setParent(null);
    if (isManaged()) {
      managementContext.getLocationManager().unmanage(child);
    }
  }
  return removed;
}","protected boolean removeChild(Location child){
  boolean removed;
synchronized (children) {
    removed=children.remove(child);
  }
  if (removed) {
    if (child instanceof Closeable) {
      Streams.closeQuietly((Closeable)child);
    }
    child.setParent(null);
    if (isManaged()) {
      managementContext.getLocationManager().unmanage(child);
    }
  }
  return removed;
}",0.980340760157274
79527,"@Override public void close(){
  for (  MachineProvisioningLocation<?> provisioner : provisioners) {
    if (provisioner instanceof Closeable) {
      Closeables.closeQuietly((Closeable)provisioner);
    }
  }
}","@Override public void close(){
  for (  MachineProvisioningLocation<?> provisioner : provisioners) {
    if (provisioner instanceof Closeable) {
      Streams.closeQuietly((Closeable)provisioner);
    }
  }
}",0.964200477326969
79528,"@Override public void close(){
  for (  T machine : machines) {
    if (machine instanceof Closeable)     Closeables.closeQuietly((Closeable)machine);
  }
}","@Override public void close(){
  for (  T machine : machines) {
    if (machine instanceof Closeable)     Streams.closeQuietly((Closeable)machine);
  }
}",0.964401294498382
79529,"@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (feed != null)   feed.stop();
  if (app != null)   Entities.destroyAll(app.getManagementContext());
  if (loc != null)   Closeables.closeQuietly(loc);
}","@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (feed != null)   feed.stop();
  if (app != null)   Entities.destroyAll(app.getManagementContext());
  if (loc != null)   Streams.closeQuietly(loc);
}",0.9668874172185432
79530,"@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (feed != null)   feed.stop();
  if (app != null)   Entities.destroyAll(app.getManagementContext());
  if (loc != null)   Closeables.closeQuietly(loc);
}","@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (feed != null)   feed.stop();
  if (app != null)   Entities.destroyAll(app.getManagementContext());
  if (loc != null)   Streams.closeQuietly(loc);
}",0.9668874172185432
79531,"@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (provisioner != null)   Closeables.closeQuietly(provisioner);
  if (provisioner2 != null)   Closeables.closeQuietly(provisioner2);
}","@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (provisioner != null)   Streams.closeQuietly(provisioner);
  if (provisioner2 != null)   Streams.closeQuietly(provisioner2);
}",0.926829268292683
79532,"@AfterMethod(alwaysRun=true) public void afterMethod() throws Exception {
  if (executor != null)   executor.shutdownNow();
  Closeables.closeQuietly(machine);
}","@AfterMethod(alwaysRun=true) public void afterMethod() throws Exception {
  if (executor != null)   executor.shutdownNow();
  Streams.closeQuietly(machine);
}",0.9655172413793104
79533,"@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (host != null)   Closeables.closeQuietly(host);
  RecordingSshjTool.reset();
}","@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (host != null)   Streams.closeQuietly(host);
  RecordingSshjTool.reset();
}",0.9639344262295082
79534,"@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (host != null)   Closeables.closeQuietly(host);
}","@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (host != null)   Streams.closeQuietly(host);
}",0.9554655870445344
79535,"private String getPublicHostnameAws(HostAndPort sshHostAndPort,ConfigBag setup){
  SshMachineLocation sshLocByIp=null;
  try {
    ConfigBag sshConfig=extractSshConfig(setup,new ConfigBag());
    if (isManaged()) {
      sshLocByIp=getManagementContext().getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class).configure(""String_Node_Str"",sshHostAndPort.getHostText()).configure(""String_Node_Str"",sshHostAndPort.getPort()).configure(""String_Node_Str"",getUser(setup)).configure(sshConfig.getAllConfig()));
    }
 else {
      MutableMap<Object,Object> locationProps=MutableMap.builder().put(""String_Node_Str"",sshHostAndPort.getHostText()).put(""String_Node_Str"",sshHostAndPort.getPort()).put(""String_Node_Str"",getUser(setup)).putAll(sshConfig.getAllConfig()).build();
      sshLocByIp=new SshMachineLocation(locationProps);
    }
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    ByteArrayOutputStream errStream=new ByteArrayOutputStream();
    int exitcode=sshLocByIp.execCommands(MutableMap.of(""String_Node_Str"",outStream,""String_Node_Str"",errStream),""String_Node_Str"",ImmutableList.of(BashCommands.INSTALL_CURL,""String_Node_Str""));
    String outString=new String(outStream.toByteArray());
    String[] outLines=outString.split(""String_Node_Str"");
    for (    String line : outLines) {
      if (line.startsWith(""String_Node_Str""))       return line.trim();
    }
    throw new IllegalStateException(""String_Node_Str"" + sshHostAndPort + ""String_Node_Str""+ exitcode+ ""String_Node_Str""+ outString+ ""String_Node_Str""+ new String(errStream.toByteArray()));
  }
  finally {
    Closeables.closeQuietly(sshLocByIp);
  }
}","private String getPublicHostnameAws(HostAndPort sshHostAndPort,ConfigBag setup){
  SshMachineLocation sshLocByIp=null;
  try {
    ConfigBag sshConfig=extractSshConfig(setup,new ConfigBag());
    if (isManaged()) {
      sshLocByIp=getManagementContext().getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class).configure(""String_Node_Str"",sshHostAndPort.getHostText()).configure(""String_Node_Str"",sshHostAndPort.getPort()).configure(""String_Node_Str"",getUser(setup)).configure(sshConfig.getAllConfig()));
    }
 else {
      MutableMap<Object,Object> locationProps=MutableMap.builder().put(""String_Node_Str"",sshHostAndPort.getHostText()).put(""String_Node_Str"",sshHostAndPort.getPort()).put(""String_Node_Str"",getUser(setup)).putAll(sshConfig.getAllConfig()).build();
      sshLocByIp=new SshMachineLocation(locationProps);
    }
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    ByteArrayOutputStream errStream=new ByteArrayOutputStream();
    int exitcode=sshLocByIp.execCommands(MutableMap.of(""String_Node_Str"",outStream,""String_Node_Str"",errStream),""String_Node_Str"",ImmutableList.of(BashCommands.INSTALL_CURL,""String_Node_Str""));
    String outString=new String(outStream.toByteArray());
    String[] outLines=outString.split(""String_Node_Str"");
    for (    String line : outLines) {
      if (line.startsWith(""String_Node_Str""))       return line.trim();
    }
    throw new IllegalStateException(""String_Node_Str"" + sshHostAndPort + ""String_Node_Str""+ exitcode+ ""String_Node_Str""+ outString+ ""String_Node_Str""+ new String(errStream.toByteArray()));
  }
  finally {
    Streams.closeQuietly(sshLocByIp);
  }
}",0.995483288166215
79536,"/** 
 * Create the user immediately - executing ssh commands as required.
 */
protected LoginCredentials createUser(ComputeService computeService,NodeMetadata node,Optional<HostAndPort> hostAndPortOverride,ConfigBag config){
  UserCreation userCreation=createUserStatements(computeService.getImage(node.getImageId()),config);
  if (!userCreation.statements.isEmpty()) {
    org.jclouds.compute.domain.OsFamily osFamily=node.getOperatingSystem().getFamily();
    org.jclouds.scriptbuilder.domain.OsFamily scriptOsFamily=(osFamily == org.jclouds.compute.domain.OsFamily.WINDOWS) ? org.jclouds.scriptbuilder.domain.OsFamily.WINDOWS : org.jclouds.scriptbuilder.domain.OsFamily.UNIX;
    List<String> commands=Lists.newArrayList();
    for (    Statement statement : userCreation.statements) {
      InitAdminAccess initAdminAccess=new InitAdminAccess(new AdminAccessConfiguration.Default());
      initAdminAccess.visit(statement);
      commands.add(statement.render(scriptOsFamily));
    }
    LoginCredentials initialCredentials=node.getCredentials();
    Optional<String> initialPassword=initialCredentials.getOptionalPassword();
    Optional<String> initialPrivateKey=initialCredentials.getOptionalPrivateKey();
    String initialUser=initialCredentials.getUser();
    String address=hostAndPortOverride.isPresent() ? hostAndPortOverride.get().getHostText() : JcloudsUtil.getFirstReachableAddress(computeService.getContext(),node);
    int port=hostAndPortOverride.isPresent() ? hostAndPortOverride.get().getPort() : node.getLoginPort();
    Map<String,Object> sshProps=Maps.newLinkedHashMap(config.getAllConfig());
    sshProps.put(""String_Node_Str"",initialUser);
    sshProps.put(""String_Node_Str"",address);
    sshProps.put(""String_Node_Str"",port);
    if (initialPassword.isPresent())     sshProps.put(""String_Node_Str"",initialPassword.get());
    if (initialPrivateKey.isPresent())     sshProps.put(""String_Node_Str"",initialPrivateKey.get());
    Map<String,Object> execProps=Maps.newLinkedHashMap();
    execProps.put(ShellTool.PROP_RUN_AS_ROOT.getName(),true);
    SshMachineLocation sshLoc=null;
    try {
      if (isManaged()) {
        sshLoc=getManagementContext().getLocationManager().createLocation(sshProps,SshMachineLocation.class);
      }
 else {
        sshLoc=new SshMachineLocation(sshProps);
      }
      int exitcode=sshLoc.execScript(execProps,""String_Node_Str"",commands);
      if (exitcode != 0) {
        LOG.warn(""String_Node_Str"",exitcode,node);
      }
    }
  finally {
      getManagementContext().getLocationManager().unmanage(sshLoc);
      Closeables.closeQuietly(sshLoc);
    }
  }
  return userCreation.loginCredentials;
}","/** 
 * Create the user immediately - executing ssh commands as required.
 */
protected LoginCredentials createUser(ComputeService computeService,NodeMetadata node,Optional<HostAndPort> hostAndPortOverride,ConfigBag config){
  UserCreation userCreation=createUserStatements(computeService.getImage(node.getImageId()),config);
  if (!userCreation.statements.isEmpty()) {
    org.jclouds.compute.domain.OsFamily osFamily=node.getOperatingSystem().getFamily();
    org.jclouds.scriptbuilder.domain.OsFamily scriptOsFamily=(osFamily == org.jclouds.compute.domain.OsFamily.WINDOWS) ? org.jclouds.scriptbuilder.domain.OsFamily.WINDOWS : org.jclouds.scriptbuilder.domain.OsFamily.UNIX;
    List<String> commands=Lists.newArrayList();
    for (    Statement statement : userCreation.statements) {
      InitAdminAccess initAdminAccess=new InitAdminAccess(new AdminAccessConfiguration.Default());
      initAdminAccess.visit(statement);
      commands.add(statement.render(scriptOsFamily));
    }
    LoginCredentials initialCredentials=node.getCredentials();
    Optional<String> initialPassword=initialCredentials.getOptionalPassword();
    Optional<String> initialPrivateKey=initialCredentials.getOptionalPrivateKey();
    String initialUser=initialCredentials.getUser();
    String address=hostAndPortOverride.isPresent() ? hostAndPortOverride.get().getHostText() : JcloudsUtil.getFirstReachableAddress(computeService.getContext(),node);
    int port=hostAndPortOverride.isPresent() ? hostAndPortOverride.get().getPort() : node.getLoginPort();
    Map<String,Object> sshProps=Maps.newLinkedHashMap(config.getAllConfig());
    sshProps.put(""String_Node_Str"",initialUser);
    sshProps.put(""String_Node_Str"",address);
    sshProps.put(""String_Node_Str"",port);
    if (initialPassword.isPresent())     sshProps.put(""String_Node_Str"",initialPassword.get());
    if (initialPrivateKey.isPresent())     sshProps.put(""String_Node_Str"",initialPrivateKey.get());
    Map<String,Object> execProps=Maps.newLinkedHashMap();
    execProps.put(ShellTool.PROP_RUN_AS_ROOT.getName(),true);
    SshMachineLocation sshLoc=null;
    try {
      if (isManaged()) {
        sshLoc=getManagementContext().getLocationManager().createLocation(sshProps,SshMachineLocation.class);
      }
 else {
        sshLoc=new SshMachineLocation(sshProps);
      }
      int exitcode=sshLoc.execScript(execProps,""String_Node_Str"",commands);
      if (exitcode != 0) {
        LOG.warn(""String_Node_Str"",exitcode,node);
      }
    }
  finally {
      getManagementContext().getLocationManager().unmanage(sshLoc);
      Streams.closeQuietly(sshLoc);
    }
  }
  return userCreation.loginCredentials;
}",0.9697311524722692
79537,"public void handleError(HttpCommand command,HttpResponse response){
  String message=parseMessage(response);
  Exception exception=message != null ? new HttpResponseException(command,response,message) : new HttpResponseException(command,response);
  try {
    message=message != null ? message : String.format(""String_Node_Str"",command.getCurrentRequest().getRequestLine(),response.getStatusLine());
switch (response.getStatusCode()) {
case 401:
case 403:
      exception=new AuthorizationException(message,exception);
    break;
case 404:
  if (!command.getCurrentRequest().getMethod().equals(""String_Node_Str"")) {
    exception=new ResourceNotFoundException(message,exception);
  }
break;
case 500:
if (message != null) {
if (message.indexOf(""String_Node_Str"") != -1) {
  exception=new ResourceNotFoundException(message,exception);
}
 else if (message.indexOf(""String_Node_Str"") != -1) {
  exception=new IllegalStateException(message,exception);
}
 else if (message.indexOf(""String_Node_Str"") != -1) {
  exception=new SoftLayerOrderItemDuplicateException(command,response,message);
}
}
}
}
  finally {
Closeables.closeQuietly(response.getPayload());
command.setException(exception);
}
}","public void handleError(HttpCommand command,HttpResponse response){
  String message=parseMessage(response);
  Exception exception=message != null ? new HttpResponseException(command,response,message) : new HttpResponseException(command,response);
  try {
    message=message != null ? message : String.format(""String_Node_Str"",command.getCurrentRequest().getRequestLine(),response.getStatusLine());
switch (response.getStatusCode()) {
case 401:
case 403:
      exception=new AuthorizationException(message,exception);
    break;
case 404:
  if (!command.getCurrentRequest().getMethod().equals(""String_Node_Str"")) {
    exception=new ResourceNotFoundException(message,exception);
  }
break;
case 500:
if (message != null) {
if (message.indexOf(""String_Node_Str"") != -1) {
  exception=new ResourceNotFoundException(message,exception);
}
 else if (message.indexOf(""String_Node_Str"") != -1) {
  exception=new IllegalStateException(message,exception);
}
 else if (message.indexOf(""String_Node_Str"") != -1) {
  exception=new SoftLayerOrderItemDuplicateException(command,response,message);
}
}
}
}
  finally {
Streams.closeQuietly(response.getPayload());
command.setException(exception);
}
}",0.9936788874841972
79538,"private void assertSshable(Map<?,?> machineConfig){
  SshMachineLocation machineUsingPassword=managementContext.getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class).configure(machineConfig));
  try {
    assertSshable(machineUsingPassword);
  }
  finally {
    Closeables.closeQuietly(machineUsingPassword);
  }
}","private void assertSshable(Map<?,?> machineConfig){
  SshMachineLocation machineUsingPassword=managementContext.getLocationManager().createLocation(LocationSpec.create(SshMachineLocation.class).configure(machineConfig));
  try {
    assertSshable(machineUsingPassword);
  }
  finally {
    Streams.closeQuietly(machineUsingPassword);
  }
}",0.9779735682819384
79539,"/** 
 * Increases the cluster size by the given number. Returns successfully added nodes. Called when synchronized on mutex, so overriders beware!
 */
protected Collection<Entity> grow(int delta){
  List<Location> chosenLocations;
  if (isAvailabilityZoneEnabled()) {
    List<Location> subLocations=getNonFailedSubLocations();
    Multimap<Location,Entity> membersByLocation=getMembersByLocation();
    chosenLocations=getZonePlacementStrategy().locationsForAdditions(membersByLocation,subLocations,delta);
    if (chosenLocations.size() != delta) {
      throw new IllegalStateException(""String_Node_Str"" + Iterables.size(chosenLocations) + ""String_Node_Str""+ delta+ ""String_Node_Str""+ this);
    }
  }
 else {
    chosenLocations=Collections.nCopies(delta,getLocation());
  }
  List<Entity> addedEntities=Lists.newArrayList();
  Map<Entity,Location> addedEntityLocations=Maps.newLinkedHashMap();
  Map<Entity,Task<?>> tasks=Maps.newLinkedHashMap();
  for (  Location chosenLocation : chosenLocations) {
    Entity entity=addNode(chosenLocation,ImmutableMap.of());
    addedEntities.add(entity);
    addedEntityLocations.put(entity,chosenLocation);
    Map<String,?> args=ImmutableMap.of(""String_Node_Str"",ImmutableList.of(chosenLocation));
    tasks.put(entity,entity.invoke(Startable.START,args));
  }
  Map<Entity,Throwable> errors=waitForTasksOnEntityStart(tasks);
  if (isAvailabilityZoneEnabled()) {
    for (    Map.Entry<Entity,Location> entry : addedEntityLocations.entrySet()) {
      Entity entity=entry.getKey();
      Location loc=entry.getValue();
      Throwable err=errors.get(entity);
      if (err == null) {
        getZoneFailureDetector().onStartupSuccess(loc,entity);
      }
 else {
        getZoneFailureDetector().onStartupFailure(loc,entity,err);
      }
    }
  }
  if (!errors.isEmpty()) {
    if (isQuarantineEnabled()) {
      quarantineFailedNodes(errors.keySet());
    }
 else {
      cleanupFailedNodes(errors.keySet());
    }
  }
  return MutableList.<Entity>builder().addAll(addedEntities).removeAll(errors.keySet()).build();
}","/** 
 * Increases the cluster size by the given number. Returns successfully added nodes. Called when synchronized on mutex, so overriders beware!
 */
protected Collection<Entity> grow(int delta){
  List<Location> chosenLocations;
  if (isAvailabilityZoneEnabled()) {
    List<Location> subLocations=getNonFailedSubLocations();
    Multimap<Location,Entity> membersByLocation=getMembersByLocation();
    chosenLocations=getZonePlacementStrategy().locationsForAdditions(membersByLocation,subLocations,delta);
    if (chosenLocations.size() != delta) {
      throw new IllegalStateException(""String_Node_Str"" + Iterables.size(chosenLocations) + ""String_Node_Str""+ delta+ ""String_Node_Str""+ this);
    }
  }
 else {
    chosenLocations=Collections.nCopies(delta,getLocation());
  }
  List<Entity> addedEntities=Lists.newArrayList();
  Map<Entity,Location> addedEntityLocations=Maps.newLinkedHashMap();
  Map<Entity,Task<?>> tasks=Maps.newLinkedHashMap();
  for (  Location chosenLocation : chosenLocations) {
    Entity entity=addNode(chosenLocation,ImmutableMap.of());
    addedEntities.add(entity);
    addedEntityLocations.put(entity,chosenLocation);
    Map<String,?> args=ImmutableMap.of(""String_Node_Str"",ImmutableList.of(chosenLocation));
    Task<Void> task=Effectors.invocation(entity,Startable.START,args).asTask();
    tasks.put(entity,task);
  }
  DynamicTasks.queueIfPossible(Tasks.parallel(""String_Node_Str"" + tasks.size() + ""String_Node_Str""+ Strings.s(tasks.size())+ ""String_Node_Str"",tasks.values())).orSubmitAsync(this);
  Map<Entity,Throwable> errors=waitForTasksOnEntityStart(tasks);
  if (isAvailabilityZoneEnabled()) {
    for (    Map.Entry<Entity,Location> entry : addedEntityLocations.entrySet()) {
      Entity entity=entry.getKey();
      Location loc=entry.getValue();
      Throwable err=errors.get(entity);
      if (err == null) {
        getZoneFailureDetector().onStartupSuccess(loc,entity);
      }
 else {
        getZoneFailureDetector().onStartupFailure(loc,entity,err);
      }
    }
  }
  if (!errors.isEmpty()) {
    if (isQuarantineEnabled()) {
      quarantineFailedNodes(errors.keySet());
    }
 else {
      cleanupFailedNodes(errors.keySet());
    }
  }
  return MutableList.<Entity>builder().addAll(addedEntities).removeAll(errors.keySet()).build();
}",0.9380449747590638
79540,"@Override public void start(Collection<? extends Location> locsO){
  if (locsO != null) {
    checkArgument(locsO.size() <= 1,""String_Node_Str"",this,locsO);
    addLocations(locsO);
  }
  Location loc=getLocation();
  EntitySpec<?> spec=getConfig(MEMBER_SPEC);
  if (spec != null) {
    setDefaultDisplayName(""String_Node_Str"" + JavaClassNames.simpleClassName(spec.getType()) + ""String_Node_Str""+ loc+ ""String_Node_Str"");
  }
  if (isAvailabilityZoneEnabled()) {
    setAttribute(SUB_LOCATIONS,findSubLocations(loc));
  }
  setAttribute(SERVICE_STATE,Lifecycle.STARTING);
  try {
    if (isQuarantineEnabled()) {
      Group quarantineGroup=addChild(EntitySpec.create(BasicGroup.class).displayName(""String_Node_Str""));
      Entities.manage(quarantineGroup);
      setAttribute(QUARANTINE_GROUP,quarantineGroup);
    }
    int initialSize=getConfig(INITIAL_SIZE).intValue();
    int initialQuorumSize=getInitialQuorumSize();
    resize(initialSize);
    int currentSize=getCurrentSize().intValue();
    if (currentSize < initialQuorumSize) {
      throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ getCurrentSize()+ (initialQuorumSize != initialSize ? ""String_Node_Str"" + initialQuorumSize + ""String_Node_Str"" : ""String_Node_Str""));
    }
 else     if (currentSize < initialSize) {
      LOG.warn(""String_Node_Str"",new Object[]{this,currentSize,initialQuorumSize,initialSize});
    }
    for (    Policy it : getPolicies()) {
      it.resume();
    }
    setAttribute(SERVICE_STATE,Lifecycle.RUNNING);
    setAttribute(SERVICE_UP,calculateServiceUp());
  }
 catch (  Exception e) {
    setAttribute(SERVICE_STATE,Lifecycle.ON_FIRE);
    throw Exceptions.propagate(e);
  }
}","@Override public void start(Collection<? extends Location> locsO){
  if (locsO != null) {
    checkArgument(locsO.size() <= 1,""String_Node_Str"",this,locsO);
    addLocations(locsO);
  }
  Location loc=getLocation();
  EntitySpec<?> spec=getConfig(MEMBER_SPEC);
  if (spec != null) {
    setDefaultDisplayName(""String_Node_Str"" + JavaClassNames.simpleClassName(spec.getType()) + ""String_Node_Str""+ loc+ ""String_Node_Str"");
  }
  if (isAvailabilityZoneEnabled()) {
    setAttribute(SUB_LOCATIONS,findSubLocations(loc));
  }
  setAttribute(SERVICE_STATE,Lifecycle.STARTING);
  try {
    if (isQuarantineEnabled()) {
      Group quarantineGroup=addChild(EntitySpec.create(BasicGroup.class).displayName(""String_Node_Str""));
      Entities.manage(quarantineGroup);
      setAttribute(QUARANTINE_GROUP,quarantineGroup);
    }
    int initialSize=getConfig(INITIAL_SIZE).intValue();
    int initialQuorumSize=getInitialQuorumSize();
    resize(initialSize);
    Maybe<Task<?>> firstFailed=Maybe.next(Tasks.failed(Tasks.children(Tasks.current())).iterator());
    int currentSize=getCurrentSize().intValue();
    if (currentSize < initialQuorumSize) {
      String message;
      if (currentSize == 0 && firstFailed.isPresent()) {
        message=""String_Node_Str"" + this + ""String_Node_Str"";
      }
 else {
        message=""String_Node_Str"" + this + ""String_Node_Str""+ initialSize+ ""String_Node_Str""+ getCurrentSize()+ (initialQuorumSize != initialSize ? ""String_Node_Str"" + initialQuorumSize + ""String_Node_Str"" : ""String_Node_Str"");
      }
      Throwable firstError=Tasks.getError(firstFailed.orNull());
      if (firstError != null)       message+=""String_Node_Str"" + Exceptions.collapseText(firstError);
      throw new IllegalStateException(message,firstError);
    }
 else     if (currentSize < initialSize) {
      LOG.warn(""String_Node_Str"",new Object[]{this,currentSize,initialQuorumSize,initialSize});
    }
    for (    Policy it : getPolicies()) {
      it.resume();
    }
    setAttribute(SERVICE_STATE,Lifecycle.RUNNING);
    setAttribute(SERVICE_UP,calculateServiceUp());
  }
 catch (  Exception e) {
    setAttribute(SERVICE_STATE,Lifecycle.ON_FIRE);
    throw Exceptions.propagate(e);
  }
}",0.8655654383735705
79541,"protected String getActiveTaskStatusString(int verbosity){
  String rv=""String_Node_Str"";
  Thread t=getThread();
  if (t == null) {
    if (isDone()) {
      return getStatusString(verbosity);
    }
 else {
      return ""String_Node_Str"";
    }
  }
  ThreadInfo ti=ManagementFactory.getThreadMXBean().getThreadInfo(t.getId(),(verbosity <= 0 ? 0 : verbosity == 1 ? 1 : Integer.MAX_VALUE));
  if (getThread() == null)   return getStatusString(verbosity);
  if (verbosity >= 1 && GroovyJavaMethods.truth(blockingDetails)) {
    if (verbosity == 1)     return blockingDetails;
    rv=blockingDetails + ""String_Node_Str"";
  }
  if (verbosity >= 1 && GroovyJavaMethods.truth(blockingTask)) {
    if (verbosity == 1)     return ""String_Node_Str"" + blockingTask;
    rv=""String_Node_Str"" + blockingTask + ""String_Node_Str"";
  }
  if (verbosity >= 2) {
    if (getExtraStatusText() != null) {
      rv+=getExtraStatusText() + ""String_Node_Str"";
    }
    rv+=""String_Node_Str"" + toString() + ""String_Node_Str"";
    if (submittedByTask != null) {
      rv+=""String_Node_Str"" + submittedByTask + ""String_Node_Str"";
    }
    if (this instanceof HasTaskChildren) {
      try {
        Iterable<Task<?>> childrenTasks=((HasTaskChildren)this).getChildren();
        if (childrenTasks.iterator().hasNext()) {
          rv+=""String_Node_Str"";
          for (          Task<?> child : childrenTasks) {
            rv+=""String_Node_Str"" + child + ""String_Node_Str""+ child.getStatusDetail(false)+ ""String_Node_Str"";
          }
        }
      }
 catch (      ConcurrentModificationException exc) {
        rv+=""String_Node_Str"";
      }
    }
    rv+=""String_Node_Str"";
  }
  LockInfo lock=ti.getLockInfo();
  if (!GroovyJavaMethods.truth(lock) && ti.getThreadState() == Thread.State.RUNNABLE) {
    if (ti.isSuspended()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"";
    }
 else {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + ti.getThreadState() + ""String_Node_Str"";
    }
  }
 else {
    rv+=""String_Node_Str"";
    if (verbosity >= 1) {
      if (ti.getThreadState() == Thread.State.BLOCKED) {
        rv+=""String_Node_Str"" + lookup(lock);
      }
 else       if (ti.getThreadState() == Thread.State.WAITING) {
        rv+=""String_Node_Str"" + lookup(lock);
      }
 else       if (ti.getThreadState() == Thread.State.TIMED_WAITING) {
        rv+=""String_Node_Str"" + lookup(lock);
      }
 else {
        rv=""String_Node_Str"" + ti.getThreadState() + ""String_Node_Str""+ lookup(lock);
      }
    }
  }
  if (verbosity >= 2) {
    StackTraceElement[] st=ti.getStackTrace();
    st=brooklyn.util.javalang.StackTraceSimplifier.cleanStackTrace(st);
    if (st != null && st.length > 0)     rv+=""String_Node_Str"" + ""String_Node_Str"" + st[0];
    for (int ii=1; ii < st.length; ii++) {
      rv+=""String_Node_Str"" + ""String_Node_Str"" + st[ii];
    }
  }
  return rv;
}","protected String getActiveTaskStatusString(int verbosity){
  String rv=""String_Node_Str"";
  Thread t=getThread();
  if (t == null) {
    if (isDone()) {
      return getStatusString(verbosity);
    }
 else {
      return ""String_Node_Str"";
    }
  }
  ThreadInfo ti=ManagementFactory.getThreadMXBean().getThreadInfo(t.getId(),(verbosity <= 0 ? 0 : verbosity == 1 ? 1 : Integer.MAX_VALUE));
  if (getThread() == null)   return getStatusString(verbosity);
  if (verbosity >= 1 && Strings.isNonBlank(blockingDetails)) {
    if (verbosity == 1)     return blockingDetails;
    rv=blockingDetails + ""String_Node_Str"";
  }
  if (verbosity >= 1 && blockingTask != null) {
    if (verbosity == 1)     return ""String_Node_Str"" + blockingTask;
    rv=""String_Node_Str"" + blockingTask + ""String_Node_Str"";
  }
  if (verbosity >= 2) {
    if (getExtraStatusText() != null) {
      rv+=getExtraStatusText() + ""String_Node_Str"";
    }
    rv+=""String_Node_Str"" + toString() + ""String_Node_Str"";
    if (submittedByTask != null) {
      rv+=""String_Node_Str"" + submittedByTask + ""String_Node_Str"";
    }
    if (this instanceof HasTaskChildren) {
      try {
        Iterable<Task<?>> childrenTasks=((HasTaskChildren)this).getChildren();
        if (childrenTasks.iterator().hasNext()) {
          rv+=""String_Node_Str"";
          for (          Task<?> child : childrenTasks) {
            rv+=""String_Node_Str"" + child + ""String_Node_Str""+ child.getStatusDetail(false)+ ""String_Node_Str"";
          }
        }
      }
 catch (      ConcurrentModificationException exc) {
        rv+=""String_Node_Str"";
      }
    }
    rv+=""String_Node_Str"";
  }
  LockInfo lock=ti.getLockInfo();
  rv+=""String_Node_Str"";
  if (verbosity >= 1) {
    if (lock == null && ti.getThreadState() == Thread.State.RUNNABLE) {
      if (ti.isSuspended()) {
        rv+=""String_Node_Str"";
      }
 else {
        if (verbosity >= 2)         rv+=""String_Node_Str"" + ti.getThreadState() + ""String_Node_Str"";
      }
    }
 else {
      rv+=""String_Node_Str"";
      if (ti.getThreadState() == Thread.State.BLOCKED) {
        rv+=""String_Node_Str"" + lookup(lock);
      }
 else       if (ti.getThreadState() == Thread.State.WAITING) {
        rv+=""String_Node_Str"" + lookup(lock);
      }
 else       if (ti.getThreadState() == Thread.State.TIMED_WAITING) {
        rv+=""String_Node_Str"" + lookup(lock);
      }
 else {
        rv=""String_Node_Str"" + ti.getThreadState() + ""String_Node_Str""+ lookup(lock);
      }
    }
  }
  if (verbosity >= 2) {
    StackTraceElement[] st=ti.getStackTrace();
    st=brooklyn.util.javalang.StackTraceSimplifier.cleanStackTrace(st);
    if (st != null && st.length > 0)     rv+=""String_Node_Str"" + ""String_Node_Str"" + st[0];
    for (int ii=1; ii < st.length; ii++) {
      rv+=""String_Node_Str"" + ""String_Node_Str"" + st[ii];
    }
  }
  return rv;
}",0.9054967920929426
79542,"/** 
 * This method is useful for callers to see the status of a task. Also for developers to see best practices for examining status fields etc
 * @param verbosity 0 = brief, 1 = one-line with some detail, 2 = lots of detail
 */
protected String getStatusString(int verbosity){
  String rv;
  if (submitTimeUtc <= 0)   rv=""String_Node_Str"";
 else   if (!isCancelled() && startTimeUtc <= 0) {
    rv=""String_Node_Str"";
    if (verbosity > 0) {
      long elapsed=System.currentTimeMillis() - submitTimeUtc;
      rv+=""String_Node_Str"" + Time.makeTimeStringRoundedSince(elapsed) + ""String_Node_Str"";
    }
    if (verbosity >= 2 && getExtraStatusText() != null) {
      rv+=""String_Node_Str"" + getExtraStatusText();
    }
  }
 else   if (isDone()) {
    long elapsed=endTimeUtc - submitTimeUtc;
    String duration=Time.makeTimeStringRounded(elapsed);
    rv=""String_Node_Str"";
    if (isCancelled()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + duration;
      if (verbosity >= 2 && getExtraStatusText() != null) {
        rv+=""String_Node_Str"" + getExtraStatusText();
      }
    }
 else     if (isError()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        rv+=""String_Node_Str"" + duration;
        Object error;
        try {
          String rvx=""String_Node_Str"" + get();
          error=""String_Node_Str"" + rvx;
        }
 catch (        Throwable tt) {
          error=tt;
        }
        if (verbosity >= 2 && getExtraStatusText() != null) {
          rv+=""String_Node_Str"" + getExtraStatusText();
        }
        while (error instanceof ExecutionException)         error=((Throwable)error).getCause();
        String errorMessage=null;
        if (error instanceof Throwable)         errorMessage=((Throwable)error).getMessage();
        if (errorMessage == null || errorMessage.isEmpty())         errorMessage=""String_Node_Str"" + error;
        if (verbosity >= 1)         rv+=""String_Node_Str"" + errorMessage;
        if (verbosity >= 2) {
          StringWriter sw=new StringWriter();
          ((Throwable)error).printStackTrace(new PrintWriter(sw));
          rv+=""String_Node_Str"" + sw.getBuffer();
        }
      }
    }
 else {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        if (verbosity == 1) {
          try {
            Object v=get();
            rv+=""String_Node_Str"" + (v == null ? ""String_Node_Str"" : ""String_Node_Str"" + v);
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
 else {
          rv+=""String_Node_Str"" + duration;
          try {
            Object v=get();
            rv+=""String_Node_Str"" + (v == null ? ""String_Node_Str"" : ""String_Node_Str"" + v);
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + e + ""String_Node_Str"";
          }
          if (verbosity >= 2 && getExtraStatusText() != null) {
            rv+=""String_Node_Str"" + getExtraStatusText();
          }
        }
      }
    }
  }
 else {
    rv=getActiveTaskStatusString(verbosity);
  }
  return rv;
}","/** 
 * This method is useful for callers to see the status of a task. Also for developers to see best practices for examining status fields etc
 * @param verbosity 0 = brief, 1 = one-line with some detail, 2 = lots of detail
 */
protected String getStatusString(int verbosity){
  String rv;
  if (submitTimeUtc <= 0)   rv=""String_Node_Str"";
 else   if (!isCancelled() && startTimeUtc <= 0) {
    rv=""String_Node_Str"";
    if (verbosity > 0) {
      long elapsed=System.currentTimeMillis() - submitTimeUtc;
      rv+=""String_Node_Str"" + Time.makeTimeStringRoundedSince(elapsed) + ""String_Node_Str"";
    }
    if (verbosity >= 2 && getExtraStatusText() != null) {
      rv+=""String_Node_Str"" + getExtraStatusText();
    }
  }
 else   if (isDone()) {
    long elapsed=endTimeUtc - submitTimeUtc;
    String duration=Time.makeTimeStringRounded(elapsed);
    if (isCancelled()) {
      rv=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + duration;
      if (verbosity >= 2 && getExtraStatusText() != null) {
        rv+=""String_Node_Str"" + getExtraStatusText();
      }
    }
 else     if (isError()) {
      rv=""String_Node_Str"";
      if (verbosity >= 1) {
        rv+=""String_Node_Str"" + duration;
        Throwable error=Tasks.getError(this);
        if (verbosity >= 2 && getExtraStatusText() != null) {
          rv+=""String_Node_Str"" + getExtraStatusText();
        }
        while (error instanceof ExecutionException)         error=error.getCause();
        String errorMessage=Exceptions.collapseText(error);
        if (verbosity == 1)         rv+=""String_Node_Str"" + abbreviate(errorMessage);
        if (verbosity >= 2) {
          rv+=""String_Node_Str"" + errorMessage;
          StringWriter sw=new StringWriter();
          ((Throwable)error).printStackTrace(new PrintWriter(sw));
          rv+=""String_Node_Str"" + sw.getBuffer();
        }
      }
    }
 else {
      rv=""String_Node_Str"";
      if (verbosity >= 1) {
        if (verbosity == 1) {
          try {
            Object v=get();
            rv+=""String_Node_Str"" + (v == null ? ""String_Node_Str"" : ""String_Node_Str"" + abbreviate(v.toString()));
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
 else {
          rv+=""String_Node_Str"" + duration;
          try {
            Object v=get();
            rv+=""String_Node_Str"" + (v == null ? ""String_Node_Str"" : ""String_Node_Str"" + v);
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + e + ""String_Node_Str"";
          }
          if (verbosity >= 2 && getExtraStatusText() != null) {
            rv+=""String_Node_Str"" + getExtraStatusText();
          }
        }
      }
    }
  }
 else {
    rv=getActiveTaskStatusString(verbosity);
  }
  return rv;
}",0.5782038345105953
79543,"protected String lookup(LockInfo info){
  return GroovyJavaMethods.truth(info) ? ""String_Node_Str"" + info : ""String_Node_Str"";
}","protected String lookup(LockInfo info){
  return info != null ? ""String_Node_Str"" + info : ""String_Node_Str"";
}",0.8619246861924686
79544,"public static Task<List<?>> parallel(String name,TaskAdaptable<?>... tasks){
  return parallelInternal(name,asTasks(tasks));
}","public static Task<List<?>> parallel(String name,Iterable<? extends TaskAdaptable<?>> tasks){
  return parallelInternal(name,asTasks(Iterables.toArray(tasks,TaskAdaptable.class)));
}",0.7987012987012987
79545,"/** 
 * core method for obtaining a VM using jclouds; Map should contain CLOUD_PROVIDER and CLOUD_ENDPOINT or CLOUD_REGION, depending on the cloud, as well as ACCESS_IDENTITY and ACCESS_CREDENTIAL, plus any further properties to specify e.g. images, hardware profiles, accessing user (for initial login, and a user potentially to create for subsequent ie normal access) 
 */
public JcloudsSshMachineLocation obtain(Map<?,?> flags) throws NoMachinesAvailableException {
  ConfigBag setup=ConfigBag.newInstanceExtending(getAllConfigBag(),flags);
  Integer attempts=setup.get(MACHINE_CREATE_ATTEMPTS);
  List<Exception> exceptions=Lists.newArrayList();
  if (attempts == null || attempts < 1)   attempts=1;
  for (int i=1; i <= attempts; i++) {
    try {
      return obtainOnce(setup);
    }
 catch (    RuntimeException e) {
      LOG.warn(""String_Node_Str"",new Object[]{i,attempts,e});
      exceptions.add(e);
    }
  }
  String msg=String.format(""String_Node_Str"",attempts,attempts == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  Exception cause=(exceptions.size() == 1) ? exceptions.get(0) : new CompoundRuntimeException(msg + ""String_Node_Str"" + exceptions.get(exceptions.size() - 1),exceptions);
  if (exceptions.get(exceptions.size() - 1) instanceof NoMachinesAvailableException) {
    throw new NoMachinesAvailableException(msg,cause);
  }
 else {
    throw Exceptions.propagate(cause);
  }
}","/** 
 * core method for obtaining a VM using jclouds; Map should contain CLOUD_PROVIDER and CLOUD_ENDPOINT or CLOUD_REGION, depending on the cloud, as well as ACCESS_IDENTITY and ACCESS_CREDENTIAL, plus any further properties to specify e.g. images, hardware profiles, accessing user (for initial login, and a user potentially to create for subsequent ie normal access) 
 */
public JcloudsSshMachineLocation obtain(Map<?,?> flags) throws NoMachinesAvailableException {
  ConfigBag setup=ConfigBag.newInstanceExtending(getAllConfigBag(),flags);
  Integer attempts=setup.get(MACHINE_CREATE_ATTEMPTS);
  List<Exception> exceptions=Lists.newArrayList();
  if (attempts == null || attempts < 1)   attempts=1;
  for (int i=1; i <= attempts; i++) {
    try {
      return obtainOnce(setup);
    }
 catch (    RuntimeException e) {
      LOG.warn(""String_Node_Str"",new Object[]{i,attempts,e});
      exceptions.add(e);
    }
  }
  String msg=String.format(""String_Node_Str"",attempts,attempts == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
  Exception cause=(exceptions.size() == 1) ? exceptions.get(0) : new CompoundRuntimeException(msg + ""String_Node_Str"" + ""String_Node_Str""+ exceptions.get(0)+ ""String_Node_Str""+ ""String_Node_Str""+ (exceptions.size() - 1)+ ""String_Node_Str""+ exceptions.get(exceptions.size() - 1)+ ""String_Node_Str"",exceptions.get(0),exceptions);
  if (exceptions.get(exceptions.size() - 1) instanceof NoMachinesAvailableException) {
    throw new NoMachinesAvailableException(msg,cause);
  }
 else {
    throw Exceptions.propagate(cause);
  }
}",0.9374365911396686
79546,"/** 
 * returns the jclouds Template which describes the image to be built, for the given config and compute service 
 */
public Template buildTemplate(ComputeService computeService,ConfigBag config){
  TemplateBuilder templateBuilder=(TemplateBuilder)config.get(TEMPLATE_BUILDER);
  if (templateBuilder == null) {
    templateBuilder=new PortableTemplateBuilder<PortableTemplateBuilder<?>>();
  }
 else {
    LOG.debug(""String_Node_Str"",new Object[]{templateBuilder,this,config.getDescription()});
  }
  if (templateBuilder instanceof PortableTemplateBuilder<?>) {
    if (((PortableTemplateBuilder<?>)templateBuilder).imageChooser() == null) {
      templateBuilder.imageChooser(getConfig(JcloudsLocationConfig.IMAGE_CHOOSER));
    }
 else {
    }
  }
 else {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",config.getDescription());
  }
  if (!Strings.isEmpty(config.get(CLOUD_REGION_ID))) {
    templateBuilder.locationId(config.get(CLOUD_REGION_ID));
  }
  for (  Map.Entry<ConfigKey<?>,CustomizeTemplateBuilder> entry : SUPPORTED_TEMPLATE_BUILDER_PROPERTIES.entrySet()) {
    ConfigKey<?> name=entry.getKey();
    CustomizeTemplateBuilder code=entry.getValue();
    if (config.containsKey(name))     code.apply(templateBuilder,config,config.get(name));
  }
  if (templateBuilder instanceof PortableTemplateBuilder) {
    ((PortableTemplateBuilder<?>)templateBuilder).attachComputeService(computeService);
    if (truth(config.get(DEFAULT_IMAGE_ID))) {
      if (((PortableTemplateBuilder<?>)templateBuilder).isBlank()) {
        templateBuilder.imageId(config.get(DEFAULT_IMAGE_ID).toString());
      }
    }
  }
  for (  JcloudsLocationCustomizer customizer : getCustomizers(config)) {
    customizer.customize(this,computeService,templateBuilder);
  }
  Template template;
  try {
    template=templateBuilder.build();
    if (template == null)     throw new NullPointerException(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ template+ ""String_Node_Str""+ template.getImage()+ ""String_Node_Str"");
    if (template.getImage() == null)     throw new NullPointerException(""String_Node_Str"");
  }
 catch (  AuthorizationException e) {
    LOG.warn(""String_Node_Str"" + e + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
  }
catch (  Exception e) {
    try {
synchronized (this) {
        LOG.warn(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ e);
        if (!listedAvailableTemplatesOnNoSuchTemplate) {
          listedAvailableTemplatesOnNoSuchTemplate=true;
          logAvailableTemplates(config);
        }
      }
    }
 catch (    Exception e2) {
      LOG.warn(""String_Node_Str"" + e2,e2);
      throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
    }
    throw new IllegalStateException(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str"",e);
  }
  TemplateOptions options=template.getOptions();
  for (  Map.Entry<ConfigKey<?>,CustomizeTemplateOptions> entry : SUPPORTED_TEMPLATE_OPTIONS_PROPERTIES.entrySet()) {
    ConfigKey<?> key=entry.getKey();
    CustomizeTemplateOptions code=entry.getValue();
    if (config.containsKey(key))     code.apply(options,config,config.get(key));
  }
  return template;
}","/** 
 * returns the jclouds Template which describes the image to be built, for the given config and compute service 
 */
public Template buildTemplate(ComputeService computeService,ConfigBag config){
  TemplateBuilder templateBuilder=(TemplateBuilder)config.get(TEMPLATE_BUILDER);
  if (templateBuilder == null) {
    templateBuilder=new PortableTemplateBuilder<PortableTemplateBuilder<?>>();
  }
 else {
    LOG.debug(""String_Node_Str"",new Object[]{templateBuilder,this,config.getDescription()});
  }
  if (templateBuilder instanceof PortableTemplateBuilder<?>) {
    if (((PortableTemplateBuilder<?>)templateBuilder).imageChooser() == null) {
      templateBuilder.imageChooser(getConfig(JcloudsLocationConfig.IMAGE_CHOOSER));
    }
 else {
    }
  }
 else {
    LOG.warn(""String_Node_Str"" + ""String_Node_Str"",config.getDescription());
  }
  if (!Strings.isEmpty(config.get(CLOUD_REGION_ID))) {
    templateBuilder.locationId(config.get(CLOUD_REGION_ID));
  }
  for (  Map.Entry<ConfigKey<?>,CustomizeTemplateBuilder> entry : SUPPORTED_TEMPLATE_BUILDER_PROPERTIES.entrySet()) {
    ConfigKey<?> name=entry.getKey();
    CustomizeTemplateBuilder code=entry.getValue();
    if (config.containsKey(name))     code.apply(templateBuilder,config,config.get(name));
  }
  if (templateBuilder instanceof PortableTemplateBuilder) {
    ((PortableTemplateBuilder<?>)templateBuilder).attachComputeService(computeService);
    if (truth(config.get(DEFAULT_IMAGE_ID))) {
      if (((PortableTemplateBuilder<?>)templateBuilder).isBlank()) {
        templateBuilder.imageId(config.get(DEFAULT_IMAGE_ID).toString());
      }
    }
  }
  for (  JcloudsLocationCustomizer customizer : getCustomizers(config)) {
    customizer.customize(this,computeService,templateBuilder);
  }
  Template template;
  try {
    template=templateBuilder.build();
    if (template == null)     throw new NullPointerException(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ template+ ""String_Node_Str""+ template.getImage()+ ""String_Node_Str"");
    if (template.getImage() == null)     throw new NullPointerException(""String_Node_Str"");
  }
 catch (  AuthorizationException e) {
    LOG.warn(""String_Node_Str"" + e + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
  }
catch (  Exception e) {
    try {
synchronized (this) {
        LOG.warn(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ e);
        if (!listedAvailableTemplatesOnNoSuchTemplate) {
          listedAvailableTemplatesOnNoSuchTemplate=true;
          logAvailableTemplates(config);
        }
      }
    }
 catch (    Exception e2) {
      LOG.warn(""String_Node_Str"" + e2,e2);
      throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder+ ""String_Node_Str""+ e,e);
    }
    throw new IllegalStateException(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ ""String_Node_Str""+ e,e);
  }
  TemplateOptions options=template.getOptions();
  for (  Map.Entry<ConfigKey<?>,CustomizeTemplateOptions> entry : SUPPORTED_TEMPLATE_OPTIONS_PROPERTIES.entrySet()) {
    ConfigKey<?> key=entry.getKey();
    CustomizeTemplateOptions code=entry.getValue();
    if (config.containsKey(key))     code.apply(options,config,config.get(key));
  }
  return template;
}",0.9934621099554236
79547,"@Override public void install(){
  Maybe<Object> url=getEntity().getConfigRaw(SoftwareProcess.DOWNLOAD_URL,true);
  if (url.isPresentAndNonNull()) {
    DownloadResolver resolver=Entities.newDownloader(this);
    List<String> urls=resolver.getTargets();
    downloadedFilename=resolver.getFilename();
    List<String> commands=new LinkedList<String>();
    commands.addAll(BashCommands.commandsToDownloadUrlsAs(urls,downloadedFilename));
switch (ArchiveType.of(downloadedFilename)) {
case TAR:
case TGZ:
      commands.add(BashCommands.INSTALL_TAR);
    break;
case ZIP:
  commands.add(BashCommands.INSTALL_UNZIP);
break;
case UNKNOWN:
break;
}
newScript(INSTALLING).failOnNonZeroResultCode().environmentVariablesReset().body.append(commands).execute();
}
}","@Override public void install(){
  Maybe<Object> url=getEntity().getConfigRaw(SoftwareProcess.DOWNLOAD_URL,true);
  if (url.isPresentAndNonNull()) {
    DownloadResolver resolver=Entities.newDownloader(this);
    List<String> urls=resolver.getTargets();
    downloadedFilename=resolver.getFilename();
    List<String> commands=new LinkedList<String>();
    commands.addAll(BashCommands.commandsToDownloadUrlsAs(urls,downloadedFilename));
switch (ArchiveType.of(downloadedFilename)) {
case TAR:
case TGZ:
      commands.add(BashCommands.INSTALL_TAR);
    break;
case ZIP:
  commands.add(BashCommands.INSTALL_UNZIP);
break;
case UNKNOWN:
break;
}
newScript(INSTALLING).failOnNonZeroResultCode().environmentVariablesReset().execute();
newScript(""String_Node_Str"" + url.get()).failOnNonZeroResultCode().environmentVariablesReset().body.append(commands).execute();
}
}",0.934567901234568
79548,"@Override public void launch(){
  String command=format(""String_Node_Str"",getMonitPidFile(),expandedInstallDir,remoteControlFilePath);
  newScript(LAUNCHING).updateTaskAndFailOnNonZeroResultCode().body.append(command).execute();
}","@Override public void launch(){
  String command=format(""String_Node_Str"",getMonitPidFile(),expandedInstallDir,remoteControlFilePath,getMonitPidFile());
  newScript(MutableMap.of(""String_Node_Str"",false),LAUNCHING).updateTaskAndFailOnNonZeroResultCode().body.append(command).execute();
}",0.8897485493230174
79549,"protected String getMonitPidFile(){
  return getRunDir() + ""String_Node_Str"";
}","protected String getMonitPidFile(){
  return getRunDir() + ""String_Node_Str"" + AbstractSoftwareProcessSshDriver.PID_FILENAME;
}",0.7669902912621359
79550,"/** 
 * returns the /tmp dir, based on java.io.tmpdir but ignoring it if it's weird (e.g. /var/folders/q2/363yynwx5lb_qpch1km2xvr80000gn/T/) and /tmp exists 
 */
public static String tmp(){
  String tmpdir=System.getProperty(""String_Node_Str"");
  if (tmpdir.contains(""String_Node_Str"") && new File(""String_Node_Str"").exists())   return ""String_Node_Str"";
  return tmpdir;
}","/** 
 * returns the best tmp dir to use; see   {@link TmpDirFinder} for the logic(and the explanation why this is needed!) 
 */
public static String tmp(){
  Maybe<String> tmp=tmpdir.get();
  if (tmp.isPresent())   return tmp.get();
  tmpdir.useWithWarning(System.getProperty(""String_Node_Str""));
  return tmp.get();
}",0.2952243125904486
79551,"public static String user(){
  return System.getProperty(""String_Node_Str"");
}","/** 
 * user name 
 */
public static String user(){
  return System.getProperty(""String_Node_Str"");
}",0.8715083798882681
79552,"/** 
 * Checks if a correct error and help message is given if using incorrect application.
 */
@Test(groups=""String_Node_Str"") public void testLaunchCliAppLaunchError() throws Throwable {
  final Process brooklyn=startBrooklyn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BrooklynCliTest test=new BrooklynCliTest(brooklyn){
    @Override public void checkConsole(){
      assertConsoleOutput(""String_Node_Str"");
      assertConsoleError(""String_Node_Str"");
    }
  }
;
  testBrooklyn(brooklyn,test,2);
}","/** 
 * Checks if a correct error and help message is given if using incorrect application.
 */
@Test(groups=""String_Node_Str"") public void testLaunchCliAppLaunchError() throws Throwable {
  final String app=""String_Node_Str"";
  final Process brooklyn=startBrooklyn(""String_Node_Str"",""String_Node_Str"",app,""String_Node_Str"",""String_Node_Str"");
  BrooklynCliTest test=new BrooklynCliTest(brooklyn){
    @Override public void checkConsole(){
      assertConsoleOutput(""String_Node_Str"");
      assertConsoleError(""String_Node_Str"" + app + ""String_Node_Str"");
    }
  }
;
  testBrooklyn(brooklyn,test,2);
}",0.9273356401384084
79553,"@Override public void checkConsole(){
  assertConsoleOutput(""String_Node_Str"");
  assertConsoleError(""String_Node_Str"");
}","@Override public void checkConsole(){
  assertConsoleOutput(""String_Node_Str"");
  assertConsoleError(""String_Node_Str"" + app + ""String_Node_Str"");
}",0.9037037037037036
79554,"public void run(){
  try {
    V val=job.call();
    if (handler.checkSuccess(val)) {
      handler.onSuccess(val);
    }
 else {
      handler.onFailure(val);
    }
  }
 catch (  Exception e) {
    handler.onException(e);
  }
}","public void run(){
  try {
    V val=job.call();
    if (handler.checkSuccess(val)) {
      handler.onSuccess(val);
    }
 else {
      handler.onFailure(val);
    }
  }
 catch (  Exception e) {
    log.debug(""String_Node_Str"" + job + ""String_Node_Str""+ e+ ""String_Node_Str""+ handler);
    handler.onException(e);
  }
}",0.8336380255941499
79555,"PollJob(final Callable<V> job,final PollHandler<? super V> handler,Duration period){
  this.handler=handler;
  this.pollPeriod=period;
  wrappedJob=new Runnable(){
    public void run(){
      try {
        V val=job.call();
        if (handler.checkSuccess(val)) {
          handler.onSuccess(val);
        }
 else {
          handler.onFailure(val);
        }
      }
 catch (      Exception e) {
        handler.onException(e);
      }
    }
  }
;
}","PollJob(final Callable<V> job,final PollHandler<? super V> handler,Duration period){
  this.handler=handler;
  this.pollPeriod=period;
  wrappedJob=new Runnable(){
    public void run(){
      try {
        V val=job.call();
        if (handler.checkSuccess(val)) {
          handler.onSuccess(val);
        }
 else {
          handler.onFailure(val);
        }
      }
 catch (      Exception e) {
        log.debug(""String_Node_Str"" + job + ""String_Node_Str""+ e+ ""String_Node_Str""+ handler);
        handler.onException(e);
      }
    }
  }
;
}",0.9049049049049048
79556,"@SuppressWarnings(""String_Node_Str"") protected Task<?> submitNewScheduledTask(final Map<?,?> flags,final ScheduledTask task){
  task.submitTimeUtc=System.currentTimeMillis();
  tasksById.put(task.getId(),task);
  if (!task.isDone()) {
    task.result=delayedRunner.schedule(new Callable<Object>(){
      @SuppressWarnings(""String_Node_Str"") public Object call(){
        if (task.startTimeUtc == -1)         task.startTimeUtc=System.currentTimeMillis();
        try {
          beforeStart(flags,task);
          final TaskInternal<?> taskScheduled=(TaskInternal<?>)task.newTask();
          taskScheduled.setSubmittedByTask(task);
          final Callable<?> oldJob=taskScheduled.getJob();
          taskScheduled.setJob(new Callable(){
            public Object call(){
              task.recentRun=taskScheduled;
synchronized (task) {
                task.notifyAll();
              }
              Object result;
              try {
                result=oldJob.call();
              }
 catch (              Exception e) {
                log.warn(""String_Node_Str"" + oldJob + ""String_Node_Str""+ task.getDescription()+ ""String_Node_Str"",e);
                throw Exceptions.propagate(e);
              }
              task.runCount++;
              if (task.period != null && !task.isCancelled()) {
                task.delay=task.period;
                submitNewScheduledTask(flags,task);
              }
              return result;
            }
          }
);
          task.nextRun=taskScheduled;
          BasicExecutionContext ec=BasicExecutionContext.getCurrentExecutionContext();
          if (ec != null)           return ec.submit(taskScheduled);
 else           return submit(taskScheduled);
        }
  finally {
          afterEnd(flags,task);
        }
      }
    }
,task.delay.toNanoseconds(),TimeUnit.NANOSECONDS);
  }
 else {
    task.endTimeUtc=System.currentTimeMillis();
  }
  return task;
}","@SuppressWarnings(""String_Node_Str"") protected Task<?> submitNewScheduledTask(final Map<?,?> flags,final ScheduledTask task){
  task.submitTimeUtc=System.currentTimeMillis();
  tasksById.put(task.getId(),task);
  if (!task.isDone()) {
    task.result=delayedRunner.schedule(new Callable<Object>(){
      @SuppressWarnings(""String_Node_Str"") public Object call(){
        if (task.startTimeUtc == -1)         task.startTimeUtc=System.currentTimeMillis();
        try {
          beforeStart(flags,task);
          final TaskInternal<?> taskScheduled=(TaskInternal<?>)task.newTask();
          taskScheduled.setSubmittedByTask(task);
          final Callable<?> oldJob=taskScheduled.getJob();
          taskScheduled.setJob(new Callable(){
            public Object call(){
              task.recentRun=taskScheduled;
synchronized (task) {
                task.notifyAll();
              }
              Object result;
              try {
                result=oldJob.call();
              }
 catch (              Exception e) {
                log.warn(""String_Node_Str"" + oldJob + ""String_Node_Str""+ task+ ""String_Node_Str""+ task.getDescription()+ ""String_Node_Str"",e);
                throw Exceptions.propagate(e);
              }
              task.runCount++;
              if (task.period != null && !task.isCancelled()) {
                task.delay=task.period;
                submitNewScheduledTask(flags,task);
              }
              return result;
            }
          }
);
          task.nextRun=taskScheduled;
          BasicExecutionContext ec=BasicExecutionContext.getCurrentExecutionContext();
          if (ec != null)           return ec.submit(taskScheduled);
 else           return submit(taskScheduled);
        }
  finally {
          afterEnd(flags,task);
        }
      }
    }
,task.delay.toNanoseconds(),TimeUnit.NANOSECONDS);
  }
 else {
    task.endTimeUtc=System.currentTimeMillis();
  }
  return task;
}",0.993528345845198
79557,"@Override public void customize(){
  DynamicTasks.queue(SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str""))).get();
  newScript(CUSTOMIZING).body.append(sudo(""String_Node_Str"" + getDataDir()),sudo(""String_Node_Str"" + getDataDir()),sudo(""String_Node_Str"" + getDataDir()),sudo(""String_Node_Str"" + getLogFile()),sudo(""String_Node_Str"" + getLogFile()),sudo(""String_Node_Str"" + getPidFile()),sudo(""String_Node_Str"" + getPidFile()),callPgctl(""String_Node_Str"",true)).failOnNonZeroResultCode().execute();
  String configUrl=getEntity().getConfig(PostgreSqlNode.CONFIGURATION_FILE_URL);
  if (Strings.isBlank(configUrl)) {
    DynamicTasks.queue(SshEffectorTasks.ssh(executeCommandThenAsUserTeeOutputToFile(chainGroup(""String_Node_Str"",""String_Node_Str"" + getEntity().getPostgreSqlPort() + ""String_Node_Str"",""String_Node_Str"" + getEntity().getMaxConnections() + ""String_Node_Str"",""String_Node_Str"" + getEntity().getSharedMemory() + ""String_Node_Str"",""String_Node_Str"" + getRunDir() + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"",getDataDir() + ""String_Node_Str"")));
  }
 else {
    String contents=processTemplate(configUrl);
    DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(contents),SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str"" + getDataDir() + ""String_Node_Str"")));
  }
  String authConfigUrl=getEntity().getConfig(PostgreSqlNode.AUTHENTICATION_CONFIGURATION_FILE_URL);
  if (Strings.isBlank(authConfigUrl)) {
    DynamicTasks.queue(SshEffectorTasks.ssh(executeCommandThenAsUserTeeOutputToFile(""String_Node_Str"",""String_Node_Str"",getDataDir() + ""String_Node_Str"")));
  }
 else {
    String contents=processTemplate(authConfigUrl);
    DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(contents),SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str"" + getDataDir() + ""String_Node_Str"")));
  }
  DynamicTasks.waitForLast();
  executeDatabaseCreationScript();
}","@Override public void customize(){
  DynamicTasks.queue(SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str""))).get();
  newScript(CUSTOMIZING).body.append(sudo(""String_Node_Str"" + getDataDir()),sudo(""String_Node_Str"" + getDataDir()),sudo(""String_Node_Str"" + getDataDir()),sudo(""String_Node_Str"" + getLogFile()),sudo(""String_Node_Str"" + getLogFile()),sudo(""String_Node_Str"" + getPidFile()),sudo(""String_Node_Str"" + getPidFile()),alternativesGroup(chainGroup(format(""String_Node_Str"",getInstallDir() + ""String_Node_Str""),sudoAsUser(""String_Node_Str"",getInstallDir() + ""String_Node_Str"" + getDataDir())),callPgctl(""String_Node_Str"",true))).failOnNonZeroResultCode().execute();
  String configUrl=getEntity().getConfig(PostgreSqlNode.CONFIGURATION_FILE_URL);
  if (Strings.isBlank(configUrl)) {
    DynamicTasks.queue(SshEffectorTasks.ssh(executeCommandThenAsUserTeeOutputToFile(chainGroup(""String_Node_Str"",""String_Node_Str"" + getEntity().getPostgreSqlPort() + ""String_Node_Str"",""String_Node_Str"" + getEntity().getMaxConnections() + ""String_Node_Str"",""String_Node_Str"" + getEntity().getSharedMemory() + ""String_Node_Str"",""String_Node_Str"" + getPidFile() + ""String_Node_Str""),""String_Node_Str"",getDataDir() + ""String_Node_Str"")));
  }
 else {
    String contents=processTemplate(configUrl);
    DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(contents),SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str"" + getDataDir() + ""String_Node_Str"")));
  }
  String authConfigUrl=getEntity().getConfig(PostgreSqlNode.AUTHENTICATION_CONFIGURATION_FILE_URL);
  if (Strings.isBlank(authConfigUrl)) {
    DynamicTasks.queue(SshEffectorTasks.ssh(executeCommandThenAsUserTeeOutputToFile(""String_Node_Str"",""String_Node_Str"",getDataDir() + ""String_Node_Str"")));
  }
 else {
    String contents=processTemplate(authConfigUrl);
    DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(contents),SshEffectorTasks.ssh(sudoAsUser(""String_Node_Str"",""String_Node_Str"" + getDataDir() + ""String_Node_Str"")));
  }
  DynamicTasks.waitForLast();
  executeDatabaseCreationScript();
}",0.9479882237487732
79558,"public String configFile(){
  String templateUrl=driver.getEntity().getConfig(NginxController.SERVER_CONF_TEMPLATE_URL);
  ResourceUtils.create(this).checkUrlExists(templateUrl);
  ProxySslConfig ssl=driver.getEntity().getConfig(NginxController.SSL_CONFIG);
  if (ssl != null && Strings.isEmpty(ssl.getCertificateDestination()) && Strings.isEmpty(ssl.getCertificateSourceUrl())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Iterable<UrlMapping> mappings=((NginxController)driver.getEntity()).getUrlMappings();
  Multimap<String,UrlMapping> mappingsByDomain=LinkedHashMultimap.create();
  for (  UrlMapping mapping : mappings) {
    Collection<String> addrs=mapping.getAttribute(UrlMapping.TARGET_ADDRESSES);
    if (addrs != null && addrs.size() > 0) {
      mappingsByDomain.put(mapping.getDomain(),mapping);
    }
  }
  Map<String,Object> substitutions=MutableMap.<String,Object>of(""String_Node_Str"",ssl,""String_Node_Str"",mappings,""String_Node_Str"",mappingsByDomain);
  String contents=ResourceUtils.create(driver.getEntity()).getResourceAsString(templateUrl);
  return TemplateProcessor.processTemplateContents(contents,driver,substitutions);
}","public String configFile(){
  String templateUrl=driver.getEntity().getConfig(NginxController.SERVER_CONF_TEMPLATE_URL);
  ResourceUtils.create(this).checkUrlExists(templateUrl);
  ProxySslConfig ssl=driver.getEntity().getConfig(NginxController.SSL_CONFIG);
  if (ssl != null && Strings.isEmpty(ssl.getCertificateDestination()) && Strings.isEmpty(ssl.getCertificateSourceUrl())) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Iterable<UrlMapping> mappings=((NginxController)driver.getEntity()).getUrlMappings();
  Multimap<String,UrlMapping> mappingsByDomain=LinkedHashMultimap.create();
  for (  UrlMapping mapping : mappings) {
    Collection<String> addrs=mapping.getAttribute(UrlMapping.TARGET_ADDRESSES);
    if (addrs != null && addrs.size() > 0) {
      mappingsByDomain.put(mapping.getDomain(),mapping);
    }
  }
  MutableMap.Builder<String,Object> builder=MutableMap.<String,Object>builder().put(""String_Node_Str"",mappings).put(""String_Node_Str"",mappingsByDomain);
  if (ssl != null)   builder.put(""String_Node_Str"",ssl);
  Map<String,Object> substitutions=builder.build();
  String contents=ResourceUtils.create(driver.getEntity()).getResourceAsString(templateUrl);
  return TemplateProcessor.processTemplateContents(contents,driver,substitutions);
}",0.9148936170212766
79559,"@Test(dependsOnMethods=""String_Node_Str"") public void testReadEachSensor(){
  Set<SensorSummary> sensors=client().resource(""String_Node_Str"").get(new GenericType<Set<SensorSummary>>(){
  }
);
  Map<String,String> readings=Maps.newHashMap();
  for (  SensorSummary sensor : sensors) {
    readings.put(sensor.getName(),client().resource(sensor.getLinks().get(""String_Node_Str"")).get(String.class));
  }
  assertEquals(readings.get(RestMockSimpleEntity.SAMPLE_SENSOR.getName()),""String_Node_Str"");
}","@Test(dependsOnMethods=""String_Node_Str"") public void testReadEachSensor(){
  Set<SensorSummary> sensors=client().resource(""String_Node_Str"").get(new GenericType<Set<SensorSummary>>(){
  }
);
  Map<String,String> readings=Maps.newHashMap();
  for (  SensorSummary sensor : sensors) {
    try {
      readings.put(sensor.getName(),client().resource(sensor.getLinks().get(""String_Node_Str"")).get(String.class));
    }
 catch (    UniformInterfaceException uie) {
      if (uie.getResponse().getStatus() == 204) {
        readings.put(sensor.getName(),null);
      }
 else {
        Exceptions.propagate(uie);
      }
    }
  }
  assertEquals(readings.get(RestMockSimpleEntity.SAMPLE_SENSOR.getName()),""String_Node_Str"");
}",0.8167625308134757
79560,"/** 
 * creates a task which returns modifies sudoers to ensure non-tty access is permitted; also gives nice warnings if sudo is not permitted 
 */
public static ProcessTaskFactory<Boolean> dontRequireTtyForSudo(SshMachineLocation machine,final boolean requireSuccess){
  return newSshExecTaskFactory(machine,BashCommands.dontRequireTtyForSudo()).summary(""String_Node_Str"").configure(SshTool.PROP_ALLOCATE_PTY,true).allowingNonZeroExitCode().returning(new Function<ProcessTaskWrapper<?>,Boolean>(){
    public Boolean apply(    ProcessTaskWrapper<?> task){
      if (task.getExitCode() == 0)       return true;
      Entity entity=BrooklynTasks.getTargetOrContextEntity(Tasks.current());
      log.warn(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ ""String_Node_Str""+ ""String_Node_Str""+ task.getExitCode()+ (entity != null ? ""String_Node_Str"" + entity : ""String_Node_Str"")+ ""String_Node_Str"");
      Streams.logStreamTail(log,""String_Node_Str"",Streams.byteArrayOfString(task.getStderr()),1024);
      if (requireSuccess) {
        throw new IllegalStateException(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ (entity != null ? ""String_Node_Str"" + entity + ""String_Node_Str"" : ""String_Node_Str""));
      }
      return true;
    }
  }
);
}","/** 
 * creates a task which returns modifies sudoers to ensure non-tty access is permitted; also gives nice warnings if sudo is not permitted 
 */
public static ProcessTaskFactory<Boolean> dontRequireTtyForSudo(SshMachineLocation machine,final boolean requireSuccess){
  final String id=Identifiers.makeRandomId(6);
  return newSshExecTaskFactory(machine,BashCommands.dontRequireTtyForSudo(),BashCommands.sudo(""String_Node_Str"" + id)).summary(""String_Node_Str"").configure(SshTool.PROP_ALLOCATE_PTY,true).allowingNonZeroExitCode().returning(new Function<ProcessTaskWrapper<?>,Boolean>(){
    public Boolean apply(    ProcessTaskWrapper<?> task){
      if (task.getExitCode() == 0 && task.getStdout().contains(""String_Node_Str"" + id))       return true;
      Entity entity=BrooklynTasks.getTargetOrContextEntity(Tasks.current());
      log.warn(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ ""String_Node_Str""+ ""String_Node_Str""+ task.getExitCode()+ (entity != null ? ""String_Node_Str"" + entity : ""String_Node_Str"")+ ""String_Node_Str"");
      Streams.logStreamTail(log,""String_Node_Str"",Streams.byteArrayOfString(task.getStderr()),1024);
      if (requireSuccess) {
        throw new IllegalStateException(""String_Node_Str"" + task.getMachine().getUser() + ""String_Node_Str""+ task.getMachine().getAddress().getHostName()+ (entity != null ? ""String_Node_Str"" + entity + ""String_Node_Str"" : ""String_Node_Str""));
      }
      return true;
    }
  }
);
}",0.9509329647546648
79561,"public static void main(String... argv) throws Exception {
  Preconditions.checkElementIndex(0,argv.length,""String_Node_Str"");
  String url=argv[0];
  System.setProperty(ClientProperties.AMQP_VERSION,""String_Node_Str"");
  System.setProperty(ClientProperties.DEST_SYNTAX,""String_Node_Str"");
  AMQConnectionFactory factory=new AMQConnectionFactory(url);
  Connection connection=factory.createConnection();
  connection.start();
  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
  System.out.printf(""String_Node_Str"",MESSAGE_TIMEOUT_MILLIS,MESSAGE_COUNT);
  try {
    Queue destination=session.createQueue(QUEUE);
    MessageConsumer messageConsumer=session.createConsumer(destination);
    int n=MESSAGE_COUNT;
    do {
      TextMessage msg=(TextMessage)messageConsumer.receive(MESSAGE_TIMEOUT_MILLIS);
      if (msg == null)       break;
      System.out.printf(""String_Node_Str"",msg.getText());
    }
 while (n-- > 0);
  }
 catch (  Exception e) {
    System.err.printf(""String_Node_Str"",e.getMessage());
    System.err.printf(""String_Node_Str"",Throwables.getStackTraceAsString(e));
  }
 finally {
    session.close();
    connection.close();
  }
}","public static void main(String... argv) throws Exception {
  Preconditions.checkElementIndex(0,argv.length,""String_Node_Str"");
  String url=argv[0];
  System.setProperty(ClientProperties.AMQP_VERSION,""String_Node_Str"");
  System.setProperty(ClientProperties.DEST_SYNTAX,""String_Node_Str"");
  AMQConnectionFactory factory=new AMQConnectionFactory(url);
  Connection connection=factory.createConnection();
  connection.start();
  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
  System.out.printf(""String_Node_Str"",MESSAGE_TIMEOUT_MILLIS,MESSAGE_COUNT);
  try {
    Queue destination=session.createQueue(QUEUE);
    MessageConsumer messageConsumer=session.createConsumer(destination);
    int n=MESSAGE_COUNT;
    do {
      TextMessage msg=(TextMessage)messageConsumer.receive(MESSAGE_TIMEOUT_MILLIS);
      if (msg == null)       break;
      System.out.printf(""String_Node_Str"",msg.getText());
    }
 while (--n > 0);
  }
 catch (  Exception e) {
    System.err.printf(""String_Node_Str"",e.getMessage());
    System.err.printf(""String_Node_Str"",Throwables.getStackTraceAsString(e));
  }
 finally {
    session.close();
    connection.close();
  }
}",0.9991489361702128
79562,"@Override public Void call(ConfigBag parameters){
  String cassandraHostname=cassandra.getAttribute(CassandraCluster.HOSTNAME);
  Integer cassandraThriftPort=cassandra.getAttribute(CassandraCluster.THRIFT_PORT);
  HostAndPort current=HostAndPort.fromParts(cassandraHostname,cassandraThriftPort);
  if (!current.equals(cassandraCluster)) {
    cassandraCluster=current;
    Map<String,Object> config=MutableMap.<String,Object>of(""String_Node_Str"",cassandraHostname,""String_Node_Str"",cassandraThriftPort);
    String cumulusYaml=TemplateProcessor.processTemplateContents(new ResourceUtils(this).getResourceAsString(""String_Node_Str""),config);
    DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(cumulusYaml));
  }
  return null;
}","@Override public Void call(ConfigBag parameters){
  String hostname=cassandra.getAttribute(CassandraCluster.HOSTNAME);
  Integer thriftPort=cassandra.getAttribute(CassandraCluster.THRIFT_PORT);
  HostAndPort currentEndpoint=HostAndPort.fromParts(hostname,thriftPort);
  if (!currentEndpoint.equals(clusterEndpoint)) {
    log.info(""String_Node_Str"",currentEndpoint.toString());
    clusterEndpoint=currentEndpoint;
    String url=Entities.getRequiredUrlConfig(CumulusRDFApplication.this,CUMULUS_RDF_CONFIG_URL);
    Map<String,Object> config=MutableMap.<String,Object>of(""String_Node_Str"",clusterEndpoint.getHostText(),""String_Node_Str"",clusterEndpoint.getPort());
    String contents=TemplateProcessor.processTemplateContents(new ResourceUtils(this).getResourceAsString(url),config);
    DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(contents));
  }
  return null;
}",0.7330482590103848
79563,"/** 
 * Create entities. 
 */
public void init(){
  cassandra=addChild(EntitySpec.create(CassandraCluster.class).configure(""String_Node_Str"",getConfig(CASSANDRA_CLUSTER_SIZE)).configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",UsesJmx.JmxAgentModes.JMX_RMI_CUSTOM_AGENT).configure(""String_Node_Str"",getConfig(CASSANDRA_THRIFT_PORT)));
  tomcat=addChild(EntitySpec.create(TomcatServer.class).configure(""String_Node_Str"",UsesJmx.JmxAgentModes.JMX_RMI_CUSTOM_AGENT).configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",MutableMap.of(""String_Node_Str"",Entities.getRequiredUrlConfig(this,CUMULUS_RDF_CONFIG_URL))));
  configure=Effectors.effector(configure).impl(new EffectorBody<Void>(){
    private HostAndPort cassandraCluster;
    @Override public Void call(    ConfigBag parameters){
      String cassandraHostname=cassandra.getAttribute(CassandraCluster.HOSTNAME);
      Integer cassandraThriftPort=cassandra.getAttribute(CassandraCluster.THRIFT_PORT);
      HostAndPort current=HostAndPort.fromParts(cassandraHostname,cassandraThriftPort);
      if (!current.equals(cassandraCluster)) {
        cassandraCluster=current;
        Map<String,Object> config=MutableMap.<String,Object>of(""String_Node_Str"",cassandraHostname,""String_Node_Str"",cassandraThriftPort);
        String cumulusYaml=TemplateProcessor.processTemplateContents(new ResourceUtils(this).getResourceAsString(""String_Node_Str""),config);
        DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(cumulusYaml));
      }
      return null;
    }
  }
).build();
  ((EntityInternal)tomcat).getMutableEntityType().addEffector(configure);
  subscribe(cassandra,CassandraCluster.HOSTNAME,new SensorEventListener<String>(){
    @Override public void onEvent(    SensorEvent<String> event){
      tomcat.invoke(configure,MutableMap.<String,Object>of());
      if (tomcat.getAttribute(Startable.SERVICE_UP)) {
        tomcat.restart();
      }
    }
  }
);
}","/** 
 * Create entities. 
 */
public void init(){
  cassandra=addChild(EntitySpec.create(CassandraCluster.class).configure(""String_Node_Str"",getConfig(CASSANDRA_CLUSTER_SIZE)).configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",EntitySpec.create(CassandraNode.class).configure(""String_Node_Str"",UsesJmx.JmxAgentModes.JMX_RMI_CUSTOM_AGENT).configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",getConfig(CASSANDRA_THRIFT_PORT))));
  tomcat=addChild(EntitySpec.create(TomcatServer.class).configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",UsesJmx.JmxAgentModes.JMX_RMI_CUSTOM_AGENT).configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",""String_Node_Str"").configure(""String_Node_Str"",MutableMap.of(""String_Node_Str"",""String_Node_Str"")));
  ((EntityInternal)tomcat).getMutableEntityType().addEffector(cumulusConfig,new EffectorBody<Void>(){
    private HostAndPort clusterEndpoint;
    @Override public Void call(    ConfigBag parameters){
      String hostname=cassandra.getAttribute(CassandraCluster.HOSTNAME);
      Integer thriftPort=cassandra.getAttribute(CassandraCluster.THRIFT_PORT);
      HostAndPort currentEndpoint=HostAndPort.fromParts(hostname,thriftPort);
      if (!currentEndpoint.equals(clusterEndpoint)) {
        log.info(""String_Node_Str"",currentEndpoint.toString());
        clusterEndpoint=currentEndpoint;
        String url=Entities.getRequiredUrlConfig(CumulusRDFApplication.this,CUMULUS_RDF_CONFIG_URL);
        Map<String,Object> config=MutableMap.<String,Object>of(""String_Node_Str"",clusterEndpoint.getHostText(),""String_Node_Str"",clusterEndpoint.getPort());
        String contents=TemplateProcessor.processTemplateContents(new ResourceUtils(this).getResourceAsString(url),config);
        DynamicTasks.queue(SshEffectorTasks.put(""String_Node_Str"").contents(contents));
      }
      return null;
    }
  }
);
  subscribe(cassandra,CassandraCluster.HOSTNAME,new SensorEventListener<String>(){
    @Override public void onEvent(    SensorEvent<String> event){
      tomcat.invoke(cumulusConfig,MutableMap.<String,Object>of());
      if (tomcat.getAttribute(Startable.SERVICE_UP)) {
        tomcat.restart();
      }
    }
  }
);
}",0.7580789946140036
79564,"@Override public void onEvent(SensorEvent<String> event){
  tomcat.invoke(configure,MutableMap.<String,Object>of());
  if (tomcat.getAttribute(Startable.SERVICE_UP)) {
    tomcat.restart();
  }
}","@Override public void onEvent(SensorEvent<String> event){
  tomcat.invoke(cumulusConfig,MutableMap.<String,Object>of());
  if (tomcat.getAttribute(Startable.SERVICE_UP)) {
    tomcat.restart();
  }
}",0.9746192893401016
79565,"@SuppressWarnings(""String_Node_Str"") @Test(groups=""String_Node_Str"") public void testJCloudsNamedSingle() throws Exception {
  location=(SingleMachineProvisioningLocation<SshMachineLocation>)managementContext.getLocationRegistry().resolve(""String_Node_Str"");
  location.setManagementContext(managementContext);
  SshMachineLocation m1=(SshMachineLocation)location.obtain();
  machinesToTearDown.add(m1);
  location.release(m1);
}","@SuppressWarnings(""String_Node_Str"") @Test(groups=""String_Node_Str"") public void testJCloudsNamedSingle() throws Exception {
  location=(SingleMachineProvisioningLocation<SshMachineLocation>)managementContext.getLocationRegistry().resolve(""String_Node_Str"");
  location.setManagementContext(managementContext);
  SshMachineLocation m1=(SshMachineLocation)location.obtain();
  machinesToTearDown.add(m1);
}",0.9712230215827338
79566,"@SuppressWarnings(""String_Node_Str"") @AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  Set<Exception> exceptions=Sets.newHashSet();
  for (  MachineLocation machineLocation : machinesToTearDown) {
    try {
      location.release(machineLocation);
    }
 catch (    Exception e) {
      exceptions.add(e);
    }
  }
  if (managementContext != null)   managementContext.terminate();
  if (!exceptions.isEmpty()) {
    throw new CompoundRuntimeException(""String_Node_Str"",exceptions);
  }
}","@SuppressWarnings(""String_Node_Str"") @AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  Set<Exception> exceptions=Sets.newHashSet();
  for (  MachineLocation machineLocation : machinesToTearDown) {
    try {
      if (location.getChildren().contains(machineLocation))       location.release(machineLocation);
    }
 catch (    Exception e) {
      exceptions.add(e);
    }
  }
  if (managementContext != null)   managementContext.terminate();
  if (!exceptions.isEmpty()) {
    throw new CompoundRuntimeException(""String_Node_Str"",exceptions);
  }
}",0.944547134935305
79567,"@SuppressWarnings(""String_Node_Str"") @Test(groups=""String_Node_Str"") public void testJcloudsSingle() throws Exception {
  location=(SingleMachineProvisioningLocation<MachineLocation>)managementContext.getLocationRegistry().resolve(""String_Node_Str"");
  location.setManagementContext(managementContext);
  MachineLocation m1=location.obtain();
  assertNotNull(m1);
  log.info(""String_Node_Str"" + m1);
  location.release(m1);
}","@SuppressWarnings(""String_Node_Str"") @Test(groups=""String_Node_Str"") public void testJcloudsSingle() throws Exception {
  location=(SingleMachineProvisioningLocation<MachineLocation>)managementContext.getLocationRegistry().resolve(""String_Node_Str"");
  location.setManagementContext(managementContext);
  MachineLocation m1=location.obtain();
  machinesToTearDown.add(m1);
  assertNotNull(m1);
  log.info(""String_Node_Str"" + m1);
}",0.9369158878504672
79568,"@Override public Class getDriverInterface(){
  return EmptySoftwareProcessDriver.class;
}","@Override public Class<?> getDriverInterface(){
  return EmptySoftwareProcessDriver.class;
}",0.9834254143646408
79569,"public void onServiceUpChanged(Entity member,Boolean serviceUp){
  Set<Entity> seeds=getSeeds();
  int quorum=getQuorumSize();
  boolean isViable=isViableSeed(member);
  boolean maybeAdd=isViable && seeds.size() < quorum;
  boolean maybeRemove=seeds.contains(member) && !isViable;
  if (maybeAdd || maybeRemove) {
    refreshSeeds();
  }
 else {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",new Object[]{CassandraClusterImpl.this,member,serviceUp});
    return;
  }
  Supplier<Set<Entity>> seedSupplier=getSeedSupplier();
  setAttribute(CURRENT_SEEDS,seedSupplier.get());
}","public void onServiceUpChanged(Entity member,Boolean serviceUp){
  Set<Entity> seeds=getSeeds();
  int quorum=getQuorumSize();
  boolean isViable=isViableSeed(member);
  boolean maybeAdd=isViable && seeds.size() < quorum;
  boolean maybeRemove=seeds.contains(member) && !isViable;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + CassandraClusterImpl.this + ""String_Node_Str""+ member+ ""String_Node_Str""+ serviceUp+ ""String_Node_Str""+ isViable+ ""String_Node_Str""+ maybeAdd+ ""String_Node_Str""+ maybeRemove+ ""String_Node_Str"");
  if (maybeAdd || maybeRemove) {
    refreshSeeds();
  }
 else {
    if (log.isTraceEnabled())     log.trace(""String_Node_Str"",new Object[]{CassandraClusterImpl.this,member,serviceUp});
    return;
  }
  Supplier<Set<Entity>> seedSupplier=getSeedSupplier();
  Set<Entity> newSeeds=seedSupplier.get();
  setAttribute(CURRENT_SEEDS,newSeeds);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + CassandraClusterImpl.this + ""String_Node_Str""+ newSeeds);
}",0.7213114754098361
79570,"@Test public void testUpdatesSeedsOnFailuresAndAdditions() throws Exception {
  cluster=app.createAndManageChild(EntitySpec.create(CassandraCluster.class).configure(CassandraCluster.INITIAL_SIZE,2).configure(CassandraCluster.DELAY_BEFORE_ADVERTISING_CLUSTER,Duration.ZERO).configure(CassandraCluster.MEMBER_SPEC,EntitySpec.create(EmptySoftwareProcess.class)));
  app.start(ImmutableList.of(loc));
  EmptySoftwareProcess e1=(EmptySoftwareProcess)Iterables.get(cluster.getMembers(),0);
  EmptySoftwareProcess e2=(EmptySoftwareProcess)Iterables.get(cluster.getMembers(),1);
  EntityTestUtils.assertAttributeEqualsEventually(cluster,CassandraCluster.CURRENT_SEEDS,ImmutableSet.<Entity>of(e1,e2));
  ((EntityInternal)e1).setAttribute(Attributes.SERVICE_UP,false);
  EntityTestUtils.assertAttributeEqualsEventually(cluster,CassandraCluster.CURRENT_SEEDS,ImmutableSet.<Entity>of(e2));
  cluster.resize(3);
  EmptySoftwareProcess e3=(EmptySoftwareProcess)Iterables.getOnlyElement(Sets.difference(ImmutableSet.copyOf(cluster.getMembers()),ImmutableSet.of(e1,e2)));
  EntityTestUtils.assertAttributeEqualsEventually(cluster,CassandraCluster.CURRENT_SEEDS,ImmutableSet.<Entity>of(e2,e3));
}","@Test public void testUpdatesSeedsOnFailuresAndAdditions() throws Exception {
  doTestUpdatesSeedsOnFailuresAndAdditions(true,false);
}",0.1552511415525114
79571,"@AfterClass public void tearDown() throws Exception {
  super.tearDownJersey();
  stopManager();
}","@AfterClass public void tearDown() throws Exception {
  super.tearDownJersey();
}",0.905027932960894
79572,"@AfterClass public void tearDown() throws Exception {
  super.tearDownJersey();
  stopManager();
}","@AfterClass public void tearDown() throws Exception {
  super.tearDownJersey();
}",0.905027932960894
79573,"@Override protected void connectSensors(){
  super.connectSensors();
  FunctionSensorAdapter serviceUpAdapter=sensorRegistry.register(new FunctionSensorAdapter(MutableMap.of(""String_Node_Str"",10 * 1000),new Callable<Boolean>(){
    @Override public Boolean call(){
      return getDriver().isRunning();
    }
  }
));
}","@Override protected void connectSensors(){
  super.connectSensors();
  super.connectServiceUpIsRunning();
}",0.4564705882352941
79574,"public JMXConnectorServer startServer(Properties properties){
  try {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    final int rmiPort=Integer.parseInt(System.getProperty(RMI_REGISTRY_PORT_PROPERTY,RMI_REGISTRY_DEFAULT_PORT));
    final int jmxPort=Integer.parseInt(System.getProperty(JMX_SERVER_PORT_PROPERTY,JMX_SERVER_DEFAULT_PORT));
    LocateRegistry.createRegistry(jmxPort);
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    Map<String,Object> env=new LinkedHashMap<String,Object>();
    propagate(properties,env,JMX_SERVER_ADDRESS_WILDCARD_PROPERTY,""String_Node_Str"");
    final String hostname=getLocalhostHostname(properties);
    JMXServiceURL url=new JMXServiceURL(""String_Node_Str"" + hostname + ""String_Node_Str""+ jmxPort+ ""String_Node_Str""+ hostname+ ""String_Node_Str""+ jmxPort+ ""String_Node_Str"");
    JMXConnectorServer connector=JMXConnectorServerFactory.newJMXConnectorServer(url,env,mbs);
    connector.start();
    System.out.println(""String_Node_Str"" + url);
    return connector;
  }
 catch (  RuntimeException e) {
    System.err.println(""String_Node_Str"" + e);
    throw e;
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    throw new RuntimeException(e);
  }
}","public JMXConnectorServer startServer(Properties properties){
  try {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    final int rmiPort=Integer.parseInt(System.getProperty(RMI_REGISTRY_PORT_PROPERTY,RMI_REGISTRY_DEFAULT_PORT));
    final int jmxPort=Integer.parseInt(System.getProperty(JMX_SERVER_PORT_PROPERTY,JMX_SERVER_DEFAULT_PORT));
    final String hostname=getLocalhostHostname(properties);
    System.out.println(""String_Node_Str"" + hostname + ""String_Node_Str""+ rmiPort+ ""String_Node_Str""+ jmxPort);
    LocateRegistry.createRegistry(rmiPort);
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    Map<String,Object> env=new LinkedHashMap<String,Object>();
    propagate(properties,env,JMX_SERVER_ADDRESS_WILDCARD_PROPERTY,""String_Node_Str"");
    JMXServiceURL url=new JMXServiceURL(""String_Node_Str"" + hostname + ""String_Node_Str""+ jmxPort+ ""String_Node_Str""+ hostname+ ""String_Node_Str""+ rmiPort+ ""String_Node_Str"");
    JMXConnectorServer connector=JMXConnectorServerFactory.newJMXConnectorServer(url,env,mbs);
    connector.start();
    System.out.println(""String_Node_Str"" + url);
    return connector;
  }
 catch (  RuntimeException e) {
    System.err.println(""String_Node_Str"" + e);
    throw e;
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e);
    throw new RuntimeException(e);
  }
}",0.889144610663598
79575,"private String getLocalhostHostname(Properties properties) throws UnknownHostException {
  String hostname=properties == null ? null : properties.getProperty(RMI_HOSTNAME_PROPERTY);
  if (hostname == null || hostname.isEmpty()) {
    hostname=InetAddress.getLocalHost().getHostName();
  }
  return hostname;
}","private String getLocalhostHostname(Properties properties) throws UnknownHostException {
  String hostname=properties == null ? null : properties.getProperty(RMI_HOSTNAME_PROPERTY);
  if (""String_Node_Str"".equals(hostname)) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  if (hostname == null || hostname.isEmpty()) {
    hostname=InetAddress.getLocalHost().getHostName();
  }
  return hostname;
}",0.8251001335113485
79576,"/** 
 * causes all scanning-based classpaths to scan the classpaths (but does _not_ load all JARs) 
 */
synchronized void load(){
  if (classpath == null)   return;
  if (classpath.getEntries() == null)   urls=new URL[0];
 else {
    urls=new URL[classpath.getEntries().size()];
    for (int i=0; i < urls.length; i++) {
      try {
        urls[i]=new URL(classpath.getEntries().get(i));
      }
 catch (      MalformedURLException e) {
        log.error(""String_Node_Str"" + classpath.getEntries().get(i) + ""String_Node_Str""+ catalog+ ""String_Node_Str"");
        throw Exceptions.propagate(e);
      }
    }
  }
  String prefix=null;
  if (scanMode == null || scanMode == CatalogScanningModes.NONE)   return;
  Stopwatch timer=new Stopwatch().start();
  ReflectionScanner scanner=null;
  if (!catalog.isLocal()) {
    log.warn(""String_Node_Str"" + catalog);
  }
 else   if (classpath.getEntries() == null || classpath.getEntries().isEmpty()) {
    if (!catalog.isLocal()) {
      log.warn(""String_Node_Str"" + catalog);
    }
 else {
      ClassLoader baseCL=null;
      Iterable<URL> baseCP=null;
      if (catalog.mgmt instanceof ManagementContextInternal) {
        baseCL=((ManagementContextInternal)catalog.mgmt).getBaseClassLoader();
        baseCP=((ManagementContextInternal)catalog.mgmt).getBaseClassPathForScanning();
      }
      scanner=new ReflectionScanner(baseCL,catalog.getRootClassLoader(),baseCP,prefix);
      if (scanner.getSubTypesOf(Entity.class).isEmpty()) {
        try {
          ((ManagementContextInternal)catalog.mgmt).setBaseClassPathForScanning(ClasspathHelper.forJavaClassPath());
          log.debug(""String_Node_Str"");
          baseCP=((ManagementContextInternal)catalog.mgmt).getBaseClassPathForScanning();
          scanner=new ReflectionScanner(baseCL,catalog.getRootClassLoader(),baseCP,prefix);
        }
 catch (        Exception e) {
          log.info(""String_Node_Str"" + baseCP + ""String_Node_Str"");
          Exceptions.propagateIfFatal(e);
        }
      }
    }
  }
 else {
    scanner=new ReflectionScanner(getLocalClassLoader(),catalog.getRootClassLoader(),null,prefix);
  }
  if (scanner != null) {
    int count=0, countApps=0;
    if (scanMode == CatalogScanningModes.ANNOTATIONS) {
      Set<Class<?>> catalogClasses=scanner.getTypesAnnotatedWith(Catalog.class);
      for (      Class<?> c : catalogClasses) {
        try {
          CatalogItem<?> item=addCatalogEntry(c);
          count++;
          if (CatalogTemplateItemDto.class.isInstance(item))           countApps++;
        }
 catch (        Exception e) {
          log.warn(""String_Node_Str"" + c + ""String_Node_Str"",e);
        }
      }
    }
 else     if (scanMode == CatalogScanningModes.TYPES) {
      Iterable<Class<?>> entities=this.excludeInvalidClasses(Iterables.concat(scanner.getSubTypesOf(Entity.class),scanner.getSubTypesOf(Application.class),scanner.getSubTypesOf(ApplicationBuilder.class)));
      for (      Class<?> c : entities) {
        if (Application.class.isAssignableFrom(c) || ApplicationBuilder.class.isAssignableFrom(c)) {
          addCatalogEntry(new CatalogTemplateItemDto(),c);
          countApps++;
        }
 else {
          addCatalogEntry(new CatalogEntityItemDto(),c);
        }
        count++;
      }
      Iterable<Class<? extends Policy>> policies=this.excludeInvalidClasses(scanner.getSubTypesOf(Policy.class));
      for (      Class<?> c : policies) {
        addCatalogEntry(new CatalogPolicyItemDto(),c);
        count++;
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + scanMode + ""String_Node_Str""+ this);
    }
    log.info(""String_Node_Str"" + catalog.dto.name + ""String_Node_Str""+ count+ ""String_Node_Str""+ countApps+ ""String_Node_Str""+ Time.makeTimeStringRounded(timer));
  }
  isLoaded=true;
}","/** 
 * causes all scanning-based classpaths to scan the classpaths (but does _not_ load all JARs) 
 */
synchronized void load(){
  if (classpath == null)   return;
  if (classpath.getEntries() == null)   urls=new URL[0];
 else {
    urls=new URL[classpath.getEntries().size()];
    for (int i=0; i < urls.length; i++) {
      try {
        urls[i]=new URL(classpath.getEntries().get(i));
      }
 catch (      MalformedURLException e) {
        log.error(""String_Node_Str"" + classpath.getEntries().get(i) + ""String_Node_Str""+ catalog+ ""String_Node_Str"");
        throw Exceptions.propagate(e);
      }
    }
  }
  String prefix=null;
  if (scanMode == null || scanMode == CatalogScanningModes.NONE)   return;
  Stopwatch timer=new Stopwatch().start();
  ReflectionScanner scanner=null;
  if (!catalog.isLocal()) {
    log.warn(""String_Node_Str"" + catalog);
  }
 else   if (classpath.getEntries() == null || classpath.getEntries().isEmpty()) {
    if (!catalog.isLocal()) {
      log.warn(""String_Node_Str"" + catalog);
    }
 else {
      ClassLoader baseCL=null;
      Iterable<URL> baseCP=null;
      if (catalog.mgmt instanceof ManagementContextInternal) {
        baseCL=((ManagementContextInternal)catalog.mgmt).getBaseClassLoader();
        baseCP=((ManagementContextInternal)catalog.mgmt).getBaseClassPathForScanning();
      }
      scanner=new ReflectionScanner(baseCP,prefix,baseCL,catalog.getRootClassLoader());
      if (scanner.getSubTypesOf(Entity.class).isEmpty()) {
        try {
          ((ManagementContextInternal)catalog.mgmt).setBaseClassPathForScanning(ClasspathHelper.forJavaClassPath());
          log.debug(""String_Node_Str"");
          baseCP=((ManagementContextInternal)catalog.mgmt).getBaseClassPathForScanning();
          scanner=new ReflectionScanner(baseCP,prefix,baseCL,catalog.getRootClassLoader());
        }
 catch (        Exception e) {
          log.info(""String_Node_Str"" + baseCP + ""String_Node_Str"");
          Exceptions.propagateIfFatal(e);
        }
      }
    }
  }
 else {
    scanner=new ReflectionScanner(urls == null || urls.length == 0 ? null : Arrays.asList(urls),prefix,getLocalClassLoader());
  }
  if (scanner != null) {
    int count=0, countApps=0;
    if (scanMode == CatalogScanningModes.ANNOTATIONS) {
      Set<Class<?>> catalogClasses=scanner.getTypesAnnotatedWith(Catalog.class);
      for (      Class<?> c : catalogClasses) {
        try {
          CatalogItem<?> item=addCatalogEntry(c);
          count++;
          if (CatalogTemplateItemDto.class.isInstance(item))           countApps++;
        }
 catch (        Exception e) {
          log.warn(""String_Node_Str"" + c + ""String_Node_Str"",e);
        }
      }
    }
 else     if (scanMode == CatalogScanningModes.TYPES) {
      Iterable<Class<?>> entities=this.excludeInvalidClasses(Iterables.concat(scanner.getSubTypesOf(Entity.class),scanner.getSubTypesOf(Application.class),scanner.getSubTypesOf(ApplicationBuilder.class)));
      for (      Class<?> c : entities) {
        if (Application.class.isAssignableFrom(c) || ApplicationBuilder.class.isAssignableFrom(c)) {
          addCatalogEntry(new CatalogTemplateItemDto(),c);
          countApps++;
        }
 else {
          addCatalogEntry(new CatalogEntityItemDto(),c);
        }
        count++;
      }
      Iterable<Class<? extends Policy>> policies=this.excludeInvalidClasses(scanner.getSubTypesOf(Policy.class));
      for (      Class<?> c : policies) {
        addCatalogEntry(new CatalogPolicyItemDto(),c);
        count++;
      }
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + scanMode + ""String_Node_Str""+ this);
    }
    log.info(""String_Node_Str"" + catalog.dto.name + ""String_Node_Str""+ count+ ""String_Node_Str""+ Strings.s(count)+ ""String_Node_Str""+ countApps+ ""String_Node_Str""+ Strings.s(countApps)+ ""String_Node_Str""+ Time.makeTimeStringRounded(timer));
  }
  isLoaded=true;
}",0.9646569646569648
79577,"/** 
 * scanner which will look in given ""search"" classloader for classes starting with given prefix,  loading the class with the given ""load"" classloader, selecting for the given scanners. any or all arguments can be null to accept all.
 */
public ReflectionScanner(final ClassLoader classLoaderToSearch,final ClassLoader classLoaderForLoading,final Iterable<URL> urlsToScan,final String prefix,final Scanner... scanners){
  super(new ConfigurationBuilder(){
{
      final Predicate<String> filter=Strings.isNonEmpty(prefix) ? new FilterBuilder.Include(FilterBuilder.prefix(prefix)) : null;
      setUrls(urlsToScan != null ? ImmutableSet.copyOf(urlsToScan) : ClasspathHelper.forPackage(prefix != null && prefix.length() > 0 ? prefix : ""String_Node_Str"",asClassLoaderVarArgs(classLoaderToSearch)));
      if (filter != null)       filterInputsBy(filter);
      if (scanners != null && scanners.length != 0) {
        for (        Scanner scanner : scanners) {
          if (filter != null)           scanner.filterResultsBy(filter);
        }
        setScanners(scanners);
      }
 else {
        Scanner typeScanner=new TypeAnnotationsScanner();
        if (filter != null)         typeScanner=typeScanner.filterResultsBy(filter);
        Scanner subTypeScanner=new SubTypesScanner();
        if (filter != null)         subTypeScanner=subTypeScanner.filterResultsBy(filter);
        setScanners(typeScanner,subTypeScanner);
      }
    }
  }
);
  this.classLoaderForLoading=classLoaderForLoading;
}","/** 
 * scanner which will look in the given urls  (or if those are null attempt to infer from the first entry in the classloaders, although currently that seems to only pick up directories, not JAR's), optionally filtering for the given prefix; any or all arguments can be null to accept all (and use default classpath for classloading).
 */
public ReflectionScanner(final Iterable<URL> urlsToScan,final String optionalPrefix,final ClassLoader... classLoaders){
  reflections=new Reflections(new ConfigurationBuilder(){
{
      final Predicate<String> filter=Strings.isNonEmpty(optionalPrefix) ? new FilterBuilder.Include(FilterBuilder.prefix(optionalPrefix)) : null;
      if (urlsToScan != null)       setUrls(ImmutableSet.copyOf(urlsToScan));
 else       if (classLoaders.length > 0 && classLoaders[0] != null)       setUrls(ClasspathHelper.forPackage(Strings.isNonEmpty(optionalPrefix) ? optionalPrefix : ""String_Node_Str"",asClassLoaderVarArgs(classLoaders[0])));
      if (filter != null)       filterInputsBy(filter);
      Scanner typeScanner=new TypeAnnotationsScanner();
      if (filter != null)       typeScanner=typeScanner.filterResultsBy(filter);
      Scanner subTypeScanner=new SubTypesScanner();
      if (filter != null)       subTypeScanner=subTypeScanner.filterResultsBy(filter);
      setScanners(typeScanner,subTypeScanner);
      for (      ClassLoader cl : classLoaders)       if (cl != null)       addClassLoader(cl);
    }
  }
);
  this.classLoaders=Iterables.toArray(Iterables.filter(Arrays.asList(classLoaders),Predicates.notNull()),ClassLoader.class);
}",0.3753646677471637
79578,"protected Class<?> loadClass(String className){
  return ReflectionUtils.forName(className,asClassLoaderVarArgs(classLoaderForLoading));
}","protected Class<?> loadClass(String className){
  return ReflectionUtils.forName(className,classLoaders);
}",0.8653061224489796
79579,"/** 
 * overrides super so as to log rather than throw exception if a class cannot be loaded 
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>Set<Class<? extends T>> getSubTypesOf(final Class<T> type){
  Set<String> subTypes=getStore().getSubTypesOf(type.getName());
  List<Class<? extends T>> result=new ArrayList<Class<? extends T>>();
  for (  String className : subTypes) {
    try {
      Class<? extends T> subClazz=(Class<? extends T>)loadClass(className);
      if (subClazz != null) {
        result.add(subClazz);
      }
 else {
        log.warn(""String_Node_Str"" + className + ""String_Node_Str""+ type+ ""String_Node_Str"");
      }
    }
 catch (    Throwable e) {
      log.warn(""String_Node_Str"" + className + ""String_Node_Str""+ type+ ""String_Node_Str""+ e);
    }
  }
  return ImmutableSet.copyOf(result);
}","/** 
 * overrides delegate so as to log rather than throw exception if a class cannot be loaded 
 */
public <T>Set<Class<? extends T>> getSubTypesOf(final Class<T> type){
  Set<String> subTypes=getStore().getSubTypesOf(type.getName());
  return ImmutableSet.copyOf(this.<T>forNames(subTypes,""String_Node_Str"" + type));
}",0.2361111111111111
79580,"private synchronized void loadFullCatalog(){
  if (fullCatalog != null)   return;
  BrooklynProperties props=BrooklynProperties.Factory.newEmpty();
  props.put(LocalManagementContext.BROOKLYN_CATALOG_URL.getName(),""String_Node_Str"" + URLEncoder.encode(""String_Node_Str""));
  fullCatalog=newManagementContext(props).getCatalog();
  log.info(""String_Node_Str"" + fullCatalog.getCatalogItems(Predicates.alwaysTrue()));
}","private synchronized void loadFullCatalog(){
  if (fullCatalog != null)   return;
  BrooklynProperties props=BrooklynProperties.Factory.newEmpty();
  props.put(LocalManagementContext.BROOKLYN_CATALOG_URL.getName(),""String_Node_Str"" + Urls.encode(""String_Node_Str""));
  fullCatalog=newManagementContext(props).getCatalog();
  log.info(""String_Node_Str"" + fullCatalog.getCatalogItems(Predicates.alwaysTrue()));
}",0.9854721549636803
79581,"@Override public synchronized boolean cancel(boolean mayInterruptIfRunning){
  if (isDone())   return false;
  log.trace(""String_Node_Str"",this);
  boolean cancel=super.cancel(mayInterruptIfRunning);
  for (  Task<?> t : secondaryJobsAll)   cancel|=t.cancel(mayInterruptIfRunning);
  if (primaryThread != null) {
    log.trace(""String_Node_Str"",this);
    primaryThread.interrupt();
    cancel=true;
  }
  return cancel;
}","@Override public boolean cancel(boolean mayInterruptIfRunning){
  if (isDone())   return false;
  log.trace(""String_Node_Str"",this);
  boolean cancel=super.cancel(mayInterruptIfRunning);
  for (  Task<?> t : secondaryJobsAll)   cancel|=t.cancel(mayInterruptIfRunning);
synchronized (jobTransitionLock) {
    if (primaryThread != null) {
      log.trace(""String_Node_Str"",this);
      primaryThread.interrupt();
      cancel=true;
    }
  }
  return cancel;
}",0.8954545454545455
79582,"/** 
 * Default start will start all Startable children (child.start(Collection<? extends Location>)), calling preStart(locations) first and postStart(locations) afterwards.
 */
public void start(Collection<? extends Location> locations){
  this.addLocations(locations);
  setAttribute(Attributes.SERVICE_STATE,Lifecycle.STARTING);
  try {
    preStart(locations);
    StartableMethods.start(this,locations);
    postStart(locations);
  }
 catch (  Exception e) {
    setAttribute(Attributes.SERVICE_STATE,Lifecycle.ON_FIRE);
    log.warn(""String_Node_Str"" + this + ""String_Node_Str""+ e);
    throw Exceptions.propagate(e);
  }
  setAttribute(SERVICE_UP,true);
  setAttribute(Attributes.SERVICE_STATE,Lifecycle.RUNNING);
  deployed=true;
  log.info(""String_Node_Str"" + this);
}","/** 
 * Default start will start all Startable children (child.start(Collection<? extends Location>)), calling preStart(locations) first and postStart(locations) afterwards.
 */
public void start(Collection<? extends Location> locations){
  this.addLocations(locations);
  setAttribute(Attributes.SERVICE_STATE,Lifecycle.STARTING);
  try {
    preStart(locations);
    StartableMethods.start(this,locations);
    postStart(locations);
  }
 catch (  Exception e) {
    setAttribute(Attributes.SERVICE_STATE,Lifecycle.ON_FIRE);
    throw Exceptions.propagate(e);
  }
  setAttribute(SERVICE_UP,true);
  setAttribute(Attributes.SERVICE_STATE,Lifecycle.RUNNING);
  deployed=true;
  log.info(""String_Node_Str"" + this);
}",0.9577464788732394
79583,"@Override public void start(Collection<? extends Location> locations){
  log.info(""String_Node_Str"" + this + ""String_Node_Str""+ locations);
  LocationsFilter filter=getConfig(LOCATIONS_FILTER);
  Iterable<Entity> startables=filterStartableManagedEntities(getChildren());
  if (startables == null || Iterables.isEmpty(startables))   return;
  List<Task<?>> tasks=Lists.newArrayList();
  for (  final Entity entity : startables) {
    Collection<? extends Location> l2=locations;
    if (filter != null) {
      l2=filter.filterForContext(new ArrayList<Location>(locations),entity);
      log.debug(""String_Node_Str"" + entity + ""String_Node_Str""+ this+ ""String_Node_Str""+ l2);
    }
    tasks.add(getManagementSupport().getExecutionContext().submit(Entities.invokeEffectorWithArgs(this,entity,Startable.START,l2)));
  }
  for (  Task<?> t : tasks)   t.getUnchecked();
}","@Override public void start(Collection<? extends Location> locations){
  log.info(""String_Node_Str"" + this + ""String_Node_Str""+ locations);
  LocationsFilter filter=getConfig(LOCATIONS_FILTER);
  Iterable<Entity> startables=filterStartableManagedEntities(getChildren());
  if (startables == null || Iterables.isEmpty(startables))   return;
  List<Task<?>> tasks=Lists.newArrayList();
  for (  final Entity entity : startables) {
    Collection<? extends Location> l2=locations;
    if (filter != null) {
      l2=filter.filterForContext(new ArrayList<Location>(locations),entity);
      log.debug(""String_Node_Str"" + entity + ""String_Node_Str""+ this+ ""String_Node_Str""+ l2);
    }
    tasks.add(Entities.invokeEffectorWithArgs(this,entity,Startable.START,l2));
  }
  for (  Task<?> t : tasks)   t.getUnchecked();
}",0.9684711481261156
79584,"/** 
 * returns an unsubmitted task which invokes the given effector 
 */
public static <T>Task<T> invocation(Entity entity,Effector<T> eff,@SuppressWarnings(""String_Node_Str"") Map parameters){
  @SuppressWarnings(""String_Node_Str"") Effector<T> eff2=(Effector<T>)((EntityInternal)entity).getEffector(eff.getName());
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"" + eff + ""String_Node_Str""+ (eff instanceof EffectorWithBody<?> ? ((EffectorWithBody<?>)eff).getBody() : ""String_Node_Str"")+ ""String_Node_Str""+ entity+ ""String_Node_Str""+ (eff2 == eff ? ""String_Node_Str"" : ""String_Node_Str"" + eff2 + ""String_Node_Str""+ (eff2 instanceof EffectorWithBody<?> ? ((EffectorWithBody<?>)eff2).getBody() : ""String_Node_Str"")+ ""String_Node_Str""));
  if (eff2 != null) {
    if (eff2 != eff) {
      if (eff2 instanceof EffectorWithBody) {
        log.debug(""String_Node_Str"",new Object[]{eff,entity,eff2});
        return ((EffectorWithBody<T>)eff2).getBody().newTask(entity,eff2,ConfigBag.newInstance().putAll(parameters));
      }
 else {
        log.warn(""String_Node_Str"",new Object[]{eff2,entity,eff});
      }
    }
 else {
      log.debug(""String_Node_Str"",new Object[]{eff,entity});
    }
  }
  if (eff instanceof EffectorWithBody) {
    return ((EffectorWithBody<T>)eff).getBody().newTask(entity,eff,ConfigBag.newInstance().putAll(parameters));
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + eff + ""String_Node_Str""+ entity);
}","/** 
 * returns an unsubmitted task which invokes the given effector; use   {@link Entities#invokeEffector(EntityLocal,Entity,Effector,Map)} for a submitted variant 
 */
public static <T>Task<T> invocation(Entity entity,Effector<T> eff,@SuppressWarnings(""String_Node_Str"") Map parameters){
  @SuppressWarnings(""String_Node_Str"") Effector<T> eff2=(Effector<T>)((EntityInternal)entity).getEffector(eff.getName());
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"" + eff + ""String_Node_Str""+ (eff instanceof EffectorWithBody<?> ? ((EffectorWithBody<?>)eff).getBody() : ""String_Node_Str"")+ ""String_Node_Str""+ entity+ ""String_Node_Str""+ (eff2 == eff ? ""String_Node_Str"" : ""String_Node_Str"" + eff2 + ""String_Node_Str""+ (eff2 instanceof EffectorWithBody<?> ? ((EffectorWithBody<?>)eff2).getBody() : ""String_Node_Str"")+ ""String_Node_Str""));
  if (eff2 != null) {
    if (eff2 != eff) {
      if (eff2 instanceof EffectorWithBody) {
        log.debug(""String_Node_Str"",new Object[]{eff,entity,eff2});
        return ((EffectorWithBody<T>)eff2).getBody().newTask(entity,eff2,ConfigBag.newInstance().putAll(parameters));
      }
 else {
        log.warn(""String_Node_Str"",new Object[]{eff2,entity,eff});
      }
    }
 else {
      log.debug(""String_Node_Str"",new Object[]{eff,entity});
    }
  }
  if (eff instanceof EffectorWithBody) {
    return ((EffectorWithBody<T>)eff).getBody().newTask(entity,eff,ConfigBag.newInstance().putAll(parameters));
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + eff + ""String_Node_Str""+ entity);
}",0.968
79585,"public T call(Entity entity,Map parameters){
  Object[] parametersArray=EffectorUtils.prepareArgsForEffector(this,parameters);
  if (entity instanceof AbstractEntity) {
    return EffectorUtils.invokeEffector(entity,this,parametersArray);
  }
 else {
    Method[] methods=entity.getClass().getMethods();
    for (    Method method : methods) {
      if (method.getName().equals(getName())) {
        if (parametersArray.length == method.getParameterTypes().length) {
          try {
            return (T)method.invoke(entity,parametersArray);
          }
 catch (          Exception e) {
            throw new RuntimeException(""String_Node_Str"" + this + ""String_Node_Str""+ entity,e);
          }
        }
      }
    }
    String msg=""String_Node_Str"" + getName() + ""String_Node_Str""+ parametersArray.length+ ""String_Node_Str""+ entity;
    log.warn(msg + ""String_Node_Str"" + Arrays.toString(methods));
    throw new IllegalStateException(msg);
  }
}","public T call(Entity entity,Map parameters){
  Object[] parametersArray=EffectorUtils.prepareArgsForEffector(this,parameters);
  if (entity instanceof AbstractEntity) {
    return EffectorUtils.invokeMethodEffector(entity,this,parametersArray);
  }
 else {
    Method[] methods=entity.getClass().getMethods();
    for (    Method method : methods) {
      if (method.getName().equals(getName())) {
        if (parametersArray.length == method.getParameterTypes().length) {
          try {
            return (T)method.invoke(entity,parametersArray);
          }
 catch (          Exception e) {
            throw Exceptions.propagate(e);
          }
        }
      }
    }
    String msg=""String_Node_Str"" + getName() + ""String_Node_Str""+ parametersArray.length+ ""String_Node_Str""+ entity;
    log.warn(msg + ""String_Node_Str"" + Arrays.toString(methods));
    throw new IllegalStateException(msg);
  }
}",0.8345013477088948
79586,"protected Map<Entity,Throwable> waitForTasksOnEntityStart(Map<Entity,Task<?>> tasks){
  Map<Entity,Throwable> errors=Maps.newLinkedHashMap();
  for (  Map.Entry<Entity,Task<?>> entry : tasks.entrySet()) {
    Entity entity=entry.getKey();
    Task<?> task=entry.getValue();
    try {
      task.get();
    }
 catch (    InterruptedException e) {
      throw Exceptions.propagate(e);
    }
catch (    Throwable t) {
      logger.error(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ t);
      logger.debug(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ t,t);
      errors.put(entity,unwrapException(t));
    }
  }
  return errors;
}","protected Map<Entity,Throwable> waitForTasksOnEntityStart(Map<Entity,Task<?>> tasks){
  Map<Entity,Throwable> errors=Maps.newLinkedHashMap();
  for (  Map.Entry<Entity,Task<?>> entry : tasks.entrySet()) {
    Entity entity=entry.getKey();
    Task<?> task=entry.getValue();
    try {
      task.get();
    }
 catch (    InterruptedException e) {
      throw Exceptions.propagate(e);
    }
catch (    Throwable t) {
      Throwable interesting=Exceptions.getFirstInteresting(t);
      logger.error(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ interesting,interesting);
      logger.debug(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ t,t);
      errors.put(entity,unwrapException(t));
    }
  }
  return errors;
}",0.9399585921325052
79587,"public Object invoke(Object proxy,final Method m,final Object[] args) throws Throwable {
  if (proxy == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + delegate);
  }
  MethodSignature sig=new MethodSignature(m);
  Object result;
  if (OBJECT_METHODS.contains(sig)) {
    result=m.invoke(this,args);
  }
 else   if (ENTITY_NON_EFFECTOR_METHODS.contains(sig)) {
    result=m.invoke(delegate,args);
  }
 else {
    Object[] nonNullArgs=(args == null) ? new Object[0] : args;
    Effector<?> eff=findEffector(m,nonNullArgs);
    if (eff != null) {
      result=EffectorUtils.invokeEffector(delegate,eff,nonNullArgs);
    }
 else {
      result=m.invoke(delegate,nonNullArgs);
    }
  }
  return (result == delegate && delegate instanceof AbstractEntity) ? ((AbstractEntity)result).getProxy() : result;
}","public Object invoke(Object proxy,final Method m,final Object[] args) throws Throwable {
  if (proxy == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + delegate);
  }
  MethodSignature sig=new MethodSignature(m);
  Object result;
  if (OBJECT_METHODS.contains(sig)) {
    result=m.invoke(this,args);
  }
 else   if (ENTITY_NON_EFFECTOR_METHODS.contains(sig)) {
    result=m.invoke(delegate,args);
  }
 else {
    Object[] nonNullArgs=(args == null) ? new Object[0] : args;
    Effector<?> eff=findEffector(m,nonNullArgs);
    if (eff != null) {
      result=EffectorUtils.invokeMethodEffector(delegate,eff,nonNullArgs);
    }
 else {
      result=m.invoke(delegate,nonNullArgs);
    }
  }
  return (result == delegate && delegate instanceof AbstractEntity) ? ((AbstractEntity)result).getProxy() : result;
}",0.9963503649635036
79588,"/** 
 * Method which returns a Future containing a string formatted using String.format, where the arguments can be normal objects or tasks; tasks will be waited on (submitted if necessary) and their results substituted in the call to String.format. <p> Example: <pre>  {@code setConfig(URL, DependentConfiguration.formatString(""%s:%s"",  DependentConfiguration.attributeWhenReady(target, Target.HOSTNAME), DependentConfiguration.attributeWhenReady(target, Target.PORT) ) );}</pre>
 */
public static Task<String> formatString(final String spec,final Object... args){
  List<Object> taskArgs=Lists.newArrayList();
  for (  Object arg : args)   if (arg instanceof Task)   taskArgs.add(arg);
  return transformMultiple(new Function<List<Object>,String>(){
    @Override public String apply(    List<Object> input){
      Iterator<Object> tri=input.iterator();
      Object[] vv=new Object[args.length];
      int i=0;
      for (      Object arg : args) {
        if (arg instanceof Task)         vv[i]=tri.next();
 else         vv[i]=arg;
        i++;
      }
      return String.format(spec,vv);
    }
  }
,(Task[])taskArgs.toArray(new Task[taskArgs.size()]));
}","/** 
 * Method which returns a Future containing a string formatted using String.format, where the arguments can be normal objects or tasks; tasks will be waited on (submitted if necessary) and their results substituted in the call to String.format. <p> Example: <pre>  {@code setConfig(URL, DependentConfiguration.formatString(""%s:%s"",  DependentConfiguration.attributeWhenReady(target, Target.HOSTNAME), DependentConfiguration.attributeWhenReady(target, Target.PORT) ) );}</pre>
 */
@SuppressWarnings(""String_Node_Str"") public static Task<String> formatString(final String spec,final Object... args){
  List<Task<Object>> taskArgs=Lists.newArrayList();
  for (  Object arg : args) {
    if (arg instanceof Task)     taskArgs.add((Task<Object>)arg);
  }
  return transformMultiple(MutableMap.<String,String>of(""String_Node_Str"",""String_Node_Str"" + spec + ""String_Node_Str""+ taskArgs.size()+ ""String_Node_Str""+ (taskArgs.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"")),new Function<List<Object>,String>(){
    @Override public String apply(    List<Object> input){
      Iterator<?> tri=input.iterator();
      Object[] vv=new Object[args.length];
      int i=0;
      for (      Object arg : args) {
        if (arg instanceof Task)         vv[i]=tri.next();
 else         vv[i]=arg;
        i++;
      }
      return String.format(spec,vv);
    }
  }
,taskArgs);
}",0.8775671406003159
79589,"/** 
 * @see #transformMultiple(Function,Task) 
 */
public static <U,T>Task<T> transformMultiple(Map flags,final Function<List<U>,T> transformer,Task<U>... tasks){
  if (tasks.length == 1) {
    return transform(flags,tasks[0],new Function<U,T>(){
      @Override @Nullable public T apply(      @Nullable U input){
        return transformer.apply(Arrays.asList(input));
      }
    }
);
  }
  return transform(flags,new ParallelTask(tasks),transformer);
}","public static <U,T>Task<T> transformMultiple(Map flags,final Function<List<U>,T> transformer,List<Task<U>> tasks){
  if (tasks.size() == 1) {
    return transform(flags,tasks.get(0),new Function<U,T>(){
      @Override @Nullable public T apply(      @Nullable U input){
        return transformer.apply(ImmutableList.of(input));
      }
    }
);
  }
  return transform(flags,new ParallelTask<U>(tasks),transformer);
}",0.7124856815578465
79590,"/** 
 * Method for entity to make effector happen with correct semantics (right place, right task context), when a method is called on that entity.
 * @throws ExecutionException 
 */
public <T>T invokeEffectorMethodSync(final Entity entity,final Effector<T> eff,final Object args) throws ExecutionException {
  try {
    Task<?> current=Tasks.current();
    if (current == null || !entity.equals(BrooklynTasks.getContextEntity(current)) || !isManagedLocally(entity)) {
      manageIfNecessary(entity,eff.getName());
      Task<T> task=runAtEntity(EffectorUtils.getTaskFlagsForEffectorInvocation(entity,eff),entity,new Callable<T>(){
        public T call(){
          return invokeEffectorMethodLocal(entity,eff,args);
        }
      }
);
      return task.get();
    }
 else {
      return invokeEffectorMethodLocal(entity,eff,args);
    }
  }
 catch (  Exception e) {
    throw new ExecutionException(""String_Node_Str"" + eff + ""String_Node_Str""+ entity,e);
  }
}","/** 
 * Method for entity to make effector happen with correct semantics (right place, right task context), when a method is called on that entity.
 * @throws ExecutionException 
 */
public <T>T invokeEffectorMethodSync(final Entity entity,final Effector<T> eff,final Object args) throws ExecutionException {
  try {
    Task<?> current=Tasks.current();
    if (current == null || !entity.equals(BrooklynTasks.getContextEntity(current)) || !isManagedLocally(entity)) {
      manageIfNecessary(entity,eff.getName());
      Task<T> task=runAtEntity(EffectorUtils.getTaskFlagsForEffectorInvocation(entity,eff),entity,new Callable<T>(){
        public T call(){
          return invokeEffectorMethodLocal(entity,eff,args);
        }
      }
);
      return task.get();
    }
 else {
      return invokeEffectorMethodLocal(entity,eff,args);
    }
  }
 catch (  Exception e) {
    throw new ExecutionException(e);
  }
}",0.972310969116081
79591,"/** 
 * Invokes the effector so that its progress is tracked. If the given method is not defined as an effector, then a warning will be logged and the method will be invoked directly.
 */
public static Object invokeEffector(AbstractEntity entity,Method method,Object[] args){
  Effector<?> effector=findEffectorMatching(entity,method);
  if (effector == null) {
    log.warn(""String_Node_Str"",method,entity);
    try {
      return method.invoke(entity,args);
    }
 catch (    Exception e) {
      log.info(""String_Node_Str"",new Object[]{method,entity.getId(),e});
      throw Exceptions.propagate(e);
    }
  }
 else {
    return invokeEffector(entity,effector,args);
  }
}","/** 
 * Invokes the effector so that its progress is tracked. If the given method is not defined as an effector, then a warning will be logged and the method will be invoked directly.
 * @deprecated since 0.6.0; not used, prefer passing an effector and a map of arguments
 */
public static Object invokeEffector(AbstractEntity entity,Method method,Object[] args){
  Effector<?> effector=findEffectorMatching(entity,method);
  if (effector == null) {
    log.warn(""String_Node_Str"",method,entity);
    try {
      return method.invoke(entity,args);
    }
 catch (    Exception e) {
      log.info(""String_Node_Str"",new Object[]{method,entity.getId(),e});
      throw Exceptions.propagate(e);
    }
  }
 else {
    return invokeMethodEffector(entity,effector,args);
  }
}",0.9349030470914128
79592,"@Override protected <T>Task<T> runAtEntity(final Entity entity,final Effector<T> eff,@SuppressWarnings(""String_Node_Str"") final Map parameters){
  manageIfNecessary(entity,eff);
  return getExecutionContext(entity).submit(Effectors.invocation(entity,eff,parameters));
}","@Override protected <T>Task<T> runAtEntity(final Entity entity,final Effector<T> eff,@SuppressWarnings(""String_Node_Str"") final Map parameters){
  manageIfNecessary(entity,eff);
  ExecutionContext ec=BasicExecutionContext.getCurrentExecutionContext();
  if (ec == null) {
    log.debug(""String_Node_Str"",eff,entity);
    ec=getExecutionContext(entity);
  }
  return ec.submit(Effectors.invocation(entity,eff,parameters));
}",0.7254335260115607
79593,"/** 
 * Finds the entity where this task is running, throwing NPE if there is none, and throwing IAE if it is not of the indicated type 
 */
public static <T extends Entity>T findEntity(Class<T> type){
  Entity t=findEntity();
  return Reflections.cast(t,type);
}","/** 
 * Finds the entity where this task is running
 * @throws NullPointerException if there is none
 * @throws IllegalArgumentException if it is not of the indicated type 
 */
public static <T extends Entity>T findEntity(Class<T> type){
  Entity t=findEntity();
  return Reflections.cast(t,type);
}",0.7864768683274022
79594,"protected Map<Entity,Throwable> waitForTasksOnEntityStart(Map<Entity,Task<?>> tasks){
  Map<Entity,Throwable> errors=Maps.newLinkedHashMap();
  for (  Map.Entry<Entity,Task<?>> entry : tasks.entrySet()) {
    Entity entity=entry.getKey();
    Task<?> task=entry.getValue();
    try {
      task.get();
    }
 catch (    InterruptedException e) {
      throw Exceptions.propagate(e);
    }
catch (    Throwable t) {
      Throwable interesting=Exceptions.getFirstInteresting(t);
      logger.error(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ interesting,interesting);
      logger.debug(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ t,t);
      errors.put(entity,unwrapException(t));
    }
  }
  return errors;
}","protected Map<Entity,Throwable> waitForTasksOnEntityStart(Map<Entity,Task<?>> tasks){
  Map<Entity,Throwable> errors=Maps.newLinkedHashMap();
  for (  Map.Entry<Entity,Task<?>> entry : tasks.entrySet()) {
    Entity entity=entry.getKey();
    Task<?> task=entry.getValue();
    try {
      task.get();
    }
 catch (    InterruptedException e) {
      throw Exceptions.propagate(e);
    }
catch (    Throwable t) {
      Throwable interesting=Exceptions.getFirstInteresting(t);
      logger.error(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ interesting,interesting);
      logger.debug(""String_Node_Str"" + this + ""String_Node_Str""+ entity+ ""String_Node_Str""+ t,t);
      errors.put(entity,t);
    }
  }
  return errors;
}",0.9492419248516808
79595,"public void handleException(Throwable throwable) throws Exception {
  if (throwable instanceof Exception) {
    if (throwable instanceof InterruptedException)     throw new RuntimeInterruptedException((InterruptedException)throwable);
    throw (Exception)throwable;
  }
  throw new PropagatedRuntimeException(throwable);
}","public void handleException(Throwable throwable) throws Exception {
  if (throwable instanceof Exception) {
    if (throwable instanceof InterruptedException)     throw new RuntimeInterruptedException((InterruptedException)throwable);
    throw (Exception)throwable;
  }
  throw Exceptions.propagate(throwable);
}",0.9465408805031448
79596,"/** 
 * Waits for the last task queued in this context to complete; it does throw if there is a problem. <p> Preferred over   {@link #last()}.get() because this waits on all tasks,  in sequentially (so that blocking information is always accurate) 
 */
public static Task<?> waitForLast(){
  TaskQueueingContext qc=DynamicTasks.getTaskQueuingContext();
  Preconditions.checkNotNull(qc,""String_Node_Str"");
  List<Task<?>> q=qc.getQueue();
  Task<?> last=null;
  do {
    for (    Task<?> t : q) {
      last=t;
      last.getUnchecked();
    }
  }
 while (last != qc.last());
  return last;
}","/** 
 * Waits for the last task queued in this context to complete; it throws if there is a problem, but happily returns null if there is no last task. <p> Preferred over   {@link #last()}.get() because this waits on all tasks,  in sequentially (so that blocking information is always accurate) 
 */
public static Task<?> waitForLast(){
  TaskQueueingContext qc=DynamicTasks.getTaskQueuingContext();
  Preconditions.checkNotNull(qc,""String_Node_Str"");
  List<Task<?>> q=qc.getQueue();
  Task<?> last=null;
  do {
    for (    Task<?> t : q) {
      last=t;
      last.getUnchecked();
    }
  }
 while (last != qc.last());
  return last;
}",0.9536208299430432
79597,"@Override public void restart(){
  new DynamicTasks.AutoQueueVoid(""String_Node_Str""){
    protected void main(){
      boolean previouslyRunning=isRunning();
      try {
        getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.STOPPING);
        stop();
      }
 catch (      Exception e) {
        if (previouslyRunning) {
          log.debug(getEntity() + ""String_Node_Str"",e);
        }
 else {
          log.debug(getEntity() + ""String_Node_Str"",e);
        }
      }
    }
  }
;
  new DynamicTasks.AutoQueueVoid(""String_Node_Str""){
    protected void main(){
      getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.STARTING);
      launch();
      getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.RUNNING);
    }
  }
;
}","@Override public void restart(){
  new DynamicTasks.AutoQueueVoid(""String_Node_Str""){
    protected void main(){
      boolean previouslyRunning=isRunning();
      try {
        getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.STOPPING);
        stop();
      }
 catch (      Exception e) {
        if (previouslyRunning) {
          log.debug(getEntity() + ""String_Node_Str"",e);
        }
 else {
          log.debug(getEntity() + ""String_Node_Str"",e);
        }
      }
    }
  }
;
  new DynamicTasks.AutoQueueVoid(""String_Node_Str""){
    protected void main(){
      getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.STARTING);
      launch();
    }
  }
;
}",0.9346314325452016
79598,"protected void main(){
  getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.STARTING);
  launch();
  getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.RUNNING);
}","protected void main(){
  getEntity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.STARTING);
  launch();
}",0.7517241379310344
79599,"/** 
 * @see Startable#stop()
 */
void stop();","/** 
 * Performs software stop (or queues tasks to do this) 
 * @see Startable#stop()
 */
void stop();",0.6216216216216216
79600,"/** 
 * Queues tasks for restart
 * @see Startable#restart() Unlike the other methods, the driver here is responsible for queueing a task to update the SERVICE_STATE sensor.
 */
void restart();","/** 
 * Performs software restart (or queues tasks to do this); implementations should update SERVICE_STATE for STOPPING and STARTING as appropriate (but framework will set RUNNING afterwards)
 * @see Startable#restart()
 */
void restart();",0.2725173210161662
79601,"/** 
 * Queues tasks for starting
 */
void start();","/** 
 * Performs software start (or queues tasks to do this)
 */
void start();",0.6356589147286822
79602,"@Override protected void restart(){
  if (((SoftwareProcessImpl)entity()).getDriver() == null)   throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str"");
  ((SoftwareProcessImpl)entity()).getDriver().restart();
  new DynamicTasks.AutoQueueVoid(""String_Node_Str""){
    protected void main(){
      ((SoftwareProcessImpl)entity()).postDriverRestart();
    }
  }
;
}","@Override protected void restart(){
  if (((SoftwareProcessImpl)entity()).getDriver() == null)   throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str"");
  ((SoftwareProcessImpl)entity()).getDriver().restart();
  new DynamicTasks.AutoQueueVoid(""String_Node_Str""){
    protected void main(){
      ((SoftwareProcessImpl)entity()).postDriverRestart();
      DynamicTasks.waitForLast();
      entity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.RUNNING);
    }
  }
;
}",0.8779931584948689
79603,"protected void main(){
  ((SoftwareProcessImpl)entity()).postDriverRestart();
}","protected void main(){
  ((SoftwareProcessImpl)entity()).postDriverRestart();
  DynamicTasks.waitForLast();
  entity().setAttribute(Attributes.SERVICE_STATE,Lifecycle.RUNNING);
}",0.6147859922178989
79604,"@Test public void testReleaseEvenIfErrorDuringStart() throws Exception {
  MyServiceImpl entity=new MyServiceImpl(app){
    @Override public Class getDriverInterface(){
      return SimulatedFailOnStartDriver.class;
    }
  }
;
  Entities.manage(entity);
  try {
    entity.start(ImmutableList.of(loc));
    Assert.fail();
  }
 catch (  Exception e) {
    IllegalStateException cause=Throwables2.getFirstThrowableOfType(e,IllegalStateException.class);
    if (cause == null || !cause.toString().contains(""String_Node_Str""))     throw e;
  }
  try {
    entity.stop();
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"",e);
  }
  Assert.assertEquals(loc.getAvailable(),ImmutableSet.of(machine));
}","@Test public void testReleaseEvenIfErrorDuringStart() throws Exception {
  MyServiceImpl entity=new MyServiceImpl(app){
    @Override public Class getDriverInterface(){
      return SimulatedFailOnStartDriver.class;
    }
  }
;
  Entities.manage(entity);
  try {
    entity.start(ImmutableList.of(loc));
    Assert.fail();
  }
 catch (  Exception e) {
    IllegalStateException cause=Throwables2.getFirstThrowableOfType(e,IllegalStateException.class);
    if (cause == null || !cause.toString().contains(""String_Node_Str""))     throw e;
  }
  try {
    entity.stop();
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"",e);
  }
  Assert.assertEquals(loc.getAvailable(),ImmutableSet.of(machine));
  Entities.unmanage(entity);
}",0.9798471160528144
79605,"@Test public void testReleaseEvenIfErrorDuringStop() throws Exception {
  MyServiceImpl entity=new MyServiceImpl(app){
    @Override public Class getDriverInterface(){
      return SimulatedFailOnStopDriver.class;
    }
  }
;
  Entities.manage(entity);
  entity.start(ImmutableList.of(loc));
  try {
    entity.stop();
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertEquals(loc.getAvailable(),ImmutableSet.of(machine));
    IllegalStateException cause=Throwables2.getFirstThrowableOfType(e,IllegalStateException.class);
    if (cause == null || !cause.toString().contains(""String_Node_Str""))     throw e;
  }
}","@Test public void testReleaseEvenIfErrorDuringStop() throws Exception {
  MyServiceImpl entity=new MyServiceImpl(app){
    @Override public Class getDriverInterface(){
      return SimulatedFailOnStopDriver.class;
    }
  }
;
  Entities.manage(entity);
  entity.start(ImmutableList.of(loc));
  try {
    entity.stop();
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertEquals(loc.getAvailable(),ImmutableSet.of(machine));
    IllegalStateException cause=Throwables2.getFirstThrowableOfType(e,IllegalStateException.class);
    if (cause == null || !cause.toString().contains(""String_Node_Str""))     throw e;
  }
  Entities.unmanage(entity);
}",0.9773967264224472
79606,"public static <T>Function<JsonElement,T> cast(final Class<T> expected){
  return new Function<JsonElement,T>(){
    @Override public T apply(    JsonElement input){
      if (input == null) {
        return (T)null;
      }
 else       if (input.isJsonNull()) {
        return (T)null;
      }
 else       if (expected == boolean.class || expected == Boolean.class) {
        return (T)(Boolean)input.getAsBoolean();
      }
 else       if (expected == char.class || expected == Character.class) {
        return (T)(Character)input.getAsCharacter();
      }
 else       if (expected == byte.class || expected == Byte.class) {
        return (T)(Byte)input.getAsByte();
      }
 else       if (expected == short.class || expected == Short.class) {
        return (T)(Short)input.getAsShort();
      }
 else       if (expected == int.class || expected == Integer.class) {
        return (T)(Integer)input.getAsInt();
      }
 else       if (expected == long.class || expected == Long.class) {
        return (T)(Long)input.getAsLong();
      }
 else       if (expected == float.class || expected == Float.class) {
        return (T)(Float)input.getAsFloat();
      }
 else       if (expected == double.class || expected == Double.class) {
        return (T)(Double)input.getAsDouble();
      }
 else       if (expected == BigDecimal.class) {
        return (T)input.getAsBigDecimal();
      }
 else       if (expected == BigInteger.class) {
        return (T)input.getAsBigInteger();
      }
 else       if (Number.class.isAssignableFrom(expected)) {
        return (T)input.getAsNumber();
      }
 else       if (expected == String.class) {
        return (T)input.getAsString();
      }
 else       if (expected.isArray()) {
        JsonArray array=input.getAsJsonArray();
        Class<?> componentType=expected.getComponentType();
        if (JsonElement.class.isAssignableFrom(componentType)) {
          JsonElement[] result=new JsonElement[array.size()];
          for (int i=0; i < array.size(); i++) {
            result[i]=array.get(i);
          }
          return (T)result;
        }
 else {
          Object[] result=(Object[])Array.newInstance(componentType,array.size());
          for (int i=0; i < array.size(); i++) {
            result[i]=cast(componentType).apply(array.get(i));
          }
          return (T)result;
        }
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + expected);
      }
    }
  }
;
}","@SuppressWarnings(""String_Node_Str"") public static <T>Function<JsonElement,T> cast(final Class<T> expected){
  return new Function<JsonElement,T>(){
    @Override public T apply(    JsonElement input){
      if (input == null) {
        return (T)null;
      }
 else       if (input.isJsonNull()) {
        return (T)null;
      }
 else       if (expected == boolean.class || expected == Boolean.class) {
        return (T)(Boolean)input.getAsBoolean();
      }
 else       if (expected == char.class || expected == Character.class) {
        return (T)(Character)input.getAsCharacter();
      }
 else       if (expected == byte.class || expected == Byte.class) {
        return (T)(Byte)input.getAsByte();
      }
 else       if (expected == short.class || expected == Short.class) {
        return (T)(Short)input.getAsShort();
      }
 else       if (expected == int.class || expected == Integer.class) {
        return (T)(Integer)input.getAsInt();
      }
 else       if (expected == long.class || expected == Long.class) {
        return (T)(Long)input.getAsLong();
      }
 else       if (expected == float.class || expected == Float.class) {
        return (T)(Float)input.getAsFloat();
      }
 else       if (expected == double.class || expected == Double.class) {
        return (T)(Double)input.getAsDouble();
      }
 else       if (expected == BigDecimal.class) {
        return (T)input.getAsBigDecimal();
      }
 else       if (expected == BigInteger.class) {
        return (T)input.getAsBigInteger();
      }
 else       if (Number.class.isAssignableFrom(expected)) {
        return (T)input.getAsNumber();
      }
 else       if (expected == String.class) {
        return (T)input.getAsString();
      }
 else       if (expected.isArray()) {
        JsonArray array=input.getAsJsonArray();
        Class<?> componentType=expected.getComponentType();
        if (JsonElement.class.isAssignableFrom(componentType)) {
          JsonElement[] result=new JsonElement[array.size()];
          for (int i=0; i < array.size(); i++) {
            result[i]=array.get(i);
          }
          return (T)result;
        }
 else {
          Object[] result=(Object[])Array.newInstance(componentType,array.size());
          for (int i=0; i < array.size(); i++) {
            result[i]=cast(componentType).apply(array.get(i));
          }
          return (T)result;
        }
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + expected);
      }
    }
  }
;
}",0.9925358079483558
79607,"@Override protected void connectSensors(){
  super.connectSensors();
  ConfigToAttributes.apply(this);
  String host=getAttribute(HOSTNAME);
  URI webConsoleUri;
  if (isHttpProtocolEnabled(""String_Node_Str"")) {
    int port=getConfig(PORT_MAPPER).apply(getAttribute(HTTP_PORT));
    webConsoleUri=URI.create(String.format(""String_Node_Str"",host,port));
    setAttribute(WEB_CONSOLE_URI,webConsoleUri);
  }
 else   if (isHttpProtocolEnabled(""String_Node_Str"")) {
    int port=getConfig(PORT_MAPPER).apply(getAttribute(HTTPS_PORT));
    webConsoleUri=URI.create(String.format(""String_Node_Str"",host,port));
    setAttribute(WEB_CONSOLE_URI,webConsoleUri);
  }
 else {
    setAttribute(WEB_CONSOLE_URI,null);
    webConsoleUri=null;
  }
  if (webConsoleUri != null) {
    httpFeed=HttpFeed.builder().entity(this).period(200).baseUri(webConsoleUri).credentialsIfNotNull(getConfig(MANAGEMENT_USER),getConfig(MANAGEMENT_PASSWORD)).poll(new HttpPollConfig<Boolean>(SERVICE_UP).onSuccess(HttpValueFunctions.responseCodeEquals(200)).setOnFailureOrException(false)).build();
  }
 else {
    setAttribute(SERVICE_UP,true);
  }
}","@Override protected void connectSensors(){
  super.connectSensors();
  ConfigToAttributes.apply(this);
  String host;
  if (getAttribute(NO_WEB_CONSOLE_AUTHENTICATION)) {
    host=""String_Node_Str"";
  }
 else {
    host=getAttribute(HOSTNAME);
  }
  URI webConsoleUri;
  if (isHttpProtocolEnabled(""String_Node_Str"")) {
    int port=getConfig(PORT_MAPPER).apply(getAttribute(HTTP_PORT));
    webConsoleUri=URI.create(String.format(""String_Node_Str"",host,port));
    setAttribute(WEB_CONSOLE_URI,webConsoleUri);
  }
 else   if (isHttpProtocolEnabled(""String_Node_Str"")) {
    int port=getConfig(PORT_MAPPER).apply(getAttribute(HTTPS_PORT));
    webConsoleUri=URI.create(String.format(""String_Node_Str"",host,port));
    setAttribute(WEB_CONSOLE_URI,webConsoleUri);
  }
 else {
    setAttribute(WEB_CONSOLE_URI,null);
    webConsoleUri=null;
  }
  if (webConsoleUri != null) {
    httpFeed=HttpFeed.builder().entity(this).period(200).baseUri(webConsoleUri).credentialsIfNotNull(getConfig(MANAGEMENT_USER),getConfig(MANAGEMENT_PASSWORD)).poll(new HttpPollConfig<Boolean>(SERVICE_UP).onSuccess(HttpValueFunctions.responseCodeEquals(200)).setOnFailureOrException(false)).build();
  }
 else {
    setAttribute(SERVICE_UP,true);
  }
}",0.9543320529236022
79608,"private <T>T parseJson(String json,List<String> elements,Class<T> clazz){
  Function<String,T> func=HttpValueFunctions.chain(JsonFunctions.asJson(),JsonFunctions.walk(elements.toArray(new String[elements.size()])),JsonFunctions.cast(clazz));
  return func.apply(json);
}","private <T>T parseJson(String json,List<String> elements,Class<T> clazz){
  Function<String,T> func=HttpValueFunctions.chain(JsonFunctions.asJson(),JsonFunctions.walk(elements),JsonFunctions.cast(clazz));
  return func.apply(json);
}",0.926441351888668
79609,"@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (app != null)   Entities.destroyAll(app.getManagementContext());
  if (pseudoBrooklynPropertiesFile != null)   pseudoBrooklynPropertiesFile.delete();
  if (pseudoBrooklynCatalogFile != null)   pseudoBrooklynCatalogFile.delete();
}","@AfterMethod(alwaysRun=true) public void tearDown() throws Exception {
  if (app != null)   Entities.destroyAll(app.getManagementSupport().getManagementContext());
  if (pseudoBrooklynPropertiesFile != null)   pseudoBrooklynPropertiesFile.delete();
  if (pseudoBrooklynCatalogFile != null)   pseudoBrooklynCatalogFile.delete();
}",0.9637795275590552
79610,"private <T>List<T> parseJsonList(String json,List<String> elements,Class<T> clazz){
  Function<String,List<T>> func=HttpValueFunctions.chain(JsonFunctions.asJson(),JsonFunctions.forEach(HttpValueFunctions.chain(JsonFunctions.walk(elements.toArray(new String[elements.size()])),JsonFunctions.cast(clazz))));
  return func.apply(json);
}","private <T>List<T> parseJsonList(String json,List<String> elements,Class<T> clazz){
  Function<String,List<T>> func=HttpValueFunctions.chain(JsonFunctions.asJson(),JsonFunctions.forEach(HttpValueFunctions.chain(JsonFunctions.walk(elements),JsonFunctions.cast(clazz))));
  return func.apply(json);
}",0.9415481832543444
79611,"@BeforeMethod(alwaysRun=true) public void setUp() throws Exception {
  pseudoBrooklynPropertiesFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  pseudoBrooklynPropertiesFile.delete();
  pseudoBrooklynCatalogFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  pseudoBrooklynCatalogFile.delete();
  locs=ImmutableList.of(new LocalhostMachineProvisioningLocation());
  app=ApplicationBuilder.newManagedApp(TestApplication.class);
}","@BeforeMethod(alwaysRun=true) public void setUp() throws Exception {
  pseudoBrooklynPropertiesFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  pseudoBrooklynPropertiesFile.delete();
  pseudoBrooklynCatalogFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  pseudoBrooklynCatalogFile.delete();
  app=ApplicationBuilder.newManagedApp(TestApplication.class);
  Location localhost=app.getManagementSupport().getManagementContext().getLocationManager().createLocation(LocationSpec.create(LocalhostMachineProvisioningLocation.class));
  locs=ImmutableList.of(localhost);
}",0.6825095057034221
79612,"/** 
 * augments the given item with annotations and class data for the given class, then adds to catalog 
 * @return 
 */
public CatalogItem<?> addCatalogEntry(CatalogItemDtoAbstract<?> item,Class<?> c){
  Catalog annotations=c.getAnnotation(Catalog.class);
  item.type=c.getName();
  item.name=firstNonEmpty(c.getSimpleName(),c.getName());
  if (annotations != null) {
    item.name=firstNonEmpty(annotations.name(),item.name);
    item.description=firstNonEmpty(annotations.description());
    item.iconUrl=firstNonEmpty(annotations.iconUrl());
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"" + c + ""String_Node_Str""+ catalog+ ""String_Node_Str"");
  catalog.addEntry(item);
  return item;
}","/** 
 * augments the given item with annotations and class data for the given class, then adds to catalog 
 */
public CatalogItem<?> addCatalogEntry(CatalogItemDtoAbstract<?> item,Class<?> c){
  Catalog annotations=c.getAnnotation(Catalog.class);
  item.type=c.getName();
  item.name=firstNonEmpty(c.getSimpleName(),c.getName());
  if (annotations != null) {
    item.name=firstNonEmpty(annotations.name(),item.name);
    item.description=firstNonEmpty(annotations.description());
    item.iconUrl=firstNonEmpty(annotations.iconUrl());
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"" + c + ""String_Node_Str""+ catalog+ ""String_Node_Str"");
  catalog.addEntry(item);
  return item;
}",0.9914285714285714
79613,"/** 
 * adds the given entry to the catalog, with no enrichment; callers may prefer   {@link CatalogClasspathDo#addCatalogEntry(AbstractCatalogItem, Class))}
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public synchronized void addEntry(CatalogItemDtoAbstract<?> entry){
  if (dto.entries == null)   dto.entries=new ArrayList<CatalogItemDtoAbstract<?>>();
  dto.entries.add(entry);
  if (cache != null)   cache.put(entry.getId(),new CatalogItemDo(this,entry));
}","/** 
 * adds the given entry to the catalog, with no enrichment; callers may prefer   {@link CatalogClasspathDo#addCatalogEntry(CatalogItemDtoAbstract,Class)}
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public synchronized void addEntry(CatalogItemDtoAbstract<?> entry){
  if (dto.entries == null)   dto.entries=new ArrayList<CatalogItemDtoAbstract<?>>();
  dto.entries.add(entry);
  if (cache != null)   cache.put(entry.getId(),new CatalogItemDo(this,entry));
}",0.9613375130616508
79614,"/** 
 * Convenience for finding named effector in   {@link #getEffectors()} {@link Map}. 
 */
public <T>Effector<T> getEffector(String effectorName){
  return (Effector<T>)entityType.getEffector(effectorName);
}","/** 
 * Convenience for finding named effector in   {@link EntityType#getEffectors()} {@link Map}. 
 */
public <T>Effector<T> getEffector(String effectorName){
  return (Effector<T>)entityType.getEffector(effectorName);
}",0.976851851851852
79615,"/** 
 * Starts managing the given (unmanaged) app, setting the given brooklyn properties on the new management context.
 * @see startManagement(Entity)
 */
public static ManagementContext startManagement(Application app,BrooklynProperties props){
  if (isManaged(app)) {
    throw new IllegalStateException(""String_Node_Str"" + app + ""String_Node_Str"");
  }
  ManagementContext mgmt=new LocalManagementContext(props);
  mgmt.getEntityManager().manage(app);
  return mgmt;
}","/** 
 * Starts managing the given (unmanaged) app, setting the given brooklyn properties on the new management context.
 * @see #startManagement(Entity)
 */
public static ManagementContext startManagement(Application app,BrooklynProperties props){
  if (isManaged(app)) {
    throw new IllegalStateException(""String_Node_Str"" + app + ""String_Node_Str"");
  }
  ManagementContext mgmt=new LocalManagementContext(props);
  mgmt.getEntityManager().manage(app);
  return mgmt;
}",0.9989417989417988
79616,"/** 
 * Like   {@link setAttribute(AttributeSensor, T)}, except does not publish an attribute-change event.
 */
<T>T setAttributeWithoutPublishing(AttributeSensor<T> sensor,T val);","/** 
 * Like   {@link EntityLocal#setAttribute(AttributeSensor,Object)}, except does not publish an attribute-change event.
 */
<T>T setAttributeWithoutPublishing(AttributeSensor<T> sensor,T val);",0.946808510638298
79617,"/** 
 * The default is (in-order) to: <ol> <li>Use the local repo, if any (defaulting to $HOME/.brooklyn/repository) <li>Use brooklyn properties for any download overrides defined there (see   {@link DownloadPropertiesResolver}<li>Use the entity's Attributes.DOWNLOAD_URL <li>Use the cloudsoft fallback repo </ol>
 * @param config
 * @return
 */
public static BasicDownloadsManager newDefault(StringConfigMap config){
  BasicDownloadsManager result=new BasicDownloadsManager();
  DownloadProducerFromLocalRepo localRepoProducer=new DownloadProducerFromLocalRepo(config);
  DownloadProducerFromProperties propertiesProducer=new DownloadProducerFromProperties(config);
  DownloadProducerFromUrlAttribute attributeProducer=new DownloadProducerFromUrlAttribute();
  DownloadProducerFromCloudsoftRepo cloudsoftRepoProducer=new DownloadProducerFromCloudsoftRepo(config);
  result.registerProducer(localRepoProducer);
  result.registerProducer(propertiesProducer);
  result.registerProducer(attributeProducer);
  result.registerProducer(cloudsoftRepoProducer);
  result.registerFilenameProducer(FilenameProducers.fromFilenameProperty());
  result.registerFilenameProducer(FilenameProducers.firstPrimaryTargetOf(propertiesProducer));
  result.registerFilenameProducer(FilenameProducers.firstPrimaryTargetOf(attributeProducer));
  return result;
}","/** 
 * The default is (in-order) to: <ol> <li>Use the local repo, if any (defaulting to $HOME/.brooklyn/repository) <li>Use brooklyn properties for any download overrides defined there (see   {@link DownloadProducerFromProperties}<li>Use the entity's Attributes.DOWNLOAD_URL <li>Use the cloudsoft fallback repo </ol>
 * @param config
 */
public static BasicDownloadsManager newDefault(StringConfigMap config){
  BasicDownloadsManager result=new BasicDownloadsManager();
  DownloadProducerFromLocalRepo localRepoProducer=new DownloadProducerFromLocalRepo(config);
  DownloadProducerFromProperties propertiesProducer=new DownloadProducerFromProperties(config);
  DownloadProducerFromUrlAttribute attributeProducer=new DownloadProducerFromUrlAttribute();
  DownloadProducerFromCloudsoftRepo cloudsoftRepoProducer=new DownloadProducerFromCloudsoftRepo(config);
  result.registerProducer(localRepoProducer);
  result.registerProducer(propertiesProducer);
  result.registerProducer(attributeProducer);
  result.registerProducer(cloudsoftRepoProducer);
  result.registerFilenameProducer(FilenameProducers.fromFilenameProperty());
  result.registerFilenameProducer(FilenameProducers.firstPrimaryTargetOf(propertiesProducer));
  result.registerFilenameProducer(FilenameProducers.firstPrimaryTargetOf(attributeProducer));
  return result;
}",0.9831397527163732
79618,"/** 
 * @param val
 * @param file
 * @param executor A sequential executor (e.g. SingleThreadedExecutor, or equivalent)
 * @param serializer
 */
public MementoFileWriter(File file,ListeningExecutorService executor,MementoSerializer<? super T> serializer){
  this.file=file;
  this.executor=executor;
  this.serializer=serializer;
  this.tmpFile=new File(file.getParentFile(),file.getName() + ""String_Node_Str"");
}","/** 
 * @param file
 * @param executor A sequential executor (e.g. SingleThreadedExecutor, or equivalent)
 * @param serializer
 */
public MementoFileWriter(File file,ListeningExecutorService executor,MementoSerializer<? super T> serializer){
  this.file=file;
  this.executor=executor;
  this.serializer=serializer;
  this.tmpFile=new File(file.getParentFile(),file.getName() + ""String_Node_Str"");
}",0.9827586206896552
79619,"/** 
 * returns the sensor value for this attribute on the given entity, if present, otherwise works out what the sensor value should be based on the config key's value <p> calls to this may allocate resources (e.g. ports) so should be called only once and  then (if non-null) assigned as the sensor's value <p> <b>(for this reason this method should generally not be invoked by callers except in tests and by the framework, and similarly should not be overridden; implement convertConfigToSensor instead for single-execution calls. the framework calls this from   {@link EntityLocal#setAttribute(AttributeSensorAndConfigKey)} typically via  {@link ConfigToAttributes#apply(EntityLocal)} e.g. from SoftwareProcess.preStart.)</b> 
 */
public SensorType getAsSensorValue(Entity e){
  SensorType sensorValue=e.getAttribute(this);
  if (sensorValue != null)   return sensorValue;
  ConfigType v=((EntityLocal)e).getConfig(this);
  try {
    return convertConfigToSensor(v,e);
  }
 catch (  Throwable t) {
    throw new IllegalArgumentException(""String_Node_Str"" + v + ""String_Node_Str""+ this+ ""String_Node_Str""+ t,t);
  }
}","/** 
 * returns the sensor value for this attribute on the given entity, if present, otherwise works out what the sensor value should be based on the config key's value <p> calls to this may allocate resources (e.g. ports) so should be called only once and  then (if non-null) assigned as the sensor's value <p> <b>(for this reason this method should generally not be invoked by callers except in tests and by the framework, and similarly should not be overridden; implement   {@link #convertConfigToSensor(Object,Entity)} instead for single-execution calls.the framework calls this from  {@link AbstractEntity#setAttribute(AttributeSensorAndConfigKey)} typically via  {@link ConfigToAttributes#apply(EntityLocal)} e.g. from SoftwareProcessImpl.preStart().)</b> 
 */
public SensorType getAsSensorValue(Entity e){
  SensorType sensorValue=e.getAttribute(this);
  if (sensorValue != null)   return sensorValue;
  ConfigType v=((EntityLocal)e).getConfig(this);
  try {
    return convertConfigToSensor(v,e);
  }
 catch (  Throwable t) {
    throw new IllegalArgumentException(""String_Node_Str"" + v + ""String_Node_Str""+ this+ ""String_Node_Str""+ t,t);
  }
}",0.8560105680317041
79620,"/** 
 * @deprecated since 0.6; use {@link #onException(Function) }
 */
public This onError(Function<? super Exception,T> val){
  return onException(val);
}","/** 
 * @deprecated since 0.6; use {@link #onException(Function)} 
 */
public This onError(Function<? super Exception,T> val){
  return onException(val);
}",0.9935483870967742
79621,"/** 
 * Creates a list backed by the storage-medium. If a list with this name has already been created, then that existing list will be returned. The returned list is not a live view. Changes are made by calling reference.set(), and the view is refreshed by calling reference.get(). Changes are thread-safe, but callers must be careful not to overwrite other's changes. For example, the code below could overwrite another threads changes that are made to the map between the call to get() and the subsequent call to set(). <pre>  {@code Reference<List<String>> ref = storage.<String>createNonConcurrentList(""myid""); List<String> newval = ImmutableList.<String>builder().addAll(ref.get()).add(""another"").builder(); ref.set(newval);}</pre> TODO Aled says: Is getNonConcurrentList necessary? The purpose of this method, rather than just using  {@code Reference ref = getReference(id); ref.set(ImmutableList.of())}is to allow control of the serialization of the things inside the list  (e.g. switching the Location object to serialize a proxy object of some sort).  I don't want us to have to do deep inspection of every object being added to any map/ref.  Feels like we can use normal serialization unless the top-level object matches an  instanceof for special things like Entity, Location, etc. Peter responds: What I'm a bit scared of is that we need to write some kind of meta serialization mechanism  on top of the mechanisms provided by e.g. Hazelcast or Infinispan. Hazelcast has a very  extensive serialization library where you can plug in all kinds of serialization mechanisms.
 * @param id
 * @return
 */
@Beta <T>Reference<List<T>> getNonConcurrentList(String id);","/** 
 * Creates a list backed by the storage-medium. If a list with this name has already been created, then that existing list will be returned. The returned list is not a live view. Changes are made by calling reference.set(), and the view is refreshed by calling reference.get(). Changes are thread-safe, but callers must be careful not to overwrite other's changes. For example, the code below could overwrite another threads changes that are made to the map between the call to get() and the subsequent call to set(). <pre>  {@code Reference<List<String>> ref = storage.<String>createNonConcurrentList(""myid""); List<String> newval = ImmutableList.<String>builder().addAll(ref.get()).add(""another"").builder(); ref.set(newval);}</pre> TODO Aled says: Is getNonConcurrentList necessary? The purpose of this method, rather than just using  {@code Reference ref = getReference(id); ref.set(ImmutableList.of())}is to allow control of the serialization of the things inside the list  (e.g. switching the Location object to serialize a proxy object of some sort).  I don't want us to have to do deep inspection of every object being added to any map/ref.  Feels like we can use normal serialization unless the top-level object matches an  instanceof for special things like Entity, Location, etc. Peter responds: What I'm a bit scared of is that we need to write some kind of meta serialization mechanism  on top of the mechanisms provided by e.g. Hazelcast or Infinispan. Hazelcast has a very  extensive serialization library where you can plug in all kinds of serialization mechanisms.
 * @param id
 */
@Beta <T>Reference<List<T>> getNonConcurrentList(String id);",0.9967016491754124
79622,"/** 
 * Creates a reference to a value, backed by the storage-medium. If a reference with this  name has already been created, then that existing reference will be returned. The returned reference is a live view: changes made to the reference will be persisted,  and changes that others make will be reflected in the reference. The reference is thread-safe. No additional synchronization is required when getting/setting the reference.
 * @param id
 * @return
 */
<T>Reference<T> getReference(String id);","/** 
 * Creates a reference to a value, backed by the storage-medium. If a reference with this  name has already been created, then that existing reference will be returned. The returned reference is a live view: changes made to the reference will be persisted,  and changes that others make will be reflected in the reference. The reference is thread-safe. No additional synchronization is required when getting/setting the reference.
 * @param id
 */
<T>Reference<T> getReference(String id);",0.9889669007021064
79623,"/** 
 * Creates a map backed by the storage-medium. If a map with this name has already been created, then that existing map will be returned. The returned map is a live view: changes made to the map will be persisted, and changes  that others make will be reflected in the map. The map is thread-safe:   {@link Map#keySet()} etc will iterate over a snapshot view of thecontents.
 * @param id
 * @return
 */
<K,V>ConcurrentMap<K,V> getMap(String id);","/** 
 * Creates a map backed by the storage-medium. If a map with this name has already been created, then that existing map will be returned. The returned map is a live view: changes made to the map will be persisted, and changes  that others make will be reflected in the map. The map is thread-safe:   {@link Map#keySet()} etc will iterate over a snapshot view of thecontents.
 * @param id
 */
<K,V>ConcurrentMap<K,V> getMap(String id);",0.9876265466816648
79624,"/** 
 * records a location and private port against a publicIp and public port, to support   {@link #lookup(Location, int);}superfluous if   {@link #acquirePublicPort(String,Location,int)} was used;but strongly recommended if  {@link #acquirePublicPort(String,int)} was usede.g. if the location is not known ahead of time)
 */
public synchronized void associate(String publicIpId,int publicPort,Location l,int privatePort){
  PortMapping mapping=getPortMappingWithPublicSide(publicIpId,publicPort);
  log.debug(""String_Node_Str"" + publicPort + ""String_Node_Str""+ publicIpId+ ""String_Node_Str""+ privatePort+ ""String_Node_Str""+ l+ ""String_Node_Str""+ mapping+ ""String_Node_Str"");
  if (mapping == null)   throw new IllegalStateException(""String_Node_Str"" + publicIpId + ""String_Node_Str""+ publicPort);
  PortMapping mapping2=new PortMapping(publicIpId,publicPort,l,privatePort);
  mappings.put(makeKey(mapping.publicIpId,mapping.publicPort),mapping2);
}","/** 
 * records a location and private port against a publicIp and public port, to support   {@link #lookup(Location,int)}; superfluous if   {@link #acquirePublicPort(String,Location,int)} was used;but strongly recommended if  {@link #acquirePublicPortExplicit(String,int)} was usede.g. if the location is not known ahead of time)
 */
public synchronized void associate(String publicIpId,int publicPort,Location l,int privatePort){
  PortMapping mapping=getPortMappingWithPublicSide(publicIpId,publicPort);
  log.debug(""String_Node_Str"" + publicPort + ""String_Node_Str""+ publicIpId+ ""String_Node_Str""+ privatePort+ ""String_Node_Str""+ l+ ""String_Node_Str""+ mapping+ ""String_Node_Str"");
  if (mapping == null)   throw new IllegalStateException(""String_Node_Str"" + publicIpId + ""String_Node_Str""+ publicPort);
  PortMapping mapping2=new PortMapping(publicIpId,publicPort,l,privatePort);
  mappings.put(makeKey(mapping.publicIpId,mapping.publicPort),mapping2);
}",0.989517819706499
79625,"/** 
 * @deprecated since 0.6
 * @see removeChild(Location)
 */
@Deprecated protected boolean removeChildLocation(Location child){
  return removeChild(child);
}","/** 
 * @deprecated since 0.6
 * @see #removeChild(Location)
 */
@Deprecated protected boolean removeChildLocation(Location child){
  return removeChild(child);
}",0.9969040247678018
79626,"public AbstractLocation(Map properties){
  inConstruction=true;
  _legacyConstruction=!InternalLocationFactory.FactoryConstructionTracker.isConstructing();
  if (_legacyConstruction) {
    LOG.warn(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
    configure(properties);
    boolean deferConstructionChecks=(properties.containsKey(""String_Node_Str"") && TypeCoercions.coerce(properties.get(""String_Node_Str""),Boolean.class));
    if (!deferConstructionChecks) {
      FlagUtils.checkRequiredFields(this);
    }
  }
  inConstruction=false;
}","/** 
 * Construct a new instance of an AbstractLocation. The properties map recognizes the following keys: <ul> <li>name - a name for the location <li>parentLocation - the parent   {@link Location}</ul> Other common properties (retrieved via get/findLocationProperty) include: <ul> <li>latitude <li>longitude <li>displayName <li>iso3166 - list of iso3166-2 code strings <li>timeZone <li>abbreviatedName </ul>
 */
public AbstractLocation(Map properties){
  inConstruction=true;
  _legacyConstruction=!InternalLocationFactory.FactoryConstructionTracker.isConstructing();
  if (_legacyConstruction) {
    LOG.warn(""String_Node_Str"" + getClass().getName() + ""String_Node_Str"");
    configure(properties);
    boolean deferConstructionChecks=(properties.containsKey(""String_Node_Str"") && TypeCoercions.coerce(properties.get(""String_Node_Str""),Boolean.class));
    if (!deferConstructionChecks) {
      FlagUtils.checkRequiredFields(this);
    }
  }
  inConstruction=false;
}",0.7291803278688525
79627,"/** 
 * @deprecated since 0.6
 * @see addChild(Location)
 */
@Deprecated public void addChildLocation(Location child){
  addChild(child);
}","/** 
 * @deprecated since 0.6
 * @see #addChild(Location)
 */
@Deprecated public void addChildLocation(Location child){
  addChild(child);
}",0.996415770609319
79628,"/** 
 * @See {@link #setBaseClassPathForScanning(Iterable)} 
 */
public Iterable<URL> getBaseClassPathForScanning(){
  return baseClassPathForScanning;
}","/** 
 * @see #setBaseClassPathForScanning(Iterable)
 */
public Iterable<URL> getBaseClassPathForScanning(){
  return baseClassPathForScanning;
}",0.9629629629629628
79629,"/** 
 * Whether the entity's management lifecycle is complete (i.e. both ""onManagementStarting"" and ""onManagementStarted"" have been called, and it is has not been unmanaged). 
 * @return
 */
public boolean isFullyManaged(){
  return (nonDeploymentManagementContext == null) && currentlyDeployed.get();
}","/** 
 * Whether the entity's management lifecycle is complete (i.e. both ""onManagementStarting"" and ""onManagementStarted"" have been called, and it is has not been unmanaged). 
 */
public boolean isFullyManaged(){
  return (nonDeploymentManagementContext == null) && currentlyDeployed.get();
}",0.9815126050420168
79630,"/** 
 * @see SubscriptionContext#subscribeToMembers(Entity,Sensor,SensorEventListener) 
 */
public <T>SubscriptionHandle subscribeToMembers(Group parent,Sensor<T> sensor,SensorEventListener<? super T> listener){
  SubscriptionHandle handle=context.subscribeToMembers(parent,sensor,listener);
synchronized (subscriptions) {
    subscriptions.put(parent,handle);
  }
  return handle;
}","/** 
 * @see SubscriptionContext#subscribeToMembers(Group,Sensor,SensorEventListener)
 */
public <T>SubscriptionHandle subscribeToMembers(Group parent,Sensor<T> sensor,SensorEventListener<? super T> listener){
  SubscriptionHandle handle=context.subscribeToMembers(parent,sensor,listener);
synchronized (subscriptions) {
    subscriptions.put(parent,handle);
  }
  return handle;
}",0.9842931937172776
79631,"@Test public void testGenerateGroupIdInVcloud(){
  ConfigBag cfg=new ConfigBag().configure(JcloudsLocationConfig.CLOUD_PROVIDER,""String_Node_Str"").configure(JcloudsLocationConfig.CALLER_CONTEXT,""String_Node_Str"");
  String result=new CloudMachineNamer(cfg).generateNewGroupId();
  log.info(""String_Node_Str"" + result);
  Assert.assertTrue(result.length() <= 15);
  String user=Strings.maxlen(System.getProperty(""String_Node_Str""),2);
  Assert.assertTrue(result.indexOf(user) >= 0);
  Assert.assertTrue(result.indexOf(""String_Node_Str"") >= 0);
}","@Test public void testGenerateGroupIdInVcloud(){
  ConfigBag cfg=new ConfigBag().configure(JcloudsLocationConfig.CLOUD_PROVIDER,""String_Node_Str"").configure(JcloudsLocationConfig.CALLER_CONTEXT,""String_Node_Str"");
  String result=new CloudMachineNamer(cfg).generateNewGroupId();
  log.info(""String_Node_Str"" + result);
  Assert.assertTrue(result.length() <= 15);
  String user=Strings.maxlen(System.getProperty(""String_Node_Str""),2).toLowerCase();
  Assert.assertTrue(result.indexOf(user) >= 0);
  Assert.assertTrue(result.indexOf(""String_Node_Str"") >= 0);
}",0.9872958257713248
79632,"@Test public void testGenerateGroupIdWithEntity(){
  TestApplication app=ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class).displayName(""String_Node_Str""));
  TestEntity child=app.createAndManageChild(EntitySpecs.spec(TestEntity.class).displayName(""String_Node_Str""));
  try {
    ConfigBag cfg=new ConfigBag().configure(JcloudsLocationConfig.CALLER_CONTEXT,child);
    String result=new CloudMachineNamer(cfg).generateNewGroupId();
    log.info(""String_Node_Str"" + result);
    Assert.assertTrue(result.length() <= 60);
    String user=Strings.maxlen(System.getProperty(""String_Node_Str""),4);
    Assert.assertTrue(result.indexOf(user) >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"") >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"") >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"" + Strings.maxlen(app.getId(),4).toLowerCase()) >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"" + Strings.maxlen(child.getId(),4).toLowerCase()) >= 0);
  }
  finally {
    app.stop();
  }
}","@Test public void testGenerateGroupIdWithEntity(){
  TestApplication app=ApplicationBuilder.newManagedApp(EntitySpecs.spec(TestApplication.class).displayName(""String_Node_Str""));
  TestEntity child=app.createAndManageChild(EntitySpecs.spec(TestEntity.class).displayName(""String_Node_Str""));
  try {
    ConfigBag cfg=new ConfigBag().configure(JcloudsLocationConfig.CALLER_CONTEXT,child);
    String result=new CloudMachineNamer(cfg).generateNewGroupId();
    log.info(""String_Node_Str"" + result);
    Assert.assertTrue(result.length() <= 60);
    String user=Strings.maxlen(System.getProperty(""String_Node_Str""),4).toLowerCase();
    Assert.assertTrue(result.indexOf(user) >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"") >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"") >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"" + Strings.maxlen(app.getId(),4).toLowerCase()) >= 0);
    Assert.assertTrue(result.indexOf(""String_Node_Str"" + Strings.maxlen(child.getId(),4).toLowerCase()) >= 0);
  }
  finally {
    app.stop();
  }
}",0.9933712121212122
79633,"@Override public void customize(){
  newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(format(""String_Node_Str"",getInstallDir(),getVersion()),""String_Node_Str"").execute();
  SshMachineLocation machine=getMachine();
  BrooklynNode entity=getEntity();
  String brooklynPropertiesTempRemotePath=String.format(""String_Node_Str"",getRunDir());
  String brooklynPropertiesRemotePath=entity.getConfig(BrooklynNode.BROOKLYN_PROPERTIES_REMOTE_PATH);
  String brooklynPropertiesContents=entity.getConfig(BrooklynNode.BROOKLYN_PROPERTIES_CONTENTS);
  String brooklynPropertiesUri=entity.getConfig(BrooklynNode.BROOKLYN_PROPERTIES_URI);
  if (brooklynPropertiesContents != null || brooklynPropertiesUri != null) {
    if (brooklynPropertiesContents != null) {
      machine.copyTo(new ByteArrayInputStream(brooklynPropertiesContents.getBytes()),brooklynPropertiesTempRemotePath);
    }
 else     if (brooklynPropertiesUri != null) {
      InputStream propertiesStream=new ResourceUtils(entity).getResourceFromUrl(brooklynPropertiesUri);
      machine.copyTo(propertiesStream,brooklynPropertiesTempRemotePath);
    }
    newScript(CUSTOMIZING).body.append(format(""String_Node_Str"",brooklynPropertiesTempRemotePath,brooklynPropertiesRemotePath)).execute();
  }
  String brooklynCatalogTempRemotePath=String.format(""String_Node_Str"",getRunDir());
  String brooklynCatalogRemotePath=entity.getConfig(BrooklynNode.BROOKLYN_CATALOG_REMOTE_PATH);
  String brooklynCatalogContents=entity.getConfig(BrooklynNode.BROOKLYN_CATALOG_CONTENTS);
  String brooklynCatalogUri=entity.getConfig(BrooklynNode.BROOKLYN_CATALOG_URI);
  if (brooklynCatalogContents != null || brooklynCatalogUri != null) {
    if (brooklynCatalogContents != null) {
      machine.copyTo(new ByteArrayInputStream(brooklynCatalogContents.getBytes()),brooklynCatalogTempRemotePath);
    }
 else     if (brooklynCatalogUri != null) {
      InputStream catalogStream=new ResourceUtils(entity).getResourceFromUrl(brooklynCatalogUri);
      machine.copyTo(catalogStream,brooklynCatalogTempRemotePath);
    }
    newScript(CUSTOMIZING).body.append(format(""String_Node_Str"",brooklynCatalogTempRemotePath,brooklynCatalogRemotePath)).execute();
  }
  for (  Map.Entry<String,String> entry : getEntity().getAttribute(BrooklynNode.COPY_TO_RUNDIR).entrySet()) {
    Map<String,String> substitutions=ImmutableMap.of(""String_Node_Str"",getRunDir());
    String localResource=entry.getKey();
    String remotePath=entry.getValue();
    String resolvedRemotePath=remotePath;
    for (    Map.Entry<String,String> substitution : substitutions.entrySet()) {
      String key=substitution.getKey();
      String val=substitution.getValue();
      resolvedRemotePath=resolvedRemotePath.replace(""String_Node_Str"" + key + ""String_Node_Str"",val).replace(""String_Node_Str"" + key,val);
    }
    machine.copyTo(MutableMap.of(""String_Node_Str"",""String_Node_Str""),new ResourceUtils(entity).getResourceFromUrl(localResource),resolvedRemotePath);
  }
  for (  String f : getEntity().getClasspath()) {
    String toinstall;
    if (new File(f).isDirectory()) {
      try {
        File jarFile=JarBuilder.buildJar(new File(f));
        toinstall=jarFile.getAbsolutePath();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + f,e);
      }
    }
 else {
      toinstall=f;
    }
    int result=machine.installTo(new ResourceUtils(entity),toinstall,getRunDir() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    if (result != 0)     throw new IllegalStateException(format(""String_Node_Str"",f,entity,machine));
    String destName=f;
    destName=destName.contains(""String_Node_Str"") ? destName.substring(0,destName.indexOf('?')) : destName;
    destName=destName.substring(destName.lastIndexOf('/') + 1);
    if (destName.toLowerCase().endsWith(""String_Node_Str"")) {
      result=machine.run(format(""String_Node_Str"",getRunDir(),destName));
    }
 else     if (destName.toLowerCase().endsWith(""String_Node_Str"") || destName.toLowerCase().endsWith(""String_Node_Str"")) {
      result=machine.run(format(""String_Node_Str"",getRunDir(),destName));
    }
 else     if (destName.toLowerCase().endsWith(""String_Node_Str"")) {
      result=machine.run(format(""String_Node_Str"",getRunDir(),destName));
    }
    if (result != 0)     throw new IllegalStateException(format(""String_Node_Str"",f,entity,machine));
  }
}","@Override public void customize(){
  newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(format(""String_Node_Str"",getInstallDir(),getVersion()),""String_Node_Str"").execute();
  SshMachineLocation machine=getMachine();
  BrooklynNode entity=getEntity();
  String brooklynPropertiesTempRemotePath=String.format(""String_Node_Str"",getRunDir());
  String brooklynPropertiesRemotePath=entity.getConfig(BrooklynNode.BROOKLYN_PROPERTIES_REMOTE_PATH);
  String brooklynPropertiesContents=entity.getConfig(BrooklynNode.BROOKLYN_PROPERTIES_CONTENTS);
  String brooklynPropertiesUri=entity.getConfig(BrooklynNode.BROOKLYN_PROPERTIES_URI);
  if (brooklynPropertiesContents != null || brooklynPropertiesUri != null) {
    if (brooklynPropertiesContents != null) {
      machine.copyTo(new ByteArrayInputStream(brooklynPropertiesContents.getBytes()),brooklynPropertiesTempRemotePath);
    }
 else     if (brooklynPropertiesUri != null) {
      InputStream propertiesStream=new ResourceUtils(entity).getResourceFromUrl(brooklynPropertiesUri);
      machine.copyTo(propertiesStream,brooklynPropertiesTempRemotePath);
    }
    newScript(CUSTOMIZING).failOnNonZeroResultCode().body.append(format(""String_Node_Str"",brooklynPropertiesRemotePath.subSequence(0,brooklynPropertiesRemotePath.lastIndexOf(""String_Node_Str""))),format(""String_Node_Str"",brooklynPropertiesTempRemotePath,brooklynPropertiesRemotePath)).execute();
  }
  String brooklynCatalogTempRemotePath=String.format(""String_Node_Str"",getRunDir());
  String brooklynCatalogRemotePath=entity.getConfig(BrooklynNode.BROOKLYN_CATALOG_REMOTE_PATH);
  String brooklynCatalogContents=entity.getConfig(BrooklynNode.BROOKLYN_CATALOG_CONTENTS);
  String brooklynCatalogUri=entity.getConfig(BrooklynNode.BROOKLYN_CATALOG_URI);
  if (brooklynCatalogContents != null || brooklynCatalogUri != null) {
    if (brooklynCatalogContents != null) {
      machine.copyTo(new ByteArrayInputStream(brooklynCatalogContents.getBytes()),brooklynCatalogTempRemotePath);
    }
 else     if (brooklynCatalogUri != null) {
      InputStream catalogStream=new ResourceUtils(entity).getResourceFromUrl(brooklynCatalogUri);
      machine.copyTo(catalogStream,brooklynCatalogTempRemotePath);
    }
    newScript(CUSTOMIZING).body.append(format(""String_Node_Str"",brooklynCatalogTempRemotePath,brooklynCatalogRemotePath)).execute();
  }
  for (  Map.Entry<String,String> entry : getEntity().getAttribute(BrooklynNode.COPY_TO_RUNDIR).entrySet()) {
    Map<String,String> substitutions=ImmutableMap.of(""String_Node_Str"",getRunDir());
    String localResource=entry.getKey();
    String remotePath=entry.getValue();
    String resolvedRemotePath=remotePath;
    for (    Map.Entry<String,String> substitution : substitutions.entrySet()) {
      String key=substitution.getKey();
      String val=substitution.getValue();
      resolvedRemotePath=resolvedRemotePath.replace(""String_Node_Str"" + key + ""String_Node_Str"",val).replace(""String_Node_Str"" + key,val);
    }
    machine.copyTo(MutableMap.of(""String_Node_Str"",""String_Node_Str""),new ResourceUtils(entity).getResourceFromUrl(localResource),resolvedRemotePath);
  }
  for (  String f : getEntity().getClasspath()) {
    String toinstall;
    if (new File(f).isDirectory()) {
      try {
        File jarFile=JarBuilder.buildJar(new File(f));
        toinstall=jarFile.getAbsolutePath();
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"" + f,e);
      }
    }
 else {
      toinstall=f;
    }
    int result=machine.installTo(new ResourceUtils(entity),toinstall,getRunDir() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    if (result != 0)     throw new IllegalStateException(format(""String_Node_Str"",f,entity,machine));
    String destName=f;
    destName=destName.contains(""String_Node_Str"") ? destName.substring(0,destName.indexOf('?')) : destName;
    destName=destName.substring(destName.lastIndexOf('/') + 1);
    if (destName.toLowerCase().endsWith(""String_Node_Str"")) {
      result=machine.run(format(""String_Node_Str"",getRunDir(),destName));
    }
 else     if (destName.toLowerCase().endsWith(""String_Node_Str"") || destName.toLowerCase().endsWith(""String_Node_Str"")) {
      result=machine.run(format(""String_Node_Str"",getRunDir(),destName));
    }
 else     if (destName.toLowerCase().endsWith(""String_Node_Str"")) {
      result=machine.run(format(""String_Node_Str"",getRunDir(),destName));
    }
    if (result != 0)     throw new IllegalStateException(format(""String_Node_Str"",f,entity,machine));
  }
}",0.979847738468428
79634,"private String getValueForDisplay(EntityLocal entity,Object value){
  if (value instanceof Future) {
    if (((Future)value).isDone()) {
      try {
        value=((Future)value).get();
      }
 catch (      Exception e) {
        value=""String_Node_Str"" + value + ""String_Node_Str""+ e+ ""String_Node_Str"";
      }
    }
  }
  return (value != null) ? value.toString() : null;
}","private String getValueForDisplay(EntityLocal entity,Object value){
  return brooklyn().getStringValueForDisplay(value);
}",0.3486973947895792
79635,"@Override public Map<String,Object> batchConfigRead(String application,String entityToken,String policyToken){
  Policy policy=brooklyn().getPolicy(application,entityToken,policyToken);
  Map<ConfigKey<?>,Object> source=policy.getAllConfig();
  Map<String,Object> result=Maps.newLinkedHashMap();
  for (  Map.Entry<ConfigKey<?>,Object> ek : source.entrySet()) {
    result.put(ek.getKey().getName(),getValueForDisplay(policy,ek.getValue()));
  }
  return result;
}","@Override public Map<String,Object> batchConfigRead(String application,String entityToken,String policyToken){
  Policy policy=brooklyn().getPolicy(application,entityToken,policyToken);
  Map<ConfigKey<?>,Object> source=policy.getAllConfig();
  Map<String,Object> result=Maps.newLinkedHashMap();
  for (  Map.Entry<ConfigKey<?>,Object> ek : source.entrySet()) {
    result.put(ek.getKey().getName(),getStringValueForDisplay(brooklyn(),policy,ek.getValue()));
  }
  return result;
}",0.982010582010582
79636,"@Override public Response set(String application,String entityToken,String policyToken,String configKeyName,String value){
  Policy policy=brooklyn().getPolicy(application,entityToken,policyToken);
  ConfigKey<?> ck=policy.getPolicyType().getConfigKey(configKeyName);
  if (ck == null)   throw WebResourceUtils.notFound(""String_Node_Str"",configKeyName,policy,entityToken);
  policy.setConfig((ConfigKey)ck,TypeCoercions.coerce(value,ck.getType()));
  return Response.status(Response.Status.OK).build();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Response set(String application,String entityToken,String policyToken,String configKeyName,String value){
  Policy policy=brooklyn().getPolicy(application,entityToken,policyToken);
  ConfigKey<?> ck=policy.getPolicyType().getConfigKey(configKeyName);
  if (ck == null)   throw WebResourceUtils.notFound(""String_Node_Str"",configKeyName,policy,entityToken);
  policy.setConfig((ConfigKey)ck,TypeCoercions.coerce(value,ck.getType()));
  return Response.status(Response.Status.OK).build();
}",0.9464788732394366
79637,"@Override public String get(String application,String entityToken,String policyToken,String configKeyName){
  Policy policy=brooklyn().getPolicy(application,entityToken,policyToken);
  ConfigKey<?> ck=policy.getPolicyType().getConfigKey(configKeyName);
  if (ck == null)   throw WebResourceUtils.notFound(""String_Node_Str"",configKeyName,policy,entityToken);
  return getValueForDisplay(policy,policy.getConfig(ck));
}","@Override public String get(String application,String entityToken,String policyToken,String configKeyName){
  Policy policy=brooklyn().getPolicy(application,entityToken,policyToken);
  ConfigKey<?> ck=policy.getPolicyType().getConfigKey(configKeyName);
  if (ck == null)   throw WebResourceUtils.notFound(""String_Node_Str"",configKeyName,policy,entityToken);
  return getStringValueForDisplay(brooklyn(),policy,policy.getConfig(ck));
}",0.9800235017626322
79638,"@Override public List<PolicyConfigSummary> list(final String application,final String entityToken,final String policyToken){
  EntityLocal entity=brooklyn().getEntity(application,entityToken);
  Policy policy=brooklyn().getPolicy(entity,policyToken);
  List<PolicyConfigSummary> result=Lists.newArrayList();
  for (  ConfigKey<?> key : policy.getPolicyType().getConfigKeys()) {
    result.add(PolicyTransformer.policyConfigSummary(entity,policy,key));
  }
  return result;
}","@Override public List<PolicyConfigSummary> list(final String application,final String entityToken,final String policyToken){
  EntityLocal entity=brooklyn().getEntity(application,entityToken);
  Policy policy=brooklyn().getPolicy(entity,policyToken);
  List<PolicyConfigSummary> result=Lists.newArrayList();
  for (  ConfigKey<?> key : policy.getPolicyType().getConfigKeys()) {
    result.add(PolicyTransformer.policyConfigSummary(brooklyn(),entity,policy,key));
  }
  return result;
}",0.9885297184567258
79639,"public static PolicyConfigSummary policyConfigSummary(EntityLocal entity,Policy policy,ConfigKey<?> config){
  String applicationUri=""String_Node_Str"" + entity.getApplicationId();
  String entityUri=applicationUri + ""String_Node_Str"" + entity.getId();
  String policyUri=entityUri + ""String_Node_Str"" + policy.getId();
  Map<String,URI> links=ImmutableMap.<String,URI>builder().put(""String_Node_Str"",URI.create(policyUri + ""String_Node_Str"" + config.getName())).put(""String_Node_Str"",URI.create(applicationUri)).put(""String_Node_Str"",URI.create(entityUri)).put(""String_Node_Str"",URI.create(policyUri)).build();
  return new PolicyConfigSummary(config.getName(),config.getTypeName(),config.getDescription(),config.getDefaultValue(),false,links);
}","public static PolicyConfigSummary policyConfigSummary(BrooklynRestResourceUtils utils,EntityLocal entity,Policy policy,ConfigKey<?> config){
  String applicationUri=""String_Node_Str"" + entity.getApplicationId();
  String entityUri=applicationUri + ""String_Node_Str"" + entity.getId();
  String policyUri=entityUri + ""String_Node_Str"" + policy.getId();
  Map<String,URI> links=ImmutableMap.<String,URI>builder().put(""String_Node_Str"",URI.create(policyUri + ""String_Node_Str"" + config.getName())).put(""String_Node_Str"",URI.create(applicationUri)).put(""String_Node_Str"",URI.create(entityUri)).put(""String_Node_Str"",URI.create(policyUri)).build();
  return new PolicyConfigSummary(config.getName(),config.getTypeName(),config.getDescription(),PolicyConfigResource.getStringValueForDisplay(utils,policy,config.getDefaultValue()),config.isReconfigurable(),links);
}",0.9102244389027432
79640,"public void added(Entity member){
synchronized (mutex) {
    Optional<Location> location=Iterables.tryFind(member.getLocations(),Predicates.instanceOf(SshMachineLocation.class));
    if (location.isPresent() && Strings.isNonBlank(member.getAttribute(Attributes.ADDRESS))) {
      SshMachineLocation machine=(SshMachineLocation)location.get();
      if (!entityLocations.containsKey(machine)) {
        entityLocations.put(machine,member);
        update(machine);
      }
    }
 else {
      LOG.warn(""String_Node_Str"",member);
    }
  }
}","public void added(Entity member){
synchronized (mutex) {
    Optional<Location> location=Iterables.tryFind(member.getLocations(),Predicates.instanceOf(SshMachineLocation.class));
    if (location.isPresent() && Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) {
      SshMachineLocation machine=(SshMachineLocation)location.get();
      if (!entityLocations.containsKey(machine)) {
        entityLocations.put(machine,member);
        update(machine);
      }
    }
 else {
      LOG.warn(""String_Node_Str"",member);
    }
  }
}",0.9631675874769796
79641,"@Override public void onManagementStarted(){
  Map<?,?> flags=MutableMap.builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",ImmutableSet.of(Attributes.ADDRESS)).build();
  policy=new AbstractMembershipTrackingPolicy(flags){
    @Override protected void onEntityChange(    Entity member){
      added(member);
    }
    @Override protected void onEntityAdded(    Entity member){
    }
    @Override protected void onEntityRemoved(    Entity member){
      removed(member);
    }
  }
;
  addPolicy(policy);
  policy.setGroup(entities);
  for (  Entity each : entities.getMembers()) {
    added(each);
  }
}","@Override public void onManagementStarted(){
  Map<?,?> flags=MutableMap.builder().put(""String_Node_Str"",""String_Node_Str"").put(""String_Node_Str"",ImmutableSet.of(getConfig(HOSTNAME_SENSOR))).build();
  policy=new AbstractMembershipTrackingPolicy(flags){
    @Override protected void onEntityChange(    Entity member){
      added(member);
    }
    @Override protected void onEntityAdded(    Entity member){
    }
    @Override protected void onEntityRemoved(    Entity member){
      removed(member);
    }
  }
;
  addPolicy(policy);
  policy.setGroup(entities);
  for (  Entity each : entities.getMembers()) {
    added(each);
  }
}",0.9682539682539684
79642,"public void update(SshMachineLocation machine){
synchronized (mutex) {
    String[] templateList=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (    String fileName : templateList) {
      String contents=((BindDnsServerSshDriver)getDriver()).processTemplate(""String_Node_Str"" + fileName);
      machine.copyTo(new ByteArrayInputStream(contents.getBytes()),""String_Node_Str"" + fileName);
    }
    machine.execCommands(""String_Node_Str"",ImmutableList.of(CommonCommands.sudo(""String_Node_Str"")));
  }
}","public void update(SshMachineLocation machine){
synchronized (mutex) {
    String[] templateList=new String[]{""String_Node_Str"",""String_Node_Str""};
    for (    String fileName : templateList) {
      String contents=((BindDnsServerSshDriver)getDriver()).processTemplate(""String_Node_Str"" + fileName);
      machine.copyTo(new ByteArrayInputStream(contents.getBytes()),""String_Node_Str"" + fileName);
      machine.execScript(""String_Node_Str"",ImmutableList.of(CommonCommands.sudo(""String_Node_Str"" + fileName + ""String_Node_Str""+ fileName)));
    }
    machine.execCommands(""String_Node_Str"",ImmutableList.of(CommonCommands.sudo(""String_Node_Str"")));
  }
}",0.8441449031171019
79643,"@Override public void stop(){
  newScript(MutableMap.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),STOPPING).body.append(CommonCommands.sudo(""String_Node_Str"")).execute();
}","@Override public void stop(){
  newScript(MutableMap.of(""String_Node_Str"",false),STOPPING).body.append(CommonCommands.sudo(""String_Node_Str"")).execute();
}",0.8435754189944135
79644,"@Override public void install(){
  List<String> commands=ImmutableList.of(CommonCommands.installPackage(MutableMap.of(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
  newScript(MutableMap.of(""String_Node_Str"",""String_Node_Str""),INSTALLING).failOnNonZeroResultCode().body.append(commands).execute();
}","@Override public void install(){
  List<String> commands=ImmutableList.of(CommonCommands.installPackage(MutableMap.of(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""));
  newScript(INSTALLING).failOnNonZeroResultCode().body.append(commands).execute();
}",0.9106830122591943
79645,"@Override public boolean isRunning(){
  return newScript(MutableMap.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),CHECK_RUNNING).body.append(CommonCommands.sudo(""String_Node_Str"")).execute() == 0;
}","@Override public boolean isRunning(){
  return newScript(MutableMap.of(""String_Node_Str"",false),CHECK_RUNNING).body.append(CommonCommands.sudo(""String_Node_Str"")).execute() == 0;
}",0.8627450980392157
79646,"@Override public void launch(){
  newScript(MutableMap.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),LAUNCHING).body.append(CommonCommands.sudo(""String_Node_Str"")).execute();
}","@Override public void launch(){
  newScript(MutableMap.of(""String_Node_Str"",false),LAUNCHING).body.append(CommonCommands.sudo(""String_Node_Str"")).execute();
}",0.8461538461538461
79647,"@Override public void customize(){
  Map<String,Object> ports=new HashMap<String,Object>();
  ports.put(""String_Node_Str"",entity.getAttribute(BindDnsServer.DNS_PORT));
  NetworkUtils.checkPortsValid(ports);
  newScript(MutableMap.of(""String_Node_Str"",""String_Node_Str""),CUSTOMIZING).body.append(CommonCommands.sudo(""String_Node_Str""),CommonCommands.sudo(""String_Node_Str""),CommonCommands.sudo(""String_Node_Str"")).execute();
}","@Override public void customize(){
  Integer dnsPort=getEntity().getDnsPort();
  Map<String,Object> ports=MutableMap.<String,Object>of(""String_Node_Str"",dnsPort);
  NetworkUtils.checkPortsValid(ports);
  newScript(CUSTOMIZING).body.append(CommonCommands.sudo(""String_Node_Str"" + dnsPort + ""String_Node_Str""),CommonCommands.sudo(""String_Node_Str"" + dnsPort + ""String_Node_Str""),CommonCommands.sudo(""String_Node_Str"")).execute();
}",0.5714285714285714
79648,"public void run(){
  try {
    if (timeout > 0) {
      Thread.sleep(timeout);
      if (!ended.get()) {
        log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str""));
        proc.destroy();
        killed.set(true);
      }
    }
  }
 catch (  Exception e) {
  }
}","public void run(){
  if (timeout <= 0)   return;
  try {
    Thread.sleep(timeout);
    if (!ended.get()) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str""));
      }
      proc.destroy();
      killed.set(true);
    }
  }
 catch (  Exception e) {
  }
}",0.8135593220338984
79649,"/** 
 * executes the single given command (words) with given environmnet (inherited if null) and cwd (. if null), feeding it the given input stream (if not null). logs I/O at debug (if not null). throws exception if return code non-zero, otherwise returns lines from stdout. <p> flags:  timeout (Duration), 0 for forever; default 60 seconds
 */
public static String[] exec(Map flags,final String[] cmd,String[] envp,File dir,String input,final Logger log,final Object context){
  Closer closer=Closer.create();
  try {
    log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str""));
    final Process proc=Runtime.getRuntime().exec(cmd,envp,dir);
    ByteArrayOutputStream stdoutB=new ByteArrayOutputStream();
    ByteArrayOutputStream stderrB=new ByteArrayOutputStream();
    PrintStream stdoutP=new GroovyPrintStream(stdoutB);
    PrintStream stderrP=new GroovyPrintStream(stderrB);
    @SuppressWarnings(""String_Node_Str"") StreamGobbler stdoutG=new StreamGobbler(proc.getInputStream(),stdoutP,log).setLogPrefix(""String_Node_Str"" + context + ""String_Node_Str"");
    stdoutG.start();
    closer.register(stdoutG);
    @SuppressWarnings(""String_Node_Str"") StreamGobbler stderrG=new StreamGobbler(proc.getErrorStream(),stderrP,log).setLogPrefix(""String_Node_Str"" + context + ""String_Node_Str"");
    stderrG.start();
    closer.register(stderrG);
    if (input != null && input.length() > 0) {
      proc.getOutputStream().write(input.getBytes());
      proc.getOutputStream().flush();
    }
    long timeout2=TIMEOUT;
    Object tf=flags.get(""String_Node_Str"");
    if (tf instanceof Number)     timeout2=((Number)tf).longValue();
 else     if (tf instanceof Duration)     timeout2=((Duration)tf).toMilliseconds();
 else     if (tf instanceof TimeDuration)     timeout2=((TimeDuration)tf).toMilliseconds();
    if (tf != null)     timeout2=(Long)tf;
    final long timeout=timeout2;
    final AtomicBoolean ended=new AtomicBoolean(false);
    final AtomicBoolean killed=new AtomicBoolean(false);
    Thread t=new Thread(new Runnable(){
      public void run(){
        try {
          if (timeout > 0) {
            Thread.sleep(timeout);
            if (!ended.get()) {
              log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str""));
              proc.destroy();
              killed.set(true);
            }
          }
        }
 catch (        Exception e) {
        }
      }
    }
);
    if (TIMEOUT > 0)     t.start();
    int exitCode=proc.waitFor();
    ended.set(true);
    if (TIMEOUT > 0)     t.interrupt();
    stdoutG.blockUntilFinished();
    stderrG.blockUntilFinished();
    if (exitCode != 0 || killed.get()) {
      String message=killed.get() ? ""String_Node_Str"" : ""String_Node_Str"" + exitCode;
      log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str"")+ ""String_Node_Str""+ message);
      String e=""String_Node_Str"" + message + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str"");
      log.warn(e + ""String_Node_Str"" + stdoutB+ (stderrB.size() > 0 ? ""String_Node_Str"" + stderrB : ""String_Node_Str""));
      throw new IllegalStateException(e + ""String_Node_Str"");
    }
    log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str"")+ ""String_Node_Str"");
    return stdoutB.toString().split(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw Exceptions.propagate(e);
  }
 finally {
    Streams.closeQuietly(closer);
  }
}","/** 
 * Executes the given command. <p> Uses the given environmnet (inherited if null) and cwd (  {@literal .} if null),feeding it the given input stream (if not null) and logging I/O at debug (if not null). <p> flags:  timeout (Duration), 0 for forever; default 60 seconds
 * @throws IllegalStateException if return code non-zero
 * @return lines from stdout.
 */
public static String[] exec(Map flags,final String[] cmd,String[] envp,File dir,String input,final Logger log,final Object context){
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",context,Strings.join(cmd,""String_Node_Str""));
  }
  Closer closer=Closer.create();
  try {
    final Process proc=Runtime.getRuntime().exec(cmd,envp,dir);
    ByteArrayOutputStream stdoutB=new ByteArrayOutputStream();
    ByteArrayOutputStream stderrB=new ByteArrayOutputStream();
    PrintStream stdoutP=new GroovyPrintStream(stdoutB);
    PrintStream stderrP=new GroovyPrintStream(stderrB);
    @SuppressWarnings(""String_Node_Str"") StreamGobbler stdoutG=new StreamGobbler(proc.getInputStream(),stdoutP,log).setLogPrefix(""String_Node_Str"" + context + ""String_Node_Str"");
    stdoutG.start();
    closer.register(stdoutG);
    @SuppressWarnings(""String_Node_Str"") StreamGobbler stderrG=new StreamGobbler(proc.getErrorStream(),stderrP,log).setLogPrefix(""String_Node_Str"" + context + ""String_Node_Str"");
    stderrG.start();
    closer.register(stderrG);
    if (input != null && input.length() > 0) {
      proc.getOutputStream().write(input.getBytes());
      proc.getOutputStream().flush();
    }
    final long timeout=getTimeoutMs(flags);
    final AtomicBoolean ended=new AtomicBoolean(false);
    final AtomicBoolean killed=new AtomicBoolean(false);
    Thread timeoutThread=new Thread(new Runnable(){
      public void run(){
        if (timeout <= 0)         return;
        try {
          Thread.sleep(timeout);
          if (!ended.get()) {
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str""));
            }
            proc.destroy();
            killed.set(true);
          }
        }
 catch (        Exception e) {
        }
      }
    }
);
    if (timeout > 0)     timeoutThread.start();
    int exitCode=proc.waitFor();
    ended.set(true);
    if (timeout > 0)     timeoutThread.interrupt();
    stdoutG.blockUntilFinished();
    stderrG.blockUntilFinished();
    if (exitCode != 0 || killed.get()) {
      String message=killed.get() ? ""String_Node_Str"" : ""String_Node_Str"" + exitCode;
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str"")+ ""String_Node_Str""+ message);
      }
      String e=""String_Node_Str"" + message + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str"");
      log.warn(e + ""String_Node_Str"" + stdoutB+ (stderrB.size() > 0 ? ""String_Node_Str"" + stderrB : ""String_Node_Str""));
      throw new IllegalStateException(e + ""String_Node_Str"");
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + context + ""String_Node_Str""+ Strings.join(cmd,""String_Node_Str"")+ ""String_Node_Str"");
    }
    return stdoutB.toString().split(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw Exceptions.propagate(e);
  }
catch (  InterruptedException e) {
    throw Exceptions.propagate(e);
  }
 finally {
    Streams.closeQuietly(closer);
  }
}",0.3895281933256617
79650,"/** 
 * returns the items with exactly one ""/"" between items (whether or not the individual items start or end with /), except where character before the / is a : (url syntax) in which case it will permit multiple (will not remove any) 
 */
public static String mergePaths(String... items){
  StringBuilder result=new StringBuilder();
  for (  String item : items) {
    boolean trimThisMerge=result.length() > 0 && !result.toString().endsWith(""String_Node_Str"") && !result.toString().endsWith(""String_Node_Str"") && !result.toString().endsWith(""String_Node_Str"");
    if (trimThisMerge) {
      while (result.charAt(result.length() - 1) == '/')       result.deleteCharAt(result.length() - 1);
      result.append('/');
    }
    int i=result.length();
    result.append(item);
    if (trimThisMerge) {
      while (result.charAt(i) == '/')       result.deleteCharAt(i);
    }
  }
  return result.toString();
}","/** 
 * returns the items with exactly one ""/"" between items (whether or not the individual items start or end with /), except where character before the / is a : (url syntax) in which case it will permit multiple (will not remove any) 
 */
public static String mergePaths(String... items){
  StringBuilder result=new StringBuilder();
  for (  String item : items) {
    boolean trimThisMerge=result.length() > 0 && !result.toString().endsWith(""String_Node_Str"") && !result.toString().endsWith(""String_Node_Str"") && !result.toString().endsWith(""String_Node_Str"");
    if (trimThisMerge) {
      while (result.charAt(result.length() - 1) == '/')       result.deleteCharAt(result.length() - 1);
      result.append('/');
    }
    int i=result.length();
    result.append(item);
    if (trimThisMerge) {
      while (result.length() > i && result.charAt(i) == '/')       result.deleteCharAt(i);
    }
  }
  return result.toString();
}",0.9875067897881586
79651,"protected void waitForApplicationToBeRunning(URI applicationRef) throws InterruptedException, TimeoutException {
  int count=0;
  while (getApplicationStatus(applicationRef) != ApplicationSummary.Status.RUNNING) {
    if (getApplicationStatus(applicationRef) == ApplicationSummary.Status.ERROR)     throw new RuntimeException(""String_Node_Str"");
    Thread.sleep(100);
    count+=1;
    if (count >= 100) {
      throw new TimeoutException(""String_Node_Str"");
    }
  }
}","protected void waitForApplicationToBeRunning(final URI applicationRef){
  boolean started=Repeater.create(""String_Node_Str"").until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      ApplicationSummary.Status status=getApplicationStatus(applicationRef);
      if (status == ApplicationSummary.Status.ERROR) {
        fail(""String_Node_Str"");
      }
      return status == ApplicationSummary.Status.RUNNING;
    }
  }
).every(10,TimeUnit.SECONDS).limitTimeTo(3,TimeUnit.MINUTES).run();
  assertTrue(started);
}",0.3251231527093596
79652,"protected void waitForPageNotFoundResponse(String resource,Class<?> clazz) throws InterruptedException, TimeoutException {
  int count=0;
  while (true) {
    try {
      client().resource(resource).get(clazz);
    }
 catch (    UniformInterfaceException e) {
      if (e.getResponse().getStatus() == 404) {
        break;
      }
    }
    Thread.sleep(100);
    count+=1;
    if (count > 200) {
      throw new TimeoutException(""String_Node_Str"" + resource);
    }
  }
}","protected void waitForPageNotFoundResponse(final String resource,final Class<?> clazz){
  boolean found=Repeater.create(""String_Node_Str"").until(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      try {
        client().resource(resource).get(clazz);
        return false;
      }
 catch (      UniformInterfaceException e) {
        return e.getResponse().getStatus() == 404;
      }
    }
  }
).every(1,TimeUnit.SECONDS).limitTimeTo(30,TimeUnit.SECONDS).run();
  assertTrue(found);
}",0.3390514631685166
79653,"public static ManagementContext newManagementContext(Map<?,?> props){
  return new LocalManagementContext(props);
}","public static ManagementContext newManagementContext(Map<?,?> props){
  return new LocalManagementContext(BrooklynProperties.Factory.newEmpty().addFromMap(props));
}",0.8214285714285714
79654,"public static <T>T waitInTaskForAttributeReady(Entity source,AttributeSensor<T> sensor,Predicate<? super T> ready){
  T value=source.getAttribute(sensor);
  if (ready == null)   ready=GroovyJavaMethods.truthPredicate();
  if (ready.apply(value))   return value;
  BasicTask current=(BasicTask)Tasks.current();
  if (current == null)   throw new IllegalStateException(""String_Node_Str"");
  Entity entity=Iterables.find(current.getTags(),Predicates.instanceOf(Entity.class));
  if (entity == null)   throw new IllegalStateException(""String_Node_Str"" + current + ""String_Node_Str""+ current.getStatusDetail(false)+ ""String_Node_Str"");
  final AtomicReference<T> data=new AtomicReference<T>();
  final Semaphore semaphore=new Semaphore(0);
  SubscriptionHandle subscription=null;
  try {
    subscription=((EntityInternal)entity).getSubscriptionContext().subscribe(source,sensor,new SensorEventListener<T>(){
      public void onEvent(      SensorEvent<T> event){
        data.set(event.getValue());
        semaphore.release();
      }
    }
);
    value=source.getAttribute(sensor);
    while (!ready.apply(value)) {
      current.setBlockingDetails(""String_Node_Str"" + source + ""String_Node_Str""+ sensor);
      semaphore.acquire();
      current.setBlockingDetails(null);
      value=data.get();
    }
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"",sensor,source);
    return value;
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw Throwables.propagate(e);
  }
 finally {
    if (subscription != null) {
      ((EntityInternal)entity).getSubscriptionContext().unsubscribe(subscription);
    }
  }
}","public static <T>T waitInTaskForAttributeReady(Entity source,AttributeSensor<T> sensor,Predicate<? super T> ready){
  T value=source.getAttribute(sensor);
  if (ready == null)   ready=GroovyJavaMethods.truthPredicate();
  if (ready.apply(value))   return value;
  BasicTask current=(BasicTask)Tasks.current();
  if (current == null)   throw new IllegalStateException(""String_Node_Str"");
  Entity entity=(Entity)Iterables.find(current.getTags(),Predicates.instanceOf(Entity.class));
  if (entity == null)   throw new IllegalStateException(""String_Node_Str"" + current + ""String_Node_Str""+ current.getStatusDetail(false)+ ""String_Node_Str"");
  final AtomicReference<T> data=new AtomicReference<T>();
  final Semaphore semaphore=new Semaphore(0);
  SubscriptionHandle subscription=null;
  try {
    subscription=((EntityInternal)entity).getSubscriptionContext().subscribe(source,sensor,new SensorEventListener<T>(){
      public void onEvent(      SensorEvent<T> event){
        data.set(event.getValue());
        semaphore.release();
      }
    }
);
    value=source.getAttribute(sensor);
    while (!ready.apply(value)) {
      current.setBlockingDetails(""String_Node_Str"" + source + ""String_Node_Str""+ sensor);
      semaphore.acquire();
      current.setBlockingDetails(null);
      value=data.get();
    }
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"",sensor,source);
    return value;
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw Throwables.propagate(e);
  }
 finally {
    if (subscription != null) {
      ((EntityInternal)entity).getSubscriptionContext().unsubscribe(subscription);
    }
  }
}",0.9975859987929994
79655,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object applyToKeyInMap(ListConfigKey<T> key,Map target){
  if (clearFirst)   StructuredModifications.clearing().applyToKeyInMap(key,target);
  for (  T o : this)   target.put(key.subKey(),o);
  return null;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Object applyToKeyInMap(ListConfigKey<T> key,Map target){
  if (clearFirst) {
    StructuredModification<StructuredConfigKey> clearing=StructuredModifications.clearing();
    clearing.applyToKeyInMap(key,target);
  }
  for (  T o : this)   target.put(key.subKey(),o);
  return null;
}",0.8763693270735524
79656,"@SuppressWarnings({""String_Node_Str""}) @Override public Object applyToKeyInMap(MapConfigKey<V> key,Map target){
  if (clearFirst)   StructuredModifications.clearing().applyToKeyInMap(key,target);
  return key.applyValueToMap(new LinkedHashMap<String,V>(this),target);
}","@SuppressWarnings({""String_Node_Str""}) @Override public Object applyToKeyInMap(MapConfigKey<V> key,Map target){
  if (clearFirst) {
    StructuredModification<StructuredConfigKey> clearing=StructuredModifications.clearing();
    clearing.applyToKeyInMap(key,target);
  }
  return key.applyValueToMap(new LinkedHashMap<String,V>(this),target);
}",0.8711256117455138
79657,"public LocalManagementContext(BrooklynProperties brooklynProperties){
  super(brooklynProperties);
}","public LocalManagementContext(BrooklynProperties brooklynProperties){
  super(brooklynProperties);
  configMap.putAll(checkNotNull(brooklynProperties,""String_Node_Str""));
}",0.7352941176470589
79658,"public AbstractGroupImpl(Map<?,?> props,Entity parent){
  super(props,parent);
  setAttribute(Changeable.GROUP_SIZE,0);
}","public AbstractGroupImpl(Map props,Entity parent){
  super(props,parent);
  setAttribute(Changeable.GROUP_SIZE,0);
}",0.978902953586498
79659,public RebindSupport<T> getRebindSupport();,public RebindSupport getRebindSupport();,0.963855421686747
79660,"/** 
 * Add a child   {@link Entity}, and set this entity as its parent, returning the added child. TODO Signature will change to   {@code <T extends Entity> T addChild(T child)}, but that currently breaks groovy AbstractEntity subclasses sometimes so deferring that until (hopefully) the next release.
 */
Entity addChild(Entity child);","/** 
 * Creates an   {@link Entity} from the given spec and adds it, setting this entity as the parent,returning the added child. 
 */
<T extends Entity>T addChild(EntitySpec<T> spec);",0.4875239923224568
79661,"@Override public Application getApplication(){
  if (getParent() == null) {
    if (application != null)     return application;
    return this;
  }
  return getParent().getApplication();
}","@Override public Application getApplication(){
  if (application != null) {
    if (application.getId().equals(getId())) {
      if (getProxy() != null)       return (Application)getProxy();
    }
    return application;
  }
  if (getParent() == null) {
    if (getProxy() != null)     return (Application)getProxy();
    return this;
  }
  return getParent().getApplication();
}",0.5588752196836555
79662,"@Override protected synchronized void setApplication(Application app){
  application=app;
  super.setApplication(app);
}","@Override protected synchronized void setApplication(Application app){
  if (app.getId().equals(getId())) {
    application=getProxy() != null ? (Application)getProxy() : app;
  }
 else {
    application=app;
    if (getParent() == null) {
      log.warn(""String_Node_Str"" + this + ""String_Node_Str""+ app+ ""String_Node_Str""+ this+ ""String_Node_Str"");
    }
 else     if (getParent().getApplicationId().equals(app.getParent())) {
      log.warn(""String_Node_Str"" + this + ""String_Node_Str""+ app+ ""String_Node_Str""+ getParent()+ ""String_Node_Str""+ getParent().getApplication());
    }
  }
  super.setApplication(app);
}",0.2985074626865671
79663,"/** 
 * Finds the effectors defined on the entity's class, statics and optionally any non-static (discouraged).
 */
protected static Map<String,Effector<?>> findEffectors(Class<? extends Entity> clazz,Entity optionalEntity){
  try {
    Map<String,Effector<?>> result=Maps.newLinkedHashMap();
    Map<String,Field> sources=Maps.newLinkedHashMap();
    for (    Field f : clazz.getFields()) {
      if (Effector.class.isAssignableFrom(f.getType())) {
        if (!Modifier.isStatic(f.getModifiers())) {
          LOG.warn(""String_Node_Str"" + f + ""String_Node_Str""+ (optionalEntity != null ? optionalEntity : clazz));
          if (optionalEntity == null)           continue;
        }
        Effector<?> eff=(Effector<?>)f.get(optionalEntity);
        Effector<?> overwritten=result.put(eff.getName(),eff);
        Field source=sources.put(eff.getName(),f);
        if (overwritten != null && overwritten != eff)         LOG.warn(""String_Node_Str"",new Object[]{eff.getName(),optionalEntity != null ? optionalEntity : clazz,eff,f,overwritten,source});
      }
    }
    return result;
  }
 catch (  IllegalAccessException e) {
    throw Throwables.propagate(e);
  }
}","/** 
 * Finds the effectors defined on the entity's class, statics and optionally any non-static (discouraged).
 */
protected static Map<String,Effector<?>> findEffectors(Class<? extends Entity> clazz,Entity optionalEntity){
  try {
    Map<String,Effector<?>> result=Maps.newLinkedHashMap();
    Map<String,Field> sources=Maps.newLinkedHashMap();
    for (    Field f : clazz.getFields()) {
      if (Effector.class.isAssignableFrom(f.getType())) {
        if (!Modifier.isStatic(f.getModifiers())) {
          LOG.warn(""String_Node_Str"" + f + ""String_Node_Str""+ (optionalEntity != null ? optionalEntity : clazz));
          if (optionalEntity == null)           continue;
        }
        Effector<?> eff=(Effector<?>)f.get(optionalEntity);
        Effector<?> overwritten=result.put(eff.getName(),eff);
        Field source=sources.put(eff.getName(),f);
        if (overwritten != null && overwritten != eff) {
          LOG.warn(""String_Node_Str"",new Object[]{eff.getName(),optionalEntity != null ? optionalEntity : clazz,eff,f,overwritten,source});
        }
      }
    }
    return result;
  }
 catch (  IllegalAccessException e) {
    throw Throwables.propagate(e);
  }
}",0.9940323955669224
79664,"private Template buildTemplate(ComputeService computeService,BrooklynJcloudsSetupHolder setup){
  TemplateBuilder templateBuilder=(TemplateBuilder)setup.get(""String_Node_Str"");
  if (templateBuilder == null)   templateBuilder=new PortableTemplateBuilder();
 else   LOG.debug(""String_Node_Str"",new Object[]{templateBuilder,this,setup.getCallerContext()});
  if (setup.providerLocationId != null) {
    templateBuilder.locationId(setup.providerLocationId);
  }
  for (  Map.Entry<String,CustomizeTemplateBuilder> entry : SUPPORTED_TEMPLATE_BUILDER_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateBuilder code=entry.getValue();
    if (setup.use(name))     code.apply(templateBuilder,setup.allconf,setup.get(name));
  }
  if (templateBuilder instanceof PortableTemplateBuilder) {
    ((PortableTemplateBuilder)templateBuilder).attachComputeService(computeService);
    if (setup.use(""String_Node_Str"")) {
      if (((PortableTemplateBuilder)templateBuilder).isBlank()) {
        CharSequence defaultImageId=(CharSequence)setup.get(""String_Node_Str"");
        templateBuilder.imageId(defaultImageId.toString());
      }
    }
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,templateBuilder);
  }
  Template template;
  try {
    template=templateBuilder.build();
    if (template == null)     throw new NullPointerException(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ template+ ""String_Node_Str""+ template.getImage()+ ""String_Node_Str"");
    if (template.getImage() == null)     throw new NullPointerException(""String_Node_Str"");
    if (isBadTemplate(template.getImage())) {
      if (templateBuilder instanceof PortableTemplateBuilder) {
        if (((PortableTemplateBuilder)templateBuilder).getOsFamily() == null) {
          templateBuilder.osFamily(OsFamily.UBUNTU).osVersionMatches(""String_Node_Str"").os64Bit(true);
          Template template2=templateBuilder.build();
          if (template2 != null) {
            LOG.debug(""String_Node_Str"" + this + ""String_Node_Str"",template2,template);
            template=template2;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    try {
synchronized (this) {
        LOG.warn(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ e);
        if (!listedAvailableTemplatesOnNoSuchTemplate) {
          listedAvailableTemplatesOnNoSuchTemplate=true;
          LOG.info(""String_Node_Str"" + this + ""String_Node_Str"");
          Map m1=new LinkedHashMap(setup.allconf);
          if (m1.remove(""String_Node_Str"") != null)           m1.put(""String_Node_Str"",true);
          ComputeService computeServiceLessRestrictive=JcloudsUtil.buildOrFindComputeService(m1,new MutableMap());
          Set<? extends Image> imgs=computeServiceLessRestrictive.listImages();
          LOG.info(""String_Node_Str"" + imgs.size() + ""String_Node_Str""+ this);
          for (          Image img : imgs) {
            LOG.info(""String_Node_Str"" + img);
          }
        }
      }
    }
 catch (    Exception e2) {
      LOG.warn(""String_Node_Str"" + e2,e2);
    }
    throw new IllegalStateException(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str"",e);
  }
  TemplateOptions options=template.getOptions();
  for (  Map.Entry<String,CustomizeTemplateOptions> entry : SUPPORTED_TEMPLATE_OPTIONS_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateOptions code=entry.getValue();
    if (setup.use(name))     code.apply(options,setup.allconf,setup.get(name));
  }
  if (truth(setup.user) && !NON_ADDABLE_USERS.contains(setup.user) && !setup.user.equals(setup.loginUser)&& !truth(setup.isDontCreateUser())) {
    AdminAccess.Builder adminBuilder=AdminAccess.builder().adminUsername(setup.user).grantSudoToAdminUser(true);
    adminBuilder.adminPassword(setup.use(""String_Node_Str"") ? setup.password : Identifiers.makeRandomId(12));
    if (setup.publicKeyData != null)     adminBuilder.authorizeAdminPublicKey(true).adminPublicKey(setup.publicKeyData);
 else     adminBuilder.authorizeAdminPublicKey(false).adminPublicKey(""String_Node_Str"").lockSsh(true);
    adminBuilder.installAdminPrivateKey(false).adminPrivateKey(""String_Node_Str"");
    adminBuilder.resetLoginPassword(true).loginPassword(Identifiers.makeRandomId(12));
    adminBuilder.lockSsh(true);
    options.runScript(adminBuilder.build());
  }
 else   if (truth(setup.publicKeyData)) {
    options.authorizePublicKey(setup.publicKeyData);
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,options);
  }
  LOG.debug(""String_Node_Str"",new Object[]{template,options,this,setup.getCallerContext()});
  return template;
}","private Template buildTemplate(ComputeService computeService,BrooklynJcloudsSetupHolder setup){
  TemplateBuilder templateBuilder=(TemplateBuilder)setup.get(""String_Node_Str"");
  if (templateBuilder == null)   templateBuilder=new PortableTemplateBuilder();
 else   LOG.debug(""String_Node_Str"",new Object[]{templateBuilder,this,setup.getCallerContext()});
  if (setup.providerLocationId != null) {
    templateBuilder.locationId(setup.providerLocationId);
  }
  for (  Map.Entry<String,CustomizeTemplateBuilder> entry : SUPPORTED_TEMPLATE_BUILDER_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateBuilder code=entry.getValue();
    if (setup.use(name))     code.apply(templateBuilder,setup.allconf,setup.get(name));
  }
  if (templateBuilder instanceof PortableTemplateBuilder) {
    ((PortableTemplateBuilder)templateBuilder).attachComputeService(computeService);
    if (setup.use(""String_Node_Str"")) {
      if (((PortableTemplateBuilder)templateBuilder).isBlank()) {
        CharSequence defaultImageId=(CharSequence)setup.get(""String_Node_Str"");
        templateBuilder.imageId(defaultImageId.toString());
      }
    }
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,templateBuilder);
  }
  Template template;
  try {
    template=templateBuilder.build();
    if (template == null)     throw new NullPointerException(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ template+ ""String_Node_Str""+ template.getImage()+ ""String_Node_Str"");
    if (template.getImage() == null)     throw new NullPointerException(""String_Node_Str"");
    if (isBadTemplate(template.getImage())) {
      if (templateBuilder instanceof PortableTemplateBuilder) {
        if (((PortableTemplateBuilder)templateBuilder).getOsFamily() == null) {
          templateBuilder.osFamily(OsFamily.UBUNTU).osVersionMatches(""String_Node_Str"").os64Bit(true);
          Template template2=templateBuilder.build();
          if (template2 != null) {
            LOG.debug(""String_Node_Str"" + this + ""String_Node_Str"",template2,template);
            template=template2;
          }
        }
      }
    }
  }
 catch (  AuthorizationException e) {
    LOG.warn(""String_Node_Str"" + e + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
  }
catch (  Exception e) {
    try {
synchronized (this) {
        LOG.warn(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ e);
        if (!listedAvailableTemplatesOnNoSuchTemplate) {
          listedAvailableTemplatesOnNoSuchTemplate=true;
          LOG.info(""String_Node_Str"" + this + ""String_Node_Str"");
          Map m1=new LinkedHashMap(setup.allconf);
          if (m1.remove(""String_Node_Str"") != null)           m1.put(""String_Node_Str"",true);
          ComputeService computeServiceLessRestrictive=JcloudsUtil.buildOrFindComputeService(m1,new MutableMap());
          Set<? extends Image> imgs=computeServiceLessRestrictive.listImages();
          LOG.info(""String_Node_Str"" + imgs.size() + ""String_Node_Str""+ this);
          for (          Image img : imgs) {
            LOG.info(""String_Node_Str"" + img);
          }
        }
      }
      throw new IllegalStateException(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str"",e);
    }
 catch (    Exception e2) {
      LOG.warn(""String_Node_Str"" + e2,e2);
      throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
    }
  }
  TemplateOptions options=template.getOptions();
  for (  Map.Entry<String,CustomizeTemplateOptions> entry : SUPPORTED_TEMPLATE_OPTIONS_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateOptions code=entry.getValue();
    if (setup.use(name))     code.apply(options,setup.allconf,setup.get(name));
  }
  if (truth(setup.user) && !NON_ADDABLE_USERS.contains(setup.user) && !setup.user.equals(setup.loginUser)&& !truth(setup.isDontCreateUser())) {
    AdminAccess.Builder adminBuilder=AdminAccess.builder().adminUsername(setup.user).grantSudoToAdminUser(true);
    adminBuilder.adminPassword(setup.use(""String_Node_Str"") ? setup.password : Identifiers.makeRandomId(12));
    if (setup.publicKeyData != null)     adminBuilder.authorizeAdminPublicKey(true).adminPublicKey(setup.publicKeyData);
 else     adminBuilder.authorizeAdminPublicKey(false).adminPublicKey(""String_Node_Str"").lockSsh(true);
    adminBuilder.installAdminPrivateKey(false).adminPrivateKey(""String_Node_Str"");
    adminBuilder.resetLoginPassword(true).loginPassword(Identifiers.makeRandomId(12));
    adminBuilder.lockSsh(true);
    options.runScript(adminBuilder.build());
  }
 else   if (truth(setup.publicKeyData)) {
    options.authorizePublicKey(setup.publicKeyData);
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,options);
  }
  LOG.debug(""String_Node_Str"",new Object[]{template,options,this,setup.getCallerContext()});
  return template;
}",0.822720840913685
79665,"/** 
 * Adds template options which are used for building, but not for matching/filtering.  (eg tags added here will be set on any machine created by this template, but will not be required when matching this template to existing machines) 
 */
public T addOptionalOptions(TemplateOptions options){
  additionalOptionalOptions.add(options);
  return (T)this;
}","/** 
 * Adds template options which are used for building, but not for matching/filtering.  (eg tags added here will be set on any machine created by this template, but will not be required when matching this template to existing machines) 
 */
@SuppressWarnings(""String_Node_Str"") public T addOptionalOptions(TemplateOptions options){
  additionalOptionalOptions.add(options);
  return (T)this;
}",0.95112285336856
79666,"protected String makeNonTrivialArgumentsString(){
  String s=super.makeNonTrivialArgumentsString();
  TemplateOptions aggr=computeAggregatedOptions(false);
  if (aggr.getInboundPorts().length > 0)   s=""String_Node_Str"" + Arrays.asList(aggr.getInboundPorts()) + (s != null && s.length() > 0 ? ""String_Node_Str"" + s : ""String_Node_Str"");
  if (!aggr.getUserMetadata().isEmpty())   s=""String_Node_Str"" + aggr.getUserMetadata() + (s != null && s.length() > 0 ? ""String_Node_Str"" + s : ""String_Node_Str"");
  if (!aggr.getTags().isEmpty())   s=""String_Node_Str"" + aggr.getTags() + (s != null && s.length() > 0 ? ""String_Node_Str"" + s : ""String_Node_Str"");
  return s;
}","protected String makeNonTrivialArgumentsString(){
  String s=super.makeNonTrivialArgumentsString();
  TemplateOptions aggr=computeAggregatedOptions(false);
  if (aggr.getInboundPorts().length > 0)   s=""String_Node_Str"" + Ints.asList(aggr.getInboundPorts()) + (s != null && s.length() > 0 ? ""String_Node_Str"" + s : ""String_Node_Str"");
  if (!aggr.getUserMetadata().isEmpty())   s=""String_Node_Str"" + aggr.getUserMetadata() + (s != null && s.length() > 0 ? ""String_Node_Str"" + s : ""String_Node_Str"");
  if (!aggr.getTags().isEmpty())   s=""String_Node_Str"" + aggr.getTags() + (s != null && s.length() > 0 ? ""String_Node_Str"" + s : ""String_Node_Str"");
  return s;
}",0.9939577039274924
79667,"private Template buildTemplate(ComputeService computeService,BrooklynJcloudsSetupHolder setup){
  TemplateBuilder templateBuilder=(TemplateBuilder)setup.get(""String_Node_Str"");
  if (templateBuilder == null)   templateBuilder=new PortableTemplateBuilder();
 else   LOG.debug(""String_Node_Str"",new Object[]{templateBuilder,this,setup.getCallerContext()});
  if (setup.providerLocationId != null) {
    templateBuilder.locationId(setup.providerLocationId);
  }
  for (  Map.Entry<String,CustomizeTemplateBuilder> entry : SUPPORTED_TEMPLATE_BUILDER_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateBuilder code=entry.getValue();
    if (setup.use(name))     code.apply(templateBuilder,setup.allconf,setup.get(name));
  }
  if (templateBuilder instanceof PortableTemplateBuilder) {
    ((PortableTemplateBuilder)templateBuilder).attachComputeService(computeService);
    if (setup.use(""String_Node_Str"")) {
      if (((PortableTemplateBuilder)templateBuilder).isBlank()) {
        CharSequence defaultImageId=(CharSequence)setup.get(""String_Node_Str"");
        templateBuilder.imageId(defaultImageId.toString());
      }
    }
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,templateBuilder);
  }
  Template template;
  try {
    template=templateBuilder.build();
    if (template == null)     throw new NullPointerException(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ template+ ""String_Node_Str""+ template.getImage()+ ""String_Node_Str"");
    if (template.getImage() == null)     throw new NullPointerException(""String_Node_Str"");
    if (isBadTemplate(template.getImage())) {
      if (templateBuilder instanceof PortableTemplateBuilder) {
        if (((PortableTemplateBuilder)templateBuilder).getOsFamily() == null) {
          templateBuilder.osFamily(OsFamily.UBUNTU).osVersionMatches(""String_Node_Str"").os64Bit(true);
          Template template2=templateBuilder.build();
          if (template2 != null) {
            LOG.debug(""String_Node_Str"" + this + ""String_Node_Str"",template2,template);
            template=template2;
          }
        }
      }
    }
  }
 catch (  AuthorizationException e) {
    LOG.warn(""String_Node_Str"" + e + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
  }
catch (  Exception e) {
    try {
synchronized (this) {
        LOG.warn(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ e);
        if (!listedAvailableTemplatesOnNoSuchTemplate) {
          listedAvailableTemplatesOnNoSuchTemplate=true;
          LOG.info(""String_Node_Str"" + this + ""String_Node_Str"");
          Map m1=new LinkedHashMap(setup.allconf);
          if (m1.remove(""String_Node_Str"") != null)           m1.put(""String_Node_Str"",true);
          ComputeService computeServiceLessRestrictive=JcloudsUtil.buildOrFindComputeService(m1,new MutableMap());
          Set<? extends Image> imgs=computeServiceLessRestrictive.listImages();
          LOG.info(""String_Node_Str"" + imgs.size() + ""String_Node_Str""+ this);
          for (          Image img : imgs) {
            LOG.info(""String_Node_Str"" + img);
          }
        }
      }
      throw new IllegalStateException(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str"",e);
    }
 catch (    Exception e2) {
      LOG.warn(""String_Node_Str"" + e2,e2);
      throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
    }
  }
  TemplateOptions options=template.getOptions();
  for (  Map.Entry<String,CustomizeTemplateOptions> entry : SUPPORTED_TEMPLATE_OPTIONS_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateOptions code=entry.getValue();
    if (setup.use(name))     code.apply(options,setup.allconf,setup.get(name));
  }
  if (truth(setup.user) && !NON_ADDABLE_USERS.contains(setup.user) && !setup.user.equals(setup.loginUser)&& !truth(setup.isDontCreateUser())) {
    AdminAccess.Builder adminBuilder=AdminAccess.builder().adminUsername(setup.user).grantSudoToAdminUser(true);
    adminBuilder.adminPassword(setup.use(""String_Node_Str"") ? setup.password : Identifiers.makeRandomId(12));
    if (setup.publicKeyData != null)     adminBuilder.authorizeAdminPublicKey(true).adminPublicKey(setup.publicKeyData);
 else     adminBuilder.authorizeAdminPublicKey(false).adminPublicKey(""String_Node_Str"").lockSsh(true);
    adminBuilder.installAdminPrivateKey(false).adminPrivateKey(""String_Node_Str"");
    adminBuilder.resetLoginPassword(true).loginPassword(Identifiers.makeRandomId(12));
    adminBuilder.lockSsh(true);
    options.runScript(adminBuilder.build());
  }
 else   if (truth(setup.publicKeyData)) {
    options.authorizePublicKey(setup.publicKeyData);
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,options);
  }
  LOG.debug(""String_Node_Str"",new Object[]{template,options,this,setup.getCallerContext()});
  return template;
}","private Template buildTemplate(ComputeService computeService,BrooklynJcloudsSetupHolder setup){
  TemplateBuilder templateBuilder=(TemplateBuilder)setup.get(""String_Node_Str"");
  if (templateBuilder == null)   templateBuilder=new PortableTemplateBuilder();
 else   LOG.debug(""String_Node_Str"",new Object[]{templateBuilder,this,setup.getCallerContext()});
  if (setup.providerLocationId != null) {
    templateBuilder.locationId(setup.providerLocationId);
  }
  for (  Map.Entry<String,CustomizeTemplateBuilder> entry : SUPPORTED_TEMPLATE_BUILDER_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateBuilder code=entry.getValue();
    if (setup.use(name))     code.apply(templateBuilder,setup.allconf,setup.get(name));
  }
  if (templateBuilder instanceof PortableTemplateBuilder) {
    ((PortableTemplateBuilder)templateBuilder).attachComputeService(computeService);
    if (setup.use(""String_Node_Str"")) {
      if (((PortableTemplateBuilder)templateBuilder).isBlank()) {
        CharSequence defaultImageId=(CharSequence)setup.get(""String_Node_Str"");
        templateBuilder.imageId(defaultImageId.toString());
      }
    }
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,templateBuilder);
  }
  Template template;
  try {
    template=templateBuilder.build();
    if (template == null)     throw new NullPointerException(""String_Node_Str"");
    LOG.debug(""String_Node_Str"" + this + ""String_Node_Str""+ template+ ""String_Node_Str""+ template.getImage()+ ""String_Node_Str"");
    if (template.getImage() == null)     throw new NullPointerException(""String_Node_Str"");
    if (isBadTemplate(template.getImage())) {
      if (templateBuilder instanceof PortableTemplateBuilder) {
        if (((PortableTemplateBuilder)templateBuilder).getOsFamily() == null) {
          templateBuilder.osFamily(OsFamily.UBUNTU).osVersionMatches(""String_Node_Str"").os64Bit(true);
          Template template2=templateBuilder.build();
          if (template2 != null) {
            LOG.debug(""String_Node_Str"" + this + ""String_Node_Str"",template2,template);
            template=template2;
          }
        }
      }
    }
  }
 catch (  AuthorizationException e) {
    LOG.warn(""String_Node_Str"" + e + ""String_Node_Str"");
    throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
  }
catch (  Exception e) {
    try {
synchronized (this) {
        LOG.warn(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str""+ e);
        if (!listedAvailableTemplatesOnNoSuchTemplate) {
          listedAvailableTemplatesOnNoSuchTemplate=true;
          LOG.info(""String_Node_Str"" + this + ""String_Node_Str"");
          Map m1=new LinkedHashMap(setup.allconf);
          if (m1.remove(""String_Node_Str"") != null)           m1.put(""String_Node_Str"",true);
          ComputeService computeServiceLessRestrictive=JcloudsUtil.buildOrFindComputeService(m1,new MutableMap());
          Set<? extends Image> imgs=computeServiceLessRestrictive.listImages();
          LOG.info(""String_Node_Str"" + imgs.size() + ""String_Node_Str""+ this);
          for (          Image img : imgs) {
            LOG.info(""String_Node_Str"" + img);
          }
        }
      }
    }
 catch (    Exception e2) {
      LOG.warn(""String_Node_Str"" + e2,e2);
      throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str""+ templateBuilder,e);
    }
    throw new IllegalStateException(""String_Node_Str"" + templateBuilder + ""String_Node_Str""+ this+ ""String_Node_Str"",e);
  }
  TemplateOptions options=template.getOptions();
  for (  Map.Entry<String,CustomizeTemplateOptions> entry : SUPPORTED_TEMPLATE_OPTIONS_PROPERTIES.entrySet()) {
    String name=entry.getKey();
    CustomizeTemplateOptions code=entry.getValue();
    if (setup.use(name))     code.apply(options,setup.allconf,setup.get(name));
  }
  if (truth(setup.user) && !NON_ADDABLE_USERS.contains(setup.user) && !setup.user.equals(setup.loginUser)&& !truth(setup.isDontCreateUser())) {
    AdminAccess.Builder adminBuilder=AdminAccess.builder().adminUsername(setup.user).grantSudoToAdminUser(true);
    adminBuilder.adminPassword(setup.use(""String_Node_Str"") ? setup.password : Identifiers.makeRandomId(12));
    if (setup.publicKeyData != null)     adminBuilder.authorizeAdminPublicKey(true).adminPublicKey(setup.publicKeyData);
 else     adminBuilder.authorizeAdminPublicKey(false).adminPublicKey(""String_Node_Str"").lockSsh(true);
    adminBuilder.installAdminPrivateKey(false).adminPrivateKey(""String_Node_Str"");
    adminBuilder.resetLoginPassword(true).loginPassword(Identifiers.makeRandomId(12));
    adminBuilder.lockSsh(true);
    options.runScript(adminBuilder.build());
  }
 else   if (truth(setup.publicKeyData)) {
    options.authorizePublicKey(setup.publicKeyData);
  }
  for (  JcloudsLocationCustomizer customizer : setup.customizers) {
    customizer.customize(computeService,options);
  }
  LOG.debug(""String_Node_Str"",new Object[]{template,options,this,setup.getCallerContext()});
  return template;
}",0.9760737399490096
79668,"private int execProcess(Map<String,?> props,List<String> cmd){
  OutputStream out=getOptionalVal(props,PROP_OUT_STREAM);
  OutputStream err=getOptionalVal(props,PROP_ERR_STREAM);
  StreamGobbler errgobbler=null;
  StreamGobbler outgobbler=null;
  ProcessBuilder pb=new ProcessBuilder(cmd);
  try {
    Process p=pb.start();
    if (true) {
      InputStream outstream=p.getInputStream();
      outgobbler=new StreamGobbler(outstream,out,LOG).setLogPrefix(""String_Node_Str"");
      outgobbler.start();
    }
    if (true) {
      InputStream errstream=p.getErrorStream();
      errgobbler=new StreamGobbler(errstream,err,LOG).setLogPrefix(""String_Node_Str"");
      errgobbler.start();
    }
    return p.waitFor();
  }
 catch (  InterruptedException e) {
    throw Exceptions.propagate(e);
  }
catch (  IOException e) {
    throw Exceptions.propagate(e);
  }
 finally {
    closeWhispering(outgobbler,this);
    closeWhispering(errgobbler,this);
  }
}","private int execProcess(Map<String,?> props,List<String> cmd){
  OutputStream out=getOptionalVal(props,PROP_OUT_STREAM);
  OutputStream err=getOptionalVal(props,PROP_ERR_STREAM);
  StreamGobbler errgobbler=null;
  StreamGobbler outgobbler=null;
  ProcessBuilder pb=new ProcessBuilder(cmd);
  try {
    Process p=pb.start();
    if (true) {
      InputStream outstream=p.getInputStream();
      outgobbler=new StreamGobbler(outstream,out,LOG).setLogPrefix(""String_Node_Str"");
      outgobbler.start();
    }
    if (true) {
      InputStream errstream=p.getErrorStream();
      errgobbler=new StreamGobbler(errstream,err,LOG).setLogPrefix(""String_Node_Str"");
      errgobbler.start();
    }
    int result=p.waitFor();
    outgobbler.blockUntilFinished();
    errgobbler.blockUntilFinished();
    if (result == 255)     throw new SshException(""String_Node_Str"");
    return result;
  }
 catch (  InterruptedException e) {
    throw Exceptions.propagate(e);
  }
catch (  IOException e) {
    throw Exceptions.propagate(e);
  }
 finally {
    closeWhispering(outgobbler,this);
    closeWhispering(errgobbler,this);
  }
}",0.9124334784712144
79669,"public static WebApplicationException notFound(String format,Object... args){
  String msg=String.format(format,args);
  if (log.isInfoEnabled())   log.info(""String_Node_Str"" + msg + ""String_Node_Str"");
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(new ApiError(msg)).build());
}","public static WebApplicationException notFound(String format,Object... args){
  String msg=String.format(format,args);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + msg + ""String_Node_Str"");
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).type(MediaType.APPLICATION_JSON_TYPE).entity(new ApiError(msg)).build());
}",0.8672566371681416
79670,"public static WebApplicationException preconditionFailed(String format,Object... args){
  String msg=String.format(format,args);
  if (log.isInfoEnabled())   log.info(""String_Node_Str"" + msg + ""String_Node_Str"");
  throw new WebApplicationException(Response.status(Response.Status.PRECONDITION_FAILED).entity(new ApiError(msg)).build());
}","public static WebApplicationException preconditionFailed(String format,Object... args){
  String msg=String.format(format,args);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + msg + ""String_Node_Str"");
  throw new WebApplicationException(Response.status(Response.Status.PRECONDITION_FAILED).type(MediaType.APPLICATION_JSON_TYPE).entity(new ApiError(msg)).build());
}",0.8746518105849582
79671,"public JcloudsSshMachineLocation obtain(Map flags) throws NoMachinesAvailableException {
  BrooklynJcloudsSetupHolder setup=new BrooklynJcloudsSetupHolder(this).useConfig(flags).apply();
  String groupId=elvis(setup.remove(""String_Node_Str""),generateGroupId());
  final ComputeService computeService=JcloudsUtil.buildOrFindComputeService(setup.allconf,setup.unusedConf);
  NodeMetadata node=null;
  try {
    LOG.info(""String_Node_Str"" + elvis(setup.providerLocationId,setup.provider) + ""String_Node_Str""+ setup.getCallerContext());
    Template template=buildTemplate(computeService,setup);
    setup.warnIfUnused(""String_Node_Str"");
    Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup(groupId,1,template);
    node=Iterables.getOnlyElement(nodes,null);
    LOG.debug(""String_Node_Str"",node,setup.getCallerContext());
    if (node == null) {
      throw new IllegalStateException(""String_Node_Str"" + setup.provider + ""String_Node_Str""+ setup.providerLocationId+ ""String_Node_Str""+ setup.getCallerContext());
    }
    LoginCredentials expectedCredentials=setup.customCredentials;
    if (expectedCredentials != null) {
      Object oldUsername=setup.setUser(expectedCredentials.getUser());
      LOG.debug(""String_Node_Str"",new Object[]{node,expectedCredentials.getUser(),oldUsername});
      if (truth(expectedCredentials.getPassword()))       setup.setPassword(expectedCredentials.getPassword());
      if (truth(expectedCredentials.getPrivateKey()))       setup.setPrivateKeyData(expectedCredentials.getPrivateKey());
    }
    if (expectedCredentials == null) {
      expectedCredentials=LoginCredentials.fromCredentials(node.getCredentials());
      String user=setup.user;
      LOG.debug(""String_Node_Str"",new Object[]{node,user,expectedCredentials.getUser()});
      if (truth(expectedCredentials.getUser())) {
        if (user == null) {
          setup.setUser(user=expectedCredentials.getUser());
        }
 else         if (""String_Node_Str"".equals(user) && ROOT_ALIASES.contains(expectedCredentials.getUser())) {
          LOG.warn(""String_Node_Str"" + expectedCredentials.getUser() + ""String_Node_Str"",node);
          setup.setUser(user=expectedCredentials.getUser());
        }
      }
      String pkd=elvis(setup.privateKeyData,expectedCredentials.getPrivateKey());
      String pwd=elvis(setup.password,expectedCredentials.getPassword());
      if (user == null || (pkd == null && pwd == null)) {
        String missing=(user == null ? ""String_Node_Str"" : ""String_Node_Str"");
        LOG.warn(""String_Node_Str"" + missing + ""String_Node_Str""+ this+ ""String_Node_Str""+ node+ ""String_Node_Str"");
        expectedCredentials=null;
      }
 else {
        LoginCredentials.Builder expectedCredentialsBuilder=LoginCredentials.builder().user(user);
        if (pkd != null)         expectedCredentialsBuilder.privateKey(pkd);
        if (pwd != null)         expectedCredentialsBuilder.password(pwd);
        expectedCredentials=expectedCredentialsBuilder.build();
      }
    }
    if (expectedCredentials != null)     node=NodeMetadataBuilder.fromNodeMetadata(node).credentials(expectedCredentials).build();
 else     expectedCredentials=LoginCredentials.fromCredentials(node.getCredentials());
    if (setup.get(""String_Node_Str"") != null ? truth(setup.get(""String_Node_Str"")) : true) {
      String vmIp=JcloudsUtil.getFirstReachableAddress(node);
      final NodeMetadata nodeRef=node;
      final LoginCredentials expectedCredentialsRef=expectedCredentials;
      long delayMs=-1;
      try {
        delayMs=Time.parseTimeString(""String_Node_Str"" + setup.get(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      if (delayMs <= 0)       delayMs=START_SSHABLE_TIMEOUT;
      LOG.info(""String_Node_Str"",new Object[]{elvis(setup.get(""String_Node_Str""),setup.get(""String_Node_Str"")),setup.getCallerContext(),setup.user,vmIp});
      boolean reachable=new Repeater().repeat().every(1,SECONDS).until(new Callable<Boolean>(){
        public Boolean call(){
          Statement statement=Statements.newStatementList(exec(""String_Node_Str""));
          ExecResponse response=computeService.runScriptOnNode(nodeRef.getId(),statement,overrideLoginCredentials(expectedCredentialsRef));
          return response.getExitStatus() == 0;
        }
      }
).limitTimeTo(delayMs,MILLISECONDS).run();
      if (!reachable) {
        throw new IllegalStateException(""String_Node_Str"" + setup.user + ""String_Node_Str""+ vmIp+ ""String_Node_Str""+ setup.getCallerContext()+ ""String_Node_Str""+ Time.makeTimeString(delayMs));
      }
    }
    String vmHostname=getPublicHostname(node,setup);
    Map sshConfig=generateSshConfig(setup,node);
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"",new Object[]{setup.user,vmHostname,setup.getCallerContext(),Entities.sanitize(sshConfig)});
    JcloudsSshMachineLocation sshLocByHostname=new JcloudsSshMachineLocation(MutableMap.builder().put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",setup.user).put(""String_Node_Str"",sshConfig).put(""String_Node_Str"",localTempDir).build(),this,node);
    sshLocByHostname.setParentLocation(this);
    vmInstanceIds.put(sshLocByHostname,node.getId());
    return sshLocByHostname;
  }
 catch (  RunNodesException e) {
    if (e.getNodeErrors().size() > 0) {
      node=Iterables.get(e.getNodeErrors().keySet(),0);
    }
    LOG.error(""String_Node_Str"",e.getMessage());
    throw Throwables.propagate(e);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e.getMessage());
    LOG.info(Throwables.getStackTraceAsString(e));
    throw Throwables.propagate(e);
  }
 finally {
  }
}","public JcloudsSshMachineLocation obtain(Map flags) throws NoMachinesAvailableException {
  BrooklynJcloudsSetupHolder setup=new BrooklynJcloudsSetupHolder(this).useConfig(flags).apply();
  String groupId=elvis(setup.remove(""String_Node_Str""),generateGroupId(setup.provider));
  final ComputeService computeService=JcloudsUtil.buildOrFindComputeService(setup.allconf,setup.unusedConf);
  NodeMetadata node=null;
  try {
    LOG.info(""String_Node_Str"" + elvis(setup.providerLocationId,setup.provider) + ""String_Node_Str""+ setup.getCallerContext());
    Template template=buildTemplate(computeService,setup);
    setup.warnIfUnused(""String_Node_Str"");
    Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup(groupId,1,template);
    node=Iterables.getOnlyElement(nodes,null);
    LOG.debug(""String_Node_Str"",node,setup.getCallerContext());
    if (node == null) {
      throw new IllegalStateException(""String_Node_Str"" + setup.provider + ""String_Node_Str""+ setup.providerLocationId+ ""String_Node_Str""+ setup.getCallerContext());
    }
    LoginCredentials expectedCredentials=setup.customCredentials;
    if (expectedCredentials != null) {
      Object oldUsername=setup.setUser(expectedCredentials.getUser());
      LOG.debug(""String_Node_Str"",new Object[]{node,expectedCredentials.getUser(),oldUsername});
      if (truth(expectedCredentials.getPassword()))       setup.setPassword(expectedCredentials.getPassword());
      if (truth(expectedCredentials.getPrivateKey()))       setup.setPrivateKeyData(expectedCredentials.getPrivateKey());
    }
    if (expectedCredentials == null) {
      expectedCredentials=LoginCredentials.fromCredentials(node.getCredentials());
      String user=setup.user;
      LOG.debug(""String_Node_Str"",new Object[]{node,user,expectedCredentials.getUser()});
      if (truth(expectedCredentials.getUser())) {
        if (user == null) {
          setup.setUser(user=expectedCredentials.getUser());
        }
 else         if (""String_Node_Str"".equals(user) && ROOT_ALIASES.contains(expectedCredentials.getUser())) {
          LOG.warn(""String_Node_Str"" + expectedCredentials.getUser() + ""String_Node_Str"",node);
          setup.setUser(user=expectedCredentials.getUser());
        }
      }
      String pkd=elvis(setup.privateKeyData,expectedCredentials.getPrivateKey());
      String pwd=elvis(setup.password,expectedCredentials.getPassword());
      if (user == null || (pkd == null && pwd == null)) {
        String missing=(user == null ? ""String_Node_Str"" : ""String_Node_Str"");
        LOG.warn(""String_Node_Str"" + missing + ""String_Node_Str""+ this+ ""String_Node_Str""+ node+ ""String_Node_Str"");
        expectedCredentials=null;
      }
 else {
        LoginCredentials.Builder expectedCredentialsBuilder=LoginCredentials.builder().user(user);
        if (pkd != null)         expectedCredentialsBuilder.privateKey(pkd);
        if (pwd != null)         expectedCredentialsBuilder.password(pwd);
        expectedCredentials=expectedCredentialsBuilder.build();
      }
    }
    if (expectedCredentials != null)     node=NodeMetadataBuilder.fromNodeMetadata(node).credentials(expectedCredentials).build();
 else     expectedCredentials=LoginCredentials.fromCredentials(node.getCredentials());
    if (setup.get(""String_Node_Str"") != null ? truth(setup.get(""String_Node_Str"")) : true) {
      String vmIp=JcloudsUtil.getFirstReachableAddress(node);
      final NodeMetadata nodeRef=node;
      final LoginCredentials expectedCredentialsRef=expectedCredentials;
      long delayMs=-1;
      try {
        delayMs=Time.parseTimeString(""String_Node_Str"" + setup.get(""String_Node_Str""));
      }
 catch (      Exception e) {
      }
      if (delayMs <= 0)       delayMs=START_SSHABLE_TIMEOUT;
      LOG.info(""String_Node_Str"",new Object[]{elvis(setup.get(""String_Node_Str""),setup.get(""String_Node_Str"")),setup.getCallerContext(),setup.user,vmIp});
      boolean reachable=new Repeater().repeat().every(1,SECONDS).until(new Callable<Boolean>(){
        public Boolean call(){
          Statement statement=Statements.newStatementList(exec(""String_Node_Str""));
          ExecResponse response=computeService.runScriptOnNode(nodeRef.getId(),statement,overrideLoginCredentials(expectedCredentialsRef));
          return response.getExitStatus() == 0;
        }
      }
).limitTimeTo(delayMs,MILLISECONDS).run();
      if (!reachable) {
        throw new IllegalStateException(""String_Node_Str"" + setup.user + ""String_Node_Str""+ vmIp+ ""String_Node_Str""+ setup.getCallerContext()+ ""String_Node_Str""+ Time.makeTimeString(delayMs));
      }
    }
    String vmHostname=getPublicHostname(node,setup);
    Map sshConfig=generateSshConfig(setup,node);
    if (LOG.isDebugEnabled())     LOG.debug(""String_Node_Str"",new Object[]{setup.user,vmHostname,setup.getCallerContext(),Entities.sanitize(sshConfig)});
    JcloudsSshMachineLocation sshLocByHostname=new JcloudsSshMachineLocation(MutableMap.builder().put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",vmHostname).put(""String_Node_Str"",setup.user).put(""String_Node_Str"",sshConfig).put(""String_Node_Str"",localTempDir).build(),this,node);
    sshLocByHostname.setParentLocation(this);
    vmInstanceIds.put(sshLocByHostname,node.getId());
    return sshLocByHostname;
  }
 catch (  RunNodesException e) {
    if (e.getNodeErrors().size() > 0) {
      node=Iterables.get(e.getNodeErrors().keySet(),0);
    }
    LOG.error(""String_Node_Str"",e.getMessage());
    throw Throwables.propagate(e);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e.getMessage());
    LOG.info(Throwables.getStackTraceAsString(e));
    throw Throwables.propagate(e);
  }
 finally {
  }
}",0.9987628137150936
79672,"public static String generateGroupId(){
  String user=System.getProperty(""String_Node_Str"");
  String rand=Identifiers.makeRandomId(6);
  String result=""String_Node_Str"" + Strings.maxlen(user,4) + ""String_Node_Str""+ rand;
  return result.toLowerCase();
}","public static String generateGroupId(String provider){
  String user=System.getProperty(""String_Node_Str"");
  String rand=Identifiers.makeRandomId((""String_Node_Str"".equals(provider)) ? 2 : 6);
  String result=""String_Node_Str"" + Strings.maxlen(user,4) + ""String_Node_Str""+ rand;
  return result.toLowerCase();
}",0.8975265017667845
79673,"public void shutdown(){
  running.set(false);
  interrupt();
}","/** 
 * @deprecate Use close() instead.
 */
@Deprecated public void shutdown(){
  close();
}",0.4285714285714285
79674,"@Override public Integer create() throws Exception {
  try {
    session=acquire(newSessionAction());
    shell=session.startShell();
    if (out != null) {
      InputStream outstream=shell.getInputStream();
      outgobbler=new StreamGobbler(outstream,out,(Logger)null);
      outgobbler.start();
    }
    if (err != null) {
      InputStream errstream=shell.getErrorStream();
      errgobbler=new StreamGobbler(errstream,err,(Logger)null);
      errgobbler.start();
    }
    OutputStream output=shell.getOutputStream();
    for (    CharSequence cmd : commands) {
      try {
        output.write(Strings.toUTF8ByteArray(cmd + ""String_Node_Str""));
        output.flush();
      }
 catch (      ConnectionException e) {
        if (!shell.isOpen()) {
          if (LOG.isDebugEnabled())           LOG.debug(""String_Node_Str"",SshjTool.this.toString(),commands);
          break;
        }
 else {
          throw e;
        }
      }
    }
    shell.sendEOF();
    output.close();
    try {
      int timeout=sshClientConnection.getSessionTimeout();
      long timeoutEnd=System.currentTimeMillis() + timeout;
      Exception last=null;
      do {
        if (!shell.isOpen() && ((SessionChannel)session).getExitStatus() != null)         break;
        boolean endBecauseReturned=(!shell.isOpen() || ((SessionChannel)session).getExitStatus() != null);
        try {
          shell.join(1000,TimeUnit.MILLISECONDS);
        }
 catch (        ConnectionException e) {
          last=e;
        }
        if (endBecauseReturned)         break;
      }
 while (timeout <= 0 || System.currentTimeMillis() < timeoutEnd);
      if (shell.isOpen() && ((SessionChannel)session).getExitStatus() == null) {
        LOG.debug(""String_Node_Str"",sshClientConnection.getSessionTimeout(),this);
        throw last;
      }
      return ((SessionChannel)session).getExitStatus();
    }
  finally {
      try {
        shell.close();
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"" + e);
      }
      try {
        if (outgobbler != null)         outgobbler.join();
        if (errgobbler != null)         errgobbler.join();
      }
 catch (      InterruptedException e) {
        LOG.warn(""String_Node_Str"" + commands,e);
        Thread.currentThread().interrupt();
      }
    }
  }
  finally {
    clear();
  }
}","@Override public Integer create() throws Exception {
  try {
    session=acquire(newSessionAction());
    shell=session.startShell();
    if (out != null) {
      InputStream outstream=shell.getInputStream();
      outgobbler=new StreamGobbler(outstream,out,(Logger)null);
      outgobbler.start();
    }
    if (err != null) {
      InputStream errstream=shell.getErrorStream();
      errgobbler=new StreamGobbler(errstream,err,(Logger)null);
      errgobbler.start();
    }
    OutputStream output=shell.getOutputStream();
    for (    CharSequence cmd : commands) {
      try {
        output.write(Strings.toUTF8ByteArray(cmd + ""String_Node_Str""));
        output.flush();
      }
 catch (      ConnectionException e) {
        if (!shell.isOpen()) {
          if (LOG.isDebugEnabled())           LOG.debug(""String_Node_Str"",SshjTool.this.toString(),commands);
          break;
        }
 else {
          throw e;
        }
      }
    }
    shell.sendEOF();
    closeWhispering(output,this);
    try {
      int timeout=sshClientConnection.getSessionTimeout();
      long timeoutEnd=System.currentTimeMillis() + timeout;
      Exception last=null;
      do {
        if (!shell.isOpen() && ((SessionChannel)session).getExitStatus() != null)         break;
        boolean endBecauseReturned=(!shell.isOpen() || ((SessionChannel)session).getExitStatus() != null);
        try {
          shell.join(1000,TimeUnit.MILLISECONDS);
        }
 catch (        ConnectionException e) {
          last=e;
        }
        if (endBecauseReturned)         break;
      }
 while (timeout <= 0 || System.currentTimeMillis() < timeoutEnd);
      if (shell.isOpen() && ((SessionChannel)session).getExitStatus() == null) {
        LOG.debug(""String_Node_Str"",sshClientConnection.getSessionTimeout(),this);
        throw last;
      }
      return ((SessionChannel)session).getExitStatus();
    }
  finally {
      closeWhispering(shell,this);
      shell=null;
      try {
        if (outgobbler != null)         outgobbler.join();
        if (errgobbler != null)         errgobbler.join();
      }
 catch (      InterruptedException e) {
        LOG.warn(""String_Node_Str"" + commands,e);
        Thread.currentThread().interrupt();
      }
    }
  }
  finally {
    clear();
  }
}",0.867579908675799
79675,"@Override public void close() throws IOException {
  super.close();
  if (sftp != null)   sftp.close();
}","@Override public void close() throws IOException {
  super.close();
  closeWhispering(sftp,this);
}",0.7941176470588235
79676,"@Override public void clear() throws TransportException, ConnectionException {
  if (session != null) {
    session.close();
  }
  if (shell != null) {
    shell.close();
  }
  if (outgobbler != null) {
    outgobbler.shutdown();
  }
  if (errgobbler != null) {
    errgobbler.shutdown();
  }
}","@Override public void clear() throws TransportException, ConnectionException {
  closeWhispering(session,this);
  closeWhispering(shell,this);
  closeWhispering(outgobbler,this);
  closeWhispering(errgobbler,this);
  session=null;
  shell=null;
}",0.3074074074074074
79677,"protected SshAction<Session> newSessionAction(){
  return new SshAction<Session>(){
    private Session session=null;
    @Override public void clear() throws TransportException, ConnectionException {
      if (session != null)       session.close();
    }
    @Override public Session create() throws Exception {
      checkConnected();
      session=sshClientConnection.ssh.startSession();
      allocatePTY(session);
      return session;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","protected SshAction<Session> newSessionAction(){
  return new SshAction<Session>(){
    private Session session=null;
    @Override public void clear() throws TransportException, ConnectionException {
      closeWhispering(session,this);
      session=null;
    }
    @Override public Session create() throws Exception {
      checkConnected();
      session=sshClientConnection.ssh.startSession();
      allocatePTY(session);
      return session;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}",0.9170549860205032
79678,"public void shutdown(){
  running.set(false);
  interrupt();
}","/** 
 * @deprecate Use close() instead.
 */
@Deprecated public void shutdown(){
  close();
}",0.4285714285714285
79679,"@Override public Integer create() throws Exception {
  try {
    session=acquire(newSessionAction());
    shell=session.startShell();
    if (out != null) {
      InputStream outstream=shell.getInputStream();
      outgobbler=new StreamGobbler(outstream,out,(Logger)null);
      outgobbler.start();
    }
    if (err != null) {
      InputStream errstream=shell.getErrorStream();
      errgobbler=new StreamGobbler(errstream,err,(Logger)null);
      errgobbler.start();
    }
    OutputStream output=shell.getOutputStream();
    for (    CharSequence cmd : commands) {
      try {
        output.write(Strings.toUTF8ByteArray(cmd + ""String_Node_Str""));
        output.flush();
      }
 catch (      ConnectionException e) {
        if (!shell.isOpen()) {
          if (LOG.isDebugEnabled())           LOG.debug(""String_Node_Str"",SshjTool.this.toString(),commands);
          break;
        }
 else {
          throw e;
        }
      }
    }
    shell.sendEOF();
    output.close();
    try {
      int timeout=sshClientConnection.getSessionTimeout();
      long timeoutEnd=System.currentTimeMillis() + timeout;
      Exception last=null;
      do {
        if (!shell.isOpen() && ((SessionChannel)session).getExitStatus() != null)         break;
        boolean endBecauseReturned=(!shell.isOpen() || ((SessionChannel)session).getExitStatus() != null);
        try {
          shell.join(1000,TimeUnit.MILLISECONDS);
        }
 catch (        ConnectionException e) {
          last=e;
        }
        if (endBecauseReturned)         break;
      }
 while (timeout <= 0 || System.currentTimeMillis() < timeoutEnd);
      if (shell.isOpen() && ((SessionChannel)session).getExitStatus() == null) {
        LOG.debug(""String_Node_Str"",sshClientConnection.getSessionTimeout(),this);
        throw last;
      }
      return ((SessionChannel)session).getExitStatus();
    }
  finally {
      try {
        shell.close();
      }
 catch (      Exception e) {
        LOG.debug(""String_Node_Str"" + e);
      }
      try {
        if (outgobbler != null)         outgobbler.join();
        if (errgobbler != null)         errgobbler.join();
      }
 catch (      InterruptedException e) {
        LOG.warn(""String_Node_Str"" + commands,e);
        Thread.currentThread().interrupt();
      }
    }
  }
  finally {
    clear();
  }
}","@Override public Integer create() throws Exception {
  try {
    session=acquire(newSessionAction());
    shell=session.startShell();
    if (out != null) {
      InputStream outstream=shell.getInputStream();
      outgobbler=new StreamGobbler(outstream,out,(Logger)null);
      outgobbler.start();
    }
    if (err != null) {
      InputStream errstream=shell.getErrorStream();
      errgobbler=new StreamGobbler(errstream,err,(Logger)null);
      errgobbler.start();
    }
    OutputStream output=shell.getOutputStream();
    for (    CharSequence cmd : commands) {
      try {
        output.write(Strings.toUTF8ByteArray(cmd + ""String_Node_Str""));
        output.flush();
      }
 catch (      ConnectionException e) {
        if (!shell.isOpen()) {
          if (LOG.isDebugEnabled())           LOG.debug(""String_Node_Str"",SshjTool.this.toString(),commands);
          break;
        }
 else {
          throw e;
        }
      }
    }
    shell.sendEOF();
    closeWhispering(output,this);
    try {
      int timeout=sshClientConnection.getSessionTimeout();
      long timeoutEnd=System.currentTimeMillis() + timeout;
      Exception last=null;
      do {
        if (!shell.isOpen() && ((SessionChannel)session).getExitStatus() != null)         break;
        boolean endBecauseReturned=(!shell.isOpen() || ((SessionChannel)session).getExitStatus() != null);
        try {
          shell.join(1000,TimeUnit.MILLISECONDS);
        }
 catch (        ConnectionException e) {
          last=e;
        }
        if (endBecauseReturned)         break;
      }
 while (timeout <= 0 || System.currentTimeMillis() < timeoutEnd);
      if (shell.isOpen() && ((SessionChannel)session).getExitStatus() == null) {
        LOG.debug(""String_Node_Str"",sshClientConnection.getSessionTimeout(),this);
        throw last;
      }
      return ((SessionChannel)session).getExitStatus();
    }
  finally {
      closeWhispering(shell,this);
      shell=null;
      try {
        if (outgobbler != null)         outgobbler.join();
        if (errgobbler != null)         errgobbler.join();
      }
 catch (      InterruptedException e) {
        LOG.warn(""String_Node_Str"" + commands,e);
        Thread.currentThread().interrupt();
      }
    }
  }
  finally {
    clear();
  }
}",0.867579908675799
79680,"@Override public void close() throws IOException {
  super.close();
  if (sftp != null)   sftp.close();
}","@Override public void close() throws IOException {
  super.close();
  closeWhispering(sftp,this);
}",0.7941176470588235
79681,"@Override public void clear() throws TransportException, ConnectionException {
  if (session != null) {
    session.close();
  }
  if (shell != null) {
    shell.close();
  }
  if (outgobbler != null) {
    outgobbler.shutdown();
  }
  if (errgobbler != null) {
    errgobbler.shutdown();
  }
}","@Override public void clear() throws TransportException, ConnectionException {
  closeWhispering(session,this);
  closeWhispering(shell,this);
  closeWhispering(outgobbler,this);
  closeWhispering(errgobbler,this);
  session=null;
  shell=null;
}",0.3074074074074074
79682,"protected SshAction<Session> newSessionAction(){
  return new SshAction<Session>(){
    private Session session=null;
    @Override public void clear() throws TransportException, ConnectionException {
      if (session != null)       session.close();
    }
    @Override public Session create() throws Exception {
      checkConnected();
      session=sshClientConnection.ssh.startSession();
      allocatePTY(session);
      return session;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","protected SshAction<Session> newSessionAction(){
  return new SshAction<Session>(){
    private Session session=null;
    @Override public void clear() throws TransportException, ConnectionException {
      closeWhispering(session,this);
      session=null;
    }
    @Override public Session create() throws Exception {
      checkConnected();
      session=sshClientConnection.ssh.startSession();
      allocatePTY(session);
      return session;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}",0.9170549860205032
79683,"private static void addGlobalProperties(BrooklynProperties p){
  File globalPropertiesFile=new File(p.getFirst(MutableMap.of(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"") + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"");
  if (globalPropertiesFile.exists()) {
    p.addFrom(globalPropertiesFile);
  }
}","private static void addGlobalProperties(BrooklynProperties p){
  String userHome=System.getProperty(""String_Node_Str"");
  File globalPropertiesFile=new File(userHome + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"");
  if (globalPropertiesFile.exists()) {
    p.addFrom(globalPropertiesFile);
  }
}",0.7670043415340086
79684,"private static void addGlobalProperties(BrooklynProperties p){
  File globalPropertiesFile=new File(p.getFirst(MutableMap.of(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str"") + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"");
  if (globalPropertiesFile.exists()) {
    p.addFrom(globalPropertiesFile);
  }
}","private static void addGlobalProperties(BrooklynProperties p){
  String userHome=System.getProperty(""String_Node_Str"");
  File globalPropertiesFile=new File(userHome + File.separatorChar + ""String_Node_Str""+ File.separatorChar+ ""String_Node_Str"");
  if (globalPropertiesFile.exists()) {
    p.addFrom(globalPropertiesFile);
  }
}",0.7670043415340086
79685,"public Set<SubscriptionHandle> getSubscriptionsForEntitySensor(Entity source,Sensor<?> sensor){
  Set<SubscriptionHandle> subscriptions=new LinkedHashSet<SubscriptionHandle>();
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,null)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,null)),Collections.emptySet()));
  return subscriptions;
}","public synchronized Set<SubscriptionHandle> getSubscriptionsForEntitySensor(Entity source,Sensor<?> sensor){
  Set<SubscriptionHandle> subscriptions=new LinkedHashSet<SubscriptionHandle>();
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,null)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,null)),Collections.emptySet()));
  return subscriptions;
}",0.9903345724907064
79686,"@Override public TimeDuration apply(final Object input){
  return JavaGroovyEquivalents.toTimeDuration(input);
}","@Override public AtomicInteger apply(final String input){
  return new AtomicInteger(Integer.parseInt(input));
}",0.6071428571428571
79687,"public Set<SubscriptionHandle> getSubscriptionsForEntitySensor(Entity source,Sensor<?> sensor){
  Set<SubscriptionHandle> subscriptions=new LinkedHashSet<SubscriptionHandle>();
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,null)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,null)),Collections.emptySet()));
  return subscriptions;
}","public synchronized Set<SubscriptionHandle> getSubscriptionsForEntitySensor(Entity source,Sensor<?> sensor){
  Set<SubscriptionHandle> subscriptions=new LinkedHashSet<SubscriptionHandle>();
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,sensor)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(source,null)),Collections.emptySet()));
  subscriptions.addAll(elvis(subscriptionsByToken.get(makeEntitySensorToken(null,null)),Collections.emptySet()));
  return subscriptions;
}",0.9903345724907064
79688,"@Override public Void call() throws Exception {
  log.debug(""String_Node_Str"");
  if (verbose) {
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ locations);
  }
  BrooklynLauncher launcher=BrooklynLauncher.newLauncher();
  ResourceUtils utils=new ResourceUtils(this);
  ClassLoader parent=utils.getLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  if (script != null) {
    log.debug(""String_Node_Str"",script);
    String content=utils.getResourceAsString(script);
    GroovyShell shell=new GroovyShell(loader);
    shell.evaluate(content);
  }
  launcher.webconsolePort(port);
  launcher.webconsole(!noConsole);
  AbstractApplication application=null;
  if (app != null) {
    log.debug(""String_Node_Str"",app);
    application=loadApplicationFromClasspathOrParse(utils,loader,app);
    launcher.managing(application);
  }
  Iterable<String> parsedLocations=LOCATIONS_SPLITTER.split(locations);
  log.info(""String_Node_Str"",Lists.newArrayList(parsedLocations));
  List<Location> brooklynLocations=new LocationRegistry().getLocationsById((parsedLocations == null || Iterables.isEmpty(parsedLocations)) ? ImmutableSet.of(CommandLineLocations.LOCALHOST) : parsedLocations);
  log.info(""String_Node_Str"");
  launcher.launch();
  if (application != null) {
    log.info(""String_Node_Str"",new Object[]{app,brooklynLocations.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"",brooklynLocations});
    if (!noShutdownOnExit)     Entities.invokeStopOnShutdown(application);
    try {
      application.start(brooklynLocations);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + application + ""String_Node_Str""+ e,e);
    }
  }
 else   if (brooklynLocations != null && !brooklynLocations.isEmpty()) {
    log.warn(""String_Node_Str"");
  }
  if (verbose) {
    if (application != null)     Entities.dumpInfo(application);
  }
  if (stopOnKeyPress) {
    log.info(""String_Node_Str"");
    System.in.read();
    application.stop();
  }
 else {
    log.info(""String_Node_Str"");
    waitUntilInterrupted();
  }
  return null;
}","@Override public Void call() throws Exception {
  log.debug(""String_Node_Str"");
  if (verbose) {
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ locations);
  }
  if (locations == null) {
    log.warn(""String_Node_Str"");
    locations=""String_Node_Str"";
  }
  BrooklynLauncher launcher=BrooklynLauncher.newLauncher();
  ResourceUtils utils=new ResourceUtils(this);
  ClassLoader parent=utils.getLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  if (script != null) {
    log.debug(""String_Node_Str"",script);
    String content=utils.getResourceAsString(script);
    GroovyShell shell=new GroovyShell(loader);
    shell.evaluate(content);
  }
  launcher.webconsolePort(port);
  launcher.webconsole(!noConsole);
  AbstractApplication application=null;
  if (app != null) {
    log.debug(""String_Node_Str"",app);
    application=loadApplicationFromClasspathOrParse(utils,loader,app);
    launcher.managing(application);
  }
  Iterable<String> parsedLocations=new QuotedStringTokenizer(locations).remainderAsList();
  log.info(""String_Node_Str"",Lists.newArrayList(parsedLocations));
  List<Location> brooklynLocations=new LocationRegistry().getLocationsById((parsedLocations == null || Iterables.isEmpty(parsedLocations)) ? ImmutableSet.of(CommandLineLocations.LOCALHOST) : parsedLocations);
  log.info(""String_Node_Str"");
  launcher.launch();
  if (application != null) {
    log.info(""String_Node_Str"",new Object[]{app,brooklynLocations.size() != 1 ? ""String_Node_Str"" : ""String_Node_Str"",brooklynLocations});
    if (!noShutdownOnExit)     Entities.invokeStopOnShutdown(application);
    try {
      application.start(brooklynLocations);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + application + ""String_Node_Str""+ e,e);
    }
  }
 else   if (brooklynLocations != null && !brooklynLocations.isEmpty()) {
    log.warn(""String_Node_Str"");
  }
  if (verbose) {
    if (application != null)     Entities.dumpInfo(application);
  }
  if (stopOnKeyPress) {
    log.info(""String_Node_Str"");
    System.in.read();
    application.stop();
  }
 else {
    log.info(""String_Node_Str"");
    waitUntilInterrupted();
  }
  return null;
}",0.8402255639097744
79689,"public String apply(Map.Entry entry){
  Object k=entry.getKey();
  Object v=entry.getValue();
  try {
    if (v != null && Primitives.isWrapperType(v.getClass())) {
      v=""String_Node_Str"" + v;
    }
 else {
      v=BasicConfigKey.resolveValue(v,Object.class,entity.getExecutionContext());
      if (v == null) {
      }
 else       if (v instanceof CharSequence) {
      }
 else       if (TypeCoercions.isPrimitiveOrBoxer(v.getClass())) {
        v=""String_Node_Str"" + v;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + v + ""String_Node_Str""+ v.getClass()+ ""String_Node_Str"");
      }
    }
    return ""String_Node_Str"" + k + (v != null ? ""String_Node_Str"" + v : ""String_Node_Str"");
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",k,e);
    throw Throwables.propagate(e);
  }
}","public String apply(Map.Entry<String,?> entry){
  String k=entry.getKey();
  Object v=entry.getValue();
  try {
    if (v != null && Primitives.isWrapperType(v.getClass())) {
      v=""String_Node_Str"" + v;
    }
 else {
      v=BasicConfigKey.resolveValue(v,Object.class,entity.getExecutionContext());
      if (v == null) {
      }
 else       if (v instanceof CharSequence) {
      }
 else       if (TypeCoercions.isPrimitiveOrBoxer(v.getClass())) {
        v=""String_Node_Str"" + v;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + v + ""String_Node_Str""+ v.getClass()+ ""String_Node_Str"");
      }
    }
    return ""String_Node_Str"" + k + (v != null ? ""String_Node_Str"" + v : ""String_Node_Str"");
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",k,e);
    throw Throwables.propagate(e);
  }
}",0.9867149758454108
79690,"/** 
 * arguments to pass to the JVM; this is the config options (e.g. -Xmx1024; only the contents of   {@link #getCustomJavaConfigOptions()} by default) and java system properties (-Dk=v; add custom properties in  {@link #getCustomJavaSystemProperties()}) <p> See   {@link #getShellEnvironment()} for discussion of quoting/escaping strategy.
 */
public List<String> getJavaOpts(){
  Iterable<String> sysprops=Iterables.transform(getJavaSystemProperties().entrySet(),new Function<Map.Entry,String>(){
    public String apply(    Map.Entry entry){
      Object k=entry.getKey();
      Object v=entry.getValue();
      try {
        if (v != null && Primitives.isWrapperType(v.getClass())) {
          v=""String_Node_Str"" + v;
        }
 else {
          v=BasicConfigKey.resolveValue(v,Object.class,entity.getExecutionContext());
          if (v == null) {
          }
 else           if (v instanceof CharSequence) {
          }
 else           if (TypeCoercions.isPrimitiveOrBoxer(v.getClass())) {
            v=""String_Node_Str"" + v;
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"" + v + ""String_Node_Str""+ v.getClass()+ ""String_Node_Str"");
          }
        }
        return ""String_Node_Str"" + k + (v != null ? ""String_Node_Str"" + v : ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"",k,e);
        throw Throwables.propagate(e);
      }
    }
  }
);
  List<String> result=Lists.newArrayList(getCustomJavaConfigOptions());
  result.addAll(Lists.newArrayList(sysprops));
  return result;
}","/** 
 * arguments to pass to the JVM; this is the config options (e.g. -Xmx1024; only the contents of  {@link #getCustomJavaConfigOptions()} by default) and java system properties (-Dk=v; add customproperties in  {@link #getCustomJavaSystemProperties()}) <p> See   {@link #getShellEnvironment()} for discussion of quoting/escaping strategy.
 */
public List<String> getJavaOpts(){
  Iterable<String> sysprops=Iterables.transform(getJavaSystemProperties().entrySet(),new Function<Map.Entry<String,?>,String>(){
    public String apply(    Map.Entry<String,?> entry){
      String k=entry.getKey();
      Object v=entry.getValue();
      try {
        if (v != null && Primitives.isWrapperType(v.getClass())) {
          v=""String_Node_Str"" + v;
        }
 else {
          v=BasicConfigKey.resolveValue(v,Object.class,entity.getExecutionContext());
          if (v == null) {
          }
 else           if (v instanceof CharSequence) {
          }
 else           if (TypeCoercions.isPrimitiveOrBoxer(v.getClass())) {
            v=""String_Node_Str"" + v;
          }
 else {
            throw new IllegalArgumentException(""String_Node_Str"" + v + ""String_Node_Str""+ v.getClass()+ ""String_Node_Str"");
          }
        }
        return ""String_Node_Str"" + k + (v != null ? ""String_Node_Str"" + v : ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"",k,e);
        throw Throwables.propagate(e);
      }
    }
  }
);
  Set<String> result=MutableSet.<String>builder().addAll(getCustomJavaConfigOptions()).addAll(sysprops).build();
  for (  String customOpt : entity.getConfig(UsesJava.JAVA_OPTS)) {
    for (    List<String> mutuallyExclusiveOpt : MUTUALLY_EXCLUSIVE_OPTS) {
      if (mutuallyExclusiveOpt.contains(customOpt)) {
        result.removeAll(mutuallyExclusiveOpt);
      }
    }
    for (    String keyValOptPrefix : KEY_VAL_OPT_PREFIXES) {
      if (customOpt.startsWith(keyValOptPrefix)) {
        for (Iterator<String> iter=result.iterator(); iter.hasNext(); ) {
          String existingOpt=(String)iter.next();
          if (existingOpt.startsWith(keyValOptPrefix)) {
            iter.remove();
          }
        }
      }
    }
    if (customOpt.indexOf(""String_Node_Str"") != -1) {
      String customOptPrefix=customOpt.substring(0,customOpt.indexOf(""String_Node_Str""));
      for (Iterator<String> iter=result.iterator(); iter.hasNext(); ) {
        String existingOpt=(String)iter.next();
        if (existingOpt.startsWith(customOptPrefix)) {
          iter.remove();
        }
      }
    }
    result.add(customOpt);
  }
  return ImmutableList.copyOf(result);
}",0.6968541468064824
79691,"/** 
 * Returns the complete set of Java system properties (-D defines) to set for the application. <p> This is exposed to the JVM as the contents of the   {@code JAVA_OPTS} environment variable. Default set contains config key, custom system properties, and JMX defines. <p> Null value means to set -Dkey otherwise it is -Dkey=value. <p> See  {@link #getShellEnvironment()} for discussion of quoting/escaping strategy.
 */
protected Map getJavaSystemProperties(){
  return MutableMap.builder().putAll(entity.getConfig(UsesJava.JAVA_OPTIONS)).putAll(getCustomJavaSystemProperties()).putAll(isJmxEnabled() ? getJmxJavaSystemProperties() : Collections.emptyMap()).build();
}","/** 
 * Returns the complete set of Java system properties (-D defines) to set for the application. <p> This is exposed to the JVM as the contents of the   {@code JAVA_OPTS} environment variable. Defaultset contains config key, custom system properties, and JMX defines. <p> Null value means to set -Dkey otherwise it is -Dkey=value. <p> See  {@link #getShellEnvironment()} for discussion of quoting/escaping strategy.
 */
protected Map<String,?> getJavaSystemProperties(){
  return MutableMap.<String,Object>builder().putAll(getCustomJavaSystemProperties()).putAll(isJmxEnabled() ? getJmxJavaSystemProperties() : Collections.<String,Object>emptyMap()).putAll(entity.getConfig(UsesJava.JAVA_SYSPROPS)).build();
}",0.7803468208092486
79692,"/** 
 * Return the configuration properties required to enable JMX for a Java application. These should be set as properties in the   {@code JAVA_OPTS} environment variablewhen calling the run script for the application. TODO security!
 */
protected Map<String,?> getJmxJavaSystemProperties(){
  Integer jmxRemotePort=checkNotNull(getJmxPort(),""String_Node_Str"" + entity);
  String hostName=checkNotNull(getMachine().getAddress().getHostName(),""String_Node_Str"" + entity);
  return MutableMap.<String,Object>builder().put(""String_Node_Str"",null).put(""String_Node_Str"",jmxRemotePort).put(""String_Node_Str"",false).put(""String_Node_Str"",false).put(""String_Node_Str"",hostName).build();
}","/** 
 * Return the configuration properties required to enable JMX for a Java application. These should be set as properties in the   {@code JAVA_OPTS} environment variable when calling therun script for the application. TODO security!
 */
protected Map<String,?> getJmxJavaSystemProperties(){
  Integer jmxRemotePort=checkNotNull(getJmxPort(),""String_Node_Str"" + entity);
  String hostName=checkNotNull(getMachine().getAddress().getHostName(),""String_Node_Str"" + entity);
  return MutableMap.<String,Object>builder().put(""String_Node_Str"",null).put(""String_Node_Str"",jmxRemotePort).put(""String_Node_Str"",false).put(""String_Node_Str"",false).put(""String_Node_Str"",hostName).build();
}",0.9985358711566618
79693,"@Override public Integer getRmiPort(){
  return !isJmxEnabled() ? -1 : entity.getAttribute(UsesJmx.RMI_PORT);
}","@Deprecated @Override public Integer getRmiPort(){
  return getRmiServerPort();
}",0.59375
79694,"/** 
 * Sets all JVM options (-X.. -D..) in an environment var JAVA_OPTS. <p> That variable is constructed from getJavaOpts(), then wrapped _unescaped_ in double quotes. An error is thrown if there is an unescaped double quote in the string. All other unescaped characters are permitted, but unless $var expansion or `command` execution is desired (although this is not confirmed as supported) the generally caller should escape any such characters, for example using   {@link StringEscapeUtils#escapeLiteralForDoubleQuotedBash(String)}. 
 */
@Override public Map<String,String> getShellEnvironment(){
  for (  String it : getJavaOpts()) {
    StringEscapeUtils.assertValidForDoubleQuotingInBash(it);
  }
  String sJavaOpts=Joiner.on(""String_Node_Str"").join(getJavaOpts());
  return MutableMap.<String,String>builder().putAll(super.getShellEnvironment()).put(""String_Node_Str"",sJavaOpts).build();
}","/** 
 * Sets all JVM options (-X.. -D..) in an environment var JAVA_OPTS. <p> That variable is constructed from getJavaOpts(), then wrapped _unescaped_ in double quotes. An error is thrown if there is an unescaped double quote in the string. All other unescaped characters are permitted, but unless $var expansion or `command` execution is desired (although this is not confirmed as supported) the generally caller should escape any such characters, for example using   {@link StringEscapeUtils#escapeLiteralForDoubleQuotedBash(String)}.
 */
@Override public Map<String,String> getShellEnvironment(){
  for (  String it : getJavaOpts()) {
    StringEscapeUtils.assertValidForDoubleQuotingInBash(it);
  }
  String sJavaOpts=Joiner.on(""String_Node_Str"").join(getJavaOpts());
  return MutableMap.<String,String>builder().putAll(super.getShellEnvironment()).put(""String_Node_Str"",sJavaOpts).build();
}",0.9994428969359332
79695,"private void onMetricChanged(Number val){
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,val});
  double currentMetricD=val.doubleValue();
  double metricUpperBoundD=metricUpperBound.doubleValue();
  double metricLowerBoundD=metricLowerBound.doubleValue();
  int currentSize=currentSizeOperator.apply(entity);
  int desiredSize;
  if (currentMetricD > metricUpperBoundD) {
    desiredSize=currentSize + (int)Math.ceil(currentSize * ((currentMetricD - metricUpperBoundD) / metricUpperBoundD));
    desiredSize=toBoundedDesiredPoolSize(desiredSize);
    if (desiredSize > currentSize) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,desiredSize,currentMetricD,metricUpperBoundD});
      scheduleResize(desiredSize);
    }
  }
 else   if (currentMetricD < metricLowerBoundD) {
    desiredSize=currentSize - (int)Math.floor(currentSize * ((metricLowerBoundD - currentMetricD) / metricLowerBoundD));
    desiredSize=toBoundedDesiredPoolSize(desiredSize);
    if (desiredSize < currentSize) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,desiredSize,currentMetricD,metricLowerBoundD});
      scheduleResize(desiredSize);
    }
  }
 else {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,currentMetricD,metricLowerBoundD,metricUpperBoundD});
    abortResize(currentSize);
    return;
  }
}","private void onMetricChanged(Number val){
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,val});
  double currentMetricD=val.doubleValue();
  double metricUpperBoundD=metricUpperBound.doubleValue();
  double metricLowerBoundD=metricLowerBound.doubleValue();
  int currentSize=currentSizeOperator.apply(entity);
  double currentTotalActivity=currentSize * currentMetricD;
  int desiredSize;
  if (currentMetricD > metricUpperBoundD) {
    desiredSize=(int)Math.ceil(currentTotalActivity / metricUpperBoundD);
    desiredSize=toBoundedDesiredPoolSize(desiredSize);
    if (desiredSize > currentSize) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,desiredSize,currentMetricD,metricUpperBoundD});
      scheduleResize(desiredSize);
    }
 else {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,currentMetricD,metricUpperBoundD,metricLowerBoundD});
    }
  }
 else   if (currentMetricD < metricLowerBoundD) {
    desiredSize=(int)Math.floor(currentTotalActivity / metricLowerBoundD);
    desiredSize=toBoundedDesiredPoolSize(desiredSize);
    if (desiredSize < currentTotalActivity / metricUpperBoundD) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,desiredSize});
      desiredSize=(int)Math.ceil(currentTotalActivity / metricUpperBoundD);
      desiredSize=toBoundedDesiredPoolSize(desiredSize);
    }
    if (desiredSize < currentSize) {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,desiredSize,currentMetricD,metricLowerBoundD});
      scheduleResize(desiredSize);
    }
 else {
      if (LOG.isTraceEnabled())       LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,currentMetricD,metricLowerBoundD,metricUpperBoundD});
    }
  }
 else {
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"",new Object[]{this,poolEntity,currentSize,currentMetricD,metricLowerBoundD,metricUpperBoundD});
    abortResize(currentSize);
    return;
  }
}",0.605761316872428
79696,"@Test(enabled=true) public void testInferFormatClass() throws Exception {
  DeployCommand cmd=new DeployCommand();
  cmd.app=""String_Node_Str"";
  assertEquals(cmd.inferAppFormat(cmd.app),DeployCommand.CLASS_FORMAT);
}","@Test(enabled=true) public void testInferFormatClass() throws Exception {
  String inferredCommand=cmd.inferAppFormat(""String_Node_Str"");
  assertEquals(inferredCommand,DeployCommand.CLASS_FORMAT);
}",0.6586538461538461
79697,"@Test(enabled=true) public void testInferFormatGroovy() throws Exception {
  DeployCommand cmd=new DeployCommand();
  cmd.app=""String_Node_Str"";
  assertEquals(cmd.format,DeployCommand.GROOVY_FORMAT);
}","@Test(enabled=true) public void testInferFormatGroovy() throws Exception {
  String inferredCommand=cmd.inferAppFormat(""String_Node_Str"");
  assertEquals(inferredCommand,DeployCommand.GROOVY_FORMAT);
}",0.7642679900744417
79698,"@Test(enabled=true) public void testInferFormatJson() throws Exception {
  DeployCommand cmd=new DeployCommand();
  cmd.app=""String_Node_Str"";
  assertEquals(cmd.format,DeployCommand.JSON_FORMAT);
  DeployCommand cmd2=new DeployCommand();
  cmd2.app=""String_Node_Str"";
  assertEquals(cmd.format,DeployCommand.JSON_FORMAT);
}","@Test(enabled=true) public void testInferFormatJson() throws Exception {
  String inferredCommand1=cmd.inferAppFormat(""String_Node_Str"");
  assertEquals(inferredCommand1,DeployCommand.JSON_FORMAT);
  String inferredCommand2=cmd.inferAppFormat(""String_Node_Str"");
  assertEquals(inferredCommand2,DeployCommand.JSON_FORMAT);
}",0.6635802469135802
79699,"protected SshTool connectSsh(Map props){
  if (!truth(user))   user=System.getProperty(""String_Node_Str"");
  Map<?,?> allprops=ImmutableMap.builder().putAll(config).putAll(leftoverProperties).putAll(props).build();
  Map<String,Object> args=MutableMap.<String,Object>of(""String_Node_Str"",user,""String_Node_Str"",address.getHostName());
  for (  Map.Entry<?,?> entry : allprops.entrySet()) {
    String k=""String_Node_Str"" + entry.getKey();
    Object v=entry.getValue();
    if (SSH_PROPS.contains(k)) {
      args.put(k,v);
    }
 else     if (k.startsWith(SSHCONFIG_PREFIX + ""String_Node_Str"")) {
      args.put(k.substring(SSHCONFIG_PREFIX.length() + 1),v);
    }
 else {
      if (!NON_SSH_PROPS.contains(k)) {
        LOG.warn(""String_Node_Str"" + k + ""String_Node_Str""+ this+ ""String_Node_Str"");
        args.put(k,v);
      }
    }
  }
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + args);
  SshTool ssh=new SshjTool(args);
  ssh.connect();
  return ssh;
}","protected SshTool connectSsh(Map props){
  if (!truth(user))   user=System.getProperty(""String_Node_Str"");
  Map<?,?> allprops=MutableMap.builder().putAll(config).putAll(leftoverProperties).putAll(props).build();
  Map<String,Object> args=MutableMap.<String,Object>of(""String_Node_Str"",user,""String_Node_Str"",address.getHostName());
  for (  Map.Entry<?,?> entry : allprops.entrySet()) {
    String k=""String_Node_Str"" + entry.getKey();
    Object v=entry.getValue();
    if (SSH_PROPS.contains(k)) {
      args.put(k,v);
    }
 else     if (k.startsWith(SSHCONFIG_PREFIX + ""String_Node_Str"")) {
      args.put(k.substring(SSHCONFIG_PREFIX.length() + 1),v);
    }
 else {
      if (!NON_SSH_PROPS.contains(k)) {
        LOG.warn(""String_Node_Str"" + k + ""String_Node_Str""+ this+ ""String_Node_Str"");
        args.put(k,v);
      }
    }
  }
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + args);
  SshTool ssh=new SshjTool(args);
  ssh.connect();
  return ssh;
}",0.9979445015416238
79700,"public ImmutableMap<K,V> toImmutable(){
  return ImmutableMap.<K,V>builder().putAll(this).build();
}","public ImmutableMap<K,V> toImmutable(){
  return ImmutableMap.copyOf(this);
}",0.8135593220338984
79701,"private void onContainerAdded(Entity newContainer){
  subscribe(newContainer,Startable.SERVICE_UP,eventHandler);
  if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {
    onContainerUp(newContainer);
  }
}","private void onContainerAdded(Entity newContainer){
  subscribe(newContainer,Startable.SERVICE_UP,eventHandler);
  if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {
    onContainerUp(newContainer);
  }
}",0.9593810444874274
79702,"private void onContainerAdded(BalanceableContainer<?> newContainer){
  subscribe(newContainer,Startable.SERVICE_UP,eventHandler);
  if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {
    onContainerUp(newContainer);
  }
}","private void onContainerAdded(BalanceableContainer<?> newContainer){
  subscribe(newContainer,Startable.SERVICE_UP,eventHandler);
  if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {
    onContainerUp(newContainer);
  }
}",0.9618874773139746
79703,"protected ScriptHelper newScript(Map flags,String phase){
  ScriptHelper s=new ScriptHelper(this,phase + ""String_Node_Str"" + elvis(entity,this));
  if (!truth(flags.get(""String_Node_Str""))) {
    if (phase == INSTALLING) {
      s.useMutex(getLocation(),getInstallDir(),""String_Node_Str"" + elvis(entity,this));
      s.header.append(""String_Node_Str"" + getInstallDir() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").footer.append(""String_Node_Str"");
    }
    if (ImmutableSet.of(CUSTOMIZING,LAUNCHING,CHECK_RUNNING,STOPPING,RESTARTING).contains(phase)) {
      s.header.append(""String_Node_Str"" + getRunDir() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (ImmutableSet.of(CUSTOMIZING).contains(phase))   s.skipIfBodyEmpty();
  if (ImmutableSet.of(CHECK_RUNNING,LAUNCHING,STOPPING,RESTARTING).contains(phase))   s.failIfBodyEmpty();
  if (ImmutableSet.of(INSTALLING,LAUNCHING).contains(phase))   s.failOnNonZeroResultCode();
  if (truth(flags.get(""String_Node_Str""))) {
    String pidFile=(flags.get(""String_Node_Str"") instanceof CharSequence ? flags.get(""String_Node_Str"") : getRunDir() + ""String_Node_Str"" + PID_FILENAME).toString();
    if (LAUNCHING.equals(phase))     s.footer.prepend(""String_Node_Str"" + pidFile);
 else     if (CHECK_RUNNING.equals(phase))     s.body.append(""String_Node_Str"" + pidFile + ""String_Node_Str"",""String_Node_Str"" + pidFile + ""String_Node_Str"").requireResultCode(Predicates.or(Predicates.equalTo(0),Predicates.equalTo(1)));
 else     if (STOPPING.equals(phase))     s.body.append(""String_Node_Str"" + pidFile + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + pidFile);
 else     if (RESTARTING.equals(phase))     s.footer.prepend(""String_Node_Str"" + pidFile + ""String_Node_Str"",""String_Node_Str"" + pidFile + ""String_Node_Str"");
 else     log.warn(""String_Node_Str"" + s.summary);
  }
  return s;
}","protected ScriptHelper newScript(Map flags,String phase){
  ScriptHelper s=new ScriptHelper(this,phase + ""String_Node_Str"" + elvis(entity,this));
  if (!truth(flags.get(""String_Node_Str""))) {
    if (INSTALLING.equals(phase)) {
      s.useMutex(getLocation(),getInstallDir(),""String_Node_Str"" + elvis(entity,this));
      s.header.append(""String_Node_Str"" + getInstallDir() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").footer.append(""String_Node_Str"");
    }
    if (ImmutableSet.of(CUSTOMIZING,LAUNCHING,CHECK_RUNNING,STOPPING,RESTARTING).contains(phase)) {
      s.header.append(""String_Node_Str"" + getRunDir() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (ImmutableSet.of(CUSTOMIZING).contains(phase))   s.skipIfBodyEmpty();
  if (ImmutableSet.of(CHECK_RUNNING,LAUNCHING,STOPPING,RESTARTING).contains(phase))   s.failIfBodyEmpty();
  if (ImmutableSet.of(INSTALLING,LAUNCHING).contains(phase))   s.failOnNonZeroResultCode();
  if (truth(flags.get(""String_Node_Str""))) {
    String pidFile=(flags.get(""String_Node_Str"") instanceof CharSequence ? flags.get(""String_Node_Str"") : getRunDir() + ""String_Node_Str"" + PID_FILENAME).toString();
    if (LAUNCHING.equals(phase))     s.footer.prepend(""String_Node_Str"" + pidFile);
 else     if (CHECK_RUNNING.equals(phase))     s.body.append(""String_Node_Str"" + pidFile + ""String_Node_Str"",""String_Node_Str"" + pidFile + ""String_Node_Str"").requireResultCode(Predicates.or(Predicates.equalTo(0),Predicates.equalTo(1)));
 else     if (STOPPING.equals(phase))     s.body.append(""String_Node_Str"" + pidFile + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + pidFile);
 else     if (RESTARTING.equals(phase))     s.footer.prepend(""String_Node_Str"" + pidFile + ""String_Node_Str"",""String_Node_Str"" + pidFile + ""String_Node_Str"");
 else     log.warn(""String_Node_Str"" + s.summary);
  }
  return s;
}",0.9940399067115832
79704,"protected String getEntityVersionLabel(String separator){
  return elvis(entity.getClass().getSimpleName(),entity.getClass().getName()) + (getVersion() != NO_VERSION_INFO ? separator + getVersion() : ""String_Node_Str"");
}","protected String getEntityVersionLabel(String separator){
  return elvis(entity.getClass().getSimpleName(),entity.getClass().getName()) + (!getVersion().equals(NO_VERSION_INFO) ? separator + getVersion() : ""String_Node_Str"");
}",0.9196428571428572
79705,"@Override public Void call() throws Exception {
  log.debug(""String_Node_Str"");
  if (verbose) {
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ Iterables.toString(locations));
  }
  ResourceUtils utils=new ResourceUtils(this);
  ClassLoader parent=utils.getLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  log.debug(""String_Node_Str"",app);
  AbstractApplication application=loadApplicationFromClasspathOrParse(utils,loader,app);
  if (script != null) {
    log.debug(""String_Node_Str"",script);
    String content=utils.getResourceAsString(script);
    GroovyShell shell=new GroovyShell(loader);
    shell.evaluate(content);
  }
  List<Location> brooklynLocations=new LocationRegistry().getLocationsById((locations == null || Iterables.isEmpty(locations)) ? ImmutableSet.of(CommandLineLocations.LOCALHOST) : locations);
  log.info(""String_Node_Str"");
  BrooklynLauncher.manage(application,port,!noShutdownOnExit,!noConsole);
  log.info(""String_Node_Str"",app);
  application.start(brooklynLocations);
  if (verbose) {
    Entities.dumpInfo(application);
  }
  if (stopOnKeyPress) {
    log.info(""String_Node_Str"");
    System.in.read();
    application.stop();
  }
 else {
    log.info(""String_Node_Str"");
    waitUntilInterrupted();
  }
  return null;
}","@Override public Void call() throws Exception {
  log.debug(""String_Node_Str"");
  if (verbose) {
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ locations);
  }
  ResourceUtils utils=new ResourceUtils(this);
  ClassLoader parent=utils.getLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  log.debug(""String_Node_Str"",app);
  AbstractApplication application=loadApplicationFromClasspathOrParse(utils,loader,app);
  if (script != null) {
    log.debug(""String_Node_Str"",script);
    String content=utils.getResourceAsString(script);
    GroovyShell shell=new GroovyShell(loader);
    shell.evaluate(content);
  }
  Iterable<String> parsedLocations=Splitter.on(""String_Node_Str"").split(locations);
  List<Location> brooklynLocations=new LocationRegistry().getLocationsById((parsedLocations == null || Iterables.isEmpty(parsedLocations)) ? ImmutableSet.of(CommandLineLocations.LOCALHOST) : parsedLocations);
  log.info(""String_Node_Str"");
  BrooklynLauncher.manage(application,port,!noShutdownOnExit,!noConsole);
  log.info(""String_Node_Str"",app,brooklynLocations);
  application.start(brooklynLocations);
  if (verbose) {
    Entities.dumpInfo(application);
  }
  if (stopOnKeyPress) {
    log.info(""String_Node_Str"");
    System.in.read();
    application.stop();
  }
 else {
    log.info(""String_Node_Str"");
    waitUntilInterrupted();
  }
  return null;
}",0.9389880952380952
79706,"@Override public Void call() throws Exception {
  if (verbose) {
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ Iterables.toString(locations));
  }
  ResourceUtils utils=new ResourceUtils(this);
  ClassLoader parent=utils.getLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  AbstractApplication application=loadApplicationFromClasspathOrParse(utils,loader,app);
  if (script != null) {
    String content=utils.getResourceAsString(script);
    GroovyShell shell=new GroovyShell(loader);
    shell.evaluate(content);
  }
  List<Location> brooklynLocations=new LocationRegistry().getLocationsById(locations);
  BrooklynLauncher.manage(application,port,!noShutdownOnExit,!noConsole);
  application.start(brooklynLocations);
  if (verbose) {
    Entities.dumpInfo(application);
  }
  waitUntilInterrupted();
  return null;
}","@Override public Void call() throws Exception {
  if (verbose) {
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ Iterables.toString(locations));
  }
  ResourceUtils utils=new ResourceUtils(this);
  ClassLoader parent=utils.getLoader();
  GroovyClassLoader loader=new GroovyClassLoader(parent);
  AbstractApplication application=loadApplicationFromClasspathOrParse(utils,loader,app);
  if (script != null) {
    String content=utils.getResourceAsString(script);
    GroovyShell shell=new GroovyShell(loader);
    shell.evaluate(content);
  }
  List<Location> brooklynLocations=new LocationRegistry().getLocationsById(Iterables.isEmpty(locations) ? ImmutableSet.of(CommandLineLocations.LOCALHOST) : locations);
  BrooklynLauncher.manage(application,port,!noShutdownOnExit,!noConsole);
  application.start(brooklynLocations);
  if (verbose) {
    Entities.dumpInfo(application);
  }
  waitUntilInterrupted();
  return null;
}",0.9550748752079868
79707,"/** 
 * @see SubscriptionContext#subscribeToMembers(Entity,Sensor,SensorEventListener) 
 */
public <T>SubscriptionHandle subscribeToMembers(Entity parent,Sensor<T> sensor,SensorEventListener<? super T> listener){
  SubscriptionHandle handle=subscription.subscribeToMembers(parent,sensor,listener);
  subscriptions.put(parent,handle);
  return handle;
}","/** 
 * @see SubscriptionContext#subscribeToMembers(Entity,Sensor,SensorEventListener) 
 */
public <T>SubscriptionHandle subscribeToMembers(Group parent,Sensor<T> sensor,SensorEventListener<? super T> listener){
  SubscriptionHandle handle=subscription.subscribeToMembers(parent,sensor,listener);
  subscriptions.put(parent,handle);
  return handle;
}",0.984352773826458
79708,"/** 
 * This method is useful for callers to see the status of a task. Also for developers to see best practices for examining status fields etc
 * @param verbosity 0 = brief, 1 = one-line with some detail, 2 = lots of detail
 */
protected String getStatusString(int verbosity){
  String rv;
  if (submitTimeUtc <= 0)   rv=""String_Node_Str"";
 else   if (!isCancelled() && startTimeUtc <= 0) {
    rv=""String_Node_Str"";
    if (verbosity > 0) {
      long elapsed=System.currentTimeMillis() - submitTimeUtc;
      rv+=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    }
  }
 else   if (isDone()) {
    long elapsed=endTimeUtc - submitTimeUtc;
    String duration=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    rv=""String_Node_Str"";
    if (isCancelled()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + duration;
    }
 else     if (isError()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        rv+=""String_Node_Str"" + duration;
        Object error;
        try {
          String rvx=""String_Node_Str"" + get();
          error=""String_Node_Str"" + rvx;
        }
 catch (        Throwable tt) {
          error=tt;
        }
        if (error instanceof ExecutionException)         error=((Throwable)error).getCause();
        if (verbosity == 1)         rv+=""String_Node_Str"" + error + ""String_Node_Str"";
 else {
          StringWriter sw=new StringWriter();
          if (error instanceof ExecutionException)           ((Throwable)error).printStackTrace(new PrintWriter(sw));
          rv+=""String_Node_Str"" + sw.getBuffer();
        }
      }
    }
 else {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        if (verbosity == 1) {
          try {
            rv+=""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
 else {
          rv+=""String_Node_Str"" + duration;
          try {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
      }
    }
  }
 else {
    rv=getActiveTaskStatusString(verbosity);
  }
  return rv;
}","/** 
 * This method is useful for callers to see the status of a task. Also for developers to see best practices for examining status fields etc
 * @param verbosity 0 = brief, 1 = one-line with some detail, 2 = lots of detail
 */
protected String getStatusString(int verbosity){
  String rv;
  if (submitTimeUtc <= 0)   rv=""String_Node_Str"";
 else   if (!isCancelled() && startTimeUtc <= 0) {
    rv=""String_Node_Str"";
    if (verbosity > 0) {
      long elapsed=System.currentTimeMillis() - submitTimeUtc;
      rv+=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    }
  }
 else   if (isDone()) {
    long elapsed=endTimeUtc - submitTimeUtc;
    String duration=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    rv=""String_Node_Str"";
    if (isCancelled()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + duration;
    }
 else     if (isError()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        rv+=""String_Node_Str"" + duration;
        Object error;
        try {
          String rvx=""String_Node_Str"" + get();
          error=""String_Node_Str"" + rvx;
        }
 catch (        Throwable tt) {
          error=tt;
        }
        if (error instanceof ExecutionException)         error=((Throwable)error).getCause();
        if (verbosity == 1)         rv+=""String_Node_Str"" + error + ""String_Node_Str"";
 else {
          StringWriter sw=new StringWriter();
          ((Throwable)error).printStackTrace(new PrintWriter(sw));
          rv+=""String_Node_Str"" + sw.getBuffer();
        }
      }
    }
 else {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        if (verbosity == 1) {
          try {
            rv+=""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
 else {
          rv+=""String_Node_Str"" + duration;
          try {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
      }
    }
  }
 else {
    rv=getActiveTaskStatusString(verbosity);
  }
  return rv;
}",0.98859825620389
79709,"/** 
 * This method is useful for callers to see the status of a task. Also for developers to see best practices for examining status fields etc
 * @param verbosity 0 = brief, 1 = one-line with some detail, 2 = lots of detail
 */
protected String getStatusString(int verbosity){
  String rv;
  if (submitTimeUtc <= 0)   rv=""String_Node_Str"";
 else   if (!isCancelled() && startTimeUtc <= 0) {
    rv=""String_Node_Str"";
    if (verbosity > 0) {
      long elapsed=System.currentTimeMillis() - submitTimeUtc;
      rv+=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    }
  }
 else   if (isDone()) {
    long elapsed=endTimeUtc - submitTimeUtc;
    String duration=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    rv=""String_Node_Str"";
    if (isCancelled()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + duration;
    }
 else     if (isError()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        rv+=""String_Node_Str"" + duration;
        Object error;
        try {
          String rvx=""String_Node_Str"" + get();
          error=""String_Node_Str"" + rvx;
        }
 catch (        Throwable tt) {
          error=tt;
        }
        if (error instanceof ExecutionException)         error=((Throwable)error).getCause();
        if (verbosity == 1)         rv+=""String_Node_Str"" + error + ""String_Node_Str"";
 else {
          StringWriter sw=new StringWriter();
          if (error instanceof ExecutionException)           ((Throwable)error).printStackTrace(new PrintWriter(sw));
          rv+=""String_Node_Str"" + sw.getBuffer();
        }
      }
    }
 else {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        if (verbosity == 1) {
          try {
            rv+=""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
 else {
          rv+=""String_Node_Str"" + duration;
          try {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
      }
    }
  }
 else {
    rv=getActiveTaskStatusString(verbosity);
  }
  return rv;
}","/** 
 * This method is useful for callers to see the status of a task. Also for developers to see best practices for examining status fields etc
 * @param verbosity 0 = brief, 1 = one-line with some detail, 2 = lots of detail
 */
protected String getStatusString(int verbosity){
  String rv;
  if (submitTimeUtc <= 0)   rv=""String_Node_Str"";
 else   if (!isCancelled() && startTimeUtc <= 0) {
    rv=""String_Node_Str"";
    if (verbosity > 0) {
      long elapsed=System.currentTimeMillis() - submitTimeUtc;
      rv+=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    }
  }
 else   if (isDone()) {
    long elapsed=endTimeUtc - submitTimeUtc;
    String duration=""String_Node_Str"" + elapsed + ""String_Node_Str"";
    rv=""String_Node_Str"";
    if (isCancelled()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1)       rv+=""String_Node_Str"" + duration;
    }
 else     if (isError()) {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        rv+=""String_Node_Str"" + duration;
        Object error;
        try {
          String rvx=""String_Node_Str"" + get();
          error=""String_Node_Str"" + rvx;
        }
 catch (        Throwable tt) {
          error=tt;
        }
        if (error instanceof ExecutionException)         error=((Throwable)error).getCause();
        if (verbosity == 1)         rv+=""String_Node_Str"" + error + ""String_Node_Str"";
 else {
          StringWriter sw=new StringWriter();
          ((Throwable)error).printStackTrace(new PrintWriter(sw));
          rv+=""String_Node_Str"" + sw.getBuffer();
        }
      }
    }
 else {
      rv+=""String_Node_Str"";
      if (verbosity >= 1) {
        if (verbosity == 1) {
          try {
            rv+=""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
 else {
          rv+=""String_Node_Str"" + duration;
          try {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + get();
          }
 catch (          Exception e) {
            rv+=""String_Node_Str"" + ""String_Node_Str"" + e + ""String_Node_Str"";
          }
        }
      }
    }
  }
 else {
    rv=getActiveTaskStatusString(verbosity);
  }
  return rv;
}",0.98859825620389
79710,"public void exportTable(File file,boolean isFullLog,boolean append,boolean header) throws IOException {
  FileWriter out=new FileWriter(file,append);
  if (header) {
    out.write(LogEntry.getCSVHeader(LoggerPlusPlus.getInstance().getLogTable(),isFullLog));
    out.write(""String_Node_Str"");
  }
  for (  LogEntry item : LoggerPlusPlus.getInstance().getLogManager().getLogEntries()) {
    out.write(item.toCSVString(isFullLog) + ""String_Node_Str"");
  }
  out.close();
  MoreHelp.showMessage(""String_Node_Str"" + file.getAbsolutePath() + file.getName());
}","public void exportTable(File file,boolean isFullLog,boolean append,boolean header) throws IOException {
  FileWriter out=new FileWriter(file,append);
  if (header) {
    out.write(LogEntry.getCSVHeader(LoggerPlusPlus.getInstance().getLogTable(),isFullLog));
    out.write(""String_Node_Str"");
  }
  for (  LogEntry item : LoggerPlusPlus.getInstance().getLogManager().getLogEntries()) {
    out.write(item.toCSVString(isFullLog) + ""String_Node_Str"");
  }
  out.close();
  MoreHelp.showMessage(""String_Node_Str"" + file.getAbsolutePath());
}",0.9844179651695693
79711,"public String toCSVString(boolean isFullLog){
  StringBuilder result=new StringBuilder();
  LogTableColumnModel columnModel=LoggerPlusPlus.getInstance().getLogTable().getColumnModel();
  ArrayList<LogTableColumn> columns=columnModel.getAllColumns();
  Collections.sort(columns);
  short count=0;
  for (  LogTableColumn logTableColumn : columns) {
    if (logTableColumn.isVisible() && logTableColumn.isEnabled()) {
      result.append(StringEscapeUtils.escapeCsv(getValue(logTableColumn.getIdentifier()).toString()));
      if (count < columnModel.getColumnCount() - 1)       result.append(""String_Node_Str"");
    }
    count++;
  }
  if (isFullLog) {
    result.append(""String_Node_Str"");
    if (requestResponse != null && requestResponse.getRequest() != null)     result.append(StringEscapeUtils.escapeCsv(new String(requestResponse.getRequest())));
    result.append(""String_Node_Str"");
    if (requestResponse != null && requestResponse.getResponse() != null)     result.append(StringEscapeUtils.escapeCsv(new String(requestResponse.getResponse())));
  }
  return result.toString();
}","public String toCSVString(boolean isFullLog){
  StringBuilder result=new StringBuilder();
  LogTableColumnModel columnModel=LoggerPlusPlus.getInstance().getLogTable().getColumnModel();
  ArrayList<LogTableColumn> columns=columnModel.getAllColumns();
  Collections.sort(columns);
  boolean firstDone=false;
  for (  LogTableColumn logTableColumn : columns) {
    if (logTableColumn.isVisible() && logTableColumn.isEnabled()) {
      if (firstDone) {
        result.append(""String_Node_Str"");
      }
 else {
        firstDone=true;
      }
      result.append(StringEscapeUtils.escapeCsv(getValue(logTableColumn.getIdentifier()).toString()));
    }
  }
  if (isFullLog) {
    result.append(""String_Node_Str"");
    if (requestResponse != null && requestResponse.getRequest() != null)     result.append(StringEscapeUtils.escapeCsv(new String(requestResponse.getRequest())));
    result.append(""String_Node_Str"");
    if (requestResponse != null && requestResponse.getResponse() != null)     result.append(StringEscapeUtils.escapeCsv(new String(requestResponse.getResponse())));
  }
  return result.toString();
}",0.8389444949954504
79712,"public static String getCSVHeader(LogTable table,boolean isFullLog){
  StringBuilder result=new StringBuilder();
  short count=0;
  ArrayList<LogTableColumn> columns=table.getColumnModel().getAllColumns();
  Collections.sort(columns);
  for (  LogTableColumn logTableColumn : columns) {
    if (logTableColumn.isVisible() && logTableColumn.isEnabled()) {
      result.append(logTableColumn.getName());
      if (count < columns.size() - 1)       result.append(""String_Node_Str"");
    }
    count++;
  }
  if (isFullLog) {
    result.append(""String_Node_Str"");
    result.append(""String_Node_Str"");
    result.append(""String_Node_Str"");
    result.append(""String_Node_Str"");
  }
  return result.toString();
}","public static String getCSVHeader(LogTable table,boolean isFullLog){
  StringBuilder result=new StringBuilder();
  boolean firstDone=false;
  ArrayList<LogTableColumn> columns=table.getColumnModel().getAllColumns();
  Collections.sort(columns);
  for (  LogTableColumn logTableColumn : columns) {
    if (logTableColumn.isVisible() && logTableColumn.isEnabled()) {
      if (firstDone) {
        result.append(""String_Node_Str"");
      }
 else {
        firstDone=true;
      }
      result.append(logTableColumn.getName());
    }
  }
  if (isFullLog) {
    result.append(""String_Node_Str"");
    result.append(""String_Node_Str"");
    result.append(""String_Node_Str"");
    result.append(""String_Node_Str"");
  }
  return result.toString();
}",0.6182572614107884
79713,"@Override public void componentHidden(ComponentEvent event){
  ArrayList<UUID> newFilters=new ArrayList<UUID>(filters.keySet());
  newFilters.removeAll(originalFilters.keySet());
  ArrayList<UUID> modifiedFilters=new ArrayList<UUID>(filters.keySet());
  modifiedFilters.removeAll(newFilters);
  ArrayList<UUID> removedFilters=new ArrayList<UUID>(originalFilters.keySet());
  removedFilters.removeAll(filters.keySet());
  for (int i=0; i < modifiedFilters.size(); i++) {
    UUID uid=modifiedFilters.get(i);
    if (!filters.get(uid).isModified()) {
      modifiedFilters.remove(uid);
    }
 else {
      filters.get(uid).setModified(false);
    }
  }
  for (  FilterListener listener : filterListeners) {
    for (    UUID uid : newFilters) {
      listener.onAdd(filters.get(uid));
    }
    for (    UUID uid : modifiedFilters) {
      listener.onChange(filters.get(uid));
    }
    for (    UUID uid : removedFilters) {
      listener.onRemove(originalFilters.get(uid));
    }
  }
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
  prefs.setColorFilters(filters);
}","@Override public void componentHidden(ComponentEvent event){
  ArrayList<UUID> newFilters=new ArrayList<UUID>(filters.keySet());
  newFilters.removeAll(originalFilters.keySet());
  ArrayList<UUID> modifiedFilters=new ArrayList<UUID>(filters.keySet());
  modifiedFilters.removeAll(newFilters);
  ArrayList<UUID> removedFilters=new ArrayList<UUID>(originalFilters.keySet());
  removedFilters.removeAll(filters.keySet());
  ArrayList<UUID> tempFilters=new ArrayList<>(modifiedFilters);
  for (int i=0; i < tempFilters.size(); i++) {
    UUID uid=tempFilters.get(i);
    if (!filters.get(uid).isModified()) {
      modifiedFilters.remove(uid);
    }
 else {
      filters.get(uid).setModified(false);
    }
  }
  for (  FilterListener listener : filterListeners) {
    for (    UUID uid : newFilters) {
      listener.onAdd(filters.get(uid));
    }
    for (    UUID uid : modifiedFilters) {
      listener.onChange(filters.get(uid));
    }
    for (    UUID uid : removedFilters) {
      listener.onRemove(originalFilters.get(uid));
    }
  }
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
  prefs.setColorFilters(filters);
}",0.9603603603603604
79714,"@Override public LogTableColumn deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
  LogTableColumn column=null;
  column=new LogTableColumn();
  JsonObject object=jsonElement.getAsJsonObject();
  column.setIdentifier(object.get(""String_Node_Str"").getAsInt());
  column.setName(object.get(""String_Node_Str"").getAsString());
  column.setEnabled(object.get(""String_Node_Str"").getAsBoolean());
  column.setDefaultVisibleName(object.get(""String_Node_Str"").getAsString());
  column.setVisibleName(object.get(""String_Node_Str"").getAsString());
  column.setWidth(object.get(""String_Node_Str"").getAsInt());
  column.setType(object.get(""String_Node_Str"").getAsString());
  column.setReadonly(object.get(""String_Node_Str"").getAsBoolean());
  column.setOrder(object.get(""String_Node_Str"").getAsInt());
  column.setVisible(object.get(""String_Node_Str"").getAsBoolean());
  column.setDescription(object.get(""String_Node_Str"").getAsString());
  column.setIsRegEx(object.get(""String_Node_Str"").getAsBoolean());
  LogTableColumn.RegExData regExData=new LogTableColumn.RegExData();
  regExData.setRegExString(object.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsString());
  regExData.setRegExCaseSensitive(object.getAsJsonObject(""String_Node_Str"").get(""String_Node_Str"").getAsBoolean());
  column.setRegExData(regExData);
  return column;
}","@Override public LogTableColumn deserialize(JsonElement jsonElement,Type type,JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
  LogTableColumn column=null;
  column=new LogTableColumn();
  JsonObject object=jsonElement.getAsJsonObject();
  column.setIdentifier(object.get(""String_Node_Str"").getAsInt());
  column.setName(object.get(""String_Node_Str"").getAsString());
  column.setEnabled(object.get(""String_Node_Str"").getAsBoolean());
  column.setDefaultVisibleName(object.get(""String_Node_Str"").getAsString());
  column.setVisibleName(object.get(""String_Node_Str"").getAsString());
  column.setWidth(object.get(""String_Node_Str"").getAsInt());
  column.setType(object.get(""String_Node_Str"").getAsString());
  column.setReadonly(object.get(""String_Node_Str"").getAsBoolean());
  column.setOrder(object.get(""String_Node_Str"").getAsInt());
  column.setVisible(object.get(""String_Node_Str"").getAsBoolean());
  column.setDescription(object.get(""String_Node_Str"").getAsString());
  column.setIsRegEx(object.get(""String_Node_Str"").getAsBoolean());
  LogTableColumn.RegExData regExData=new LogTableColumn.RegExData();
  regExData.setRegExString(object.get(""String_Node_Str"").getAsString());
  regExData.setRegExCaseSensitive(object.get(""String_Node_Str"").getAsBoolean());
  column.setRegExData(regExData);
  return column;
}",0.9746926970354304
79715,"public static Filter parseString(String string) throws Filter.FilterException {
  String regexStripped=stripRegex(string);
  Matcher bracketMatcher=bracketsPattern.matcher(regexStripped);
  if (bracketMatcher.matches()) {
    Filter group;
    boolean inverted=""String_Node_Str"".equals(bracketMatcher.group(2));
    int startBracket=regexStripped.indexOf(""String_Node_Str"");
    int endBracket=getBracketMatch(regexStripped,startBracket);
    group=parseString(string.substring(startBracket + 1,endBracket));
    group.inverted=inverted;
    Pattern leftCompound=Pattern.compile(""String_Node_Str"");
    Pattern rightCompound=Pattern.compile(""String_Node_Str"");
    String left=string.substring(0,startBracket);
    String right=string.substring(endBracket + 1,regexStripped.length());
    Matcher leftMatcher=leftCompound.matcher(left);
    Matcher rightMatcher=rightCompound.matcher(right);
    if (leftMatcher.matches()) {
      group=new CompoundFilter(parseString(leftMatcher.group(1)),leftMatcher.group(2),group);
    }
    if (rightMatcher.matches()) {
      group=new CompoundFilter(group,rightMatcher.group(2),parseString(rightMatcher.group(3)));
    }
    return group;
  }
 else {
    Matcher compoundMatcher=compoundPattern.matcher(string);
    if (compoundMatcher.matches()) {
      return new CompoundFilter(compoundMatcher.group(1),compoundMatcher.group(2),compoundMatcher.group(3));
    }
 else {
      Pattern operation=Pattern.compile(""String_Node_Str"");
      Matcher operationMatcher=operation.matcher(string);
      if (operationMatcher.matches()) {
        return new Filter(operationMatcher.group(1).trim(),operationMatcher.group(2),operationMatcher.group(3).trim());
      }
    }
  }
  throw new Filter.FilterException(""String_Node_Str"");
}","public static Filter parseString(String string) throws Filter.FilterException {
  String regexStripped=stripRegex(string);
  Matcher bracketMatcher=bracketsPattern.matcher(regexStripped);
  if (bracketMatcher.matches()) {
    Filter group;
    boolean inverted=""String_Node_Str"".equals(bracketMatcher.group(2));
    int startBracket=regexStripped.indexOf(""String_Node_Str"");
    int endBracket=getBracketMatch(regexStripped,startBracket);
    group=parseString(string.substring(startBracket + 1,endBracket));
    group.inverted=inverted;
    Pattern leftCompound=Pattern.compile(""String_Node_Str"");
    Pattern rightCompound=Pattern.compile(""String_Node_Str"");
    String left=string.substring(0,startBracket);
    String right=string.substring(endBracket + 1,regexStripped.length());
    Matcher leftMatcher=leftCompound.matcher(left);
    Matcher rightMatcher=rightCompound.matcher(right);
    if (leftMatcher.matches()) {
      group=new CompoundFilter(parseString(leftMatcher.group(1)),leftMatcher.group(2),group);
    }
    if (rightMatcher.matches()) {
      group=new CompoundFilter(group,rightMatcher.group(2),parseString(rightMatcher.group(3)));
    }
    return group;
  }
 else {
    Matcher compoundMatcher=compoundPattern.matcher(regexStripped);
    if (compoundMatcher.matches()) {
      return new CompoundFilter(compoundMatcher.group(1),compoundMatcher.group(2),compoundMatcher.group(3));
    }
 else {
      Pattern operation=Pattern.compile(""String_Node_Str"");
      Matcher operationMatcher=operation.matcher(regexStripped);
      if (operationMatcher.matches()) {
        String left=string.substring(0,operationMatcher.group(1).length()).trim();
        String right=string.substring(operationMatcher.group(1).length() + operationMatcher.group(2).length()).trim();
        return new Filter(left,operationMatcher.group(2),right);
      }
    }
  }
  throw new Filter.FilterException(""String_Node_Str"");
}",0.9151531580374084
79716,"@Override public void run(){
  requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,colorFilters,stdout,stderr,isDebug);
  tableRowSorter=new TableRowSorter(logTable.getModel());
  logTable.setRowSorter(tableRowSorter);
  logTable.generatingTableColumns();
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  JPanel viewPanel=new JPanel();
  viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
  colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
  JPanel filterPanel=new JPanel(new GridBagLayout());
  filterField=new JTextField();
  filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints fieldConstraints=new GridBagConstraints();
  fieldConstraints.fill=GridBagConstraints.BOTH;
  fieldConstraints.gridx=0;
  fieldConstraints.weightx=fieldConstraints.weighty=6.0;
  final JButton filterButton=new JButton(""String_Node_Str"");
  filterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints filterBtnConstraints=new GridBagConstraints();
  filterBtnConstraints.fill=GridBagConstraints.BOTH;
  filterBtnConstraints.gridx=1;
  filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
  final JButton colorFilterButton=new JButton(""String_Node_Str"");
  colorFilterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      colorFilterDialog.setVisible(true);
    }
  }
);
  GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
  colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
  colorFilterBtnConstraints.gridx=2;
  colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
  filterPanel.add(filterField,fieldConstraints);
  filterPanel.add(filterButton,filterBtnConstraints);
  filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
  JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  tableScrollBar=viewScrollPane.getVerticalScrollBar();
  viewPanel.add(filterPanel);
  viewPanel.add(viewScrollPane);
  JTabbedPane tabs=new JTabbedPane();
  tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
  tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
  splitPane.setLeftComponent(viewPanel);
  splitPane.setRightComponent(tabs);
  optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
  AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
  topTabs=new JTabbedPane();
  topTabs.addTab(""String_Node_Str"",null,splitPane,null);
  topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
  topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
  callbacks.addSuiteTab(BurpExtender.this);
  callbacks.registerHttpListener(BurpExtender.this);
  callbacks.registerProxyListener(BurpExtender.this);
}","@Override public void run(){
  requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,loggerPreferences.getColorFilters(),stdout,stderr,isDebug);
  tableRowSorter=new TableRowSorter(logTable.getModel());
  logTable.setRowSorter(tableRowSorter);
  logTable.generatingTableColumns();
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  JPanel viewPanel=new JPanel();
  viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
  colorFilterDialog=new ColorFilterDialog(loggerPreferences,filterListeners);
  JPanel filterPanel=new JPanel(new GridBagLayout());
  filterField=new JTextField();
  filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints fieldConstraints=new GridBagConstraints();
  fieldConstraints.fill=GridBagConstraints.BOTH;
  fieldConstraints.gridx=0;
  fieldConstraints.weightx=fieldConstraints.weighty=6.0;
  final JButton filterButton=new JButton(""String_Node_Str"");
  filterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints filterBtnConstraints=new GridBagConstraints();
  filterBtnConstraints.fill=GridBagConstraints.BOTH;
  filterBtnConstraints.gridx=1;
  filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
  final JButton colorFilterButton=new JButton(""String_Node_Str"");
  colorFilterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      colorFilterDialog.setVisible(true);
    }
  }
);
  GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
  colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
  colorFilterBtnConstraints.gridx=2;
  colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
  filterPanel.add(filterField,fieldConstraints);
  filterPanel.add(filterButton,filterBtnConstraints);
  filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
  JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  tableScrollBar=viewScrollPane.getVerticalScrollBar();
  viewPanel.add(filterPanel);
  viewPanel.add(viewScrollPane);
  JTabbedPane tabs=new JTabbedPane();
  tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
  tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
  splitPane.setLeftComponent(viewPanel);
  splitPane.setRightComponent(tabs);
  optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
  AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
  topTabs=new JTabbedPane();
  topTabs.addTab(""String_Node_Str"",null,splitPane,null);
  topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
  topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
  callbacks.addSuiteTab(BurpExtender.this);
  callbacks.registerHttpListener(BurpExtender.this);
  callbacks.registerProxyListener(BurpExtender.this);
}",0.9924418604651164
79717,"private void logIt(int toolFlag,boolean messageIsRequest,IHttpRequestResponse messageInfo,IInterceptedProxyMessage message){
  if (loggerPreferences.isEnabled()) {
    if (messageInfo == null && message != null) {
      messageInfo=message.getMessageInfo();
    }
    IRequestInfo analyzedReq=helpers.analyzeRequest(messageInfo);
    URL uUrl=analyzedReq.getUrl();
    if (!loggerPreferences.isRestrictedToScope() || callbacks.isInScope(uUrl)) {
      boolean isValidTool=(loggerPreferences.isEnabled4All() || (loggerPreferences.isEnabled4Proxy() && toolFlag == callbacks.TOOL_PROXY) || (loggerPreferences.isEnabled4Intruder() && toolFlag == callbacks.TOOL_INTRUDER)|| (loggerPreferences.isEnabled4Repeater() && toolFlag == callbacks.TOOL_REPEATER)|| (loggerPreferences.isEnabled4Scanner() && toolFlag == callbacks.TOOL_SCANNER)|| (loggerPreferences.isEnabled4Sequencer() && toolFlag == callbacks.TOOL_SEQUENCER)|| (loggerPreferences.isEnabled4Spider() && toolFlag == callbacks.TOOL_SPIDER)|| (loggerPreferences.isEnabled4Extender() && toolFlag == callbacks.TOOL_EXTENDER)|| (loggerPreferences.isEnabled4TargetTab() && toolFlag == callbacks.TOOL_TARGET));
      if (isValidTool) {
        if (messageIsRequest && toolFlag == callbacks.TOOL_PROXY) {
        }
 else         if (!messageIsRequest) {
          LogEntry entry=new LogEntry(logTable.getModel(),toolFlag,messageIsRequest,callbacks.saveBuffersToTempFiles(messageInfo),uUrl,analyzedReq,message,logTable,loggerPreferences,stderr,stderr,isValidTool,callbacks);
          for (          ColorFilter colorFilter : colorFilters.values()) {
            entry.testColorFilter(colorFilter,false);
          }
          int v=(int)(tableScrollBar.getValue() + (tableScrollBar.getHeight() * 1.1));
          int m=tableScrollBar.getMaximum();
          boolean isAtBottom=v >= m;
synchronized (log) {
            int row=log.size();
            log.add(entry);
            logTable.getModel().fireTableRowsInserted(row,row);
          }
          if (isAtBottom)           tableScrollBar.setValue(tableScrollBar.getMaximum() + logTable.getRowHeight());
          if (loggerPreferences.getAutoSave()) {
            optionsJPanel.autoLogItem(entry);
          }
        }
      }
    }
  }
}","private void logIt(int toolFlag,boolean messageIsRequest,IHttpRequestResponse messageInfo,IInterceptedProxyMessage message){
  if (loggerPreferences.isEnabled()) {
    if (messageInfo == null && message != null) {
      messageInfo=message.getMessageInfo();
    }
    IRequestInfo analyzedReq=helpers.analyzeRequest(messageInfo);
    URL uUrl=analyzedReq.getUrl();
    if (!loggerPreferences.isRestrictedToScope() || callbacks.isInScope(uUrl)) {
      boolean isValidTool=(loggerPreferences.isEnabled4All() || (loggerPreferences.isEnabled4Proxy() && toolFlag == callbacks.TOOL_PROXY) || (loggerPreferences.isEnabled4Intruder() && toolFlag == callbacks.TOOL_INTRUDER)|| (loggerPreferences.isEnabled4Repeater() && toolFlag == callbacks.TOOL_REPEATER)|| (loggerPreferences.isEnabled4Scanner() && toolFlag == callbacks.TOOL_SCANNER)|| (loggerPreferences.isEnabled4Sequencer() && toolFlag == callbacks.TOOL_SEQUENCER)|| (loggerPreferences.isEnabled4Spider() && toolFlag == callbacks.TOOL_SPIDER)|| (loggerPreferences.isEnabled4Extender() && toolFlag == callbacks.TOOL_EXTENDER)|| (loggerPreferences.isEnabled4TargetTab() && toolFlag == callbacks.TOOL_TARGET));
      if (isValidTool) {
        if (messageIsRequest && toolFlag == callbacks.TOOL_PROXY) {
        }
 else         if (!messageIsRequest) {
          LogEntry entry=new LogEntry(logTable.getModel(),toolFlag,messageIsRequest,callbacks.saveBuffersToTempFiles(messageInfo),uUrl,analyzedReq,message,logTable,loggerPreferences,stderr,stderr,isValidTool,callbacks);
          for (          ColorFilter colorFilter : loggerPreferences.getColorFilters().values()) {
            entry.testColorFilter(colorFilter,false);
          }
          int v=(int)(tableScrollBar.getValue() + (tableScrollBar.getHeight() * 1.1));
          int m=tableScrollBar.getMaximum();
          boolean isAtBottom=v >= m;
synchronized (log) {
            int row=log.size();
            log.add(entry);
            logTable.getModel().fireTableRowsInserted(row,row);
          }
          if (isAtBottom)           tableScrollBar.setValue(tableScrollBar.getMaximum() + logTable.getRowHeight());
          if (loggerPreferences.getAutoSave()) {
            optionsJPanel.autoLogItem(entry);
          }
        }
      }
    }
  }
}",0.9944432096021338
79718,"@Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  callbacks.setExtensionName(""String_Node_Str"");
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  try {
    Class.forName(""String_Node_Str"");
    canSaveCSV=true;
  }
 catch (  ClassNotFoundException e) {
    stderr.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  loggerPreferences=new LoggerPreferences(stdout,stderr,isDebug);
  this.colorFilters=new HashMap<UUID,ColorFilter>();
  this.filterListeners=new ArrayList<FilterListener>();
  this.filterListeners.add(this);
  this.isDebug=loggerPreferences.isDebugMode();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,colorFilters,stdout,stderr,isDebug);
      tableRowSorter=new TableRowSorter(logTable.getModel());
      logTable.setRowSorter(tableRowSorter);
      logTable.generatingTableColumns();
      JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      JPanel viewPanel=new JPanel();
      viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
      colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
      JPanel filterPanel=new JPanel(new GridBagLayout());
      filterField=new JTextField();
      filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
      filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints fieldConstraints=new GridBagConstraints();
      fieldConstraints.fill=GridBagConstraints.BOTH;
      fieldConstraints.gridx=0;
      fieldConstraints.weightx=fieldConstraints.weighty=6.0;
      final JButton filterButton=new JButton(""String_Node_Str"");
      filterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints filterBtnConstraints=new GridBagConstraints();
      filterBtnConstraints.fill=GridBagConstraints.BOTH;
      filterBtnConstraints.gridx=1;
      filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
      final JButton colorFilterButton=new JButton(""String_Node_Str"");
      colorFilterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          colorFilterDialog.setVisible(true);
        }
      }
);
      GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
      colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
      colorFilterBtnConstraints.gridx=2;
      colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
      filterPanel.add(filterField,fieldConstraints);
      filterPanel.add(filterButton,filterBtnConstraints);
      filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
      JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      tableScrollBar=viewScrollPane.getVerticalScrollBar();
      viewPanel.add(filterPanel);
      viewPanel.add(viewScrollPane);
      JTabbedPane tabs=new JTabbedPane();
      tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
      tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
      splitPane.setLeftComponent(viewPanel);
      splitPane.setRightComponent(tabs);
      optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
      AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
      topTabs=new JTabbedPane();
      topTabs.addTab(""String_Node_Str"",null,splitPane,null);
      topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
      topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
      callbacks.addSuiteTab(BurpExtender.this);
      callbacks.registerHttpListener(BurpExtender.this);
      callbacks.registerProxyListener(BurpExtender.this);
    }
  }
);
}","@Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  callbacks.setExtensionName(""String_Node_Str"");
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  try {
    Class.forName(""String_Node_Str"");
    canSaveCSV=true;
  }
 catch (  ClassNotFoundException e) {
    stderr.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  loggerPreferences=new LoggerPreferences(stdout,stderr,isDebug);
  if (loggerPreferences.getColorFilters() == null)   loggerPreferences.setColorFilters(new HashMap<UUID,ColorFilter>());
  this.filterListeners=new ArrayList<FilterListener>();
  this.filterListeners.add(this);
  this.isDebug=loggerPreferences.isDebugMode();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,loggerPreferences.getColorFilters(),stdout,stderr,isDebug);
      tableRowSorter=new TableRowSorter(logTable.getModel());
      logTable.setRowSorter(tableRowSorter);
      logTable.generatingTableColumns();
      JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      JPanel viewPanel=new JPanel();
      viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
      colorFilterDialog=new ColorFilterDialog(loggerPreferences,filterListeners);
      JPanel filterPanel=new JPanel(new GridBagLayout());
      filterField=new JTextField();
      filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
      filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints fieldConstraints=new GridBagConstraints();
      fieldConstraints.fill=GridBagConstraints.BOTH;
      fieldConstraints.gridx=0;
      fieldConstraints.weightx=fieldConstraints.weighty=6.0;
      final JButton filterButton=new JButton(""String_Node_Str"");
      filterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints filterBtnConstraints=new GridBagConstraints();
      filterBtnConstraints.fill=GridBagConstraints.BOTH;
      filterBtnConstraints.gridx=1;
      filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
      final JButton colorFilterButton=new JButton(""String_Node_Str"");
      colorFilterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          colorFilterDialog.setVisible(true);
        }
      }
);
      GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
      colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
      colorFilterBtnConstraints.gridx=2;
      colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
      filterPanel.add(filterField,fieldConstraints);
      filterPanel.add(filterButton,filterBtnConstraints);
      filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
      JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      tableScrollBar=viewScrollPane.getVerticalScrollBar();
      viewPanel.add(filterPanel);
      viewPanel.add(viewScrollPane);
      JTabbedPane tabs=new JTabbedPane();
      tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
      tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
      splitPane.setLeftComponent(viewPanel);
      splitPane.setRightComponent(tabs);
      optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
      AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
      topTabs=new JTabbedPane();
      topTabs.addTab(""String_Node_Str"",null,splitPane,null);
      topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
      topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
      callbacks.addSuiteTab(BurpExtender.this);
      callbacks.registerHttpListener(BurpExtender.this);
      callbacks.registerProxyListener(BurpExtender.this);
    }
  }
);
}",0.9855326611135466
79719,"public ColorFilterDialog(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> listeners){
  this.filters=filters;
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
  this.filterListeners=listeners;
  this.addComponentListener(this);
  buildDialog();
  pack();
}","public ColorFilterDialog(LoggerPreferences prefs,ArrayList<FilterListener> listeners){
  this.filters=prefs.getColorFilters();
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
  this.filterListeners=listeners;
  this.prefs=prefs;
  this.addComponentListener(this);
  buildDialog();
  pack();
}",0.4041095890410959
79720,"@Override public void componentHidden(ComponentEvent event){
  ArrayList<UUID> newFilters=new ArrayList<UUID>(filters.keySet());
  newFilters.removeAll(originalFilters.keySet());
  ArrayList<UUID> modifiedFilters=new ArrayList<UUID>(filters.keySet());
  modifiedFilters.removeAll(newFilters);
  ArrayList<UUID> removedFilters=new ArrayList<UUID>(originalFilters.keySet());
  removedFilters.removeAll(filters.keySet());
  for (int i=0; i < modifiedFilters.size(); i++) {
    UUID uid=modifiedFilters.get(i);
    if (!filters.get(uid).isModified()) {
      modifiedFilters.remove(uid);
    }
 else {
      filters.get(uid).setModified(false);
    }
  }
  for (  FilterListener listener : filterListeners) {
    for (    UUID uid : newFilters) {
      listener.onAdd(filters.get(uid));
    }
    for (    UUID uid : modifiedFilters) {
      listener.onChange(filters.get(uid));
    }
    for (    UUID uid : removedFilters) {
      listener.onRemove(originalFilters.get(uid));
    }
  }
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
}","@Override public void componentHidden(ComponentEvent event){
  ArrayList<UUID> newFilters=new ArrayList<UUID>(filters.keySet());
  newFilters.removeAll(originalFilters.keySet());
  ArrayList<UUID> modifiedFilters=new ArrayList<UUID>(filters.keySet());
  modifiedFilters.removeAll(newFilters);
  ArrayList<UUID> removedFilters=new ArrayList<UUID>(originalFilters.keySet());
  removedFilters.removeAll(filters.keySet());
  for (int i=0; i < modifiedFilters.size(); i++) {
    UUID uid=modifiedFilters.get(i);
    if (!filters.get(uid).isModified()) {
      modifiedFilters.remove(uid);
    }
 else {
      filters.get(uid).setModified(false);
    }
  }
  for (  FilterListener listener : filterListeners) {
    for (    UUID uid : newFilters) {
      listener.onAdd(filters.get(uid));
    }
    for (    UUID uid : modifiedFilters) {
      listener.onChange(filters.get(uid));
    }
    for (    UUID uid : removedFilters) {
      listener.onRemove(originalFilters.get(uid));
    }
  }
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
  prefs.setColorFilters(filters);
}",0.984037558685446
79721,"ColorFilterTableModel(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.filters=filters;
  this.filterListeners=filterListeners;
}","ColorFilterTableModel(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.filters=filters;
  for (  UUID uid : filters.keySet()) {
    rowUUIDs.put(rowUUIDs.size(),uid);
  }
  this.filterListeners=filterListeners;
}",0.7950617283950617
79722,"public LoggerPreferences(PrintWriter stdout,PrintWriter stderr,boolean isDebug){
  this.stdout=stdout;
  this.stderr=stderr;
  this.isDebug=isDebug;
  if (prefs.getDouble(""String_Node_Str"",0.0) < getVersion()) {
    MoreHelp.showMessage(""String_Node_Str"");
    resetTableSettings();
    setVersion(getVersion());
  }
 else   if (prefs.getDouble(""String_Node_Str"",0.0) > getVersion()) {
    MoreHelp.showMessage(""String_Node_Str"");
    resetTableSettings();
    setVersion(getVersion());
  }
  isDebugMode=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled=prefs.getBoolean(""String_Node_Str"",true);
  isRestrictedToScope=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4All=prefs.getBoolean(""String_Node_Str"",true);
  isEnabled4Proxy=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4TargetTab=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Extender=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Sequencer=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Repeater=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Scanner=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Intruder=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Spider=prefs.getBoolean(""String_Node_Str"",false);
  logFiltered=prefs.getBoolean(""String_Node_Str"",false);
  int tableDetailsJSONString_size=prefs.getInt(""String_Node_Str"",1);
  if (tableDetailsJSONString_size > 99)   tableDetailsJSONString_size=1;
  String tempTableDetailsJSONString=""String_Node_Str"";
  for (int idx=0; idx <= tableDetailsJSONString_size; idx++) {
    tempTableDetailsJSONString+=prefs.get(""String_Node_Str"" + idx,""String_Node_Str"");
  }
  this.tableDetailsJSONString=tempTableDetailsJSONString;
}","public LoggerPreferences(PrintWriter stdout,PrintWriter stderr,boolean isDebug){
  this.stdout=stdout;
  this.stderr=stderr;
  this.isDebug=isDebug;
  if (prefs.getDouble(""String_Node_Str"",0.0) < getVersion()) {
    MoreHelp.showMessage(""String_Node_Str"");
    resetTableSettings();
    setVersion(getVersion());
  }
 else   if (prefs.getDouble(""String_Node_Str"",0.0) > getVersion()) {
    MoreHelp.showMessage(""String_Node_Str"");
    resetTableSettings();
    setVersion(getVersion());
  }
  isDebugMode=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled=prefs.getBoolean(""String_Node_Str"",true);
  isRestrictedToScope=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4All=prefs.getBoolean(""String_Node_Str"",true);
  isEnabled4Proxy=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4TargetTab=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Extender=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Sequencer=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Repeater=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Scanner=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Intruder=prefs.getBoolean(""String_Node_Str"",false);
  isEnabled4Spider=prefs.getBoolean(""String_Node_Str"",false);
  logFiltered=prefs.getBoolean(""String_Node_Str"",false);
  int tableDetailsJSONString_size=prefs.getInt(""String_Node_Str"",1);
  if (tableDetailsJSONString_size > 99)   tableDetailsJSONString_size=1;
  String tempTableDetailsJSONString=""String_Node_Str"";
  for (int idx=0; idx <= tableDetailsJSONString_size; idx++) {
    tempTableDetailsJSONString+=prefs.get(""String_Node_Str"" + idx,""String_Node_Str"");
  }
  this.tableDetailsJSONString=tempTableDetailsJSONString;
  String c=prefs.get(""String_Node_Str"",""String_Node_Str"");
  this.colorFilters=gson.fromJson(prefs.get(""String_Node_Str"",""String_Node_Str""),new TypeToken<Map<UUID,ColorFilter>>(){
  }
.getType());
}",0.9452016689847008
79723,"public void setBackgroundColor(Color backgroundColor){
  this.backgroundColor=backgroundColor;
}","public void setBackgroundColor(Color backgroundColor){
  this.backgroundColor=backgroundColor;
  this.modified=true;
}",0.897196261682243
79724,"@Override public String toString(){
  return left + ""String_Node_Str"" + operation.representation+ ""String_Node_Str""+ right;
}","@Override public String toString(){
  String lString=left.toString();
  if (left instanceof Pattern)   lString=""String_Node_Str"" + left + ""String_Node_Str"";
  String rString=right.toString();
  if (right instanceof Pattern)   rString=""String_Node_Str"" + right + ""String_Node_Str"";
  return lString + ""String_Node_Str"" + operation.representation+ ""String_Node_Str""+ rString;
}",0.472
79725,"public static Filter parseString(String string) throws Filter.FilterException {
  String regexStripped=stripRegex(string);
  Matcher bracketMatcher=bracketsPattern.matcher(regexStripped);
  if (bracketMatcher.matches()) {
    Filter group;
    boolean inverted=""String_Node_Str"".equals(bracketMatcher.group(2));
    int startBracket=regexStripped.indexOf(""String_Node_Str"");
    int endBracket=getBracketMatch(regexStripped,startBracket);
    group=parseString(string.substring(startBracket + 1,endBracket));
    group.inverted=inverted;
    Pattern leftCompound=Pattern.compile(""String_Node_Str"");
    Pattern rightCompound=Pattern.compile(""String_Node_Str"");
    String left=string.substring(0,startBracket);
    String right=string.substring(endBracket + 1,regexStripped.length());
    Matcher leftMatcher=leftCompound.matcher(left);
    Matcher rightMatcher=rightCompound.matcher(right);
    if (leftMatcher.matches()) {
      group=new CompoundFilter(parseString(leftMatcher.group(1)),leftMatcher.group(2),group);
    }
    if (rightMatcher.matches()) {
      group=new CompoundFilter(group,rightMatcher.group(2),parseString(rightMatcher.group(3)));
    }
    return group;
  }
 else {
    Matcher compoundMatcher=compoundPattern.matcher(regexStripped);
    if (compoundMatcher.matches()) {
      return new CompoundFilter(compoundMatcher.group(1),compoundMatcher.group(2),compoundMatcher.group(3));
    }
 else {
      Pattern operation=Pattern.compile(""String_Node_Str"");
      Matcher operationMatcher=operation.matcher(regexStripped);
      if (operationMatcher.matches()) {
        String left=string.substring(0,operationMatcher.group(1).length()).trim();
        String right=string.substring(operationMatcher.group(1).length() + operationMatcher.group(2).length()).trim();
        return new Filter(left,operationMatcher.group(2),right);
      }
    }
  }
  throw new Filter.FilterException(""String_Node_Str"");
}","public static Filter parseString(String string) throws Filter.FilterException {
  String regexStripped=stripRegex(string);
  Matcher bracketMatcher=bracketsPattern.matcher(regexStripped);
  if (bracketMatcher.matches()) {
    Filter group;
    boolean inverted=""String_Node_Str"".equals(bracketMatcher.group(2));
    int startBracket=regexStripped.indexOf(""String_Node_Str"");
    int endBracket=getBracketMatch(regexStripped,startBracket);
    group=parseString(string.substring(startBracket + 1,endBracket));
    group.inverted=inverted;
    Pattern leftCompound=Pattern.compile(""String_Node_Str"");
    Pattern rightCompound=Pattern.compile(""String_Node_Str"");
    String left=string.substring(0,startBracket);
    String right=string.substring(endBracket + 1,regexStripped.length());
    Matcher leftMatcher=leftCompound.matcher(left);
    Matcher rightMatcher=rightCompound.matcher(right);
    if (leftMatcher.matches()) {
      group=new CompoundFilter(parseString(leftMatcher.group(1)),leftMatcher.group(2),group);
    }
    if (rightMatcher.matches()) {
      group=new CompoundFilter(group,rightMatcher.group(2),parseString(rightMatcher.group(3)));
    }
    return group;
  }
 else {
    Matcher compoundMatcher=compoundPattern.matcher(regexStripped);
    if (compoundMatcher.matches()) {
      String left=string.substring(0,compoundMatcher.group(1).length()).trim();
      String right=string.substring(compoundMatcher.group(1).length() + compoundMatcher.group(2).length()).trim();
      return new CompoundFilter(left,compoundMatcher.group(2),right);
    }
 else {
      Pattern operation=Pattern.compile(""String_Node_Str"");
      Matcher operationMatcher=operation.matcher(regexStripped);
      if (operationMatcher.matches()) {
        String left=string.substring(0,operationMatcher.group(1).length()).trim();
        String right=string.substring(operationMatcher.group(1).length() + operationMatcher.group(2).length()).trim();
        return new Filter(left,operationMatcher.group(2),right);
      }
    }
  }
  throw new Filter.FilterException(""String_Node_Str"");
}",0.9370943584623064
79726,"private void logIt(int toolFlag,boolean messageIsRequest,IHttpRequestResponse messageInfo,IInterceptedProxyMessage message){
  if (loggerPreferences.isEnabled()) {
    if (messageInfo == null && message != null) {
      messageInfo=message.getMessageInfo();
    }
    IRequestInfo analyzedReq=helpers.analyzeRequest(messageInfo);
    URL uUrl=analyzedReq.getUrl();
    if (!loggerPreferences.isRestrictedToScope() || callbacks.isInScope(uUrl)) {
      boolean isValidTool=(loggerPreferences.isEnabled4All() || (loggerPreferences.isEnabled4Proxy() && toolFlag == callbacks.TOOL_PROXY) || (loggerPreferences.isEnabled4Intruder() && toolFlag == callbacks.TOOL_INTRUDER)|| (loggerPreferences.isEnabled4Repeater() && toolFlag == callbacks.TOOL_REPEATER)|| (loggerPreferences.isEnabled4Scanner() && toolFlag == callbacks.TOOL_SCANNER)|| (loggerPreferences.isEnabled4Sequencer() && toolFlag == callbacks.TOOL_SEQUENCER)|| (loggerPreferences.isEnabled4Spider() && toolFlag == callbacks.TOOL_SPIDER)|| (loggerPreferences.isEnabled4Extender() && toolFlag == callbacks.TOOL_EXTENDER)|| (loggerPreferences.isEnabled4TargetTab() && toolFlag == callbacks.TOOL_TARGET));
      if (isValidTool) {
        if (messageIsRequest && toolFlag == callbacks.TOOL_PROXY) {
        }
 else         if (!messageIsRequest) {
          LogEntry entry=new LogEntry(logTable.getModel(),toolFlag,messageIsRequest,callbacks.saveBuffersToTempFiles(messageInfo),uUrl,analyzedReq,message,logTable,loggerPreferences,stderr,stderr,isValidTool,callbacks);
          for (          ColorFilter colorFilter : loggerPreferences.getColorFilters().values()) {
            entry.testColorFilter(colorFilter,false);
          }
          int v=(int)(logTableScrollBar.getValue() + (logTableScrollBar.getHeight() * 1.1));
          int m=logTableScrollBar.getMaximum();
          boolean isAtBottom=v >= m;
synchronized (log) {
            int row=log.size();
            log.add(entry);
            logTable.getModel().fireTableRowsInserted(row,row);
          }
          if (isAtBottom)           logTableScrollBar.setValue(logTableScrollBar.getMaximum() + logTable.getRowHeight());
          if (loggerPreferences.getAutoSave()) {
            optionsJPanel.autoLogItem(entry);
          }
        }
      }
    }
  }
}","private void logIt(int toolFlag,boolean messageIsRequest,IHttpRequestResponse messageInfo,IInterceptedProxyMessage message){
  if (loggerPreferences.isEnabled()) {
    if (messageInfo == null && message != null) {
      messageInfo=message.getMessageInfo();
    }
    IRequestInfo analyzedReq=helpers.analyzeRequest(messageInfo);
    URL uUrl=analyzedReq.getUrl();
    if (!loggerPreferences.isRestrictedToScope() || callbacks.isInScope(uUrl)) {
      boolean isValidTool=(loggerPreferences.isEnabled4All() || (loggerPreferences.isEnabled4Proxy() && toolFlag == callbacks.TOOL_PROXY) || (loggerPreferences.isEnabled4Intruder() && toolFlag == callbacks.TOOL_INTRUDER)|| (loggerPreferences.isEnabled4Repeater() && toolFlag == callbacks.TOOL_REPEATER)|| (loggerPreferences.isEnabled4Scanner() && toolFlag == callbacks.TOOL_SCANNER)|| (loggerPreferences.isEnabled4Sequencer() && toolFlag == callbacks.TOOL_SEQUENCER)|| (loggerPreferences.isEnabled4Spider() && toolFlag == callbacks.TOOL_SPIDER)|| (loggerPreferences.isEnabled4Extender() && toolFlag == callbacks.TOOL_EXTENDER)|| (loggerPreferences.isEnabled4TargetTab() && toolFlag == callbacks.TOOL_TARGET));
      if (isValidTool) {
        if (messageIsRequest && toolFlag == callbacks.TOOL_PROXY) {
        }
 else         if (!messageIsRequest) {
          LogEntry entry=new LogEntry(toolFlag,messageIsRequest,callbacks.saveBuffersToTempFiles(messageInfo),uUrl,analyzedReq,message);
          for (          ColorFilter colorFilter : loggerPreferences.getColorFilters().values()) {
            entry.testColorFilter(colorFilter,false);
          }
          int v=(int)(logTableScrollBar.getValue() + (logTableScrollBar.getHeight() * 1.1));
          int m=logTableScrollBar.getMaximum();
          boolean isAtBottom=v >= m;
synchronized (log) {
            int row=log.size();
            log.add(entry);
            logTable.getModel().fireTableRowsInserted(row,row);
          }
          if (isAtBottom)           logTableScrollBar.setValue(logTableScrollBar.getMaximum() + logTable.getRowHeight());
          if (loggerPreferences.getAutoSave()) {
            optionsJPanel.autoLogItem(entry);
          }
        }
      }
    }
  }
}",0.981427612441262
79727,"private JPanel getFilterPanel(){
  JPanel filterPanel=new JPanel(new GridBagLayout());
  colorFilterDialog=new ColorFilterDialog(loggerPreferences,filterListeners);
  filterField=new JTextField();
  filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints fieldConstraints=new GridBagConstraints();
  fieldConstraints.fill=GridBagConstraints.BOTH;
  fieldConstraints.gridx=0;
  fieldConstraints.weightx=fieldConstraints.weighty=6.0;
  final JButton filterButton=new JButton(""String_Node_Str"");
  filterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints filterBtnConstraints=new GridBagConstraints();
  filterBtnConstraints.fill=GridBagConstraints.BOTH;
  filterBtnConstraints.gridx=1;
  filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
  final JButton colorFilterButton=new JButton(""String_Node_Str"");
  colorFilterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      colorFilterDialog.setVisible(true);
    }
  }
);
  GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
  colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
  colorFilterBtnConstraints.gridx=2;
  colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
  filterPanel.add(filterField,fieldConstraints);
  filterPanel.add(filterButton,filterBtnConstraints);
  filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
  return filterPanel;
}","private JPanel getFilterPanel(){
  JPanel filterPanel=new JPanel(new GridBagLayout());
  colorFilterDialog=new ColorFilterDialog(loggerPreferences,filterListeners);
  filterField=new JTextField();
  filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      logTable.setFilter(filterField);
    }
  }
);
  GridBagConstraints fieldConstraints=new GridBagConstraints();
  fieldConstraints.fill=GridBagConstraints.BOTH;
  fieldConstraints.gridx=0;
  fieldConstraints.weightx=fieldConstraints.weighty=6.0;
  final JButton filterButton=new JButton(""String_Node_Str"");
  filterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      logTable.setFilter(filterField);
    }
  }
);
  GridBagConstraints filterBtnConstraints=new GridBagConstraints();
  filterBtnConstraints.fill=GridBagConstraints.BOTH;
  filterBtnConstraints.gridx=1;
  filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
  final JButton colorFilterButton=new JButton(""String_Node_Str"");
  colorFilterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      colorFilterDialog.setVisible(true);
    }
  }
);
  GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
  colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
  colorFilterBtnConstraints.gridx=2;
  colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
  filterPanel.add(filterField,fieldConstraints);
  filterPanel.add(filterButton,filterBtnConstraints);
  filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
  return filterPanel;
}",0.9782016348773842
79728,"@Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  callbacks.setExtensionName(""String_Node_Str"");
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  try {
    Class.forName(""String_Node_Str"");
    canSaveCSV=true;
  }
 catch (  ClassNotFoundException e) {
    stderr.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  loggerPreferences=new LoggerPreferences(stdout,stderr,isDebug);
  if (loggerPreferences.getColorFilters() == null)   loggerPreferences.setColorFilters(new HashMap<UUID,ColorFilter>());
  this.filterListeners=new ArrayList<FilterListener>();
  this.filterListeners.add(this);
  this.isDebug=loggerPreferences.isDebugMode();
  requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,loggerPreferences.getColorFilters(),stdout,stderr,isDebug);
  optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
  aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainUI=new JTabbedPane(){
        @Override public void removeNotify(){
          super.removeNotify();
          if (loggerMenu != null) {
            loggerMenu.getParent().remove(loggerMenu);
          }
        }
      }
;
      logViewJPanelWrapper=new JPanel(new BorderLayout());
      logViewSplit=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
      logViewTabbed=new JTabbedPane();
      logTablePanel=new JPanel(new GridBagLayout());
      JScrollPane logTableScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      logTableScrollBar=logTableScrollPane.getVerticalScrollBar();
      GridBagConstraints gbc=new GridBagConstraints();
      gbc.weighty=1;
      gbc.gridy=0;
      gbc.fill=GridBagConstraints.BOTH;
      gbc.weightx=1;
      logTablePanel.add(getFilterPanel(),gbc);
      gbc.weighty=999;
      gbc.gridy=1;
      logTablePanel.add(logTableScrollPane,gbc);
      logViewSplit.setBottomComponent(reqRespTabbedPane);
      logViewSplit.setResizeWeight(0.5);
      reqRespTabbedPane=new JTabbedPane();
      reqRespTabbedPane.addTab(""String_Node_Str"",requestViewer.getComponent());
      reqRespTabbedPane.addTab(""String_Node_Str"",responseViewer.getComponent());
      reqRespSplitPane=new JSplitPane();
      reqRespSplitPane.setResizeWeight(0.5);
      logViewTabbed.addTab(""String_Node_Str"",logTablePanel);
      logViewTabbed.addTab(""String_Node_Str"",reqRespSplitPane);
      setLayout(loggerPreferences.getView());
      mainUI.addTab(""String_Node_Str"",null,logViewJPanelWrapper,null);
      mainUI.addTab(""String_Node_Str"",null,optionsJPanel,null);
      mainUI.addTab(""String_Node_Str"",null,aboutJPanel,null);
      callbacks.addSuiteTab(BurpExtender.this);
      callbacks.registerHttpListener(BurpExtender.this);
      callbacks.registerProxyListener(BurpExtender.this);
      JFrame rootFrame=(JFrame)SwingUtilities.getWindowAncestor(mainUI);
      try {
        JMenuBar menuBar=rootFrame.getJMenuBar();
        loggerMenu=new JMenu(getTabCaption());
        JMenuItem colorFilters=new JMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            colorFilterDialog.setVisible(true);
          }
        }
);
        loggerMenu.add(colorFilters);
        JMenu viewMenu=new JMenu(""String_Node_Str"");
        ButtonGroup bGroup=new ButtonGroup();
        JRadioButtonMenuItem viewMenuItem=new JRadioButtonMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            setLayout(LoggerPreferences.View.VERTICAL);
          }
        }
);
        viewMenuItem.setSelected(loggerPreferences.getView() == LoggerPreferences.View.VERTICAL);
        viewMenu.add(viewMenuItem);
        bGroup.add(viewMenuItem);
        viewMenuItem=new JRadioButtonMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            setLayout(LoggerPreferences.View.HORIZONTAL);
          }
        }
);
        viewMenu.add(viewMenuItem);
        bGroup.add(viewMenuItem);
        viewMenuItem=new JRadioButtonMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            setLayout(LoggerPreferences.View.TABS);
          }
        }
);
        viewMenu.add(viewMenuItem);
        bGroup.add(viewMenuItem);
        loggerMenu.add(viewMenu);
        menuBar.add(loggerMenu,menuBar.getMenuCount() - 1);
      }
 catch (      NullPointerException nPException) {
        loggerMenu=null;
      }
    }
  }
);
  if (!callbacks.isExtensionBapp() && loggerPreferences.checkUpdatesOnStartup()) {
    aboutJPanel.checkForUpdate(false);
  }
}","@Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  this.instance=this;
  callbacks.setExtensionName(""String_Node_Str"");
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  try {
    Class.forName(""String_Node_Str"");
    canSaveCSV=true;
  }
 catch (  ClassNotFoundException e) {
    stderr.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  loggerPreferences=new LoggerPreferences(stdout,stderr,isDebug);
  if (loggerPreferences.getColorFilters() == null)   loggerPreferences.setColorFilters(new HashMap<UUID,ColorFilter>());
  this.filterListeners=new ArrayList<FilterListener>();
  this.filterListeners.add(this);
  this.isDebug=loggerPreferences.isDebugMode();
  requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  logTable=new LogTable(log,stdout,stderr,isDebug);
  optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
  aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainUI=new JTabbedPane(){
        @Override public void removeNotify(){
          super.removeNotify();
          if (loggerMenu != null) {
            loggerMenu.getParent().remove(loggerMenu);
          }
        }
      }
;
      logViewJPanelWrapper=new JPanel(new BorderLayout());
      logViewSplit=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
      logViewTabbed=new JTabbedPane();
      logTablePanel=new JPanel(new GridBagLayout());
      JScrollPane logTableScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      logTableScrollBar=logTableScrollPane.getVerticalScrollBar();
      GridBagConstraints gbc=new GridBagConstraints();
      gbc.weighty=1;
      gbc.gridy=0;
      gbc.fill=GridBagConstraints.BOTH;
      gbc.weightx=1;
      logTablePanel.add(getFilterPanel(),gbc);
      gbc.weighty=999;
      gbc.gridy=1;
      logTablePanel.add(logTableScrollPane,gbc);
      logViewSplit.setBottomComponent(reqRespTabbedPane);
      logViewSplit.setResizeWeight(0.5);
      reqRespTabbedPane=new JTabbedPane();
      reqRespTabbedPane.addTab(""String_Node_Str"",requestViewer.getComponent());
      reqRespTabbedPane.addTab(""String_Node_Str"",responseViewer.getComponent());
      reqRespSplitPane=new JSplitPane();
      reqRespSplitPane.setResizeWeight(0.5);
      logViewTabbed.addTab(""String_Node_Str"",logTablePanel);
      logViewTabbed.addTab(""String_Node_Str"",reqRespSplitPane);
      setLayout(loggerPreferences.getView());
      mainUI.addTab(""String_Node_Str"",null,logViewJPanelWrapper,null);
      mainUI.addTab(""String_Node_Str"",null,optionsJPanel,null);
      mainUI.addTab(""String_Node_Str"",null,aboutJPanel,null);
      callbacks.addSuiteTab(BurpExtender.this);
      callbacks.registerHttpListener(BurpExtender.this);
      callbacks.registerProxyListener(BurpExtender.this);
      JFrame rootFrame=(JFrame)SwingUtilities.getWindowAncestor(mainUI);
      try {
        JMenuBar menuBar=rootFrame.getJMenuBar();
        loggerMenu=new JMenu(getTabCaption());
        JMenuItem colorFilters=new JMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            colorFilterDialog.setVisible(true);
          }
        }
);
        loggerMenu.add(colorFilters);
        JMenu viewMenu=new JMenu(""String_Node_Str"");
        ButtonGroup bGroup=new ButtonGroup();
        JRadioButtonMenuItem viewMenuItem=new JRadioButtonMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            setLayout(LoggerPreferences.View.VERTICAL);
          }
        }
);
        viewMenuItem.setSelected(loggerPreferences.getView() == LoggerPreferences.View.VERTICAL);
        viewMenu.add(viewMenuItem);
        bGroup.add(viewMenuItem);
        viewMenuItem=new JRadioButtonMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            setLayout(LoggerPreferences.View.HORIZONTAL);
          }
        }
);
        viewMenu.add(viewMenuItem);
        bGroup.add(viewMenuItem);
        viewMenuItem=new JRadioButtonMenuItem(new AbstractAction(""String_Node_Str""){
          @Override public void actionPerformed(          ActionEvent actionEvent){
            setLayout(LoggerPreferences.View.TABS);
          }
        }
);
        viewMenu.add(viewMenuItem);
        bGroup.add(viewMenuItem);
        loggerMenu.add(viewMenu);
        menuBar.add(loggerMenu,menuBar.getMenuCount() - 1);
      }
 catch (      NullPointerException nPException) {
        loggerMenu=null;
      }
    }
  }
);
  if (!callbacks.isExtensionBapp() && loggerPreferences.checkUpdatesOnStartup()) {
    aboutJPanel.checkForUpdate(false);
  }
}",0.988863287250384
79729,"ColorFilterTable(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.setModel(new ColorFilterTableModel(filters,filterListeners));
  this.setFillsViewportHeight(true);
  this.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
  this.setAutoCreateRowSorter(false);
  this.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  this.setRowHeight(20);
  ((JComponent)this.getDefaultRenderer(Boolean.class)).setOpaque(true);
  ((JComponent)this.getDefaultRenderer(JButton.class)).setOpaque(true);
  this.getColumnModel().getColumn(1).setCellRenderer(new FilterRenderer());
  this.getColumnModel().getColumn(2).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(2).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(3).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(5).setCellRenderer(new Table.JTableButtonRenderer());
  this.setDragEnabled(true);
  this.setDropMode(DropMode.INSERT);
  int[] minWidths={100,250,50,50,100,100};
  for (int i=0; i < minWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMinWidth(minWidths[i]);
  }
  int[] maxWidths={9999,9999,200,200,100,100};
  for (int i=0; i < maxWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMaxWidth(maxWidths[i]);
  }
  this.setMinimumSize(new Dimension(850,200));
  final JTable _this=this;
  this.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent mouseEvent){
      if (SwingUtilities.isLeftMouseButton(mouseEvent)) {
        int col=_this.columnAtPoint(mouseEvent.getPoint());
        int row=_this.rowAtPoint(mouseEvent.getPoint());
        ((ColorFilterTableModel)getModel()).onClick(row,col);
      }
    }
  }
);
}","ColorFilterTable(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.setModel(new ColorFilterTableModel(filters,filterListeners));
  this.setFillsViewportHeight(true);
  this.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
  this.setAutoCreateRowSorter(false);
  this.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  this.setRowHeight(20);
  ((JComponent)this.getDefaultRenderer(Boolean.class)).setOpaque(true);
  ((JComponent)this.getDefaultRenderer(JButton.class)).setOpaque(true);
  this.getColumnModel().getColumn(1).setCellRenderer(new FilterRenderer());
  this.getColumnModel().getColumn(2).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(2).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(3).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(5).setCellRenderer(new LogTable.JTableButtonRenderer());
  this.setDragEnabled(true);
  this.setDropMode(DropMode.INSERT);
  int[] minWidths={100,250,50,50,100,100};
  for (int i=0; i < minWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMinWidth(minWidths[i]);
  }
  int[] maxWidths={9999,9999,200,200,100,100};
  for (int i=0; i < maxWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMaxWidth(maxWidths[i]);
  }
  this.setMinimumSize(new Dimension(850,200));
  final JTable _this=this;
  this.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent mouseEvent){
      if (SwingUtilities.isLeftMouseButton(mouseEvent)) {
        int col=_this.columnAtPoint(mouseEvent.getPoint());
        int row=_this.rowAtPoint(mouseEvent.getPoint());
        ((ColorFilterTableModel)getModel()).onClick(row,col);
      }
    }
  }
);
}",0.9991760505355672
79730,"@Override public void onChange(ColorFilter filter){
  if (!filter.isEnabled() || filter.getFilter() == null)   return;
synchronized (log) {
    for (int i=0; i < log.size(); i++) {
      boolean colorResult=log.get(i).testColorFilter(filter);
      if (colorResult)       logTable.getModel().fireTableRowsUpdated(i,i);
    }
  }
}","@Override public void onChange(ColorFilter filter){
  if (!filter.isEnabled() || filter.getFilter() == null)   return;
synchronized (log) {
    for (int i=0; i < log.size(); i++) {
      boolean colorResult=log.get(i).testColorFilter(filter,true);
      if (colorResult)       logTable.getModel().fireTableRowsUpdated(i,i);
    }
  }
}",0.9924812030075189
79731,"@Override public void run(){
  requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,colorFilters,stdout,stderr,isDebug);
  tableRowSorter=new TableRowSorter(logTable.getModel());
  logTable.setRowSorter(tableRowSorter);
  logTable.generatingTableColumns();
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  JPanel viewPanel=new JPanel();
  viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
  JPanel filterPanel=new JPanel(new GridBagLayout());
  filterField=new JTextField();
  filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints fieldConstraints=new GridBagConstraints();
  fieldConstraints.fill=GridBagConstraints.BOTH;
  fieldConstraints.gridx=0;
  fieldConstraints.weightx=fieldConstraints.weighty=6.0;
  final JButton filterButton=new JButton(""String_Node_Str"");
  filterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints filterBtnConstraints=new GridBagConstraints();
  filterBtnConstraints.fill=GridBagConstraints.BOTH;
  filterBtnConstraints.gridx=1;
  filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
  final JButton colorFilterButton=new JButton(""String_Node_Str"");
  colorFilterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
      colorFilterDialog.setVisible(true);
    }
  }
);
  GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
  colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
  colorFilterBtnConstraints.gridx=2;
  colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
  filterPanel.add(filterField,fieldConstraints);
  filterPanel.add(filterButton,filterBtnConstraints);
  filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
  JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  viewPanel.add(filterPanel);
  viewPanel.add(viewScrollPane);
  JTabbedPane tabs=new JTabbedPane();
  tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
  tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
  splitPane.setLeftComponent(viewPanel);
  splitPane.setRightComponent(tabs);
  optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
  AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
  topTabs=new JTabbedPane();
  topTabs.addTab(""String_Node_Str"",null,splitPane,null);
  topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
  topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
  callbacks.addSuiteTab(BurpExtender.this);
  callbacks.registerHttpListener(BurpExtender.this);
  callbacks.registerProxyListener(BurpExtender.this);
}","@Override public void run(){
  requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
  logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,colorFilters,stdout,stderr,isDebug);
  tableRowSorter=new TableRowSorter(logTable.getModel());
  logTable.setRowSorter(tableRowSorter);
  logTable.generatingTableColumns();
  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  JPanel viewPanel=new JPanel();
  viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
  colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
  JPanel filterPanel=new JPanel(new GridBagLayout());
  filterField=new JTextField();
  filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
  filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints fieldConstraints=new GridBagConstraints();
  fieldConstraints.fill=GridBagConstraints.BOTH;
  fieldConstraints.gridx=0;
  fieldConstraints.weightx=fieldConstraints.weighty=6.0;
  final JButton filterButton=new JButton(""String_Node_Str"");
  filterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      setFilter();
    }
  }
);
  GridBagConstraints filterBtnConstraints=new GridBagConstraints();
  filterBtnConstraints.fill=GridBagConstraints.BOTH;
  filterBtnConstraints.gridx=1;
  filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
  final JButton colorFilterButton=new JButton(""String_Node_Str"");
  colorFilterButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      colorFilterDialog.setVisible(true);
    }
  }
);
  GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
  colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
  colorFilterBtnConstraints.gridx=2;
  colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
  filterPanel.add(filterField,fieldConstraints);
  filterPanel.add(filterButton,filterBtnConstraints);
  filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
  JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  viewPanel.add(filterPanel);
  viewPanel.add(viewScrollPane);
  JTabbedPane tabs=new JTabbedPane();
  tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
  tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
  splitPane.setLeftComponent(viewPanel);
  splitPane.setRightComponent(tabs);
  optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
  AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
  topTabs=new JTabbedPane();
  topTabs.addTab(""String_Node_Str"",null,splitPane,null);
  topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
  topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
  callbacks.addSuiteTab(BurpExtender.this);
  callbacks.registerHttpListener(BurpExtender.this);
  callbacks.registerProxyListener(BurpExtender.this);
}",0.9777580071174378
79732,"private void logIt(int toolFlag,boolean messageIsRequest,IHttpRequestResponse messageInfo,IInterceptedProxyMessage message){
  if (loggerPreferences.isEnabled()) {
    if (messageInfo == null && message != null) {
      messageInfo=message.getMessageInfo();
    }
    IRequestInfo analyzedReq=helpers.analyzeRequest(messageInfo);
    URL uUrl=analyzedReq.getUrl();
    if (!loggerPreferences.isRestrictedToScope() || callbacks.isInScope(uUrl)) {
      boolean isValidTool=(loggerPreferences.isEnabled4All() || (loggerPreferences.isEnabled4Proxy() && toolFlag == callbacks.TOOL_PROXY) || (loggerPreferences.isEnabled4Intruder() && toolFlag == callbacks.TOOL_INTRUDER)|| (loggerPreferences.isEnabled4Repeater() && toolFlag == callbacks.TOOL_REPEATER)|| (loggerPreferences.isEnabled4Scanner() && toolFlag == callbacks.TOOL_SCANNER)|| (loggerPreferences.isEnabled4Sequencer() && toolFlag == callbacks.TOOL_SEQUENCER)|| (loggerPreferences.isEnabled4Spider() && toolFlag == callbacks.TOOL_SPIDER)|| (loggerPreferences.isEnabled4Extender() && toolFlag == callbacks.TOOL_EXTENDER)|| (loggerPreferences.isEnabled4TargetTab() && toolFlag == callbacks.TOOL_TARGET));
      if (isValidTool) {
        if (messageIsRequest && toolFlag == callbacks.TOOL_PROXY) {
        }
 else         if (!messageIsRequest) {
          LogEntry entry=new LogEntry(toolFlag,messageIsRequest,callbacks.saveBuffersToTempFiles(messageInfo),uUrl,analyzedReq,message,logTable,loggerPreferences,stderr,stderr,isValidTool,callbacks);
          for (          ColorFilter colorFilter : colorFilters) {
            entry.testColorFilter(colorFilter);
          }
synchronized (log) {
            int row=log.size();
            log.add(entry);
            logTable.getModel().fireTableRowsInserted(row,row);
          }
          if (loggerPreferences.getAutoSave()) {
            optionsJPanel.autoLogItem(entry);
          }
        }
      }
    }
  }
}","private void logIt(int toolFlag,boolean messageIsRequest,IHttpRequestResponse messageInfo,IInterceptedProxyMessage message){
  if (loggerPreferences.isEnabled()) {
    if (messageInfo == null && message != null) {
      messageInfo=message.getMessageInfo();
    }
    IRequestInfo analyzedReq=helpers.analyzeRequest(messageInfo);
    URL uUrl=analyzedReq.getUrl();
    if (!loggerPreferences.isRestrictedToScope() || callbacks.isInScope(uUrl)) {
      boolean isValidTool=(loggerPreferences.isEnabled4All() || (loggerPreferences.isEnabled4Proxy() && toolFlag == callbacks.TOOL_PROXY) || (loggerPreferences.isEnabled4Intruder() && toolFlag == callbacks.TOOL_INTRUDER)|| (loggerPreferences.isEnabled4Repeater() && toolFlag == callbacks.TOOL_REPEATER)|| (loggerPreferences.isEnabled4Scanner() && toolFlag == callbacks.TOOL_SCANNER)|| (loggerPreferences.isEnabled4Sequencer() && toolFlag == callbacks.TOOL_SEQUENCER)|| (loggerPreferences.isEnabled4Spider() && toolFlag == callbacks.TOOL_SPIDER)|| (loggerPreferences.isEnabled4Extender() && toolFlag == callbacks.TOOL_EXTENDER)|| (loggerPreferences.isEnabled4TargetTab() && toolFlag == callbacks.TOOL_TARGET));
      if (isValidTool) {
        if (messageIsRequest && toolFlag == callbacks.TOOL_PROXY) {
        }
 else         if (!messageIsRequest) {
          LogEntry entry=new LogEntry(toolFlag,messageIsRequest,callbacks.saveBuffersToTempFiles(messageInfo),uUrl,analyzedReq,message,logTable,loggerPreferences,stderr,stderr,isValidTool,callbacks);
          for (          ColorFilter colorFilter : colorFilters.values()) {
            entry.testColorFilter(colorFilter,false);
          }
synchronized (log) {
            int row=log.size();
            log.add(entry);
            logTable.getModel().fireTableRowsInserted(row,row);
          }
          if (loggerPreferences.getAutoSave()) {
            optionsJPanel.autoLogItem(entry);
          }
        }
      }
    }
  }
}",0.9961049078161516
79733,"@Override public void onAdd(ColorFilter filter){
  if (!filter.isEnabled() || filter.getFilter() == null)   return;
synchronized (log) {
    for (int i=0; i < log.size(); i++) {
      boolean colorResult=log.get(i).testColorFilter(filter);
      if (colorResult)       logTable.getModel().fireTableRowsUpdated(i,i);
    }
  }
}","@Override public void onAdd(ColorFilter filter){
  if (!filter.isEnabled() || filter.getFilter() == null)   return;
synchronized (log) {
    for (int i=0; i < log.size(); i++) {
      boolean colorResult=log.get(i).testColorFilter(filter,false);
      if (colorResult)       logTable.getModel().fireTableRowsUpdated(i,i);
    }
  }
}",0.990909090909091
79734,"@Override public void actionPerformed(ActionEvent actionEvent){
  colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
  colorFilterDialog.setVisible(true);
}","@Override public void actionPerformed(ActionEvent actionEvent){
  colorFilterDialog.setVisible(true);
}",0.7383512544802867
79735,"@Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  callbacks.setExtensionName(""String_Node_Str"");
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  try {
    Class.forName(""String_Node_Str"");
    canSaveCSV=true;
  }
 catch (  ClassNotFoundException e) {
    stderr.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  loggerPreferences=new LoggerPreferences(stdout,stderr,isDebug);
  this.colorFilters=new ArrayList<ColorFilter>();
  this.filterListeners=new ArrayList<FilterListener>();
  this.filterListeners.add(this);
  this.isDebug=loggerPreferences.isDebugMode();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,colorFilters,stdout,stderr,isDebug);
      tableRowSorter=new TableRowSorter(logTable.getModel());
      logTable.setRowSorter(tableRowSorter);
      logTable.generatingTableColumns();
      JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      JPanel viewPanel=new JPanel();
      viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
      JPanel filterPanel=new JPanel(new GridBagLayout());
      filterField=new JTextField();
      filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
      filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints fieldConstraints=new GridBagConstraints();
      fieldConstraints.fill=GridBagConstraints.BOTH;
      fieldConstraints.gridx=0;
      fieldConstraints.weightx=fieldConstraints.weighty=6.0;
      final JButton filterButton=new JButton(""String_Node_Str"");
      filterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints filterBtnConstraints=new GridBagConstraints();
      filterBtnConstraints.fill=GridBagConstraints.BOTH;
      filterBtnConstraints.gridx=1;
      filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
      final JButton colorFilterButton=new JButton(""String_Node_Str"");
      colorFilterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
          colorFilterDialog.setVisible(true);
        }
      }
);
      GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
      colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
      colorFilterBtnConstraints.gridx=2;
      colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
      filterPanel.add(filterField,fieldConstraints);
      filterPanel.add(filterButton,filterBtnConstraints);
      filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
      JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      viewPanel.add(filterPanel);
      viewPanel.add(viewScrollPane);
      JTabbedPane tabs=new JTabbedPane();
      tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
      tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
      splitPane.setLeftComponent(viewPanel);
      splitPane.setRightComponent(tabs);
      optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
      AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
      topTabs=new JTabbedPane();
      topTabs.addTab(""String_Node_Str"",null,splitPane,null);
      topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
      topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
      callbacks.addSuiteTab(BurpExtender.this);
      callbacks.registerHttpListener(BurpExtender.this);
      callbacks.registerProxyListener(BurpExtender.this);
    }
  }
);
}","@Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  callbacks.setExtensionName(""String_Node_Str"");
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  try {
    Class.forName(""String_Node_Str"");
    canSaveCSV=true;
  }
 catch (  ClassNotFoundException e) {
    stderr.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  loggerPreferences=new LoggerPreferences(stdout,stderr,isDebug);
  this.colorFilters=new HashMap<UUID,ColorFilter>();
  this.filterListeners=new ArrayList<FilterListener>();
  this.filterListeners.add(this);
  this.isDebug=loggerPreferences.isDebugMode();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      requestViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      responseViewer=callbacks.createMessageEditor(BurpExtender.this,false);
      logTable=new Table(log,requestViewer,responseViewer,helpers,loggerPreferences,colorFilters,stdout,stderr,isDebug);
      tableRowSorter=new TableRowSorter(logTable.getModel());
      logTable.setRowSorter(tableRowSorter);
      logTable.generatingTableColumns();
      JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
      JPanel viewPanel=new JPanel();
      viewPanel.setLayout(new BoxLayout(viewPanel,BoxLayout.Y_AXIS));
      colorFilterDialog=new ColorFilterDialog(colorFilters,filterListeners);
      JPanel filterPanel=new JPanel(new GridBagLayout());
      filterField=new JTextField();
      filterField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),""String_Node_Str"");
      filterField.getActionMap().put(""String_Node_Str"",new AbstractAction(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints fieldConstraints=new GridBagConstraints();
      fieldConstraints.fill=GridBagConstraints.BOTH;
      fieldConstraints.gridx=0;
      fieldConstraints.weightx=fieldConstraints.weighty=6.0;
      final JButton filterButton=new JButton(""String_Node_Str"");
      filterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          setFilter();
        }
      }
);
      GridBagConstraints filterBtnConstraints=new GridBagConstraints();
      filterBtnConstraints.fill=GridBagConstraints.BOTH;
      filterBtnConstraints.gridx=1;
      filterBtnConstraints.weightx=filterBtnConstraints.weighty=1.0;
      final JButton colorFilterButton=new JButton(""String_Node_Str"");
      colorFilterButton.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent actionEvent){
          colorFilterDialog.setVisible(true);
        }
      }
);
      GridBagConstraints colorFilterBtnConstraints=new GridBagConstraints();
      colorFilterBtnConstraints.fill=GridBagConstraints.BOTH;
      colorFilterBtnConstraints.gridx=2;
      colorFilterBtnConstraints.weightx=colorFilterBtnConstraints.weighty=1.0;
      filterPanel.add(filterField,fieldConstraints);
      filterPanel.add(filterButton,filterBtnConstraints);
      filterPanel.add(colorFilterButton,colorFilterBtnConstraints);
      JScrollPane viewScrollPane=new JScrollPane(logTable,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      viewPanel.add(filterPanel);
      viewPanel.add(viewScrollPane);
      JTabbedPane tabs=new JTabbedPane();
      tabs.addTab(""String_Node_Str"",requestViewer.getComponent());
      tabs.addTab(""String_Node_Str"",responseViewer.getComponent());
      splitPane.setLeftComponent(viewPanel);
      splitPane.setRightComponent(tabs);
      optionsJPanel=new LoggerOptionsPanel(callbacks,stdout,stderr,logTable,log,canSaveCSV,loggerPreferences,isDebug);
      AboutPanel aboutJPanel=new AboutPanel(callbacks,stdout,stderr,loggerPreferences,isDebug);
      topTabs=new JTabbedPane();
      topTabs.addTab(""String_Node_Str"",null,splitPane,null);
      topTabs.addTab(""String_Node_Str"",null,optionsJPanel,null);
      topTabs.addTab(""String_Node_Str"",null,aboutJPanel,null);
      callbacks.addSuiteTab(BurpExtender.this);
      callbacks.registerHttpListener(BurpExtender.this);
      callbacks.registerProxyListener(BurpExtender.this);
    }
  }
);
}",0.979907958244472
79736,"@Override public void onRemove(ColorFilter filter){
}","@Override public void onRemove(ColorFilter filter){
  if (!filter.isEnabled() || filter.getFilter() == null)   return;
synchronized (log) {
    for (int i=0; i < log.size(); i++) {
      boolean wasPresent=log.get(i).matchingColorFilters.remove(filter.getUid());
      if (wasPresent)       logTable.getModel().fireTableRowsUpdated(i,i);
    }
  }
}",0.263681592039801
79737,"public ColorFilterDialog(ArrayList<ColorFilter> filters,ArrayList<FilterListener> listeners){
  this.filters=filters;
  this.filterListeners=listeners;
  buildDialog();
  pack();
}","public ColorFilterDialog(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> listeners){
  this.filters=filters;
  this.originalFilters=new HashMap<UUID,ColorFilter>(filters);
  this.filterListeners=listeners;
  this.addComponentListener(this);
  buildDialog();
  pack();
}",0.6564551422319475
79738,"ColorFilterTable(ArrayList<ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.setModel(new ColorFilterTableModel(filters,filterListeners));
  this.setFillsViewportHeight(true);
  this.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
  this.setAutoCreateRowSorter(false);
  this.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  this.setRowHeight(20);
  ((JComponent)this.getDefaultRenderer(Boolean.class)).setOpaque(true);
  ((JComponent)this.getDefaultRenderer(JButton.class)).setOpaque(true);
  this.getColumnModel().getColumn(1).setCellRenderer(new FilterRenderer());
  this.getColumnModel().getColumn(2).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(2).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(3).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(5).setCellRenderer(new Table.JTableButtonRenderer());
  int[] minWidths={100,250,50,50,100,100};
  for (int i=0; i < minWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMinWidth(minWidths[i]);
  }
  int[] maxWidths={9999,9999,200,200,100,100};
  for (int i=0; i < maxWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMaxWidth(maxWidths[i]);
  }
  this.setMinimumSize(new Dimension(850,200));
  final JTable _this=this;
  this.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent mouseEvent){
      if (SwingUtilities.isLeftMouseButton(mouseEvent)) {
        int col=_this.columnAtPoint(mouseEvent.getPoint());
        int row=_this.rowAtPoint(mouseEvent.getPoint());
        ((ColorFilterTableModel)getModel()).onClick(row,col);
      }
    }
  }
);
}","ColorFilterTable(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.setModel(new ColorFilterTableModel(filters,filterListeners));
  this.setFillsViewportHeight(true);
  this.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
  this.setAutoCreateRowSorter(false);
  this.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  this.setRowHeight(20);
  ((JComponent)this.getDefaultRenderer(Boolean.class)).setOpaque(true);
  ((JComponent)this.getDefaultRenderer(JButton.class)).setOpaque(true);
  this.getColumnModel().getColumn(1).setCellRenderer(new FilterRenderer());
  this.getColumnModel().getColumn(2).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(2).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(3).setCellRenderer(new ColorRenderer(true));
  this.getColumnModel().getColumn(3).setCellEditor(new ColorEditor());
  this.getColumnModel().getColumn(5).setCellRenderer(new Table.JTableButtonRenderer());
  int[] minWidths={100,250,50,50,100,100};
  for (int i=0; i < minWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMinWidth(minWidths[i]);
  }
  int[] maxWidths={9999,9999,200,200,100,100};
  for (int i=0; i < maxWidths.length; i++) {
    this.getColumnModel().getColumn(i).setMaxWidth(maxWidths[i]);
  }
  this.setMinimumSize(new Dimension(850,200));
  final JTable _this=this;
  this.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent mouseEvent){
      if (SwingUtilities.isLeftMouseButton(mouseEvent)) {
        int col=_this.columnAtPoint(mouseEvent.getPoint());
        int row=_this.rowAtPoint(mouseEvent.getPoint());
        ((ColorFilterTableModel)getModel()).onClick(row,col);
      }
    }
  }
);
}",0.9951525520387796
79739,"public void onClick(int row,int column){
  if (row < filters.size() && column == 5) {
    this.filters.remove(row);
    this.fireTableDataChanged();
  }
}","public void onClick(int row,int column){
  if (row != -1 && row < filters.size() && column == 5) {
synchronized (rowUUIDs) {
      this.filters.remove(rowUUIDs.get(row));
      this.fireTableRowsDeleted(row,row);
      rowUUIDs.remove(row);
      for (int i=row + 1; i <= rowUUIDs.size(); i++) {
        rowUUIDs.put(i - 1,rowUUIDs.get(i));
        rowUUIDs.remove(i);
      }
    }
  }
}",0.4317343173431734
79740,"@Override public Object getValueAt(int row,int col){
switch (col) {
case 0:
    return (filters.get(row).getName() == null ? ""String_Node_Str"" : filters.get(row).getName());
case 1:
  return (filters.get(row).getFilterString() == null ? ""String_Node_Str"" : filters.get(row).getFilterString());
case 2:
return (filters.get(row).getForegroundColor() == null ? Color.BLACK : filters.get(row).getForegroundColor());
case 3:
return (filters.get(row).getBackgroundColor() == null ? Color.WHITE : filters.get(row).getBackgroundColor());
case 4:
return filters.get(row).isEnabled();
case 5:
return removeButton;
default :
return false;
}
}","@Override public Object getValueAt(int row,int col){
switch (col) {
case 0:
    return (filters.get(rowUUIDs.get(row)).getName() == null ? ""String_Node_Str"" : filters.get(rowUUIDs.get(row)).getName());
case 1:
  return (filters.get(rowUUIDs.get(row)).getFilterString() == null ? ""String_Node_Str"" : filters.get(rowUUIDs.get(row)).getFilterString());
case 2:
return (filters.get(rowUUIDs.get(row)).getForegroundColor() == null ? Color.BLACK : filters.get(rowUUIDs.get(row)).getForegroundColor());
case 3:
return (filters.get(rowUUIDs.get(row)).getBackgroundColor() == null ? Color.WHITE : filters.get(rowUUIDs.get(row)).getBackgroundColor());
case 4:
return filters.get(rowUUIDs.get(row)).isEnabled();
case 5:
return removeButton;
default :
return false;
}
}",0.909221902017291
79741,"ColorFilterTableModel(ArrayList<ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.filters=filters;
  this.filterListeners=filterListeners;
}","ColorFilterTableModel(Map<UUID,ColorFilter> filters,ArrayList<FilterListener> filterListeners){
  this.filters=filters;
  this.filterListeners=filterListeners;
}",0.953560371517028
79742,"public void addFilter(ColorFilter filter){
  filters.add(filter);
  for (  FilterListener listener : filterListeners) {
    listener.onAdd(filter);
  }
  this.fireTableDataChanged();
}","public void addFilter(ColorFilter filter){
  int i=filters.size();
  rowUUIDs.put(i,filter.getUid());
  filters.put(filter.getUid(),filter);
  this.fireTableRowsInserted(i,i);
}",0.4875346260387811
79743,"public Filter getFilterAtRow(int row){
  return filters.get(row).getFilter();
}","public Filter getFilterAtRow(int row){
  return filters.get(rowUUIDs.get(row)).getFilter();
}",0.9186046511627908
79744,"public void setValueAt(Object value,int row,int col){
switch (col) {
case 0:
    filters.get(row).setName((String)value);
  break;
case 1:
{
  ColorFilter filter=filters.get(row);
  filter.setFilterString((String)value);
  try {
    filter.setFilter(FilterCompiler.parseString((String)value));
  }
 catch (  Filter.FilterException e) {
    filter.setFilter(null);
  }
  break;
}
case 2:
filters.get(row).setForegroundColor((Color)value);
break;
case 3:
filters.get(row).setBackgroundColor((Color)value);
break;
case 4:
filters.get(row).setEnabled((Boolean)value);
break;
default :
return;
}
for (FilterListener listener : filterListeners) {
listener.onChange(filters.get(row));
}
}","public void setValueAt(Object value,int row,int col){
switch (col) {
case 0:
    filters.get(rowUUIDs.get(row)).setName((String)value);
  break;
case 1:
{
  ColorFilter filter=filters.get(rowUUIDs.get(row));
  filter.setFilterString((String)value);
  try {
    filter.setFilter(FilterCompiler.parseString((String)value));
  }
 catch (  Filter.FilterException e) {
    filter.setFilter(null);
  }
  break;
}
case 2:
filters.get(rowUUIDs.get(row)).setForegroundColor((Color)value);
break;
case 3:
filters.get(rowUUIDs.get(row)).setBackgroundColor((Color)value);
break;
case 4:
filters.get(rowUUIDs.get(row)).setEnabled((Boolean)value);
break;
default :
return;
}
}",0.8816083395383469
79745,"public boolean testColorFilter(ColorFilter colorFilter){
  if (colorFilter.getFilter().matches(this)) {
    this.setForegroundColor(colorFilter.getForegroundColor());
    this.setBackgroundColor(colorFilter.getBackgroundColor());
    return true;
  }
  return false;
}","public boolean testColorFilter(ColorFilter colorFilter,boolean retest){
  if (!colorFilter.isEnabled() || colorFilter.getFilter() == null)   return false;
  if (!this.matchingColorFilters.contains(colorFilter.getUid())) {
    if (colorFilter.getFilter().matches(this)) {
      this.matchingColorFilters.add(colorFilter.getUid());
      return true;
    }
 else {
      return false;
    }
  }
 else   if (retest) {
    if (!colorFilter.getFilter().matches(this)) {
      this.matchingColorFilters.remove(colorFilter.getUid());
    }
    return true;
  }
 else {
    return false;
  }
}",0.1711606096131301
79746,"LogEntry(int tool,boolean messageIsRequest,IHttpRequestResponsePersisted requestResponse,URL url,IRequestInfo tempAnalyzedReq,IInterceptedProxyMessage message,Table table,LoggerPreferences loggerPreferences,PrintWriter stdout,PrintWriter stderr,boolean isDebug,IBurpExtenderCallbacks callbacks){
  this.stdout=stdout;
  this.stderr=stderr;
  this.isDebug=isDebug;
  this.loggerPreferences=loggerPreferences;
  this.callbacks=callbacks;
  this.table=table;
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  IHttpService tempRequestResponseHttpService=requestResponse.getHttpService();
  String strFullRequest=new String(requestResponse.getRequest());
  List<String> lstFullRequestHeader=tempAnalyzedReq.getHeaders();
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.uniqueIdentifier=java.util.UUID.randomUUID().toString();
  this.tool=tool;
  this.requestResponse=requestResponse;
  this.url=url;
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.relativeURL=url.getFile();
  this.host=tempRequestResponseHttpService.getHost();
  this.protocol=tempRequestResponseHttpService.getProtocol();
  this.isSSL=this.protocol.equals(""String_Node_Str"");
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.targetPort=tempRequestResponseHttpService.getPort();
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.method=tempAnalyzedReq.getMethod();
  try {
    String tempPath=url.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
    tempPath=tempPath.substring(tempPath.lastIndexOf(""String_Node_Str""));
    int tempPathDotLocation=tempPath.lastIndexOf(""String_Node_Str"");
    if (tempPathDotLocation >= 0)     this.urlExtension=tempPath.substring(tempPathDotLocation + 1);
  }
 catch (  Exception e) {
    if (isDebug)     stderr.println(e.getMessage());
    this.urlExtension=""String_Node_Str"";
  }
  if (message != null) {
    if (isDebug) {
    }
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.listenerInterface=message.getListenerInterface();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.clientIP=message.getClientIpAddress().toString();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.uniqueIdentifier=""String_Node_Str"" + String.valueOf(message.getMessageReference());
  }
  this.requestLength=strFullRequest.length() - tempAnalyzedReq.getBodyOffset();
  this.hasQueryStringParam=(url.getQuery() != null) ? true : false;
  this.hasBodyParam=(requestLength > 0) ? true : false;
  this.params=(this.hasQueryStringParam || this.hasBodyParam) ? true : false;
  this.hasCookieParam=false;
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"") || table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"") || table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")|| table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")|| table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")) {
    for (    String item : lstFullRequestHeader) {
      if (item.indexOf(""String_Node_Str"") >= 0) {
        String[] headerItem=item.split(""String_Node_Str"",2);
        headerItem[0]=headerItem[0].toLowerCase();
        if (headerItem[0].equals(""String_Node_Str"")) {
          this.sentCookies=headerItem[1];
          if (!this.sentCookies.isEmpty()) {
            this.hasCookieParam=true;
            this.sentCookies+=""String_Node_Str"";
            if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")) {
              List<ICookie> cookieJars=callbacks.getCookieJarContents();
              boolean atLeastOneDidNotMatched=false;
              boolean anyParamMatched=false;
              for (              ICookie cookieItem : cookieJars) {
                if (cookieItem.getDomain().equals(this.host)) {
                  String currentCookieJarParam=cookieItem.getName() + ""String_Node_Str"" + cookieItem.getValue()+ ""String_Node_Str"";
                  if (this.sentCookies.contains(currentCookieJarParam)) {
                    anyParamMatched=true;
                  }
 else {
                    atLeastOneDidNotMatched=true;
                  }
                }
                if (anyParamMatched && atLeastOneDidNotMatched) {
                  break;
                }
              }
              if (atLeastOneDidNotMatched && anyParamMatched) {
                this.usesCookieJar=cookieJarStatus.PARTIALLY;
              }
 else               if (!atLeastOneDidNotMatched && anyParamMatched) {
                this.usesCookieJar=cookieJarStatus.YES;
              }
            }
          }
        }
 else         if (headerItem[0].equals(""String_Node_Str"")) {
          this.referrerURL=headerItem[1];
        }
 else         if (headerItem[0].equals(""String_Node_Str"")) {
          this.requstContentType=headerItem[1];
        }
      }
    }
  }
  for (int i=0; i <= 5; i++) {
    String regexVarName=""String_Node_Str"" + String.valueOf(i + 1) + ""String_Node_Str"";
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(regexVarName)) {
      TableStructure regexColumn=table.getModel().getTableHeaderColumnsDetails().getEnabledTableHeader_byName(regexVarName);
      String regexString=regexColumn.getRegExData().getRegExString();
      if (!regexString.isEmpty()) {
        Pattern p=null;
        try {
          if (regexColumn.getRegExData().isRegExCaseSensitive())           p=Pattern.compile(regexString);
 else           p=Pattern.compile(regexString,Pattern.CASE_INSENSITIVE);
          Matcher m=p.matcher(strFullRequest);
          StringBuilder allMatches=new StringBuilder();
          int counter=1;
          while (m.find()) {
            if (counter == 2) {
              allMatches.insert(0,""String_Node_Str"");
              allMatches.append(""String_Node_Str"");
            }
            if (counter > 1) {
              allMatches.append(""String_Node_Str"" + m.group() + ""String_Node_Str"");
            }
 else {
              allMatches.append(m.group());
            }
            counter++;
          }
          this.regexAllReq[i]=allMatches.toString();
        }
 catch (        Exception e) {
          stderr.println(""String_Node_Str"" + regexString);
        }
      }
    }
  }
  if (!messageIsRequest) {
    IResponseInfo tempAnalyzedResp=helpers.analyzeResponse(requestResponse.getResponse());
    String strFullResponse=new String(requestResponse.getResponse());
    List<String> lstFullResponseHeader=tempAnalyzedResp.getHeaders();
    this.status=tempAnalyzedResp.getStatusCode();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.responseContentType_burp=tempAnalyzedResp.getStatedMimeType();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.responseInferredContentType_burp=tempAnalyzedResp.getInferredMimeType();
    this.responseLength=strFullResponse.length() - tempAnalyzedResp.getBodyOffset();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     for (    ICookie cookieItem : tempAnalyzedResp.getCookies()) {
      this.newCookies+=cookieItem.getName() + ""String_Node_Str"" + cookieItem.getValue()+ ""String_Node_Str"";
    }
    this.hasSetCookies=(!newCookies.isEmpty()) ? true : false;
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    this.responseTime=dateFormat.format(date);
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")) {
      for (      String item : lstFullResponseHeader) {
        item=item.toLowerCase();
        if (item.startsWith(""String_Node_Str"")) {
          String[] temp=item.split(""String_Node_Str"",2);
          if (temp.length > 0)           this.responseContentType=temp[1];
        }
      }
    }
    for (int i=0; i <= 5; i++) {
      String regexVarName=""String_Node_Str"" + String.valueOf(i + 1) + ""String_Node_Str"";
      if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(regexVarName)) {
        TableStructure regexColumn=table.getModel().getTableHeaderColumnsDetails().getEnabledTableHeader_byName(regexVarName);
        String regexString=regexColumn.getRegExData().getRegExString();
        if (!regexString.isEmpty()) {
          Pattern p=null;
          try {
            if (regexColumn.getRegExData().isRegExCaseSensitive())             p=Pattern.compile(regexString);
 else             p=Pattern.compile(regexString,Pattern.CASE_INSENSITIVE);
            Matcher m=p.matcher(strFullResponse);
            StringBuilder allMatches=new StringBuilder();
            int counter=1;
            while (m.find()) {
              if (counter == 2) {
                allMatches.insert(0,""String_Node_Str"");
                allMatches.append(""String_Node_Str"");
              }
              if (counter > 1) {
                allMatches.append(""String_Node_Str"" + m.group() + ""String_Node_Str"");
              }
 else {
                allMatches.append(m.group());
              }
              counter++;
            }
            this.regexAllResp[i]=allMatches.toString();
          }
 catch (          Exception e) {
            stderr.println(""String_Node_Str"" + regexString);
          }
        }
      }
    }
    this.isCompleted=true;
    tempAnalyzedResp=null;
  }
  this.comment=""String_Node_Str"";
  tempRequestResponseHttpService=null;
  tempAnalyzedReq=null;
}","LogEntry(int tool,boolean messageIsRequest,IHttpRequestResponsePersisted requestResponse,URL url,IRequestInfo tempAnalyzedReq,IInterceptedProxyMessage message,Table table,LoggerPreferences loggerPreferences,PrintWriter stdout,PrintWriter stderr,boolean isDebug,IBurpExtenderCallbacks callbacks){
  this.stdout=stdout;
  this.stderr=stderr;
  this.isDebug=isDebug;
  this.loggerPreferences=loggerPreferences;
  this.callbacks=callbacks;
  this.table=table;
  this.callbacks=callbacks;
  this.helpers=callbacks.getHelpers();
  this.matchingColorFilters=new ArrayList<UUID>();
  IHttpService tempRequestResponseHttpService=requestResponse.getHttpService();
  String strFullRequest=new String(requestResponse.getRequest());
  List<String> lstFullRequestHeader=tempAnalyzedReq.getHeaders();
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.uniqueIdentifier=java.util.UUID.randomUUID().toString();
  this.tool=tool;
  this.requestResponse=requestResponse;
  this.url=url;
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.relativeURL=url.getFile();
  this.host=tempRequestResponseHttpService.getHost();
  this.protocol=tempRequestResponseHttpService.getProtocol();
  this.isSSL=this.protocol.equals(""String_Node_Str"");
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.targetPort=tempRequestResponseHttpService.getPort();
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))   this.method=tempAnalyzedReq.getMethod();
  try {
    String tempPath=url.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"");
    tempPath=tempPath.substring(tempPath.lastIndexOf(""String_Node_Str""));
    int tempPathDotLocation=tempPath.lastIndexOf(""String_Node_Str"");
    if (tempPathDotLocation >= 0)     this.urlExtension=tempPath.substring(tempPathDotLocation + 1);
  }
 catch (  Exception e) {
    if (isDebug)     stderr.println(e.getMessage());
    this.urlExtension=""String_Node_Str"";
  }
  if (message != null) {
    if (isDebug) {
    }
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.listenerInterface=message.getListenerInterface();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.clientIP=message.getClientIpAddress().toString();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.uniqueIdentifier=""String_Node_Str"" + String.valueOf(message.getMessageReference());
  }
  this.requestLength=strFullRequest.length() - tempAnalyzedReq.getBodyOffset();
  this.hasQueryStringParam=(url.getQuery() != null) ? true : false;
  this.hasBodyParam=(requestLength > 0) ? true : false;
  this.params=(this.hasQueryStringParam || this.hasBodyParam) ? true : false;
  this.hasCookieParam=false;
  if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"") || table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"") || table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")|| table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")|| table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")) {
    for (    String item : lstFullRequestHeader) {
      if (item.indexOf(""String_Node_Str"") >= 0) {
        String[] headerItem=item.split(""String_Node_Str"",2);
        headerItem[0]=headerItem[0].toLowerCase();
        if (headerItem[0].equals(""String_Node_Str"")) {
          this.sentCookies=headerItem[1];
          if (!this.sentCookies.isEmpty()) {
            this.hasCookieParam=true;
            this.sentCookies+=""String_Node_Str"";
            if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")) {
              List<ICookie> cookieJars=callbacks.getCookieJarContents();
              boolean atLeastOneDidNotMatched=false;
              boolean anyParamMatched=false;
              for (              ICookie cookieItem : cookieJars) {
                if (cookieItem.getDomain().equals(this.host)) {
                  String currentCookieJarParam=cookieItem.getName() + ""String_Node_Str"" + cookieItem.getValue()+ ""String_Node_Str"";
                  if (this.sentCookies.contains(currentCookieJarParam)) {
                    anyParamMatched=true;
                  }
 else {
                    atLeastOneDidNotMatched=true;
                  }
                }
                if (anyParamMatched && atLeastOneDidNotMatched) {
                  break;
                }
              }
              if (atLeastOneDidNotMatched && anyParamMatched) {
                this.usesCookieJar=cookieJarStatus.PARTIALLY;
              }
 else               if (!atLeastOneDidNotMatched && anyParamMatched) {
                this.usesCookieJar=cookieJarStatus.YES;
              }
            }
          }
        }
 else         if (headerItem[0].equals(""String_Node_Str"")) {
          this.referrerURL=headerItem[1];
        }
 else         if (headerItem[0].equals(""String_Node_Str"")) {
          this.requstContentType=headerItem[1];
        }
      }
    }
  }
  for (int i=0; i <= 5; i++) {
    String regexVarName=""String_Node_Str"" + String.valueOf(i + 1) + ""String_Node_Str"";
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(regexVarName)) {
      TableStructure regexColumn=table.getModel().getTableHeaderColumnsDetails().getEnabledTableHeader_byName(regexVarName);
      String regexString=regexColumn.getRegExData().getRegExString();
      if (!regexString.isEmpty()) {
        Pattern p=null;
        try {
          if (regexColumn.getRegExData().isRegExCaseSensitive())           p=Pattern.compile(regexString);
 else           p=Pattern.compile(regexString,Pattern.CASE_INSENSITIVE);
          Matcher m=p.matcher(strFullRequest);
          StringBuilder allMatches=new StringBuilder();
          int counter=1;
          while (m.find()) {
            if (counter == 2) {
              allMatches.insert(0,""String_Node_Str"");
              allMatches.append(""String_Node_Str"");
            }
            if (counter > 1) {
              allMatches.append(""String_Node_Str"" + m.group() + ""String_Node_Str"");
            }
 else {
              allMatches.append(m.group());
            }
            counter++;
          }
          this.regexAllReq[i]=allMatches.toString();
        }
 catch (        Exception e) {
          stderr.println(""String_Node_Str"" + regexString);
        }
      }
    }
  }
  if (!messageIsRequest) {
    IResponseInfo tempAnalyzedResp=helpers.analyzeResponse(requestResponse.getResponse());
    String strFullResponse=new String(requestResponse.getResponse());
    List<String> lstFullResponseHeader=tempAnalyzedResp.getHeaders();
    this.status=tempAnalyzedResp.getStatusCode();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.responseContentType_burp=tempAnalyzedResp.getStatedMimeType();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     this.responseInferredContentType_burp=tempAnalyzedResp.getInferredMimeType();
    this.responseLength=strFullResponse.length() - tempAnalyzedResp.getBodyOffset();
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str""))     for (    ICookie cookieItem : tempAnalyzedResp.getCookies()) {
      this.newCookies+=cookieItem.getName() + ""String_Node_Str"" + cookieItem.getValue()+ ""String_Node_Str"";
    }
    this.hasSetCookies=(!newCookies.isEmpty()) ? true : false;
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    this.responseTime=dateFormat.format(date);
    if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(""String_Node_Str"")) {
      for (      String item : lstFullResponseHeader) {
        item=item.toLowerCase();
        if (item.startsWith(""String_Node_Str"")) {
          String[] temp=item.split(""String_Node_Str"",2);
          if (temp.length > 0)           this.responseContentType=temp[1];
        }
      }
    }
    for (int i=0; i <= 5; i++) {
      String regexVarName=""String_Node_Str"" + String.valueOf(i + 1) + ""String_Node_Str"";
      if (table.getModel().getTableHeaderColumnsDetails().isTableHeaderEnabled_byName(regexVarName)) {
        TableStructure regexColumn=table.getModel().getTableHeaderColumnsDetails().getEnabledTableHeader_byName(regexVarName);
        String regexString=regexColumn.getRegExData().getRegExString();
        if (!regexString.isEmpty()) {
          Pattern p=null;
          try {
            if (regexColumn.getRegExData().isRegExCaseSensitive())             p=Pattern.compile(regexString);
 else             p=Pattern.compile(regexString,Pattern.CASE_INSENSITIVE);
            Matcher m=p.matcher(strFullResponse);
            StringBuilder allMatches=new StringBuilder();
            int counter=1;
            while (m.find()) {
              if (counter == 2) {
                allMatches.insert(0,""String_Node_Str"");
                allMatches.append(""String_Node_Str"");
              }
              if (counter > 1) {
                allMatches.append(""String_Node_Str"" + m.group() + ""String_Node_Str"");
              }
 else {
                allMatches.append(m.group());
              }
              counter++;
            }
            this.regexAllResp[i]=allMatches.toString();
          }
 catch (          Exception e) {
            stderr.println(""String_Node_Str"" + regexString);
          }
        }
      }
    }
    this.isCompleted=true;
    tempAnalyzedResp=null;
  }
  this.comment=""String_Node_Str"";
  tempRequestResponseHttpService=null;
  tempAnalyzedReq=null;
}",0.997455724619606
79747,"@Override public String getColumnName(int columnIndex){
  return (String)this.getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getVisibleName();
}","@Override public String getColumnName(int columnIndex){
  return (String)this.getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnIndex).getVisibleName();
}",0.9774011299435028
79748,"@Override public Class<?> getColumnClass(int columnIndex){
  Class clazz;
  try {
    String columnClassType=(String)getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getType();
switch (columnClassesType.valueOf(columnClassType.toUpperCase())) {
case INT:
      clazz=Integer.class;
    break;
case SHORT:
  clazz=Short.class;
break;
case DOUBLE:
clazz=Double.class;
break;
case LONG:
clazz=Long.class;
break;
case BOOLEAN:
clazz=Boolean.class;
break;
default :
clazz=String.class;
break;
}
}
 catch (Exception e) {
clazz=String.class;
}
return clazz;
}","@Override public Class<?> getColumnClass(int columnIndex){
  Class clazz;
  try {
    String columnClassType=(String)getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnIndex).getType();
switch (columnClassesType.valueOf(columnClassType.toUpperCase())) {
case INT:
      clazz=Integer.class;
    break;
case SHORT:
  clazz=Short.class;
break;
case DOUBLE:
clazz=Double.class;
break;
case LONG:
clazz=Long.class;
break;
case BOOLEAN:
clazz=Boolean.class;
break;
default :
clazz=String.class;
break;
}
}
 catch (Exception e) {
clazz=String.class;
}
return clazz;
}",0.9914236706689536
79749,"@Override public int getColumnCount(){
  if (this.getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList() != null)   return this.getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().size();
 else   return 0;
}","@Override public int getColumnCount(){
  if (this.getTableHeaderColumnsDetails().getAllColumnsDefinitionList() != null)   return this.getTableHeaderColumnsDetails().getAllColumnsDefinitionList().size();
 else   return 0;
}",0.9557522123893806
79750,"@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  if (this.getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).isReadonly()) {
    return false;
  }
 else {
    return true;
  }
}","@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  return !this.getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).isReadonly();
}",0.8481927710843373
79751,"@Override public Object getValueAt(int rowIndex,int columnIndex){
  if (entries.size() - 1 < rowIndex)   return ""String_Node_Str"";
  LogEntry logEntry=entries.get(rowIndex);
  String colName=getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getName();
  if (colName.equals(""String_Node_Str"")) {
    return rowIndex + 1;
  }
 else {
    Object tempValue=logEntry.getValueByName(colName);
    if (getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getType().equals(""String_Node_Str"")) {
      if (tempValue != null && !((String)tempValue.toString()).isEmpty())       return Integer.valueOf(String.valueOf(logEntry.getValueByName((String)getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getName())));
 else       return -1;
    }
 else     if (getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getType().equals(""String_Node_Str"")) {
      if (tempValue != null && !((String)tempValue.toString()).isEmpty())       return Short.valueOf(String.valueOf(logEntry.getValueByName((String)getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getName())));
 else       return -1;
    }
 else     return logEntry.getValueByName((String)getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).getName());
  }
}","@Override public Object getValueAt(int rowIndex,int columnIndex){
  if (rowIndex >= entries.size())   return null;
  LogEntry logEntry=entries.get(rowIndex);
  String colName=getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnIndex).getName();
  if (colName.equals(""String_Node_Str"")) {
    return rowIndex + 1;
  }
 else {
    Object tempValue=logEntry.getValueByName(colName);
    if (getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnIndex).getType().equals(""String_Node_Str"")) {
      if (tempValue != null && !((String)tempValue.toString()).isEmpty())       return Integer.valueOf(String.valueOf(logEntry.getValueByName(colName)));
 else       return -1;
    }
 else     if (getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnIndex).getType().equals(""String_Node_Str"")) {
      if (tempValue != null && !((String)tempValue.toString()).isEmpty())       return Short.valueOf(String.valueOf(logEntry.getValueByName(colName)));
 else       return -1;
    }
 else     return logEntry.getValueByName(colName);
  }
}",0.8247758761206194
79752,"@Override public void changeSelection(int row,int col,boolean toggle,boolean extend){
  if (this.getModel().getData().size() >= row) {
    LogEntry logEntry=this.getModel().getData().get(this.convertRowIndexToModel(row));
    requestViewer.setMessage(logEntry.requestResponse.getRequest(),true);
    if (logEntry.requestResponse.getResponse() != null)     responseViewer.setMessage(logEntry.requestResponse.getResponse(),false);
 else     responseViewer.setMessage(helpers.stringToBytes(""String_Node_Str""),false);
    this.getModel().setCurrentlyDisplayedItem(logEntry.requestResponse);
    super.changeSelection(row,col,toggle,extend);
  }
}","@Override public void changeSelection(int row,int col,boolean toggle,boolean extend){
  MoreHelp.showMessage(""String_Node_Str"" + col + ""String_Node_Str""+ this.convertColumnIndexToModel(col)+ ""String_Node_Str""+ this.convertColumnIndexToView(col));
  if (this.getModel().getData().size() >= row) {
    LogEntry logEntry=this.getModel().getData().get(this.convertRowIndexToModel(row));
    requestViewer.setMessage(logEntry.requestResponse.getRequest(),true);
    if (logEntry.requestResponse.getResponse() != null)     responseViewer.setMessage(logEntry.requestResponse.getResponse(),false);
 else     responseViewer.setMessage(helpers.stringToBytes(""String_Node_Str""),false);
    this.getModel().setCurrentlyDisplayedItem(logEntry.requestResponse);
    super.changeSelection(row,col,toggle,extend);
  }
}",0.8885813148788927
79753,"public void generatingTableColumns(){
  for (int i=0; i < this.getModel().getColumnCount(); i++) {
    TableColumn column=this.getColumnModel().getColumn(i);
    column.setMinWidth(50);
    column.setIdentifier(this.getModel().getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(i).getId());
    column.setPreferredWidth((int)this.getModel().getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(i).getWidth());
    if (this.getModel().getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(i).getType().equals(""String_Node_Str"") || this.getModel().getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(i).getType().equals(""String_Node_Str"") || this.getModel().getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(i).getType().equals(""String_Node_Str""))     column.setCellRenderer(new LeftTableCellRenderer());
  }
}","public void generatingTableColumns(){
  for (int i=0; i < this.getModel().getColumnCount(); i++) {
    TableColumn column=this.getColumnModel().getColumn(i);
    column.setMinWidth(50);
    column.setIdentifier(this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getId());
    column.setPreferredWidth((int)this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getWidth());
    if (this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getType().equals(""String_Node_Str"") || this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getType().equals(""String_Node_Str"") || this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getType().equals(""String_Node_Str""))     column.setCellRenderer(new LeftTableCellRenderer());
  }
}",0.9716874292185732
79754,"@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  return !this.getTableHeaderColumnsDetails().getVisibleColumnsDefinitionList().get(columnIndex).isReadonly();
}","@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  return !this.getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnIndex).isReadonly();
}",0.9779005524861878
79755,"@Override public void changeSelection(int row,int col,boolean toggle,boolean extend){
  MoreHelp.showMessage(""String_Node_Str"" + col + ""String_Node_Str""+ this.convertColumnIndexToModel(col)+ ""String_Node_Str""+ this.convertColumnIndexToView(col));
  if (this.getModel().getData().size() >= row) {
    LogEntry logEntry=this.getModel().getData().get(this.convertRowIndexToModel(row));
    requestViewer.setMessage(logEntry.requestResponse.getRequest(),true);
    if (logEntry.requestResponse.getResponse() != null)     responseViewer.setMessage(logEntry.requestResponse.getResponse(),false);
 else     responseViewer.setMessage(helpers.stringToBytes(""String_Node_Str""),false);
    this.getModel().setCurrentlyDisplayedItem(logEntry.requestResponse);
    super.changeSelection(row,col,toggle,extend);
  }
}","@Override public void changeSelection(int row,int col,boolean toggle,boolean extend){
  if (this.getModel().getData().size() >= row) {
    LogEntry logEntry=this.getModel().getData().get(this.convertRowIndexToModel(row));
    requestViewer.setMessage(logEntry.requestResponse.getRequest(),true);
    if (logEntry.requestResponse.getResponse() != null)     responseViewer.setMessage(logEntry.requestResponse.getResponse(),false);
 else     responseViewer.setMessage(helpers.stringToBytes(""String_Node_Str""),false);
    this.getModel().setCurrentlyDisplayedItem(logEntry.requestResponse);
    super.changeSelection(row,col,toggle,extend);
  }
}",0.1674740484429066
79756,"public Object getValueByKey(columnNamesType columnName){
  if (isDebug) {
  }
  try {
switch (columnName) {
case TOOL:
      return callbacks.getToolName(tool);
case URL:
    return this.relativeURL;
case STATUS:
  return this.status;
case PROTOCOL:
return this.protocol;
case HOSTNAME:
return this.host;
case HOST:
return this.protocol + ""String_Node_Str"" + this.host;
case RESPONSECONTENTTYPE_BURP:
return this.responseContentType_burp;
case RESPONSELENGTH:
return this.responseLength;
case TARGETPORT:
return this.targetPort;
case METHOD:
return this.method;
case RESPONSETIME:
return this.responseTime;
case COMMENT:
return this.comment;
case REQUSTCONTENTTYPE:
return this.requstContentType;
case URLEXTENSION:
return this.urlExtension;
case REFERRERURL:
return this.referrerURL;
case HASQUERYSTRINGPARAM:
return this.hasQueryStringParam;
case HASBODYPARAM:
return this.hasBodyParam;
case HASCOOKIEPARAM:
return this.hasCookieParam;
case REQUESTLENGTH:
return this.requestLength;
case RESPONSECONTENTTYPE:
return this.responseContentType;
case RESPONSEINFERREDCONTENTTYPE_BURP:
return this.responseInferredContentType_burp;
case HASSETCOOKIES:
return this.hasSetCookies;
case PARAMS:
return this.params;
case TITLE:
return this.title;
case ISSSL:
return this.isSSL;
case TARGETIP:
return this.targetIP;
case NEWCOOKIES:
return this.newCookies;
case LISTENERINTERFACE:
return this.listenerInterface;
case CLIENTIP:
return this.clientIP;
case ISCOMPLETED:
return this.isCompleted;
case UNIQUEIDENTIFIER:
return this.uniqueIdentifier;
case SENTCOOKIES:
return this.sentCookies;
case USESCOOKIEJAR:
return this.usesCookieJar.toString();
case REGEX1REQ:
return this.regexAllReq[0];
case REGEX2REQ:
return this.regexAllReq[1];
case REGEX3REQ:
return this.regexAllReq[2];
case REGEX4REQ:
return this.regexAllReq[3];
case REGEX5REQ:
return this.regexAllReq[4];
case REGEX1RESP:
return this.regexAllResp[0];
case REGEX2RESP:
return this.regexAllResp[1];
case REGEX3RESP:
return this.regexAllResp[2];
case REGEX4RESP:
return this.regexAllResp[3];
case REGEX5RESP:
return this.regexAllResp[4];
default :
return ""String_Node_Str"";
}
}
 catch (Exception e) {
return ""String_Node_Str"";
}
}","public Object getValueByKey(columnNamesType columnName){
  if (isDebug) {
  }
  try {
switch (columnName) {
case TOOL:
      return callbacks.getToolName(tool);
case URL:
    return this.relativeURL;
case STATUS:
  return this.status;
case PROTOCOL:
return this.protocol;
case HOSTNAME:
return this.host;
case HOST:
return this.protocol + ""String_Node_Str"" + this.host;
case RESPONSECONTENTTYPE_BURP:
return this.responseContentType_burp;
case RESPONSELENGTH:
return this.responseLength;
case TARGETPORT:
return this.targetPort;
case METHOD:
return this.method;
case RESPONSETIME:
return this.responseTime;
case COMMENT:
return this.comment;
case REQUESTCONTENTTYPE:
return this.requstContentType;
case URLEXTENSION:
return this.urlExtension;
case REFERRERURL:
return this.referrerURL;
case HASQUERYSTRINGPARAM:
return this.hasQueryStringParam;
case HASBODYPARAM:
return this.hasBodyParam;
case HASCOOKIEPARAM:
return this.hasCookieParam;
case REQUESTLENGTH:
return this.requestLength;
case RESPONSECONTENTTYPE:
return this.responseContentType;
case RESPONSEINFERREDCONTENTTYPE_BURP:
return this.responseInferredContentType_burp;
case HASSETCOOKIES:
return this.hasSetCookies;
case PARAMS:
return this.params;
case TITLE:
return this.title;
case ISSSL:
return this.isSSL;
case TARGETIP:
return this.targetIP;
case NEWCOOKIES:
return this.newCookies;
case LISTENERINTERFACE:
return this.listenerInterface;
case CLIENTIP:
return this.clientIP;
case ISCOMPLETED:
return this.isCompleted;
case UNIQUEIDENTIFIER:
return this.uniqueIdentifier;
case SENTCOOKIES:
return this.sentCookies;
case USESCOOKIEJAR:
return this.usesCookieJar.toString();
case REGEX1REQ:
return this.regexAllReq[0];
case REGEX2REQ:
return this.regexAllReq[1];
case REGEX3REQ:
return this.regexAllReq[2];
case REGEX4REQ:
return this.regexAllReq[3];
case REGEX5REQ:
return this.regexAllReq[4];
case REGEX1RESP:
return this.regexAllResp[0];
case REGEX2RESP:
return this.regexAllResp[1];
case REGEX3RESP:
return this.regexAllResp[2];
case REGEX4RESP:
return this.regexAllResp[3];
case REGEX5RESP:
return this.regexAllResp[4];
default :
return ""String_Node_Str"";
}
}
 catch (Exception e) {
return ""String_Node_Str"";
}
}",0.999770694794772
79757,"private void saveOrderTableChange(){
  String tempTableIDsStringByOrder=""String_Node_Str"";
  Enumeration<TableColumn> tblCols=this.getColumnModel().getColumns();
  for (; tblCols.hasMoreElements(); ) {
    tempTableIDsStringByOrder+=tblCols.nextElement().getIdentifier() + this.getModel().getTableHeaderColumnsDetails().getIdCanaryParam();
  }
  if (isDebug) {
    stdout.println(""String_Node_Str"" + tempTableIDsStringByOrder + ""String_Node_Str""+ this.getModel().getTableHeaderColumnsDetails().getTableIDsStringByOrder());
  }
  if (!this.getModel().getTableHeaderColumnsDetails().getTableIDsStringByOrder().equals(tempTableIDsStringByOrder)) {
    if (isDebug) {
      stdout.println(""String_Node_Str"");
    }
    int counter=1;
    tblCols=this.getColumnModel().getColumns();
    for (; tblCols.hasMoreElements(); ) {
      int columnNumber=(Integer)tblCols.nextElement().getIdentifier();
      this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnNumber).setOrder(counter);
      counter++;
    }
    this.getModel().getTableHeaderColumnsDetails().setTableIDsStringByOrder(tempTableIDsStringByOrder);
    saveTableChanges();
  }
}","private void saveOrderTableChange(){
  String tempTableIDsStringByOrder=""String_Node_Str"";
  for (  TableColumn tblCol : Collections.list(this.getColumnModel().getColumns())) {
    tempTableIDsStringByOrder+=tblCol.getIdentifier() + this.getModel().getTableHeaderColumnsDetails().getIdCanaryParam();
  }
  if (isDebug) {
    stdout.println(""String_Node_Str"" + tempTableIDsStringByOrder + ""String_Node_Str""+ this.getModel().getTableHeaderColumnsDetails().getTableIDsStringByOrder());
  }
  if (!this.getModel().getTableHeaderColumnsDetails().getTableIDsStringByOrder().equals(tempTableIDsStringByOrder)) {
    if (isDebug) {
      stdout.println(""String_Node_Str"");
    }
    int counter=1;
    for (    TableColumn tblCol : Collections.list(this.getColumnModel().getColumns())) {
      int columnNumber=(Integer)tblCol.getIdentifier();
      this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(columnNumber).setOrder(counter);
      counter++;
    }
    this.getModel().getTableHeaderColumnsDetails().setTableIDsStringByOrder(tempTableIDsStringByOrder);
    saveTableChanges();
  }
}",0.8407196138657306
79758,"public void generatingTableColumns(){
  for (int i=0; i < this.getModel().getColumnCount(); i++) {
    TableColumn column=this.getColumnModel().getColumn(i);
    column.setMinWidth(50);
    column.setIdentifier(this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getId());
    column.setPreferredWidth((int)this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getWidth());
    if (this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getType().equals(""String_Node_Str"") || this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getType().equals(""String_Node_Str"") || this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(i).getType().equals(""String_Node_Str""))     column.setCellRenderer(new LeftTableCellRenderer());
  }
}","public void generatingTableColumns(){
  for (  TableColumn column : Collections.list(this.getColumnModel().getColumns())) {
    TableStructure colStructure=this.getModel().getTableHeaderColumnsDetails().getAllColumnsDefinitionList().get(column.getModelIndex());
    column.setMinWidth(50);
    column.setIdentifier(colStructure.getId());
    column.setPreferredWidth((int)colStructure.getWidth());
    if (colStructure.getType().equals(""String_Node_Str"") || colStructure.getType().equals(""String_Node_Str"") || colStructure.getType().equals(""String_Node_Str""))     column.setCellRenderer(new LeftTableCellRenderer());
    if (!colStructure.isVisible())     getColumnModel().removeColumn(column);
  }
}",0.3992371265098537
79759,"@Override public boolean include(Entry<? extends Object,? extends Object> entry){
  LogTableModel tableModel=(LogTableModel)entry.getModel();
  Object lValue=this.left, rValue=this.right;
  try {
    int columnNo=tableModel.getColumnIndexByName(this.left.toString());
    lValue=entry.getValue(tableModel.getTable().convertColumnIndexToModel(columnNo));
  }
 catch (  NullPointerException nPException) {
  }
  try {
    int columnNo=tableModel.getColumnIndexByName(this.right.toString());
    rValue=entry.getValue(tableModel.getTable().convertColumnIndexToModel(columnNo));
  }
 catch (  NullPointerException nPException) {
  }
  if (this.left instanceof Pattern) {
    return ((Pattern)lValue).matcher(rValue.toString()).matches();
  }
 else   if (this.right instanceof Pattern) {
    return ((Pattern)rValue).matcher(lValue.toString()).matches();
  }
  try {
    return checkValue(lValue,this.operation,rValue);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}","@Override public boolean include(Entry<? extends Object,? extends Object> entry){
  LogTableModel tableModel=(LogTableModel)entry.getModel();
  Object lValue=this.left, rValue=this.right;
  try {
    int columnNo=tableModel.getColumnIndexByName(this.left.toString());
    lValue=entry.getValue(columnNo);
  }
 catch (  NullPointerException nPException) {
  }
  try {
    int columnNo=tableModel.getColumnIndexByName(this.right.toString());
    rValue=entry.getValue(tableModel.getTable().convertColumnIndexToModel(columnNo));
  }
 catch (  NullPointerException nPException) {
  }
  if (this.left instanceof Pattern) {
    return ((Pattern)lValue).matcher(rValue.toString()).matches();
  }
 else   if (this.right instanceof Pattern) {
    return ((Pattern)rValue).matcher(lValue.toString()).matches();
  }
  try {
    return checkValue(lValue,this.operation,rValue);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
}",0.9746770025839794
79760,"@Override public void startAuthenticator(String address,AuthenticatorConfig c) throws Exception {
  String identityURL=c.getIdpUrl();
  String idp_userName=c.getIdpUsername();
  String idp_password=c.getIdpPassword();
  String app_key=c.getAppKey();
  String app_secret=c.getAppSecret();
  MessageConsumer<JsonObject> consumer=vertx.eventBus().consumer(address,(  Message<JsonObject> msg) -> {
    JsonObject oauth2_token=msg.body();
    String username=oauth2_token.getString(""String_Node_Str"");
    String password=oauth2_token.getString(""String_Node_Str"");
    try {
      HttpClientOptions opt=new HttpClientOptions();
      HttpClient httpClient=vertx.createHttpClient(opt);
      URL url=new URL(identityURL);
      String uri=url.getPath() + ""String_Node_Str"" + username;
      HttpClientRequest validateReq=httpClient.get(url.getPort(),url.getHost(),uri,resp -> {
        resp.exceptionHandler(e -> {
          logger.fatal(e.getMessage(),e);
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          vi.auth_valid=false;
          vi.authorized_user=""String_Node_Str"";
          vi.error_msg=e.getMessage();
          msg.reply(vi.toJson());
        }
);
        resp.bodyHandler(totalBuffer -> {
          String jsonResponse=totalBuffer.toString(""String_Node_Str"");
          logger.info(jsonResponse);
          JsonObject j=new JsonObject(jsonResponse);
          String token=j.getString(""String_Node_Str"");
          String refreshToken=j.getString(""String_Node_Str"");
          String expiresIn=j.getString(""String_Node_Str"");
          String type=j.getString(""String_Node_Str"");
          String scope=j.getString(""String_Node_Str"");
          boolean valid=j.getBoolean(""String_Node_Str"",false);
          String clientId=j.getString(""String_Node_Str"");
          String codeId=j.getString(""String_Node_Str"");
          String userId=j.getString(""String_Node_Str"");
          Long created=j.getLong(""String_Node_Str"");
          String refreshExpiresIn=j.getString(""String_Node_Str"");
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          vi.auth_valid=valid;
          vi.authorized_user=userId;
          vi.error_msg=""String_Node_Str"";
          JsonObject json=new JsonObject();
          json=vi.toJson();
          json.put(""String_Node_Str"",scope);
          json.put(""String_Node_Str"",expiresIn);
          msg.reply(json);
        }
);
      }
);
      HttpClientRequest loginReq=httpClient.post(url.getPort(),url.getHost(),url.getPath(),resp -> {
        resp.exceptionHandler(e -> {
          logger.fatal(e.getMessage(),e);
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          vi.auth_valid=false;
          vi.authorized_user=""String_Node_Str"";
          vi.error_msg=e.getMessage();
          msg.reply(vi.toJson());
        }
);
        resp.bodyHandler(totalBuffer -> {
          String jsonResponse=totalBuffer.toString(""String_Node_Str"");
          logger.info(jsonResponse);
          JsonObject j=new JsonObject(jsonResponse);
          String new_access_token=j.getString(""String_Node_Str"");
          String new_refresh_token=j.getString(""String_Node_Str"");
          String token_type=j.getString(""String_Node_Str"");
          String expires_in=j.getString(""String_Node_Str"");
          String scope=j.getString(""String_Node_Str"");
          String refresh_expires_in=j.getString(""String_Node_Str"");
          String error=j.getString(""String_Node_Str"");
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          if (new_access_token != null && new_access_token.trim().length() > 0) {
            vi.auth_valid=true;
            vi.authorized_user=username;
          }
 else {
            vi.auth_valid=false;
            vi.error_msg=error;
          }
          JsonObject json=new JsonObject();
          json=vi.toJson();
          json.put(""String_Node_Str"",scope);
          json.put(""String_Node_Str"",expires_in);
          msg.reply(json);
        }
);
      }
);
      if (username.contains(""String_Node_Str"")) {
        String data=""String_Node_Str"" + username + ""String_Node_Str""+ password+ ""String_Node_Str""+ app_key+ ""String_Node_Str""+ app_secret+ ""String_Node_Str"";
        loginReq.putHeader(""String_Node_Str"",""String_Node_Str"");
        loginReq.putHeader(""String_Node_Str"",""String_Node_Str"");
        loginReq.end(data,""String_Node_Str"");
      }
 else {
        validateReq.end();
      }
    }
 catch (    Throwable e) {
      logger.fatal(e.getMessage(),e);
      AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
      vi.auth_valid=false;
      vi.authorized_user=""String_Node_Str"";
      vi.error_msg=e.getMessage();
      msg.reply(vi.toJson());
    }
  }
);
  logger.info(""String_Node_Str"" + consumer.address());
}","@Override public void startAuthenticator(String address,AuthenticatorConfig c) throws Exception {
  String identityURL=c.getIdpUrl();
  String idp_userName=c.getIdpUsername();
  String idp_password=c.getIdpPassword();
  String app_key=c.getAppKey();
  String app_secret=c.getAppSecret();
  MessageConsumer<JsonObject> consumer=vertx.eventBus().consumer(address,(  Message<JsonObject> msg) -> {
    JsonObject oauth2_token=msg.body();
    String username=oauth2_token.getString(""String_Node_Str"");
    String password=oauth2_token.getString(""String_Node_Str"");
    try {
      HttpClientOptions opt=new HttpClientOptions();
      HttpClient httpClient=vertx.createHttpClient(opt);
      URL url=new URL(identityURL);
      String uri=url.getPath() + ""String_Node_Str"" + username;
      HttpClientRequest validateReq=httpClient.get(url.getPort(),url.getHost(),uri,resp -> {
        resp.exceptionHandler(e -> {
          logger.fatal(e.getMessage(),e);
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          vi.auth_valid=false;
          vi.authorized_user=""String_Node_Str"";
          vi.error_msg=e.getMessage();
          msg.reply(vi.toJson());
        }
);
        resp.bodyHandler(totalBuffer -> {
          String jsonResponse=totalBuffer.toString(""String_Node_Str"");
          logger.info(jsonResponse);
          JsonObject j=new JsonObject(jsonResponse);
          String token=j.getString(""String_Node_Str"");
          String refreshToken=j.getString(""String_Node_Str"");
          String expiresIn=j.getString(""String_Node_Str"");
          String type=j.getString(""String_Node_Str"");
          String scope=j.getString(""String_Node_Str"");
          boolean valid=j.getBoolean(""String_Node_Str"",false);
          String clientId=j.getString(""String_Node_Str"");
          String codeId=j.getString(""String_Node_Str"");
          String userId=j.getString(""String_Node_Str"");
          Long created=j.getLong(""String_Node_Str"");
          String refreshExpiresIn=j.getString(""String_Node_Str"");
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          vi.auth_valid=valid;
          vi.authorized_user=userId;
          vi.error_msg=""String_Node_Str"";
          JsonObject json=new JsonObject();
          json=vi.toJson();
          json.put(""String_Node_Str"",scope);
          json.put(""String_Node_Str"",expiresIn);
          msg.reply(json);
        }
);
      }
);
      HttpClientRequest loginReq=httpClient.post(url.getPort(),url.getHost(),url.getPath(),resp -> {
        resp.exceptionHandler(e -> {
          logger.fatal(e.getMessage(),e);
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          vi.auth_valid=false;
          vi.authorized_user=""String_Node_Str"";
          vi.error_msg=e.getMessage();
          msg.reply(vi.toJson());
        }
);
        resp.bodyHandler(totalBuffer -> {
          String jsonResponse=totalBuffer.toString(""String_Node_Str"");
          logger.info(jsonResponse);
          JsonObject j=new JsonObject(jsonResponse);
          String new_access_token=j.getString(""String_Node_Str"");
          String new_refresh_token=j.getString(""String_Node_Str"");
          String token_type=j.getString(""String_Node_Str"");
          String expires_in=j.getString(""String_Node_Str"");
          String scope=j.getString(""String_Node_Str"");
          String refresh_expires_in=j.getString(""String_Node_Str"");
          String error=j.getString(""String_Node_Str"");
          AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
          if (new_access_token != null && new_access_token.trim().length() > 0) {
            vi.auth_valid=true;
            vi.authorized_user=username;
          }
 else {
            vi.auth_valid=false;
            vi.error_msg=error;
          }
          JsonObject json=new JsonObject();
          json=vi.toJson();
          json.put(""String_Node_Str"",scope);
          json.put(""String_Node_Str"",expires_in);
          msg.reply(json);
        }
);
      }
);
      if (username.contains(""String_Node_Str"")) {
        String data=""String_Node_Str"" + username + ""String_Node_Str""+ password+ ""String_Node_Str""+ app_key+ ""String_Node_Str""+ app_secret+ ""String_Node_Str"";
        loginReq.putHeader(""String_Node_Str"",""String_Node_Str"");
        loginReq.end(data,""String_Node_Str"");
      }
 else {
        validateReq.end();
      }
    }
 catch (    Throwable e) {
      logger.fatal(e.getMessage(),e);
      AuthorizationClient.ValidationInfo vi=new AuthorizationClient.ValidationInfo();
      vi.auth_valid=false;
      vi.authorized_user=""String_Node_Str"";
      vi.error_msg=e.getMessage();
      msg.reply(vi.toJson());
    }
  }
);
  logger.info(""String_Node_Str"" + consumer.address());
}",0.9933079378152992
79761,"@Override public void handle(Message<Buffer> message){
  try {
    boolean isTenantSession=isTenantSession();
    boolean tenantMatch;
    if (isTenantSession) {
      boolean containsTenantHeader=message.headers().contains(TENANT_HEADER);
      if (containsTenantHeader) {
        String tenantHeaderValue=message.headers().get(TENANT_HEADER);
        tenantMatch=tenant.equals(tenantHeaderValue) || ""String_Node_Str"".equals(tenantHeaderValue);
      }
 else {
        tenantMatch=false;
      }
    }
 else {
      tenantMatch=true;
    }
    if (tenantMatch) {
      Buffer in=message.body();
      PublishMessage pm=(PublishMessage)decoder.dec(in);
      handlePublishMessageReceived(pm);
    }
  }
 catch (  Throwable e) {
    Container.logger().error(e.getMessage(),e);
  }
}","@Override public void handle(Message<Buffer> message){
  try {
    boolean tenantMatch=tenantMatch(message);
    if (tenantMatch) {
      Buffer in=message.body();
      PublishMessage pm=(PublishMessage)decoder.dec(in);
      handlePublishMessageReceived(pm);
    }
  }
 catch (  Throwable e) {
    Container.logger().error(e.getMessage(),e);
  }
}",0.1575221238938053
79762,"private String calculatePublishTenant(PublishMessage publishMessage){
  boolean isTenantSession=isTenantSession();
  if (isTenantSession) {
    return tenant;
  }
 else {
    String topic=publishMessage.getTopicName();
    String t;
    boolean slashFirst=topic.startsWith(""String_Node_Str"");
    if (slashFirst) {
      int idx=topic.indexOf('/',1);
      if (idx > 1)       t=topic.substring(1,idx);
 else       t=topic.substring(1);
    }
 else {
      int idx=topic.indexOf('/',0);
      if (idx > 0)       t=topic.substring(0,idx);
 else       t=topic;
    }
    return t;
  }
}","private String calculatePublishTenant(String topic){
  boolean isTenantSession=isTenantSession();
  if (isTenantSession) {
    return tenant;
  }
 else {
    String t;
    boolean slashFirst=topic.startsWith(""String_Node_Str"");
    if (slashFirst) {
      int idx=topic.indexOf('/',1);
      if (idx > 1)       t=topic.substring(1,idx);
 else       t=topic.substring(1);
    }
 else {
      int idx=topic.indexOf('/',0);
      if (idx > 0)       t=topic.substring(0,idx);
 else       t=topic;
    }
    return t;
  }
}",0.7447774750227066
79763,"public void handleSubscribeMessage(SubscribeMessage subscribeMessage){
  try {
    final int messageID=subscribeMessage.getMessageID();
    if (this.messageConsumer == null) {
      messageConsumer=vertx.eventBus().consumer(ADDRESS);
      messageConsumer.handler(this);
    }
    matchingSubscriptionsCache.clear();
    List<SubscribeMessage.Couple> subs=subscribeMessage.subscriptions();
    for (    SubscribeMessage.Couple s : subs) {
      String topicFilter=s.getTopicFilter();
      Subscription sub=new Subscription();
      sub.setQos(s.getQos());
      sub.setTopicFilter(topicFilter);
      this.subscriptions.put(topicFilter,sub);
      if (retainSupport) {
        storeManager.getRetainedMessagesByTopicFilter(tenant,topicFilter,(        List<PublishMessage> retainedMessages) -> {
          if (retainedMessages != null) {
            int incrMessageID=messageID;
            for (            PublishMessage retainedMessage : retainedMessages) {
switch (retainedMessage.getQos()) {
case LEAST_ONE:
case EXACTLY_ONCE:
                retainedMessage.setMessageID(++incrMessageID);
            }
            retainedMessage.setRetainFlag(true);
            handlePublishMessageReceived(retainedMessage);
          }
        }
      }
);
    }
  }
}
 catch (Throwable e) {
  Container.logger().error(e.getMessage());
}
}","public void handleSubscribeMessage(SubscribeMessage subscribeMessage){
  try {
    final int messageID=subscribeMessage.getMessageID();
    if (this.messageConsumer == null) {
      messageConsumer=vertx.eventBus().consumer(ADDRESS);
      messageConsumer.handler(this);
    }
    matchingSubscriptionsCache.clear();
    List<SubscribeMessage.Couple> subs=subscribeMessage.subscriptions();
    for (    SubscribeMessage.Couple s : subs) {
      String topicFilter=s.getTopicFilter();
      Subscription sub=new Subscription();
      sub.setQos(s.getQos());
      sub.setTopicFilter(topicFilter);
      this.subscriptions.put(topicFilter,sub);
      String publishTenant=calculatePublishTenant(topicFilter);
      if (retainSupport) {
        storeManager.getRetainedMessagesByTopicFilter(publishTenant,topicFilter,(        List<PublishMessage> retainedMessages) -> {
          if (retainedMessages != null) {
            int incrMessageID=messageID;
            for (            PublishMessage retainedMessage : retainedMessages) {
switch (retainedMessage.getQos()) {
case LEAST_ONE:
case EXACTLY_ONCE:
                retainedMessage.setMessageID(++incrMessageID);
            }
            retainedMessage.setRetainFlag(true);
            handlePublishMessageReceived(retainedMessage);
          }
        }
      }
);
    }
  }
}
 catch (Throwable e) {
  Container.logger().error(e.getMessage());
}
}",0.973308957952468
79764,"public void shutdown(){
  if (messageConsumer != null && cleanSession) {
    messageConsumer.unregister();
    messageConsumer=null;
  }
  vertx=null;
}","public void shutdown(){
  if (messageConsumer != null && cleanSession) {
    messageConsumer.unregister();
    messageConsumer=null;
  }
  stopKeepAliveTimer();
  vertx=null;
}",0.926829268292683
79765,"public StoreManager(Vertx vertx,String tenant,ITopicsManager topicsManager){
  this.vertx=vertx;
  this.tenant=tenant;
  this.topicsManager=topicsManager;
  this.encoder=new MQTTEncoder();
  this.decoder=new MQTTDecoder();
}","public StoreManager(Vertx vertx,String tenant,ITopicsManager topicsManager){
  this.vertx=vertx;
  this.encoder=new MQTTEncoder();
  this.decoder=new MQTTDecoder();
}",0.8512820512820513
79766,"private JsonObject saveRetainMessage(JsonObject request){
  String topic=request.getString(""String_Node_Str"");
  byte[] message=request.getBinary(""String_Node_Str"");
  String tenant=request.getString(""String_Node_Str"");
  if (tenant != null)   topic=tenant + topic;
  db.put(topic,message);
  JsonObject response=new JsonObject();
  response.put(""String_Node_Str"",topic).put(""String_Node_Str"",message);
  return response;
}","private JsonObject saveRetainMessage(JsonObject request){
  String topic=request.getString(""String_Node_Str"");
  String tenant=request.getString(""String_Node_Str"");
  byte[] message=request.getBinary(""String_Node_Str"");
  Map<String,byte[]> db=db(tenant);
  db.put(topic,message);
  JsonObject response=new JsonObject();
  response.put(""String_Node_Str"",topic).put(""String_Node_Str"",message);
  return response;
}",0.784688995215311
79767,"private JsonObject getRetainedMessagesByTopicFilter(JsonObject request){
  String topicFilter=request.getString(""String_Node_Str"");
  String tenant=request.getString(""String_Node_Str"");
  if (tenant != null) {
    topicFilter=tenant + topicFilter;
  }
  List<JsonObject> list=new ArrayList<>();
  for (  String topic : db.keySet()) {
    boolean topicMatch=topicsManager.match(topic,topicFilter);
    if (topicMatch) {
      byte[] message=db.get(topic);
      JsonObject item=new JsonObject().put(""String_Node_Str"",topic).put(""String_Node_Str"",message);
      list.add(item);
    }
  }
  JsonObject response=new JsonObject();
  response.put(""String_Node_Str"",new JsonArray(list));
  return response;
}","private JsonObject getRetainedMessagesByTopicFilter(JsonObject request){
  String topicFilter=request.getString(""String_Node_Str"");
  String tenant=request.getString(""String_Node_Str"");
  List<JsonObject> list=new ArrayList<>();
  Map<String,byte[]> db=db(tenant);
  for (  String topic : db.keySet()) {
    boolean topicMatch=topicsManager.match(topic,topicFilter);
    if (topicMatch) {
      byte[] message=db.get(topic);
      JsonObject item=new JsonObject().put(""String_Node_Str"",topic).put(""String_Node_Str"",message);
      list.add(item);
    }
  }
  JsonObject response=new JsonObject();
  response.put(""String_Node_Str"",new JsonArray(list));
  return response;
}",0.7438136826783115
79768,"private JsonObject deleteRetainMessage(JsonObject request){
  String topic=request.getString(""String_Node_Str"");
  String tenant=request.getString(""String_Node_Str"");
  if (tenant != null)   topic=tenant + topic;
  db.remove(topic);
  JsonObject response=new JsonObject();
  response.put(""String_Node_Str"",true);
  return response;
}","private JsonObject deleteRetainMessage(JsonObject request){
  String topic=request.getString(""String_Node_Str"");
  String tenant=request.getString(""String_Node_Str"");
  Map<String,byte[]> db=db(tenant);
  db.remove(topic);
  JsonObject response=new JsonObject();
  response.put(""String_Node_Str"",true);
  return response;
}",0.6737804878048781
79769,"@Override protected void encode(PingRespMessage msg,ByteBuf out){
  out.writeByte(AbstractMessage.PINGRESP << 4).writeByte(0);
}","@Override protected void encode(PingRespMessage msg,ByteBuf out){
  byte flags=Utils.encodeFlags(msg);
  out.writeByte(AbstractMessage.PINGRESP << 4 | flags).writeByte(0);
}",0.8504983388704319
79770,"@Override protected void encode(PubCompMessage msg,ByteBuf out){
  out.writeByte(AbstractMessage.PUBCOMP << 4);
  out.writeBytes(Utils.encodeRemainingLength(2));
  out.writeShort(msg.getMessageID());
}","@Override protected void encode(PubCompMessage msg,ByteBuf out){
  byte flags=Utils.encodeFlags(msg);
  out.writeByte(AbstractMessage.PUBCOMP << 4 | flags);
  out.writeBytes(Utils.encodeRemainingLength(2));
  out.writeShort(msg.getMessageID());
}",0.8993288590604027
79771,"@Override protected void encode(PubRecMessage msg,ByteBuf out){
  out.writeByte(AbstractMessage.PUBREC << 4);
  out.writeBytes(Utils.encodeRemainingLength(2));
  out.writeShort(msg.getMessageID());
}","@Override protected void encode(PubRecMessage msg,ByteBuf out){
  byte flags=Utils.encodeFlags(msg);
  out.writeByte(AbstractMessage.PUBREC << 4 | flags);
  out.writeBytes(Utils.encodeRemainingLength(2));
  out.writeShort(msg.getMessageID());
}",0.8984198645598194
79772,"@Override protected void encode(PubRelMessage msg,ByteBuf out){
  out.writeByte(AbstractMessage.PUBREL << 4);
  out.writeBytes(Utils.encodeRemainingLength(2));
  out.writeShort(msg.getMessageID());
}","@Override protected void encode(PubRelMessage msg,ByteBuf out){
  byte flags=Utils.encodeFlags(msg);
  out.writeByte(AbstractMessage.PUBREL << 4 | flags);
  out.writeBytes(Utils.encodeRemainingLength(2));
  out.writeShort(msg.getMessageID());
}",0.8984198645598194
79773,"static byte encodeFlags(AbstractMessage message){
  byte flags=0;
  if (message.isDupFlag()) {
    flags|=0x08;
  }
  if (message.isRetainFlag()) {
    flags|=0x01;
  }
  flags|=((message.getQos().ordinal() & 0x03) << 1);
  return flags;
}","static byte encodeFlags(AbstractMessage message){
  byte flags=0;
  if (message.isDupFlag()) {
    flags|=0x08;
  }
  if (message.isRetainFlag()) {
    flags|=0x01;
  }
  AbstractMessage.QOSType qos=message.getQos();
  if (qos != null) {
    int qosOrdinal=qos.ordinal();
    flags|=((qosOrdinal & 0x03) << 1);
  }
  return flags;
}",0.7670753064798599
79774,"protected void handleConnectMessage(ConnectMessage connectMessage) throws Exception {
  ConnectMessage connect=connectMessage;
  clientID=connect.getClientID();
  cleanSession=connect.isCleanSession();
  tenant=getTenant(connectMessage);
  topicsManager=new MQTTTopicsManager(vertx,tenant);
  store=new MQTTStoreManager(vertx,tenant);
  boolean clientIDExists=clientIDExists(clientID);
  container.logger().info(""String_Node_Str"" + clientID);
  if (clientIDExists) {
    container.logger().info(""String_Node_Str"" + clientID + ""String_Node_Str"");
  }
 else {
    addClientID(clientID);
  }
  republishPendingMessages();
  if (connect.isWillFlag()) {
    String willMsg=connect.getWillMessage();
    byte willQos=connect.getWillQos();
    String willTopic=connect.getWillTopic();
    storeWillMessage(willMsg,willQos,willTopic);
  }
}","protected void handleConnectMessage(ConnectMessage connectMessage) throws Exception {
  ConnectMessage connect=connectMessage;
  clientID=connect.getClientID();
  cleanSession=connect.isCleanSession();
  tenant=getTenant(connectMessage);
  topicsManager=new MQTTTopicsManager(vertx,tenant);
  store=new MQTTStoreManager(vertx,tenant);
  boolean clientIDExists=clientIDExists(clientID);
  container.logger().info(""String_Node_Str"" + clientID);
  if (clientIDExists) {
    container.logger().info(""String_Node_Str"" + clientID + ""String_Node_Str"");
  }
 else {
    addClientID(clientID);
  }
  if (connect.isWillFlag()) {
    String willMsg=connect.getWillMessage();
    byte willQos=connect.getWillQos();
    String willTopic=connect.getWillTopic();
    storeWillMessage(willMsg,willQos,willTopic);
  }
}",0.981640146878825
79775,"protected void handleSubscribeMessage(SubscribeMessage subscribeMessage) throws Exception {
  try {
    List<SubscribeMessage.Couple> subs=subscribeMessage.subscriptions();
    for (    SubscribeMessage.Couple c : subs) {
      byte requestedQosByte=c.getQos();
      final QOSType requestedQos=toQos(requestedQosByte);
      String topic=c.getTopic();
      subscribeClientToTopic(topic,requestedQos);
      if (clientID != null && cleanSession == false) {
        Subscription s=new Subscription();
        s.setQos(requestedQosByte);
        s.setTopic(topic);
        getStore().saveSubscription(s,clientID);
      }
    }
  }
 catch (  Throwable e) {
    container.logger().error(e.getMessage());
  }
}","protected void handleSubscribeMessage(SubscribeMessage subscribeMessage) throws Exception {
  try {
    List<SubscribeMessage.Couple> subs=subscribeMessage.subscriptions();
    for (    SubscribeMessage.Couple c : subs) {
      byte requestedQosByte=c.getQos();
      final QOSType requestedQos=toQos(requestedQosByte);
      String topic=c.getTopic();
      subscribeClientToTopic(topic,requestedQos);
      if (clientID != null && cleanSession == false) {
        Subscription s=new Subscription();
        s.setQos(requestedQosByte);
        s.setTopic(topic);
        getStore().saveSubscription(s,clientID);
      }
      republishPendingMessagesForSubscription(topic);
    }
  }
 catch (  Throwable e) {
    container.logger().error(e.getMessage());
  }
}",0.9632152588555858
79776,"private void republishPendingMessages() throws Exception {
  if (cleanSession) {
  }
 else {
    MQTTStoreManager store=getStore();
    List<Subscription> subscriptions=store.getSubscriptionsByClientID(clientID);
    for (    Subscription sub : subscriptions) {
      QOSType qos=new QOSUtils().toQos(sub.getQos());
      String topic2=sub.getTopic();
      subscribeClientToTopic(topic2,qos);
      List<byte[]> messages=store.getMessagesByTopic(topic2,clientID);
      for (      byte[] message : messages) {
        PublishMessage pm=(PublishMessage)decoder.dec(new Buffer(message));
        sendMessageToClient(pm);
        deleteMessage(pm);
      }
    }
  }
}","private void republishPendingMessages() throws Exception {
  if (cleanSession) {
  }
 else {
    MQTTStoreManager store=getStore();
    List<Subscription> subscriptions=store.getSubscriptionsByClientID(clientID);
    for (    Subscription sub : subscriptions) {
      QOSType qos=new QOSUtils().toQos(sub.getQos());
      String topic2=sub.getTopic();
      subscribeClientToTopic(topic2,qos);
      republishPendingMessagesForSubscription(topic2);
    }
  }
}",0.7566607460035524
79777,"private static View createContentLayout(Context context,StatusBarNotification n){
  LayoutInflater inflater=LayoutInflater.from(context);
  View rootLayout=inflater.inflate(R.layout.content_layout,null);
  ImageView contactImageView=(ImageView)rootLayout.findViewById(R.id.contact_image);
  contactImageView.setImageDrawable(getNotificationContactImage(context,n));
  TextView contentTextView=(TextView)rootLayout.findViewById(R.id.content_text);
  TextView contentTitleView=(TextView)rootLayout.findViewById(R.id.title_text);
  String content=NotificationHelper.getNotificationContent(n);
  String title=NotificationHelper.getNotificationTitle(n);
  if (!content.startsWith(NotificationHelper.getNotificationTitle(n))) {
    contentTitleView.setText(title);
  }
 else {
    contentTextView.setVisibility(View.GONE);
  }
  contentTextView.setText(content);
  if (contactImageView.getDrawable() == null) {
    int padding=context.getResources().getDimensionPixelSize(R.dimen.content_text_paddings);
    contentTextView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contentTitleView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contactImageView.setVisibility(View.GONE);
  }
  return rootLayout;
}","private static View createContentLayout(Context context,StatusBarNotification n){
  LayoutInflater inflater=LayoutInflater.from(context);
  View rootLayout=inflater.inflate(R.layout.content_layout,null);
  ImageView contactImageView=(ImageView)rootLayout.findViewById(R.id.contact_image);
  contactImageView.setImageDrawable(getNotificationContactImage(context,n));
  TextView contentTextView=(TextView)rootLayout.findViewById(R.id.content_text);
  TextView contentTitleView=(TextView)rootLayout.findViewById(R.id.title_text);
  String content=NotificationHelper.getNotificationContent(n);
  String title=NotificationHelper.getNotificationTitle(n);
  if (content != null && !content.startsWith(NotificationHelper.getNotificationTitle(n))) {
    contentTitleView.setText(title);
  }
 else {
    contentTextView.setVisibility(View.GONE);
  }
  contentTextView.setText(content);
  if (contactImageView.getDrawable() == null) {
    int padding=context.getResources().getDimensionPixelSize(R.dimen.content_text_paddings);
    contentTextView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contentTitleView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contactImageView.setVisibility(View.GONE);
  }
  return rootLayout;
}",0.9927674153026266
79778,"/** 
 * Get text from notification with specific field.
 * @param n     StatusBarNotification object.
 * @param field StatusBarNotification extra field.
 * @return Notification text.
 */
public static String getNotificationText(StatusBarNotification n,String field){
  String text=null;
  if (n != null) {
    Notification notification=n.getNotification();
    Bundle extras=notification.extras;
    text=extras.getString(field);
  }
  return text;
}","/** 
 * Get text from notification with specific field.
 * @param n     StatusBarNotification object.
 * @param field StatusBarNotification extra field.
 * @return Notification text.
 */
public static String getNotificationText(StatusBarNotification n,String field){
  String text=null;
  if (n != null) {
    Notification notification=n.getNotification();
    Bundle extras=notification.extras;
    CharSequence chars=extras.getCharSequence(field);
    text=chars != null ? chars.toString() : null;
  }
  return text;
}",0.8845360824742268
79779,"private void updateSelection(StatusBarNotification n){
  String oldNotif=NotificationHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=NotificationHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(mContext.getResources(),b));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(mContext,n));
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(mContext,n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification || mNotificationView.getX() != 0) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(NotificationHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}","private void updateSelection(StatusBarNotification n){
  String oldNotif=NotificationHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=NotificationHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(mContext.getResources(),b));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(mContext,n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      mNotificationIcon.setOnClickListener(new NotificationClicker(n,this));
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(mContext,n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification || mNotificationView.getX() != 0) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(NotificationHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}",0.9140332993544004
79780,"@Override protected void onCreate(Bundle savedInstanceState){
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  if (WallpaperFactory.isLiveWallpaperUsed(this) && WallpaperFactory.isWallpaperThemeSelected(this)) {
    setTheme(R.style.AppTheme_Peek_Wallpaper);
  }
 else {
    setTheme(R.style.AppTheme_Peek);
  }
  super.onCreate(savedInstanceState);
  mPeekView=NotificationPeek.getPeekView();
  mNotificationsContainer=(GridLayout)mPeekView.findViewById(R.id.notification_container);
  mNotificationView=(ViewGroup)mPeekView.findViewById(R.id.notification_view);
  setContentView(mPeekView);
  boolean showClock=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferenceKeys.PREF_CLOCK,true);
  if (showClock) {
    mClockTextView=(TextView)PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CLOCK,null);
    mPeekView.addView(mClockTextView);
    mClockTextView.setText(getCurrentTimeText());
  }
  mPeekView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  initReceiver();
  mNotificationLayout=(NotificationLayout)mPeekView.findViewById(R.id.notification_layout);
  mPeek=mNotificationLayout.getNotificationPeek();
  mNotificationIcon=(ImageView)mPeekView.findViewById(R.id.notification_icon);
  StatusBarNotification n=(StatusBarNotification)mNotificationView.getTag();
  final PendingIntent contentIntent=n.getNotification().contentIntent;
  if (contentIntent != null) {
    mNotificationClicker=new NotificationClicker(n,mPeek);
    mNotificationIcon.setOnClickListener(mNotificationClicker);
  }
 else {
    mNotificationIcon.setOnClickListener(null);
  }
  mNotificationText=(TextView)mPeekView.findViewById(R.id.notification_text);
}","@Override protected void onCreate(Bundle savedInstanceState){
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  if (WallpaperFactory.isLiveWallpaperUsed(this) && WallpaperFactory.isWallpaperThemeSelected(this)) {
    setTheme(R.style.AppTheme_Peek_Wallpaper);
  }
 else {
    setTheme(R.style.AppTheme_Peek);
  }
  super.onCreate(savedInstanceState);
  mPeekView=NotificationPeek.getPeekView();
  mNotificationsContainer=(GridLayout)mPeekView.findViewById(R.id.notification_container);
  mNotificationView=(ViewGroup)mPeekView.findViewById(R.id.notification_view);
  setContentView(mPeekView);
  boolean showClock=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferenceKeys.PREF_CLOCK,true);
  if (showClock) {
    mClockTextView=(TextView)PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CLOCK,null);
    mPeekView.addView(mClockTextView);
    mClockTextView.setText(getCurrentTimeText());
  }
  mPeekView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  initReceiver();
  mNotificationLayout=(NotificationLayout)mPeekView.findViewById(R.id.notification_layout);
  mPeek=mNotificationLayout.getNotificationPeek();
  mNotificationIcon=(ImageView)mPeekView.findViewById(R.id.notification_icon);
  mNotificationText=(TextView)mPeekView.findViewById(R.id.notification_text);
}",0.8511252163877668
79781,"private void hideNotificationContent(){
  if (!mContentShowing) {
    return;
  }
  mContentShowing=false;
  final View contentView=mPeekView.findViewById(R.id.notification_content);
  TextView contentTextView=(TextView)contentView.findViewById(R.id.content_text);
  contentView.animate().alpha(0f).setInterpolator(new AccelerateInterpolator()).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      mPeekView.removeView(contentView);
    }
  }
).start();
  contentTextView.animate().translationY(50).setInterpolator(new AccelerateInterpolator()).start();
  mNotificationText.animate().alpha(1f).setInterpolator(new AccelerateInterpolator()).start();
  if (mClockTextView != null) {
    mClockTextView.animate().alpha(1f).setInterpolator(new AccelerateInterpolator()).start();
  }
}","private void hideNotificationContent(){
  if (!mContentShowing) {
    return;
  }
  mContentShowing=false;
  final View contentView=mPeekView.findViewById(R.id.notification_content);
  LinearLayout contentTextLayout=(LinearLayout)contentView.findViewById(R.id.content_layout);
  contentTextLayout.animate().translationY(50).setInterpolator(new AccelerateInterpolator()).start();
  contentView.animate().alpha(0f).setInterpolator(new AccelerateInterpolator()).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      if (contentView != null) {
        mPeekView.removeView(contentView);
      }
    }
  }
).start();
  mNotificationText.animate().alpha(1f).setInterpolator(new AccelerateInterpolator()).start();
  if (mClockTextView != null) {
    mClockTextView.animate().alpha(1f).setInterpolator(new AccelerateInterpolator()).start();
  }
}",0.8268279274326553
79782,"@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  mPeekView.removeView(contentView);
}","@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  if (contentView != null) {
    mPeekView.removeView(contentView);
  }
}",0.8821548821548821
79783,"private void showNotificationContent(){
  if (mContentShowing) {
    return;
  }
  mContentShowing=true;
  StatusBarNotification selectedNotification=(StatusBarNotification)mNotificationView.getTag();
  View contentView=PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CONTENT,selectedNotification);
  contentView.setId(R.id.notification_content);
  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  params.addRule(RelativeLayout.ABOVE,R.id.notification_layout);
  contentView.setLayoutParams(params);
  TextView contentTextView=(TextView)contentView.findViewById(R.id.content_text);
  contentTextView.setTranslationY(50);
  contentView.setAlpha(0);
  mPeekView.addView(contentView);
  contentView.animate().alpha(1f).setInterpolator(new DecelerateInterpolator()).start();
  contentTextView.animate().translationY(0).setInterpolator(new DecelerateInterpolator()).start();
  mNotificationText.animate().alpha(0f).setInterpolator(new DecelerateInterpolator()).start();
  if (mClockTextView != null) {
    mClockTextView.animate().alpha(0f).setInterpolator(new DecelerateInterpolator()).start();
  }
}","private void showNotificationContent(){
  if (mContentShowing) {
    return;
  }
  Log.d(TAG,""String_Node_Str"");
  mContentShowing=true;
  StatusBarNotification selectedNotification=(StatusBarNotification)mNotificationView.getTag();
  View contentView=PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CONTENT,selectedNotification);
  contentView.setId(R.id.notification_content);
  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  params.addRule(RelativeLayout.ABOVE,R.id.notification_layout);
  contentView.setLayoutParams(params);
  LinearLayout contentTextLayout=(LinearLayout)contentView.findViewById(R.id.content_layout);
  contentTextLayout.setTranslationY(50);
  contentView.setAlpha(0);
  mPeekView.addView(contentView);
  contentView.animate().alpha(1f).setInterpolator(new DecelerateInterpolator()).start();
  contentTextLayout.animate().translationY(0).setInterpolator(new DecelerateInterpolator()).start();
  mNotificationText.animate().alpha(0f).setInterpolator(new DecelerateInterpolator()).start();
  if (mClockTextView != null) {
    mClockTextView.animate().alpha(0f).setInterpolator(new DecelerateInterpolator()).start();
  }
}",0.9118122977346278
79784,"private static View createContentLayout(Context context,StatusBarNotification n){
  LayoutInflater inflater=LayoutInflater.from(context);
  View rootLayout=inflater.inflate(R.layout.content_layout,null);
  ImageView contactImageView=(ImageView)rootLayout.findViewById(R.id.contact_image);
  contactImageView.setImageDrawable(getNotificationContactImage(context,n));
  TextView contentTextView=(TextView)rootLayout.findViewById(R.id.content_text);
  String content=NotificationHelper.getNotificationContent(n);
  if (!content.startsWith(NotificationHelper.getNotificationTitle(n))) {
    content=NotificationHelper.getNotificationTitle(n) + ""String_Node_Str"" + content;
  }
  contentTextView.setText(content);
  if (contactImageView.getDrawable() == null) {
    int padding=context.getResources().getDimensionPixelSize(R.dimen.content_text_paddings);
    contentTextView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contactImageView.setVisibility(View.GONE);
  }
  return rootLayout;
}","private static View createContentLayout(Context context,StatusBarNotification n){
  LayoutInflater inflater=LayoutInflater.from(context);
  View rootLayout=inflater.inflate(R.layout.content_layout,null);
  ImageView contactImageView=(ImageView)rootLayout.findViewById(R.id.contact_image);
  contactImageView.setImageDrawable(getNotificationContactImage(context,n));
  TextView contentTextView=(TextView)rootLayout.findViewById(R.id.content_text);
  TextView contentTitleView=(TextView)rootLayout.findViewById(R.id.title_text);
  String content=NotificationHelper.getNotificationContent(n);
  String title=NotificationHelper.getNotificationTitle(n);
  if (!content.startsWith(NotificationHelper.getNotificationTitle(n))) {
    contentTitleView.setText(title);
  }
  contentTextView.setText(content);
  if (contactImageView.getDrawable() == null) {
    int padding=context.getResources().getDimensionPixelSize(R.dimen.content_text_paddings);
    contentTextView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contentTitleView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contactImageView.setVisibility(View.GONE);
  }
  return rootLayout;
}",0.8131291028446389
79785,"public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mDragging=false;
  mLongPressSent=false;
mCurrView=mCallback.getChildAtPosition(ev);
mVelocityTracker.clear();
if (mCurrView != null) {
mCurrAnimView=mCallback.getChildContentView(mCurrView);
mCanCurrViewBeDimissed=mCallback.canChildBeDismissed(mCurrView);
mVelocityTracker.addMovement(ev);
mInitialTouchPos=getPos(ev);
if (mLongPressListener != null) {
if (mWatchLongPress == null) {
  mWatchLongPress=new Runnable(){
    @Override public void run(){
      if (mCurrView != null && !mLongPressSent) {
        mLongPressSent=true;
        mCurrView.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);
        mLongPressListener.onLongClick(mCurrView);
      }
    }
  }
;
}
mHandler.postDelayed(mWatchLongPress,mLongPressTimeout);
}
if (mShowContentRunnable == null) {
mShowContentRunnable=new Runnable(){
  @Override public void run(){
    mCallback.onShowContentActionDetected();
  }
}
;
}
mHandler.postDelayed(mShowContentRunnable,SHOW_CONTENT_TIMEOUT);
}
break;
case MotionEvent.ACTION_MOVE:
if (mCurrView != null && !mLongPressSent) {
mVelocityTracker.addMovement(ev);
float pos=getPos(ev);
float delta=pos - mInitialTouchPos;
if (Math.abs(delta) > mPagingTouchSlop) {
mCallback.onBeginDrag(mCurrView);
mDragging=true;
mInitialTouchPos=getPos(ev) - getTranslation(mCurrAnimView);
removeLongPressCallback();
}
}
removeShowContentCallback();
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mDragging=false;
mCurrView=null;
mCurrAnimView=null;
mLongPressSent=false;
removeLongPressCallback();
removeShowContentCallback();
break;
}
return mDragging;
}","public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mDragging=false;
  mLongPressSent=false;
mCurrView=mCallback.getChildAtPosition(ev);
mVelocityTracker.clear();
if (mCurrView != null) {
mCurrAnimView=mCallback.getChildContentView(mCurrView);
mCanCurrViewBeDimissed=mCallback.canChildBeDismissed(mCurrView);
mVelocityTracker.addMovement(ev);
mInitialTouchPos=getPos(ev);
if (mLongPressListener != null) {
if (mWatchLongPress == null) {
  mWatchLongPress=new Runnable(){
    @Override public void run(){
      if (mCurrView != null && !mLongPressSent) {
        mLongPressSent=true;
        mCurrView.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);
        mLongPressListener.onLongClick(mCurrView);
      }
    }
  }
;
}
mHandler.postDelayed(mWatchLongPress,mLongPressTimeout);
}
if (mShowContentRunnable == null) {
mShowContentRunnable=new Runnable(){
  @Override public void run(){
    mCallback.onShowContentActionDetected();
  }
}
;
}
mHandler.postDelayed(mShowContentRunnable,SHOW_CONTENT_TIMEOUT);
}
break;
case MotionEvent.ACTION_MOVE:
if (mCurrView != null && !mLongPressSent) {
mVelocityTracker.addMovement(ev);
float pos=getPos(ev);
float delta=pos - mInitialTouchPos;
if (Math.abs(delta) > mPagingTouchSlop) {
mCallback.onBeginDrag(mCurrView);
mDragging=true;
mInitialTouchPos=getPos(ev) - getTranslation(mCurrAnimView);
removeLongPressCallback();
removeShowContentCallback();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mDragging=false;
mCurrView=null;
mCurrAnimView=null;
mLongPressSent=false;
removeLongPressCallback();
removeShowContentCallback();
break;
}
return mDragging;
}",0.9832078749276202
79786,"public static String getNotificationContent(StatusBarNotification n){
  String content=getNotificationText(n,Notification.EXTRA_TEXT);
  if (content == null) {
    return n.getNotification().tickerText == null ? ""String_Node_Str"" : n.getNotification().tickerText.toString();
  }
  return content;
}","public static String getNotificationContent(StatusBarNotification n){
  String content=getNotificationTextLines(n);
  if (content.length() == 0) {
    content=getNotificationText(n,Notification.EXTRA_TEXT);
  }
  if (content == null) {
    return n.getNotification().tickerText == null ? ""String_Node_Str"" : n.getNotification().tickerText.toString();
  }
  return content;
}",0.8869047619047619
79787,"@Override public void onShowContentActionDetected(){
  Intent intent=new Intent(NotificationPeekActivity.NotificationPeekReceiver.ACTION_SHOW_CONTENT);
  getContext().sendBroadcast(intent);
}","@Override public void onShowContentActionDetected(){
  showNotificationContent();
}",0.5766423357664233
79788,"@Override public void onHideContentActionDetected(){
  Intent intent=new Intent(NotificationPeekActivity.NotificationPeekReceiver.ACTION_HIDE_CONTENT);
  getContext().sendBroadcast(intent);
}","@Override public void onHideContentActionDetected(){
  hideNotificationContent();
}",0.5766423357664233
79789,"/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  int currentNotificationIdex=getCurrentNotificationIndex(mNotificationsContainer,description);
  mNotificationsContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=mNotificationsContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)mNotificationsContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(getResources(),nextNotification.getNotification().largeIcon));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    mNotificationView.setTranslationX(0);
    mNotificationView.animate().alpha(1f).start();
    mNotificationView.setTag(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      mNotificationClicker=new NotificationClicker(nextNotification,mPeek);
      mNotificationIcon.setOnClickListener(mNotificationClicker);
    }
    if (nextNotificationIndex == 0) {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    mPeek.updateNotificationTextAlpha(1);
    return true;
  }
  return false;
}","/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  int currentNotificationIdex=getCurrentNotificationIndex(mNotificationsContainer,description);
  mNotificationsContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=mNotificationsContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)mNotificationsContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(getResources(),nextNotification.getNotification().largeIcon));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    mNotificationView.setTranslationX(0);
    mNotificationView.animate().alpha(1f).start();
    mNotificationView.setTag(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      NotificationClicker mNotificationClicker=new NotificationClicker(nextNotification,mPeek);
      mNotificationIcon.setOnClickListener(mNotificationClicker);
    }
    if (nextNotificationIndex == 0) {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    mPeek.updateNotificationTextAlpha(1);
    return true;
  }
  return false;
}",0.9949974987493748
79790,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(ACTION_FINISH_PEEK)) {
    finish();
  }
 else   if (intent.getAction().equals(ACTION_DIMISS_NOTIFICATION)) {
    String description=intent.getStringExtra(EXTRA_NOTIFICATION_DESCRIPTION);
    if (!updateNotification(description)) {
      lockScreen();
    }
  }
 else   if (intent.getAction().equals(Intent.ACTION_TIME_TICK)) {
    mClockTextView.setText(getCurrentTimeText());
  }
 else   if (intent.getAction().equals(ACTION_UPDATE_NOTIFICATION_ICONS)) {
    updateNotificationIcons();
  }
 else   if (intent.getAction().equals(ACTION_SHOW_CONTENT)) {
    showNotificationContent();
  }
 else   if (intent.getAction().equals(ACTION_HIDE_CONTENT)) {
    hideNotificationContent();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(ACTION_FINISH_PEEK)) {
    finish();
  }
 else   if (intent.getAction().equals(ACTION_DIMISS_NOTIFICATION)) {
    String description=intent.getStringExtra(EXTRA_NOTIFICATION_DESCRIPTION);
    if (!updateNotification(description)) {
      lockScreen();
    }
  }
 else   if (intent.getAction().equals(Intent.ACTION_TIME_TICK)) {
    mClockTextView.setText(getCurrentTimeText());
  }
 else   if (intent.getAction().equals(ACTION_UPDATE_NOTIFICATION_ICONS)) {
    updateNotificationIcons();
  }
 else   if (intent.getAction().equals(ACTION_SHOW_CONTENT)) {
    hidePeekComponents();
  }
 else   if (intent.getAction().equals(ACTION_HIDE_CONTENT)) {
    showPeekComponents();
  }
}",0.8560411311053985
79791,"private static View createContentLayout(Context context,StatusBarNotification n){
  LayoutInflater inflater=LayoutInflater.from(context);
  View rootLayout=inflater.inflate(R.layout.content_layout,null);
  ImageView contactImageView=(ImageView)rootLayout.findViewById(R.id.contact_image);
  contactImageView.setImageDrawable(getNotificationContactImage(context,n));
  TextView contentTextView=(TextView)rootLayout.findViewById(R.id.content_text);
  TextView contentTitleView=(TextView)rootLayout.findViewById(R.id.title_text);
  String content=NotificationHelper.getNotificationContent(n);
  String title=NotificationHelper.getNotificationTitle(n);
  if (!content.startsWith(NotificationHelper.getNotificationTitle(n))) {
    contentTitleView.setText(title);
  }
  contentTextView.setText(content);
  if (contactImageView.getDrawable() == null) {
    int padding=context.getResources().getDimensionPixelSize(R.dimen.content_text_paddings);
    contentTextView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contentTitleView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contactImageView.setVisibility(View.GONE);
  }
  return rootLayout;
}","private static View createContentLayout(Context context,StatusBarNotification n){
  LayoutInflater inflater=LayoutInflater.from(context);
  View rootLayout=inflater.inflate(R.layout.content_layout,null);
  ImageView contactImageView=(ImageView)rootLayout.findViewById(R.id.contact_image);
  contactImageView.setImageDrawable(getNotificationContactImage(context,n));
  TextView contentTextView=(TextView)rootLayout.findViewById(R.id.content_text);
  TextView contentTitleView=(TextView)rootLayout.findViewById(R.id.title_text);
  String content=NotificationHelper.getNotificationContent(n);
  String title=NotificationHelper.getNotificationTitle(n);
  if (!content.startsWith(NotificationHelper.getNotificationTitle(n))) {
    contentTitleView.setText(title);
  }
 else {
    contentTextView.setVisibility(View.GONE);
  }
  contentTextView.setText(content);
  if (contactImageView.getDrawable() == null) {
    int padding=context.getResources().getDimensionPixelSize(R.dimen.content_text_paddings);
    contentTextView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contentTitleView.setPadding(padding,contentTextView.getPaddingTop(),padding,contentTextView.getPaddingBottom());
    contactImageView.setVisibility(View.GONE);
  }
  return rootLayout;
}",0.6494117647058824
79792,"public boolean onTouchEvent(MotionEvent ev){
  if (mLongPressSent) {
    return true;
  }
  if (!mDragging) {
    removeLongPressCallback();
    return false;
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_OUTSIDE:
case MotionEvent.ACTION_MOVE:
    if (mCurrView != null) {
      float delta=getPos(ev) - mInitialTouchPos;
      if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
        float size=getSize(mCurrAnimView);
        float maxScrollDistance=0.15f * size;
        if (Math.abs(delta) >= size) {
          delta=delta > 0 ? maxScrollDistance : -maxScrollDistance;
        }
 else {
          delta=maxScrollDistance * (float)Math.sin((delta / size) * (Math.PI / 2));
        }
      }
      setTranslation(mCurrAnimView,delta);
      updateAlphaFromOffset(mCurrAnimView,mCanCurrViewBeDimissed);
    }
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mCurrView != null) {
  float maxVelocity=MAX_DISMISS_VELOCITY * mDensityScale;
  mVelocityTracker.computeCurrentVelocity(1000,maxVelocity);
  float escapeVelocity=SWIPE_ESCAPE_VELOCITY * mDensityScale;
  float velocity=getVelocity(mVelocityTracker);
  float perpendicularVelocity=getPerpendicularVelocity(mVelocityTracker);
  boolean childSwipedFarEnough=DISMISS_IF_SWIPED_FAR_ENOUGH && Math.abs(getTranslation(mCurrAnimView)) > 0.4 * getSize(mCurrAnimView);
  boolean childSwipedFastEnough=(Math.abs(velocity) > escapeVelocity) && (Math.abs(velocity) > Math.abs(perpendicularVelocity)) && (velocity > 0) == (getTranslation(mCurrAnimView) > 0);
  boolean dismissChild=mCallback.canChildBeDismissed(mCurrView) && (childSwipedFastEnough || childSwipedFarEnough);
  if (dismissChild) {
    dismissChild(mCurrView,childSwipedFastEnough ? velocity : 0f);
  }
 else {
    mCallback.onDragCancelled(mCurrView);
    snapChild(mCurrView,velocity);
  }
}
break;
}
return true;
}","public boolean onTouchEvent(MotionEvent ev){
  if (mLongPressSent) {
    return true;
  }
  if (!mDragging) {
    removeLongPressCallback();
    removeShowContentCallback();
    return false;
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_OUTSIDE:
case MotionEvent.ACTION_MOVE:
    if (mCurrView != null) {
      float delta=getPos(ev) - mInitialTouchPos;
      if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
        float size=getSize(mCurrAnimView);
        float maxScrollDistance=0.15f * size;
        if (Math.abs(delta) >= size) {
          delta=delta > 0 ? maxScrollDistance : -maxScrollDistance;
        }
 else {
          delta=maxScrollDistance * (float)Math.sin((delta / size) * (Math.PI / 2));
        }
      }
      setTranslation(mCurrAnimView,delta);
      updateAlphaFromOffset(mCurrAnimView,mCanCurrViewBeDimissed);
    }
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mCurrView != null) {
  float maxVelocity=MAX_DISMISS_VELOCITY * mDensityScale;
  mVelocityTracker.computeCurrentVelocity(1000,maxVelocity);
  float escapeVelocity=SWIPE_ESCAPE_VELOCITY * mDensityScale;
  float velocity=getVelocity(mVelocityTracker);
  float perpendicularVelocity=getPerpendicularVelocity(mVelocityTracker);
  boolean childSwipedFarEnough=DISMISS_IF_SWIPED_FAR_ENOUGH && Math.abs(getTranslation(mCurrAnimView)) > 0.4 * getSize(mCurrAnimView);
  boolean childSwipedFastEnough=(Math.abs(velocity) > escapeVelocity) && (Math.abs(velocity) > Math.abs(perpendicularVelocity)) && (velocity > 0) == (getTranslation(mCurrAnimView) > 0);
  boolean dismissChild=mCallback.canChildBeDismissed(mCurrView) && (childSwipedFastEnough || childSwipedFarEnough);
  if (dismissChild) {
    dismissChild(mCurrView,childSwipedFastEnough ? velocity : 0f);
  }
 else {
    mCallback.onDragCancelled(mCurrView);
    snapChild(mCurrView,velocity);
  }
}
break;
}
return true;
}",0.9915708812260536
79793,"public void removeShowContentCallback(){
  if (mShowContentRunnable != null) {
    mHandler.removeCallbacks(mShowContentRunnable);
    mShowContentRunnable=null;
    mCallback.onHideContentActionDetected();
  }
}","public void removeShowContentCallback(){
  if (mShowContentRunnable != null) {
    mHandler.removeCallbacks(mShowContentRunnable);
    mShowContentRunnable=null;
  }
  mCallback.onHideContentActionDetected();
}",0.985781990521327
79794,"public void removeNotification(StatusBarNotification notification){
  mNotifications.remove(notification.getPackageName());
  if (NotificationHelper.getContentDescription(notification).equals(NotificationHelper.getContentDescription(mCurrentNotification))) {
    mCurrentNotification=null;
  }
}","public void removeNotification(StatusBarNotification notification){
  mNotifications.remove(notification.getPackageName());
  if (NotificationHelper.getContentDescription(notification).equals(NotificationHelper.getContentDescription(mCurrentNotification))) {
    if (mNotifications.size() > 0) {
      mCurrentNotification=getNextNotification();
    }
 else {
      mCurrentNotification=null;
    }
  }
}",0.8326180257510729
79795,"@Override public void onNotificationPosted(StatusBarNotification sbn){
  Log.i(TAG,sbn.getPackageName() + ""String_Node_Str"" + sbn.getNotification().tickerText);
  Notification postedNotification=sbn.getNotification();
  if (postedNotification.tickerText == null || sbn.isOngoing() || !sbn.isClearable() || isInBlackList(sbn)) {
    return;
  }
  if (mAppList.isInQuietHour(sbn.getPostTime())) {
    mNotificationPeek.unregisterEventListeners();
    return;
  }
  mNotificationHub.addNotification(sbn);
  if (AccessChecker.isDeviceAdminEnabled(this)) {
    mNotificationPeek.showNotification(sbn,false,mPeekTimeoutMultiplier,mSensorTimeoutMultiplier,mShowContent);
  }
}","@Override public void onNotificationPosted(StatusBarNotification sbn){
  Notification postedNotification=sbn.getNotification();
  if (postedNotification.tickerText == null || sbn.isOngoing() || !sbn.isClearable() || isInBlackList(sbn)) {
    return;
  }
  if (mAppList.isInQuietHour(sbn.getPostTime())) {
    mNotificationPeek.unregisterEventListeners();
    return;
  }
  mNotificationHub.addNotification(sbn);
  if (AccessChecker.isDeviceAdminEnabled(this)) {
    mNotificationPeek.showNotification(sbn,false,mPeekTimeoutMultiplier,mSensorTimeoutMultiplier,mShowContent);
  }
}",0.9278846153846154
79796,"/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  int currentNotificationIdex=getCurrentNotificationIndex(mNotificationsContainer,description);
  mNotificationsContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=mNotificationsContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)mNotificationsContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(getResources(),nextNotification.getNotification().largeIcon));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    mNotificationView.setTranslationX(0);
    mNotificationView.animate().alpha(1f).start();
    mNotificationView.setTag(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      NotificationClicker mNotificationClicker=new NotificationClicker(nextNotification,mPeek);
      mNotificationIcon.setOnClickListener(mNotificationClicker);
    }
    if (nextNotificationIndex == 0) {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    mPeek.updateNotificationTextAlpha(1);
    return true;
  }
  return false;
}","/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  int currentNotificationIdex=getCurrentNotificationIndex(mNotificationsContainer,description);
  mNotificationsContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=mNotificationsContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)mNotificationsContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(getResources(),nextNotification.getNotification().largeIcon));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    mNotificationView.setTranslationX(0);
    mNotificationView.animate().alpha(1f).start();
    mNotificationView.setTag(nextNotification);
    mPeek.getNotificationHub().setCurrentNotification(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      NotificationClicker mNotificationClicker=new NotificationClicker(nextNotification,mPeek);
      mNotificationIcon.setOnClickListener(mNotificationClicker);
    }
    if (nextNotificationIndex == 0) {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    mPeek.updateNotificationTextAlpha(1);
    return true;
  }
  return false;
}",0.9821559520899537
79797,"/** 
 * Update background ImageView to display proper background according to user preference.
 */
public void updateBackgroundImageView(){
  boolean used=mWallpaperFactory.isWallpaperThemeSelected() && !WallpaperFactory.isLiveWallpaperUsed(mContext);
  if (mPeekBackgroundImageView == null) {
    mPeekBackgroundImageView=new ImageView(mContext);
    ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
    mPeekBackgroundImageView.setLayoutParams(params);
    mPeekBackgroundImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
  }
  if (used) {
    mPeekBackgroundImageView.setImageBitmap(mWallpaperFactory.getPrefSystemWallpaper());
    if (!isBackgroundImageViewAdded()) {
      sPeekView.addView(mPeekBackgroundImageView,0);
    }
  }
 else {
    if (isBackgroundImageViewAdded()) {
      sPeekView.removeViewAt(0);
    }
  }
}","/** 
 * Update background ImageView to display proper background according to user preference.
 */
public void updateBackgroundImageView(){
  boolean used=WallpaperFactory.isWallpaperThemeSelected(mContext) && !WallpaperFactory.isLiveWallpaperUsed(mContext);
  if (mPeekBackgroundImageView == null) {
    mPeekBackgroundImageView=new ImageView(mContext);
    ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
    mPeekBackgroundImageView.setLayoutParams(params);
    mPeekBackgroundImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
  }
  if (used) {
    mPeekBackgroundImageView.setImageBitmap(mWallpaperFactory.getPrefSystemWallpaper());
    if (!isBackgroundImageViewAdded()) {
      sPeekView.addView(mPeekBackgroundImageView,0);
    }
  }
 else {
    if (isBackgroundImageViewAdded()) {
      sPeekView.removeViewAt(0);
    }
  }
}",0.99510603588907
79798,"@Override protected void onCreate(Bundle savedInstanceState){
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  if (WallpaperFactory.isLiveWallpaperUsed(this)) {
    setTheme(R.style.AppTheme_Peek_Wallpaper);
  }
 else {
    setTheme(R.style.AppTheme_Peek);
  }
  super.onCreate(savedInstanceState);
  mPeekView=NotificationPeek.sPeekView;
  mNotificationsContainer=(GridLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_CONTAINER_ID);
  mNotificationView=mPeekView.findViewById(NotificationPeek.NOTIFICATION_VIEW_ID);
  setContentView(mPeekView);
  boolean showClock=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferenceKeys.PREF_CLOCK,true);
  if (showClock) {
    mClockTextView=(TextView)PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CLOCK);
    mPeekView.addView(mClockTextView);
    mClockTextView.setText(getCurrentTimeText());
  }
  mPeekView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  initReceiver();
  NotificationLayout notificationView=(NotificationLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_LAYOUT_ID);
  mPeek=notificationView.getNotificationPeek();
}","@Override protected void onCreate(Bundle savedInstanceState){
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  if (WallpaperFactory.isLiveWallpaperUsed(this) && WallpaperFactory.isWallpaperThemeSelected(this)) {
    setTheme(R.style.AppTheme_Peek_Wallpaper);
  }
 else {
    setTheme(R.style.AppTheme_Peek);
  }
  super.onCreate(savedInstanceState);
  mPeekView=NotificationPeek.sPeekView;
  mNotificationsContainer=(GridLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_CONTAINER_ID);
  mNotificationView=mPeekView.findViewById(NotificationPeek.NOTIFICATION_VIEW_ID);
  setContentView(mPeekView);
  boolean showClock=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferenceKeys.PREF_CLOCK,true);
  if (showClock) {
    mClockTextView=(TextView)PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CLOCK);
    mPeekView.addView(mClockTextView);
    mClockTextView.setText(getCurrentTimeText());
  }
  mPeekView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  initReceiver();
  NotificationLayout notificationView=(NotificationLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_LAYOUT_ID);
  mPeek=notificationView.getNotificationPeek();
}",0.9818569903948772
79799,"/** 
 * Create a new   {@link android.graphics.drawable.TransitionDrawable} object with correct orderof Drawables based on user selection.
 * @return TransitionDrawable object created.
 */
private TransitionDrawable initPreviewBackgroundDrawable(){
  boolean isWallpaperSelected=mWallpaperFactory.isWallpaperThemeSelected();
  Drawable black=new ColorDrawable(Color.BLACK);
  Drawable wallpaper=mUseLiveWallpaper ? new ColorDrawable(Color.TRANSPARENT) : new BitmapDrawable(getResources(),mWallpaperFactory.getPrefSystemWallpaper());
  mChangeDrawables=!isWallpaperSelected ? new Drawable[]{black,wallpaper} : new Drawable[]{wallpaper,black};
  mBlackDrawableIndex=!isWallpaperSelected ? 0 : 1;
  return new TransitionDrawable(mChangeDrawables);
}","/** 
 * Create a new   {@link android.graphics.drawable.TransitionDrawable} object with correct orderof Drawables based on user selection.
 * @return TransitionDrawable object created.
 */
private TransitionDrawable initPreviewBackgroundDrawable(){
  boolean isWallpaperSelected=WallpaperFactory.isWallpaperThemeSelected(getActivity());
  Drawable black=new ColorDrawable(Color.BLACK);
  Drawable wallpaper=mUseLiveWallpaper ? new ColorDrawable(Color.TRANSPARENT) : new BitmapDrawable(getResources(),mWallpaperFactory.getPrefSystemWallpaper());
  mChangeDrawables=!isWallpaperSelected ? new Drawable[]{black,wallpaper} : new Drawable[]{wallpaper,black};
  mBlackDrawableIndex=!isWallpaperSelected ? 0 : 1;
  return new TransitionDrawable(mChangeDrawables);
}",0.990691489361702
79800,"/** 
 * Update layout components (SeekBar, TextView, ImageView) according to the new preference.
 * @param manual If the update is from user or from the initialization.
 */
private void updateLayouts(boolean manual){
  if (!mWallpaperFactory.isWallpaperThemeSelected()) {
    if (!manual) {
      mBackgroundSpinner.setSelection(0);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(false);
    mDimSeek.setEnabled(false);
    mRadiusText.setEnabled(false);
    mDimText.setEnabled(false);
  }
 else {
    if (!manual) {
      mBackgroundSpinner.setSelection(1);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(true && !mUseLiveWallpaper);
    mDimSeek.setEnabled(true && !mUseLiveWallpaper);
    mRadiusText.setEnabled(true && !mUseLiveWallpaper);
    mDimText.setEnabled(true && !mUseLiveWallpaper);
  }
}","/** 
 * Update layout components (SeekBar, TextView, ImageView) according to the new preference.
 * @param manual If the update is from user or from the initialization.
 */
private void updateLayouts(boolean manual){
  if (!WallpaperFactory.isWallpaperThemeSelected(getActivity())) {
    if (!manual) {
      mBackgroundSpinner.setSelection(0);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(false);
    mDimSeek.setEnabled(false);
    mRadiusText.setEnabled(false);
    mDimText.setEnabled(false);
  }
 else {
    if (!manual) {
      mBackgroundSpinner.setSelection(1);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(true && !mUseLiveWallpaper);
    mDimSeek.setEnabled(true && !mUseLiveWallpaper);
    mRadiusText.setEnabled(true && !mUseLiveWallpaper);
    mDimText.setEnabled(true && !mUseLiveWallpaper);
  }
}",0.9926701570680628
79801,"@Override public void run(){
  if (mAdjusted) {
    mAdjusted=false;
    mChangeDrawables[1]=mChangeDrawables[mBlackDrawableIndex];
    mChangeDrawables[0]=mAdjustDrawables[1];
    mPreviewImageDrawable=new TransitionDrawable(mChangeDrawables);
  }
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  updateLayouts(true);
}","@Override public void run(){
  if (mAdjusted) {
    mAdjusted=false;
    mChangeDrawables[1]=mChangeDrawables[mBlackDrawableIndex];
    mChangeDrawables[0]=mAdjustDrawables[1];
    mPreviewImageDrawable=new TransitionDrawable(mChangeDrawables);
    mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  }
  updateLayouts(true);
}",0.8149253731343283
79802,"/** 
 * Check if user selected system wallpaper as Peek background.
 * @return True if system wallpaper is selected, false otherwise.
 */
public boolean isWallpaperThemeSelected(){
  return PreferenceManager.getDefaultSharedPreferences(mContext).getInt(PreferenceKeys.PREF_BACKGROUND,BACKGROUND_PURE_BLACK) == BACKGROUND_SYSTEM_WALLPAPER;
}","/** 
 * Check if user selected system wallpaper as Peek background.
 * @return True if system wallpaper is selected, false otherwise.
 */
public static boolean isWallpaperThemeSelected(Context context){
  return PreferenceManager.getDefaultSharedPreferences(context).getInt(PreferenceKeys.PREF_BACKGROUND,BACKGROUND_PURE_BLACK) == BACKGROUND_SYSTEM_WALLPAPER;
}",0.9643366619115548
79803,"public static boolean isLiveWallpaperUsed(Context context){
  return WallpaperManager.getInstance(context).getWallpaperInfo() != null;
}","/** 
 * Check if live wallpaper is used.
 * @param context   Context object.
 * @return          True if live wallpaper is used, false otherwise.
 */
public static boolean isLiveWallpaperUsed(Context context){
  return WallpaperManager.getInstance(context).getWallpaperInfo() != null;
}",0.6445497630331753
79804,"public void snapChild(final View view,float velocity){
  final View animView=mCallback.getChildContentView(view);
  final boolean canAnimViewBeDismissed=mCallback.canChildBeDismissed(animView);
  ObjectAnimator anim=createTranslationAnimation(animView,0);
  int duration=SNAP_ANIM_LEN;
  anim.setDuration(duration);
  anim.addUpdateListener(new AnimatorUpdateListener(){
    public void onAnimationUpdate(    ValueAnimator animation){
      updateAlphaFromOffset(animView,canAnimViewBeDismissed);
    }
  }
);
  anim.addListener(new AnimatorListenerAdapter(){
    public void onAnimationEnd(    Animator animator){
      updateAlphaFromOffset(animView,canAnimViewBeDismissed);
    }
  }
);
  anim.start();
}","public void snapChild(final View view,float velocity){
  final View animView=mCallback.getChildContentView(view);
  final boolean canAnimViewBeDismissed=mCallback.canChildBeDismissed(animView);
  ObjectAnimator anim=createTranslationAnimation(animView,0);
  anim.setInterpolator(new OvershootInterpolator(2.5f));
  int duration=SNAP_ANIM_LEN;
  anim.setDuration(duration);
  anim.addUpdateListener(new AnimatorUpdateListener(){
    public void onAnimationUpdate(    ValueAnimator animation){
      updateAlphaFromOffset(animView,canAnimViewBeDismissed);
    }
  }
);
  anim.addListener(new AnimatorListenerAdapter(){
    public void onAnimationEnd(    Animator animator){
      updateAlphaFromOffset(animView,canAnimViewBeDismissed);
    }
  }
);
  anim.start();
}",0.9612508497620668
79805,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mHandler=new Handler(Looper.getMainLooper());
  mWallpaperFactory=new WallpaperFactory(getActivity());
  mUseLiveWallpaper=WallpaperFactory.isLiveWallpaperUsed(getActivity());
  mPreviewImageDrawable=initPreviewBackgroundDrawable();
  View rootView=inflater.inflate(R.layout.appearance_fragment_layout,container,false);
  mBackgroundSpinner=(Spinner)rootView.findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<String>(getActivity(),R.layout.spinner_item_layout,R.id.text_view,getResources().getStringArray(R.array.background_pref_array));
  mBackgroundSpinner.setAdapter(spinnerAdapter);
  mBackgroundSpinner.setOnItemSelectedListener(this);
  mPreviewImageView=(ImageView)rootView.findViewById(R.id.preview_image_view);
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  mRadiusSeek=(SeekBar)rootView.findViewById(R.id.radius_seek);
  mDimSeek=(SeekBar)rootView.findViewById(R.id.dim_seek);
  mRadiusText=(TextView)rootView.findViewById(R.id.radius_text);
  mDimText=(TextView)rootView.findViewById(R.id.dim_text);
  initSeekBars();
  updateLayouts(false);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mHandler=new Handler(Looper.getMainLooper());
  mWallpaperFactory=new WallpaperFactory(getActivity());
  mUseLiveWallpaper=WallpaperFactory.isLiveWallpaperUsed(getActivity());
  mPreviewImageDrawable=initPreviewBackgroundDrawable();
  mPreviewImageDrawable.setCrossFadeEnabled(true);
  View rootView=inflater.inflate(R.layout.appearance_fragment_layout,container,false);
  mBackgroundSpinner=(Spinner)rootView.findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<String>(getActivity(),R.layout.spinner_item_layout,R.id.text_view,getResources().getStringArray(R.array.background_pref_array));
  mBackgroundSpinner.setAdapter(spinnerAdapter);
  mBackgroundSpinner.setOnItemSelectedListener(this);
  mPreviewImageView=(ImageView)rootView.findViewById(R.id.preview_image_view);
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  mRadiusSeek=(SeekBar)rootView.findViewById(R.id.radius_seek);
  mDimSeek=(SeekBar)rootView.findViewById(R.id.dim_seek);
  mRadiusText=(TextView)rootView.findViewById(R.id.radius_text);
  mDimText=(TextView)rootView.findViewById(R.id.dim_text);
  initSeekBars();
  updateLayouts(false);
  return rootView;
}",0.9797055312375648
79806,"private void updateSelection(StatusBarNotification n){
  String oldNotif=NotificationHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=NotificationHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(mNotificationIcon,b));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(mContext,n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(n,this);
      mNotificationIcon.setOnClickListener(listener);
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(mContext,n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification || mNotificationView.getX() != 0) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(NotificationHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}","private void updateSelection(StatusBarNotification n){
  String oldNotif=NotificationHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=NotificationHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(mContext.getResources(),b));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(mContext,n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(n,this);
      mNotificationIcon.setOnClickListener(listener);
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(mContext,n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification || mNotificationView.getX() != 0) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(NotificationHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}",0.9884638737097754
79807,"/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  ImageView notificationIcon=(ImageView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_ICON_ID);
  TextView notificationTextView=(TextView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_TEXT_ID);
  int currentNotificationIdex=getCurrentNotificationIndex(mNotificationsContainer,description);
  mNotificationsContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=mNotificationsContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)mNotificationsContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      notificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(notificationIcon,nextNotification.getNotification().largeIcon));
    }
 else {
      notificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    notificationTextView.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    mNotificationView.setTranslationX(0);
    mNotificationView.animate().alpha(1f).start();
    mNotificationView.setTag(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(nextNotification,mPeek);
      notificationIcon.setOnClickListener(listener);
    }
    if (nextNotificationIndex == 0) {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    mPeek.updateNotificationTextAlpha(1);
    return true;
  }
  return false;
}","/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  ImageView notificationIcon=(ImageView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_ICON_ID);
  TextView notificationTextView=(TextView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_TEXT_ID);
  int currentNotificationIdex=getCurrentNotificationIndex(mNotificationsContainer,description);
  mNotificationsContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=mNotificationsContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)mNotificationsContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      notificationIcon.setImageDrawable(NotificationPeekViewUtils.getRoundedShape(getResources(),nextNotification.getNotification().largeIcon));
    }
 else {
      notificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    notificationTextView.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    mNotificationView.setTranslationX(0);
    mNotificationView.animate().alpha(1f).start();
    mNotificationView.setTag(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(nextNotification,mPeek);
      notificationIcon.setOnClickListener(listener);
    }
    if (nextNotificationIndex == 0) {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      mNotificationsContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    mPeek.updateNotificationTextAlpha(1);
    return true;
  }
  return false;
}",0.9931849159472966
79808,"public static Drawable getRoundedShape(ImageView imageView,Bitmap scaleBitmapImage){
  final int shadowSize=imageView.getContext().getResources().getDimensionPixelSize(R.dimen.shadow_size);
  final int shadowColor=imageView.getContext().getResources().getColor(R.color.background_color);
  Drawable rounded=new RoundedAvatarDrawable(scaleBitmapImage,shadowSize,shadowColor);
  imageView.setLayerType(View.LAYER_TYPE_SOFTWARE,null);
  return rounded;
}","/** 
 * Get rounded icon from the Bitmap object, with shade. The shade will only be drawn if the Bitmap is larger than the ImageView's size.
 * @param resources         Resources object for getting size and color.
 * @param scaleBitmapImage  Source Bitmap.
 * @return                  Rounded BitmapDrawable with shade (if possible).
 */
public static Drawable getRoundedShape(Resources resources,Bitmap scaleBitmapImage){
  final int shadowSize=resources.getDimensionPixelSize(R.dimen.shadow_size);
  final int shadowColor=resources.getColor(R.color.background_color);
  int targetWidth=scaleBitmapImage.getWidth();
  int targetHeight=scaleBitmapImage.getHeight();
  Bitmap targetBitmap=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
  Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setDither(true);
  Paint shadowPaint=new Paint(paint);
  RectF rectF=new RectF(0,0,targetWidth,targetHeight);
  Canvas canvas=new Canvas(targetBitmap);
  final BitmapShader shader=new BitmapShader(scaleBitmapImage,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
  paint.setShader(shader);
  if (scaleBitmapImage.getWidth() > resources.getDimensionPixelSize(R.dimen.notification_icon_size)) {
    rectF.inset(shadowSize,shadowSize);
    shadowPaint.setShadowLayer(shadowSize,0f,0f,shadowColor);
    shadowPaint.setColor(Color.BLACK);
    canvas.drawOval(rectF,shadowPaint);
  }
  canvas.drawOval(rectF,paint);
  return new BitmapDrawable(resources,targetBitmap);
}",0.0630816959669079
79809,"/** 
 * Crop wallpaper to fit the Peek view.
 * @param original  Original Wallpaper bitmap.
 * @param width     Desired width.
 * @return          Cropped bitmap.
 */
private Bitmap cropBitmap(Bitmap original,int width){
  Bitmap cropped=Bitmap.createBitmap(original,0,0,width,original.getHeight());
  return cropped;
}","/** 
 * Crop wallpaper to fit the Peek view.
 * @param original  Original Wallpaper bitmap.
 * @param width     Desired width.
 * @return          Cropped bitmap.
 */
private Bitmap cropBitmap(Bitmap original,int width){
  if (width > original.getWidth()) {
    return original;
  }
  Bitmap cropped=Bitmap.createBitmap(original,0,0,width,original.getHeight());
  return cropped;
}",0.9114285714285716
79810,"private void updateSelection(StatusBarNotification n){
  String oldNotif=NotificationHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=NotificationHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageBitmap(NotificationPeekViewUtils.getRoundedShape(b));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(mContext,n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(contentIntent,n);
      mNotificationIcon.setOnClickListener(listener);
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(mContext,n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification || mNotificationView.getX() != 0) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(NotificationHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}","private void updateSelection(StatusBarNotification n){
  String oldNotif=NotificationHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=NotificationHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageBitmap(NotificationPeekViewUtils.getRoundedShape(b));
    }
 else {
      mNotificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(mContext,n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(n,this);
      mNotificationIcon.setOnClickListener(listener);
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(NotificationPeekViewUtils.getNotificationDisplayText(mContext,n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification || mNotificationView.getX() != 0) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(NotificationHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}",0.9941664108074916
79811,"@Override protected void onCreate(Bundle savedInstanceState){
  getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  super.onCreate(savedInstanceState);
  mPeekView=NotificationPeek.sPeekView;
  setContentView(mPeekView);
  boolean showClock=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferenceKeys.PREF_CLOCK,true);
  if (showClock) {
    mClockTextView=(TextView)PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CLOCK);
    mPeekView.addView(mClockTextView);
    mClockTextView.setText(getCurrentTimeText());
  }
  mPeekView.setAlpha(1f);
  mPeekView.setVisibility(View.VISIBLE);
  mPeekView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  initReceiver();
}","@Override protected void onCreate(Bundle savedInstanceState){
  getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
  super.onCreate(savedInstanceState);
  mPeekView=NotificationPeek.sPeekView;
  setContentView(mPeekView);
  boolean showClock=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(PreferenceKeys.PREF_CLOCK,true);
  if (showClock) {
    mClockTextView=(TextView)PeekLayoutFactory.createPeekLayout(this,PeekLayoutFactory.LAYOUT_TYPE_CLOCK);
    mPeekView.addView(mClockTextView);
    mClockTextView.setText(getCurrentTimeText());
  }
  mPeekView.setAlpha(1f);
  mPeekView.setVisibility(View.VISIBLE);
  mPeekView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  initReceiver();
  NotificationLayout notificationView=(NotificationLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_LAYOUT_ID);
  mPeek=notificationView.getNotificationPeek();
}",0.921523634694814
79812,"/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  GridLayout notificationContainer=(GridLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_CONTAINER_ID);
  ImageView notificationIcon=(ImageView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_ICON_ID);
  TextView notificationTextView=(TextView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_TEXT_ID);
  View notificationView=mPeekView.findViewById(NotificationPeek.NOTIFICATION_VIEW_ID);
  int currentNotificationIdex=getCurrentNotificationIndex(notificationContainer,description);
  notificationContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=notificationContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)notificationContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      notificationIcon.setImageBitmap(NotificationPeekViewUtils.getRoundedShape(nextNotification.getNotification().largeIcon));
    }
 else {
      notificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    notificationTextView.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    notificationView.setTranslationX(0);
    notificationView.animate().alpha(1f).start();
    notificationView.setTag(nextNotification);
    if (nextNotificationIndex == 0) {
      notificationContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      notificationContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    return true;
  }
  return false;
}","/** 
 * Update notification views upon each swipe, moving the next latest notification to 'Current Notification' spot, and remove it from the small icon container.
 * @param description Description of the StatusBarNotification we just swiped.
 * @return True if the update is successful, i.e there is more than one unread notification.False if the notification we just swipe away is the last unread notification.
 */
private boolean updateNotification(String description){
  GridLayout notificationContainer=(GridLayout)mPeekView.findViewById(NotificationPeek.NOTIFICATION_CONTAINER_ID);
  ImageView notificationIcon=(ImageView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_ICON_ID);
  TextView notificationTextView=(TextView)mPeekView.findViewById(NotificationPeek.NOTIFICATION_TEXT_ID);
  View notificationView=mPeekView.findViewById(NotificationPeek.NOTIFICATION_VIEW_ID);
  int currentNotificationIdex=getCurrentNotificationIndex(notificationContainer,description);
  notificationContainer.removeViewAt(currentNotificationIdex);
  int nextNotificationIndex=notificationContainer.getChildCount() - 1;
  if (nextNotificationIndex >= 0) {
    StatusBarNotification nextNotification=(StatusBarNotification)notificationContainer.getChildAt(nextNotificationIndex).getTag();
    if (nextNotification.getNotification().largeIcon != null) {
      notificationIcon.setImageBitmap(NotificationPeekViewUtils.getRoundedShape(nextNotification.getNotification().largeIcon));
    }
 else {
      notificationIcon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,nextNotification));
    }
    notificationTextView.setText(NotificationPeekViewUtils.getNotificationDisplayText(this,nextNotification));
    notificationView.setTranslationX(0);
    notificationView.animate().alpha(1f).start();
    notificationView.setTag(nextNotification);
    if (nextNotification.getNotification().contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(nextNotification,mPeek);
      notificationIcon.setOnClickListener(listener);
    }
    if (nextNotificationIndex == 0) {
      notificationContainer.getChildAt(nextNotificationIndex).setVisibility(View.GONE);
    }
 else {
      notificationContainer.getChildAt(nextNotificationIndex).setAlpha(1);
    }
    return true;
  }
  return false;
}",0.9508787742226228
79813,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(ACTION_DISMISS)) {
    finish();
  }
 else   if (intent.getAction().equals(ACTION_UPDATE_NOTIFICATION)) {
    String description=intent.getStringExtra(EXTRA_NOTIFICATION_DESCRIPTION);
    if (!updateNotification(description)) {
      DevicePolicyManager devicePolicyManager=(DevicePolicyManager)getSystemService(DEVICE_POLICY_SERVICE);
      devicePolicyManager.lockNow();
      finish();
    }
  }
 else   if (intent.getAction().equals(Intent.ACTION_TIME_TICK)) {
    mClockTextView.setText(getCurrentTimeText());
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(ACTION_DISMISS)) {
    finish();
  }
 else   if (intent.getAction().equals(ACTION_UPDATE_NOTIFICATION)) {
    String description=intent.getStringExtra(EXTRA_NOTIFICATION_DESCRIPTION);
    if (!updateNotification(description)) {
      lockScreen();
    }
  }
 else   if (intent.getAction().equals(Intent.ACTION_TIME_TICK)) {
    mClockTextView.setText(getCurrentTimeText());
  }
}",0.8597616865261228
79814,"private void registerNotificationActionReceiver(){
  mReceiver=new NotificationActionReceiver();
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(ACTION_DISMISS_NOTIFICATION);
  intentFilter.addAction(ACTION_PREFERENCE_CHANGED);
  registerReceiver(mReceiver,intentFilter);
}","private void registerNotificationActionReceiver(){
  mReceiver=new NotificationActionReceiver();
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(ACTION_DISMISS_NOTIFICATION);
  intentFilter.addAction(ACTION_PREFERENCE_CHANGED);
  intentFilter.addAction(Intent.ACTION_WALLPAPER_CHANGED);
  registerReceiver(mReceiver,intentFilter);
}",0.9099236641221374
79815,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(ACTION_DISMISS_NOTIFICATION)) {
    String packageName=intent.getStringExtra(EXTRA_PACKAGE_NAME);
    String tag=intent.getStringExtra(EXTRA_NOTIFICATION_TAG);
    int id=intent.getIntExtra(EXTRA_NOTIFICATION_ID,INVAID_ID);
    cancelNotification(packageName,tag,id);
  }
 else   if (action.equals(ACTION_PREFERENCE_CHANGED)) {
    String changedKey=intent.getStringExtra(PreferenceKeys.INTENT_ACTION_KEY);
    String newValue=intent.getStringExtra(PreferenceKeys.INTENT_ACTION_NEW_VALUE);
    if (changedKey.equals(PreferenceKeys.PREF_PEEK_TIMEOUT)) {
      mPeekTimeoutMultiplier=Integer.parseInt(newValue);
    }
 else     if (changedKey.equals(PreferenceKeys.PREF_SENSOR_TIMEOUT)) {
      mSensorTimeoutMultiplier=Integer.parseInt(newValue);
    }
 else     if (changedKey.equals(PreferenceKeys.PREF_ALWAYS_SHOW_CONTENT)) {
      mShowContent=Boolean.parseBoolean(newValue);
    }
 else     if (changedKey.equals(PreferenceKeys.PREF_BACKGROUND) || changedKey.equals(PreferenceKeys.PREF_DIM) || changedKey.equals(PreferenceKeys.PREF_RADIUS)) {
      mNotificationPeek.updateBackgroundImageView();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(ACTION_DISMISS_NOTIFICATION)) {
    String packageName=intent.getStringExtra(EXTRA_PACKAGE_NAME);
    String tag=intent.getStringExtra(EXTRA_NOTIFICATION_TAG);
    int id=intent.getIntExtra(EXTRA_NOTIFICATION_ID,INVAID_ID);
    cancelNotification(packageName,tag,id);
  }
 else   if (action.equals(ACTION_PREFERENCE_CHANGED)) {
    String changedKey=intent.getStringExtra(PreferenceKeys.INTENT_ACTION_KEY);
    String newValue=intent.getStringExtra(PreferenceKeys.INTENT_ACTION_NEW_VALUE);
    if (changedKey.equals(PreferenceKeys.PREF_PEEK_TIMEOUT)) {
      mPeekTimeoutMultiplier=Integer.parseInt(newValue);
    }
 else     if (changedKey.equals(PreferenceKeys.PREF_SENSOR_TIMEOUT)) {
      mSensorTimeoutMultiplier=Integer.parseInt(newValue);
    }
 else     if (changedKey.equals(PreferenceKeys.PREF_ALWAYS_SHOW_CONTENT)) {
      mShowContent=Boolean.parseBoolean(newValue);
    }
 else     if (changedKey.equals(PreferenceKeys.PREF_BACKGROUND) || changedKey.equals(PreferenceKeys.PREF_DIM) || changedKey.equals(PreferenceKeys.PREF_RADIUS)) {
      mNotificationPeek.updateBackgroundImageView();
    }
  }
 else   if (action.equals(Intent.ACTION_WALLPAPER_CHANGED)) {
    mNotificationPeek.updateBackgroundImageView();
  }
}",0.954633578906553
79816,"public NotificationPeek(NotificationHub notificationHub,Context context){
  mNotificationHub=notificationHub;
  mContext=context;
  mNotificationHelper=new NotificationHelper(context,this);
  mSensorHandler=new SensorActivityHandler(context,this);
  mHandler=new Handler(Looper.getMainLooper());
  mWakeLockHandler=new Handler();
  mSensorHandler.registerScreenReceiver();
  mPartialWakeLockRunnable=new Runnable(){
    @Override public void run(){
      if (mPartialWakeLock.isHeld()) {
        if (mEventsRegistered) {
          if (DEBUG) {
            Log.d(TAG,""String_Node_Str"");
          }
          tryUnregisterEventListeners();
          mEventsRegistered=false;
        }
        mPartialWakeLock.release();
      }
    }
  }
;
  mLockScreenRunnable=new Runnable(){
    @Override public void run(){
      if (mShowing) {
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"");
        }
        mDevicePolicyManager.lockNow();
        if (mScreenWakeLock.isHeld()) {
          mScreenWakeLock.release();
        }
      }
    }
  }
;
  mDevicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
  mKeyguardManager=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,getClass().getSimpleName() + ""String_Node_Str"");
  mScreenWakeLock=mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,getClass().getSimpleName() + ""String_Node_Str"");
  sPeekView=new RelativeLayout(context){
    @Override public boolean onInterceptTouchEvent(    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        if (action == MotionEvent.ACTION_DOWN) {
          mHandler.removeCallbacksAndMessages(null);
        }
      }
      if (action == MotionEvent.ACTION_UP) {
        scheduleTasks();
      }
      return super.onInterceptTouchEvent(event);
    }
  }
;
  sPeekView.setOnTouchListener(UnlockGesture.createTouchListener(mContext,new UnlockGesture.UnlockGestureCallback(){
    @Override public void onUnlocked(){
      dismissNotification();
    }
  }
));
  NotificationLayout rootView=new NotificationLayout(context);
  rootView.setOrientation(LinearLayout.VERTICAL);
  rootView.setNotificationPeek(NotificationPeek.this);
  rootView.setId(NOTIFICATION_LAYOUT_ID);
  sPeekView.addView(rootView);
  RelativeLayout.LayoutParams rootLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  rootLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  rootView.setLayoutParams(rootLayoutParams);
  mNotificationView=new LinearLayout(context);
  mNotificationView.setOrientation(LinearLayout.VERTICAL);
  mNotificationView.setId(NOTIFICATION_VIEW_ID);
  rootView.addView(mNotificationView);
  mNotificationIcon=new ImageView(context);
  mNotificationIcon.setId(NOTIFICATION_ICON_ID);
  mNotificationIcon.setScaleType(ImageView.ScaleType.CENTER_CROP);
  mNotificationIcon.setOnTouchListener(NotificationHelper.getHighlightTouchListener(Color.DKGRAY));
  mNotificationText=new TextView(context);
  mNotificationText.setId(NOTIFICATION_TEXT_ID);
  Typeface typeface=Typeface.create(""String_Node_Str"",Typeface.NORMAL);
  mNotificationText.setTypeface(typeface);
  mNotificationText.setGravity(Gravity.CENTER);
  mNotificationText.setEllipsize(TextUtils.TruncateAt.END);
  mNotificationText.setSingleLine(true);
  mNotificationText.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding),0,0);
  mNotificationView.addView(mNotificationIcon);
  rootView.addView(mNotificationText);
  int iconSize=mContext.getResources().getDimensionPixelSize(R.dimen.notification_icon_size);
  LinearLayout.LayoutParams linearLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationIcon.setLayoutParams(linearLayoutParams);
  linearLayoutParams=new LinearLayout.LayoutParams(mContext.getResources().getDimensionPixelSize(R.dimen.notification_text_width),LinearLayout.LayoutParams.WRAP_CONTENT);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationText.setLayoutParams(linearLayoutParams);
  mNotificationsContainer=new GridLayout(context){
    @Override public boolean onTouchEvent(    MotionEvent ev){
      int action=ev.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        StatusBarNotification n=getNotificationFromEvent(ev);
        if (n != null) {
          updateSelection(n);
        }
      }
      return true;
    }
  }
;
  mNotificationsContainer.setId(NOTIFICATION_CONTAINER_ID);
  mNotificationsContainer.setColumnCount(COL_NUM);
  mNotificationsContainer.setOrientation(LinearLayout.HORIZONTAL);
  mNotificationsContainer.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding) * 2,0,0);
  LayoutTransition transitioner=new LayoutTransition();
  transitioner.enableTransitionType(LayoutTransition.CHANGING);
  transitioner.disableTransitionType(LayoutTransition.DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.APPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_APPEARING);
  mNotificationsContainer.setLayoutTransition(transitioner);
  sPeekView.addView(mNotificationsContainer);
  RelativeLayout.LayoutParams notificationsLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  notificationsLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
  notificationsLayoutParams.addRule(RelativeLayout.BELOW,rootView.getId());
  mNotificationsContainer.setLayoutParams(notificationsLayoutParams);
  updateBackgroundImageView();
}","public NotificationPeek(NotificationHub notificationHub,Context context){
  mNotificationHub=notificationHub;
  mContext=context;
  mNotificationHelper=new NotificationHelper(context,this);
  mWallpaperFactory=new WallpaperFactory(context);
  mSensorHandler=new SensorActivityHandler(context,this);
  mHandler=new Handler(Looper.getMainLooper());
  mWakeLockHandler=new Handler();
  mSensorHandler.registerScreenReceiver();
  mPartialWakeLockRunnable=new Runnable(){
    @Override public void run(){
      if (mPartialWakeLock.isHeld()) {
        if (mEventsRegistered) {
          if (DEBUG) {
            Log.d(TAG,""String_Node_Str"");
          }
          tryUnregisterEventListeners();
          mEventsRegistered=false;
        }
        mPartialWakeLock.release();
      }
    }
  }
;
  mLockScreenRunnable=new Runnable(){
    @Override public void run(){
      if (mShowing) {
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"");
        }
        mDevicePolicyManager.lockNow();
        if (mScreenWakeLock.isHeld()) {
          mScreenWakeLock.release();
        }
      }
    }
  }
;
  mDevicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
  mKeyguardManager=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,getClass().getSimpleName() + ""String_Node_Str"");
  mScreenWakeLock=mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,getClass().getSimpleName() + ""String_Node_Str"");
  sPeekView=new RelativeLayout(context){
    @Override public boolean onInterceptTouchEvent(    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        if (action == MotionEvent.ACTION_DOWN) {
          mHandler.removeCallbacksAndMessages(null);
        }
      }
      if (action == MotionEvent.ACTION_UP) {
        scheduleTasks();
      }
      return super.onInterceptTouchEvent(event);
    }
  }
;
  sPeekView.setOnTouchListener(UnlockGesture.createTouchListener(mContext,new UnlockGesture.UnlockGestureCallback(){
    @Override public void onUnlocked(){
      dismissNotification();
    }
  }
));
  NotificationLayout rootView=new NotificationLayout(context);
  rootView.setOrientation(LinearLayout.VERTICAL);
  rootView.setNotificationPeek(NotificationPeek.this);
  rootView.setId(NOTIFICATION_LAYOUT_ID);
  sPeekView.addView(rootView);
  RelativeLayout.LayoutParams rootLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  rootLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  rootView.setLayoutParams(rootLayoutParams);
  mNotificationView=new LinearLayout(context);
  mNotificationView.setOrientation(LinearLayout.VERTICAL);
  mNotificationView.setId(NOTIFICATION_VIEW_ID);
  rootView.addView(mNotificationView);
  mNotificationIcon=new ImageView(context);
  mNotificationIcon.setId(NOTIFICATION_ICON_ID);
  mNotificationIcon.setScaleType(ImageView.ScaleType.CENTER_CROP);
  mNotificationIcon.setOnTouchListener(NotificationHelper.getHighlightTouchListener(Color.DKGRAY));
  mNotificationText=new TextView(context);
  mNotificationText.setId(NOTIFICATION_TEXT_ID);
  Typeface typeface=Typeface.create(""String_Node_Str"",Typeface.NORMAL);
  mNotificationText.setTypeface(typeface);
  mNotificationText.setGravity(Gravity.CENTER);
  mNotificationText.setEllipsize(TextUtils.TruncateAt.END);
  mNotificationText.setSingleLine(true);
  mNotificationText.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding),0,0);
  mNotificationView.addView(mNotificationIcon);
  rootView.addView(mNotificationText);
  int iconSize=mContext.getResources().getDimensionPixelSize(R.dimen.notification_icon_size);
  LinearLayout.LayoutParams linearLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationIcon.setLayoutParams(linearLayoutParams);
  linearLayoutParams=new LinearLayout.LayoutParams(mContext.getResources().getDimensionPixelSize(R.dimen.notification_text_width),LinearLayout.LayoutParams.WRAP_CONTENT);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationText.setLayoutParams(linearLayoutParams);
  mNotificationsContainer=new GridLayout(context){
    @Override public boolean onTouchEvent(    MotionEvent ev){
      int action=ev.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        StatusBarNotification n=getNotificationFromEvent(ev);
        if (n != null) {
          updateSelection(n);
        }
      }
      return true;
    }
  }
;
  mNotificationsContainer.setId(NOTIFICATION_CONTAINER_ID);
  mNotificationsContainer.setColumnCount(COL_NUM);
  mNotificationsContainer.setOrientation(LinearLayout.HORIZONTAL);
  mNotificationsContainer.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding) * 2,0,0);
  LayoutTransition transitioner=new LayoutTransition();
  transitioner.enableTransitionType(LayoutTransition.CHANGING);
  transitioner.disableTransitionType(LayoutTransition.DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.APPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_APPEARING);
  mNotificationsContainer.setLayoutTransition(transitioner);
  sPeekView.addView(mNotificationsContainer);
  RelativeLayout.LayoutParams notificationsLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  notificationsLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
  notificationsLayoutParams.addRule(RelativeLayout.BELOW,rootView.getId());
  mNotificationsContainer.setLayoutParams(notificationsLayoutParams);
  updateBackgroundImageView();
}",0.9958048860738667
79817,"/** 
 * Update background ImageView to display proper background according to user preference.
 */
public void updateBackgroundImageView(){
  boolean used=WallpaperFactory.isWallpaperThemeSelected(mContext);
  if (mPeekBackgroundImageView == null) {
    mPeekBackgroundImageView=new ImageView(mContext);
    ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
    mPeekBackgroundImageView.setLayoutParams(params);
    mPeekBackgroundImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
  }
  if (used) {
    mPeekBackgroundImageView.setImageBitmap(WallpaperFactory.getPrefSystemWallpaper(mContext));
    if (!isBackgroundImageViewAdded()) {
      sPeekView.addView(mPeekBackgroundImageView,0);
    }
  }
 else {
    if (isBackgroundImageViewAdded()) {
      sPeekView.removeViewAt(0);
    }
  }
}","/** 
 * Update background ImageView to display proper background according to user preference.
 */
public void updateBackgroundImageView(){
  boolean used=mWallpaperFactory.isWallpaperThemeSelected();
  if (mPeekBackgroundImageView == null) {
    mPeekBackgroundImageView=new ImageView(mContext);
    ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
    mPeekBackgroundImageView.setLayoutParams(params);
    mPeekBackgroundImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
  }
  if (used) {
    mPeekBackgroundImageView.setImageBitmap(mWallpaperFactory.getPrefSystemWallpaper());
    if (!isBackgroundImageViewAdded()) {
      sPeekView.addView(mPeekBackgroundImageView,0);
    }
  }
 else {
    if (isBackgroundImageViewAdded()) {
      sPeekView.removeViewAt(0);
    }
  }
}",0.9896788990825688
79818,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (mNothingSelected) {
    mNothingSelected=false;
    return;
  }
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (position == 0) {
    pref.edit().putInt(PreferenceKeys.PREF_BACKGROUND,WallpaperFactory.BACKGROUND_PURE_BLACK).apply();
  }
 else {
    pref.edit().putInt(PreferenceKeys.PREF_BACKGROUND,WallpaperFactory.BACKGROUND_SYSTEM_WALLPAPER).apply();
  }
  mHandler.postDelayed(mChangePreviewRunnable,300);
  Intent intent=new Intent(NotificationService.ACTION_PREFERENCE_CHANGED);
  intent.putExtra(PreferenceKeys.INTENT_ACTION_KEY,PreferenceKeys.PREF_BACKGROUND);
  getActivity().sendBroadcast(intent);
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  if (mNothingSelected) {
    mNothingSelected=false;
    return;
  }
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  if (position == 0) {
    pref.edit().putInt(PreferenceKeys.PREF_BACKGROUND,WallpaperFactory.BACKGROUND_PURE_BLACK).apply();
  }
 else {
    pref.edit().putInt(PreferenceKeys.PREF_BACKGROUND,WallpaperFactory.BACKGROUND_SYSTEM_WALLPAPER).apply();
  }
  mHandler.postDelayed(mChangePreviewRunnable,300);
}",0.848159509202454
79819,"/** 
 * Create a new   {@link android.graphics.drawable.TransitionDrawable} object with correct orderof Drawables based on user selection.
 * @return  TransitionDrawable object created.
 */
private TransitionDrawable initPreviewBackgroundDrawable(){
  Drawable[] drawables;
  boolean isWallpaperSelected=WallpaperFactory.isWallpaperThemeSelected(getActivity());
  Drawable black=new ColorDrawable(Color.BLACK);
  Drawable wallpaper=new BitmapDrawable(getResources(),WallpaperFactory.getPrefSystemWallpaper(getActivity()));
  drawables=!isWallpaperSelected ? new Drawable[]{black,wallpaper} : new Drawable[]{wallpaper,black};
  return new TransitionDrawable(drawables);
}","/** 
 * Create a new   {@link android.graphics.drawable.TransitionDrawable} object with correct orderof Drawables based on user selection.
 * @return TransitionDrawable object created.
 */
private TransitionDrawable initPreviewBackgroundDrawable(){
  Drawable[] drawables;
  boolean isWallpaperSelected=mWallpaperFactory.isWallpaperThemeSelected();
  Drawable black=new ColorDrawable(Color.BLACK);
  Drawable wallpaper=new BitmapDrawable(getResources(),mWallpaperFactory.getPrefSystemWallpaper());
  drawables=!isWallpaperSelected ? new Drawable[]{black,wallpaper} : new Drawable[]{wallpaper,black};
  return new TransitionDrawable(drawables);
}",0.9779467680608364
79820,"/** 
 * Seek Drawable index within TransitionDrawable object. We need to find the index of the drawable that is different from the parameter, which is the starting drawable of the TransitionDrawable.
 * @param T target drawable class.
 * @return  Index of the source drawable.
 */
private int getSourceDrawableIndex(Class T){
  if (mPreviewImageDrawable.getDrawable(0).getClass().equals(T) && mPreviewImageDrawable.getDrawable(1).getClass().equals(T)) {
    return 1;
  }
  return mPreviewImageDrawable.getDrawable(0).getClass().equals(T) ? 1 : 0;
}","/** 
 * Seek Drawable index within TransitionDrawable object. We need to find the index of the drawable that is different from the parameter, which is the starting drawable of the TransitionDrawable.
 * @param T target drawable class.
 * @return Index of the source drawable.
 */
private int getSourceDrawableIndex(Class T){
  if (mPreviewImageDrawable.getDrawable(0).getClass().equals(mPreviewImageDrawable.getDrawable(1).getClass())) {
    return 1;
  }
  return mPreviewImageDrawable.getDrawable(0).getClass().equals(T) ? 1 : 0;
}",0.9852125693160814
79821,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mHandler=new Handler(Looper.getMainLooper());
  mPreviewImageDrawable=initPreviewBackgroundDrawable();
  View rootView=inflater.inflate(R.layout.appearance_fragment_layout,container,false);
  mBackgroundSpinner=(Spinner)rootView.findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<String>(getActivity(),R.layout.spinner_item_layout,R.id.text_view,getResources().getStringArray(R.array.background_pref_array));
  mBackgroundSpinner.setAdapter(spinnerAdapter);
  mBackgroundSpinner.setOnItemSelectedListener(this);
  mPreviewImageView=(ImageView)rootView.findViewById(R.id.preview_image_view);
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  mRadiusSeek=(SeekBar)rootView.findViewById(R.id.radius_seek);
  mDimSeek=(SeekBar)rootView.findViewById(R.id.dim_seek);
  mRadiusText=(TextView)rootView.findViewById(R.id.radius_text);
  mDimText=(TextView)rootView.findViewById(R.id.dim_text);
  initSeekBars();
  updateLayouts(false);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  mHandler=new Handler(Looper.getMainLooper());
  mWallpaperFactory=new WallpaperFactory(getActivity());
  mPreviewImageDrawable=initPreviewBackgroundDrawable();
  View rootView=inflater.inflate(R.layout.appearance_fragment_layout,container,false);
  mBackgroundSpinner=(Spinner)rootView.findViewById(R.id.spinner);
  ArrayAdapter<String> spinnerAdapter=new ArrayAdapter<String>(getActivity(),R.layout.spinner_item_layout,R.id.text_view,getResources().getStringArray(R.array.background_pref_array));
  mBackgroundSpinner.setAdapter(spinnerAdapter);
  mBackgroundSpinner.setOnItemSelectedListener(this);
  mPreviewImageView=(ImageView)rootView.findViewById(R.id.preview_image_view);
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  mRadiusSeek=(SeekBar)rootView.findViewById(R.id.radius_seek);
  mDimSeek=(SeekBar)rootView.findViewById(R.id.dim_seek);
  mRadiusText=(TextView)rootView.findViewById(R.id.radius_text);
  mDimText=(TextView)rootView.findViewById(R.id.dim_text);
  initSeekBars();
  updateLayouts(false);
  return rootView;
}",0.9747675962815404
79822,"/** 
 * Update layout components (SeekBar, TextView, ImageView) according to the new preference.
 * @param manual    If the update is from user or from the initialization.
 */
private void updateLayouts(boolean manual){
  if (!WallpaperFactory.isWallpaperThemeSelected(getActivity())) {
    if (!manual) {
      mBackgroundSpinner.setSelection(0);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(false);
    mDimSeek.setEnabled(false);
    mRadiusText.setEnabled(false);
    mDimText.setEnabled(false);
  }
 else {
    if (!manual) {
      mBackgroundSpinner.setSelection(1);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(true);
    mDimSeek.setEnabled(true);
    mRadiusText.setEnabled(true);
    mDimText.setEnabled(true);
  }
}","/** 
 * Update layout components (SeekBar, TextView, ImageView) according to the new preference.
 * @param manual If the update is from user or from the initialization.
 */
private void updateLayouts(boolean manual){
  if (!mWallpaperFactory.isWallpaperThemeSelected()) {
    if (!manual) {
      mBackgroundSpinner.setSelection(0);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(false);
    mDimSeek.setEnabled(false);
    mRadiusText.setEnabled(false);
    mDimText.setEnabled(false);
  }
 else {
    if (!manual) {
      mBackgroundSpinner.setSelection(1);
    }
 else {
      mPreviewImageDrawable.reverseTransition(TRANSITION_ANIM_DURATION);
    }
    mRadiusSeek.setEnabled(true);
    mDimSeek.setEnabled(true);
    mRadiusText.setEnabled(true);
    mDimText.setEnabled(true);
  }
}",0.9902130109383996
79823,"@Override public void run(){
  Drawable[] previewDrawables=new Drawable[2];
  previewDrawables[1]=WallpaperFactory.isWallpaperThemeSelected(getActivity()) ? new BitmapDrawable(getResources(),WallpaperFactory.getPrefSystemWallpaper(getActivity())) : new ColorDrawable(Color.BLACK);
  previewDrawables[0]=mPreviewImageDrawable.getDrawable(getSourceDrawableIndex(previewDrawables[1].getClass()));
  mPreviewImageDrawable=new TransitionDrawable(previewDrawables);
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  updateLayouts(true);
}","@Override public void run(){
  Drawable[] previewDrawables=new Drawable[2];
  previewDrawables[1]=mWallpaperFactory.isWallpaperThemeSelected() ? new BitmapDrawable(getResources(),mWallpaperFactory.getPrefSystemWallpaper()) : new ColorDrawable(Color.BLACK);
  previewDrawables[0]=mPreviewImageDrawable.getDrawable(getSourceDrawableIndex(previewDrawables[1].getClass()));
  mPreviewImageDrawable=new TransitionDrawable(previewDrawables);
  mPreviewImageView.setImageDrawable(mPreviewImageDrawable);
  updateLayouts(true);
}",0.9136960600375236
79824,"private void initSeekBars(){
  mRadiusSeek.setMax(ImageBlurrer.MAX_SUPPORTED_BLUR_PIXELS * 10);
  mDimSeek.setMax(WallpaperFactory.DEFAULT_MAX_DIM);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());
  int radius=(int)(preferences.getFloat(PreferenceKeys.PREF_RADIUS,ImageBlurrer.MAX_SUPPORTED_BLUR_PIXELS) * 10);
  int dim=preferences.getInt(PreferenceKeys.PREF_DIM,WallpaperFactory.DEFAULT_MAX_DIM);
  mRadiusSeek.setProgress(radius);
  mDimSeek.setProgress(dim);
  mRadiusSeek.setOnSeekBarChangeListener(this);
  mDimSeek.setOnSeekBarChangeListener(this);
}","private void initSeekBars(){
  mRadiusSeek.setMax(ImageBlurrer.MAX_SUPPORTED_BLUR_PIXELS * 10);
  mDimSeek.setMax(WallpaperFactory.DEFAULT_MAX_DIM);
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(getActivity());
  int radius=(int)(preferences.getFloat(PreferenceKeys.PREF_RADIUS,ImageBlurrer.MAX_SUPPORTED_BLUR_PIXELS) * 10);
  int dim=preferences.getInt(PreferenceKeys.PREF_DIM,WallpaperFactory.DEFAULT_MAX_DIM);
  mRadiusSeek.setProgress(radius);
  mDimSeek.setProgress(255 - dim);
  mRadiusSeek.setOnSeekBarChangeListener(this);
  mDimSeek.setOnSeekBarChangeListener(this);
}",0.995049504950495
79825,"@Override public void onStopTrackingTouch(SeekBar seekBar){
  mHandler.postDelayed(mReloadPreviewRunnable,300);
  Intent intent=new Intent(NotificationService.ACTION_PREFERENCE_CHANGED);
  String intentActionKey=seekBar.getId() == R.id.radius_seek ? PreferenceKeys.PREF_RADIUS : PreferenceKeys.PREF_DIM;
  intent.putExtra(PreferenceKeys.INTENT_ACTION_KEY,intentActionKey);
  getActivity().sendBroadcast(intent);
}","@Override public void onStopTrackingTouch(SeekBar seekBar){
  mHandler.postDelayed(mReloadPreviewRunnable,300);
}",0.4296577946768061
79826,"/** 
 * Create a bitmap that is blurred and dimmed with the amount that user has selected.
 * @param context   Context object.
 * @return          Background bitmap.
 */
public static Bitmap getPrefSystemWallpaper(Context context){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  float radius=preferences.getFloat(PreferenceKeys.PREF_RADIUS,ImageBlurrer.MAX_SUPPORTED_BLUR_PIXELS);
  int dim=preferences.getInt(PreferenceKeys.PREF_DIM,DEFAULT_MAX_DIM);
  WallpaperManager wallpaperManager=WallpaperManager.getInstance(context);
  ImageBlurrer imageBlurrer=new ImageBlurrer(context);
  Bitmap blurred=imageBlurrer.blurBitmap(drawableToBitmap(wallpaperManager.getFastDrawable()),radius);
  Canvas c=new Canvas(blurred);
  c.drawColor(Color.argb(255 - dim,0,0,0));
  return blurred;
}","/** 
 * Create a bitmap that is blurred and dimmed with the amount that user has selected.
 * @return          Background bitmap.
 */
public Bitmap getPrefSystemWallpaper(){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mContext);
  float radius=preferences.getFloat(PreferenceKeys.PREF_RADIUS,ImageBlurrer.MAX_SUPPORTED_BLUR_PIXELS);
  int dim=preferences.getInt(PreferenceKeys.PREF_DIM,DEFAULT_MAX_DIM);
  ImageBlurrer imageBlurrer=new ImageBlurrer(mContext);
  Bitmap blurred=imageBlurrer.blurBitmap(drawableToBitmap(mWallpaperManager.getFastDrawable()),radius);
  Canvas c=new Canvas(blurred);
  c.drawColor(Color.argb(255 - dim,0,0,0));
  return blurred;
}",0.762532981530343
79827,"/** 
 * Convert drawable to bitmap.
 * @param drawable      Drawable object to be converted.
 * @return              converted bitmap.
 */
private static Bitmap drawableToBitmap(Drawable drawable){
  if (drawable instanceof BitmapDrawable) {
    return ((BitmapDrawable)drawable).getBitmap();
  }
  Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
  Canvas canvas=new Canvas(bitmap);
  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
  drawable.draw(canvas);
  return bitmap;
}","/** 
 * Convert drawable to bitmap.
 * @param drawable      Drawable object to be converted.
 * @return              converted bitmap.
 */
private Bitmap drawableToBitmap(Drawable drawable){
  if (drawable instanceof BitmapDrawable) {
    return ((BitmapDrawable)drawable).getBitmap();
  }
  Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);
  Canvas canvas=new Canvas(bitmap);
  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
  drawable.draw(canvas);
  return bitmap;
}",0.9937219730941704
79828,"/** 
 * Check if user selected system wallpaper as Peek background.
 * @param context   Context object.
 * @return          True if system wallpaper is selected, false otherwise.
 */
public static boolean isWallpaperThemeSelected(Context context){
  return PreferenceManager.getDefaultSharedPreferences(context).getInt(PreferenceKeys.PREF_BACKGROUND,BACKGROUND_PURE_BLACK) == BACKGROUND_SYSTEM_WALLPAPER;
}","/** 
 * Check if user selected system wallpaper as Peek background.
 * @return          True if system wallpaper is selected, false otherwise.
 */
public boolean isWallpaperThemeSelected(){
  return PreferenceManager.getDefaultSharedPreferences(mContext).getInt(PreferenceKeys.PREF_BACKGROUND,BACKGROUND_PURE_BLACK) == BACKGROUND_SYSTEM_WALLPAPER;
}",0.7178807947019867
79829,"/** 
 * Update small notification icons when there is new notification coming, and the Activity is in foreground.
 */
private void updateNotificationIcons(){
  if (mNotificationsContainer.getVisibility() != View.VISIBLE) {
    mNotificationsContainer.setVisibility(View.VISIBLE);
  }
  NotificationHub notificationHub=mPeek.getNotificationHub();
  int iconSize=getResources().getDimensionPixelSize(R.dimen.small_notification_icon_size);
  int padding=getResources().getDimensionPixelSize(R.dimen.small_notification_icon_padding);
  final StatusBarNotification n=notificationHub.getCurrentNotification();
  ImageView icon=new ImageView(this);
  icon.setAlpha(NotificationPeek.ICON_LOW_OPACITY);
  icon.setPadding(padding,0,padding,0);
  icon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,n));
  icon.setTag(n);
  int oldIndex=getOldIconViewIndex(notificationHub);
  if (oldIndex >= 0) {
    mNotificationsContainer.removeViewAt(oldIndex);
  }
  mNotificationsContainer.addView(icon);
  LinearLayout.LayoutParams linearLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  GridLayout.LayoutParams gridLayoutParams=new GridLayout.LayoutParams(linearLayoutParams);
  icon.setLayoutParams(gridLayoutParams);
}","/** 
 * Update small notification icons when there is new notification coming, and the Activity is in foreground.
 */
private void updateNotificationIcons(){
  if (mNotificationsContainer.getVisibility() != View.VISIBLE) {
    mNotificationsContainer.setVisibility(View.VISIBLE);
  }
  NotificationHub notificationHub=NotificationHub.getInstance();
  int iconSize=getResources().getDimensionPixelSize(R.dimen.small_notification_icon_size);
  int padding=getResources().getDimensionPixelSize(R.dimen.small_notification_icon_padding);
  final StatusBarNotification n=notificationHub.getCurrentNotification();
  ImageView icon=new ImageView(this);
  icon.setAlpha(NotificationPeek.ICON_LOW_OPACITY);
  icon.setPadding(padding,0,padding,0);
  icon.setImageDrawable(NotificationPeekViewUtils.getIconFromResource(this,n));
  icon.setTag(n);
  restoreFirstIconVisibility();
  int oldIndex=getOldIconViewIndex(notificationHub);
  if (oldIndex >= 0) {
    mNotificationsContainer.removeViewAt(oldIndex);
  }
  mNotificationsContainer.addView(icon);
  LinearLayout.LayoutParams linearLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  GridLayout.LayoutParams gridLayoutParams=new GridLayout.LayoutParams(linearLayoutParams);
  icon.setLayoutParams(gridLayoutParams);
}",0.9788760462335592
79830,"/** 
 * Check whether a notification with the same package name as the new notification is shown in the icon container.
 * @param hub   NotificationHub instance.
 * @return      Index of the icon ImageView in its parent. -1 if not found.
 */
private int getOldIconViewIndex(NotificationHub hub){
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    View child=mNotificationsContainer.getChildAt(i);
    if (child.getTag() == null) {
      continue;
    }
    StatusBarNotification n=(StatusBarNotification)child.getTag();
    if (n.getPackageName().equals(hub.getCurrentNotification().getPackageName())) {
      return i;
    }
  }
  return -1;
}","/** 
 * Check whether a notification with the same package name as the new notification is shown in the icon container.
 * @param hub NotificationHub instance.
 * @return Index of the icon ImageView in its parent. -1 if not found.
 */
private int getOldIconViewIndex(NotificationHub hub){
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    View child=mNotificationsContainer.getChildAt(i);
    if (child.getTag() == null) {
      continue;
    }
    StatusBarNotification n=(StatusBarNotification)child.getTag();
    if (n.getPackageName().equals(hub.getCurrentNotification().getPackageName())) {
      return i;
    }
  }
  return -1;
}",0.9947089947089948
79831,"public NotificationPeek(NotificationHub notificationHub,Context context){
  mNotificationHub=notificationHub;
  mContext=context;
  mSensorHandler=new SensorActivityHandler(context,this);
  mHandler=new Handler(Looper.getMainLooper());
  mWakeLockHandler=new Handler();
  mSensorHandler.registerScreenReceiver();
  mPartialWakeLockRunnable=new Runnable(){
    @Override public void run(){
      if (mPartialWakeLock.isHeld()) {
        if (mEventsRegistered) {
          if (DEBUG) {
            Log.d(TAG,""String_Node_Str"");
          }
          tryUnregisterEventListeners();
          mEventsRegistered=false;
        }
        mPartialWakeLock.release();
      }
    }
  }
;
  mLockScreenRunnable=new Runnable(){
    @Override public void run(){
      if (mShowing) {
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"");
        }
        mDevicePolicyManager.lockNow();
        if (mScreenWakeLock.isHeld()) {
          mScreenWakeLock.release();
        }
      }
    }
  }
;
  mDevicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
  mKeyguardManager=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,getClass().getSimpleName() + ""String_Node_Str"");
  mScreenWakeLock=mPowerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,getClass().getSimpleName() + ""String_Node_Str"");
  TelephonyManager telephonyManager=(TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
  telephonyManager.listen(new CallStateListener(),PhoneStateListener.LISTEN_CALL_STATE);
  mPeekView=new RelativeLayout(context){
    @Override public boolean onInterceptTouchEvent(    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        if (action == MotionEvent.ACTION_DOWN) {
          mHandler.removeCallbacksAndMessages(null);
        }
      }
      if (action == MotionEvent.ACTION_UP) {
        scheduleTasks();
      }
      return super.onInterceptTouchEvent(event);
    }
  }
;
  mPeekView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        dismissNotification();
      }
      return true;
    }
  }
);
  NotificationLayout rootView=new NotificationLayout(context);
  rootView.setOrientation(LinearLayout.VERTICAL);
  rootView.setNotificationPeek(NotificationPeek.this);
  mPeekView.addView(rootView);
  RelativeLayout.LayoutParams rootLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  rootLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  rootView.setLayoutParams(rootLayoutParams);
  mNotificationView=new LinearLayout(context);
  mNotificationView.setOrientation(LinearLayout.VERTICAL);
  rootView.addView(mNotificationView);
  mNotificationIcon=new ImageView(context);
  mNotificationIcon.setScaleType(ImageView.ScaleType.CENTER_CROP);
  mNotificationIcon.setOnTouchListener(PanelHelper.getHighlightTouchListener(Color.DKGRAY));
  mNotificationText=new TextView(context);
  Typeface textTypeface=Typeface.create(""String_Node_Str"",Typeface.NORMAL);
  mNotificationText.setTypeface(textTypeface);
  mNotificationText.setGravity(Gravity.CENTER);
  mNotificationText.setEllipsize(TextUtils.TruncateAt.END);
  mNotificationText.setSingleLine(true);
  mNotificationText.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding),0,0);
  mNotificationView.addView(mNotificationIcon);
  mNotificationView.addView(mNotificationText);
  int iconSize=mContext.getResources().getDimensionPixelSize(R.dimen.notification_icon_size);
  LinearLayout.LayoutParams linearLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationIcon.setLayoutParams(linearLayoutParams);
  linearLayoutParams=new LinearLayout.LayoutParams(mContext.getResources().getDimensionPixelSize(R.dimen.notification_text_width),LinearLayout.LayoutParams.WRAP_CONTENT);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationText.setLayoutParams(linearLayoutParams);
  mNotificationsContainer=new GridLayout(context){
    @Override public boolean onTouchEvent(    MotionEvent ev){
      int action=ev.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        StatusBarNotification n=getNotificationFromEvent(ev);
        if (n != null) {
          updateSelection(n);
        }
      }
      return true;
    }
  }
;
  mNotificationsContainer.setColumnCount(COL_NUM);
  mNotificationsContainer.setOrientation(LinearLayout.HORIZONTAL);
  mNotificationsContainer.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding) * 2,0,0);
  LayoutTransition transitioner=new LayoutTransition();
  transitioner.enableTransitionType(LayoutTransition.CHANGING);
  transitioner.disableTransitionType(LayoutTransition.DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.APPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_APPEARING);
  mNotificationsContainer.setLayoutTransition(transitioner);
  mPeekView.addView(mNotificationsContainer);
  RelativeLayout.LayoutParams notificationsLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  notificationsLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
  notificationsLayoutParams.addRule(RelativeLayout.BELOW,rootView.getId());
  mNotificationsContainer.setLayoutParams(notificationsLayoutParams);
}","public NotificationPeek(NotificationHub notificationHub,Context context){
  mNotificationHub=notificationHub;
  mContext=context;
  mSensorHandler=new SensorActivityHandler(context,this);
  mHandler=new Handler(Looper.getMainLooper());
  mWakeLockHandler=new Handler();
  mSensorHandler.registerScreenReceiver();
  mPartialWakeLockRunnable=new Runnable(){
    @Override public void run(){
      if (mPartialWakeLock.isHeld()) {
        if (mEventsRegistered) {
          if (DEBUG) {
            Log.d(TAG,""String_Node_Str"");
          }
          tryUnregisterEventListeners();
          mEventsRegistered=false;
        }
        mPartialWakeLock.release();
      }
    }
  }
;
  mLockScreenRunnable=new Runnable(){
    @Override public void run(){
      if (mShowing) {
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"");
        }
        mDevicePolicyManager.lockNow();
        if (mScreenWakeLock.isHeld()) {
          mScreenWakeLock.release();
        }
      }
    }
  }
;
  mDevicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
  mKeyguardManager=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);
  mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
  mPartialWakeLock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,getClass().getSimpleName() + ""String_Node_Str"");
  mScreenWakeLock=mPowerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,getClass().getSimpleName() + ""String_Node_Str"");
  TelephonyManager telephonyManager=(TelephonyManager)mContext.getSystemService(Context.TELEPHONY_SERVICE);
  telephonyManager.listen(new CallStateListener(),PhoneStateListener.LISTEN_CALL_STATE);
  mPeekView=new RelativeLayout(context){
    @Override public boolean onInterceptTouchEvent(    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        if (action == MotionEvent.ACTION_DOWN) {
          mHandler.removeCallbacksAndMessages(null);
        }
      }
      if (action == MotionEvent.ACTION_UP) {
        scheduleTasks();
      }
      return super.onInterceptTouchEvent(event);
    }
  }
;
  mPeekView.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_UP) {
        dismissNotification();
      }
      return true;
    }
  }
);
  NotificationLayout rootView=new NotificationLayout(context);
  rootView.setOrientation(LinearLayout.VERTICAL);
  rootView.setNotificationPeek(NotificationPeek.this);
  rootView.setId(1);
  mPeekView.addView(rootView);
  RelativeLayout.LayoutParams rootLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  rootLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT,RelativeLayout.TRUE);
  rootView.setLayoutParams(rootLayoutParams);
  mNotificationView=new LinearLayout(context);
  mNotificationView.setOrientation(LinearLayout.VERTICAL);
  rootView.addView(mNotificationView);
  mNotificationIcon=new ImageView(context);
  mNotificationIcon.setScaleType(ImageView.ScaleType.CENTER_CROP);
  mNotificationIcon.setOnTouchListener(PanelHelper.getHighlightTouchListener(Color.DKGRAY));
  mNotificationText=new TextView(context);
  Typeface textTypeface=Typeface.create(""String_Node_Str"",Typeface.NORMAL);
  mNotificationText.setTypeface(textTypeface);
  mNotificationText.setGravity(Gravity.CENTER);
  mNotificationText.setEllipsize(TextUtils.TruncateAt.END);
  mNotificationText.setSingleLine(true);
  mNotificationText.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding),0,0);
  mNotificationView.addView(mNotificationIcon);
  mNotificationView.addView(mNotificationText);
  int iconSize=mContext.getResources().getDimensionPixelSize(R.dimen.notification_icon_size);
  LinearLayout.LayoutParams linearLayoutParams=new LinearLayout.LayoutParams(iconSize,iconSize);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationIcon.setLayoutParams(linearLayoutParams);
  linearLayoutParams=new LinearLayout.LayoutParams(mContext.getResources().getDimensionPixelSize(R.dimen.notification_text_width),LinearLayout.LayoutParams.WRAP_CONTENT);
  linearLayoutParams.gravity=Gravity.CENTER_HORIZONTAL;
  mNotificationText.setLayoutParams(linearLayoutParams);
  mNotificationsContainer=new GridLayout(context){
    @Override public boolean onTouchEvent(    MotionEvent ev){
      int action=ev.getAction();
      if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_MOVE) {
        StatusBarNotification n=getNotificationFromEvent(ev);
        if (n != null) {
          updateSelection(n);
        }
      }
      return true;
    }
  }
;
  mNotificationsContainer.setColumnCount(COL_NUM);
  mNotificationsContainer.setOrientation(LinearLayout.HORIZONTAL);
  mNotificationsContainer.setPadding(0,mContext.getResources().getDimensionPixelSize(R.dimen.item_padding) * 2,0,0);
  LayoutTransition transitioner=new LayoutTransition();
  transitioner.enableTransitionType(LayoutTransition.CHANGING);
  transitioner.disableTransitionType(LayoutTransition.DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.APPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_DISAPPEARING);
  transitioner.disableTransitionType(LayoutTransition.CHANGE_APPEARING);
  mNotificationsContainer.setLayoutTransition(transitioner);
  mPeekView.addView(mNotificationsContainer);
  RelativeLayout.LayoutParams notificationsLayoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  notificationsLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
  notificationsLayoutParams.addRule(RelativeLayout.BELOW,rootView.getId());
  mNotificationsContainer.setLayoutParams(notificationsLayoutParams);
}",0.998245760588088
79832,"private void updateSelection(StatusBarNotification n){
  if (mShowing) {
    return;
  }
  String oldNotif=PanelHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=PanelHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageBitmap(getRoundedShape(b));
    }
 else {
      mNotificationIcon.setImageDrawable(getIconFromResource(n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(contentIntent,n);
      mNotificationIcon.setOnClickListener(listener);
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(getNotificationDisplayText(n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(PanelHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}","private void updateSelection(StatusBarNotification n){
  String oldNotif=PanelHelper.getContentDescription((StatusBarNotification)mNotificationView.getTag());
  String newNotif=PanelHelper.getContentDescription(n);
  boolean sameNotification=newNotif.equals(oldNotif);
  if (!mAnimating || sameNotification) {
    Bitmap b=n.getNotification().largeIcon;
    if (b != null) {
      mNotificationIcon.setImageBitmap(getRoundedShape(b));
    }
 else {
      mNotificationIcon.setImageDrawable(getIconFromResource(n));
    }
    final PendingIntent contentIntent=n.getNotification().contentIntent;
    if (contentIntent != null) {
      final View.OnClickListener listener=new NotificationClicker(contentIntent,n);
      mNotificationIcon.setOnClickListener(listener);
    }
 else {
      mNotificationIcon.setOnClickListener(null);
    }
    mNotificationText.setText(getNotificationDisplayText(n));
    mNotificationText.setVisibility(isKeyguardSecureShowing() ? View.GONE : View.VISIBLE);
    mNotificationView.setTag(n);
    if (!sameNotification) {
      mNotificationView.setAlpha(1f);
      mNotificationView.setX(0);
    }
  }
  for (int i=0; i < mNotificationsContainer.getChildCount(); i++) {
    ImageView view=(ImageView)mNotificationsContainer.getChildAt(i);
    if ((mAnimating ? oldNotif : newNotif).equals(PanelHelper.getContentDescription((StatusBarNotification)view.getTag()))) {
      view.setAlpha(1f);
    }
 else {
      view.setAlpha(ICON_LOW_OPACITY);
    }
  }
}",0.9886666666666668
79833,"private void createSampleRequest(String projectName,String apiUrl,String methodType,String name,String description,List<UrlParamDTO> urlParams,JSONObject jsonObject,BasicAuthDTO basicAuth){
  String projId=null;
  String projRefId=null;
  try {
    Field declaredField=this.getClass().getDeclaredField(projectName + ""String_Node_Str"");
    projId=(String)declaredField.get(this);
    Field declaredField2=this.getClass().getDeclaredField(projectName + ""String_Node_Str"");
    projRefId=(String)declaredField2.get(this);
  }
 catch (  NoSuchFieldException|SecurityException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setWorkspaceId(demoWorkspaceId);
  RfRequestDTO requestDTO=new RfRequestDTO();
  requestDTO.setApiUrl(apiUrl);
  requestDTO.setMethodType(methodType);
  conversationDTO.setRfRequestDTO(requestDTO);
  if (urlParams != null) {
    requestDTO.setUrlParams(urlParams);
  }
  if (jsonObject != null) {
    requestDTO.setApiBody(jsonObject.toString(4));
  }
  if (basicAuth != null) {
    requestDTO.setBasicAuthDTO(basicAuth);
  }
  ConversationDTO conversation=conversationController.create(conversationDTO);
  NodeDTO node=new NodeDTO();
  node.setName(name);
  node.setDescription(description);
  node.setProjectId(projId);
  node.setConversationDTO(conversation);
  NodeDTO createdHttpbinNode=nodeController.create(projRefId,node);
  conversation.setNodeDTO(createdHttpbinNode);
  conversationController.update(conversation.getId(),conversation);
}","private void createSampleRequest(String projectName,String apiUrl,String methodType,String name,String description,List<UrlParamDTO> urlParams,JSONObject jsonObject,BasicAuthDTO basicAuth){
  String projId=null;
  String projRefId=null;
  try {
    Field declaredField=this.getClass().getDeclaredField(projectName + ""String_Node_Str"");
    projId=(String)declaredField.get(this);
    Field declaredField2=this.getClass().getDeclaredField(projectName + ""String_Node_Str"");
    projRefId=(String)declaredField2.get(this);
  }
 catch (  NoSuchFieldException|SecurityException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setWorkspaceId(demoWorkspaceId);
  RfRequestDTO requestDTO=new RfRequestDTO();
  requestDTO.setApiUrl(apiUrl);
  requestDTO.setMethodType(methodType);
  conversationDTO.setRfRequestDTO(requestDTO);
  if (urlParams != null) {
    requestDTO.setUrlParams(urlParams);
  }
  if (jsonObject != null) {
    requestDTO.setApiBody(jsonObject.toString(4));
  }
  if (basicAuth != null) {
    requestDTO.setBasicAuthDTO(basicAuth);
  }
  ConversationDTO conversation=conversationController.create(conversationDTO);
  NodeDTO node=new NodeDTO();
  node.setName(name);
  node.setDescription(description);
  node.setProjectId(projId);
  node.setConversationDTO(conversation);
  node.setWorkspaceId(demoWorkspaceId);
  NodeDTO createdHttpbinNode=nodeController.create(projRefId,node);
  conversation.setNodeDTO(createdHttpbinNode);
  conversationController.update(conversation.getId(),conversation);
}",0.988116458704694
79834,"private void createSocialSample(Project project,String apiUrl,String methodType,String name,String description,List<UrlParamDTO> urlParams,JSONObject jsonObject){
  String projectId=project.getId();
  String projectRefId=project.getProjectRef().getId();
  ConversationDTO socialDTO=new ConversationDTO();
  socialDTO.setWorkspaceId(socialWorkspaceId);
  RfRequestDTO socialReqDTO=new RfRequestDTO();
  socialReqDTO.setApiUrl(apiUrl);
  socialReqDTO.setMethodType(methodType);
  socialDTO.setRfRequestDTO(socialReqDTO);
  if (urlParams != null) {
    socialReqDTO.setUrlParams(urlParams);
  }
  if (jsonObject != null) {
    socialReqDTO.setApiBody(jsonObject.toString(4));
  }
  ConversationDTO conversationsocial=conversationController.create(socialDTO);
  NodeDTO socialNode=new NodeDTO();
  socialNode.setName(name);
  socialNode.setDescription(description);
  socialNode.setProjectId(projectId);
  socialNode.setConversationDTO(conversationsocial);
  NodeDTO createdSocialNode=nodeController.create(projectRefId,socialNode);
  conversationsocial.setNodeDTO(createdSocialNode);
  conversationController.update(conversationsocial.getId(),conversationsocial);
}","private void createSocialSample(Project project,String apiUrl,String methodType,String name,String description,List<UrlParamDTO> urlParams,JSONObject jsonObject){
  String projectId=project.getId();
  String projectRefId=project.getProjectRef().getId();
  ConversationDTO socialDTO=new ConversationDTO();
  socialDTO.setWorkspaceId(socialWorkspaceId);
  RfRequestDTO socialReqDTO=new RfRequestDTO();
  socialReqDTO.setApiUrl(apiUrl);
  socialReqDTO.setMethodType(methodType);
  socialDTO.setRfRequestDTO(socialReqDTO);
  if (urlParams != null) {
    socialReqDTO.setUrlParams(urlParams);
  }
  if (jsonObject != null) {
    socialReqDTO.setApiBody(jsonObject.toString(4));
  }
  ConversationDTO conversationsocial=conversationController.create(socialDTO);
  NodeDTO socialNode=new NodeDTO();
  socialNode.setName(name);
  socialNode.setDescription(description);
  socialNode.setProjectId(projectId);
  socialNode.setConversationDTO(conversationsocial);
  socialNode.setWorkspaceId(socialWorkspaceId);
  NodeDTO createdSocialNode=nodeController.create(projectRefId,socialNode);
  conversationsocial.setNodeDTO(createdSocialNode);
  conversationController.update(conversationsocial.getId(),conversationsocial);
}",0.9797639123102868
79835,"private void loadNodeData(){
  TagDTO tag1=new TagDTO();
  tag1.setId(impTagId);
  TagDTO tag2=new TagDTO();
  tag2.setId(wlTagId);
  TagDTO tag3=new TagDTO();
  tag3.setId(sampleTagId);
  tags=new ArrayList<TagDTO>();
  tags.add(tag1);
  tags.add(tag2);
  tags.add(tag3);
  NodeDTO firstFolderNode=new NodeDTO();
  firstFolderNode.setName(""String_Node_Str"");
  firstFolderNode.setNodeType(NodeType.FOLDER.name());
  firstFolderNode.setProjectId(firstProjectId);
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setWorkspaceId(demoWorkspaceId);
  RfRequestDTO rfRequestDTO=new RfRequestDTO();
  rfRequestDTO.setApiUrl(hostUri + ""String_Node_Str"");
  rfRequestDTO.setMethodType(""String_Node_Str"");
  conversationDTO.setRfRequestDTO(rfRequestDTO);
  ConversationDTO postConversationDTO=new ConversationDTO();
  postConversationDTO.setWorkspaceId(demoWorkspaceId);
  RfRequestDTO rfRequestDTO2=new RfRequestDTO();
  rfRequestDTO2.setApiUrl(hostUri + ""String_Node_Str"");
  rfRequestDTO2.setMethodType(""String_Node_Str"");
  JSONObject jsonObject=new JSONObject();
  jsonObject.put(""String_Node_Str"",""String_Node_Str"");
  jsonObject.put(""String_Node_Str"",""String_Node_Str"");
  rfRequestDTO2.setApiBody(jsonObject.toString(4));
  postConversationDTO.setRfRequestDTO(rfRequestDTO2);
  ConversationDTO createdConversation=conversationController.create(conversationDTO);
  ConversationDTO createdPostConversation=conversationController.create(postConversationDTO);
  NodeDTO createdFolderNode=nodeController.create(firstProjectRefId,firstFolderNode);
  NodeDTO childNode=new NodeDTO();
  childNode.setName(""String_Node_Str"");
  childNode.setDescription(""String_Node_Str"");
  childNode.setProjectId(firstProjectId);
  childNode.setConversationDTO(createdConversation);
  NodeDTO createdChildNode=nodeController.create(createdFolderNode.getId(),childNode);
  nodeController.addTags(createdChildNode.getId(),tags);
  createdConversation.setNodeDTO(createdChildNode);
  conversationController.update(createdConversation.getId(),createdConversation);
  NodeDTO secondNode=new NodeDTO();
  secondNode.setName(""String_Node_Str"");
  secondNode.setDescription(""String_Node_Str"");
  secondNode.setProjectId(firstProjectId);
  secondNode.setConversationDTO(createdPostConversation);
  NodeDTO createdSecondNode=nodeController.create(firstProjectRefId,secondNode);
  nodeController.addTags(createdSecondNode.getId(),tags);
  createdPostConversation.setNodeDTO(createdSecondNode);
  conversationController.update(createdPostConversation.getId(),createdPostConversation);
  NodeDTO dummyNode=new NodeDTO();
  dummyNode.setName(""String_Node_Str"");
  dummyNode.setProjectId(firstProjectId);
  nodeController.create(firstProjectRefId,dummyNode);
  NodeDTO testNode=new NodeDTO();
  testNode.setName(""String_Node_Str"");
  testNode.setProjectId(firstProjectId);
  nodeController.create(firstProjectRefId,testNode);
  conversationDTO=new ConversationDTO();
  conversationDTO.setWorkspaceId(demoWorkspaceId);
  rfRequestDTO=new RfRequestDTO();
  rfRequestDTO.setApiUrl(hostUri + ""String_Node_Str"" + demoWorkspaceId+ ""String_Node_Str"");
  rfRequestDTO.setMethodType(""String_Node_Str"");
  conversationDTO.setRfRequestDTO(rfRequestDTO);
  createdConversation=conversationController.create(conversationDTO);
  conversationDTO.setId(createdConversation.getId());
  NodeDTO starredNode=new NodeDTO();
  starredNode.setName(""String_Node_Str"");
  starredNode.setDescription(""String_Node_Str"");
  starredNode.setStarred(Boolean.TRUE);
  starredNode.setProjectId(firstProjectId);
  starredNode.setConversationDTO(conversationDTO);
  NodeDTO createdStarredNode=nodeController.create(firstProjectRefId,starredNode);
  createdConversation.setNodeDTO(createdStarredNode);
  conversationController.update(createdConversation.getId(),createdConversation);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  UrlParamDTO urlParamDTO=new UrlParamDTO();
  urlParamDTO.setKey(""String_Node_Str"");
  urlParamDTO.setValue(""String_Node_Str"");
  List<UrlParamDTO> urlParams=new ArrayList<UrlParamDTO>();
  urlParams.add(urlParamDTO);
  JSONObject jsonObjectSample=new JSONObject();
  jsonObjectSample.put(""String_Node_Str"",""String_Node_Str"");
  jsonObjectSample.put(""String_Node_Str"",""String_Node_Str"");
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",urlParams,jsonObjectSample,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  BasicAuthDTO basicAuth=new BasicAuthDTO();
  basicAuth.setUsername(""String_Node_Str"");
  basicAuth.setPassword(""String_Node_Str"");
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,basicAuth);
}","private void loadNodeData(){
  TagDTO tag1=new TagDTO();
  tag1.setId(impTagId);
  TagDTO tag2=new TagDTO();
  tag2.setId(wlTagId);
  TagDTO tag3=new TagDTO();
  tag3.setId(sampleTagId);
  tags=new ArrayList<TagDTO>();
  tags.add(tag1);
  tags.add(tag2);
  tags.add(tag3);
  NodeDTO firstFolderNode=new NodeDTO();
  firstFolderNode.setName(""String_Node_Str"");
  firstFolderNode.setNodeType(NodeType.FOLDER.name());
  firstFolderNode.setProjectId(firstProjectId);
  firstFolderNode.setWorkspaceId(demoWorkspaceId);
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setWorkspaceId(demoWorkspaceId);
  RfRequestDTO rfRequestDTO=new RfRequestDTO();
  rfRequestDTO.setApiUrl(hostUri + ""String_Node_Str"");
  rfRequestDTO.setMethodType(""String_Node_Str"");
  conversationDTO.setRfRequestDTO(rfRequestDTO);
  ConversationDTO postConversationDTO=new ConversationDTO();
  postConversationDTO.setWorkspaceId(demoWorkspaceId);
  RfRequestDTO rfRequestDTO2=new RfRequestDTO();
  rfRequestDTO2.setApiUrl(hostUri + ""String_Node_Str"");
  rfRequestDTO2.setMethodType(""String_Node_Str"");
  JSONObject jsonObject=new JSONObject();
  jsonObject.put(""String_Node_Str"",""String_Node_Str"");
  jsonObject.put(""String_Node_Str"",""String_Node_Str"");
  rfRequestDTO2.setApiBody(jsonObject.toString(4));
  postConversationDTO.setRfRequestDTO(rfRequestDTO2);
  ConversationDTO createdConversation=conversationController.create(conversationDTO);
  ConversationDTO createdPostConversation=conversationController.create(postConversationDTO);
  NodeDTO createdFolderNode=nodeController.create(firstProjectRefId,firstFolderNode);
  NodeDTO childNode=new NodeDTO();
  childNode.setName(""String_Node_Str"");
  childNode.setDescription(""String_Node_Str"");
  childNode.setProjectId(firstProjectId);
  childNode.setWorkspaceId(demoWorkspaceId);
  childNode.setConversationDTO(createdConversation);
  NodeDTO createdChildNode=nodeController.create(createdFolderNode.getId(),childNode);
  nodeController.addTags(createdChildNode.getId(),tags);
  createdConversation.setNodeDTO(createdChildNode);
  conversationController.update(createdConversation.getId(),createdConversation);
  NodeDTO secondNode=new NodeDTO();
  secondNode.setName(""String_Node_Str"");
  secondNode.setDescription(""String_Node_Str"");
  secondNode.setProjectId(firstProjectId);
  secondNode.setWorkspaceId(demoWorkspaceId);
  secondNode.setConversationDTO(createdPostConversation);
  NodeDTO createdSecondNode=nodeController.create(firstProjectRefId,secondNode);
  nodeController.addTags(createdSecondNode.getId(),tags);
  createdPostConversation.setNodeDTO(createdSecondNode);
  conversationController.update(createdPostConversation.getId(),createdPostConversation);
  NodeDTO dummyNode=new NodeDTO();
  dummyNode.setName(""String_Node_Str"");
  dummyNode.setProjectId(firstProjectId);
  nodeController.create(firstProjectRefId,dummyNode);
  NodeDTO testNode=new NodeDTO();
  testNode.setName(""String_Node_Str"");
  testNode.setProjectId(firstProjectId);
  nodeController.create(firstProjectRefId,testNode);
  conversationDTO=new ConversationDTO();
  conversationDTO.setWorkspaceId(demoWorkspaceId);
  rfRequestDTO=new RfRequestDTO();
  rfRequestDTO.setApiUrl(hostUri + ""String_Node_Str"" + demoWorkspaceId+ ""String_Node_Str"");
  rfRequestDTO.setMethodType(""String_Node_Str"");
  conversationDTO.setRfRequestDTO(rfRequestDTO);
  createdConversation=conversationController.create(conversationDTO);
  conversationDTO.setId(createdConversation.getId());
  NodeDTO starredNode=new NodeDTO();
  starredNode.setName(""String_Node_Str"");
  starredNode.setDescription(""String_Node_Str"");
  starredNode.setStarred(Boolean.TRUE);
  starredNode.setProjectId(firstProjectId);
  starredNode.setConversationDTO(conversationDTO);
  NodeDTO createdStarredNode=nodeController.create(firstProjectRefId,starredNode);
  createdConversation.setNodeDTO(createdStarredNode);
  conversationController.update(createdConversation.getId(),createdConversation);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  UrlParamDTO urlParamDTO=new UrlParamDTO();
  urlParamDTO.setKey(""String_Node_Str"");
  urlParamDTO.setValue(""String_Node_Str"");
  List<UrlParamDTO> urlParams=new ArrayList<UrlParamDTO>();
  urlParams.add(urlParamDTO);
  JSONObject jsonObjectSample=new JSONObject();
  jsonObjectSample.put(""String_Node_Str"",""String_Node_Str"");
  jsonObjectSample.put(""String_Node_Str"",""String_Node_Str"");
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",urlParams,jsonObjectSample,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,null);
  BasicAuthDTO basicAuth=new BasicAuthDTO();
  basicAuth.setUsername(""String_Node_Str"");
  basicAuth.setPassword(""String_Node_Str"");
  createSampleRequest(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null,basicAuth);
}",0.9927104722792608
79836,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") ConversationDTO requestProcessor(@RequestBody RfRequestDTO rfRequestDTO){
  Conversation existingConversation=null;
  Conversation currentConversation=null;
  if (rfRequestDTO == null) {
    return null;
  }
 else   if (rfRequestDTO.getId() != null && !rfRequestDTO.getId().isEmpty()) {
    RfRequest rfRequest=rfRequestRepository.findOne(rfRequestDTO.getId());
    String conversationId=rfRequest != null ? rfRequest.getConversationId() : null;
    existingConversation=conversationId != null ? conversationRepository.findOne(conversationId) : null;
    rfRequestDTO.setAssertionDTO(EntityToDTO.toDTO(rfRequest.getAssertion()));
  }
  long startTime=System.currentTimeMillis();
  RfResponseDTO result=genericHandler.processHttpRequest(rfRequestDTO);
  long endTime=System.currentTimeMillis();
  long duration=endTime - startTime;
  assertHandler.runAssert(result);
  currentConversation=ConversationConverter.convertToEntity(rfRequestDTO,result);
  if (existingConversation != null) {
    currentConversation.getRfRequest().setAssertion(existingConversation.getRfRequest().getAssertion());
  }
  rfRequestRepository.save(currentConversation.getRfRequest());
  rfResponseRepository.save(currentConversation.getRfResponse());
  currentConversation.setDuration(duration);
  Object principal=SecurityContextHolder.getContext().getAuthentication().getPrincipal();
  if (principal instanceof User) {
    currentConversation.setLastModifiedBy((User)principal);
  }
  currentConversation.setCreatedDate(new Date());
  currentConversation.setLastModifiedDate(new Date());
  try {
    currentConversation=conversationRepository.save(currentConversation);
    currentConversation.getRfRequest().setConversationId(currentConversation.getId());
    rfRequestRepository.save(currentConversation.getRfRequest());
    if (existingConversation != null && existingConversation.getNodeId() != null) {
      BaseNode node=nodeRepository.findOne(existingConversation.getNodeId());
      currentConversation.setNodeId(node.getId());
      node.setConversation(currentConversation);
      nodeRepository.save(node);
    }
    conversationRepository.save(currentConversation);
  }
 catch (  InvalidDataAccessResourceUsageException e) {
    throw new ApiException(""String_Node_Str"",e);
  }
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setDuration(duration);
  conversationDTO.setRfResponseDTO(result);
  result.setItemDTO(conversationDTO);
  return conversationDTO;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") ConversationDTO requestProcessor(@RequestBody RfRequestDTO rfRequestDTO){
  Conversation existingConversation=null;
  Conversation currentConversation=null;
  if (rfRequestDTO == null) {
    return null;
  }
 else   if (rfRequestDTO.getId() != null && !rfRequestDTO.getId().isEmpty()) {
    RfRequest rfRequest=rfRequestRepository.findOne(rfRequestDTO.getId());
    String conversationId=rfRequest != null ? rfRequest.getConversationId() : null;
    existingConversation=conversationId != null ? conversationRepository.findOne(conversationId) : null;
    existingConversation=existingConversation != null ? nodeRepository.findOne(existingConversation.getNodeId()).getConversation() : null;
    rfRequestDTO.setAssertionDTO(EntityToDTO.toDTO(existingConversation.getRfRequest().getAssertion()));
  }
  long startTime=System.currentTimeMillis();
  RfResponseDTO result=genericHandler.processHttpRequest(rfRequestDTO);
  long endTime=System.currentTimeMillis();
  long duration=endTime - startTime;
  assertHandler.runAssert(result);
  currentConversation=ConversationConverter.convertToEntity(rfRequestDTO,result);
  if (existingConversation != null) {
    currentConversation.getRfRequest().setAssertion(existingConversation.getRfRequest().getAssertion());
  }
  rfRequestRepository.save(currentConversation.getRfRequest());
  rfResponseRepository.save(currentConversation.getRfResponse());
  currentConversation.setDuration(duration);
  Object principal=SecurityContextHolder.getContext().getAuthentication().getPrincipal();
  if (principal instanceof User) {
    currentConversation.setLastModifiedBy((User)principal);
  }
  currentConversation.setCreatedDate(new Date());
  currentConversation.setLastModifiedDate(new Date());
  try {
    currentConversation=conversationRepository.save(currentConversation);
    currentConversation.getRfRequest().setConversationId(currentConversation.getId());
    rfRequestRepository.save(currentConversation.getRfRequest());
    if (existingConversation != null && existingConversation.getNodeId() != null) {
      BaseNode node=nodeRepository.findOne(existingConversation.getNodeId());
      currentConversation.setNodeId(node.getId());
      node.setConversation(currentConversation);
      nodeRepository.save(node);
    }
    conversationRepository.save(currentConversation);
  }
 catch (  InvalidDataAccessResourceUsageException e) {
    throw new ApiException(""String_Node_Str"",e);
  }
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setDuration(duration);
  conversationDTO.setRfResponseDTO(result);
  result.setItemDTO(conversationDTO);
  return conversationDTO;
}",0.968472720407778
79837,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody Assertion findAsserts(@PathVariable(""String_Node_Str"") String requestId){
  RfRequest rfRequest=rfRequestRepository.findOne(requestId);
  if (rfRequest == null) {
    return null;
  }
  Assertion assertion=rfRequest.getAssertion();
  return assertion;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody Assertion findAsserts(@PathVariable(""String_Node_Str"") String nodeId){
  BaseNode node=nodeRepository.findOne(nodeId);
  if (node == null || node.getConversation() == null) {
    return null;
  }
  RfRequest rfRequest=node.getConversation().getRfRequest();
  if (rfRequest == null) {
    return null;
  }
  Assertion assertion=rfRequest.getAssertion();
  return assertion;
}",0.7191011235955056
79838,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody Assertion save(@PathVariable(""String_Node_Str"") String requestId,@RequestBody AssertionDTO assertionDTO){
  RfRequest rfRequest=rfRequestRepository.findOne(requestId);
  if (rfRequest == null) {
    return null;
  }
  Assertion assertion=new Assertion();
  List<BodyAssertDTO> bodyAssertDTOs=assertionDTO.getBodyAssertDTOs();
  if (bodyAssertDTOs != null && !bodyAssertDTOs.isEmpty()) {
    List<BodyAssert> bodyAsserts=new ArrayList<BodyAssert>();
    BodyAssert bodyAssert=null;
    for (    BodyAssertDTO bodyAssertDTO : bodyAssertDTOs) {
      bodyAssert=new BodyAssert();
      bodyAssert.setPropertyName(bodyAssertDTO.getPropertyName());
      bodyAssert.setComparator(bodyAssertDTO.getComparator());
      bodyAssert.setExpectedValue(bodyAssertDTO.getExpectedValue());
      bodyAsserts.add(bodyAssert);
    }
    assertion.setBodyAsserts(bodyAsserts);
    rfRequest.setAssertion(assertion);
  }
  assertion=assertionRepository.save(assertion);
  RfRequest savedRFRequest=rfRequestRepository.save(rfRequest);
  return savedRFRequest.getAssertion();
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody Assertion save(@PathVariable(""String_Node_Str"") String nodeId,@RequestBody AssertionDTO assertionDTO){
  BaseNode node=nodeRepository.findOne(nodeId);
  if (node == null || node.getConversation() == null) {
    return null;
  }
  RfRequest rfRequest=node.getConversation().getRfRequest();
  if (rfRequest == null) {
    return null;
  }
  Assertion assertion=new Assertion();
  List<BodyAssertDTO> bodyAssertDTOs=assertionDTO.getBodyAssertDTOs();
  if (bodyAssertDTOs != null && !bodyAssertDTOs.isEmpty()) {
    List<BodyAssert> bodyAsserts=new ArrayList<BodyAssert>();
    BodyAssert bodyAssert=null;
    for (    BodyAssertDTO bodyAssertDTO : bodyAssertDTOs) {
      bodyAssert=new BodyAssert();
      bodyAssert.setPropertyName(bodyAssertDTO.getPropertyName());
      bodyAssert.setComparator(bodyAssertDTO.getComparator());
      bodyAssert.setExpectedValue(bodyAssertDTO.getExpectedValue());
      bodyAsserts.add(bodyAssert);
    }
    assertion.setBodyAsserts(bodyAsserts);
    rfRequest.setAssertion(assertion);
  }
  assertion=assertionRepository.save(assertion);
  RfRequest savedRFRequest=rfRequestRepository.save(rfRequest);
  return savedRFRequest.getAssertion();
}",0.9208282582216808
79839,"public static Conversation convertToEntity(RfRequestDTO rfRequestDTO,RfResponseDTO responseDTO){
  Conversation conversation=new Conversation();
  RfRequest rfRequest=new RfRequest();
  if (rfRequestDTO != null) {
    rfRequest.setApiUrlString(rfRequestDTO.getApiUrl());
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
    List<FormDataDTO> formDataDTOs=rfRequestDTO.getFormParams();
    List<FormParam> formParams=new ArrayList<FormParam>();
    if (rfRequestDTO.getBasicAuthDTO() != null) {
      BasicAuth basicAuth=new BasicAuth();
      basicAuth.setUsername(rfRequestDTO.getBasicAuthDTO().getUsername());
      basicAuth.setPassword(rfRequestDTO.getBasicAuthDTO().getPassword());
      rfRequest.setBasicAuth(basicAuth);
    }
    if (rfRequestDTO.getDigestAuthDTO() != null) {
      DigestAuth digestAuth=new DigestAuth();
      digestAuth.setUsername(rfRequestDTO.getDigestAuthDTO().getUsername());
      digestAuth.setPassword(rfRequestDTO.getDigestAuthDTO().getPassword());
      rfRequest.setDigestAuth(digestAuth);
    }
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
 else     if (formDataDTOs != null && !formDataDTOs.isEmpty()) {
      FormParam formParam=null;
      for (      FormDataDTO formDataDTO : formDataDTOs) {
        formParam=new FormParam();
        formParam.setParamKey(formDataDTO.getKey());
        formParam.setValueString(formDataDTO.getValue());
        formParams.add(formParam);
      }
      rfRequest.setFormParams(formParams);
    }
    List<UrlParamDTO> urlParamDTOs=rfRequestDTO.getUrlParams();
    List<UrlParam> urlParams=new ArrayList<UrlParam>();
    if (urlParamDTOs != null && !urlParamDTOs.isEmpty()) {
      UrlParam urlParam=null;
      for (      UrlParamDTO urlParamDTO : urlParamDTOs) {
        urlParam=new UrlParam();
        urlParam.setParamKey(urlParamDTO.getKey());
        urlParam.setParamValue(urlParamDTO.getValue());
        urlParams.add(urlParam);
      }
      rfRequest.setUrlParams(urlParams);
    }
    List<RfHeaderDTO> headerDTOs=rfRequestDTO.getHeaders();
    List<RfHeader> headers=new ArrayList<RfHeader>();
    RfHeader header=null;
    if (headerDTOs != null && !headerDTOs.isEmpty()) {
      for (      RfHeaderDTO rfHeaderDTO : headerDTOs) {
        header=new RfHeader();
        header.setHeaderName(rfHeaderDTO.getHeaderName());
        header.setHeaderValueString(rfHeaderDTO.getHeaderValue());
        headers.add(header);
      }
      rfRequest.setRfHeaders(headers);
    }
  }
  conversation.setRfRequest(rfRequest);
  RfResponse response=new RfResponse();
  conversation.setRfResponse(response);
  if (responseDTO == null && !rfRequestDTO.getApiUrl().isEmpty()) {
    response.setBodyString(""String_Node_Str"" + rfRequestDTO.getApiUrl());
  }
 else {
    if (responseDTO.getBody() != null && !responseDTO.getBody().isEmpty()) {
      response.setBody(responseDTO.getBody().getBytes());
    }
    AssertionDTO assertionDTO=rfRequestDTO.getAssertionDTO();
    if (assertionDTO != null) {
      if (assertionDTO != null && assertionDTO.getBodyAssertDTOs() != null) {
        List<BodyAssertDTO> bodyAssertDTOs=assertionDTO.getBodyAssertDTOs();
        List<BodyAssert> bodyAsserts=new ArrayList<BodyAssert>();
        for (        BodyAssertDTO bodyAssertDTO : bodyAssertDTOs) {
          BodyAssert bodyAssert=new BodyAssert();
          bodyAssert.setComparator(bodyAssertDTO.getComparator());
          bodyAssert.setExpectedValue(bodyAssertDTO.getExpectedValue());
          bodyAssert.setPropertyName(bodyAssertDTO.getPropertyName());
          bodyAssert.setActualValue(bodyAssertDTO.getActualValue());
          bodyAssert.setSuccess(bodyAssertDTO.isSuccess());
          bodyAsserts.add(bodyAssert);
        }
        Assertion assertion=new Assertion();
        response.setAssertion(assertion);
      }
    }
    List<RfHeaderDTO> headerDTOs=responseDTO.getHeaders();
    List<RfHeader> headers=new ArrayList<RfHeader>();
    RfHeader header=null;
    if (headerDTOs != null && !headerDTOs.isEmpty()) {
      for (      RfHeaderDTO rfHeaderDTO : headerDTOs) {
        header=new RfHeader();
        header.setHeaderName(rfHeaderDTO.getHeaderName());
        header.setHeaderValueString(rfHeaderDTO.getHeaderValue());
        headers.add(header);
      }
      response.setRfHeaders(headers);
    }
  }
  return conversation;
}","public static Conversation convertToEntity(RfRequestDTO rfRequestDTO,RfResponseDTO responseDTO){
  Conversation conversation=new Conversation();
  RfRequest rfRequest=new RfRequest();
  if (rfRequestDTO != null) {
    rfRequest.setApiUrlString(rfRequestDTO.getApiUrl());
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
    List<FormDataDTO> formDataDTOs=rfRequestDTO.getFormParams();
    List<FormParam> formParams=new ArrayList<FormParam>();
    if (rfRequestDTO.getBasicAuthDTO() != null) {
      BasicAuth basicAuth=new BasicAuth();
      basicAuth.setUsername(rfRequestDTO.getBasicAuthDTO().getUsername());
      basicAuth.setPassword(rfRequestDTO.getBasicAuthDTO().getPassword());
      rfRequest.setBasicAuth(basicAuth);
    }
    if (rfRequestDTO.getDigestAuthDTO() != null) {
      DigestAuth digestAuth=new DigestAuth();
      digestAuth.setUsername(rfRequestDTO.getDigestAuthDTO().getUsername());
      digestAuth.setPassword(rfRequestDTO.getDigestAuthDTO().getPassword());
      rfRequest.setDigestAuth(digestAuth);
    }
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
 else     if (formDataDTOs != null && !formDataDTOs.isEmpty()) {
      FormParam formParam=null;
      for (      FormDataDTO formDataDTO : formDataDTOs) {
        formParam=new FormParam();
        formParam.setParamKey(formDataDTO.getKey());
        formParam.setValueString(formDataDTO.getValue());
        formParams.add(formParam);
      }
      rfRequest.setFormParams(formParams);
    }
    List<UrlParamDTO> urlParamDTOs=rfRequestDTO.getUrlParams();
    List<UrlParam> urlParams=new ArrayList<UrlParam>();
    if (urlParamDTOs != null && !urlParamDTOs.isEmpty()) {
      UrlParam urlParam=null;
      for (      UrlParamDTO urlParamDTO : urlParamDTOs) {
        urlParam=new UrlParam();
        urlParam.setParamKey(urlParamDTO.getKey());
        urlParam.setParamValue(urlParamDTO.getValue());
        urlParams.add(urlParam);
      }
      rfRequest.setUrlParams(urlParams);
    }
    List<RfHeaderDTO> headerDTOs=rfRequestDTO.getHeaders();
    List<RfHeader> headers=new ArrayList<RfHeader>();
    RfHeader header=null;
    if (headerDTOs != null && !headerDTOs.isEmpty()) {
      for (      RfHeaderDTO rfHeaderDTO : headerDTOs) {
        header=new RfHeader();
        header.setHeaderName(rfHeaderDTO.getHeaderName());
        header.setHeaderValueString(rfHeaderDTO.getHeaderValue());
        headers.add(header);
      }
      rfRequest.setRfHeaders(headers);
    }
  }
  conversation.setRfRequest(rfRequest);
  RfResponse response=new RfResponse();
  conversation.setRfResponse(response);
  if (responseDTO == null && !rfRequestDTO.getApiUrl().isEmpty()) {
    response.setBodyString(""String_Node_Str"" + rfRequestDTO.getApiUrl());
  }
 else {
    if (responseDTO.getBody() != null && !responseDTO.getBody().isEmpty()) {
      response.setBody(responseDTO.getBody().getBytes());
    }
    AssertionDTO assertionDTO=rfRequestDTO != null ? rfRequestDTO.getAssertionDTO() : null;
    if (assertionDTO != null && assertionDTO.getBodyAssertDTOs() != null) {
      List<BodyAssertDTO> bodyAssertDTOs=assertionDTO.getBodyAssertDTOs();
      List<BodyAssert> bodyAsserts=new ArrayList<BodyAssert>();
      for (      BodyAssertDTO bodyAssertDTO : bodyAssertDTOs) {
        BodyAssert bodyAssert=new BodyAssert();
        bodyAssert.setComparator(bodyAssertDTO.getComparator());
        bodyAssert.setExpectedValue(bodyAssertDTO.getExpectedValue());
        bodyAssert.setPropertyName(bodyAssertDTO.getPropertyName());
        bodyAssert.setActualValue(bodyAssertDTO.getActualValue());
        bodyAssert.setSuccess(bodyAssertDTO.isSuccess());
        bodyAsserts.add(bodyAssert);
      }
      Assertion assertion=new Assertion();
      response.setAssertion(assertion);
    }
    List<RfHeaderDTO> headerDTOs=responseDTO.getHeaders();
    List<RfHeader> headers=new ArrayList<RfHeader>();
    RfHeader header=null;
    if (headerDTOs != null && !headerDTOs.isEmpty()) {
      for (      RfHeaderDTO rfHeaderDTO : headerDTOs) {
        header=new RfHeader();
        header.setHeaderName(rfHeaderDTO.getHeaderName());
        header.setHeaderValueString(rfHeaderDTO.getHeaderValue());
        headers.add(header);
      }
      response.setRfHeaders(headers);
    }
  }
  return conversation;
}",0.9847136664385124
79840,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Environment update(@PathVariable(""String_Node_Str"") Long id,@RequestBody EnvironmentDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Environment environment=environmentRepository.findOne(updated.getId());
  environment.setName(updated.getName());
  environment.setDescription(updated.getDescription());
  List<EnvironmentPropertyDTO> propertyDTOs=updated.getProperties();
  if (propertyDTOs != null && !propertyDTOs.isEmpty()) {
    List<EnvironmentProperty> properties=new ArrayList<EnvironmentProperty>();
    EnvironmentProperty property=null;
    for (    EnvironmentPropertyDTO propertyDTO : propertyDTOs) {
      property=new EnvironmentProperty();
      property.setPropertyName(propertyDTO.getPropertyName());
      property.setPropertyValue(propertyDTO.getPropertyValue());
      properties.add(property);
    }
    environment.setProperties(properties);
  }
  environment=environmentRepository.save(environment);
  return environment;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Environment update(@PathVariable(""String_Node_Str"") String id,@RequestBody EnvironmentDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Environment environment=environmentRepository.findOne(updated.getId());
  environment.setName(updated.getName());
  environment.setDescription(updated.getDescription());
  List<EnvironmentPropertyDTO> propertyDTOs=updated.getProperties();
  if (propertyDTOs != null && !propertyDTOs.isEmpty()) {
    List<EnvironmentProperty> properties=new ArrayList<EnvironmentProperty>();
    EnvironmentProperty property=null;
    for (    EnvironmentPropertyDTO propertyDTO : propertyDTOs) {
      property=new EnvironmentProperty();
      property.setPropertyName(propertyDTO.getPropertyName());
      property.setPropertyValue(propertyDTO.getPropertyValue());
      properties.add(property);
    }
    environment.setProperties(properties);
  }
  environment=environmentRepository.save(environment);
  return environment;
}",0.9972014925373134
79841,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Conversation update(@PathVariable(""String_Node_Str"") String conversationId,@RequestBody ConversationDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Conversation item=itemRepository.findOne(updated.getId());
  item.setName(updated.getName());
  item.setDescription(updated.getDescription());
  RfRequestDTO rfRequestDTO=updated.getRfRequestDTO();
  RfRequest rfRequest=item.getRfRequest();
  if (null != rfRequestDTO) {
    rfRequest.setApiUrlString(rfRequestDTO.getApiUrl());
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
  }
  item.setRfRequest(rfRequest);
  return item;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Conversation update(@PathVariable(""String_Node_Str"") String conversationId,@RequestBody ConversationDTO conversationDTO){
  Conversation dbConversation=itemRepository.findOne(conversationDTO.getId());
  RfRequestDTO rfRequestDTO=conversationDTO.getRfRequestDTO();
  RfResponseDTO rfResponseDTO=new RfResponseDTO();
  Conversation conversation=ConversationConverter.convertToEntity(rfRequestDTO,rfResponseDTO);
  conversation.setId(dbConversation.getId());
  conversation.setName(conversationDTO.getName());
  conversation.setDescription(conversationDTO.getDescription());
  conversation.setCreatedDate(new Date());
  conversation.setLastModifiedDate(new Date());
  RfRequest rfRequest=conversation.getRfRequest();
  RfRequest dbRfRequest=dbConversation.getRfRequest();
  if (dbRfRequest != null) {
    rfRequest.setId(dbRfRequest.getId());
  }
  rfRequest.setConversationId(conversation.getId());
  rfRequestRepository.save(rfRequest);
  RfResponse rfResponse=conversation.getRfResponse();
  RfResponse dbRfResponse=dbConversation.getRfResponse();
  if (dbRfResponse != null) {
    rfResponse.setId(dbRfResponse.getId());
  }
  rfResponseRepository.save(rfResponse);
  conversation=itemRepository.save(conversation);
  return conversation;
}",0.2298534798534798
79842,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody List<Conversation> findAll(@RequestParam(value=""String_Node_Str"",required=false) Integer page,@RequestParam(value=""String_Node_Str"",required=false) Integer limit){
  logger.debug(""String_Node_Str"");
  int pageNo=0;
  if (page != null && page > 0) {
    pageNo=page;
  }
  int numberOfRecords=10;
  if (limit != null && limit > 0) {
    numberOfRecords=limit;
  }
  Pageable topRecords=new PageRequest(pageNo,numberOfRecords);
  Page<Conversation> result=itemRepository.findAll(topRecords);
  List<Conversation> content=result.getContent();
  for (  Conversation item : content) {
    RfRequest rfRequest=item.getRfRequest();
    logger.debug(rfRequest.getApiUrlString());
  }
  return content;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody PaginatedResponse<Conversation> findAll(@RequestParam(value=""String_Node_Str"",required=false) Integer page,@RequestParam(value=""String_Node_Str"",required=false) Integer limit){
  logger.debug(""String_Node_Str"");
  int pageNo=0;
  if (page != null && page > 0) {
    pageNo=page;
  }
  int numberOfRecords=10;
  if (limit != null && limit > 0) {
    numberOfRecords=limit;
  }
  Sort sort=new Sort(Direction.DESC,""String_Node_Str"");
  Pageable topRecords=new PageRequest(pageNo,numberOfRecords,sort);
  Page<Conversation> result=itemRepository.findAll(topRecords);
  List<Conversation> content=result.getContent();
  PaginatedResponse<Conversation> response=new PaginatedResponse<Conversation>();
  response.setData(content);
  response.setLimit(numberOfRecords);
  response.setPage(pageNo);
  response.setTotalElements(result.getTotalElements());
  response.setTotalPages(result.getTotalPages());
  for (  Conversation item : content) {
    RfRequest rfRequest=item.getRfRequest();
    logger.debug(rfRequest.getApiUrlString());
  }
  return response;
}",0.7950052029136316
79843,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") RfResponseDTO requestProcessor(@RequestBody RfRequestDTO rfRequestDTO){
  Conversation existingConversation=null;
  Conversation conversationForLogging=null;
  if (rfRequestDTO == null) {
    return null;
  }
 else   if (rfRequestDTO.getId() != null && !rfRequestDTO.getId().isEmpty()) {
    RfRequest rfRequest=rfRequestRepository.findOne(rfRequestDTO.getId());
    String conversationId=rfRequest.getConversationId();
    existingConversation=conversationRepository.findOne(conversationId);
  }
  long startTime=System.currentTimeMillis();
  RfResponseDTO result=genericHandler.processHttpRequest(rfRequestDTO);
  long endTime=System.currentTimeMillis();
  long duration=endTime - startTime;
  conversationForLogging=ConversationConverter.convertToEntity(rfRequestDTO,result);
  rfRequestRepository.save(conversationForLogging.getRfRequest());
  rfResponseRepository.save(conversationForLogging.getRfResponse());
  conversationForLogging.setDuration(duration);
  try {
    conversationForLogging=conversationRepository.save(conversationForLogging);
    conversationForLogging.getRfRequest().setConversationId(conversationForLogging.getId());
    rfRequestRepository.save(conversationForLogging.getRfRequest());
    if (existingConversation != null) {
      existingConversation.setRfRequest(conversationForLogging.getRfRequest());
      existingConversation.setRfResponse(conversationForLogging.getRfResponse());
      existingConversation.setDuration(duration);
    }
  }
 catch (  InvalidDataAccessResourceUsageException e) {
    throw new ApiException(""String_Node_Str"",e);
  }
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setDuration(duration);
  result.setItemDTO(conversationDTO);
  return result;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") RfResponseDTO requestProcessor(@RequestBody RfRequestDTO rfRequestDTO){
  Conversation existingConversation=null;
  Conversation conversationForLogging=null;
  if (rfRequestDTO == null) {
    return null;
  }
 else   if (rfRequestDTO.getId() != null && !rfRequestDTO.getId().isEmpty()) {
    RfRequest rfRequest=rfRequestRepository.findOne(rfRequestDTO.getId());
    String conversationId=rfRequest.getConversationId();
    existingConversation=conversationRepository.findOne(conversationId);
  }
  long startTime=System.currentTimeMillis();
  RfResponseDTO result=genericHandler.processHttpRequest(rfRequestDTO);
  long endTime=System.currentTimeMillis();
  long duration=endTime - startTime;
  conversationForLogging=ConversationConverter.convertToEntity(rfRequestDTO,result);
  rfRequestRepository.save(conversationForLogging.getRfRequest());
  rfResponseRepository.save(conversationForLogging.getRfResponse());
  conversationForLogging.setDuration(duration);
  conversationForLogging.setCreatedDate(new Date());
  conversationForLogging.setLastModifiedDate(new Date());
  try {
    conversationForLogging=conversationRepository.save(conversationForLogging);
    conversationForLogging.getRfRequest().setConversationId(conversationForLogging.getId());
    rfRequestRepository.save(conversationForLogging.getRfRequest());
    if (existingConversation != null) {
      existingConversation.setRfRequest(conversationForLogging.getRfRequest());
      existingConversation.setRfResponse(conversationForLogging.getRfResponse());
      existingConversation.setDuration(duration);
    }
  }
 catch (  InvalidDataAccessResourceUsageException e) {
    throw new ApiException(""String_Node_Str"",e);
  }
  ConversationDTO conversationDTO=new ConversationDTO();
  conversationDTO.setDuration(duration);
  result.setItemDTO(conversationDTO);
  return result;
}",0.9705648369132855
79844,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Conversation update(@PathVariable(""String_Node_Str"") Long conversationId,@RequestBody ConversationDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Conversation item=itemRepository.findOne(updated.getId());
  item.setName(updated.getName());
  item.setDescription(updated.getDescription());
  RfRequestDTO rfRequestDTO=updated.getRfRequestDTO();
  RfRequest rfRequest=item.getRfRequest();
  if (null != rfRequestDTO) {
    rfRequest.setApiUrlString(rfRequestDTO.getApiUrl());
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
  }
  item.setRfRequest(rfRequest);
  return item;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Conversation update(@PathVariable(""String_Node_Str"") String conversationId,@RequestBody ConversationDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Conversation item=itemRepository.findOne(updated.getId());
  item.setName(updated.getName());
  item.setDescription(updated.getDescription());
  RfRequestDTO rfRequestDTO=updated.getRfRequestDTO();
  RfRequest rfRequest=item.getRfRequest();
  if (null != rfRequestDTO) {
    rfRequest.setApiUrlString(rfRequestDTO.getApiUrl());
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
  }
  item.setRfRequest(rfRequest);
  return item;
}",0.9963811821471652
79845,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody Conversation create(@RequestBody ConversationDTO conversationDTO){
  logger.debug(""String_Node_Str"" + conversationDTO);
  Conversation conversation=new Conversation();
  conversation.setName(conversationDTO.getName());
  conversation.setDescription(conversationDTO.getDescription());
  RfRequestDTO rfRequestDTO=conversationDTO.getRfRequestDTO();
  RfRequest rfRequest=new RfRequest();
  if (rfRequestDTO != null) {
    rfRequest.setApiUrl(rfRequestDTO.getApiUrl());
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
    List<FormDataDTO> formDataDTOs=rfRequestDTO.getFormParams();
    List<FormParam> formParams=new ArrayList<FormParam>();
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
 else     if (formDataDTOs != null && !formDataDTOs.isEmpty()) {
      FormParam formParam=null;
      for (      FormDataDTO formDataDTO : formDataDTOs) {
        formParam=new FormParam();
        formParam.setKey(formDataDTO.getKey());
        formParam.setValueString(formDataDTO.getValue());
        formParams.add(formParam);
      }
      rfRequest.setFormParams(formParams);
    }
    List<RfHeaderDTO> headerDTOs=rfRequestDTO.getHeaders();
    List<RfHeader> headers=new ArrayList<RfHeader>();
    RfHeader header=null;
    if (headerDTOs != null && !headerDTOs.isEmpty()) {
      for (      RfHeaderDTO rfHeaderDTO : headerDTOs) {
        header=new RfHeader();
        header.setHeaderName(rfHeaderDTO.getHeaderName());
        header.setHeaderValue(rfHeaderDTO.getHeaderValue());
        headers.add(header);
      }
      rfRequest.setRfHeaders(headers);
    }
  }
  conversation.setRfRequest(rfRequest);
  RfResponse rfResponse=new RfResponse();
  rfResponse.setName(""String_Node_Str"");
  conversation.setRfResponse(rfResponse);
  return itemRepository.save(conversation);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody Conversation create(@RequestBody ConversationDTO conversationDTO){
  logger.debug(""String_Node_Str"" + conversationDTO);
  Conversation conversation=new Conversation();
  conversation.setName(conversationDTO.getName());
  conversation.setDescription(conversationDTO.getDescription());
  RfRequestDTO rfRequestDTO=conversationDTO.getRfRequestDTO();
  RfRequest rfRequest=new RfRequest();
  if (rfRequestDTO != null) {
    rfRequest.setApiUrl(rfRequestDTO.getApiUrl());
    rfRequest.setMethodType(rfRequestDTO.getMethodType());
    List<FormDataDTO> formDataDTOs=rfRequestDTO.getFormParams();
    List<FormParam> formParams=new ArrayList<FormParam>();
    if (rfRequestDTO.getApiBody() != null) {
      rfRequest.setApiBody(rfRequestDTO.getApiBody().getBytes());
    }
 else     if (formDataDTOs != null && !formDataDTOs.isEmpty()) {
      FormParam formParam=null;
      for (      FormDataDTO formDataDTO : formDataDTOs) {
        formParam=new FormParam();
        formParam.setParamKey(formDataDTO.getKey());
        formParam.setValueString(formDataDTO.getValue());
        formParams.add(formParam);
      }
      rfRequest.setFormParams(formParams);
    }
    List<RfHeaderDTO> headerDTOs=rfRequestDTO.getHeaders();
    List<RfHeader> headers=new ArrayList<RfHeader>();
    RfHeader header=null;
    if (headerDTOs != null && !headerDTOs.isEmpty()) {
      for (      RfHeaderDTO rfHeaderDTO : headerDTOs) {
        header=new RfHeader();
        header.setHeaderName(rfHeaderDTO.getHeaderName());
        header.setHeaderValueString(rfHeaderDTO.getHeaderValue());
        headers.add(header);
      }
      rfRequest.setRfHeaders(headers);
    }
  }
  conversation.setRfRequest(rfRequest);
  RfResponse rfResponse=new RfResponse();
  rfResponse.setName(""String_Node_Str"");
  conversation.setRfResponse(rfResponse);
  return itemRepository.save(conversation);
}",0.9972144846796658
79846,"public void setHeaderValue(String headerValue){
  this.headerValue=headerValue;
}","public void setHeaderValue(byte[] headerValue){
  this.headerValue=headerValue;
}",0.9382716049382716
79847,"public String getHeaderValue(){
  return headerValue;
}","public byte[] getHeaderValue(){
  return headerValue;
}",0.9090909090909092
79848,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public ModelAndView oauthFormRedirect(@ModelAttribute OAuth2RequestDTO oAuth2RequestDTO){
  List<String> scopes=oAuth2RequestDTO.getScopes();
  String url=new BrowserClientRequestUrl(oAuth2RequestDTO.getAuthorizationUrl(),oAuth2RequestDTO.getClientId()).setState(""String_Node_Str"").setScopes(scopes).setRedirectUri(""String_Node_Str"").build();
  return new ModelAndView(""String_Node_Str"" + url);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public ModelAndView oauthFormRedirect(@ModelAttribute OAuth2RequestDTO oAuth2RequestDTO) throws URISyntaxException {
  List<String> scopes=oAuth2RequestDTO.getScopes();
  String authorizationUrl=oAuth2RequestDTO.getAuthorizationUrl();
  if (authorizationUrl == null || authorizationUrl.isEmpty()) {
    return null;
  }
  URIBuilder uriBuilder=new URIBuilder(authorizationUrl);
  List<NameValuePair> queryParams=uriBuilder.getQueryParams();
  List<String> responseTypes=new ArrayList<String>();
  if (queryParams != null && !queryParams.isEmpty()) {
    for (    NameValuePair nameValuePair : queryParams) {
      if (""String_Node_Str"".equals(nameValuePair.getName())) {
        responseTypes.add(nameValuePair.getValue());
        break;
      }
    }
  }
  BrowserClientRequestUrl browserClientRequestUrl=new BrowserClientRequestUrl(authorizationUrl,oAuth2RequestDTO.getClientId());
  if (!responseTypes.isEmpty()) {
    browserClientRequestUrl=browserClientRequestUrl.setResponseTypes(responseTypes);
  }
  String url=browserClientRequestUrl.setState(""String_Node_Str"").setScopes(scopes).setRedirectUri(""String_Node_Str"").build();
  return new ModelAndView(""String_Node_Str"" + url);
}",0.5055329062317997
79849,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody User update(@PathVariable(""String_Node_Str"") Long id,@RequestBody UserDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  Object principal=authentication.getPrincipal();
  System.out.println(""String_Node_Str"" + principal);
  User user=userRepository.findOne(updated.getId());
  user.setName(updated.getName());
  user.setDescription(updated.getDescription());
  user.setEmail(updated.getEmail());
  return user;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody UserDTO update(@PathVariable(""String_Node_Str"") Long id,@RequestBody UserDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  Object principal=authentication.getPrincipal();
  if (principal != null && principal instanceof User) {
    User loggedInUser=(User)principal;
    Long updatedId=updated.getId();
    User user=userRepository.findOne(updatedId);
    if (updatedId == loggedInUser.getId()) {
      user.setName(updated.getName());
      user.setDescription(updated.getDescription());
      user.setEmail(updated.getEmail());
      userRepository.save(user);
    }
  }
  return updated;
}",0.6704067321178121
79850,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody void changePassword(@RequestBody PasswordResetDTO passwordResetDTO){
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  Object principal=authentication.getPrincipal();
  System.out.println(""String_Node_Str"" + principal);
  Object details=authentication.getDetails();
  System.out.println(""String_Node_Str"" + details);
  Object credentials=authentication.getCredentials();
  System.out.println(""String_Node_Str"" + credentials);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody void changePassword(@RequestBody PasswordResetDTO passwordResetDTO){
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  Object principal=authentication.getPrincipal();
  if (principal != null && principal instanceof User) {
    User loggedInUser=(User)principal;
    User user=userRepository.findOne(loggedInUser.getId());
    PasswordEncoder passwordEncoder=new BCryptPasswordEncoder();
    user.setPassword(passwordEncoder.encode(passwordResetDTO.getRetypedPassword()));
    userRepository.save(user);
  }
}",0.5502815768302494
79851,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody BaseNode create(@RequestBody NodeDTO nodeDTO){
  logger.debug(""String_Node_Str"" + nodeDTO);
  BaseNode node=new BaseNode();
  node.setName(nodeDTO.getName());
  node.setDescription(nodeDTO.getDescription());
  return nodeRepository.save(node);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody BaseNode create(@PathVariable(""String_Node_Str"") Long parentId,@RequestBody NodeDTO nodeDTO){
  logger.debug(""String_Node_Str"" + nodeDTO);
  BaseNode node=new BaseNode();
  node.setName(nodeDTO.getName());
  node.setDescription(nodeDTO.getDescription());
  node.setParentId(parentId);
  return nodeRepository.save(node);
}",0.9031446540880504
79852,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody Project findById(@PathVariable(""String_Node_Str"") Long id){
  logger.debug(""String_Node_Str"" + id);
  return projectRepository.findOne(id);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody Project findById(@PathVariable(""String_Node_Str"") Long workspaceId,@PathVariable(""String_Node_Str"") Long id){
  logger.debug(""String_Node_Str"" + id);
  return projectRepository.findOne(id);
}",0.9011857707509882
79853,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody Project create(@RequestBody ProjectDTO projectDTO){
  logger.debug(""String_Node_Str"" + projectDTO);
  Project project=new Project();
  project.setName(projectDTO.getName());
  project.setDescription(projectDTO.getDescription());
  BaseNode projectRef=new BaseNode();
  projectRef.setName(projectDTO.getName());
  projectRef.setNodeType(""String_Node_Str"");
  projectRef.setParentId(""String_Node_Str"");
  BaseNode savedRef=nodeRepository.save(projectRef);
  project.setProjectRef(savedRef);
  return projectRepository.save(project);
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,headers=""String_Node_Str"") public @ResponseBody Project create(@PathVariable(""String_Node_Str"") Long workspaceId,@RequestBody ProjectDTO projectDTO){
  logger.debug(""String_Node_Str"" + projectDTO);
  Project project=new Project();
  project.setName(projectDTO.getName());
  project.setDescription(projectDTO.getDescription());
  Workspace workspace=workspaceRepository.findOne(workspaceId);
  project.setWorkspace(workspace);
  BaseNode projectRef=new BaseNode();
  projectRef.setName(projectDTO.getName());
  projectRef.setNodeType(""String_Node_Str"");
  projectRef.setParentId(Long.valueOf(-1));
  BaseNode savedRef=nodeRepository.save(projectRef);
  project.setProjectRef(savedRef);
  return projectRepository.save(project);
}",0.8736111111111111
79854,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Project update(@PathVariable(""String_Node_Str"") Long id,@RequestBody ProjectDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Project project=projectRepository.findOne(updated.getId());
  project.setName(updated.getName());
  project.setDescription(updated.getDescription());
  return project;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT,headers=""String_Node_Str"") public @ResponseBody Project update(@PathVariable(""String_Node_Str"") Long workspaceId,@PathVariable(""String_Node_Str"") Long id,@RequestBody ProjectDTO updated){
  logger.debug(""String_Node_Str"" + updated);
  Project project=projectRepository.findOne(updated.getId());
  project.setName(updated.getName());
  project.setDescription(updated.getDescription());
  return project;
}",0.9436936936936936
79855,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.DELETE,headers=""String_Node_Str"") public @ResponseBody Project delete(@PathVariable(""String_Node_Str"") Long id){
  logger.debug(""String_Node_Str"" + id);
  Project deleted=projectRepository.findOne(id);
  projectRepository.delete(deleted);
  return deleted;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.DELETE,headers=""String_Node_Str"") public @ResponseBody Project delete(@PathVariable(""String_Node_Str"") Long workspaceId,@PathVariable(""String_Node_Str"") Long id){
  logger.debug(""String_Node_Str"" + id);
  Project deleted=projectRepository.findOne(id);
  projectRepository.delete(deleted);
  return deleted;
}",0.9273255813953488
79856,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody List<Project> findAll(){
  logger.debug(""String_Node_Str"");
  return projectRepository.findAll();
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public @ResponseBody List<Project> findAll(@PathVariable(""String_Node_Str"") Long workspaceId){
  logger.debug(""String_Node_Str"");
  return projectRepository.findAll();
}",0.8836104513064132
79857,"@Query(""String_Node_Str"") public List<BaseNode> getChildren(@Param(""String_Node_Str"") String nodeId);","@Query(""String_Node_Str"") public List<BaseNode> getChildren(@Param(""String_Node_Str"") Long nodeId);",0.97
79858,"@Query(""String_Node_Str"") public BaseNode getParent(@Param(""String_Node_Str"") String parentId);","@Query(""String_Node_Str"") public BaseNode getParent(@Param(""String_Node_Str"") Long parentId);",0.9680851063829788
79859,"public int getPosition(){
  return position;
}","public Long getPosition(){
  return position;
}",0.946236559139785
79860,"public void setParentId(String parentId){
  this.parentId=parentId;
}","public void setParentId(Long parentId){
  this.parentId=parentId;
}",0.9558823529411764
79861,"public String getParentId(){
  return parentId;
}","public Long getParentId(){
  return parentId;
}",0.9375
79862,"public void setPosition(int position){
  this.position=position;
}","public void setPosition(Long position){
  this.position=position;
}",0.962406015037594
79863,"public int randomize(final String filename,final PrintStream log,long seed){
  final long startTime=System.currentTimeMillis();
  RandomSource.seed(seed);
  final boolean raceMode=settings.isRaceMode();
  int checkValue=0;
  if (settings.isLimitPokemon()) {
    romHandler.setPokemonPool(settings.getCurrentRestrictions());
    romHandler.removeEvosForPokemonPool();
  }
 else {
    romHandler.setPokemonPool(null);
  }
  if (settings.isUpdateMoves()) {
    romHandler.initMoveUpdates();
    if (!(romHandler instanceof Gen5RomHandler)) {
      romHandler.updateMovesToGen5();
    }
    if (!settings.isUpdateMovesLegacy()) {
      romHandler.updateMovesToGen6();
    }
    romHandler.printMoveUpdates();
  }
  if (settings.isRandomizeMovePowers()) {
    romHandler.randomizeMovePowers();
  }
  if (settings.isRandomizeMoveAccuracies()) {
    romHandler.randomizeMoveAccuracies();
  }
  if (settings.isRandomizeMovePPs()) {
    romHandler.randomizeMovePPs();
  }
  if (settings.isRandomizeMoveTypes()) {
    romHandler.randomizeMoveTypes();
  }
  if (settings.isRandomizeMoveCategory() && romHandler.hasPhysicalSpecialSplit()) {
    romHandler.randomizeMoveCategory();
  }
  List<Move> moves=romHandler.getMoves();
  int currentMiscTweaks=settings.getCurrentMiscTweaks();
  if (romHandler.miscTweaksAvailable() != 0) {
    int codeTweaksAvailable=romHandler.miscTweaksAvailable();
    List<MiscTweak> tweaksToApply=new ArrayList<MiscTweak>();
    for (    MiscTweak mt : MiscTweak.allTweaks) {
      if ((codeTweaksAvailable & mt.getValue()) > 0 && (currentMiscTweaks & mt.getValue()) > 0) {
        tweaksToApply.add(mt);
      }
    }
    Collections.sort(tweaksToApply);
    for (    MiscTweak mt : tweaksToApply) {
      romHandler.applyMiscTweak(mt);
    }
  }
  if (settings.isUpdateBaseStats()) {
    romHandler.updatePokemonStats();
  }
switch (settings.getBaseStatisticsMod()) {
case SHUFFLE:
    romHandler.shufflePokemonStats(settings.isBaseStatsFollowEvolutions());
  break;
case RANDOM:
romHandler.randomizePokemonStats(settings.isBaseStatsFollowEvolutions());
break;
default :
break;
}
if (settings.isStandardizeEXPCurves()) {
romHandler.standardizeEXPCurves();
}
if (romHandler.abilitiesPerPokemon() > 0 && settings.getAbilitiesMod() == Settings.AbilitiesMod.RANDOMIZE) {
romHandler.randomizeAbilities(settings.isAbilitiesFollowEvolutions(),settings.isAllowWonderGuard(),settings.isBanTrappingAbilities(),settings.isBanNegativeAbilities());
}
switch (settings.getTypesMod()) {
case RANDOM_FOLLOW_EVOLUTIONS:
romHandler.randomizePokemonTypes(true);
break;
case COMPLETELY_RANDOM:
romHandler.randomizePokemonTypes(false);
break;
default :
break;
}
if (settings.isRandomizeWildPokemonHeldItems()) {
romHandler.randomizeWildHeldItems(settings.isBanBadRandomWildPokemonHeldItems());
}
maybeLogBaseStatAndTypeChanges(log,romHandler);
for (Pokemon pkmn : romHandler.getPokemon()) {
if (pkmn != null) {
checkValue=addToCV(checkValue,pkmn.hp,pkmn.attack,pkmn.defense,pkmn.speed,pkmn.spatk,pkmn.spdef,pkmn.ability1,pkmn.ability2,pkmn.ability3);
}
}
if (settings.getEvolutionsMod() == Settings.EvolutionsMod.RANDOM) {
romHandler.randomizeEvolutions(settings.isEvosSimilarStrength(),settings.isEvosSameTyping(),settings.isEvosMaxThreeStages(),settings.isEvosForceChange());
log.println(""String_Node_Str"");
List<Pokemon> allPokes=romHandler.getPokemon();
for (Pokemon pk : allPokes) {
if (pk != null) {
int numEvos=pk.evolutionsFrom.size();
if (numEvos > 0) {
StringBuilder evoStr=new StringBuilder(pk.evolutionsFrom.get(0).to.name);
for (int i=1; i < numEvos; i++) {
if (i == numEvos - 1) {
evoStr.append(""String_Node_Str"" + pk.evolutionsFrom.get(i).to.name);
}
 else {
evoStr.append(""String_Node_Str"" + pk.evolutionsFrom.get(i).to.name);
}
}
log.println(pk.name + ""String_Node_Str"" + evoStr.toString());
}
}
}
log.println();
}
if (settings.isChangeImpossibleEvolutions()) {
romHandler.removeTradeEvolutions(!(settings.getMovesetsMod() == Settings.MovesetsMod.UNCHANGED));
}
if (settings.isMakeEvolutionsEasier()) {
romHandler.condenseLevelEvolutions(40,30);
}
maybeChangeAndLogStarters(log,romHandler);
maybeLogMoveChanges(log,romHandler);
boolean noBrokenMoves=settings.doBlockBrokenMoves();
boolean forceFourLv1s=romHandler.supportsFourStartingMoves() && settings.isStartWithFourMoves();
double msGoodDamagingProb=settings.isMovesetsForceGoodDamaging() ? settings.getMovesetsGoodDamagingPercent() / 100.0 : 0;
if (settings.getMovesetsMod() == Settings.MovesetsMod.RANDOM_PREFER_SAME_TYPE) {
romHandler.randomizeMovesLearnt(true,noBrokenMoves,forceFourLv1s,msGoodDamagingProb);
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.COMPLETELY_RANDOM) {
romHandler.randomizeMovesLearnt(false,noBrokenMoves,forceFourLv1s,msGoodDamagingProb);
}
if (settings.isReorderDamagingMoves()) {
romHandler.orderDamagingMovesByDamage();
}
if (settings.getMovesetsMod() == Settings.MovesetsMod.UNCHANGED) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else {
log.println(""String_Node_Str"");
List<String> movesets=new ArrayList<String>();
Map<Pokemon,List<MoveLearnt>> moveData=romHandler.getMovesLearnt();
for (Pokemon pkmn : moveData.keySet()) {
StringBuilder sb=new StringBuilder();
sb.append(String.format(""String_Node_Str"",pkmn.number,pkmn.name));
List<MoveLearnt> data=moveData.get(pkmn);
boolean first=true;
for (MoveLearnt ml : data) {
if (!first) {
sb.append(""String_Node_Str"");
}
try {
sb.append(moves.get(ml.move).name).append(""String_Node_Str"").append(ml.level);
}
 catch (NullPointerException ex) {
sb.append(""String_Node_Str"" + ml.level);
}
first=false;
}
movesets.add(sb.toString());
}
Collections.sort(movesets);
for (String moveset : movesets) {
log.println(moveset);
}
log.println();
}
if (settings.getTrainersMod() == Settings.TrainersMod.RANDOM) {
romHandler.randomizeTrainerPokes(settings.isTrainersUsePokemonOfSimilarStrength(),settings.isTrainersBlockLegendaries(),settings.isTrainersBlockEarlyWonderGuard());
}
 else if (settings.getTrainersMod() == Settings.TrainersMod.TYPE_THEMED) {
romHandler.typeThemeTrainerPokes(settings.isTrainersUsePokemonOfSimilarStrength(),settings.isTrainersMatchTypingDistribution(),settings.isTrainersBlockLegendaries(),settings.isTrainersBlockEarlyWonderGuard());
}
if ((settings.getTrainersMod() != Settings.TrainersMod.UNCHANGED || settings.getStartersMod() != Settings.StartersMod.UNCHANGED) && settings.isRivalCarriesStarterThroughout()) {
romHandler.rivalCarriesStarter();
}
if (settings.isTrainersForceFullyEvolved()) {
romHandler.forceFullyEvolvedTrainerPokes(settings.getTrainersForceFullyEvolvedLevel());
}
if (settings.isRandomizeTrainerClassNames()) {
romHandler.randomizeTrainerClassNames(settings.getTrainerClasses());
}
if (settings.isRandomizeTrainerNames()) {
romHandler.randomizeTrainerNames(settings.getTrainerNames());
}
maybeLogTrainerChanges(log,romHandler);
if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
romHandler.metronomeOnlyMode();
}
List<Trainer> trainers=romHandler.getTrainers();
for (Trainer t : trainers) {
for (TrainerPokemon tpk : t.pokemon) {
checkValue=addToCV(checkValue,tpk.level,tpk.pokemon.number);
}
}
checkValue=maybeChangeAndLogStaticPokemon(log,romHandler,raceMode,checkValue);
if (settings.isUseMinimumCatchRate()) {
boolean gen5=romHandler instanceof Gen5RomHandler;
int normalMin, legendaryMin;
switch (settings.getMinimumCatchRateLevel()) {
case 1:
default :
normalMin=gen5 ? 50 : 75;
legendaryMin=gen5 ? 25 : 37;
break;
case 2:
normalMin=gen5 ? 100 : 128;
legendaryMin=gen5 ? 45 : 64;
break;
case 3:
normalMin=gen5 ? 180 : 200;
legendaryMin=gen5 ? 75 : 100;
break;
case 4:
normalMin=legendaryMin=255;
break;
}
romHandler.minimumCatchRate(normalMin,legendaryMin);
}
switch (settings.getWildPokemonMod()) {
case RANDOM:
romHandler.randomEncounters(settings.isUseTimeBasedEncounters(),settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.CATCH_EM_ALL,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.TYPE_THEME_AREAS,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.SIMILAR_STRENGTH,settings.isBlockWildLegendaries());
break;
case AREA_MAPPING:
romHandler.area1to1Encounters(settings.isUseTimeBasedEncounters(),settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.CATCH_EM_ALL,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.TYPE_THEME_AREAS,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.SIMILAR_STRENGTH,settings.isBlockWildLegendaries());
break;
case GLOBAL_MAPPING:
romHandler.game1to1Encounters(settings.isUseTimeBasedEncounters(),settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.SIMILAR_STRENGTH,settings.isBlockWildLegendaries());
break;
default :
break;
}
maybeLogWildPokemonChanges(log,romHandler);
List<EncounterSet> encounters=romHandler.getEncounters(settings.isUseTimeBasedEncounters());
for (EncounterSet es : encounters) {
for (Encounter e : es.encounters) {
checkValue=addToCV(checkValue,e.level,e.pokemon.number);
}
}
if (!(settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) && settings.getTmsMod() == Settings.TMsMod.RANDOM) {
double goodDamagingProb=settings.isTmsForceGoodDamaging() ? settings.getTmsGoodDamagingPercent() / 100.0 : 0;
romHandler.randomizeTMMoves(noBrokenMoves,settings.isKeepFieldMoveTMs(),goodDamagingProb);
log.println(""String_Node_Str"");
List<Integer> tmMoves=romHandler.getTMMoves();
for (int i=0; i < tmMoves.size(); i++) {
log.printf(""String_Node_Str"" + NEWLINE,i + 1,moves.get(tmMoves.get(i)).name);
checkValue=addToCV(checkValue,tmMoves.get(i));
}
log.println();
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else {
log.println(""String_Node_Str"" + NEWLINE);
}
switch (settings.getTmsHmsCompatibilityMod()) {
case RANDOM_PREFER_TYPE:
romHandler.randomizeTMHMCompatibility(true);
break;
case COMPLETELY_RANDOM:
romHandler.randomizeTMHMCompatibility(false);
break;
case FULL:
romHandler.fullTMHMCompatibility();
break;
default :
break;
}
if (settings.isTmLevelUpMoveSanity()) {
romHandler.ensureTMCompatSanity();
}
if (settings.isFullHMCompat()) {
romHandler.fullHMCompatibility();
}
if (romHandler.hasMoveTutors()) {
if (!(settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) && settings.getMoveTutorMovesMod() == Settings.MoveTutorMovesMod.RANDOM) {
List<Integer> oldMtMoves=romHandler.getMoveTutorMoves();
double goodDamagingProb=settings.isTutorsForceGoodDamaging() ? settings.getTutorsGoodDamagingPercent() / 100.0 : 0;
romHandler.randomizeMoveTutorMoves(noBrokenMoves,settings.isKeepFieldMoveTutors(),goodDamagingProb);
log.println(""String_Node_Str"");
List<Integer> newMtMoves=romHandler.getMoveTutorMoves();
for (int i=0; i < newMtMoves.size(); i++) {
log.printf(""String_Node_Str"" + NEWLINE,moves.get(oldMtMoves.get(i)).name,moves.get(newMtMoves.get(i)).name);
checkValue=addToCV(checkValue,newMtMoves.get(i));
}
log.println();
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else {
log.println(""String_Node_Str"" + NEWLINE);
}
switch (settings.getMoveTutorsCompatibilityMod()) {
case RANDOM_PREFER_TYPE:
romHandler.randomizeMoveTutorCompatibility(true);
break;
case COMPLETELY_RANDOM:
romHandler.randomizeMoveTutorCompatibility(false);
break;
case FULL:
romHandler.fullMoveTutorCompatibility();
break;
default :
break;
}
if (settings.isTutorLevelUpMoveSanity()) {
romHandler.ensureMoveTutorCompatSanity();
}
}
List<IngameTrade> oldTrades=romHandler.getIngameTrades();
if (settings.getInGameTradesMod() == Settings.InGameTradesMod.RANDOMIZE_GIVEN) {
romHandler.randomizeIngameTrades(false,settings.getNicknames(),settings.isRandomizeInGameTradesNicknames(),settings.getTrainerNames(),settings.isRandomizeInGameTradesOTs(),settings.isRandomizeInGameTradesIVs(),settings.isRandomizeInGameTradesItems());
}
 else if (settings.getInGameTradesMod() == Settings.InGameTradesMod.RANDOMIZE_GIVEN_AND_REQUESTED) {
romHandler.randomizeIngameTrades(true,settings.getNicknames(),settings.isRandomizeInGameTradesNicknames(),settings.getTrainerNames(),settings.isRandomizeInGameTradesOTs(),settings.isRandomizeInGameTradesIVs(),settings.isRandomizeInGameTradesItems());
}
if (!(settings.getInGameTradesMod() == Settings.InGameTradesMod.UNCHANGED)) {
log.println(""String_Node_Str"");
List<IngameTrade> newTrades=romHandler.getIngameTrades();
int size=oldTrades.size();
for (int i=0; i < size; i++) {
IngameTrade oldT=oldTrades.get(i);
IngameTrade newT=newTrades.get(i);
log.printf(""String_Node_Str"" + NEWLINE,oldT.requestedPokemon.name,oldT.nickname,oldT.givenPokemon.name,newT.requestedPokemon.name,newT.nickname,newT.givenPokemon.name);
}
log.println();
}
if (settings.getFieldItemsMod() == Settings.FieldItemsMod.SHUFFLE) {
romHandler.shuffleFieldItems();
}
 else if (settings.getFieldItemsMod() == Settings.FieldItemsMod.RANDOM) {
romHandler.randomizeFieldItems(settings.isBanBadRandomFieldItems());
}
romHandler.applySignature();
romHandler.writeCheckValueToROM(checkValue);
romHandler.saveRom(filename);
log.println(""String_Node_Str"");
log.println(""String_Node_Str"" + romHandler.getROMName() + ""String_Node_Str"");
log.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
log.println(""String_Node_Str"" + RandomSource.callsSinceSeed());
log.println(""String_Node_Str"");
return checkValue;
}","public int randomize(final String filename,final PrintStream log,long seed){
  final long startTime=System.currentTimeMillis();
  RandomSource.seed(seed);
  final boolean raceMode=settings.isRaceMode();
  int checkValue=0;
  if (settings.isLimitPokemon()) {
    romHandler.setPokemonPool(settings.getCurrentRestrictions());
    romHandler.removeEvosForPokemonPool();
  }
 else {
    romHandler.setPokemonPool(null);
  }
  if (settings.isUpdateMoves()) {
    romHandler.initMoveUpdates();
    if (!(romHandler instanceof Gen5RomHandler)) {
      romHandler.updateMovesToGen5();
    }
    if (!settings.isUpdateMovesLegacy()) {
      romHandler.updateMovesToGen6();
    }
    romHandler.printMoveUpdates();
  }
  if (settings.isRandomizeMovePowers()) {
    romHandler.randomizeMovePowers();
  }
  if (settings.isRandomizeMoveAccuracies()) {
    romHandler.randomizeMoveAccuracies();
  }
  if (settings.isRandomizeMovePPs()) {
    romHandler.randomizeMovePPs();
  }
  if (settings.isRandomizeMoveTypes()) {
    romHandler.randomizeMoveTypes();
  }
  if (settings.isRandomizeMoveCategory() && romHandler.hasPhysicalSpecialSplit()) {
    romHandler.randomizeMoveCategory();
  }
  List<Move> moves=romHandler.getMoves();
  int currentMiscTweaks=settings.getCurrentMiscTweaks();
  if (romHandler.miscTweaksAvailable() != 0) {
    int codeTweaksAvailable=romHandler.miscTweaksAvailable();
    List<MiscTweak> tweaksToApply=new ArrayList<MiscTweak>();
    for (    MiscTweak mt : MiscTweak.allTweaks) {
      if ((codeTweaksAvailable & mt.getValue()) > 0 && (currentMiscTweaks & mt.getValue()) > 0) {
        tweaksToApply.add(mt);
      }
    }
    Collections.sort(tweaksToApply);
    for (    MiscTweak mt : tweaksToApply) {
      romHandler.applyMiscTweak(mt);
    }
  }
  if (settings.isUpdateBaseStats()) {
    romHandler.updatePokemonStats();
  }
switch (settings.getBaseStatisticsMod()) {
case SHUFFLE:
    romHandler.shufflePokemonStats(settings.isBaseStatsFollowEvolutions());
  break;
case RANDOM:
romHandler.randomizePokemonStats(settings.isBaseStatsFollowEvolutions());
break;
default :
break;
}
if (settings.isStandardizeEXPCurves()) {
romHandler.standardizeEXPCurves();
}
if (romHandler.abilitiesPerPokemon() > 0 && settings.getAbilitiesMod() == Settings.AbilitiesMod.RANDOMIZE) {
romHandler.randomizeAbilities(settings.isAbilitiesFollowEvolutions(),settings.isAllowWonderGuard(),settings.isBanTrappingAbilities(),settings.isBanNegativeAbilities());
}
switch (settings.getTypesMod()) {
case RANDOM_FOLLOW_EVOLUTIONS:
romHandler.randomizePokemonTypes(true);
break;
case COMPLETELY_RANDOM:
romHandler.randomizePokemonTypes(false);
break;
default :
break;
}
if (settings.isRandomizeWildPokemonHeldItems()) {
romHandler.randomizeWildHeldItems(settings.isBanBadRandomWildPokemonHeldItems());
}
maybeLogBaseStatAndTypeChanges(log,romHandler);
for (Pokemon pkmn : romHandler.getPokemon()) {
if (pkmn != null) {
checkValue=addToCV(checkValue,pkmn.hp,pkmn.attack,pkmn.defense,pkmn.speed,pkmn.spatk,pkmn.spdef,pkmn.ability1,pkmn.ability2,pkmn.ability3);
}
}
if (settings.getEvolutionsMod() == Settings.EvolutionsMod.RANDOM) {
romHandler.randomizeEvolutions(settings.isEvosSimilarStrength(),settings.isEvosSameTyping(),settings.isEvosMaxThreeStages(),settings.isEvosForceChange());
log.println(""String_Node_Str"");
List<Pokemon> allPokes=romHandler.getPokemon();
for (Pokemon pk : allPokes) {
if (pk != null) {
int numEvos=pk.evolutionsFrom.size();
if (numEvos > 0) {
StringBuilder evoStr=new StringBuilder(pk.evolutionsFrom.get(0).to.name);
for (int i=1; i < numEvos; i++) {
if (i == numEvos - 1) {
evoStr.append(""String_Node_Str"" + pk.evolutionsFrom.get(i).to.name);
}
 else {
evoStr.append(""String_Node_Str"" + pk.evolutionsFrom.get(i).to.name);
}
}
log.println(pk.name + ""String_Node_Str"" + evoStr.toString());
}
}
}
log.println();
}
if (settings.isChangeImpossibleEvolutions()) {
romHandler.removeTradeEvolutions(!(settings.getMovesetsMod() == Settings.MovesetsMod.UNCHANGED));
}
if (settings.isMakeEvolutionsEasier()) {
romHandler.condenseLevelEvolutions(40,30);
}
maybeChangeAndLogStarters(log,romHandler);
maybeLogMoveChanges(log,romHandler);
boolean noBrokenMoves=settings.doBlockBrokenMoves();
boolean forceFourLv1s=romHandler.supportsFourStartingMoves() && settings.isStartWithFourMoves();
double msGoodDamagingProb=settings.isMovesetsForceGoodDamaging() ? settings.getMovesetsGoodDamagingPercent() / 100.0 : 0;
if (settings.getMovesetsMod() == Settings.MovesetsMod.RANDOM_PREFER_SAME_TYPE) {
romHandler.randomizeMovesLearnt(true,noBrokenMoves,forceFourLv1s,msGoodDamagingProb);
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.COMPLETELY_RANDOM) {
romHandler.randomizeMovesLearnt(false,noBrokenMoves,forceFourLv1s,msGoodDamagingProb);
}
if (settings.isReorderDamagingMoves()) {
romHandler.orderDamagingMovesByDamage();
}
if (settings.getMovesetsMod() == Settings.MovesetsMod.UNCHANGED) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else {
log.println(""String_Node_Str"");
List<String> movesets=new ArrayList<String>();
Map<Pokemon,List<MoveLearnt>> moveData=romHandler.getMovesLearnt();
for (Pokemon pkmn : moveData.keySet()) {
StringBuilder sb=new StringBuilder();
sb.append(String.format(""String_Node_Str"",pkmn.number,pkmn.name));
List<MoveLearnt> data=moveData.get(pkmn);
boolean first=true;
for (MoveLearnt ml : data) {
if (!first) {
sb.append(""String_Node_Str"");
}
try {
sb.append(moves.get(ml.move).name).append(""String_Node_Str"").append(ml.level);
}
 catch (NullPointerException ex) {
sb.append(""String_Node_Str"" + ml.level);
}
first=false;
}
movesets.add(sb.toString());
}
Collections.sort(movesets);
for (String moveset : movesets) {
log.println(moveset);
}
log.println();
}
if (settings.getTrainersMod() == Settings.TrainersMod.RANDOM) {
romHandler.randomizeTrainerPokes(settings.isTrainersUsePokemonOfSimilarStrength(),settings.isTrainersBlockLegendaries(),settings.isTrainersBlockEarlyWonderGuard());
}
 else if (settings.getTrainersMod() == Settings.TrainersMod.TYPE_THEMED) {
romHandler.typeThemeTrainerPokes(settings.isTrainersUsePokemonOfSimilarStrength(),settings.isTrainersMatchTypingDistribution(),settings.isTrainersBlockLegendaries(),settings.isTrainersBlockEarlyWonderGuard());
}
if ((settings.getTrainersMod() != Settings.TrainersMod.UNCHANGED || settings.getStartersMod() != Settings.StartersMod.UNCHANGED) && settings.isRivalCarriesStarterThroughout()) {
romHandler.rivalCarriesStarter();
}
if (settings.isTrainersForceFullyEvolved()) {
romHandler.forceFullyEvolvedTrainerPokes(settings.getTrainersForceFullyEvolvedLevel());
}
if (romHandler.canChangeTrainerText()) {
if (settings.isRandomizeTrainerClassNames()) {
romHandler.randomizeTrainerClassNames(settings.getTrainerClasses());
}
if (settings.isRandomizeTrainerNames()) {
romHandler.randomizeTrainerNames(settings.getTrainerNames());
}
}
maybeLogTrainerChanges(log,romHandler);
if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
romHandler.metronomeOnlyMode();
}
List<Trainer> trainers=romHandler.getTrainers();
for (Trainer t : trainers) {
for (TrainerPokemon tpk : t.pokemon) {
checkValue=addToCV(checkValue,tpk.level,tpk.pokemon.number);
}
}
checkValue=maybeChangeAndLogStaticPokemon(log,romHandler,raceMode,checkValue);
if (settings.isUseMinimumCatchRate()) {
boolean gen5=romHandler instanceof Gen5RomHandler;
int normalMin, legendaryMin;
switch (settings.getMinimumCatchRateLevel()) {
case 1:
default :
normalMin=gen5 ? 50 : 75;
legendaryMin=gen5 ? 25 : 37;
break;
case 2:
normalMin=gen5 ? 100 : 128;
legendaryMin=gen5 ? 45 : 64;
break;
case 3:
normalMin=gen5 ? 180 : 200;
legendaryMin=gen5 ? 75 : 100;
break;
case 4:
normalMin=legendaryMin=255;
break;
}
romHandler.minimumCatchRate(normalMin,legendaryMin);
}
switch (settings.getWildPokemonMod()) {
case RANDOM:
romHandler.randomEncounters(settings.isUseTimeBasedEncounters(),settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.CATCH_EM_ALL,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.TYPE_THEME_AREAS,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.SIMILAR_STRENGTH,settings.isBlockWildLegendaries());
break;
case AREA_MAPPING:
romHandler.area1to1Encounters(settings.isUseTimeBasedEncounters(),settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.CATCH_EM_ALL,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.TYPE_THEME_AREAS,settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.SIMILAR_STRENGTH,settings.isBlockWildLegendaries());
break;
case GLOBAL_MAPPING:
romHandler.game1to1Encounters(settings.isUseTimeBasedEncounters(),settings.getWildPokemonRestrictionMod() == Settings.WildPokemonRestrictionMod.SIMILAR_STRENGTH,settings.isBlockWildLegendaries());
break;
default :
break;
}
maybeLogWildPokemonChanges(log,romHandler);
List<EncounterSet> encounters=romHandler.getEncounters(settings.isUseTimeBasedEncounters());
for (EncounterSet es : encounters) {
for (Encounter e : es.encounters) {
checkValue=addToCV(checkValue,e.level,e.pokemon.number);
}
}
if (!(settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) && settings.getTmsMod() == Settings.TMsMod.RANDOM) {
double goodDamagingProb=settings.isTmsForceGoodDamaging() ? settings.getTmsGoodDamagingPercent() / 100.0 : 0;
romHandler.randomizeTMMoves(noBrokenMoves,settings.isKeepFieldMoveTMs(),goodDamagingProb);
log.println(""String_Node_Str"");
List<Integer> tmMoves=romHandler.getTMMoves();
for (int i=0; i < tmMoves.size(); i++) {
log.printf(""String_Node_Str"" + NEWLINE,i + 1,moves.get(tmMoves.get(i)).name);
checkValue=addToCV(checkValue,tmMoves.get(i));
}
log.println();
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else {
log.println(""String_Node_Str"" + NEWLINE);
}
switch (settings.getTmsHmsCompatibilityMod()) {
case RANDOM_PREFER_TYPE:
romHandler.randomizeTMHMCompatibility(true);
break;
case COMPLETELY_RANDOM:
romHandler.randomizeTMHMCompatibility(false);
break;
case FULL:
romHandler.fullTMHMCompatibility();
break;
default :
break;
}
if (settings.isTmLevelUpMoveSanity()) {
romHandler.ensureTMCompatSanity();
}
if (settings.isFullHMCompat()) {
romHandler.fullHMCompatibility();
}
if (romHandler.hasMoveTutors()) {
if (!(settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) && settings.getMoveTutorMovesMod() == Settings.MoveTutorMovesMod.RANDOM) {
List<Integer> oldMtMoves=romHandler.getMoveTutorMoves();
double goodDamagingProb=settings.isTutorsForceGoodDamaging() ? settings.getTutorsGoodDamagingPercent() / 100.0 : 0;
romHandler.randomizeMoveTutorMoves(noBrokenMoves,settings.isKeepFieldMoveTutors(),goodDamagingProb);
log.println(""String_Node_Str"");
List<Integer> newMtMoves=romHandler.getMoveTutorMoves();
for (int i=0; i < newMtMoves.size(); i++) {
log.printf(""String_Node_Str"" + NEWLINE,moves.get(oldMtMoves.get(i)).name,moves.get(newMtMoves.get(i)).name);
checkValue=addToCV(checkValue,newMtMoves.get(i));
}
log.println();
}
 else if (settings.getMovesetsMod() == Settings.MovesetsMod.METRONOME_ONLY) {
log.println(""String_Node_Str"" + NEWLINE);
}
 else {
log.println(""String_Node_Str"" + NEWLINE);
}
switch (settings.getMoveTutorsCompatibilityMod()) {
case RANDOM_PREFER_TYPE:
romHandler.randomizeMoveTutorCompatibility(true);
break;
case COMPLETELY_RANDOM:
romHandler.randomizeMoveTutorCompatibility(false);
break;
case FULL:
romHandler.fullMoveTutorCompatibility();
break;
default :
break;
}
if (settings.isTutorLevelUpMoveSanity()) {
romHandler.ensureMoveTutorCompatSanity();
}
}
List<IngameTrade> oldTrades=romHandler.getIngameTrades();
if (settings.getInGameTradesMod() == Settings.InGameTradesMod.RANDOMIZE_GIVEN) {
romHandler.randomizeIngameTrades(false,settings.getNicknames(),settings.isRandomizeInGameTradesNicknames(),settings.getTrainerNames(),settings.isRandomizeInGameTradesOTs(),settings.isRandomizeInGameTradesIVs(),settings.isRandomizeInGameTradesItems());
}
 else if (settings.getInGameTradesMod() == Settings.InGameTradesMod.RANDOMIZE_GIVEN_AND_REQUESTED) {
romHandler.randomizeIngameTrades(true,settings.getNicknames(),settings.isRandomizeInGameTradesNicknames(),settings.getTrainerNames(),settings.isRandomizeInGameTradesOTs(),settings.isRandomizeInGameTradesIVs(),settings.isRandomizeInGameTradesItems());
}
if (!(settings.getInGameTradesMod() == Settings.InGameTradesMod.UNCHANGED)) {
log.println(""String_Node_Str"");
List<IngameTrade> newTrades=romHandler.getIngameTrades();
int size=oldTrades.size();
for (int i=0; i < size; i++) {
IngameTrade oldT=oldTrades.get(i);
IngameTrade newT=newTrades.get(i);
log.printf(""String_Node_Str"" + NEWLINE,oldT.requestedPokemon.name,oldT.nickname,oldT.givenPokemon.name,newT.requestedPokemon.name,newT.nickname,newT.givenPokemon.name);
}
log.println();
}
if (settings.getFieldItemsMod() == Settings.FieldItemsMod.SHUFFLE) {
romHandler.shuffleFieldItems();
}
 else if (settings.getFieldItemsMod() == Settings.FieldItemsMod.RANDOM) {
romHandler.randomizeFieldItems(settings.isBanBadRandomFieldItems());
}
romHandler.applySignature();
romHandler.writeCheckValueToROM(checkValue);
romHandler.saveRom(filename);
log.println(""String_Node_Str"");
log.println(""String_Node_Str"" + romHandler.getROMName() + ""String_Node_Str"");
log.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
log.println(""String_Node_Str"" + RandomSource.callsSinceSeed());
log.println(""String_Node_Str"");
return checkValue;
}",0.998420685349102
79864,"@Override public void area1to1Encounters(boolean useTimeOfDay,boolean catchEmAll,boolean typeThemed,boolean usePowerLevels,boolean noLegendaries){
  checkPokemonRestrictions();
  List<EncounterSet> currentEncounters=this.getEncounters(useTimeOfDay);
  List<Pokemon> banned=this.bannedForWildEncounters();
  List<EncounterSet> scrambledEncounters=new ArrayList<EncounterSet>(currentEncounters);
  Collections.shuffle(scrambledEncounters,this.random);
  if (catchEmAll) {
    List<Pokemon> allPokes=noLegendaries ? new ArrayList<Pokemon>(noLegendaryList) : new ArrayList<Pokemon>(mainPokemonList);
    allPokes.removeAll(banned);
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      List<Pokemon> pickablePokemon=allPokes;
      if (area.bannedPokemon.size() > 0) {
        pickablePokemon=new ArrayList<Pokemon>(allPokes);
        pickablePokemon.removeAll(area.bannedPokemon);
      }
      for (      Pokemon areaPk : inArea) {
        if (pickablePokemon.size() == 0) {
          List<Pokemon> tempPickable=noLegendaries ? new ArrayList<Pokemon>(noLegendaryList) : new ArrayList<Pokemon>(mainPokemonList);
          tempPickable.removeAll(banned);
          tempPickable.removeAll(area.bannedPokemon);
          if (tempPickable.size() == 0) {
            throw new RandomizationException(""String_Node_Str"");
          }
          int picked=this.random.nextInt(tempPickable.size());
          Pokemon pickedMN=tempPickable.get(picked);
          areaMap.put(areaPk,pickedMN);
        }
 else {
          int picked=this.random.nextInt(allPokes.size());
          Pokemon pickedMN=allPokes.get(picked);
          areaMap.put(areaPk,pickedMN);
          pickablePokemon.remove(picked);
          if (allPokes != pickablePokemon) {
            allPokes.remove(pickedMN);
          }
          if (allPokes.size() == 0) {
            allPokes.addAll(noLegendaries ? noLegendaryList : mainPokemonList);
            allPokes.removeAll(banned);
            if (pickablePokemon != allPokes) {
              pickablePokemon.addAll(allPokes);
              pickablePokemon.removeAll(area.bannedPokemon);
            }
          }
        }
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
 else   if (typeThemed) {
    Map<Type,List<Pokemon>> cachedPokeLists=new TreeMap<Type,List<Pokemon>>();
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      List<Pokemon> possiblePokemon=null;
      int iterLoops=0;
      while (possiblePokemon == null && iterLoops < 10000) {
        Type areaTheme=randomType();
        if (!cachedPokeLists.containsKey(areaTheme)) {
          List<Pokemon> pType=pokemonOfType(areaTheme,noLegendaries);
          pType.removeAll(banned);
          cachedPokeLists.put(areaTheme,pType);
        }
        possiblePokemon=new ArrayList<Pokemon>(cachedPokeLists.get(areaTheme));
        if (area.bannedPokemon.size() > 0) {
          possiblePokemon.removeAll(area.bannedPokemon);
        }
        if (possiblePokemon.size() < inArea.size()) {
          possiblePokemon=null;
        }
        iterLoops++;
      }
      if (possiblePokemon == null) {
        throw new RandomizationException(""String_Node_Str"");
      }
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      for (      Pokemon areaPk : inArea) {
        int picked=this.random.nextInt(possiblePokemon.size());
        Pokemon pickedMN=possiblePokemon.get(picked);
        areaMap.put(areaPk,pickedMN);
        possiblePokemon.remove(picked);
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
 else   if (usePowerLevels) {
    List<Pokemon> allowedPokes=noLegendaries ? new ArrayList<Pokemon>(noLegendaryList) : new ArrayList<Pokemon>(mainPokemonList);
    allowedPokes.removeAll(banned);
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      List<Pokemon> usedPks=new ArrayList<Pokemon>();
      List<Pokemon> localAllowed=allowedPokes;
      if (area.bannedPokemon.size() > 0) {
        localAllowed=new ArrayList<Pokemon>(allowedPokes);
        localAllowed.removeAll(area.bannedPokemon);
      }
      for (      Pokemon areaPk : inArea) {
        Pokemon picked=pickWildPowerLvlReplacement(localAllowed,areaPk,false,usedPks);
        areaMap.put(areaPk,picked);
        usedPks.add(picked);
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
 else {
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      for (      Pokemon areaPk : inArea) {
        Pokemon picked=noLegendaries ? randomNonLegendaryPokemon() : randomPokemon();
        while (areaMap.containsValue(picked) || banned.contains(picked) || area.bannedPokemon.contains(picked)) {
          picked=noLegendaries ? randomNonLegendaryPokemon() : randomPokemon();
        }
        areaMap.put(areaPk,picked);
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
  setEncounters(useTimeOfDay,currentEncounters);
}","@Override public void area1to1Encounters(boolean useTimeOfDay,boolean catchEmAll,boolean typeThemed,boolean usePowerLevels,boolean noLegendaries){
  checkPokemonRestrictions();
  List<EncounterSet> currentEncounters=this.getEncounters(useTimeOfDay);
  List<Pokemon> banned=this.bannedForWildEncounters();
  List<EncounterSet> scrambledEncounters=new ArrayList<EncounterSet>(currentEncounters);
  Collections.shuffle(scrambledEncounters,this.random);
  if (catchEmAll) {
    List<Pokemon> allPokes=noLegendaries ? new ArrayList<Pokemon>(noLegendaryList) : new ArrayList<Pokemon>(mainPokemonList);
    allPokes.removeAll(banned);
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      List<Pokemon> pickablePokemon=allPokes;
      if (area.bannedPokemon.size() > 0) {
        pickablePokemon=new ArrayList<Pokemon>(allPokes);
        pickablePokemon.removeAll(area.bannedPokemon);
      }
      for (      Pokemon areaPk : inArea) {
        if (pickablePokemon.size() == 0) {
          List<Pokemon> tempPickable=noLegendaries ? new ArrayList<Pokemon>(noLegendaryList) : new ArrayList<Pokemon>(mainPokemonList);
          tempPickable.removeAll(banned);
          tempPickable.removeAll(area.bannedPokemon);
          if (tempPickable.size() == 0) {
            throw new RandomizationException(""String_Node_Str"");
          }
          int picked=this.random.nextInt(tempPickable.size());
          Pokemon pickedMN=tempPickable.get(picked);
          areaMap.put(areaPk,pickedMN);
        }
 else {
          int picked=this.random.nextInt(allPokes.size());
          Pokemon pickedMN=allPokes.get(picked);
          areaMap.put(areaPk,pickedMN);
          pickablePokemon.remove(pickedMN);
          if (allPokes != pickablePokemon) {
            allPokes.remove(pickedMN);
          }
          if (allPokes.size() == 0) {
            allPokes.addAll(noLegendaries ? noLegendaryList : mainPokemonList);
            allPokes.removeAll(banned);
            if (pickablePokemon != allPokes) {
              pickablePokemon.addAll(allPokes);
              pickablePokemon.removeAll(area.bannedPokemon);
            }
          }
        }
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
 else   if (typeThemed) {
    Map<Type,List<Pokemon>> cachedPokeLists=new TreeMap<Type,List<Pokemon>>();
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      List<Pokemon> possiblePokemon=null;
      int iterLoops=0;
      while (possiblePokemon == null && iterLoops < 10000) {
        Type areaTheme=randomType();
        if (!cachedPokeLists.containsKey(areaTheme)) {
          List<Pokemon> pType=pokemonOfType(areaTheme,noLegendaries);
          pType.removeAll(banned);
          cachedPokeLists.put(areaTheme,pType);
        }
        possiblePokemon=new ArrayList<Pokemon>(cachedPokeLists.get(areaTheme));
        if (area.bannedPokemon.size() > 0) {
          possiblePokemon.removeAll(area.bannedPokemon);
        }
        if (possiblePokemon.size() < inArea.size()) {
          possiblePokemon=null;
        }
        iterLoops++;
      }
      if (possiblePokemon == null) {
        throw new RandomizationException(""String_Node_Str"");
      }
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      for (      Pokemon areaPk : inArea) {
        int picked=this.random.nextInt(possiblePokemon.size());
        Pokemon pickedMN=possiblePokemon.get(picked);
        areaMap.put(areaPk,pickedMN);
        possiblePokemon.remove(picked);
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
 else   if (usePowerLevels) {
    List<Pokemon> allowedPokes=noLegendaries ? new ArrayList<Pokemon>(noLegendaryList) : new ArrayList<Pokemon>(mainPokemonList);
    allowedPokes.removeAll(banned);
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      List<Pokemon> usedPks=new ArrayList<Pokemon>();
      List<Pokemon> localAllowed=allowedPokes;
      if (area.bannedPokemon.size() > 0) {
        localAllowed=new ArrayList<Pokemon>(allowedPokes);
        localAllowed.removeAll(area.bannedPokemon);
      }
      for (      Pokemon areaPk : inArea) {
        Pokemon picked=pickWildPowerLvlReplacement(localAllowed,areaPk,false,usedPks);
        areaMap.put(areaPk,picked);
        usedPks.add(picked);
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
 else {
    for (    EncounterSet area : scrambledEncounters) {
      Set<Pokemon> inArea=pokemonInArea(area);
      Map<Pokemon,Pokemon> areaMap=new TreeMap<Pokemon,Pokemon>();
      for (      Pokemon areaPk : inArea) {
        Pokemon picked=noLegendaries ? randomNonLegendaryPokemon() : randomPokemon();
        while (areaMap.containsValue(picked) || banned.contains(picked) || area.bannedPokemon.contains(picked)) {
          picked=noLegendaries ? randomNonLegendaryPokemon() : randomPokemon();
        }
        areaMap.put(areaPk,picked);
      }
      for (      Encounter enc : area.encounters) {
        enc.pokemon=areaMap.get(enc.pokemon);
      }
    }
  }
  setEncounters(useTimeOfDay,currentEncounters);
}",0.999818016378526
79865,"@Override public List<IngameTrade> getIngameTrades(){
  List<IngameTrade> trades=new ArrayList<IngameTrade>();
  int tableOffset=romEntry.getValue(""String_Node_Str"");
  int tableSize=romEntry.getValue(""String_Node_Str"");
  int nicknameLength=romEntry.getValue(""String_Node_Str"");
  int otLength=romEntry.getValue(""String_Node_Str"");
  int[] unused=romEntry.arrayEntries.get(""String_Node_Str"");
  int unusedOffset=0;
  int entryLength=nicknameLength + otLength + 10;
  for (int entry=0; entry < tableSize; entry++) {
    if (unusedOffset < unused.length && unused[unusedOffset] == entry) {
      unusedOffset++;
      continue;
    }
    IngameTrade trade=new IngameTrade();
    int entryOffset=tableOffset + entry * entryLength;
    trade.requestedPokemon=pokes[rom[entryOffset + 1] & 0xFF];
    trade.givenPokemon=pokes[rom[entryOffset + 2] & 0xFF];
    trade.nickname=readString(entryOffset + 3,nicknameLength);
    int atkdef=rom[entryOffset + 3 + nicknameLength] & 0xFF;
    int spdspc=rom[entryOffset + 4 + nicknameLength] & 0xFF;
    trade.ivs=new int[]{(atkdef >> 4) & 0xF,atkdef & 0xF,(spdspc >> 4) & 0xF,spdspc & 0xF};
    trade.item=rom[entryOffset + 5 + nicknameLength] & 0xFF;
    trade.otId=readWord(entryOffset + 6 + nicknameLength);
    trade.otName=readString(entryOffset + 8 + nicknameLength,otLength);
    trades.add(trade);
  }
  return trades;
}","@Override public List<IngameTrade> getIngameTrades(){
  List<IngameTrade> trades=new ArrayList<IngameTrade>();
  int tableOffset=romEntry.getValue(""String_Node_Str"");
  int tableSize=romEntry.getValue(""String_Node_Str"");
  int nicknameLength=romEntry.getValue(""String_Node_Str"");
  int otLength=romEntry.getValue(""String_Node_Str"");
  int[] unused=romEntry.arrayEntries.get(""String_Node_Str"");
  int unusedOffset=0;
  int entryLength=nicknameLength + otLength + 9;
  if (entryLength % 2 != 0) {
    entryLength++;
  }
  for (int entry=0; entry < tableSize; entry++) {
    if (unusedOffset < unused.length && unused[unusedOffset] == entry) {
      unusedOffset++;
      continue;
    }
    IngameTrade trade=new IngameTrade();
    int entryOffset=tableOffset + entry * entryLength;
    trade.requestedPokemon=pokes[rom[entryOffset + 1] & 0xFF];
    trade.givenPokemon=pokes[rom[entryOffset + 2] & 0xFF];
    trade.nickname=readString(entryOffset + 3,nicknameLength);
    int atkdef=rom[entryOffset + 3 + nicknameLength] & 0xFF;
    int spdspc=rom[entryOffset + 4 + nicknameLength] & 0xFF;
    trade.ivs=new int[]{(atkdef >> 4) & 0xF,atkdef & 0xF,(spdspc >> 4) & 0xF,spdspc & 0xF};
    trade.item=rom[entryOffset + 5 + nicknameLength] & 0xFF;
    trade.otId=readWord(entryOffset + 6 + nicknameLength);
    trade.otName=readString(entryOffset + 8 + nicknameLength,otLength);
    trades.add(trade);
  }
  return trades;
}",0.9798705966930266
79866,"public static void applyPatch(byte[] rom,String patchName) throws IOException {
  byte[] patch=getCodeTweakFile(patchName + ""String_Node_Str"");
  int patchlen=patch.length;
  if (patchlen < 8 || patch[0] != 'P' || patch[1] != 'A' || patch[2] != 'T' || patch[3] != 'C' || patch[4] != 'H') {
    throw new IOException(""String_Node_Str"");
  }
  int offset=5;
  while (offset + 2 < patchlen) {
    int writeOffset=readIPSOffset(patch,offset);
    if (writeOffset == 0x454f46) {
      return;
    }
    offset+=3;
    if (offset + 1 >= patchlen) {
      throw new IOException(""String_Node_Str"");
    }
    int size=readIPSSize(patch,offset);
    offset+=2;
    if (size == 0) {
      if (offset + 1 >= patchlen) {
        throw new IOException(""String_Node_Str"");
      }
      int rleSize=readIPSSize(patch,offset);
      if (writeOffset + rleSize > rom.length) {
        throw new IOException(""String_Node_Str"");
      }
      offset+=2;
      if (offset >= patchlen) {
        throw new IOException(""String_Node_Str"");
      }
      byte rleByte=patch[offset++];
      for (int i=writeOffset; i < writeOffset + rleSize; i++) {
        rom[i]=rleByte;
      }
    }
 else {
      if (offset + size > patchlen) {
        throw new IOException(""String_Node_Str"");
      }
      if (writeOffset + size > rom.length) {
        throw new IOException(""String_Node_Str"");
      }
      System.arraycopy(patch,offset,rom,writeOffset,size);
      offset+=size;
    }
  }
  throw new IOException(""String_Node_Str"");
}","public static void applyPatch(byte[] rom,String patchName) throws IOException {
  byte[] patch=getCodeTweakFile(patchName + ""String_Node_Str"");
  System.out.println(patch.length);
  System.out.println(Arrays.toString(patch));
  int patchlen=patch.length;
  if (patchlen < 8 || patch[0] != 'P' || patch[1] != 'A' || patch[2] != 'T' || patch[3] != 'C' || patch[4] != 'H') {
    throw new IOException(""String_Node_Str"");
  }
  int offset=5;
  while (offset + 2 < patchlen) {
    int writeOffset=readIPSOffset(patch,offset);
    if (writeOffset == 0x454f46) {
      return;
    }
    offset+=3;
    if (offset + 1 >= patchlen) {
      throw new IOException(""String_Node_Str"");
    }
    int size=readIPSSize(patch,offset);
    offset+=2;
    if (size == 0) {
      if (offset + 1 >= patchlen) {
        throw new IOException(""String_Node_Str"");
      }
      int rleSize=readIPSSize(patch,offset);
      if (writeOffset + rleSize > rom.length) {
        throw new IOException(""String_Node_Str"");
      }
      offset+=2;
      if (offset >= patchlen) {
        throw new IOException(""String_Node_Str"");
      }
      byte rleByte=patch[offset++];
      for (int i=writeOffset; i < writeOffset + rleSize; i++) {
        rom[i]=rleByte;
      }
    }
 else {
      if (offset + size > patchlen) {
        throw new IOException(""String_Node_Str"");
      }
      if (writeOffset + size > rom.length) {
        throw new IOException(""String_Node_Str"");
      }
      System.arraycopy(patch,offset,rom,writeOffset,size);
      offset+=size;
    }
  }
  throw new IOException(""String_Node_Str"");
}",0.973462783171521
79867,"public static byte[] getCodeTweakFile(String filename) throws IOException {
  InputStream is=FileFunctions.class.getResourceAsStream(""String_Node_Str"" + filename);
  byte[] buf=new byte[is.available()];
  is.read(buf);
  is.close();
  return buf;
}","public static byte[] getCodeTweakFile(String filename) throws IOException {
  InputStream is=FileFunctions.class.getResourceAsStream(""String_Node_Str"" + filename);
  byte[] buf=new byte[is.available()];
  int offs=0, read=0;
  while (offs < buf.length && (read=is.read(buf,offs,buf.length - offs)) != -1) {
    offs+=read;
  }
  is.close();
  return buf;
}",0.6854304635761589
79868,"@Override public List<EncounterSet> getEncounters(boolean useTimeOfDay){
  List<EncounterSet> encounters=new ArrayList<EncounterSet>();
  Pokemon ghostMarowak=pokes[Gen1Constants.marowakIndex];
  if (canChangeStaticPokemon()) {
    ghostMarowak=pokes[pokeRBYToNumTable[rom[romEntry.ghostMarowakOffsets[0]] & 0xFF]];
  }
  List<Integer> usedOffsets=new ArrayList<Integer>();
  int tableOffset=romEntry.getValue(""String_Node_Str"");
  int tableBank=bankOf(tableOffset);
  int mapID=-1;
  while (readWord(tableOffset) != Gen1Constants.encounterTableEnd) {
    mapID++;
    int offset=calculateOffset(tableBank,readWord(tableOffset));
    int rootOffset=offset;
    if (!usedOffsets.contains(offset)) {
      usedOffsets.add(offset);
      for (int a=0; a < 2; a++) {
        int rate=rom[offset++] & 0xFF;
        if (rate > 0) {
          EncounterSet thisSet=new EncounterSet();
          thisSet.rate=rate;
          thisSet.offset=rootOffset;
          thisSet.displayName=(a == 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + mapNames[mapID];
          if (mapID >= Gen1Constants.towerMapsStartIndex && mapID <= Gen1Constants.towerMapsEndIndex) {
            thisSet.bannedPokemon.add(ghostMarowak);
          }
          for (int slot=0; slot < Gen1Constants.encounterTableSize; slot++) {
            Encounter enc=new Encounter();
            enc.level=rom[offset] & 0xFF;
            enc.pokemon=pokes[pokeRBYToNumTable[rom[offset + 1] & 0xFF]];
            thisSet.encounters.add(enc);
            offset+=2;
          }
          encounters.add(thisSet);
        }
      }
    }
 else {
      for (      EncounterSet es : encounters) {
        if (es.offset == offset) {
          es.displayName+=""String_Node_Str"" + mapNames[mapID];
        }
      }
    }
    tableOffset+=2;
  }
  int oldRodOffset=romEntry.getValue(""String_Node_Str"");
  EncounterSet oldRodSet=new EncounterSet();
  oldRodSet.displayName=""String_Node_Str"";
  Encounter oldRodEnc=new Encounter();
  oldRodEnc.level=rom[oldRodOffset + 2] & 0xFF;
  oldRodEnc.pokemon=pokes[pokeRBYToNumTable[rom[oldRodOffset + 1] & 0xFF]];
  oldRodSet.encounters.add(oldRodEnc);
  encounters.add(oldRodSet);
  int goodRodOffset=romEntry.getValue(""String_Node_Str"");
  EncounterSet goodRodSet=new EncounterSet();
  goodRodSet.displayName=""String_Node_Str"";
  for (int grSlot=0; grSlot < 2; grSlot++) {
    Encounter enc=new Encounter();
    enc.level=rom[goodRodOffset + grSlot * 2] & 0xFF;
    enc.pokemon=pokes[pokeRBYToNumTable[rom[goodRodOffset + grSlot * 2 + 1] & 0xFF]];
    goodRodSet.encounters.add(enc);
  }
  encounters.add(goodRodSet);
  if (romEntry.isYellow) {
    int superRodOffset=romEntry.getValue(""String_Node_Str"");
    while ((rom[superRodOffset] & 0xFF) != 0xFF) {
      int map=rom[superRodOffset++] & 0xFF;
      EncounterSet thisSet=new EncounterSet();
      thisSet.displayName=""String_Node_Str"" + mapNames[map];
      for (int encN=0; encN < Gen1Constants.yellowSuperRodTableSize; encN++) {
        Encounter enc=new Encounter();
        enc.level=rom[superRodOffset + 1] & 0xFF;
        enc.pokemon=pokes[pokeRBYToNumTable[rom[superRodOffset] & 0xFF]];
        thisSet.encounters.add(enc);
        superRodOffset+=2;
      }
      encounters.add(thisSet);
    }
  }
 else {
    int superRodOffset=romEntry.getValue(""String_Node_Str"");
    int superRodBank=bankOf(superRodOffset);
    List<Integer> usedSROffsets=new ArrayList<Integer>();
    while ((rom[superRodOffset] & 0xFF) != 0xFF) {
      int map=rom[superRodOffset++] & 0xFF;
      int setOffset=calculateOffset(superRodBank,readWord(superRodOffset));
      superRodOffset+=2;
      if (!usedSROffsets.contains(setOffset)) {
        usedSROffsets.add(setOffset);
        EncounterSet thisSet=new EncounterSet();
        thisSet.displayName=""String_Node_Str"" + mapNames[map];
        thisSet.offset=setOffset;
        int pokesInSet=rom[setOffset++] & 0xFF;
        for (int encN=0; encN < pokesInSet; encN++) {
          Encounter enc=new Encounter();
          enc.level=rom[setOffset] & 0xFF;
          enc.pokemon=pokes[pokeRBYToNumTable[rom[setOffset + 1] & 0xFF]];
          thisSet.encounters.add(enc);
          setOffset+=2;
        }
        encounters.add(thisSet);
      }
 else {
        for (        EncounterSet es : encounters) {
          if (es.offset == setOffset) {
            es.displayName+=""String_Node_Str"" + mapNames[map];
          }
        }
      }
    }
  }
  return encounters;
}","@Override public List<EncounterSet> getEncounters(boolean useTimeOfDay){
  List<EncounterSet> encounters=new ArrayList<EncounterSet>();
  Pokemon ghostMarowak=pokes[Gen1Constants.marowakIndex];
  if (canChangeStaticPokemon()) {
    ghostMarowak=pokes[pokeRBYToNumTable[rom[romEntry.ghostMarowakOffsets[0]] & 0xFF]];
  }
  List<Integer> usedOffsets=new ArrayList<Integer>();
  int tableOffset=romEntry.getValue(""String_Node_Str"");
  int tableBank=bankOf(tableOffset);
  int mapID=-1;
  while (readWord(tableOffset) != Gen1Constants.encounterTableEnd) {
    mapID++;
    int offset=calculateOffset(tableBank,readWord(tableOffset));
    int rootOffset=offset;
    if (!usedOffsets.contains(offset)) {
      usedOffsets.add(offset);
      for (int a=0; a < 2; a++) {
        int rate=rom[offset++] & 0xFF;
        if (rate > 0) {
          EncounterSet thisSet=new EncounterSet();
          thisSet.rate=rate;
          thisSet.offset=rootOffset;
          thisSet.displayName=(a == 1 ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + mapNames[mapID];
          if (mapID >= Gen1Constants.towerMapsStartIndex && mapID <= Gen1Constants.towerMapsEndIndex) {
            thisSet.bannedPokemon.add(ghostMarowak);
          }
          for (int slot=0; slot < Gen1Constants.encounterTableSize; slot++) {
            Encounter enc=new Encounter();
            enc.level=rom[offset] & 0xFF;
            enc.pokemon=pokes[pokeRBYToNumTable[rom[offset + 1] & 0xFF]];
            thisSet.encounters.add(enc);
            offset+=2;
          }
          encounters.add(thisSet);
        }
      }
    }
 else {
      for (      EncounterSet es : encounters) {
        if (es.offset == offset) {
          es.displayName+=""String_Node_Str"" + mapNames[mapID];
        }
      }
    }
    tableOffset+=2;
  }
  int oldRodOffset=romEntry.getValue(""String_Node_Str"");
  EncounterSet oldRodSet=new EncounterSet();
  oldRodSet.displayName=""String_Node_Str"";
  Encounter oldRodEnc=new Encounter();
  oldRodEnc.level=rom[oldRodOffset + 2] & 0xFF;
  oldRodEnc.pokemon=pokes[pokeRBYToNumTable[rom[oldRodOffset + 1] & 0xFF]];
  oldRodSet.encounters.add(oldRodEnc);
  oldRodSet.bannedPokemon.add(ghostMarowak);
  encounters.add(oldRodSet);
  int goodRodOffset=romEntry.getValue(""String_Node_Str"");
  EncounterSet goodRodSet=new EncounterSet();
  goodRodSet.displayName=""String_Node_Str"";
  for (int grSlot=0; grSlot < 2; grSlot++) {
    Encounter enc=new Encounter();
    enc.level=rom[goodRodOffset + grSlot * 2] & 0xFF;
    enc.pokemon=pokes[pokeRBYToNumTable[rom[goodRodOffset + grSlot * 2 + 1] & 0xFF]];
    goodRodSet.encounters.add(enc);
  }
  goodRodSet.bannedPokemon.add(ghostMarowak);
  encounters.add(goodRodSet);
  if (romEntry.isYellow) {
    int superRodOffset=romEntry.getValue(""String_Node_Str"");
    while ((rom[superRodOffset] & 0xFF) != 0xFF) {
      int map=rom[superRodOffset++] & 0xFF;
      EncounterSet thisSet=new EncounterSet();
      thisSet.displayName=""String_Node_Str"" + mapNames[map];
      for (int encN=0; encN < Gen1Constants.yellowSuperRodTableSize; encN++) {
        Encounter enc=new Encounter();
        enc.level=rom[superRodOffset + 1] & 0xFF;
        enc.pokemon=pokes[pokeRBYToNumTable[rom[superRodOffset] & 0xFF]];
        thisSet.encounters.add(enc);
        superRodOffset+=2;
      }
      thisSet.bannedPokemon.add(ghostMarowak);
      encounters.add(thisSet);
    }
  }
 else {
    int superRodOffset=romEntry.getValue(""String_Node_Str"");
    int superRodBank=bankOf(superRodOffset);
    List<Integer> usedSROffsets=new ArrayList<Integer>();
    while ((rom[superRodOffset] & 0xFF) != 0xFF) {
      int map=rom[superRodOffset++] & 0xFF;
      int setOffset=calculateOffset(superRodBank,readWord(superRodOffset));
      superRodOffset+=2;
      if (!usedSROffsets.contains(setOffset)) {
        usedSROffsets.add(setOffset);
        EncounterSet thisSet=new EncounterSet();
        thisSet.displayName=""String_Node_Str"" + mapNames[map];
        thisSet.offset=setOffset;
        int pokesInSet=rom[setOffset++] & 0xFF;
        for (int encN=0; encN < pokesInSet; encN++) {
          Encounter enc=new Encounter();
          enc.level=rom[setOffset] & 0xFF;
          enc.pokemon=pokes[pokeRBYToNumTable[rom[setOffset + 1] & 0xFF]];
          thisSet.encounters.add(enc);
          setOffset+=2;
        }
        thisSet.bannedPokemon.add(ghostMarowak);
        encounters.add(thisSet);
      }
 else {
        for (        EncounterSet es : encounters) {
          if (es.offset == setOffset) {
            es.displayName+=""String_Node_Str"" + mapNames[map];
          }
        }
      }
    }
  }
  return encounters;
}",0.9794933655006032
79869,"public static Set<Pokemon> getMiddleEvolutions(RomHandler baseRom){
  List<Pokemon> allPokes=baseRom.getPokemon();
  Set<Pokemon> middleEvolutions=new TreeSet<Pokemon>();
  for (  Pokemon pkmn : allPokes) {
    if (pkmn.evolutionsTo.size() == 1 && pkmn.evolutionsFrom.size() == 0) {
      Evolution onlyEvo=pkmn.evolutionsTo.get(0);
      if (onlyEvo.carryStats) {
        middleEvolutions.add(pkmn);
      }
    }
  }
  return middleEvolutions;
}","public static Set<Pokemon> getMiddleEvolutions(RomHandler baseRom){
  List<Pokemon> allPokes=baseRom.getPokemon();
  Set<Pokemon> middleEvolutions=new TreeSet<Pokemon>();
  for (  Pokemon pkmn : allPokes) {
    if (pkmn != null) {
      if (pkmn.evolutionsTo.size() == 1 && pkmn.evolutionsFrom.size() > 0) {
        Evolution onlyEvo=pkmn.evolutionsTo.get(0);
        if (onlyEvo.carryStats) {
          middleEvolutions.add(pkmn);
        }
      }
    }
  }
  return middleEvolutions;
}",0.9518716577540108
79870,"public static Set<Pokemon> getFinalEvolutions(RomHandler baseRom){
  List<Pokemon> allPokes=baseRom.getPokemon();
  Set<Pokemon> finalEvolutions=new TreeSet<Pokemon>();
  for (  Pokemon pkmn : allPokes) {
    if (pkmn.evolutionsTo.size() == 1 && pkmn.evolutionsFrom.size() > 0) {
      Evolution onlyEvo=pkmn.evolutionsTo.get(0);
      if (onlyEvo.carryStats) {
        finalEvolutions.add(pkmn);
      }
    }
  }
  return finalEvolutions;
}","public static Set<Pokemon> getFinalEvolutions(RomHandler baseRom){
  List<Pokemon> allPokes=baseRom.getPokemon();
  Set<Pokemon> finalEvolutions=new TreeSet<Pokemon>();
  for (  Pokemon pkmn : allPokes) {
    if (pkmn != null) {
      if (pkmn.evolutionsTo.size() == 1 && pkmn.evolutionsFrom.size() == 0) {
        Evolution onlyEvo=pkmn.evolutionsTo.get(0);
        if (onlyEvo.carryStats) {
          finalEvolutions.add(pkmn);
        }
      }
    }
  }
  return finalEvolutions;
}",0.9514563106796116
79871,"public static Set<Pokemon> getBasicOrNoCopyPokemon(RomHandler baseRom){
  List<Pokemon> allPokes=baseRom.getPokemon();
  Set<Pokemon> dontCopyPokes=new TreeSet<Pokemon>();
  for (  Pokemon pkmn : allPokes) {
    if (pkmn.evolutionsTo.size() != 1) {
      dontCopyPokes.add(pkmn);
    }
 else {
      Evolution onlyEvo=pkmn.evolutionsTo.get(0);
      if (!onlyEvo.carryStats) {
        dontCopyPokes.add(pkmn);
      }
    }
  }
  return dontCopyPokes;
}","public static Set<Pokemon> getBasicOrNoCopyPokemon(RomHandler baseRom){
  List<Pokemon> allPokes=baseRom.getPokemon();
  Set<Pokemon> dontCopyPokes=new TreeSet<Pokemon>();
  for (  Pokemon pkmn : allPokes) {
    if (pkmn != null) {
      if (pkmn.evolutionsTo.size() != 1) {
        dontCopyPokes.add(pkmn);
      }
 else {
        Evolution onlyEvo=pkmn.evolutionsTo.get(0);
        if (!onlyEvo.carryStats) {
          dontCopyPokes.add(pkmn);
        }
      }
    }
  }
  return dontCopyPokes;
}",0.8886554621848739
79872,"@Override public void randomizePokemonTypes(boolean evolutionSanity){
  if (evolutionSanity) {
    Set<Pokemon> dontCopyPokes=RomFunctions.getBasicOrNoCopyPokemon(this);
    for (    Pokemon pk : dontCopyPokes) {
      pk.primaryType=randomType();
      pk.secondaryType=null;
      if (pk.evolutionsFrom.size() > 0) {
        if (this.random.nextDouble() < 0.35) {
          pk.secondaryType=randomType();
          while (pk.secondaryType == pk.primaryType) {
            pk.secondaryType=randomType();
          }
        }
      }
 else {
        if (this.random.nextDouble() < 0.5) {
          pk.secondaryType=randomType();
          while (pk.secondaryType == pk.primaryType) {
            pk.secondaryType=randomType();
          }
        }
      }
    }
    Set<Pokemon> firstEvos=RomFunctions.getMiddleEvolutions(this);
    for (    Pokemon pk : firstEvos) {
      Pokemon evolvedFrom=pk.evolutionsTo.get(0).from;
      pk.primaryType=evolvedFrom.primaryType;
      pk.secondaryType=evolvedFrom.secondaryType;
      if (pk.secondaryType == null) {
        if (this.random.nextDouble() < 0.15) {
          pk.secondaryType=randomType();
          while (pk.secondaryType == pk.primaryType) {
            pk.secondaryType=randomType();
          }
        }
      }
    }
    Set<Pokemon> secondEvos=RomFunctions.getFinalEvolutions(this);
    for (    Pokemon pk : secondEvos) {
      Pokemon evolvedFrom=pk.evolutionsTo.get(0).from;
      pk.primaryType=evolvedFrom.primaryType;
      pk.secondaryType=evolvedFrom.secondaryType;
      if (pk.secondaryType == null) {
        if (this.random.nextDouble() < 0.25) {
          pk.secondaryType=randomType();
          while (pk.secondaryType == pk.primaryType) {
            pk.secondaryType=randomType();
          }
        }
      }
    }
  }
 else {
    List<Pokemon> allPokes=this.getPokemon();
    for (    Pokemon pkmn : allPokes) {
      if (pkmn != null) {
        pkmn.primaryType=randomType();
        pkmn.secondaryType=null;
        if (this.random.nextDouble() < 0.5) {
          pkmn.secondaryType=randomType();
          while (pkmn.secondaryType == pkmn.primaryType) {
            pkmn.secondaryType=randomType();
          }
        }
      }
    }
  }
}","@Override public void randomizePokemonTypes(boolean evolutionSanity){
  List<Pokemon> allPokes=this.getPokemon();
  if (evolutionSanity) {
    for (    Pokemon pk : allPokes) {
      if (pk != null) {
        pk.temporaryFlag=false;
      }
    }
    Set<Pokemon> dontCopyPokes=RomFunctions.getBasicOrNoCopyPokemon(this);
    for (    Pokemon pk : dontCopyPokes) {
      pk.primaryType=randomType();
      pk.secondaryType=null;
      if (pk.evolutionsFrom.size() == 1 && pk.evolutionsFrom.get(0).carryStats) {
        if (this.random.nextDouble() < 0.35) {
          pk.secondaryType=randomType();
          while (pk.secondaryType == pk.primaryType) {
            pk.secondaryType=randomType();
          }
        }
      }
 else {
        if (this.random.nextDouble() < 0.5) {
          pk.secondaryType=randomType();
          while (pk.secondaryType == pk.primaryType) {
            pk.secondaryType=randomType();
          }
        }
      }
      pk.temporaryFlag=true;
    }
    Set<Pokemon> middleEvos=RomFunctions.getMiddleEvolutions(this);
    for (    Pokemon pk : allPokes) {
      if (pk != null && !pk.temporaryFlag) {
        Stack<Evolution> currentStack=new Stack<Evolution>();
        Evolution ev=pk.evolutionsTo.get(0);
        while (!ev.from.temporaryFlag) {
          currentStack.push(ev);
          ev=ev.from.evolutionsTo.get(0);
        }
        while (true) {
          Pokemon to=ev.to;
          Pokemon from=ev.from;
          to.primaryType=from.primaryType;
          to.secondaryType=from.secondaryType;
          if (to.secondaryType == null) {
            double chance=middleEvos.contains(to) ? 0.15 : 0.25;
            if (this.random.nextDouble() < chance) {
              to.secondaryType=randomType();
              while (to.secondaryType == to.primaryType) {
                to.secondaryType=randomType();
              }
            }
          }
          to.temporaryFlag=true;
          if (currentStack.isEmpty()) {
            break;
          }
 else {
            ev=currentStack.pop();
          }
        }
      }
    }
  }
 else {
    for (    Pokemon pkmn : allPokes) {
      if (pkmn != null) {
        pkmn.primaryType=randomType();
        pkmn.secondaryType=null;
        if (this.random.nextDouble() < 0.5) {
          pkmn.secondaryType=randomType();
          while (pkmn.secondaryType == pkmn.primaryType) {
            pkmn.secondaryType=randomType();
          }
        }
      }
    }
  }
}",0.4728202941803453
79873,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + from.number;
  result=prime * result + to.number;
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + from.number;
  result=prime * result + to.number;
  result=prime * result + type.ordinal();
  return result;
}",0.8870967741935484
79874,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Evolution other=(Evolution)obj;
  if (from != other.from)   return false;
  if (to != other.to)   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Evolution other=(Evolution)obj;
  if (from != other.from)   return false;
  if (to != other.to)   return false;
  if (type != other.type)   return false;
  return true;
}",0.9337539432176656
79875,"@Override public int compareTo(Evolution o){
  if (this.from.number < o.from.number) {
    return -1;
  }
 else   if (this.from.number > o.from.number) {
    return 1;
  }
 else   if (this.to.number < o.to.number) {
    return -1;
  }
 else   if (this.to.number > o.to.number) {
    return 1;
  }
 else {
    return 0;
  }
}","@Override public int compareTo(Evolution o){
  if (this.from.number < o.from.number) {
    return -1;
  }
 else   if (this.from.number > o.from.number) {
    return 1;
  }
 else   if (this.to.number < o.to.number) {
    return -1;
  }
 else   if (this.to.number > o.to.number) {
    return 1;
  }
 else   if (this.type.ordinal() < o.type.ordinal()) {
    return -1;
  }
 else   if (this.type.ordinal() > o.type.ordinal()) {
    return 1;
  }
 else {
    return 0;
  }
}",0.8171500630517023
79876,"@Override public void loadedRom(){
  for (  RomEntry re : roms) {
    if (romCode(rom,re.romCode) && (rom[0xBC] & 0xFF) == re.version) {
      romEntry=re;
      break;
    }
  }
  tb=new String[256];
  d=new HashMap<String,Byte>();
  isRomHack=false;
  if (romEntry.romType == Gen3Constants.RomType_Ruby || romEntry.romType == Gen3Constants.RomType_Sapp) {
    int baseNomOffset=find(rom,Gen3Constants.rsPokemonNamesPointerSuffix);
    romEntry.entries.put(""String_Node_Str"",readPointer(baseNomOffset - 4));
  }
 else {
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgPokemonNamesPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgMoveDataPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgAbilityNamesPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgItemDataPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgMoveDataPointer) + 0xC);
  }
  loadTextTable(romEntry.tableFile);
  loadPokemonStats();
  pokemonList=Arrays.asList(pokes);
  loadMoves();
  int baseWPOffset=findMultiple(rom,Gen3Constants.wildPokemonPointerPrefix).get(0);
  romEntry.entries.put(""String_Node_Str"",readPointer(baseWPOffset + 12));
  int baseMapsOffset=findMultiple(rom,Gen3Constants.mapBanksPointerPrefix).get(0);
  romEntry.entries.put(""String_Node_Str"",readPointer(baseMapsOffset + 12));
  this.determineMapBankSizes();
  if (romEntry.romType == Gen3Constants.RomType_FRLG) {
    int baseMLOffset=find(rom,Gen3Constants.frlgMapLabelsPointerPrefix);
    romEntry.entries.put(""String_Node_Str"",readPointer(baseMLOffset + 12));
  }
 else {
    int baseMLOffset=find(rom,Gen3Constants.rseMapLabelsPointerPrefix);
    romEntry.entries.put(""String_Node_Str"",readPointer(baseMLOffset + 12));
  }
  mapLoadingDone=false;
  loadAbilityNames();
  loadItemNames();
}","@Override public void loadedRom(){
  for (  RomEntry re : roms) {
    if (romCode(rom,re.romCode) && (rom[0xBC] & 0xFF) == re.version) {
      romEntry=re;
      break;
    }
  }
  tb=new String[256];
  d=new HashMap<String,Byte>();
  isRomHack=false;
  if (romEntry.romType == Gen3Constants.RomType_Ruby || romEntry.romType == Gen3Constants.RomType_Sapp) {
    int baseNomOffset=find(rom,Gen3Constants.rsPokemonNamesPointerSuffix);
    romEntry.entries.put(""String_Node_Str"",readPointer(baseNomOffset - 4));
  }
 else {
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgPokemonNamesPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgMoveNamesPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgAbilityNamesPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgItemDataPointer));
    romEntry.entries.put(""String_Node_Str"",readPointer(Gen3Constants.efrlgMoveDataPointer) + 0xC);
  }
  loadTextTable(romEntry.tableFile);
  loadPokemonStats();
  pokemonList=Arrays.asList(pokes);
  loadMoves();
  int baseWPOffset=findMultiple(rom,Gen3Constants.wildPokemonPointerPrefix).get(0);
  romEntry.entries.put(""String_Node_Str"",readPointer(baseWPOffset + 12));
  int baseMapsOffset=findMultiple(rom,Gen3Constants.mapBanksPointerPrefix).get(0);
  romEntry.entries.put(""String_Node_Str"",readPointer(baseMapsOffset + 12));
  this.determineMapBankSizes();
  if (romEntry.romType == Gen3Constants.RomType_FRLG) {
    int baseMLOffset=find(rom,Gen3Constants.frlgMapLabelsPointerPrefix);
    romEntry.entries.put(""String_Node_Str"",readPointer(baseMLOffset + 12));
  }
 else {
    int baseMLOffset=find(rom,Gen3Constants.rseMapLabelsPointerPrefix);
    romEntry.entries.put(""String_Node_Str"",readPointer(baseMLOffset + 12));
  }
  mapLoadingDone=false;
  loadAbilityNames();
  loadItemNames();
}",0.9976297076639452
79877,"@Override public boolean setStarters(List<Pokemon> newStarters){
  int starterAmount=2;
  if (!romEntry.isYellow) {
    starterAmount=3;
  }
  if (newStarters.size() != starterAmount) {
    return false;
  }
  for (  Pokemon pkmn : newStarters) {
    if (!isInGame(pkmn)) {
      return false;
    }
  }
  for (int i=0; i < starterAmount; i++) {
    byte starter=(byte)pokeNumToRBYTable[newStarters.get(i).number];
    int[] offsets=romEntry.arrayEntries.get(""String_Node_Str"" + (i + 1));
    for (    int offset : offsets) {
      rom[offset]=starter;
    }
  }
  if (!romEntry.isYellow) {
    if (romEntry.getValue(""String_Node_Str"") > 0) {
      List<Integer> starterTextOffsets=RomFunctions.search(rom,traduire(""String_Node_Str""));
      for (int i=0; i < 3 && i < starterTextOffsets.size(); i++) {
        writeFixedLengthScriptString(""String_Node_Str"" + newStarters.get(i).name + ""String_Node_Str"",starterTextOffsets.get(i),lengthOfStringAt(starterTextOffsets.get(i)) + 1);
      }
    }
    if (romEntry.getValue(""String_Node_Str"") > 0) {
      Map<Integer,Integer> onValues=new TreeMap<Integer,Integer>();
      for (int i=0; i < 3; i++) {
        int pkDexNum=newStarters.get(i).number;
        int ramOffset=(pkDexNum - 1) / 8 + romEntry.getValue(""String_Node_Str"");
        int bitShift=(pkDexNum - 1) % 8;
        int writeValue=1 << bitShift;
        if (onValues.containsKey(ramOffset)) {
          onValues.put(ramOffset,onValues.get(ramOffset) | writeValue);
        }
 else {
          onValues.put(ramOffset,writeValue);
        }
      }
      int pkDexOnOffset=romEntry.getValue(""String_Node_Str"");
      int pkDexOffOffset=romEntry.getValue(""String_Node_Str"");
      int sizeForOnRoutine=5 * onValues.size() + 3;
      int writeOnRoutineTo=romEntry.getValue(""String_Node_Str"");
      int writeOffRoutineTo=writeOnRoutineTo + sizeForOnRoutine;
      int offsetForOnRoutine=makeGBPointer(writeOnRoutineTo);
      int offsetForOffRoutine=makeGBPointer(writeOffRoutineTo);
      int retOnOffset=makeGBPointer(pkDexOnOffset + 5);
      int retOffOffset=makeGBPointer(pkDexOffOffset + 4);
      rom[pkDexOnOffset]=(byte)0xC3;
      writeWord(pkDexOnOffset + 1,offsetForOnRoutine);
      rom[pkDexOnOffset + 3]=0x00;
      rom[pkDexOnOffset + 4]=0x00;
      rom[pkDexOffOffset]=(byte)0xC3;
      writeWord(pkDexOffOffset + 1,offsetForOffRoutine);
      rom[pkDexOffOffset + 3]=0x00;
      rom[writeOffRoutineTo]=(byte)0xAF;
      int turnOnOffset=writeOnRoutineTo;
      int turnOffOffset=writeOffRoutineTo + 1;
      for (      int ramOffset : onValues.keySet()) {
        int onValue=onValues.get(ramOffset);
        rom[turnOnOffset++]=0x3E;
        rom[turnOnOffset++]=(byte)onValue;
        rom[turnOnOffset++]=(byte)0xEA;
        rom[turnOnOffset++]=(byte)(ramOffset % 0x100);
        rom[turnOnOffset++]=(byte)(ramOffset / 0x100);
        rom[turnOffOffset++]=(byte)0xEA;
        rom[turnOffOffset++]=(byte)(ramOffset % 0x100);
        rom[turnOffOffset++]=(byte)(ramOffset / 0x100);
      }
      rom[turnOnOffset++]=(byte)0xC3;
      writeWord(turnOnOffset,retOnOffset);
      rom[turnOffOffset++]=(byte)0xC3;
      writeWord(turnOffOffset,retOffOffset);
    }
  }
  return true;
}","@Override public boolean setStarters(List<Pokemon> newStarters){
  int starterAmount=2;
  if (!romEntry.isYellow) {
    starterAmount=3;
  }
  if (newStarters.size() != starterAmount) {
    return false;
  }
  for (int i=0; i < starterAmount; i++) {
    byte starter=(byte)pokeNumToRBYTable[newStarters.get(i).number];
    int[] offsets=romEntry.arrayEntries.get(""String_Node_Str"" + (i + 1));
    for (    int offset : offsets) {
      rom[offset]=starter;
    }
  }
  if (!romEntry.isYellow) {
    if (romEntry.getValue(""String_Node_Str"") > 0) {
      List<Integer> starterTextOffsets=RomFunctions.search(rom,traduire(""String_Node_Str""));
      for (int i=0; i < 3 && i < starterTextOffsets.size(); i++) {
        writeFixedLengthScriptString(""String_Node_Str"" + newStarters.get(i).name + ""String_Node_Str"",starterTextOffsets.get(i),lengthOfStringAt(starterTextOffsets.get(i)) + 1);
      }
    }
    if (romEntry.getValue(""String_Node_Str"") > 0) {
      Map<Integer,Integer> onValues=new TreeMap<Integer,Integer>();
      for (int i=0; i < 3; i++) {
        int pkDexNum=newStarters.get(i).number;
        int ramOffset=(pkDexNum - 1) / 8 + romEntry.getValue(""String_Node_Str"");
        int bitShift=(pkDexNum - 1) % 8;
        int writeValue=1 << bitShift;
        if (onValues.containsKey(ramOffset)) {
          onValues.put(ramOffset,onValues.get(ramOffset) | writeValue);
        }
 else {
          onValues.put(ramOffset,writeValue);
        }
      }
      int pkDexOnOffset=romEntry.getValue(""String_Node_Str"");
      int pkDexOffOffset=romEntry.getValue(""String_Node_Str"");
      int sizeForOnRoutine=5 * onValues.size() + 3;
      int writeOnRoutineTo=romEntry.getValue(""String_Node_Str"");
      int writeOffRoutineTo=writeOnRoutineTo + sizeForOnRoutine;
      int offsetForOnRoutine=makeGBPointer(writeOnRoutineTo);
      int offsetForOffRoutine=makeGBPointer(writeOffRoutineTo);
      int retOnOffset=makeGBPointer(pkDexOnOffset + 5);
      int retOffOffset=makeGBPointer(pkDexOffOffset + 4);
      rom[pkDexOnOffset]=(byte)0xC3;
      writeWord(pkDexOnOffset + 1,offsetForOnRoutine);
      rom[pkDexOnOffset + 3]=0x00;
      rom[pkDexOnOffset + 4]=0x00;
      rom[pkDexOffOffset]=(byte)0xC3;
      writeWord(pkDexOffOffset + 1,offsetForOffRoutine);
      rom[pkDexOffOffset + 3]=0x00;
      rom[writeOffRoutineTo]=(byte)0xAF;
      int turnOnOffset=writeOnRoutineTo;
      int turnOffOffset=writeOffRoutineTo + 1;
      for (      int ramOffset : onValues.keySet()) {
        int onValue=onValues.get(ramOffset);
        rom[turnOnOffset++]=0x3E;
        rom[turnOnOffset++]=(byte)onValue;
        rom[turnOnOffset++]=(byte)0xEA;
        rom[turnOnOffset++]=(byte)(ramOffset % 0x100);
        rom[turnOnOffset++]=(byte)(ramOffset / 0x100);
        rom[turnOffOffset++]=(byte)0xEA;
        rom[turnOffOffset++]=(byte)(ramOffset % 0x100);
        rom[turnOffOffset++]=(byte)(ramOffset / 0x100);
      }
      rom[turnOnOffset++]=(byte)0xC3;
      writeWord(turnOnOffset,retOnOffset);
      rom[turnOffOffset++]=(byte)0xC3;
      writeWord(turnOffOffset,retOffOffset);
    }
  }
  return true;
}",0.9847908745247148
79878,"@Override public boolean setStaticPokemon(List<Pokemon> staticPokemon){
  if (romEntry.getValue(""String_Node_Str"") == 0) {
    return false;
  }
  int singleSize=romEntry.staticPokemonSingle.size();
  int gcSize=romEntry.staticPokemonGameCorner.size();
  if (staticPokemon.size() != singleSize + gcSize) {
    return false;
  }
  for (  Pokemon pkmn : staticPokemon) {
    if (!isInGame(pkmn)) {
      return false;
    }
  }
  for (int i=0; i < singleSize; i++) {
    rom[romEntry.staticPokemonSingle.get(i)]=(byte)pokeNumToRBYTable[staticPokemon.get(i).number];
  }
  for (int i=0; i < gcSize; i++) {
    byte pokeNum=(byte)pokeNumToRBYTable[staticPokemon.get(i + singleSize).number];
    int[] offsets=romEntry.staticPokemonGameCorner.get(i).offsets;
    for (    int offset : offsets) {
      rom[offset]=pokeNum;
    }
  }
  return true;
}","@Override public boolean setStaticPokemon(List<Pokemon> staticPokemon){
  if (romEntry.getValue(""String_Node_Str"") == 0) {
    return false;
  }
  int singleSize=romEntry.staticPokemonSingle.size();
  int gcSize=romEntry.staticPokemonGameCorner.size();
  if (staticPokemon.size() != singleSize + gcSize) {
    return false;
  }
  for (int i=0; i < singleSize; i++) {
    rom[romEntry.staticPokemonSingle.get(i)]=(byte)pokeNumToRBYTable[staticPokemon.get(i).number];
  }
  for (int i=0; i < gcSize; i++) {
    byte pokeNum=(byte)pokeNumToRBYTable[staticPokemon.get(i + singleSize).number];
    int[] offsets=romEntry.staticPokemonGameCorner.get(i).offsets;
    for (    int offset : offsets) {
      rom[offset]=pokeNum;
    }
  }
  return true;
}",0.938364779874214
79879,"@Override public boolean setStarters(List<Pokemon> newStarters){
  if (newStarters.size() != 3) {
    return false;
  }
  for (  Pokemon pkmn : newStarters) {
    if (!isInGame(pkmn)) {
      return false;
    }
  }
  for (int i=0; i < 3; i++) {
    byte starter=(byte)newStarters.get(i).number;
    int[] offsets=romEntry.arrayEntries.get(""String_Node_Str"" + (i + 1));
    for (    int offset : offsets) {
      rom[offset]=starter;
    }
  }
  if (romEntry.getValue(""String_Node_Str"") > 0) {
    List<Integer> cyndaTexts=RomFunctions.search(rom,traduire(""String_Node_Str""));
    int offset=cyndaTexts.get(romEntry.isCrystal ? 1 : 0);
    String pokeName=newStarters.get(0).name;
    writeFixedLengthScriptString(pokeName + ""String_Node_Str"",offset,lengthOfStringAt(offset) + 1);
    List<Integer> totoTexts=RomFunctions.search(rom,traduire(""String_Node_Str""));
    offset=totoTexts.get(romEntry.isCrystal ? 1 : 0);
    pokeName=newStarters.get(1).name;
    writeFixedLengthScriptString(pokeName + ""String_Node_Str"",offset,lengthOfStringAt(offset) + 1);
    List<Integer> chikoTexts=RomFunctions.search(rom,traduire(""String_Node_Str""));
    offset=chikoTexts.get(romEntry.isCrystal ? 1 : 0);
    pokeName=newStarters.get(2).name;
    writeFixedLengthScriptString(pokeName + ""String_Node_Str"",offset,lengthOfStringAt(offset) + 1);
  }
  return true;
}","@Override public boolean setStarters(List<Pokemon> newStarters){
  if (newStarters.size() != 3) {
    return false;
  }
  for (int i=0; i < 3; i++) {
    byte starter=(byte)newStarters.get(i).number;
    int[] offsets=romEntry.arrayEntries.get(""String_Node_Str"" + (i + 1));
    for (    int offset : offsets) {
      rom[offset]=starter;
    }
  }
  if (romEntry.getValue(""String_Node_Str"") > 0) {
    List<Integer> cyndaTexts=RomFunctions.search(rom,traduire(""String_Node_Str""));
    int offset=cyndaTexts.get(romEntry.isCrystal ? 1 : 0);
    String pokeName=newStarters.get(0).name;
    writeFixedLengthScriptString(pokeName + ""String_Node_Str"",offset,lengthOfStringAt(offset) + 1);
    List<Integer> totoTexts=RomFunctions.search(rom,traduire(""String_Node_Str""));
    offset=totoTexts.get(romEntry.isCrystal ? 1 : 0);
    pokeName=newStarters.get(1).name;
    writeFixedLengthScriptString(pokeName + ""String_Node_Str"",offset,lengthOfStringAt(offset) + 1);
    List<Integer> chikoTexts=RomFunctions.search(rom,traduire(""String_Node_Str""));
    offset=chikoTexts.get(romEntry.isCrystal ? 1 : 0);
    pokeName=newStarters.get(2).name;
    writeFixedLengthScriptString(pokeName + ""String_Node_Str"",offset,lengthOfStringAt(offset) + 1);
  }
  return true;
}",0.9631619339984652
79880,"@Override public boolean setStaticPokemon(List<Pokemon> staticPokemon){
  if (romEntry.getValue(""String_Node_Str"") == 0) {
    return false;
  }
  if (!havePatchedFleeing) {
    patchFleeing();
  }
  if (staticPokemon.size() != romEntry.staticPokemonSingle.size() + romEntry.staticPokemonGameCorner.size()) {
    return false;
  }
  for (  Pokemon pkmn : staticPokemon) {
    if (!isInGame(pkmn)) {
      return false;
    }
  }
  Iterator<Pokemon> statics=staticPokemon.iterator();
  for (  int offset : romEntry.staticPokemonSingle) {
    rom[offset]=(byte)statics.next().number;
  }
  int gcNameLength=romEntry.getValue(""String_Node_Str"");
  for (  int offset : romEntry.staticPokemonGameCorner.keySet()) {
    rom[offset]=(byte)statics.next().number;
    rom[offset + 0x11]=rom[offset];
    rom[offset + 0x16]=rom[offset];
    writePaddedPokemonName(pokes[rom[offset] & 0xFF].name,gcNameLength,romEntry.staticPokemonGameCorner.get(offset));
  }
  for (  int offset : romEntry.staticPokemonCopy.keySet()) {
    int copyTo=romEntry.staticPokemonCopy.get(offset);
    rom[copyTo]=rom[offset];
  }
  return true;
}","@Override public boolean setStaticPokemon(List<Pokemon> staticPokemon){
  if (romEntry.getValue(""String_Node_Str"") == 0) {
    return false;
  }
  if (!havePatchedFleeing) {
    patchFleeing();
  }
  if (staticPokemon.size() != romEntry.staticPokemonSingle.size() + romEntry.staticPokemonGameCorner.size()) {
    return false;
  }
  Iterator<Pokemon> statics=staticPokemon.iterator();
  for (  int offset : romEntry.staticPokemonSingle) {
    rom[offset]=(byte)statics.next().number;
  }
  int gcNameLength=romEntry.getValue(""String_Node_Str"");
  for (  int offset : romEntry.staticPokemonGameCorner.keySet()) {
    rom[offset]=(byte)statics.next().number;
    rom[offset + 0x11]=rom[offset];
    rom[offset + 0x16]=rom[offset];
    writePaddedPokemonName(pokes[rom[offset] & 0xFF].name,gcNameLength,romEntry.staticPokemonGameCorner.get(offset));
  }
  for (  int offset : romEntry.staticPokemonCopy.keySet()) {
    int copyTo=romEntry.staticPokemonCopy.get(offset);
    rom[copyTo]=rom[offset];
  }
  return true;
}",0.9539906103286384
79881,"public static String formatTextWithReplacements(String text,Map<String,String> replacements,String newline,String extraline,String newpara,int maxLineLength,StringSizeDeterminer ssd){
  boolean endsWithPara=false;
  if (text.endsWith(newpara)) {
    endsWithPara=true;
    text=text.substring(0,text.length() - newpara.length());
  }
  text=text.replace(newline,""String_Node_Str"").replace(extraline,""String_Node_Str"");
  if (replacements != null) {
    int index=0;
    for (    Map.Entry<String,String> toReplace : replacements.entrySet()) {
      index++;
      text=text.replace(toReplace.getKey(),""String_Node_Str"" + index + ""String_Node_Str"");
    }
    index=0;
    for (    Map.Entry<String,String> toReplace : replacements.entrySet()) {
      index++;
      text=text.replace(""String_Node_Str"" + index + ""String_Node_Str"",toReplace.getValue());
    }
  }
  String[] oldParagraphs=text.split(newpara.replace(""String_Node_Str"",""String_Node_Str""));
  StringBuilder finalResult=new StringBuilder();
  int sentenceNewLineSize=Math.max(10,maxLineLength / 2);
  for (int para=0; para < oldParagraphs.length; para++) {
    String[] words=oldParagraphs[para].split(""String_Node_Str"");
    StringBuilder fullPara=new StringBuilder();
    StringBuilder thisLine=new StringBuilder();
    int currLineWC=0;
    int currLineCC=0;
    int linesWritten=0;
    char currLineLastChar=0;
    for (int i=0; i < words.length; i++) {
      int reqLength=ssd.lengthFor(words[i]);
      if (currLineWC > 0) {
        reqLength++;
      }
      if ((currLineCC + reqLength > maxLineLength) || (currLineCC >= sentenceNewLineSize && (currLineLastChar == '.' || currLineLastChar == '?' || currLineLastChar == '!' || currLineLastChar == '…' || currLineLastChar == ','))) {
        if (currLineWC > 0) {
          if (linesWritten > 1) {
            fullPara.append(extraline);
          }
 else           if (linesWritten == 1) {
            fullPara.append(newline);
          }
          fullPara.append(thisLine.toString());
          linesWritten++;
          thisLine=new StringBuilder();
        }
        thisLine.append(words[i]);
        currLineWC=1;
        currLineCC=ssd.lengthFor(words[i]);
        currLineLastChar=words[i].charAt(words[i].length() - 1);
      }
 else {
        if (currLineWC > 0) {
          thisLine.append(' ');
        }
        thisLine.append(words[i]);
        currLineWC++;
        currLineCC+=reqLength;
        currLineLastChar=words[i].charAt(words[i].length() - 1);
      }
    }
    if (currLineWC > 0) {
      if (linesWritten > 1) {
        fullPara.append(extraline);
      }
 else       if (linesWritten == 1) {
        fullPara.append(newline);
      }
      fullPara.append(thisLine.toString());
      linesWritten++;
    }
    if (para > 0) {
      finalResult.append(newpara);
    }
    finalResult.append(fullPara.toString());
  }
  if (endsWithPara) {
    finalResult.append(newpara);
  }
  return finalResult.toString();
}","public static String formatTextWithReplacements(String text,Map<String,String> replacements,String newline,String extraline,String newpara,int maxLineLength,StringSizeDeterminer ssd){
  boolean endsWithPara=false;
  if (text.endsWith(newpara)) {
    endsWithPara=true;
    text=text.substring(0,text.length() - newpara.length());
  }
  text=text.replace(newline,""String_Node_Str"").replace(extraline,""String_Node_Str"");
  if (replacements != null) {
    int index=0;
    for (    Map.Entry<String,String> toReplace : replacements.entrySet()) {
      index++;
      text=text.replace(toReplace.getKey(),""String_Node_Str"" + index + ""String_Node_Str"");
    }
    index=0;
    for (    Map.Entry<String,String> toReplace : replacements.entrySet()) {
      index++;
      text=text.replace(""String_Node_Str"" + index + ""String_Node_Str"",toReplace.getValue());
    }
  }
  String[] oldParagraphs=text.split(newpara.replace(""String_Node_Str"",""String_Node_Str""));
  StringBuilder finalResult=new StringBuilder();
  int sentenceNewLineSize=Math.max(10,maxLineLength / 2);
  for (int para=0; para < oldParagraphs.length; para++) {
    String[] words=oldParagraphs[para].split(""String_Node_Str"");
    StringBuilder fullPara=new StringBuilder();
    StringBuilder thisLine=new StringBuilder();
    int currLineWC=0;
    int currLineCC=0;
    int linesWritten=0;
    char currLineLastChar=0;
    for (int i=0; i < words.length; i++) {
      int reqLength=ssd.lengthFor(words[i]);
      if (currLineWC > 0) {
        reqLength++;
      }
      if ((currLineCC + reqLength > maxLineLength) || (currLineCC >= sentenceNewLineSize && (currLineLastChar == '.' || currLineLastChar == '?' || currLineLastChar == '!' || currLineLastChar == '…' || currLineLastChar == ','))) {
        if (currLineWC > 0) {
          if (linesWritten > 1) {
            fullPara.append(extraline);
          }
 else           if (linesWritten == 1) {
            fullPara.append(newline);
          }
          fullPara.append(thisLine.toString());
          linesWritten++;
          thisLine=new StringBuilder();
        }
        thisLine.append(words[i]);
        currLineWC=1;
        currLineCC=ssd.lengthFor(words[i]);
        if (words[i].length() == 0) {
          currLineLastChar=0;
        }
 else {
          currLineLastChar=words[i].charAt(words[i].length() - 1);
        }
      }
 else {
        if (currLineWC > 0) {
          thisLine.append(' ');
        }
        thisLine.append(words[i]);
        currLineWC++;
        currLineCC+=reqLength;
        if (words[i].length() == 0) {
          currLineLastChar=0;
        }
 else {
          currLineLastChar=words[i].charAt(words[i].length() - 1);
        }
      }
    }
    if (currLineWC > 0) {
      if (linesWritten > 1) {
        fullPara.append(extraline);
      }
 else       if (linesWritten == 1) {
        fullPara.append(newline);
      }
      fullPara.append(thisLine.toString());
      linesWritten++;
    }
    if (para > 0) {
      finalResult.append(newpara);
    }
    finalResult.append(fullPara.toString());
  }
  if (endsWithPara) {
    finalResult.append(newpara);
  }
  return finalResult.toString();
}",0.9679319371727748
79882,"@Override public boolean setStaticPokemon(List<Pokemon> staticPokemon){
  if (!romEntry.staticPokemonSupport) {
    return false;
  }
  int sptsize=romEntry.arrayEntries.containsKey(""String_Node_Str"") ? romEntry.arrayEntries.get(""String_Node_Str"").length : 0;
  int meggsize=romEntry.getInt(""String_Node_Str"") > 0 ? 1 : 0;
  if (staticPokemon.size() != romEntry.staticPokemon.size() + sptsize + meggsize) {
    return false;
  }
  try {
    Iterator<Pokemon> statics=staticPokemon.iterator();
    NARCContents scriptNARC=scriptNarc;
    for (    StaticPokemon statP : romEntry.staticPokemon) {
      statP.setPokemon(this,scriptNARC,statics.next());
    }
    if (romEntry.arrayEntries.containsKey(""String_Node_Str"")) {
      NARCContents tradeNARC=this.readNARC(romEntry.getString(""String_Node_Str""));
      int[] trades=romEntry.arrayEntries.get(""String_Node_Str"");
      for (      int tradeNum : trades) {
        Pokemon thisTrade=statics.next();
        List<Integer> possibleAbilities=new ArrayList<Integer>();
        possibleAbilities.add(thisTrade.ability1);
        if (thisTrade.ability2 > 0) {
          possibleAbilities.add(thisTrade.ability2);
        }
        if (thisTrade.ability3 > 0) {
          possibleAbilities.add(thisTrade.ability3);
        }
        writeLong(tradeNARC.files.get(tradeNum),0,thisTrade.number);
        writeLong(tradeNARC.files.get(tradeNum),0x1C,possibleAbilities.get(RandomSource.nextInt(possibleAbilities.size())));
      }
      writeNARC(romEntry.getString(""String_Node_Str""),tradeNARC);
    }
    if (romEntry.getInt(""String_Node_Str"") > 0) {
      int pokenum=statics.next().number;
      if (pokenum > 255) {
        pokenum=RandomSource.nextInt(255) + 1;
      }
      byte[] ovOverlay=readOverlay(romEntry.getInt(""String_Node_Str""));
      ovOverlay[romEntry.getInt(""String_Node_Str"")]=(byte)pokenum;
      writeOverlay(romEntry.getInt(""String_Node_Str""),ovOverlay);
    }
    if (romEntry.getInt(""String_Node_Str"") > 0) {
      int baseOffset=romEntry.getInt(""String_Node_Str"");
      if (romEntry.romType == Type_HGSS) {
        byte[] ftData=readOverlay(romEntry.getInt(""String_Node_Str""));
        for (int f=0; f < 7; f++) {
          int pokenum=statics.next().number;
          writeWord(ftData,baseOffset + 2 + f * 4,pokenum);
        }
        writeOverlay(romEntry.getInt(""String_Node_Str""),ftData);
      }
 else {
        for (int f=0; f < 7; f++) {
          int pokenum=statics.next().number;
          writeWord(arm9,baseOffset + 2 + f * 4,pokenum);
        }
      }
    }
  }
 catch (  IOException e) {
    return false;
  }
  return true;
}","@Override public boolean setStaticPokemon(List<Pokemon> staticPokemon){
  if (!romEntry.staticPokemonSupport) {
    return false;
  }
  int sptsize=romEntry.arrayEntries.containsKey(""String_Node_Str"") ? romEntry.arrayEntries.get(""String_Node_Str"").length : 0;
  int meggsize=romEntry.getInt(""String_Node_Str"") > 0 ? 1 : 0;
  int fossilsize=romEntry.getInt(""String_Node_Str"") > 0 ? 7 : 0;
  if (staticPokemon.size() != romEntry.staticPokemon.size() + sptsize + meggsize+ fossilsize) {
    return false;
  }
  try {
    Iterator<Pokemon> statics=staticPokemon.iterator();
    NARCContents scriptNARC=scriptNarc;
    for (    StaticPokemon statP : romEntry.staticPokemon) {
      statP.setPokemon(this,scriptNARC,statics.next());
    }
    if (romEntry.arrayEntries.containsKey(""String_Node_Str"")) {
      NARCContents tradeNARC=this.readNARC(romEntry.getString(""String_Node_Str""));
      int[] trades=romEntry.arrayEntries.get(""String_Node_Str"");
      for (      int tradeNum : trades) {
        Pokemon thisTrade=statics.next();
        List<Integer> possibleAbilities=new ArrayList<Integer>();
        possibleAbilities.add(thisTrade.ability1);
        if (thisTrade.ability2 > 0) {
          possibleAbilities.add(thisTrade.ability2);
        }
        if (thisTrade.ability3 > 0) {
          possibleAbilities.add(thisTrade.ability3);
        }
        writeLong(tradeNARC.files.get(tradeNum),0,thisTrade.number);
        writeLong(tradeNARC.files.get(tradeNum),0x1C,possibleAbilities.get(RandomSource.nextInt(possibleAbilities.size())));
      }
      writeNARC(romEntry.getString(""String_Node_Str""),tradeNARC);
    }
    if (romEntry.getInt(""String_Node_Str"") > 0) {
      int pokenum=statics.next().number;
      if (pokenum > 255) {
        pokenum=RandomSource.nextInt(255) + 1;
      }
      byte[] ovOverlay=readOverlay(romEntry.getInt(""String_Node_Str""));
      ovOverlay[romEntry.getInt(""String_Node_Str"")]=(byte)pokenum;
      writeOverlay(romEntry.getInt(""String_Node_Str""),ovOverlay);
    }
    if (romEntry.getInt(""String_Node_Str"") > 0) {
      int baseOffset=romEntry.getInt(""String_Node_Str"");
      if (romEntry.romType == Type_HGSS) {
        byte[] ftData=readOverlay(romEntry.getInt(""String_Node_Str""));
        for (int f=0; f < 7; f++) {
          int pokenum=statics.next().number;
          writeWord(ftData,baseOffset + 2 + f * 4,pokenum);
        }
        writeOverlay(romEntry.getInt(""String_Node_Str""),ftData);
      }
 else {
        for (int f=0; f < 7; f++) {
          int pokenum=statics.next().number;
          writeWord(arm9,baseOffset + 2 + f * 4,pokenum);
        }
      }
    }
  }
 catch (  IOException e) {
    return false;
  }
  return true;
}",0.9854853911404337
79883,"public Builder setRequesterPaysBuckets(Collection<String> requesterPaysBuckets){
  this.requesterPaysBuckets=requesterPaysBuckets == null ? ImmutableSet.of() : ImmutableSet.copyOf(requesterPaysBuckets);
  return this;
}","public Builder setRequesterPaysBuckets(Collection<String> requesterPaysBuckets){
  this.requesterPaysBuckets=requesterPaysBuckets == null ? ImmutableSet.<String>of() : ImmutableSet.copyOf(requesterPaysBuckets);
  return this;
}",0.9820627802690582
79884,"/** 
 * Constructs a BigQuery from a given Credential.
 */
public Bigquery getBigQueryFromCredential(Credential credential,String appName){
  LOG.info(""String_Node_Str"");
  if (credential != null) {
    return new Bigquery.Builder(HTTP_TRANSPORT,JSON_FACTORY,new RetryHttpInitializer(credential,appName)).setApplicationName(appName).build();
  }
  return new Bigquery.Builder(HTTP_TRANSPORT,JSON_FACTORY,credential).setApplicationName(appName).build();
}","/** 
 * Constructs a BigQuery from a given Credential.
 */
public Bigquery getBigQueryFromCredential(Credential credential,String appName){
  LOG.info(""String_Node_Str"");
  if (credential != null) {
    return new Bigquery.Builder(HTTP_TRANSPORT,JSON_FACTORY,new RetryHttpInitializer(credential,appName)).setApplicationName(appName).build();
  }
  return new Bigquery.Builder(HTTP_TRANSPORT,JSON_FACTORY,null).setApplicationName(appName).build();
}",0.9866962305986696
79885,"/** 
 * Deletes the temporary dataset, including all of the work tables.
 * @param context the job's context.
 * @throws IOException
 */
@Override public void cleanupJob(JobContext context) throws IOException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",HadoopToStringUtil.toString(context));
  }
  Bigquery.Datasets datasets=bigQueryHelper.getRawBigquery().datasets();
  Configuration config=context.getConfiguration();
  try {
    LOG.debug(""String_Node_Str"",tempTableRef.getDatasetId(),tempTableRef.getProjectId());
    datasets.delete(tempTableRef.getProjectId(),tempTableRef.getDatasetId()).setDeleteContents(true).execute();
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"",e);
  }
}","/** 
 * Deletes the temporary dataset, including all of the work tables.
 * @param context the job's context.
 * @throws IOException
 */
@Override public void cleanupJob(JobContext context) throws IOException {
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",HadoopToStringUtil.toString(context));
  }
  Bigquery.Datasets datasets=bigQueryHelper.getRawBigquery().datasets();
  try {
    LOG.debug(""String_Node_Str"",tempTableRef.getDatasetId(),tempTableRef.getProjectId());
    datasets.delete(tempTableRef.getProjectId(),tempTableRef.getDatasetId()).setDeleteContents(true).execute();
  }
 catch (  IOException e) {
    LOG.warn(""String_Node_Str"",e);
  }
}",0.96333572969087
79886,"/** 
 * Sets delegate that this OutputFormat will wrap. This is exposed for testing purposes.
 * @param delegate that this OutputFormat will wrap.
 */
@VisibleForTesting void setDelegate(FileOutputFormat<K,V> delegate){
  this.delegate=delegate;
}","/** 
 * Sets delegate that this OutputFormat will wrap. This is exposed for testing purposes.
 * @param delegate that this OutputFormat will wrap.
 */
@VisibleForTesting synchronized void setDelegate(FileOutputFormat<K,V> delegate){
  this.delegate=delegate;
}",0.9743589743589745
79887,"/** 
 * Tests the needsTaskCommit method of BigQueryOutputFormat.
 */
@Test public void testNeedsTaskCommit() throws IOException {
  Table tableToReturn=new Table().setId(TEMP_TABLE_ID);
  when(mockBigQueryHelper.tableExists(any(TableReference.class))).thenReturn(false).thenReturn(true);
  Assert.assertEquals(false,committerInstance.needsTaskCommit(mockTaskAttemptContext));
  Assert.assertEquals(true,committerInstance.needsTaskCommit(mockTaskAttemptContext));
  verify(mockBigQueryHelper,times(2)).tableExists(eq(tempTableRef));
  verify(mockBigQueryHelper,never()).getRawBigquery();
}","/** 
 * Tests the needsTaskCommit method of BigQueryOutputFormat.
 */
@Test public void testNeedsTaskCommit() throws IOException {
  when(mockBigQueryHelper.tableExists(any(TableReference.class))).thenReturn(false).thenReturn(true);
  Assert.assertEquals(false,committerInstance.needsTaskCommit(mockTaskAttemptContext));
  Assert.assertEquals(true,committerInstance.needsTaskCommit(mockTaskAttemptContext));
  verify(mockBigQueryHelper,times(2)).tableExists(eq(tempTableRef));
  verify(mockBigQueryHelper,never()).getRawBigquery();
}",0.9500891265597148
79888,"/** 
 * Verifies there are no more interactions.
 */
@After public void tearDown(){
  verifyNoMoreInteractions(mockBigquery);
  verifyNoMoreInteractions(mockBigqueryTables);
  verifyNoMoreInteractions(mockBigqueryTablesDelete);
  verifyNoMoreInteractions(mockBigqueryTablesGet);
  verifyNoMoreInteractions(mockBigqueryDatasets);
  verifyNoMoreInteractions(mockBigqueryDatasetsInsert);
  verifyNoMoreInteractions(mockBigqueryDatasetsDelete);
  verifyNoMoreInteractions(mockErrorExtractor);
  verifyNoMoreInteractions(mockBigQueryHelper);
}","/** 
 * Verifies there are no more interactions.
 */
@After public void tearDown(){
  verifyNoMoreInteractions(mockBigquery);
  verifyNoMoreInteractions(mockBigqueryTables);
  verifyNoMoreInteractions(mockBigqueryTablesDelete);
  verifyNoMoreInteractions(mockBigqueryTablesGet);
  verifyNoMoreInteractions(mockBigqueryDatasets);
  verifyNoMoreInteractions(mockBigqueryDatasetsInsert);
  verifyNoMoreInteractions(mockBigqueryDatasetsDelete);
  verifyNoMoreInteractions(mockBigQueryHelper);
}",0.953307392996109
79889,"/** 
 * Sets up common objects for testing before each test.
 */
@Before public void setUp() throws IOException {
  MockitoAnnotations.initMocks(this);
  conf=InMemoryGoogleHadoopFileSystem.getSampleConfiguration();
  expectedTempDataset=new Dataset().setDatasetReference(new DatasetReference().setProjectId(TEMP_PROJECT_ID).setDatasetId(TEMP_DATASET_ID)).setLocation(conf.get(BigQueryConfiguration.DATA_LOCATION_KEY,BigQueryConfiguration.DATA_LOCATION_DEFAULT));
  CredentialConfigurationUtil.addTestConfigurationSettings(conf);
  jobContext=org.apache.hadoop.mapreduce.Job.getInstance(conf);
  tempTableRef=new TableReference().setProjectId(TEMP_PROJECT_ID).setDatasetId(TEMP_DATASET_ID).setTableId(TEMP_TABLE_ID);
  finalTableRef=new TableReference().setProjectId(FINAL_PROJECT_ID).setDatasetId(FINAL_DATASET_ID).setTableId(FINAL_TABLE_ID);
  fakeTaskId=new TaskAttemptID(new TaskID(""String_Node_Str"",123,false,42),2);
  when(mockBigQueryHelper.getRawBigquery()).thenReturn(mockBigquery);
  jobReference=new JobReference().setProjectId(JOB_PROJECT_ID).setJobId(""String_Node_Str"");
  when(mockBigquery.jobs()).thenReturn(mockBigqueryJobs);
  when(mockBigqueryJobs.insert(any(String.class),any(Job.class))).thenReturn(mockBigqueryJobsInsert);
  when(mockBigqueryJobs.get(any(String.class),any(String.class))).thenReturn(mockBigqueryJobsGet);
  committerInstance=new BigQueryOutputCommitter(JOB_PROJECT_ID,tempTableRef,finalTableRef,conf);
  committerInstance.setBigQueryHelper(mockBigQueryHelper);
  committerInstance.setErrorExtractor(mockErrorExtractor);
}","/** 
 * Sets up common objects for testing before each test.
 */
@Before public void setUp() throws IOException {
  MockitoAnnotations.initMocks(this);
  conf=InMemoryGoogleHadoopFileSystem.getSampleConfiguration();
  expectedTempDataset=new Dataset().setDatasetReference(new DatasetReference().setProjectId(TEMP_PROJECT_ID).setDatasetId(TEMP_DATASET_ID)).setLocation(conf.get(BigQueryConfiguration.DATA_LOCATION_KEY,BigQueryConfiguration.DATA_LOCATION_DEFAULT));
  CredentialConfigurationUtil.addTestConfigurationSettings(conf);
  jobContext=org.apache.hadoop.mapreduce.Job.getInstance(conf);
  tempTableRef=new TableReference().setProjectId(TEMP_PROJECT_ID).setDatasetId(TEMP_DATASET_ID).setTableId(TEMP_TABLE_ID);
  finalTableRef=new TableReference().setProjectId(FINAL_PROJECT_ID).setDatasetId(FINAL_DATASET_ID).setTableId(FINAL_TABLE_ID);
  fakeTaskId=new TaskAttemptID(new TaskID(""String_Node_Str"",123,false,42),2);
  when(mockBigQueryHelper.getRawBigquery()).thenReturn(mockBigquery);
  jobReference=new JobReference().setProjectId(JOB_PROJECT_ID).setJobId(""String_Node_Str"");
  when(mockBigquery.jobs()).thenReturn(mockBigqueryJobs);
  when(mockBigqueryJobs.insert(any(String.class),any(Job.class))).thenReturn(mockBigqueryJobsInsert);
  when(mockBigqueryJobs.get(any(String.class),any(String.class))).thenReturn(mockBigqueryJobsGet);
  committerInstance=new BigQueryOutputCommitter(JOB_PROJECT_ID,tempTableRef,finalTableRef,conf);
  committerInstance.setBigQueryHelper(mockBigQueryHelper);
}",0.9807126511932004
79890,"@Override protected void checkPath(Path path){
  URI uri=path.toUri();
  String scheme=uri.getScheme();
  if (scheme == null || scheme.equalsIgnoreCase(getScheme())) {
    return;
  }
 else {
    String msg=String.format(""String_Node_Str"",scheme,path,getScheme());
    throw new IllegalArgumentException(msg);
  }
}","@Override protected void checkPath(Path path){
  URI uri=path.toUri();
  String scheme=uri.getScheme();
  if (scheme == null || scheme.equalsIgnoreCase(getScheme())) {
    return;
  }
  String msg=String.format(""String_Node_Str"",scheme,path,getScheme());
  throw new IllegalArgumentException(msg);
}",0.973941368078176
79891,"public static void main(String[] args) throws IOException {
  GenericOptionsParser parser=new GenericOptionsParser(args);
  args=parser.getRemainingArgs();
  Configuration configuration=parser.getConfiguration();
  if (""String_Node_Str"".equals(configuration.get(""String_Node_Str"",""String_Node_Str""))) {
    String fsStringPath=configuration.get(""String_Node_Str"",""String_Node_Str"");
    Preconditions.checkState(!Strings.isNullOrEmpty(fsStringPath));
    LOG.info(""String_Node_Str"",fsStringPath);
    Path path=Paths.get(fsStringPath);
    if (Files.exists(path)) {
      FileSystemBackedDirectoryListCache cache=new FileSystemBackedDirectoryListCache(fsStringPath);
      cleanCache(cache);
    }
  }
  LOG.info(""String_Node_Str"");
}","public static void main(String[] args) throws IOException {
  GenericOptionsParser parser=new GenericOptionsParser(args);
  Configuration configuration=parser.getConfiguration();
  if (""String_Node_Str"".equals(configuration.get(""String_Node_Str"",""String_Node_Str""))) {
    String fsStringPath=configuration.get(""String_Node_Str"",""String_Node_Str"");
    Preconditions.checkState(!Strings.isNullOrEmpty(fsStringPath));
    LOG.info(""String_Node_Str"",fsStringPath);
    Path path=Paths.get(fsStringPath);
    if (Files.exists(path)) {
      FileSystemBackedDirectoryListCache cache=new FileSystemBackedDirectoryListCache(fsStringPath);
      cleanCache(cache);
    }
  }
  LOG.info(""String_Node_Str"");
}",0.9762900976290098
79892,"/** 
 * Helper for determining whether a CacheEntry is entirely expired and should be removed from the cache.
 */
protected synchronized boolean isCacheEntryExpired(CacheEntry entry){
  long creationTime=entry.getCreationTimeMillis();
  long entryAge=clock.currentTimeMillis() - creationTime;
  if (entryAge > cacheConfig.getMaxEntryAgeMillis()) {
    return true;
  }
  return false;
}","/** 
 * Helper for determining whether a CacheEntry is entirely expired and should be removed from the cache.
 */
protected synchronized boolean isCacheEntryExpired(CacheEntry entry){
  long creationTime=entry.getCreationTimeMillis();
  long entryAge=clock.currentTimeMillis() - creationTime;
  return entryAge > cacheConfig.getMaxEntryAgeMillis();
}",0.9320652173913044
79893,"@Override public List<CacheEntry> getObjectList(final String bucketName,final String objectNamePrefix,final String delimiter,Set<String> returnedPrefixes) throws IOException {
  LOG.debug(""String_Node_Str"",bucketName,objectNamePrefix,delimiter);
  Preconditions.checkArgument(delimiter == null || ""String_Node_Str"".equals(delimiter),""String_Node_Str"",delimiter);
  StorageResourceId listBase=null;
  if (Strings.isNullOrEmpty(objectNamePrefix)) {
    listBase=new StorageResourceId(bucketName);
  }
 else {
    int indexOfDelim=objectNamePrefix.lastIndexOf('/');
    if (indexOfDelim == -1) {
      listBase=new StorageResourceId(bucketName);
    }
 else {
      String objectToList=objectNamePrefix.substring(0,indexOfDelim + 1);
      listBase=new StorageResourceId(bucketName,objectToList);
    }
  }
  LOG.debug(""String_Node_Str"",listBase);
  Preconditions.checkState(listBase != null,""String_Node_Str"");
  validateResourceId(listBase);
  final Path listBasePath=getMirrorPath(listBase);
  File listBaseFile=listBasePath.toFile();
  if (!listBaseFile.exists()) {
    LOG.debug(""String_Node_Str"",listBaseFile,listBase);
    return null;
  }
  final List<CacheEntry> cacheEntries=new ArrayList<>();
  final Path bucketBasePath=getMirrorPath(new StorageResourceId(bucketName));
  final FileCallback fileVisitor=new FileCallback(){
    public void run(    File candidateFile) throws IOException {
      Path objectNamePath=bucketBasePath.relativize(candidateFile.toPath());
      String objectNamePathString=objectNamePath.toString();
      if (candidateFile.isDirectory()) {
        objectNamePathString=StorageResourceId.convertToDirectoryPath(objectNamePathString);
      }
      StorageResourceId objectId=new StorageResourceId(bucketName,objectNamePathString);
      CacheEntry entry=new CacheEntry(objectId,candidateFile.lastModified());
      if (isCacheEntryExpired(entry)) {
        LOG.debug(""String_Node_Str"",objectId);
        removeResourceId(objectId);
      }
 else {
        String objectName=objectId.getObjectName();
        String matchedName=GoogleCloudStorageStrings.matchListPrefix(objectNamePrefix,delimiter,objectName);
        if (matchedName != null && objectName.equals(matchedName)) {
          LOG.debug(""String_Node_Str"",objectId);
          cacheEntries.add(entry);
        }
      }
    }
  }
;
  if (delimiter != null) {
    File[] fileList=listBaseFile.listFiles();
    if (fileList != null) {
      for (      File object : fileList) {
        fileVisitor.run(object);
      }
    }
 else {
      LOG.warn(""String_Node_Str"",listBaseFile);
      return null;
    }
  }
 else {
    Files.walkFileTree(listBasePath,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException ioe) throws IOException {
        if (!listBasePath.equals(dir)) {
          fileVisitor.run(dir.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        fileVisitor.run(file.toFile());
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
  return cacheEntries;
}","@Override public List<CacheEntry> getObjectList(final String bucketName,final String objectNamePrefix,final String delimiter,Set<String> returnedPrefixes) throws IOException {
  LOG.debug(""String_Node_Str"",bucketName,objectNamePrefix,delimiter);
  Preconditions.checkArgument(delimiter == null || ""String_Node_Str"".equals(delimiter),""String_Node_Str"",delimiter);
  StorageResourceId listBase;
  if (Strings.isNullOrEmpty(objectNamePrefix)) {
    listBase=new StorageResourceId(bucketName);
  }
 else {
    int indexOfDelim=objectNamePrefix.lastIndexOf('/');
    if (indexOfDelim == -1) {
      listBase=new StorageResourceId(bucketName);
    }
 else {
      String objectToList=objectNamePrefix.substring(0,indexOfDelim + 1);
      listBase=new StorageResourceId(bucketName,objectToList);
    }
  }
  LOG.debug(""String_Node_Str"",listBase);
  validateResourceId(listBase);
  final Path listBasePath=getMirrorPath(listBase);
  File listBaseFile=listBasePath.toFile();
  if (!listBaseFile.exists()) {
    LOG.debug(""String_Node_Str"",listBaseFile,listBase);
    return null;
  }
  final List<CacheEntry> cacheEntries=new ArrayList<>();
  final Path bucketBasePath=getMirrorPath(new StorageResourceId(bucketName));
  final FileCallback fileVisitor=new FileCallback(){
    @Override public void run(    File candidateFile) throws IOException {
      Path objectNamePath=bucketBasePath.relativize(candidateFile.toPath());
      String objectNamePathString=objectNamePath.toString();
      if (candidateFile.isDirectory()) {
        objectNamePathString=StorageResourceId.convertToDirectoryPath(objectNamePathString);
      }
      StorageResourceId objectId=new StorageResourceId(bucketName,objectNamePathString);
      CacheEntry entry=new CacheEntry(objectId,candidateFile.lastModified());
      if (isCacheEntryExpired(entry)) {
        LOG.debug(""String_Node_Str"",objectId);
        removeResourceId(objectId);
      }
 else {
        String objectName=objectId.getObjectName();
        String matchedName=GoogleCloudStorageStrings.matchListPrefix(objectNamePrefix,delimiter,objectName);
        if (matchedName != null && objectName.equals(matchedName)) {
          LOG.debug(""String_Node_Str"",objectId);
          cacheEntries.add(entry);
        }
      }
    }
  }
;
  if (delimiter != null) {
    File[] fileList=listBaseFile.listFiles();
    if (fileList != null) {
      for (      File object : fileList) {
        fileVisitor.run(object);
      }
    }
 else {
      LOG.warn(""String_Node_Str"",listBaseFile);
      return null;
    }
  }
 else {
    Files.walkFileTree(listBasePath,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException ioe) throws IOException {
        if (!listBasePath.equals(dir)) {
          fileVisitor.run(dir.toFile());
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        fileVisitor.run(file.toFile());
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
  return cacheEntries;
}",0.9874662858956051
79894,"@Override public List<CacheEntry> getRawBucketList() throws IOException {
  LOG.debug(""String_Node_Str"");
  File[] bucketList=basePath.toFile().listFiles();
  List<CacheEntry> bucketEntries=new ArrayList<>();
  for (  File bucket : bucketList) {
    if (!bucket.isDirectory()) {
      LOG.error(""String_Node_Str"",bucket);
      continue;
    }
    StorageResourceId bucketId=new StorageResourceId(bucket.getName());
    CacheEntry entry=new CacheEntry(bucketId,bucket.lastModified());
    bucketEntries.add(entry);
  }
  return bucketEntries;
}","@Override public List<CacheEntry> getRawBucketList() throws IOException {
  LOG.debug(""String_Node_Str"");
  File[] bucketList=basePath.toFile().listFiles();
  if (bucketList == null) {
    throw new IOException(""String_Node_Str"" + basePath);
  }
  if (bucketList.length == 0) {
    return ImmutableList.of();
  }
  List<CacheEntry> bucketEntries=new ArrayList<>();
  for (  File bucket : bucketList) {
    if (!bucket.isDirectory()) {
      LOG.error(""String_Node_Str"",bucket);
      continue;
    }
    StorageResourceId bucketId=new StorageResourceId(bucket.getName());
    CacheEntry entry=new CacheEntry(bucketId,bucket.lastModified());
    bucketEntries.add(entry);
  }
  return bucketEntries;
}",0.8745980707395499
79895,"public void run(File candidateFile) throws IOException {
  Path objectNamePath=bucketBasePath.relativize(candidateFile.toPath());
  String objectNamePathString=objectNamePath.toString();
  if (candidateFile.isDirectory()) {
    objectNamePathString=StorageResourceId.convertToDirectoryPath(objectNamePathString);
  }
  StorageResourceId objectId=new StorageResourceId(bucketName,objectNamePathString);
  CacheEntry entry=new CacheEntry(objectId,candidateFile.lastModified());
  if (isCacheEntryExpired(entry)) {
    LOG.debug(""String_Node_Str"",objectId);
    removeResourceId(objectId);
  }
 else {
    String objectName=objectId.getObjectName();
    String matchedName=GoogleCloudStorageStrings.matchListPrefix(objectNamePrefix,delimiter,objectName);
    if (matchedName != null && objectName.equals(matchedName)) {
      LOG.debug(""String_Node_Str"",objectId);
      cacheEntries.add(entry);
    }
  }
}","@Override public void run(File candidateFile) throws IOException {
  Path objectNamePath=bucketBasePath.relativize(candidateFile.toPath());
  String objectNamePathString=objectNamePath.toString();
  if (candidateFile.isDirectory()) {
    objectNamePathString=StorageResourceId.convertToDirectoryPath(objectNamePathString);
  }
  StorageResourceId objectId=new StorageResourceId(bucketName,objectNamePathString);
  CacheEntry entry=new CacheEntry(objectId,candidateFile.lastModified());
  if (isCacheEntryExpired(entry)) {
    LOG.debug(""String_Node_Str"",objectId);
    removeResourceId(objectId);
  }
 else {
    String objectName=objectId.getObjectName();
    String matchedName=GoogleCloudStorageStrings.matchListPrefix(objectNamePrefix,delimiter,objectName);
    if (matchedName != null && objectName.equals(matchedName)) {
      LOG.debug(""String_Node_Str"",objectId);
      cacheEntries.add(entry);
    }
  }
}",0.9944994499449944
79896,"@Override public List<CacheEntry> getBucketList() throws IOException {
  LOG.debug(""String_Node_Str"");
  File[] bucketList=basePath.toFile().listFiles();
  List<CacheEntry> bucketEntries=new ArrayList<>();
  Set<StorageResourceId> expiredBuckets=new HashSet<>();
  for (  File bucket : bucketList) {
    if (!bucket.isDirectory()) {
      LOG.error(""String_Node_Str"",bucket);
      continue;
    }
    StorageResourceId bucketId=new StorageResourceId(bucket.getName());
    CacheEntry entry=new CacheEntry(bucketId,bucket.lastModified());
    if (isCacheEntryExpired(entry)) {
      expiredBuckets.add(bucketId);
    }
 else {
      bucketEntries.add(entry);
    }
  }
  for (  StorageResourceId expiredBucket : expiredBuckets) {
    LOG.debug(""String_Node_Str"",expiredBucket);
    removeResourceId(expiredBucket);
  }
  return bucketEntries;
}","@Override public List<CacheEntry> getBucketList() throws IOException {
  LOG.debug(""String_Node_Str"");
  File[] bucketList=basePath.toFile().listFiles();
  if (bucketList == null) {
    throw new IOException(""String_Node_Str"" + basePath);
  }
  if (bucketList.length == 0) {
    return ImmutableList.of();
  }
  List<CacheEntry> bucketEntries=new ArrayList<>();
  Set<StorageResourceId> expiredBuckets=new HashSet<>();
  for (  File bucket : bucketList) {
    if (!bucket.isDirectory()) {
      LOG.error(""String_Node_Str"",bucket);
      continue;
    }
    StorageResourceId bucketId=new StorageResourceId(bucket.getName());
    CacheEntry entry=new CacheEntry(bucketId,bucket.lastModified());
    if (isCacheEntryExpired(entry)) {
      expiredBuckets.add(bucketId);
    }
 else {
      bucketEntries.add(entry);
    }
  }
  for (  StorageResourceId expiredBucket : expiredBuckets) {
    LOG.debug(""String_Node_Str"",expiredBucket);
    removeResourceId(expiredBucket);
  }
  return bucketEntries;
}",0.915401301518438
79897,"@Override public int getInternalNumBuckets() throws IOException {
  return basePath.toFile().listFiles().length;
}","@Override public int getInternalNumBuckets() throws IOException {
  File[] bucketList=basePath.toFile().listFiles();
  if (bucketList == null) {
    throw new IOException(""String_Node_Str"" + basePath);
  }
  return bucketList.length;
}",0.6131805157593123
79898,"@Test public void testMultipleSplits() throws IOException, InterruptedException {
  long fileLength=testAvroFile.length();
  List<FileSplit> splits=new ArrayList<>();
  Path hadoopPath=new Path(""String_Node_Str"" + testAvroFile.getAbsolutePath());
  for (int blockStart=0; blockStart < fileLength; blockStart+=AUTO_SYNC_INTERVAL) {
    splits.add(new FileSplit(hadoopPath,blockStart,AUTO_SYNC_INTERVAL,new String[0]));
  }
  List<String> allRecordKeys=new ArrayList<>();
  long totalFileRecords=0;
  for (  FileSplit split : splits) {
    try (AvroRecordReader reader=new AvroRecordReader()){
      reader.initializeInternal(split,new Configuration());
      List<String> keysInSplit=collectRecordKeys(reader);
      allRecordKeys.addAll(keysInSplit);
      int recordsInSplit=keysInSplit.size();
      totalFileRecords+=recordsInSplit;
      Truth.assertThat(recordsInSplit).isLessThan(RECORD_COUNT);
    }
   }
  Truth.assertThat(allRecordKeys).containsExactlyElementsIn(allAddedKeys);
  Assert.assertEquals(RECORD_COUNT,totalFileRecords);
}","@Test public void testMultipleSplits() throws IOException, InterruptedException {
  long fileLength=testAvroFile.length();
  List<FileSplit> splits=new ArrayList<>();
  Path hadoopPath=new Path(""String_Node_Str"" + testAvroFile.getAbsolutePath());
  for (int blockStart=0; blockStart < fileLength; blockStart+=AUTO_SYNC_INTERVAL) {
    splits.add(new FileSplit(hadoopPath,blockStart,AUTO_SYNC_INTERVAL,new String[0]));
  }
  List<String> allRecordKeys=new ArrayList<>();
  long totalFileRecords=0;
  for (  FileSplit split : splits) {
    try (AvroRecordReader reader=new AvroRecordReader()){
      reader.initializeInternal(split,new Configuration());
      List<String> keysInSplit=collectRecordKeys(reader);
      allRecordKeys.addAll(keysInSplit);
      int recordsInSplit=keysInSplit.size();
      totalFileRecords+=recordsInSplit;
      Truth.assertThat(recordsInSplit).isLessThan(RECORD_COUNT);
    }
   }
  Truth.assertThat(allRecordKeys).containsExactlyElementsIn(allAddedKeys);
  Truth.assertThat(totalFileRecords).isEqualTo(RECORD_COUNT);
}",0.9665391969407264
79899,"@Before public void setup() throws IOException {
  Schema schema=SchemaBuilder.record(""String_Node_Str"").fields().name(""String_Node_Str"").type().stringBuilder().endString().noDefault().name(""String_Node_Str"").type().stringBuilder().endString().noDefault().name(""String_Node_Str"").type().intBuilder().endInt().noDefault().endRecord();
  GenericDatumWriter<GenericData.Record> recordWriter=new GenericDatumWriter<>(schema);
  testAvroFile=temporaryFolder.newFile(""String_Node_Str"");
  if (testAvroFile.exists()) {
    testAvroFile.delete();
  }
  DataFileWriter<GenericData.Record> dataFileWriter=new DataFileWriter<>(recordWriter).create(schema,testAvroFile);
  dataFileWriter.setSyncInterval(AUTO_SYNC_INTERVAL);
  ImmutableList.Builder<String> addedKeysBuilder=ImmutableList.builder();
  for (int idx=0; idx < RECORD_COUNT; idx++) {
    GenericData.Record record=new GenericData.Record(schema);
    String key=String.format(""String_Node_Str"",idx);
    record.put(""String_Node_Str"",key);
    record.put(""String_Node_Str"",String.format(""String_Node_Str"",idx));
    record.put(""String_Node_Str"",new Integer(idx * RECORD_COUNT));
    dataFileWriter.append(record);
    addedKeysBuilder.add(key);
  }
  dataFileWriter.close();
  allAddedKeys=addedKeysBuilder.build();
}","@Before public void setup() throws IOException {
  Schema schema=SchemaBuilder.record(""String_Node_Str"").fields().name(""String_Node_Str"").type().stringBuilder().endString().noDefault().name(""String_Node_Str"").type().stringBuilder().endString().noDefault().name(""String_Node_Str"").type().intBuilder().endInt().noDefault().endRecord();
  GenericDatumWriter<GenericData.Record> recordWriter=new GenericDatumWriter<>(schema);
  testAvroFile=temporaryFolder.newFile(""String_Node_Str"");
  if (testAvroFile.exists()) {
    testAvroFile.delete();
  }
  DataFileWriter<GenericData.Record> dataFileWriter=new DataFileWriter<>(recordWriter).create(schema,testAvroFile);
  dataFileWriter.setSyncInterval(AUTO_SYNC_INTERVAL);
  ImmutableList.Builder<String> addedKeysBuilder=ImmutableList.builder();
  for (int idx=0; idx < RECORD_COUNT; idx++) {
    GenericData.Record record=new GenericData.Record(schema);
    String key=String.format(""String_Node_Str"",idx);
    record.put(""String_Node_Str"",key);
    record.put(""String_Node_Str"",String.format(""String_Node_Str"",idx));
    record.put(""String_Node_Str"",idx * RECORD_COUNT);
    dataFileWriter.append(record);
    addedKeysBuilder.add(key);
  }
  dataFileWriter.close();
  allAddedKeys=addedKeysBuilder.build();
}",0.9948351211760031
79900,"@Test public void testSingleSplit() throws IOException, InterruptedException {
  FileSplit fileSplit=new FileSplit(new Path(""String_Node_Str"" + testAvroFile.getAbsolutePath()),0,testAvroFile.length(),new String[0]);
  AvroRecordReader recordReader=new AvroRecordReader();
  recordReader.initializeInternal(fileSplit,new Configuration());
  Assert.assertEquals(RECORD_COUNT,remainingRecordCount(recordReader));
  recordReader.close();
}","@Test public void testSingleSplit() throws IOException, InterruptedException {
  FileSplit fileSplit=new FileSplit(new Path(""String_Node_Str"" + testAvroFile.getAbsolutePath()),0,testAvroFile.length(),new String[0]);
  AvroRecordReader recordReader=new AvroRecordReader();
  recordReader.initializeInternal(fileSplit,new Configuration());
  Truth.assertThat(remainingRecordCount(recordReader)).isEqualTo(RECORD_COUNT);
  recordReader.close();
}",0.8792710706150342
79901,"/** 
 * Extracts the error message.
 */
public String getErrorMessage(IOException e){
  if (e instanceof GoogleJsonResponseException) {
    GoogleJsonResponseException gjre=((GoogleJsonResponseException)e);
    if (gjre.getDetails() != null) {
      return gjre.getDetails().getMessage();
    }
  }
  return e.getMessage();
}","/** 
 * Extracts the error message. 
 */
public String getErrorMessage(IOException e){
  GoogleJsonResponseException gjre=getJsonResponseExceptionOrNull(e);
  if (gjre != null && gjre.getDetails() != null) {
    return gjre.getDetails().getMessage();
  }
  return e.getMessage();
}",0.5082508250825083
79902,"@Test public void testClose(){
  cache.putItem(ITEM_A_A);
  gcs.close();
  verify(gcsDelegate).close();
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
}","@Test public void testClose(){
  cache.putItem(ITEM_A_A);
  gcs.close();
  verify(gcsDelegate).close();
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
}",0.9270833333333334
79903,"/** 
 * Test items can be removed. 
 */
@Test public void testRemoveItemNormal(){
  cache.putItem(ITEM_A_A);
  GoogleCloudStorageItemInfo actualItem=cache.removeItem(ITEM_A_A.getResourceId());
  assertEquals(actualItem,ITEM_A_A);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
}","/** 
 * Test items can be removed. 
 */
@Test public void testRemoveItemNormal(){
  cache.putItem(ITEM_A_A);
  GoogleCloudStorageItemInfo actualItem=cache.removeItem(ITEM_A_A.getResourceId());
  assertEquals(actualItem,ITEM_A_A);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
}",0.9559748427672956
79904,"/** 
 * Test missing items cannot be removed. 
 */
@Test public void testRemoveItemMissing(){
  GoogleCloudStorageItemInfo actualItem=cache.removeItem(ITEM_A_AA.getResourceId());
  assertNull(actualItem);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
}","/** 
 * Test missing items cannot be removed. 
 */
@Test public void testRemoveItemMissing(){
  GoogleCloudStorageItemInfo actualItem=cache.removeItem(ITEM_A_AA.getResourceId());
  assertNull(actualItem);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
}",0.9522184300341296
79905,"/** 
 * Test missing items cannot be retrieved. 
 */
@Test public void testGetItemMissing(){
  GoogleCloudStorageItemInfo actualItem=cache.getItem(ITEM_A_A.getResourceId());
  assertNull(actualItem);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
}","/** 
 * Test missing items cannot be retrieved. 
 */
@Test public void testGetItemMissing(){
  GoogleCloudStorageItemInfo actualItem=cache.getItem(ITEM_A_A.getResourceId());
  assertNull(actualItem);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
}",0.9513888888888888
79906,"/** 
 * Test missing items can be removed. 
 */
@Test public void testRemoveItemExpired(){
  cache.putList(BUCKET_A,""String_Node_Str"",Lists.newArrayList(ITEM_A_A,ITEM_A_AA,ITEM_A_ABA));
  cache.putList(BUCKET_A,PREFIX_AA,Lists.newArrayList(ITEM_A_AA));
  ticker.setTimeMillis(11);
  GoogleCloudStorageItemInfo actualItem=cache.removeItem(ITEM_A_A.getResourceId());
  assertEquals(actualItem,null);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
  assertFalse(cache.containsListRaw(BUCKET_A,""String_Node_Str""));
  assertTrue(cache.containsListRaw(BUCKET_A,PREFIX_AA));
}","/** 
 * Test missing items can be removed. 
 */
@Test public void testRemoveItemExpired(){
  cache.putList(BUCKET_A,""String_Node_Str"",Lists.newArrayList(ITEM_A_A,ITEM_A_AA,ITEM_A_ABA));
  cache.putList(BUCKET_A,PREFIX_AA,Lists.newArrayList(ITEM_A_AA));
  ticker.setTimeMillis(11);
  GoogleCloudStorageItemInfo actualItem=cache.removeItem(ITEM_A_A.getResourceId());
  assertEquals(actualItem,null);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
  assertFalse(cache.containsListRaw(BUCKET_A,""String_Node_Str""));
  assertTrue(cache.containsListRaw(BUCKET_A,PREFIX_AA));
}",0.9770114942528736
79907,"/** 
 * Test missing lists cannot be retrieved. 
 */
@Test public void testGetListMissing(){
  List<GoogleCloudStorageItemInfo> actualItems=cache.getList(BUCKET_A,PREFIX_A);
  assertNull(actualItems);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
}","/** 
 * Test missing lists cannot be retrieved. 
 */
@Test public void testGetListMissing(){
  List<GoogleCloudStorageItemInfo> actualItems=cache.getList(BUCKET_A,PREFIX_A);
  assertNull(actualItems);
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
}",0.9515570934256056
79908,"/** 
 * Test all items are cleared by invalidate all. 
 */
@Test public void testInvalidateAll(){
  cache.putList(BUCKET_A,""String_Node_Str"",Lists.newArrayList(ITEM_A_A,ITEM_A_AA,ITEM_A_ABA));
  cache.putList(BUCKET_A,PREFIX_AA,Lists.newArrayList(ITEM_A_AA));
  cache.invalidateAll();
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.newArrayList());
  assertFalse(cache.containsListRaw(BUCKET_A,""String_Node_Str""));
  assertFalse(cache.containsListRaw(BUCKET_A,PREFIX_AA));
}","/** 
 * Test all items are cleared by invalidate all. 
 */
@Test public void testInvalidateAll(){
  cache.putList(BUCKET_A,""String_Node_Str"",Lists.newArrayList(ITEM_A_A,ITEM_A_AA,ITEM_A_ABA));
  cache.putList(BUCKET_A,PREFIX_AA,Lists.newArrayList(ITEM_A_AA));
  cache.invalidateAll();
  assertContainsInAnyOrder(cache.getAllItemsRaw(),Lists.<GoogleCloudStorageItemInfo>newArrayList());
  assertFalse(cache.containsListRaw(BUCKET_A,""String_Node_Str""));
  assertFalse(cache.containsListRaw(BUCKET_A,PREFIX_AA));
}",0.971830985915493
79909,"/** 
 * Determines if the exception is an internal server error.
 */
public boolean isInternalServerError(Throwable throwable){
  if (throwable instanceof GoogleJsonResponseException) {
    return (getHttpStatusCode((GoogleJsonResponseException)throwable)) / 100 == 5;
  }
  return throwable.getCause() != null && isInternalServerError(throwable);
}","/** 
 * Determines if the exception is an internal server error.
 */
public boolean isInternalServerError(Throwable throwable){
  if (throwable instanceof GoogleJsonResponseException) {
    return (getHttpStatusCode((GoogleJsonResponseException)throwable)) / 100 == 5;
  }
  return throwable.getCause() != null && isInternalServerError(throwable.getCause());
}",0.9844851904090268
79910,"/** 
 * Determines if the exception is a client error.
 */
public boolean isClientError(Throwable throwable){
  if (throwable instanceof GoogleJsonResponseException) {
    return (getHttpStatusCode((GoogleJsonResponseException)throwable)) / 100 == 4;
  }
  return throwable.getCause() != null && isClientError(throwable);
}","/** 
 * Determines if the exception is a client error.
 */
public boolean isClientError(Throwable throwable){
  if (throwable instanceof GoogleJsonResponseException) {
    return (getHttpStatusCode((GoogleJsonResponseException)throwable)) / 100 == 4;
  }
  return throwable.getCause() != null && isClientError(throwable.getCause());
}",0.9832572298325722
79911,"/** 
 * Extracts the error message.
 */
public String getErrorMessage(IOException e){
  if (e instanceof GoogleJsonResponseException) {
    return ((GoogleJsonResponseException)e).getDetails().getMessage();
  }
  return e.getMessage();
}","/** 
 * Extracts the error message.
 */
public String getErrorMessage(IOException e){
  if (e instanceof GoogleJsonResponseException) {
    GoogleJsonResponseException gjre=((GoogleJsonResponseException)e);
    if (gjre.getDetails() != null) {
      return gjre.getDetails().getMessage();
    }
  }
  return e.getMessage();
}",0.708185053380783
79912,"private WritableByteChannel createByteChannel(Configuration configuration,Progressable progressable,Bigquery bigquery,Job outputJob,String projectId,int writeBufferSize) throws IOException {
  if (configuration.getBoolean(BigQueryConfiguration.ENABLE_ASYNC_WRITE,BigQueryConfiguration.ENABLE_ASYNC_WRITE_DEFAULT)) {
    log.debug(""String_Node_Str"");
    AsyncWriteChannelOptions options=AsyncWriteChannelOptions.newBuilder().setUploadBufferSize(writeBufferSize).build();
    BigQueryAsyncWriteChannel channel=new BigQueryAsyncWriteChannel(configuration,progressable,threadPool,bigquery,outputJob,projectId,options);
    channel.initialize();
    return channel;
  }
 else {
    log.debug(""String_Node_Str"");
    return new BigQueryBatchedWriteChannel(configuration,progressable,bigquery,writeBufferSize,outputJob,projectId);
  }
}","private BigQueryAsyncWriteChannel createByteChannel(Configuration configuration,Progressable progressable,Bigquery bigquery,Job outputJob,String projectId,int writeBufferSize) throws IOException {
  if (configuration.getBoolean(BigQueryConfiguration.ENABLE_ASYNC_WRITE,BigQueryConfiguration.ENABLE_ASYNC_WRITE_DEFAULT)) {
    log.debug(""String_Node_Str"");
  }
 else {
    log.warn(""String_Node_Str"",BigQueryConfiguration.ENABLE_ASYNC_WRITE);
  }
  AsyncWriteChannelOptions options=AsyncWriteChannelOptions.newBuilder().setUploadBufferSize(writeBufferSize).build();
  BigQueryAsyncWriteChannel channel=new BigQueryAsyncWriteChannel(configuration,progressable,threadPool,bigquery,outputJob,projectId,options);
  channel.setClientRequestHelper(clientRequestHelper);
  channel.initialize();
  return channel;
}",0.7885085574572127
79913,"/** 
 * Constructs an instance of BigQueryRecordWriter that writes to the table with ID tableId in the dataset denoted by datasetId under the project denoted by projectId. Records are formatted according to the schema described by fields. Writes are flushed to the given table in batches of size numRecordsInBatch.
 * @param configuration Configuration for the job / task
 * @param progressable Progressable to which we should report status
 * @param outputRecordSchema the schema describing the output records.
 * @param projectId the id of the project.
 * @param tableRef the fully qualified reference to the (temp) table to write to; its projectIdmust be specified, and may or may not match the projectId which owns the BigQuery job.
 * @param writeBufferSize The size of the upload buffer to use.
 * @throws IOException on IOError.
 */
public BigQueryRecordWriter(Configuration configuration,Progressable progressable,List<TableFieldSchema> outputRecordSchema,String projectId,TableReference tableRef,int writeBufferSize) throws IOException {
  this(new BigQueryFactory(),configuration,progressable,outputRecordSchema,projectId,tableRef,writeBufferSize);
}","/** 
 * Constructs an instance of BigQueryRecordWriter that writes to the table with ID tableId in the dataset denoted by datasetId under the project denoted by projectId. Records are formatted according to the schema described by fields. Writes are flushed to the given table in batches of size numRecordsInBatch.
 * @param configuration Configuration for the job / task
 * @param progressable Progressable to which we should report status
 * @param outputRecordSchema the schema describing the output records.
 * @param projectId the id of the project.
 * @param tableRef the fully qualified reference to the (temp) table to write to; its projectIdmust be specified, and may or may not match the projectId which owns the BigQuery job.
 * @param writeBufferSize The size of the upload buffer to use.
 * @throws IOException on IOError.
 */
public BigQueryRecordWriter(Configuration configuration,Progressable progressable,List<TableFieldSchema> outputRecordSchema,String projectId,TableReference tableRef,int writeBufferSize) throws IOException {
  this(new BigQueryFactory(),Executors.newCachedThreadPool(),new ClientRequestHelper<>(),configuration,progressable,outputRecordSchema,projectId,tableRef,writeBufferSize);
}",0.9747899159663864
79914,"/** 
 * Writes a key/value pair.
 * @param key the key to write.
 * @param value the value to write.
 * @throws IOException on IOError.
 */
@Override public void write(K key,V value) throws IOException {
  long startTime=System.nanoTime();
  String stringValue=gson.toJson(value) + ""String_Node_Str"";
  byteChannel.write(ByteBuffer.wrap(stringValue.getBytes(StandardCharsets.UTF_8)));
  long duration=System.nanoTime() - startTime;
  increment(Counter.WRITE_CALLS);
  increment(Counter.WRITE_TOTAL_TIME,duration);
}","/** 
 * Writes a key/value pair.
 * @param key the key to write.
 * @param value the value to write.
 * @throws IOException on IOError.
 */
@Override public void write(K key,V value) throws IOException {
  long startTime=System.nanoTime();
  String stringValue=gson.toJson(value) + ""String_Node_Str"";
  byte[] valueBytes=stringValue.getBytes(StandardCharsets.UTF_8);
  bytesWritten+=valueBytes.length;
  byteChannel.write(ByteBuffer.wrap(valueBytes));
  long duration=System.nanoTime() - startTime;
  increment(Counter.BYTES_WRITTEN,valueBytes.length);
  increment(Counter.WRITE_CALLS);
  increment(Counter.WRITE_TOTAL_TIME,duration);
}",0.8427454387489139
79915,"public void setParameters(){
  if (apu != null) {
    apu.setParameters();
  }
  if (ppu != null) {
    ppu.setParameters();
  }
  if (limiter != null && mapper != null) {
switch (mapper.getTVType()) {
case NTSC:
default :
      limiter.setInterval(16639267);
    break;
case PAL:
case DENDY:
  limiter.setInterval(19997200);
}
}
}","public synchronized void setParameters(){
  if (apu != null) {
    apu.setParameters();
  }
  if (ppu != null) {
    ppu.setParameters();
  }
  if (limiter != null && mapper != null) {
switch (mapper.getTVType()) {
case NTSC:
default :
      limiter.setInterval(16639267);
    break;
case PAL:
case DENDY:
  limiter.setInterval(19997200);
}
}
}",0.9807407407407408
79916,"private void axs(final int addr){
  X=(A & X) - ram.read(addr);
  setflags(X);
  carryFlag=(X >= 0);
}","private void axs(final int addr){
  X=((A & X) - ram.read(addr)) & 0xff;
  setflags(X);
  carryFlag=(X >= 0);
}",0.9577464788732394
79917,"public final synchronized void setParameters(){
switch (cpuram.mapper.getTVType()) {
case NTSC:
default :
    this.dmcperiods=new int[]{428,380,340,320,286,254,226,214,190,160,142,128,106,84,72,54};
  this.noiseperiod=new int[]{4,8,16,32,64,96,128,160,202,254,380,508,762,1016,2034,4068};
this.framectrreload=7456;
cyclespersample=1789773.0 / samplerate;
cyclesperframe=29781;
break;
case DENDY:
this.dmcperiods=new int[]{428,380,340,320,286,254,226,214,190,160,142,128,106,84,72,54};
this.noiseperiod=new int[]{4,8,16,32,64,96,128,160,202,254,380,508,762,1016,2034,4068};
this.framectrreload=7456;
cyclespersample=1773448.0 / samplerate;
cyclesperframe=35469;
break;
case PAL:
cyclespersample=1662607.0 / samplerate;
this.dmcperiods=new int[]{398,354,316,298,276,236,210,198,176,148,132,118,98,78,66,50};
this.noiseperiod=new int[]{4,8,14,30,60,88,118,148,188,236,354,472,708,944,1890,3778};
this.framectrreload=8312;
cyclesperframe=33252;
break;
}
soundFiltering=PrefsSingleton.get().getBoolean(""String_Node_Str"",true);
samplerate=PrefsSingleton.get().getInt(""String_Node_Str"",44100);
if (ai != null) {
ai.destroy();
}
ai=new SwingAudioImpl(nes,samplerate);
if (PrefsSingleton.get().getBoolean(""String_Node_Str"",false)) {
ai=new Oscilloscope(ai);
}
}","public final synchronized void setParameters(){
  soundFiltering=PrefsSingleton.get().getBoolean(""String_Node_Str"",true);
  samplerate=PrefsSingleton.get().getInt(""String_Node_Str"",44100);
  if (ai != null) {
    ai.destroy();
  }
  ai=new SwingAudioImpl(nes,samplerate);
  if (PrefsSingleton.get().getBoolean(""String_Node_Str"",false)) {
    ai=new Oscilloscope(ai);
  }
switch (cpuram.mapper.getTVType()) {
case NTSC:
default :
    this.dmcperiods=new int[]{428,380,340,320,286,254,226,214,190,160,142,128,106,84,72,54};
  this.noiseperiod=new int[]{4,8,16,32,64,96,128,160,202,254,380,508,762,1016,2034,4068};
this.framectrreload=7456;
cyclespersample=1789773.0 / samplerate;
cyclesperframe=29781;
break;
case DENDY:
this.dmcperiods=new int[]{428,380,340,320,286,254,226,214,190,160,142,128,106,84,72,54};
this.noiseperiod=new int[]{4,8,16,32,64,96,128,160,202,254,380,508,762,1016,2034,4068};
this.framectrreload=7456;
cyclespersample=1773448.0 / samplerate;
cyclesperframe=35469;
break;
case PAL:
cyclespersample=1662607.0 / samplerate;
this.dmcperiods=new int[]{398,354,316,298,276,236,210,198,176,148,132,118,98,78,66,50};
this.noiseperiod=new int[]{4,8,14,30,60,88,118,148,188,236,354,472,708,944,1890,3778};
this.framectrreload=8312;
cyclesperframe=33252;
break;
}
}",0.7529691211401425
79918,"public final int getval(){
  final int mixvol=384 * (((enable[0] ? volume[0] : 0) * timers[0].getval() + (enable[1] ? volume[1] : 0) * timers[1].getval()) + (enable[2] ? ((volume[2] & 0xff) >> 3) : 0));
  return mixvol;
}","public final int getval(){
  final int mixvol=320 * (((enable[0] ? volume[0] : 0) * timers[0].getval() + (enable[1] ? volume[1] : 0) * timers[1].getval()) + (enable[2] ? ((volume[2] & 0xff) >> 3) : 0));
  return mixvol;
}",0.990950226244344
79919,"private void runUnits(){
  if ((pitch + modout) > 0 && !haltWaveAndReset) {
    waveAccum+=(pitch + modout);
    if ((waveAccum & 0xffff) != waveAccum) {
      waveAccum&=0xffff;
      waveAddr=++waveAddr & 63;
    }
  }
  if (modFreq > 0 && !modDisable) {
    modAccum+=modFreq;
    if ((modAccum & 0xffff) != modAccum) {
      modAccum&=0xffff;
      modTableAddr=++modTableAddr & 63;
      CalculateModulator();
    }
  }
 else   if (modDisable) {
    modAccum=0;
    modout=0;
  }
  if (!haltWaveAndReset && !BothEnvDisable && (envClockMultiplier != 0)) {
    CalculateEnvelopes();
  }
  if (!waveWriteEnable) {
    waveOut=wavetable[waveAddr];
  }
  int tmp=(volGain > 32) ? 32 : volGain;
  int out=(waveOut * tmp);
switch (masterVol) {
case 0:
default :
    out*=8;
  break;
case 1:
out*=5;
break;
case 2:
out*=4;
break;
case 3:
out*=3;
break;
}
out+=lpaccum;
lpaccum-=out >> 6;
}","private void runUnits(){
  if ((pitch + modout) > 0 && !haltWaveAndReset) {
    waveAccum+=(pitch + modout);
    if ((waveAccum & 0xffff) != waveAccum) {
      waveAccum&=0xffff;
      waveAddr=++waveAddr & 63;
    }
  }
  if (modFreq > 0 && !modDisable) {
    modAccum+=modFreq;
    if ((modAccum & 0xffff) != modAccum) {
      modAccum&=0xffff;
      CalculateModulator();
    }
  }
 else   if (modDisable) {
    modAccum=0;
    modout=0;
  }
  if (!haltWaveAndReset && !BothEnvDisable && (envClockMultiplier != 0)) {
    CalculateEnvelopes();
  }
  if (!waveWriteEnable) {
    waveOut=wavetable[waveAddr];
  }
  int tmp=(volGain > 32) ? 32 : volGain;
  int out=(waveOut * tmp);
switch (masterVol) {
case 0:
default :
    out*=8;
  break;
case 1:
out*=5;
break;
case 2:
out*=4;
break;
case 3:
out*=3;
break;
}
out+=lpaccum;
lpaccum-=out >> 6;
}",0.976905311778291
79920,"private void CalculateModulator(){
switch (modTable[modTableAddr]) {
case 0:
default :
    modCtr+=0;
  break;
case 1:
modCtr+=1;
break;
case 2:
modCtr+=2;
break;
case 3:
modCtr+=4;
break;
case 4:
modCtr=0;
break;
case 5:
modCtr-=4;
break;
case 6:
modCtr-=2;
break;
case 7:
modCtr-=1;
break;
}
modCtr=(modCtr << 25) >> 25;
int temp=modCtr * modGain;
int remainder=temp & 0xF;
temp>>=4;
if ((remainder > 0) && ((temp & 0x80) == 0)) {
if (modCtr < 0) {
temp-=1;
}
 else {
temp+=2;
}
}
if (temp >= 192) {
temp-=256;
}
 else if (temp < -64) {
temp+=256;
}
temp=pitch * temp;
remainder=temp & 0x3F;
temp>>=6;
if (remainder >= 32) {
temp+=1;
}
modout=temp;
}","private void CalculateModulator(){
switch (modTable[modTableAddr]) {
case 0:
default :
    modCtr+=0;
  break;
case 1:
modCtr+=1;
break;
case 2:
modCtr+=2;
break;
case 3:
modCtr+=4;
break;
case 4:
modCtr=0;
break;
case 5:
modCtr-=4;
break;
case 6:
modCtr-=2;
break;
case 7:
modCtr-=1;
break;
}
modTableAddr=++modTableAddr & 63;
modCtr=(modCtr << 25) >> 25;
int temp=modCtr * modGain;
int remainder=temp & 0xF;
temp>>=4;
if ((remainder > 0) && ((temp & 0x80) == 0)) {
if (modCtr < 0) {
temp-=1;
}
 else {
temp+=2;
}
}
if (temp >= 192) {
temp-=256;
}
 else if (temp < -64) {
temp+=256;
}
temp=pitch * temp;
remainder=temp & 0x3F;
temp>>=6;
if (remainder >= 32) {
temp+=1;
}
modout=temp;
}",0.9745889387144993
79921,"@Override public void write(int register,int data){
  if (register == 0x4023) {
    regEnable=utils.getbit(data,0);
  }
  if (regEnable) {
    if (register >= 0x4040 && register <= 0x407f) {
      if (waveWriteEnable) {
        wavetable[(register - 0x4040) & 63]=(data & 63);
      }
    }
 else     if (register == 0x4080) {
      volEnvDisable=utils.getbit(data,7);
      volEnvDirection=utils.getbit(data,6);
      if (volEnvDisable) {
        volGain=(data & 63);
      }
      volEnvSpeed=(data & 63);
      volEnvAccum=0;
    }
 else     if (register == 0x4082) {
      pitch&=0xf00;
      pitch|=(data & 0xff);
    }
 else     if (register == 0x4083) {
      pitch&=0xff;
      pitch|=(data & 0xf) << 8;
      haltWaveAndReset=utils.getbit(data,7);
      if (haltWaveAndReset) {
        waveAccum=0;
        waveAddr=0;
      }
      BothEnvDisable=utils.getbit(data,6);
    }
 else     if (register == 0x4084) {
      modEnvDisable=utils.getbit(data,7);
      modEnvDirection=utils.getbit(data,6);
      if (modEnvDisable) {
        modGain=data & 0x3f;
      }
      modEnvSpeed=data & 0x3f;
      modEnvAccum=0;
    }
 else     if (register == 0x4085) {
      modCtr=((data & 0x7f) << 25) >> 25;
    }
 else     if (register == 0x4086) {
      modFreq&=0xf00;
      modFreq|=(data & 0xff);
    }
 else     if (register == 0x4087) {
      modFreq&=0xff;
      modFreq|=(data & 0xf) << 8;
      modDisable=utils.getbit(data,7);
    }
 else     if (register == 0x4088) {
      if (modDisable) {
        for (int i=0; i < 2; ++i) {
          modTable[modTableAddr]=data & 7;
          modTableAddr=(modTableAddr + 1) & 63;
        }
      }
      modAccum=0;
    }
 else     if (register == 0x4089) {
      masterVol=data & 3;
      waveWriteEnable=utils.getbit(data,7);
    }
 else     if (register == 0x408A) {
      envClockMultiplier=data;
    }
  }
}","@Override public void write(int register,int data){
  if (register == 0x4023) {
    regEnable=utils.getbit(data,0);
  }
  if (regEnable) {
    if (register >= 0x4040 && register <= 0x407f) {
      if (waveWriteEnable) {
        wavetable[(register - 0x4040) & 63]=(data & 63);
      }
    }
 else     if (register == 0x4080) {
      volEnvDisable=utils.getbit(data,7);
      volEnvDirection=utils.getbit(data,6);
      if (volEnvDisable) {
        volGain=(data & 63);
      }
      volEnvSpeed=(data & 63);
      volEnvAccum=0;
    }
 else     if (register == 0x4082) {
      pitch&=0xf00;
      pitch|=(data & 0xff);
    }
 else     if (register == 0x4083) {
      pitch&=0xff;
      pitch|=(data & 0xf) << 8;
      haltWaveAndReset=utils.getbit(data,7);
      if (haltWaveAndReset) {
        waveAccum=0;
        waveAddr=0;
      }
      BothEnvDisable=utils.getbit(data,6);
    }
 else     if (register == 0x4084) {
      modEnvDisable=utils.getbit(data,7);
      modEnvDirection=utils.getbit(data,6);
      if (modEnvDisable) {
        modGain=data & 0x3f;
      }
      modEnvSpeed=data & 0x3f;
      modAccum=0;
      modEnvAccum=0;
    }
 else     if (register == 0x4085) {
      modCtr=((data & 0x7f) << 25) >> 25;
    }
 else     if (register == 0x4086) {
      modFreq&=0xf00;
      modFreq|=(data & 0xff);
    }
 else     if (register == 0x4087) {
      modFreq&=0xff;
      modFreq|=(data & 0xf) << 8;
      modDisable=utils.getbit(data,7);
    }
 else     if (register == 0x4088) {
      if (modDisable) {
        for (int i=0; i < 2; ++i) {
          modTable[modTableAddr]=data & 7;
          modTableAddr=(modTableAddr + 1) & 63;
        }
      }
      modAccum=0;
    }
 else     if (register == 0x4089) {
      masterVol=data & 3;
      waveWriteEnable=utils.getbit(data,7);
    }
 else     if (register == 0x408A) {
      envClockMultiplier=data;
    }
  }
}",0.7103153393907001
79922,"@SuppressWarnings(""String_Node_Str"") public static void openCredits(Player p,final ItemStack guide){
  final ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.BLOCK_NOTE_HARP,0.7F,0.7F);
    }
  }
);
  for (int i=0; i < 9; i++) {
    if (i != 4) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
 else {
      menu.addItem(4,new CustomItem(new MaterialData(Material.EMERALD),""String_Node_Str""));
      menu.addMenuClickHandler(4,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          openSettings(p,guide);
          return false;
        }
      }
);
    }
  }
  int index=9;
  double total=0;
  for (  Contributor contributor : contributors) {
    total+=contributor.getCommits();
  }
  for (  final Contributor contributor : contributors) {
    ItemStack skull=new SkullItem(""String_Node_Str"" + contributor.getName(),contributor.getName());
    ItemMeta meta=skull.getItemMeta();
    if (contributor.getCommits() > 0) {
      double percentage=DoubleHandler.fixDouble((contributor.getCommits() * 100.0) / total,2);
      meta.setLore(Arrays.asList(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getJob()),ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getCommits() + ""String_Node_Str""+ percentage+ ""String_Node_Str""),""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',""String_Node_Str"")));
    }
 else {
      meta.setLore(Arrays.asList(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getJob())));
    }
    skull.setItemMeta(meta);
    menu.addItem(index,skull);
    menu.addMenuClickHandler(index,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int arg1,      ItemStack arg2,      ClickAction arg3){
        if (contributor.getCommits() > 0) {
          p.closeInventory();
          p.sendMessage(""String_Node_Str"");
          p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getProfile()));
          p.sendMessage(""String_Node_Str"");
        }
        return false;
      }
    }
);
    index++;
  }
  for (int i=0; i < 9; i++) {
    menu.addItem(36 + i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
    menu.addMenuClickHandler(36 + i,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        return false;
      }
    }
);
  }
  menu.open(p);
}","@SuppressWarnings(""String_Node_Str"") public static void openCredits(Player p,final ItemStack guide){
  final ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.setEmptySlotsClickable(false);
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.BLOCK_NOTE_HARP,0.7F,0.7F);
    }
  }
);
  for (int i=0; i < 9; i++) {
    if (i != 4) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
 else {
      menu.addItem(4,new CustomItem(new MaterialData(Material.EMERALD),""String_Node_Str""));
      menu.addMenuClickHandler(4,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          openSettings(p,guide);
          return false;
        }
      }
);
    }
  }
  int index=9;
  double total=0;
  for (  Contributor contributor : contributors) {
    total+=contributor.getCommits();
  }
  for (  final Contributor contributor : contributors) {
    ItemStack skull=new SkullItem(""String_Node_Str"" + contributor.getName(),contributor.getName());
    ItemMeta meta=skull.getItemMeta();
    if (contributor.getCommits() > 0) {
      double percentage=DoubleHandler.fixDouble((contributor.getCommits() * 100.0) / total,2);
      meta.setLore(Arrays.asList(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getJob()),ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getCommits() + ""String_Node_Str""+ percentage+ ""String_Node_Str""),""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',""String_Node_Str"")));
    }
 else {
      meta.setLore(Arrays.asList(""String_Node_Str"",ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getJob())));
    }
    skull.setItemMeta(meta);
    menu.addItem(index,skull);
    menu.addMenuClickHandler(index,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int arg1,      ItemStack arg2,      ClickAction arg3){
        if (contributor.getCommits() > 0) {
          p.closeInventory();
          p.sendMessage(""String_Node_Str"");
          p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + contributor.getProfile()));
          p.sendMessage(""String_Node_Str"");
        }
        return false;
      }
    }
);
    index++;
  }
  for (int i=0; i < 9; i++) {
    menu.addItem(36 + i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
    menu.addMenuClickHandler(36 + i,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        return false;
      }
    }
);
  }
  menu.open(p);
}",0.9937888198757764
79923,"@SuppressWarnings(""String_Node_Str"") public static void openMainMenu(final Player p,final boolean survival,final boolean book,final int selected_page){
  clearHistory(p.getUniqueId());
  if (book) {
    List<TellRawMessage> pages=new ArrayList<TellRawMessage>();
    List<String> texts=new ArrayList<String>();
    List<String> tooltips=new ArrayList<String>();
    List<PlayerRunnable> actions=new ArrayList<PlayerRunnable>();
    int tier=0;
    for (    final Category category : Category.list()) {
      boolean locked=true;
      for (      SlimefunItem item : category.getItems()) {
        if (Slimefun.isEnabled(p,item,false)) {
          locked=false;
          break;
        }
      }
      if (locked) {
      }
 else {
        if (tier < category.getTier()) {
          if (survival) {
            for (            final GuideHandler handler : Slimefun.getGuideHandlers(tier)) {
              handler.addEntry(texts,tooltips);
              actions.add(new PlayerRunnable(2){
                @Override public void run(                Player p){
                  handler.run(p,survival,book);
                }
              }
);
            }
          }
          tier=category.getTier();
          if (tier > 1) {
            for (int i=0; i < 10; i++) {
              if (texts.size() % 10 == 0)               break;
              texts.add(""String_Node_Str"");
              tooltips.add(null);
              actions.add(null);
            }
          }
          texts.add(""String_Node_Str"" + tier);
          tooltips.add(null);
          actions.add(null);
        }
        if (category instanceof LockedCategory && !((LockedCategory)category).hasUnlocked(p)) {
          StringBuilder parents=new StringBuilder(""String_Node_Str"");
          for (          Category parent : ((LockedCategory)category).getParents()) {
            parents.append(""String_Node_Str"" + StringUtils.formatItemName(parent.getItem(),false));
          }
          texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(category.getItem(),false)));
          tooltips.add(parents.toString());
          actions.add(null);
        }
 else         if (category instanceof SeasonCategory) {
          if (((SeasonCategory)category).isUnlocked()) {
            texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(category.getItem(),false)));
            tooltips.add(""String_Node_Str"" + StringUtils.formatItemName(category.getItem(),false));
            actions.add(new PlayerRunnable(1){
              @Override public void run(              final Player p){
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                  @Override public void run(){
                    openCategory(p,category,survival,1,book);
                  }
                }
,1L);
              }
            }
);
          }
        }
 else {
          texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(category.getItem(),false)));
          tooltips.add(""String_Node_Str"" + StringUtils.formatItemName(category.getItem(),false));
          actions.add(new PlayerRunnable(1){
            @Override public void run(            final Player p){
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                @Override public void run(){
                  openCategory(p,category,survival,1,book);
                }
              }
,1L);
            }
          }
);
        }
      }
    }
    if (survival) {
      for (      final GuideHandler handler : Slimefun.getGuideHandlers(tier)) {
        handler.addEntry(texts,tooltips);
        actions.add(new PlayerRunnable(2){
          @Override public void run(          Player p){
            handler.run(p,survival,book);
          }
        }
);
      }
    }
    for (int i=0; i < texts.size(); i=i + 10) {
      TellRawMessage page=new TellRawMessage();
      page.addText(""String_Node_Str"");
      for (int j=i; j < texts.size() && j < i + 10; j++) {
        page.addText(texts.get(j) + ""String_Node_Str"");
        if (tooltips.get(j) != null)         page.addHoverEvent(HoverAction.SHOW_TEXT,tooltips.get(j));
        if (actions.get(j) != null)         page.addClickEvent(actions.get(j));
      }
      pages.add(page);
    }
    new CustomBookOverlay(""String_Node_Str"",""String_Node_Str"",pages.toArray(new TellRawMessage[pages.size()])).open(p);
  }
 else {
    final ChestMenu menu=new ChestMenu(""String_Node_Str"");
    menu.addMenuOpeningHandler(new MenuOpeningHandler(){
      @Override public void onOpen(      Player p){
        p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
      }
    }
);
    List<Category> categories=Slimefun.current_categories;
    List<GuideHandler> handlers=Slimefun.guide_handlers2;
    int index=9;
    int pages=1;
    for (int i=0; i < 9; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    for (int i=45; i < 54; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    int target=(category_size * (selected_page - 1)) - 1;
    while (target < (categories.size() + handlers.size() - 1)) {
      if (index >= category_size + 9) {
        pages++;
        break;
      }
      target++;
      if (target >= categories.size()) {
        if (!survival)         break;
        index=handlers.get(target - categories.size()).next(p,index,menu);
      }
 else {
        final Category category=categories.get(target);
        boolean locked=true;
        for (        SlimefunItem item : category.getItems()) {
          if (Slimefun.isEnabled(p,item,false)) {
            locked=false;
            break;
          }
        }
        if (locked) {
        }
 else         if (!(category instanceof LockedCategory)) {
          if (!(category instanceof SeasonCategory)) {
            menu.addItem(index,category.getItem());
            menu.addMenuClickHandler(index,new MenuClickHandler(){
              @Override public boolean onClick(              Player p,              int slot,              ItemStack item,              ClickAction action){
                openCategory(p,category,survival,1,book);
                return false;
              }
            }
);
            index++;
          }
 else {
            if (((SeasonCategory)category).isUnlocked()) {
              menu.addItem(index,category.getItem());
              menu.addMenuClickHandler(index,new MenuClickHandler(){
                @Override public boolean onClick(                Player p,                int slot,                ItemStack item,                ClickAction action){
                  openCategory(p,category,survival,1,book);
                  return false;
                }
              }
);
              index++;
            }
          }
        }
 else         if (((LockedCategory)category).hasUnlocked(p)) {
          menu.addItem(index,category.getItem());
          menu.addMenuClickHandler(index,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int slot,            ItemStack item,            ClickAction action){
              openCategory(p,category,survival,1,book);
              return false;
            }
          }
);
          index++;
        }
 else {
          List<String> parents=new ArrayList<String>();
          parents.add(""String_Node_Str"");
          parents.add(""String_Node_Str"");
          parents.add(""String_Node_Str"");
          parents.add(""String_Node_Str"");
          for (          Category parent : ((LockedCategory)category).getParents()) {
            parents.add(parent.getItem().getItemMeta().getDisplayName());
          }
          menu.addItem(index,new CustomItem(Material.BARRIER,""String_Node_Str"" + category.getItem().getItemMeta().getDisplayName(),0,parents.toArray(new String[parents.size()])));
          menu.addMenuClickHandler(index,new MenuClickHandler(){
            @Override public boolean onClick(            Player arg0,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
          index++;
        }
      }
    }
    final int finalPages=pages;
    menu.addItem(46,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(46,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page - 1;
        if (next < 1)         next=finalPages;
        if (next != selected_page)         openMainMenu(p,survival,book,next);
        return false;
      }
    }
);
    menu.addItem(52,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(52,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page + 1;
        if (next > finalPages)         next=1;
        if (next != selected_page)         openMainMenu(p,survival,book,next);
        return false;
      }
    }
);
    menu.open(p);
  }
}","@SuppressWarnings(""String_Node_Str"") public static void openMainMenu(final Player p,final boolean survival,final boolean book,final int selected_page){
  clearHistory(p.getUniqueId());
  if (book) {
    List<TellRawMessage> pages=new ArrayList<TellRawMessage>();
    List<String> texts=new ArrayList<String>();
    List<String> tooltips=new ArrayList<String>();
    List<PlayerRunnable> actions=new ArrayList<PlayerRunnable>();
    int tier=0;
    for (    final Category category : Category.list()) {
      boolean locked=true;
      for (      SlimefunItem item : category.getItems()) {
        if (Slimefun.isEnabled(p,item,false)) {
          locked=false;
          break;
        }
      }
      if (locked) {
      }
 else {
        if (tier < category.getTier()) {
          if (survival) {
            for (            final GuideHandler handler : Slimefun.getGuideHandlers(tier)) {
              handler.addEntry(texts,tooltips);
              actions.add(new PlayerRunnable(2){
                @Override public void run(                Player p){
                  handler.run(p,survival,book);
                }
              }
);
            }
          }
          tier=category.getTier();
          if (tier > 1) {
            for (int i=0; i < 10; i++) {
              if (texts.size() % 10 == 0)               break;
              texts.add(""String_Node_Str"");
              tooltips.add(null);
              actions.add(null);
            }
          }
          texts.add(""String_Node_Str"" + tier);
          tooltips.add(null);
          actions.add(null);
        }
        if (category instanceof LockedCategory && !((LockedCategory)category).hasUnlocked(p)) {
          StringBuilder parents=new StringBuilder(""String_Node_Str"");
          for (          Category parent : ((LockedCategory)category).getParents()) {
            parents.append(""String_Node_Str"" + StringUtils.formatItemName(parent.getItem(),false));
          }
          texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(category.getItem(),false)));
          tooltips.add(parents.toString());
          actions.add(null);
        }
 else         if (category instanceof SeasonCategory) {
          if (((SeasonCategory)category).isUnlocked()) {
            texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(category.getItem(),false)));
            tooltips.add(""String_Node_Str"" + StringUtils.formatItemName(category.getItem(),false));
            actions.add(new PlayerRunnable(1){
              @Override public void run(              final Player p){
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                  @Override public void run(){
                    openCategory(p,category,survival,1,book);
                  }
                }
,1L);
              }
            }
);
          }
        }
 else {
          texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(category.getItem(),false)));
          tooltips.add(""String_Node_Str"" + StringUtils.formatItemName(category.getItem(),false));
          actions.add(new PlayerRunnable(1){
            @Override public void run(            final Player p){
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                @Override public void run(){
                  openCategory(p,category,survival,1,book);
                }
              }
,1L);
            }
          }
);
        }
      }
    }
    if (survival) {
      for (      final GuideHandler handler : Slimefun.getGuideHandlers(tier)) {
        handler.addEntry(texts,tooltips);
        actions.add(new PlayerRunnable(2){
          @Override public void run(          Player p){
            handler.run(p,survival,book);
          }
        }
);
      }
    }
    for (int i=0; i < texts.size(); i=i + 10) {
      TellRawMessage page=new TellRawMessage();
      page.addText(""String_Node_Str"");
      for (int j=i; j < texts.size() && j < i + 10; j++) {
        page.addText(texts.get(j) + ""String_Node_Str"");
        if (tooltips.get(j) != null)         page.addHoverEvent(HoverAction.SHOW_TEXT,tooltips.get(j));
        if (actions.get(j) != null)         page.addClickEvent(actions.get(j));
      }
      pages.add(page);
    }
    new CustomBookOverlay(""String_Node_Str"",""String_Node_Str"",pages.toArray(new TellRawMessage[pages.size()])).open(p);
  }
 else {
    final ChestMenu menu=new ChestMenu(""String_Node_Str"");
    menu.setEmptySlotsClickable(false);
    menu.addMenuOpeningHandler(new MenuOpeningHandler(){
      @Override public void onOpen(      Player p){
        p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
      }
    }
);
    List<Category> categories=Slimefun.current_categories;
    List<GuideHandler> handlers=Slimefun.guide_handlers2;
    int index=9;
    int pages=1;
    for (int i=0; i < 9; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    for (int i=45; i < 54; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    int target=(category_size * (selected_page - 1)) - 1;
    while (target < (categories.size() + handlers.size() - 1)) {
      if (index >= category_size + 9) {
        pages++;
        break;
      }
      target++;
      if (target >= categories.size()) {
        if (!survival)         break;
        index=handlers.get(target - categories.size()).next(p,index,menu);
      }
 else {
        final Category category=categories.get(target);
        boolean locked=true;
        for (        SlimefunItem item : category.getItems()) {
          if (Slimefun.isEnabled(p,item,false)) {
            locked=false;
            break;
          }
        }
        if (locked) {
        }
 else         if (!(category instanceof LockedCategory)) {
          if (!(category instanceof SeasonCategory)) {
            menu.addItem(index,category.getItem());
            menu.addMenuClickHandler(index,new MenuClickHandler(){
              @Override public boolean onClick(              Player p,              int slot,              ItemStack item,              ClickAction action){
                openCategory(p,category,survival,1,book);
                return false;
              }
            }
);
            index++;
          }
 else {
            if (((SeasonCategory)category).isUnlocked()) {
              menu.addItem(index,category.getItem());
              menu.addMenuClickHandler(index,new MenuClickHandler(){
                @Override public boolean onClick(                Player p,                int slot,                ItemStack item,                ClickAction action){
                  openCategory(p,category,survival,1,book);
                  return false;
                }
              }
);
              index++;
            }
          }
        }
 else         if (((LockedCategory)category).hasUnlocked(p)) {
          menu.addItem(index,category.getItem());
          menu.addMenuClickHandler(index,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int slot,            ItemStack item,            ClickAction action){
              openCategory(p,category,survival,1,book);
              return false;
            }
          }
);
          index++;
        }
 else {
          List<String> parents=new ArrayList<String>();
          parents.add(""String_Node_Str"");
          parents.add(""String_Node_Str"");
          parents.add(""String_Node_Str"");
          parents.add(""String_Node_Str"");
          for (          Category parent : ((LockedCategory)category).getParents()) {
            parents.add(parent.getItem().getItemMeta().getDisplayName());
          }
          menu.addItem(index,new CustomItem(Material.BARRIER,""String_Node_Str"" + category.getItem().getItemMeta().getDisplayName(),0,parents.toArray(new String[parents.size()])));
          menu.addMenuClickHandler(index,new MenuClickHandler(){
            @Override public boolean onClick(            Player arg0,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
          index++;
        }
      }
    }
    final int finalPages=pages;
    menu.addItem(46,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(46,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page - 1;
        if (next < 1)         next=finalPages;
        if (next != selected_page)         openMainMenu(p,survival,book,next);
        return false;
      }
    }
);
    menu.addItem(52,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(52,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page + 1;
        if (next > finalPages)         next=1;
        if (next != selected_page)         openMainMenu(p,survival,book,next);
        return false;
      }
    }
);
    menu.open(p);
  }
}",0.997995590298657
79924,"@SuppressWarnings(""String_Node_Str"") public static void openCategory(final Player p,final Category category,final boolean survival,final int selected_page,final boolean book){
  if (category == null)   return;
  if (book && category.getItems().size() < 250) {
    List<TellRawMessage> pages=new ArrayList<TellRawMessage>();
    List<String> texts=new ArrayList<String>();
    List<String> tooltips=new ArrayList<String>();
    List<PlayerRunnable> actions=new ArrayList<PlayerRunnable>();
    for (    final SlimefunItem item : category.getItems()) {
      if (Slimefun.hasPermission(p,item,false)) {
        if (Slimefun.isEnabled(p,item,false)) {
          if (survival && !Slimefun.hasUnlocked(p,item,false) && item.getResearch() != null) {
            final Research research=item.getResearch();
            texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(item.getItem(),false)));
            tooltips.add(StringUtils.formatItemName(item.getItem(),false) + ""String_Node_Str"" + (p.getLevel() >= research.getCost() ? ""String_Node_Str"" : ""String_Node_Str"")+ research.getCost()+ ""String_Node_Str"");
            actions.add(new PlayerRunnable(2){
              @Override public void run(              final Player p){
                if (!Research.isResearching(p)) {
                  if (research.canUnlock(p)) {
                    if (research.hasUnlocked(p))                     openCategory(p,category,true,selected_page,book);
 else {
                      if (!(p.getGameMode() == GameMode.CREATIVE && Research.creative_research)) {
                        p.setLevel(p.getLevel() - research.getCost());
                      }
                      if (p.getGameMode() == GameMode.CREATIVE) {
                        research.unlock(p,true);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                          @Override public void run(){
                            openCategory(p,category,survival,selected_page,book);
                          }
                        }
,1L);
                      }
 else {
                        research.unlock(p,false);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                          @Override public void run(){
                            openCategory(p,category,survival,selected_page,book);
                          }
                        }
,103L);
                      }
                    }
                  }
 else                   Messages.local.sendTranslation(p,""String_Node_Str"",true);
                }
              }
            }
);
          }
 else {
            texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(item.getItem(),false)));
            StringBuilder tooltip=new StringBuilder();
            tooltip.append(StringUtils.formatItemName(item.getItem(),false));
            if (item.getItem().hasItemMeta() && item.getItem().getItemMeta().hasLore()) {
              for (              String line : item.getItem().getItemMeta().getLore()) {
                tooltip.append(""String_Node_Str"" + line);
              }
            }
            tooltip.append(""String_Node_Str"");
            tooltips.add(tooltip.toString());
            actions.add(new PlayerRunnable(2){
              @Override public void run(              Player p){
                displayItem(p,item.getItem(),true,book,0);
              }
            }
);
          }
        }
      }
 else {
        texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(item.getItem(),false)));
        tooltips.add(""String_Node_Str"");
        actions.add(null);
      }
    }
    for (int i=0; i < texts.size(); i=i + 10) {
      TellRawMessage page=new TellRawMessage();
      page.addText(""String_Node_Str"");
      for (int j=i; j < texts.size() && j < i + 10; j++) {
        page.addText(texts.get(j) + ""String_Node_Str"");
        if (tooltips.get(j) != null)         page.addHoverEvent(HoverAction.SHOW_TEXT,tooltips.get(j));
        if (actions.get(j) != null)         page.addClickEvent(actions.get(j));
      }
      page.addText(""String_Node_Str"");
      page.addText(""String_Node_Str"");
      page.addHoverEvent(HoverAction.SHOW_TEXT,""String_Node_Str"");
      page.addClickEvent(new PlayerRunnable(2){
        @Override public void run(        final Player p){
          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
            @Override public void run(){
              openMainMenu(p,survival,true,1);
            }
          }
,1L);
        }
      }
);
      pages.add(page);
    }
    new CustomBookOverlay(""String_Node_Str"",""String_Node_Str"",pages.toArray(new TellRawMessage[pages.size()])).open(p);
  }
 else {
    final ChestMenu menu=new ChestMenu(""String_Node_Str"");
    menu.addMenuOpeningHandler(new MenuOpeningHandler(){
      @Override public void onOpen(      Player p){
        p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
      }
    }
);
    int index=9;
    final int pages=category.getItems().size() / category_size + 1;
    for (int i=0; i < 4; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    menu.addItem(4,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str""));
    menu.addMenuClickHandler(4,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        openMainMenu(p,survival,book,1);
        return false;
      }
    }
);
    for (int i=5; i < 9; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    for (int i=45; i < 54; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    menu.addItem(46,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(46,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page - 1;
        if (next < 1)         next=pages;
        if (next != selected_page)         openCategory(p,category,survival,next,book);
        return false;
      }
    }
);
    menu.addItem(52,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(52,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page + 1;
        if (next > pages)         next=1;
        if (next != selected_page)         openCategory(p,category,survival,next,book);
        return false;
      }
    }
);
    int category_index=category_size * (selected_page - 1);
    for (int i=0; i < category_size; i++) {
      int target=category_index + i;
      if (target >= category.getItems().size())       break;
      final SlimefunItem sfitem=category.getItems().get(target);
      if (Slimefun.isEnabled(p,sfitem,false)) {
        if (survival && !Slimefun.hasUnlocked(p,sfitem.getItem(),false) && sfitem.getResearch() != null) {
          if (Slimefun.hasPermission(p,sfitem,false)) {
            final Research research=sfitem.getResearch();
            menu.addItem(index,new CustomItem(Material.BARRIER,""String_Node_Str"" + StringUtils.formatItemName(sfitem.getItem(),false),0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + research.getCost() + ""String_Node_Str""}));
            menu.addMenuClickHandler(index,new MenuClickHandler(){
              @Override public boolean onClick(              final Player p,              int slot,              ItemStack item,              ClickAction action){
                if (!Research.isResearching(p)) {
                  if (research.canUnlock(p)) {
                    if (research.hasUnlocked(p))                     openCategory(p,category,true,selected_page,book);
 else {
                      if (!(p.getGameMode() == GameMode.CREATIVE && Research.creative_research)) {
                        p.setLevel(p.getLevel() - research.getCost());
                      }
                      if (p.getGameMode() == GameMode.CREATIVE) {
                        research.unlock(p,Research.creative_research);
                        openCategory(p,category,survival,selected_page,book);
                      }
 else {
                        research.unlock(p,false);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                          @Override public void run(){
                            openCategory(p,category,survival,selected_page,book);
                          }
                        }
,103L);
                      }
                    }
                  }
 else                   Messages.local.sendTranslation(p,""String_Node_Str"",true);
                }
                return false;
              }
            }
);
            index++;
          }
 else {
            menu.addItem(index,new CustomItem(Material.BARRIER,StringUtils.formatItemName(sfitem.getItem(),false),0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
            menu.addMenuClickHandler(index,new MenuClickHandler(){
              @Override public boolean onClick(              Player arg0,              int arg1,              ItemStack arg2,              ClickAction arg3){
                return false;
              }
            }
);
            index++;
          }
        }
 else {
          menu.addItem(index,sfitem.getItem());
          menu.addMenuClickHandler(index,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int slot,            ItemStack item,            ClickAction action){
              if (survival)               displayItem(p,item,true,book,0);
 else               p.getInventory().addItem(item);
              return false;
            }
          }
);
          index++;
        }
      }
    }
    menu.open(p);
  }
  if (survival) {
    addToHistory(p,category.getURID());
  }
}","@SuppressWarnings(""String_Node_Str"") public static void openCategory(final Player p,final Category category,final boolean survival,final int selected_page,final boolean book){
  if (category == null)   return;
  if (book && category.getItems().size() < 250) {
    List<TellRawMessage> pages=new ArrayList<TellRawMessage>();
    List<String> texts=new ArrayList<String>();
    List<String> tooltips=new ArrayList<String>();
    List<PlayerRunnable> actions=new ArrayList<PlayerRunnable>();
    for (    final SlimefunItem item : category.getItems()) {
      if (Slimefun.hasPermission(p,item,false)) {
        if (Slimefun.isEnabled(p,item,false)) {
          if (survival && !Slimefun.hasUnlocked(p,item,false) && item.getResearch() != null) {
            final Research research=item.getResearch();
            texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(item.getItem(),false)));
            tooltips.add(StringUtils.formatItemName(item.getItem(),false) + ""String_Node_Str"" + (p.getLevel() >= research.getCost() ? ""String_Node_Str"" : ""String_Node_Str"")+ research.getCost()+ ""String_Node_Str"");
            actions.add(new PlayerRunnable(2){
              @Override public void run(              final Player p){
                if (!Research.isResearching(p)) {
                  if (research.canUnlock(p)) {
                    if (research.hasUnlocked(p))                     openCategory(p,category,true,selected_page,book);
 else {
                      if (!(p.getGameMode() == GameMode.CREATIVE && Research.creative_research)) {
                        p.setLevel(p.getLevel() - research.getCost());
                      }
                      if (p.getGameMode() == GameMode.CREATIVE) {
                        research.unlock(p,true);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                          @Override public void run(){
                            openCategory(p,category,survival,selected_page,book);
                          }
                        }
,1L);
                      }
 else {
                        research.unlock(p,false);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                          @Override public void run(){
                            openCategory(p,category,survival,selected_page,book);
                          }
                        }
,103L);
                      }
                    }
                  }
 else                   Messages.local.sendTranslation(p,""String_Node_Str"",true);
                }
              }
            }
);
          }
 else {
            texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(item.getItem(),false)));
            StringBuilder tooltip=new StringBuilder();
            tooltip.append(StringUtils.formatItemName(item.getItem(),false));
            if (item.getItem().hasItemMeta() && item.getItem().getItemMeta().hasLore()) {
              for (              String line : item.getItem().getItemMeta().getLore()) {
                tooltip.append(""String_Node_Str"" + line);
              }
            }
            tooltip.append(""String_Node_Str"");
            tooltips.add(tooltip.toString());
            actions.add(new PlayerRunnable(2){
              @Override public void run(              Player p){
                displayItem(p,item.getItem(),true,book,0);
              }
            }
);
          }
        }
      }
 else {
        texts.add(shorten(""String_Node_Str"",StringUtils.formatItemName(item.getItem(),false)));
        tooltips.add(""String_Node_Str"");
        actions.add(null);
      }
    }
    for (int i=0; i < texts.size(); i=i + 10) {
      TellRawMessage page=new TellRawMessage();
      page.addText(""String_Node_Str"");
      for (int j=i; j < texts.size() && j < i + 10; j++) {
        page.addText(texts.get(j) + ""String_Node_Str"");
        if (tooltips.get(j) != null)         page.addHoverEvent(HoverAction.SHOW_TEXT,tooltips.get(j));
        if (actions.get(j) != null)         page.addClickEvent(actions.get(j));
      }
      page.addText(""String_Node_Str"");
      page.addText(""String_Node_Str"");
      page.addHoverEvent(HoverAction.SHOW_TEXT,""String_Node_Str"");
      page.addClickEvent(new PlayerRunnable(2){
        @Override public void run(        final Player p){
          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
            @Override public void run(){
              openMainMenu(p,survival,true,1);
            }
          }
,1L);
        }
      }
);
      pages.add(page);
    }
    new CustomBookOverlay(""String_Node_Str"",""String_Node_Str"",pages.toArray(new TellRawMessage[pages.size()])).open(p);
  }
 else {
    final ChestMenu menu=new ChestMenu(""String_Node_Str"");
    menu.setEmptySlotsClickable(false);
    menu.addMenuOpeningHandler(new MenuOpeningHandler(){
      @Override public void onOpen(      Player p){
        p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
      }
    }
);
    int index=9;
    final int pages=category.getItems().size() / category_size + 1;
    for (int i=0; i < 4; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    menu.addItem(4,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str""));
    menu.addMenuClickHandler(4,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        openMainMenu(p,survival,book,1);
        return false;
      }
    }
);
    for (int i=5; i < 9; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    for (int i=45; i < 54; i++) {
      menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
      menu.addMenuClickHandler(i,new MenuClickHandler(){
        @Override public boolean onClick(        Player arg0,        int arg1,        ItemStack arg2,        ClickAction arg3){
          return false;
        }
      }
);
    }
    menu.addItem(46,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(46,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page - 1;
        if (next < 1)         next=pages;
        if (next != selected_page)         openCategory(p,category,survival,next,book);
        return false;
      }
    }
);
    menu.addItem(52,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + selected_page + ""String_Node_Str""+ pages+ ""String_Node_Str""));
    menu.addMenuClickHandler(52,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        int next=selected_page + 1;
        if (next > pages)         next=1;
        if (next != selected_page)         openCategory(p,category,survival,next,book);
        return false;
      }
    }
);
    int category_index=category_size * (selected_page - 1);
    for (int i=0; i < category_size; i++) {
      int target=category_index + i;
      if (target >= category.getItems().size())       break;
      final SlimefunItem sfitem=category.getItems().get(target);
      if (Slimefun.isEnabled(p,sfitem,false)) {
        if (survival && !Slimefun.hasUnlocked(p,sfitem.getItem(),false) && sfitem.getResearch() != null) {
          if (Slimefun.hasPermission(p,sfitem,false)) {
            final Research research=sfitem.getResearch();
            menu.addItem(index,new CustomItem(Material.BARRIER,""String_Node_Str"" + StringUtils.formatItemName(sfitem.getItem(),false),0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + research.getCost() + ""String_Node_Str""}));
            menu.addMenuClickHandler(index,new MenuClickHandler(){
              @Override public boolean onClick(              final Player p,              int slot,              ItemStack item,              ClickAction action){
                if (!Research.isResearching(p)) {
                  if (research.canUnlock(p)) {
                    if (research.hasUnlocked(p))                     openCategory(p,category,true,selected_page,book);
 else {
                      if (!(p.getGameMode() == GameMode.CREATIVE && Research.creative_research)) {
                        p.setLevel(p.getLevel() - research.getCost());
                      }
                      if (p.getGameMode() == GameMode.CREATIVE) {
                        research.unlock(p,Research.creative_research);
                        openCategory(p,category,survival,selected_page,book);
                      }
 else {
                        research.unlock(p,false);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
                          @Override public void run(){
                            openCategory(p,category,survival,selected_page,book);
                          }
                        }
,103L);
                      }
                    }
                  }
 else                   Messages.local.sendTranslation(p,""String_Node_Str"",true);
                }
                return false;
              }
            }
);
            index++;
          }
 else {
            menu.addItem(index,new CustomItem(Material.BARRIER,StringUtils.formatItemName(sfitem.getItem(),false),0,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
            menu.addMenuClickHandler(index,new MenuClickHandler(){
              @Override public boolean onClick(              Player arg0,              int arg1,              ItemStack arg2,              ClickAction arg3){
                return false;
              }
            }
);
            index++;
          }
        }
 else {
          menu.addItem(index,sfitem.getItem());
          menu.addMenuClickHandler(index,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int slot,            ItemStack item,            ClickAction action){
              if (survival)               displayItem(p,item,true,book,0);
 else               p.getInventory().addItem(item);
              return false;
            }
          }
);
          index++;
        }
      }
    }
    menu.open(p);
  }
  if (survival) {
    addToHistory(p,category.getURID());
  }
}",0.9982236433075762
79925,"@SuppressWarnings(""String_Node_Str"") public static void displayItem(Player p,final ItemStack item,boolean addToHistory,final boolean book,final int page){
  if (item == null || item.getType() == Material.AIR)   return;
  final SlimefunItem sfItem=SlimefunItem.getByItem(item);
  if (sfItem == null) {
    if (!all_recipes)     return;
  }
  ItemStack[] recipe=new ItemStack[9];
  ItemStack recipeType=null;
  ItemStack recipeOutput=item;
  ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
    }
  }
);
  if (sfItem != null) {
    recipe=sfItem.getRecipe();
    recipeType=sfItem.getRecipeType().toItem();
    recipeOutput=sfItem.getCustomOutput() != null ? sfItem.getCustomOutput() : sfItem.getItem();
  }
 else {
    List<Recipe> recipes=new ArrayList<Recipe>();
    Iterator<Recipe> iterator=Bukkit.recipeIterator();
    while (iterator.hasNext()) {
      Recipe r=iterator.next();
      if (SlimefunManager.isItemSimiliar(new CustomItem(r.getResult(),1),item,true) && r.getResult().getData().getData() == item.getData().getData())       recipes.add(r);
    }
    if (recipes.isEmpty())     return;
    Recipe r=recipes.get(page);
    if (recipes.size() > page + 1) {
      menu.addItem(1,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(1,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int slot,        ItemStack stack,        ClickAction action){
          displayItem(p,item,false,book,page + 1);
          return false;
        }
      }
);
    }
    if (r instanceof ShapedRecipe) {
      String[] shape=((ShapedRecipe)r).getShape();
      for (int i=0; i < shape.length; i++) {
        for (int j=0; j < shape[i].length(); j++) {
          ItemStack ingredient=((ShapedRecipe)r).getIngredientMap().get(shape[i].charAt(j));
          if (ingredient != null) {
            MaterialData data=ingredient.getData();
            if (ingredient.getData().getData() < 0)             data.setData((byte)0);
            ingredient=data.toItemStack(ingredient.getAmount());
          }
          recipe[i * 3 + j]=ingredient;
        }
      }
      recipeType=RecipeType.SHAPED_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof ShapelessRecipe) {
      List<ItemStack> ingredients=((ShapelessRecipe)r).getIngredientList();
      for (int i=0; i < ingredients.size(); i++) {
        ItemStack ingredient=ingredients.get(i);
        if (ingredient != null) {
          MaterialData data=ingredient.getData();
          if (ingredient.getData().getData() < 0)           data.setData((byte)0);
          ingredient=data.toItemStack(ingredient.getAmount());
        }
        recipe[i]=ingredient;
      }
      recipeType=RecipeType.SHAPELESS_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof FurnaceRecipe) {
      ItemStack ingredient=((FurnaceRecipe)r).getInput();
      if (ingredient != null) {
        MaterialData data=ingredient.getData();
        if (ingredient.getData().getData() < 0)         data.setData((byte)0);
        ingredient=data.toItemStack(ingredient.getAmount());
      }
      recipe[4]=ingredient;
      recipeType=RecipeType.FURNACE.toItem();
      recipeOutput=r.getResult();
    }
  }
  if (addToHistory)   addToHistory(p,sfItem != null ? sfItem.getURID() : URID.nextURID(item,true));
  if (history.containsKey(p.getUniqueId()) && history.get(p.getUniqueId()).size() > 1) {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        if (action.isShiftClicked())         openMainMenu(p,true,book,1);
 else {
          URID last=getLastEntry(p,true);
          if (URID.decode(last) instanceof Category)           openCategory(p,(Category)URID.decode(last),true,1,book);
 else           if (URID.decode(last) instanceof SlimefunItem)           displayItem(p,((SlimefunItem)URID.decode(last)).getItem(),false,book,0);
 else           if (URID.decode(last) instanceof GuideHandler)           ((GuideHandler)URID.decode(last)).run(p,true,book);
 else           displayItem(p,(ItemStack)URID.decode(last),false,book,0);
        }
        return false;
      }
    }
);
  }
 else {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        openMainMenu(p,true,book,1);
        return false;
      }
    }
);
  }
  menu.addItem(3,Slimefun.hasUnlocked(p,recipe[0],false) ? recipe[0] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[0],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[0]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(3,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(4,Slimefun.hasUnlocked(p,recipe[1],false) ? recipe[1] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[1],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[1]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(4,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(5,Slimefun.hasUnlocked(p,recipe[2],false) ? recipe[2] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[2],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[2]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(5,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(8,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(8,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str"")));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(7,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(7,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str"")));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  menu.addItem(10,recipeType);
  menu.addMenuClickHandler(10,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(12,Slimefun.hasUnlocked(p,recipe[3],false) ? recipe[3] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[3],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[3]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(12,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(13,Slimefun.hasUnlocked(p,recipe[4],false) ? recipe[4] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[4],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[4]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(13,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(14,Slimefun.hasUnlocked(p,recipe[5],false) ? recipe[5] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[5],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[5]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(14,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(16,recipeOutput);
  menu.addMenuClickHandler(16,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(21,Slimefun.hasUnlocked(p,recipe[6],false) ? recipe[6] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[6],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[6]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(21,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(22,Slimefun.hasUnlocked(p,recipe[7],false) ? recipe[7] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[7],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[7]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(22,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(23,Slimefun.hasUnlocked(p,recipe[8],false) ? recipe[8] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[8],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[8]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(23,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if ((sfItem instanceof SlimefunMachine && ((SlimefunMachine)sfItem).getDisplayRecipes().size() > 0) || (sfItem instanceof SlimefunGadget && ((SlimefunGadget)sfItem).getRecipes().size() > 0)) {
      for (int i=27; i < 36; i++) {
        menu.addItem(i,new CustomItem(Material.STAINED_GLASS_PANE,SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ""String_Node_Str"" : ""String_Node_Str"",7));
        menu.addMenuClickHandler(i,new MenuClickHandler(){
          @Override public boolean onClick(          Player arg0,          int arg1,          ItemStack arg2,          ClickAction arg3){
            return false;
          }
        }
);
      }
      List<ItemStack> recipes=SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ((SlimefunMachine)SlimefunItem.getByItem(item)).getDisplayRecipes() : ((SlimefunGadget)SlimefunItem.getByItem(item)).getDisplayRecipes();
      int recipe_size=recipes.size();
      if (recipe_size > 18)       recipe_size=18;
      int inputs=-1, outputs=-1;
      for (int i=0; i < recipe_size; i++) {
        int slot=36;
        if (i % 2 == 1) {
          slot=slot + 9;
          outputs++;
        }
 else         inputs++;
        int addition=(i % 2 == 0 ? inputs : outputs);
        menu.addItem(slot + addition,recipes.get(i));
        menu.addMenuClickHandler(slot + addition,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            displayItem(p,item,true,book,0);
            return false;
          }
        }
);
      }
    }
 else     if (sfItem instanceof AGenerator) {
      int slot=27;
      for (      MachineFuel fuel : ((AGenerator)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AGenerator)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AGenerator)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
 else     if (sfItem instanceof AReactor) {
      int slot=27;
      for (      MachineFuel fuel : ((AReactor)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AReactor)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AReactor)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
  }
  menu.build().open(p);
}","@SuppressWarnings(""String_Node_Str"") public static void displayItem(Player p,final ItemStack item,boolean addToHistory,final boolean book,final int page){
  if (item == null || item.getType() == Material.AIR)   return;
  final SlimefunItem sfItem=SlimefunItem.getByItem(item);
  if (sfItem == null) {
    if (!all_recipes)     return;
  }
  ItemStack[] recipe=new ItemStack[9];
  ItemStack recipeType=null;
  ItemStack recipeOutput=item;
  ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.setEmptySlotsClickable(false);
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
    }
  }
);
  if (sfItem != null) {
    recipe=sfItem.getRecipe();
    recipeType=sfItem.getRecipeType().toItem();
    recipeOutput=sfItem.getCustomOutput() != null ? sfItem.getCustomOutput() : sfItem.getItem();
  }
 else {
    List<Recipe> recipes=new ArrayList<Recipe>();
    Iterator<Recipe> iterator=Bukkit.recipeIterator();
    while (iterator.hasNext()) {
      Recipe r=iterator.next();
      if (SlimefunManager.isItemSimiliar(new CustomItem(r.getResult(),1),item,true) && r.getResult().getData().getData() == item.getData().getData())       recipes.add(r);
    }
    if (recipes.isEmpty())     return;
    Recipe r=recipes.get(page);
    if (recipes.size() > page + 1) {
      menu.addItem(1,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(1,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int slot,        ItemStack stack,        ClickAction action){
          displayItem(p,item,false,book,page + 1);
          return false;
        }
      }
);
    }
    if (r instanceof ShapedRecipe) {
      String[] shape=((ShapedRecipe)r).getShape();
      for (int i=0; i < shape.length; i++) {
        for (int j=0; j < shape[i].length(); j++) {
          ItemStack ingredient=((ShapedRecipe)r).getIngredientMap().get(shape[i].charAt(j));
          if (ingredient != null) {
            MaterialData data=ingredient.getData();
            if (ingredient.getData().getData() < 0)             data.setData((byte)0);
            ingredient=data.toItemStack(ingredient.getAmount());
          }
          recipe[i * 3 + j]=ingredient;
        }
      }
      recipeType=RecipeType.SHAPED_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof ShapelessRecipe) {
      List<ItemStack> ingredients=((ShapelessRecipe)r).getIngredientList();
      for (int i=0; i < ingredients.size(); i++) {
        ItemStack ingredient=ingredients.get(i);
        if (ingredient != null) {
          MaterialData data=ingredient.getData();
          if (ingredient.getData().getData() < 0)           data.setData((byte)0);
          ingredient=data.toItemStack(ingredient.getAmount());
        }
        recipe[i]=ingredient;
      }
      recipeType=RecipeType.SHAPELESS_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof FurnaceRecipe) {
      ItemStack ingredient=((FurnaceRecipe)r).getInput();
      if (ingredient != null) {
        MaterialData data=ingredient.getData();
        if (ingredient.getData().getData() < 0)         data.setData((byte)0);
        ingredient=data.toItemStack(ingredient.getAmount());
      }
      recipe[4]=ingredient;
      recipeType=RecipeType.FURNACE.toItem();
      recipeOutput=r.getResult();
    }
  }
  if (addToHistory)   addToHistory(p,sfItem != null ? sfItem.getURID() : URID.nextURID(item,true));
  if (history.containsKey(p.getUniqueId()) && history.get(p.getUniqueId()).size() > 1) {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        if (action.isShiftClicked())         openMainMenu(p,true,book,1);
 else {
          URID last=getLastEntry(p,true);
          if (URID.decode(last) instanceof Category)           openCategory(p,(Category)URID.decode(last),true,1,book);
 else           if (URID.decode(last) instanceof SlimefunItem)           displayItem(p,((SlimefunItem)URID.decode(last)).getItem(),false,book,0);
 else           if (URID.decode(last) instanceof GuideHandler)           ((GuideHandler)URID.decode(last)).run(p,true,book);
 else           displayItem(p,(ItemStack)URID.decode(last),false,book,0);
        }
        return false;
      }
    }
);
  }
 else {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        openMainMenu(p,true,book,1);
        return false;
      }
    }
);
  }
  menu.addItem(3,Slimefun.hasUnlocked(p,recipe[0],false) ? recipe[0] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[0],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[0]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(3,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(4,Slimefun.hasUnlocked(p,recipe[1],false) ? recipe[1] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[1],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[1]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(4,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(5,Slimefun.hasUnlocked(p,recipe[2],false) ? recipe[2] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[2],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[2]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(5,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(8,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(8,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str"")));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(7,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(7,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str"")));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  menu.addItem(10,recipeType);
  menu.addMenuClickHandler(10,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(12,Slimefun.hasUnlocked(p,recipe[3],false) ? recipe[3] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[3],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[3]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(12,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(13,Slimefun.hasUnlocked(p,recipe[4],false) ? recipe[4] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[4],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[4]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(13,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(14,Slimefun.hasUnlocked(p,recipe[5],false) ? recipe[5] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[5],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[5]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(14,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(16,recipeOutput);
  menu.addMenuClickHandler(16,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(21,Slimefun.hasUnlocked(p,recipe[6],false) ? recipe[6] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[6],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[6]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(21,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(22,Slimefun.hasUnlocked(p,recipe[7],false) ? recipe[7] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[7],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[7]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(22,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  menu.addItem(23,Slimefun.hasUnlocked(p,recipe[8],false) ? recipe[8] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[8],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[8]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(23,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,book,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if ((sfItem instanceof SlimefunMachine && ((SlimefunMachine)sfItem).getDisplayRecipes().size() > 0) || (sfItem instanceof SlimefunGadget && ((SlimefunGadget)sfItem).getRecipes().size() > 0)) {
      for (int i=27; i < 36; i++) {
        menu.addItem(i,new CustomItem(Material.STAINED_GLASS_PANE,SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ""String_Node_Str"" : ""String_Node_Str"",7));
        menu.addMenuClickHandler(i,new MenuClickHandler(){
          @Override public boolean onClick(          Player arg0,          int arg1,          ItemStack arg2,          ClickAction arg3){
            return false;
          }
        }
);
      }
      List<ItemStack> recipes=SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ((SlimefunMachine)SlimefunItem.getByItem(item)).getDisplayRecipes() : ((SlimefunGadget)SlimefunItem.getByItem(item)).getDisplayRecipes();
      int recipe_size=recipes.size();
      if (recipe_size > 18)       recipe_size=18;
      int inputs=-1, outputs=-1;
      for (int i=0; i < recipe_size; i++) {
        int slot=36;
        if (i % 2 == 1) {
          slot=slot + 9;
          outputs++;
        }
 else         inputs++;
        int addition=(i % 2 == 0 ? inputs : outputs);
        menu.addItem(slot + addition,recipes.get(i));
        menu.addMenuClickHandler(slot + addition,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            displayItem(p,item,true,book,0);
            return false;
          }
        }
);
      }
    }
 else     if (sfItem instanceof AGenerator) {
      int slot=27;
      for (      MachineFuel fuel : ((AGenerator)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AGenerator)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AGenerator)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
 else     if (sfItem instanceof AReactor) {
      int slot=27;
      for (      MachineFuel fuel : ((AReactor)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AReactor)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AReactor)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
  }
  menu.build().open(p);
}",0.9988160518444666
79926,"@SuppressWarnings(""String_Node_Str"") public static void openSettings(Player p,final ItemStack guide){
  final ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.BLOCK_NOTE_HARP,0.7F,0.7F);
    }
  }
);
  for (  int i : slots) {
    menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
    menu.addMenuClickHandler(i,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        return false;
      }
    }
);
  }
  if (SlimefunManager.isItemSimiliar(guide,getItem(BookDesign.CHEST),true)) {
    if (p.hasPermission(""String_Node_Str"")) {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.BOOK));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
 else {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.BOOK));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
  }
 else   if (SlimefunManager.isItemSimiliar(guide,getItem(BookDesign.BOOK),true)) {
    if (p.hasPermission(""String_Node_Str"")) {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.CHEAT_SHEET));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
 else {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.CHEST));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
  }
 else   if (SlimefunManager.isItemSimiliar(guide,getItem(BookDesign.CHEAT_SHEET),true)) {
    menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(19,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int arg1,      ItemStack arg2,      ClickAction arg3){
        p.getInventory().setItemInMainHand(getItem(BookDesign.CHEST));
        openSettings(p,p.getInventory().getItemInMainHand());
        return false;
      }
    }
);
  }
  menu.addItem(1,new CustomItem(new MaterialData(Material.BOOK_AND_QUILL),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + SlimefunStartup.instance.getDescription().getVersion(),""String_Node_Str"" + contributors.size(),""String_Node_Str"",""String_Node_Str""));
  menu.addMenuClickHandler(1,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int arg1,    ItemStack arg2,    ClickAction arg3){
      openCredits(p,guide);
      return false;
    }
  }
);
  try {
    menu.addItem(4,new CustomItem(new MaterialData(Material.REDSTONE_COMPARATOR),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + IntegerFormat.formatBigNumber(code_bytes),""String_Node_Str"" + IntegerFormat.timeDelta(last_update) + ""String_Node_Str"",""String_Node_Str"" + forks,""String_Node_Str"" + stars,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(4,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int arg1,      ItemStack arg2,      ClickAction arg3){
        p.closeInventory();
        p.sendMessage(""String_Node_Str"");
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""));
        p.sendMessage(""String_Node_Str"");
        return false;
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  menu.addItem(7,new CustomItem(new MaterialData(Material.REDSTONE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + issues,""String_Node_Str"",""String_Node_Str""));
  menu.addMenuClickHandler(7,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int arg1,    ItemStack arg2,    ClickAction arg3){
      p.closeInventory();
      p.sendMessage(""String_Node_Str"");
      p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""));
      p.sendMessage(""String_Node_Str"");
      return false;
    }
  }
);
  menu.open(p);
}","@SuppressWarnings(""String_Node_Str"") public static void openSettings(Player p,final ItemStack guide){
  final ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.setEmptySlotsClickable(false);
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.BLOCK_NOTE_HARP,0.7F,0.7F);
    }
  }
);
  for (  int i : slots) {
    menu.addItem(i,new CustomItem(new MaterialData(Material.STAINED_GLASS_PANE,(byte)7),""String_Node_Str""));
    menu.addMenuClickHandler(i,new MenuClickHandler(){
      @Override public boolean onClick(      Player arg0,      int arg1,      ItemStack arg2,      ClickAction arg3){
        return false;
      }
    }
);
  }
  if (SlimefunManager.isItemSimiliar(guide,getItem(BookDesign.CHEST),true)) {
    if (p.hasPermission(""String_Node_Str"")) {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.BOOK));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
 else {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.BOOK));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
  }
 else   if (SlimefunManager.isItemSimiliar(guide,getItem(BookDesign.BOOK),true)) {
    if (p.hasPermission(""String_Node_Str"")) {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.CHEAT_SHEET));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
 else {
      menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(19,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int arg1,        ItemStack arg2,        ClickAction arg3){
          p.getInventory().setItemInMainHand(getItem(BookDesign.CHEST));
          openSettings(p,p.getInventory().getItemInMainHand());
          return false;
        }
      }
);
    }
  }
 else   if (SlimefunManager.isItemSimiliar(guide,getItem(BookDesign.CHEAT_SHEET),true)) {
    menu.addItem(19,new CustomItem(new MaterialData(Material.CHEST),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(19,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int arg1,      ItemStack arg2,      ClickAction arg3){
        p.getInventory().setItemInMainHand(getItem(BookDesign.CHEST));
        openSettings(p,p.getInventory().getItemInMainHand());
        return false;
      }
    }
);
  }
  menu.addItem(1,new CustomItem(new MaterialData(Material.BOOK_AND_QUILL),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + SlimefunStartup.instance.getDescription().getVersion(),""String_Node_Str"" + contributors.size(),""String_Node_Str"",""String_Node_Str""));
  menu.addMenuClickHandler(1,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int arg1,    ItemStack arg2,    ClickAction arg3){
      openCredits(p,guide);
      return false;
    }
  }
);
  try {
    menu.addItem(4,new CustomItem(new MaterialData(Material.REDSTONE_COMPARATOR),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + IntegerFormat.formatBigNumber(code_bytes),""String_Node_Str"" + IntegerFormat.timeDelta(last_update) + ""String_Node_Str"",""String_Node_Str"" + forks,""String_Node_Str"" + stars,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(4,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int arg1,      ItemStack arg2,      ClickAction arg3){
        p.closeInventory();
        p.sendMessage(""String_Node_Str"");
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""));
        p.sendMessage(""String_Node_Str"");
        return false;
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  menu.addItem(7,new CustomItem(new MaterialData(Material.REDSTONE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + issues,""String_Node_Str"",""String_Node_Str""));
  menu.addMenuClickHandler(7,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int arg1,    ItemStack arg2,    ClickAction arg3){
      p.closeInventory();
      p.sendMessage(""String_Node_Str"");
      p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""));
      p.sendMessage(""String_Node_Str"");
      return false;
    }
  }
);
  menu.open(p);
}",0.996742671009772
79927,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  boolean allow=reason.equals(UnregisterReason.PLAYER_BREAK) && (BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString()) || p.hasPermission(""String_Node_Str""));
  if (allow) {
    if (BlockStorage.getInventory(b).getItemInSlot(43) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(43));
    for (    int slot : getOutputSlots()) {
      if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
    }
    AndroidStatusHologram.remove(b);
  }
  return allow;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  boolean allow=reason.equals(UnregisterReason.PLAYER_BREAK) && (BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString()) || p.hasPermission(""String_Node_Str""));
  if (allow) {
    if (BlockStorage.getInventory(b).getItemInSlot(43) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(43));
      BlockStorage.getInventory(b).replaceExistingItem(43,null);
    }
    for (    int slot : getOutputSlots()) {
      if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
        BlockStorage.getInventory(b).replaceExistingItem(slot,null);
      }
    }
    AndroidStatusHologram.remove(b);
  }
  return allow;
}",0.904645476772616
79928,"@SuppressWarnings(""String_Node_Str"") public ProgrammableAndroid(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  if (getTier() == 1) {
    registerFuel(new MachineFuel(80,new MaterialData(Material.COAL,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(80,new MaterialData(Material.COAL,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(800,new ItemStack(Material.COAL_BLOCK)));
    registerFuel(new MachineFuel(45,new ItemStack(Material.BLAZE_ROD)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)2).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)3).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG_2,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG_2,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)2).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)3).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)4).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)5).toItemStack(1)));
  }
 else   if (getTier() == 2) {
    registerFuel(new MachineFuel(100,new ItemStack(Material.LAVA_BUCKET)));
    registerFuel(new MachineFuel(200,SlimefunItems.BUCKET_OF_OIL));
    registerFuel(new MachineFuel(500,SlimefunItems.BUCKET_OF_FUEL));
  }
 else {
    registerFuel(new MachineFuel(2500,SlimefunItems.URANIUM));
    registerFuel(new MachineFuel(1200,SlimefunItems.NEPTUNIUM));
    registerFuel(new MachineFuel(3000,SlimefunItems.BOOSTED_URANIUM));
  }
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      try {
        constructMenu(this);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString()) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public void newInstance(    BlockMenu menu,    final Block b){
      try {
        menu.replaceExistingItem(15,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str""));
        menu.addMenuClickHandler(15,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            Messages.local.sendTranslation(p,""String_Node_Str"",true);
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            p.closeInventory();
            return false;
          }
        }
);
        menu.replaceExistingItem(17,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str""));
        menu.addMenuClickHandler(17,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            Messages.local.sendTranslation(p,""String_Node_Str"",true);
            return false;
          }
        }
);
        menu.replaceExistingItem(16,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(16,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            try {
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              Messages.local.sendTranslation(p,""String_Node_Str"",true);
              openScriptEditor(p,b);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      b.setData((byte)1);
      Skull skull=(Skull)b.getState();
      skull.setRotation(BlockFace.NORTH);
      skull.update(true,false);
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      boolean allow=reason.equals(UnregisterReason.PLAYER_BREAK) && (BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString()) || p.hasPermission(""String_Node_Str""));
      if (allow) {
        if (BlockStorage.getInventory(b).getItemInSlot(43) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(43));
        for (        int slot : getOutputSlots()) {
          if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
        }
        AndroidStatusHologram.remove(b);
      }
      return allow;
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") public ProgrammableAndroid(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  if (getTier() == 1) {
    registerFuel(new MachineFuel(80,new MaterialData(Material.COAL,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(80,new MaterialData(Material.COAL,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(800,new ItemStack(Material.COAL_BLOCK)));
    registerFuel(new MachineFuel(45,new ItemStack(Material.BLAZE_ROD)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)2).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG,(byte)3).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG_2,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(4,new MaterialData(Material.LOG_2,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)0).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)1).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)2).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)3).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)4).toItemStack(1)));
    registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)5).toItemStack(1)));
  }
 else   if (getTier() == 2) {
    registerFuel(new MachineFuel(100,new ItemStack(Material.LAVA_BUCKET)));
    registerFuel(new MachineFuel(200,SlimefunItems.BUCKET_OF_OIL));
    registerFuel(new MachineFuel(500,SlimefunItems.BUCKET_OF_FUEL));
  }
 else {
    registerFuel(new MachineFuel(2500,SlimefunItems.URANIUM));
    registerFuel(new MachineFuel(1200,SlimefunItems.NEPTUNIUM));
    registerFuel(new MachineFuel(3000,SlimefunItems.BOOSTED_URANIUM));
  }
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      try {
        constructMenu(this);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString()) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public void newInstance(    BlockMenu menu,    final Block b){
      try {
        menu.replaceExistingItem(15,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str""));
        menu.addMenuClickHandler(15,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            Messages.local.sendTranslation(p,""String_Node_Str"",true);
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            p.closeInventory();
            return false;
          }
        }
);
        menu.replaceExistingItem(17,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str""));
        menu.addMenuClickHandler(17,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            Messages.local.sendTranslation(p,""String_Node_Str"",true);
            return false;
          }
        }
);
        menu.replaceExistingItem(16,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(16,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            try {
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              Messages.local.sendTranslation(p,""String_Node_Str"",true);
              openScriptEditor(p,b);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      b.setData((byte)1);
      Skull skull=(Skull)b.getState();
      skull.setRotation(BlockFace.NORTH);
      skull.update(true,false);
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      boolean allow=reason.equals(UnregisterReason.PLAYER_BREAK) && (BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString()) || p.hasPermission(""String_Node_Str""));
      if (allow) {
        if (BlockStorage.getInventory(b).getItemInSlot(43) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(43));
          BlockStorage.getInventory(b).replaceExistingItem(43,null);
        }
        for (        int slot : getOutputSlots()) {
          if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
            BlockStorage.getInventory(b).replaceExistingItem(slot,null);
          }
        }
        AndroidStatusHologram.remove(b);
      }
      return allow;
    }
  }
);
}",0.9864074600916706
79929,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  for (  int slot : getOutputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  processing.remove(b);
  progress.remove(b);
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  for (  int slot : getOutputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  processing.remove(b);
  progress.remove(b);
  return true;
}",0.8826219512195121
79930,"public AContainer(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,id,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return getOutputSlots();
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      for (      int slot : getOutputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      processing.remove(b);
      progress.remove(b);
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}","public AContainer(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,id,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return getOutputSlots();
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      for (      int slot : getOutputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      processing.remove(b);
      progress.remove(b);
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}",0.9505813953488372
79931,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getOutputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getOutputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.8932038834951457
79932,"public AFarm(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,id,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getOutputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public AFarm(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,id,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getOutputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.9684132292827944
79933,"public AGenerator(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,id,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return getOutputSlots();
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getInputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
      }
      progress.remove(b.getLocation());
      processing.remove(b.getLocation());
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}","public AGenerator(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,id,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return getOutputSlots();
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getInputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
      }
      progress.remove(b.getLocation());
      processing.remove(b.getLocation());
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}",0.9630057803468208
79934,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getInputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
  }
  progress.remove(b.getLocation());
  processing.remove(b.getLocation());
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getInputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
  }
  progress.remove(b.getLocation());
  processing.remove(b.getLocation());
  return true;
}",0.9143730886850152
79935,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getFuelSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getCoolantSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
  }
  progress.remove(b.getLocation());
  processing.remove(b.getLocation());
  ReactorHologram.remove(b.getLocation());
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getFuelSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getCoolantSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
  }
  progress.remove(b.getLocation());
  processing.remove(b.getLocation());
  ReactorHologram.remove(b.getLocation());
  return true;
}",0.9063545150501672
79936,"public AReactor(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,id,recipeType,recipe);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) {
          BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(4,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(4,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(4,new CustomItem(SlimefunItems.PLUTONIUM,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(4,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
      }
 catch (      Exception x) {
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getFuelSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getCoolantSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
      }
      progress.remove(b.getLocation());
      processing.remove(b.getLocation());
      ReactorHologram.remove(b.getLocation());
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}","public AReactor(Category category,ItemStack item,String id,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,id,recipeType,recipe);
  new BlockMenuPreset(id,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) {
          BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(4,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(4,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(4,new CustomItem(SlimefunItems.PLUTONIUM,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(4,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
      }
 catch (      Exception x) {
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(id,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getFuelSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getCoolantSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
      }
      progress.remove(b.getLocation());
      processing.remove(b.getLocation());
      ReactorHologram.remove(b.getLocation());
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}",0.972133526850508
79937,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.8929068150208623
79938,"public AdvancedCargoOutputNode(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,name,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL,(byte)15),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.STONE_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.GOLD_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(41,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(41,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) - 1;
            if (channel < 0) {
              if (CargoNet.EXTRA_CHANNELS)               channel=16;
 else               channel=15;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
        int channel=((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str""))));
        if (channel == 16) {
          menu.replaceExistingItem(42,new CustomItem(SlimefunItems.CHEST_TERMINAL,""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(42,new CustomItem(new MaterialData(Material.WOOL,(byte)channel),""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(43,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(43,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + 1;
            if (CargoNet.EXTRA_CHANNELS) {
              if (channel > 16)               channel=0;
            }
 else {
              if (channel > 15)               channel=0;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public AdvancedCargoOutputNode(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,name,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL,(byte)15),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.STONE_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.GOLD_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(41,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(41,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) - 1;
            if (channel < 0) {
              if (CargoNet.EXTRA_CHANNELS)               channel=16;
 else               channel=15;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
        int channel=((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str""))));
        if (channel == 16) {
          menu.replaceExistingItem(42,new CustomItem(SlimefunItems.CHEST_TERMINAL,""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(42,new CustomItem(new MaterialData(Material.WOOL,(byte)channel),""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(43,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(43,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + 1;
            if (CargoNet.EXTRA_CHANNELS) {
              if (channel > 16)               channel=0;
            }
 else {
              if (channel > 15)               channel=0;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.9949074351446888
79939,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  me.mrCookieSlime.Slimefun.holograms.AnimalGrowthAccelerator.getArmorStand(b).remove();
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  me.mrCookieSlime.Slimefun.holograms.AnimalGrowthAccelerator.getArmorStand(b).remove();
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.9141583054626532
79940,"public AnimalGrowthAccelerator(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      me.mrCookieSlime.Slimefun.holograms.AnimalGrowthAccelerator.getArmorStand(b).remove();
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public AnimalGrowthAccelerator(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      me.mrCookieSlime.Slimefun.holograms.AnimalGrowthAccelerator.getArmorStand(b).remove();
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.9701230228471002
79941,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  me.mrCookieSlime.Slimefun.holograms.AutoBreeder.getArmorStand(b).remove();
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  me.mrCookieSlime.Slimefun.holograms.AutoBreeder.getArmorStand(b).remove();
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.9117983963344788
79942,"public AutoBreeder(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      me.mrCookieSlime.Slimefun.holograms.AutoBreeder.getArmorStand(b).remove();
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public AutoBreeder(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      me.mrCookieSlime.Slimefun.holograms.AutoBreeder.getArmorStand(b).remove();
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.969610296746514
79943,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getInputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getInputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
  }
  return true;
}",0.903448275862069
79944,"public AutomatedCraftingChamber(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    final BlockMenu menu,    final Block b){
      if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
        menu.replaceExistingItem(6,new CustomItem(new MaterialData(Material.SULPHUR),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(6,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 else {
        menu.replaceExistingItem(6,new CustomItem(new MaterialData(Material.REDSTONE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(6,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            newInstance(menu,b);
            return false;
          }
        }
);
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      List<Integer> slots=new ArrayList<Integer>();
      for (      int slot : getInputSlots()) {
        if (menu.getItemInSlot(slot) != null)         slots.add(slot);
      }
      Collections.sort(slots,new RecipeSorter(menu));
      return ArrayUtils.toPrimitive(slots.toArray(new Integer[slots.size()]));
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getInputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
      }
      return true;
    }
  }
);
}","public AutomatedCraftingChamber(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    final BlockMenu menu,    final Block b){
      if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
        menu.replaceExistingItem(6,new CustomItem(new MaterialData(Material.SULPHUR),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(6,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 else {
        menu.replaceExistingItem(6,new CustomItem(new MaterialData(Material.REDSTONE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(6,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
            newInstance(menu,b);
            return false;
          }
        }
);
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      List<Integer> slots=new ArrayList<Integer>();
      for (      int slot : getInputSlots()) {
        if (menu.getItemInSlot(slot) != null)         slots.add(slot);
      }
      Collections.sort(slots,new RecipeSorter(menu));
      return ArrayUtils.toPrimitive(slots.toArray(new Integer[slots.size()]));
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getInputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
      }
      return true;
    }
  }
);
}",0.9806938159879336
79945,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.8929068150208623
79946,"public CargoCraftingNode(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        menu.replaceExistingItem(41,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(41,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) - 1;
            if (channel < 0)             channel=15;
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
        menu.replaceExistingItem(42,new CustomItem(new MaterialData(Material.WOOL,(byte)((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str""))))),""String_Node_Str"" + (((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")))) + 1)));
        menu.addMenuClickHandler(42,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            return false;
          }
        }
);
        menu.replaceExistingItem(43,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(43,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + 1;
            if (channel > 15)             channel=0;
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public CargoCraftingNode(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        menu.replaceExistingItem(41,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(41,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) - 1;
            if (channel < 0)             channel=15;
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
        menu.replaceExistingItem(42,new CustomItem(new MaterialData(Material.WOOL,(byte)((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str""))))),""String_Node_Str"" + (((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")))) + 1)));
        menu.addMenuClickHandler(42,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            return false;
          }
        }
);
        menu.replaceExistingItem(43,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(43,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + 1;
            if (channel > 15)             channel=0;
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.9883673190091692
79947,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.8929068150208623
79948,"public CargoInputNode(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,name,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL,(byte)15),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.STONE_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.GOLD_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(24,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(24,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(24,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(24,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(41,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(41,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) - 1;
            if (channel < 0) {
              if (CargoNet.EXTRA_CHANNELS)               channel=16;
 else               channel=15;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
        int channel=((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str""))));
        if (channel == 16) {
          menu.replaceExistingItem(42,new CustomItem(SlimefunItems.CHEST_TERMINAL,""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(42,new CustomItem(new MaterialData(Material.WOOL,(byte)channel),""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(43,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(43,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + 1;
            if (CargoNet.EXTRA_CHANNELS) {
              if (channel > 16)               channel=0;
            }
 else {
              if (channel > 15)               channel=0;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public CargoInputNode(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe,ItemStack recipeOutput){
  super(category,item,name,recipeType,recipe,recipeOutput);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(15,new CustomItem(new MaterialData(Material.WOOL,(byte)15),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(15,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.STONE_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(16,new CustomItem(new MaterialData(Material.GOLD_SWORD,(byte)20),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(16,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(24,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(24,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(24,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(24,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(25,new CustomItem(new MaterialData(Material.EMPTY_MAP),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(25,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(41,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(41,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) - 1;
            if (channel < 0) {
              if (CargoNet.EXTRA_CHANNELS)               channel=16;
 else               channel=15;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
        int channel=((!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 0 : (Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str""))));
        if (channel == 16) {
          menu.replaceExistingItem(42,new CustomItem(SlimefunItems.CHEST_TERMINAL,""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(42,new CustomItem(new MaterialData(Material.WOOL,(byte)channel),""String_Node_Str"" + (channel + 1)));
          menu.addMenuClickHandler(42,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              return false;
            }
          }
);
        }
        menu.replaceExistingItem(43,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(43,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            int channel=Integer.parseInt(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + 1;
            if (CargoNet.EXTRA_CHANNELS) {
              if (channel > 16)               channel=0;
            }
 else {
              if (channel > 15)               channel=0;
            }
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(channel));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      boolean open=CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b) || p.hasPermission(""String_Node_Str"");
      if (!open) {
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
      }
      return open;
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.9956219417975792
79949,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  for (  int slot : getInputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.8929068150208623
79950,"public CropGrowthAccelerator(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public CropGrowthAccelerator(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      for (      int slot : getInputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.967984934086629
79951,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getInputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
  }
  progress.remove(b.getLocation());
  processing.remove(b.getLocation());
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getInputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
  }
  progress.remove(b.getLocation());
  processing.remove(b.getLocation());
  return true;
}",0.9143730886850152
79952,"public ElectricSmeltery(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      List<Integer> slots=new ArrayList<Integer>();
      for (      int slot : getInputSlots()) {
        if (SlimefunManager.isItemSimiliar(menu.getItemInSlot(slot),item,true)) {
          slots.add(slot);
        }
      }
      if (slots.isEmpty()) {
        return getInputSlots();
      }
 else {
        Collections.sort(slots,new RecipeSorter(menu));
        return ArrayUtils.toPrimitive(slots.toArray(new Integer[slots.size()]));
      }
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getInputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
      }
      progress.remove(b.getLocation());
      processing.remove(b.getLocation());
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}","public ElectricSmeltery(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      return new int[0];
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      List<Integer> slots=new ArrayList<Integer>();
      for (      int slot : getInputSlots()) {
        if (SlimefunManager.isItemSimiliar(menu.getItemInSlot(slot),item,true)) {
          slots.add(slot);
        }
      }
      if (slots.isEmpty()) {
        return getInputSlots();
      }
 else {
        Collections.sort(slots,new RecipeSorter(menu));
        return ArrayUtils.toPrimitive(slots.toArray(new Integer[slots.size()]));
      }
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getInputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
      }
      progress.remove(b.getLocation());
      processing.remove(b.getLocation());
      return true;
    }
  }
);
  this.registerDefaultRecipes();
}",0.9719175076788064
79953,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getFuelSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getCoolantSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getFuelSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getCoolantSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getOutputSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
  }
  return true;
}",0.8923076923076924
79954,"public ReactorAccessPort(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return getOutputSlots();
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.INSERT)) {
        if (SlimefunManager.isItemSimiliar(item,SlimefunItems.REACTOR_COOLANT_CELL,true))         return getCoolantSlots();
 else         return getFuelSlots();
      }
 else       return getOutputSlots();
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getFuelSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getCoolantSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
      }
      return true;
    }
  }
);
}","public ReactorAccessPort(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return getOutputSlots();
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.INSERT)) {
        if (SlimefunManager.isItemSimiliar(item,SlimefunItems.REACTOR_COOLANT_CELL,true))         return getCoolantSlots();
 else         return getFuelSlots();
      }
 else       return getOutputSlots();
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getFuelSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getCoolantSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getOutputSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
      }
      return true;
    }
  }
);
}",0.9565020389669234
79955,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  if (reason.equals(UnregisterReason.EXPLODE))   return false;
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getSoulSandSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
    for (    int slot : getWitherSkullSlots()) {
      if (inv.getItemInSlot(slot) != null)       b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
    }
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  if (reason.equals(UnregisterReason.EXPLODE))   return false;
  BlockMenu inv=BlockStorage.getInventory(b);
  if (inv != null) {
    for (    int slot : getSoulSandSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
    for (    int slot : getWitherSkullSlots()) {
      if (inv.getItemInSlot(slot) != null) {
        b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        inv.replaceExistingItem(slot,null);
      }
    }
  }
  return true;
}",0.913978494623656
79956,"public WitherAssembler(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(22,new CustomItem(new MaterialData(Material.SULPHUR),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(22,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(22,new CustomItem(new MaterialData(Material.REDSTONE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(22,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        double offset=(!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 3.0F : Double.valueOf(BlockStorage.getBlockInfo(b,""String_Node_Str""));
        menu.replaceExistingItem(31,new CustomItem(new MaterialData(Material.PISTON_BASE),""String_Node_Str"" + offset + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(31,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            double offset=DoubleHandler.fixDouble(Double.valueOf(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + (arg3.isRightClicked() ? -0.1F : 0.1F));
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(offset));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception x) {
        x.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return new int[0];
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.INSERT)) {
        if (SlimefunManager.isItemSimiliar(item,new ItemStack(Material.SOUL_SAND),true))         return getSoulSandSlots();
 else         return getWitherSkullSlots();
      }
 else       return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      if (reason.equals(UnregisterReason.EXPLODE))       return false;
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getSoulSandSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
        for (        int slot : getWitherSkullSlots()) {
          if (inv.getItemInSlot(slot) != null)           b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
        }
      }
      return true;
    }
  }
);
}","public WitherAssembler(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,getInventoryTitle()){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    final BlockMenu menu,    final Block b){
      try {
        if (!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null || BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(""String_Node_Str"")) {
          menu.replaceExistingItem(22,new CustomItem(new MaterialData(Material.SULPHUR),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(22,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
 else {
          menu.replaceExistingItem(22,new CustomItem(new MaterialData(Material.REDSTONE),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
          menu.addMenuClickHandler(22,new MenuClickHandler(){
            @Override public boolean onClick(            Player p,            int arg1,            ItemStack arg2,            ClickAction arg3){
              BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
              newInstance(menu,b);
              return false;
            }
          }
);
        }
        double offset=(!BlockStorage.hasBlockInfo(b) || BlockStorage.getBlockInfo(b,""String_Node_Str"") == null) ? 3.0F : Double.valueOf(BlockStorage.getBlockInfo(b,""String_Node_Str""));
        menu.replaceExistingItem(31,new CustomItem(new MaterialData(Material.PISTON_BASE),""String_Node_Str"" + offset + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(31,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int arg1,          ItemStack arg2,          ClickAction arg3){
            double offset=DoubleHandler.fixDouble(Double.valueOf(BlockStorage.getBlockInfo(b,""String_Node_Str"")) + (arg3.isRightClicked() ? -0.1F : 0.1F));
            BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(offset));
            newInstance(menu,b);
            return false;
          }
        }
);
      }
 catch (      Exception x) {
        x.printStackTrace();
      }
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.INSERT))       return getInputSlots();
 else       return new int[0];
    }
    @Override public int[] getSlotsAccessedByItemTransport(    BlockMenu menu,    ItemTransportFlow flow,    ItemStack item){
      if (flow.equals(ItemTransportFlow.INSERT)) {
        if (SlimefunManager.isItemSimiliar(item,new ItemStack(Material.SOUL_SAND),true))         return getSoulSandSlots();
 else         return getWitherSkullSlots();
      }
 else       return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      if (reason.equals(UnregisterReason.EXPLODE))       return false;
      BlockMenu inv=BlockStorage.getInventory(b);
      if (inv != null) {
        for (        int slot : getSoulSandSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
        for (        int slot : getWitherSkullSlots()) {
          if (inv.getItemInSlot(slot) != null) {
            b.getWorld().dropItemNaturally(b.getLocation(),inv.getItemInSlot(slot));
            inv.replaceExistingItem(slot,null);
          }
        }
      }
      return true;
    }
  }
);
}",0.98561797752809
79957,"@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  me.mrCookieSlime.Slimefun.holograms.XPCollector.getArmorStand(b).remove();
  for (  int slot : getOutputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)     b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
  }
  return true;
}","@Override public boolean onBreak(Player p,Block b,SlimefunItem item,UnregisterReason reason){
  me.mrCookieSlime.Slimefun.holograms.XPCollector.getArmorStand(b).remove();
  for (  int slot : getOutputSlots()) {
    if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
      b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      BlockStorage.getInventory(b).replaceExistingItem(slot,null);
    }
  }
  return true;
}",0.912
79958,"public XPCollector(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      me.mrCookieSlime.Slimefun.holograms.XPCollector.getArmorStand(b).remove();
      for (      int slot : getOutputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null)         b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
      }
      return true;
    }
  }
);
}","public XPCollector(Category category,ItemStack item,String name,RecipeType recipeType,ItemStack[] recipe){
  super(category,item,name,recipeType,recipe);
  new BlockMenuPreset(name,""String_Node_Str""){
    @Override public void init(){
      constructMenu(this);
    }
    @Override public void newInstance(    BlockMenu menu,    Block b){
    }
    @Override public boolean canOpen(    Block b,    Player p){
      return p.hasPermission(""String_Node_Str"") || CSCoreLib.getLib().getProtectionManager().canAccessChest(p.getUniqueId(),b,true);
    }
    @Override public int[] getSlotsAccessedByItemTransport(    ItemTransportFlow flow){
      if (flow.equals(ItemTransportFlow.WITHDRAW))       return getOutputSlots();
      return new int[0];
    }
  }
;
  registerBlockHandler(name,new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      me.mrCookieSlime.Slimefun.holograms.XPCollector.getArmorStand(b).remove();
      for (      int slot : getOutputSlots()) {
        if (BlockStorage.getInventory(b).getItemInSlot(slot) != null) {
          b.getWorld().dropItemNaturally(b.getLocation(),BlockStorage.getInventory(b).getItemInSlot(slot));
          BlockStorage.getInventory(b).replaceExistingItem(slot,null);
        }
      }
      return true;
    }
  }
);
}",0.9713515335355578
79959,"@EventHandler public void onPickup(PlayerPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}","@EventHandler public void onPickup(PlayerPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}",0.9529914529914528
79960,"@EventHandler public void onMinecartPickup(InventoryPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}","@EventHandler public void onMinecartPickup(InventoryPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}",0.954070981210856
79961,"@EventHandler public void onPickup(EntityPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}","@EventHandler public void onPickup(EntityPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}",0.9529914529914528
79962,"@EventHandler public void onMinecartPickup(InventoryPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(""String_Node_Str"")) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}","@EventHandler public void onMinecartPickup(InventoryPickupItemEvent e){
  if (e.getItem().hasMetadata(""String_Node_Str""))   e.setCancelled(true);
 else   if (!e.getItem().hasMetadata(""String_Node_Str"") && e.getItem().getItemStack().hasItemMeta() && e.getItem().getItemStack().getItemMeta().hasDisplayName()&& e.getItem().getItemStack().getItemMeta().getDisplayName().startsWith(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
    e.setCancelled(true);
    e.getItem().remove();
  }
}",0.954070981210856
79963,"public static String toString(SlimefunItem item){
  StringBuilder builder=new StringBuilder(LENGTH * 2);
  for (  char c : item.getHash().toCharArray()) {
    builder.append('§');
    builder.append(c);
  }
  return builder.toString();
}","public static String toString(SlimefunItem item){
  StringBuilder builder=new StringBuilder(LENGTH * 2);
  for (  char c : item.getHash().toCharArray()) {
    builder.append('�');
    builder.append(c);
  }
  return builder.toString();
}",0.9957805907172996
79964,"public static void setupItems() throws Exception {
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.GRANDMAS_WALKING_STICK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.LOG),null,null,new ItemStack(Material.LOG),null,null,new ItemStack(Material.LOG),null}).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.GRANDPAS_WALKING_STICK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),new ItemStack(Material.LOG),new ItemStack(Material.LEATHER),null,new ItemStack(Material.LOG),null,null,new ItemStack(Material.LOG),null}).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.PORTABLE_CRAFTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.BOOK),new ItemStack(Material.WORKBENCH),null,null,null,null,null,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.PORTABLE_CRAFTER,true)) {
        p.openWorkbench(p.getLocation(),true);
        p.getWorld().playSound(p.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.FORTUNE_COOKIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.COOKIE),new ItemStack(Material.PAPER),null,null,null,null,null,null,null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ENHANCED_CRAFTING_TABLE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.WORKBENCH),null,null,new ItemStack(Material.DISPENSER),null},new ItemStack[0],Material.WORKBENCH).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          final Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (int j=0; j < inv.getContents().length; j++) {
              if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],true)) {
                if (SlimefunItem.getByItem(inputs.get(i)[j]) instanceof SlimefunBackpack) {
                  if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],false)) {
                    craft=false;
                    break;
                  }
                }
 else {
                  craft=false;
                  break;
                }
              }
            }
            if (craft) {
              final ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i)).clone();
              if (Slimefun.hasUnlocked(p,adding,true)) {
                Inventory inv2=Bukkit.createInventory(null,9,""String_Node_Str"");
                for (int j=0; j < inv.getContents().length; j++) {
                  inv2.setItem(j,inv.getContents()[j] != null ? (inv.getContents()[j].getAmount() > 1 ? new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1) : null) : null);
                }
                if (InvUtils.fits(inv2,adding)) {
                  SlimefunItem sfItem=SlimefunItem.getByItem(adding);
                  if (sfItem instanceof SlimefunBackpack) {
                    ItemStack backpack=null;
                    for (int j=0; j < 9; j++) {
                      if (inv.getContents()[j] != null) {
                        if (inv.getContents()[j].getType() != Material.AIR) {
                          if (SlimefunItem.getByItem(inv.getContents()[j]) instanceof SlimefunBackpack) {
                            backpack=inv.getContents()[j];
                            break;
                          }
                        }
                      }
                    }
                    String id=""String_Node_Str"";
                    int size=((SlimefunBackpack)sfItem).size;
                    if (backpack != null) {
                      for (                      String line : backpack.getItemMeta().getLore()) {
                        if (line.startsWith(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"")) && line.contains(""String_Node_Str"")) {
                          id=line.replace(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""),""String_Node_Str"");
                          Config cfg=new Config(new File(""String_Node_Str"" + id.split(""String_Node_Str"")[0] + ""String_Node_Str""));
                          cfg.setValue(""String_Node_Str"" + id.split(""String_Node_Str"")[1] + ""String_Node_Str"",size);
                          cfg.save();
                          break;
                        }
                      }
                    }
                    if (id.equals(""String_Node_Str"")) {
                      for (int line=0; line < adding.getItemMeta().getLore().size(); line++) {
                        if (adding.getItemMeta().getLore().get(line).equals(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
                          ItemMeta im=adding.getItemMeta();
                          List<String> lore=im.getLore();
                          lore.set(line,lore.get(line).replace(""String_Node_Str"",Backpacks.createBackpack(p,size)));
                          im.setLore(lore);
                          adding.setItemMeta(im);
                          break;
                        }
                      }
                    }
 else {
                      for (int line=0; line < adding.getItemMeta().getLore().size(); line++) {
                        if (adding.getItemMeta().getLore().get(line).equals(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
                          ItemMeta im=adding.getItemMeta();
                          List<String> lore=im.getLore();
                          lore.set(line,lore.get(line).replace(""String_Node_Str"",id));
                          im.setLore(lore);
                          adding.setItemMeta(im);
                          break;
                        }
                      }
                    }
                  }
                  for (int j=0; j < 9; j++) {
                    if (inv.getContents()[j] != null) {
                      if (inv.getContents()[j].getType() != Material.AIR) {
                        if (inv.getContents()[j].getType().toString().endsWith(""String_Node_Str""))                         inv.setItem(j,new ItemStack(Material.BUCKET));
 else                         if (inv.getContents()[j].getAmount() > 1)                         inv.setItem(j,new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1));
 else                         inv.setItem(j,null);
                      }
                    }
                  }
                  p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                  inv.addItem(adding);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.PORTABLE_DUSTBIN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT)}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.PORTABLE_DUSTBIN,true)) {
        e.setCancelled(true);
        p.openInventory(Bukkit.createInventory(null,9 * 3,ChatColor.DARK_RED + ""String_Node_Str""));
        p.playSound(p.getLocation(),Sound.BLOCK_ANVIL_LAND,1,1);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.BEEF_JERKY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SALT,new ItemStack(Material.COOKED_BEEF),null,null,null,null,null,null,null},new String[]{""String_Node_Str""},new Integer[]{20}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.GRIND_STONE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.FENCE),null,null,new CustomItem(Material.DISPENSER,""String_Node_Str"",0),null},new ItemStack[]{new ItemStack(Material.BLAZE_ROD),new ItemStack(Material.BLAZE_POWDER,4),new ItemStack(Material.BONE),new CustomItem(Material.INK_SACK,15,4),new ItemStack(Material.GRAVEL),new ItemStack(Material.FLINT),new ItemStack(Material.NETHER_STALK),new CustomItem(SlimefunItems.MAGIC_LUMP_1,2),new ItemStack(Material.EYE_OF_ENDER),new CustomItem(SlimefunItems.ENDER_LUMP_1,2),new ItemStack(Material.COBBLESTONE),new ItemStack(Material.GRAVEL),new ItemStack(Material.WHEAT),SlimefunItems.WHEAT_FLOUR,new ItemStack(Material.DIRT),SlimefunItems.STONE_CHUNK},Material.FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                ItemStack output=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,output)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(output);
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ARMOR_FORGE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.ANVIL),null,null,new CustomItem(Material.DISPENSER,""String_Node_Str"",0),null},new ItemStack[]{},Material.ANVIL).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          final Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (int j=0; j < inv.getContents().length; j++) {
              if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],true)) {
                craft=false;
                break;
              }
            }
            if (craft) {
              final ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i));
              if (Slimefun.hasUnlocked(p,adding,true)) {
                if (InvUtils.fits(inv,adding)) {
                  for (                  ItemStack removing : inputs.get(i)) {
                    if (removing != null)                     inv.removeItem(removing);
                  }
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,1,1);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,1F,2F);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,1F,2F);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ORE_CRUSHER,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.NETHER_FENCE),null,new ItemStack(Material.IRON_FENCE),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.IRON_FENCE)},new ItemStack[]{new ItemStack(Material.IRON_ORE),new CustomItem(SlimefunItems.IRON_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1),new ItemStack(Material.GOLD_ORE),new CustomItem(SlimefunItems.GOLD_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1),new ItemStack(Material.NETHERRACK,16),SlimefunItems.SULFATE,SlimefunItems.SIFTED_ORE,SlimefunItems.CRUSHED_ORE,SlimefunItems.CRUSHED_ORE,SlimefunItems.PULVERIZED_ORE,SlimefunItems.PURE_ORE_CLUSTER,SlimefunItems.TINY_URANIUM,new ItemStack(Material.COBBLESTONE,8),new ItemStack(Material.SAND,1),new ItemStack(Material.GOLD_INGOT),SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_4K,SlimefunItems.GOLD_DUST},Material.NETHER_FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(convert.getAmount());
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,1);
                  ;
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.COMPRESSOR,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.NETHER_FENCE),null,new ItemStack(Material.PISTON_BASE),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.PISTON_BASE)},new ItemStack[]{new ItemStack(Material.COAL,8),SlimefunItems.CARBON,new CustomItem(SlimefunItems.STEEL_INGOT,8),SlimefunItems.STEEL_PLATE,new CustomItem(SlimefunItems.CARBON,4),SlimefunItems.COMPRESSED_CARBON,new CustomItem(SlimefunItems.STONE_CHUNK,4),new ItemStack(Material.COBBLESTONE),new CustomItem(SlimefunItems.REINFORCED_ALLOY_INGOT,8),SlimefunItems.REINFORCED_PLATE},Material.NETHER_FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          final Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                final ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(convert.getAmount());
                  inv.removeItem(removing);
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_PISTON_EXTEND,1,1);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(p.getLocation(),Sound.BLOCK_PISTON_CONTRACT,1F,2F);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(p.getLocation(),Sound.BLOCK_PISTON_EXTEND,1F,2F);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGIC_LUMP_1,""String_Node_Str"",RecipeType.GRIND_STONE,new ItemStack[]{null,null,null,null,new ItemStack(Material.NETHER_STALK),null,null,null,null},new CustomItem(SlimefunItems.MAGIC_LUMP_1,2)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGIC_LUMP_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MAGIC_LUMP_1,SlimefunItems.MAGIC_LUMP_1,null,SlimefunItems.MAGIC_LUMP_1,SlimefunItems.MAGIC_LUMP_1,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGIC_LUMP_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MAGIC_LUMP_2,SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,SlimefunItems.MAGIC_LUMP_2,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ENDER_LUMP_1,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,null,new ItemStack(Material.EYE_OF_ENDER),null,null,null,null},new CustomItem(SlimefunItems.ENDER_LUMP_1,2)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ENDER_LUMP_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,SlimefunItems.ENDER_LUMP_1,null,SlimefunItems.ENDER_LUMP_1,SlimefunItems.ENDER_LUMP_1,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ENDER_LUMP_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ENDER_LUMP_2,SlimefunItems.ENDER_LUMP_2,null,SlimefunItems.ENDER_LUMP_2,SlimefunItems.ENDER_LUMP_2,null,null,null,null}).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.ENDER_BACKPACK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.LEATHER),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.LEATHER),new ItemStack(Material.CHEST),new ItemStack(Material.LEATHER),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.LEATHER),SlimefunItems.ENDER_LUMP_2}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.ENDER_BACKPACK,true)) {
        e.setCancelled(true);
        p.openInventory(p.getEnderChest());
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ENDERMEN_TELEPORT,1,1);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_HELMET,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.EYE_OF_ENDER),SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN),null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_CHESTPLATE,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,null,SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),new ItemStack(Material.EYE_OF_ENDER),new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_LEGGINGS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.EYE_OF_ENDER),SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_BOOTS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,SlimefunItems.ENDER_LUMP_1,null,SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.MAGIC_EYE_OF_ENDER,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.ENDER_PEARL),new ItemStack(Material.EYE_OF_ENDER),new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_2}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MAGIC_EYE_OF_ENDER,true)) {
        e.setCancelled(true);
        PlayerInventory.update(p);
        if (p.getInventory().getHelmet() != null && p.getInventory().getChestplate() != null && p.getInventory().getLeggings() != null && p.getInventory().getBoots() != null) {
          if (SlimefunManager.isItemSimiliar(p.getInventory().getHelmet(),SlimefunItems.ENDER_HELMET,true) && SlimefunManager.isItemSimiliar(p.getInventory().getChestplate(),SlimefunItems.ENDER_CHESTPLATE,true) && SlimefunManager.isItemSimiliar(p.getInventory().getLeggings(),SlimefunItems.ENDER_LEGGINGS,true)&& SlimefunManager.isItemSimiliar(p.getInventory().getBoots(),SlimefunItems.ENDER_BOOTS,true)) {
            p.launchProjectile(EnderPearl.class);
            p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ENDERMEN_TELEPORT,1,1);
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.MAGIC_SUGAR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.REDSTONE),new ItemStack(Material.GLOWSTONE_DUST),null,null,null,null,null,null},new String[]{""String_Node_Str""},new Integer[]{4}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MAGIC_SUGAR,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_GENERIC_EAT,1,1);
        p.addPotionEffect(new PotionEffect(PotionEffectType.SPEED,600,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.MONSTER_JERKY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SALT,new ItemStack(Material.ROTTEN_FLESH),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_HELMET,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT),null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_CHESTPLATE,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_LEGGINGS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT)},new PotionEffect[]{new PotionEffect(PotionEffectType.SPEED,300,2)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_BOOTS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT)},new PotionEffect[]{new PotionEffect(PotionEffectType.JUMP,300,5)}).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.SWORD_OF_BEHEADING,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.EMERALD),null,SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.EMERALD),SlimefunItems.MAGIC_LUMP_2,null,new ItemStack(Material.BLAZE_ROD),null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Integer[]{70,40,25,40,40}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGICAL_BOOK_COVER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.BOOK),SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.BASIC_CIRCUIT_BOARD,""String_Node_Str"",RecipeType.MOB_DROP,new ItemStack[]{null,null,null,null,new CustomItem(Material.MONSTER_EGG,""String_Node_Str"",99),null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.ADVANCED_CIRCUIT_BOARD,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.REDSTONE_BLOCK),SlimefunItems.BASIC_CIRCUIT_BOARD,new ItemStack(Material.REDSTONE_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK)}).register(true);
  new SlimefunGadget(Categories.TOOLS,SlimefunItems.GOLD_PAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.STONE),new ItemStack(Material.BOWL),new ItemStack(Material.STONE),new ItemStack(Material.STONE),new ItemStack(Material.STONE),new ItemStack(Material.STONE)},new ItemStack[]{new ItemStack(Material.GRAVEL),new ItemStack(Material.FLINT),new ItemStack(Material.GRAVEL),new ItemStack(Material.CLAY_BALL),new ItemStack(Material.GRAVEL),SlimefunItems.SIFTED_ORE},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Integer[]{47,28,15}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.GOLD_PAN,true)) {
        if (e.getClickedBlock() != null && e.getClickedBlock().getType() == Material.GRAVEL) {
          List<ItemStack> drops=new ArrayList<ItemStack>();
          if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))           drops.add(SlimefunItems.SIFTED_ORE);
 else           if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))           drops.add(new ItemStack(Material.CLAY_BALL));
 else           if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))           drops.add(new ItemStack(Material.FLINT));
          if (CSCoreLib.getLib().getProtectionManager().canBuild(p.getUniqueId(),e.getClickedBlock(),true)) {
            e.getClickedBlock().getWorld().playEffect(e.getClickedBlock().getLocation(),Effect.STEP_SOUND,e.getClickedBlock().getType());
            e.getClickedBlock().setType(Material.AIR);
            for (            ItemStack drop : drops) {
              e.getClickedBlock().getWorld().dropItemNaturally(e.getClickedBlock().getLocation(),drop);
            }
          }
        }
        e.setCancelled(true);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.SIFTED_ORE,""String_Node_Str"",RecipeType.GOLD_PAN,new ItemStack[]{new ItemStack(Material.GRAVEL),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.SMELTERY,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.NETHER_FENCE),null,new ItemStack(Material.NETHER_BRICK),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.NETHER_BRICK),null,new ItemStack(Material.FLINT_AND_STEEL),null},new ItemStack[]{SlimefunItems.IRON_DUST,new ItemStack(Material.IRON_INGOT)},Material.NETHER_FENCE,new String[]{""String_Node_Str""},new Integer[]{34}).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (            ItemStack converting : inputs.get(i)) {
              if (converting != null) {
                for (int j=0; j < inv.getContents().length; j++) {
                  if (j == (inv.getContents().length - 1) && !SlimefunManager.isItemSimiliar(converting,inv.getContents()[j],true,SlimefunManager.DataType.ALWAYS)) {
                    craft=false;
                    break;
                  }
 else                   if (SlimefunManager.isItemSimiliar(inv.getContents()[j],converting,true,SlimefunManager.DataType.ALWAYS))                   break;
                }
              }
            }
            if (craft) {
              ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i));
              if (Slimefun.hasUnlocked(p,adding,true)) {
                if (InvUtils.fits(inv,adding)) {
                  for (                  ItemStack removing : inputs.get(i)) {
                    if (removing != null)                     inv.removeItem(removing);
                  }
                  inv.addItem(adding);
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_LAVA_POP,1,1);
                  p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                  Block raw_disp=b.getRelative(BlockFace.DOWN);
                  Hopper resf=null;
                  if (raw_disp.getRelative(BlockFace.EAST).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.EAST).getState();
                  }
 else                   if (raw_disp.getRelative(BlockFace.WEST).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.WEST).getState();
                  }
 else                   if (raw_disp.getRelative(BlockFace.NORTH).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.NORTH).getState();
                  }
 else                   if (raw_disp.getRelative(BlockFace.SOUTH).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.SOUTH).getState();
                  }
                  boolean isIgniteChamberInstalled=false;
                  if (resf != null) {
                    if (resf.getCustomName().equalsIgnoreCase(SlimefunItems.IGNITION_CHAMBER.getItemMeta().getDisplayName()))                     isIgniteChamberInstalled=true;
                  }
                  if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str""))) {
                    if (isIgniteChamberInstalled) {
                      if (resf.getInventory().contains(Material.FLINT_AND_STEEL)) {
                        ItemStack item=resf.getInventory().getItem(resf.getInventory().first(Material.FLINT_AND_STEEL));
                        item.setDurability((short)(item.getDurability() + 1));
                        if (item.getDurability() >= 64) {
                          item.setAmount(0);
                          p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ITEM_BREAK,1,1);
                          item.setAmount(0);
                        }
                        p.getWorld().playSound(p.getLocation(),Sound.ITEM_FLINTANDSTEEL_USE,1,1);
                      }
 else {
                        Messages.local.sendTranslation(p,""String_Node_Str"",true);
                        BlockBreaker.nullify(b.getRelative(BlockFace.DOWN).getRelative(BlockFace.DOWN));
                      }
                    }
 else {
                      BlockBreaker.nullify(b.getRelative(BlockFace.DOWN).getRelative(BlockFace.DOWN));
                    }
                  }
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MACHINES_1,SlimefunItems.IGNITION_CHAMBER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_PLATE,SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.STEEL_PLATE,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_PLATE,SlimefunItems.ELECTRIC_MOTOR,null,new ItemStack(Material.HOPPER),null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.PRESSURE_CHAMBER,""String_Node_Str"",new ItemStack[]{new ItemStack(Material.STEP),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.STEP),new ItemStack(Material.PISTON_BASE),new ItemStack(Material.GLASS),new ItemStack(Material.PISTON_BASE),new ItemStack(Material.PISTON_BASE),new ItemStack(Material.CAULDRON_ITEM),new ItemStack(Material.PISTON_BASE)},new ItemStack[]{SlimefunItems.CARBON_CHUNK,SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.RAW_CARBONADO,SlimefunItems.CARBONADO},Material.CAULDRON).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.UP).getRelative(BlockFace.UP).getState();
          final Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                final ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(convert.getAmount());
                  inv.removeItem(removing);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
                  p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                  p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                  p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(b.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
                      p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                      p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                      p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(b.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
                          p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                          p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                          p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                              p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                              p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.BATTERY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.REDSTONE),null,SlimefunItems.ZINC_INGOT,SlimefunItems.SULFATE,SlimefunItems.COPPER_INGOT,SlimefunItems.ZINC_INGOT,SlimefunItems.SULFATE,SlimefunItems.COPPER_INGOT}).register(true);
  SlimefunManager.registerArmorSet(new ItemStack(Material.GLOWSTONE),new ItemStack[]{SlimefunItems.GLOWSTONE_HELMET,SlimefunItems.GLOWSTONE_CHESTPLATE,SlimefunItems.GLOWSTONE_LEGGINGS,SlimefunItems.GLOWSTONE_BOOTS},""String_Node_Str"",new PotionEffect[][]{new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)}},true,true);
  SlimefunManager.registerArmorSet(SlimefunItems.DAMASCUS_STEEL_INGOT,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_HELMET,SlimefunItems.DAMASCUS_STEEL_CHESTPLATE,SlimefunItems.DAMASCUS_STEEL_LEGGINGS,SlimefunItems.DAMASCUS_STEEL_BOOTS},""String_Node_Str"",true,false);
  SlimefunManager.registerArmorSet(SlimefunItems.REINFORCED_ALLOY_INGOT,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_HELMET,SlimefunItems.REINFORCED_ALLOY_CHESTPLATE,SlimefunItems.REINFORCED_ALLOY_LEGGINGS,SlimefunItems.REINFORCED_ALLOY_BOOTS},""String_Node_Str"",true,false);
  SlimefunManager.registerArmorSet(new ItemStack(Material.CACTUS),new ItemStack[]{SlimefunItems.CACTUS_HELMET,SlimefunItems.CACTUS_CHESTPLATE,SlimefunItems.CACTUS_LEGGINGS,SlimefunItems.CACTUS_BOOTS},""String_Node_Str"",true,false);
  new Alloy(SlimefunItems.REINFORCED_ALLOY_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.SOLDER_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.GOLD_24K,null,null,null}).register(true);
  new Alloy(SlimefunItems.HARDENED_METAL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.ALUMINUM_BRONZE_INGOT,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.DAMASCUS_STEEL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.STEEL_INGOT,SlimefunItems.IRON_DUST,SlimefunItems.CARBON,new ItemStack(Material.IRON_INGOT),null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.STEEL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.IRON_DUST,SlimefunItems.CARBON,new ItemStack(Material.IRON_INGOT),null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.BRONZE_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.COPPER_DUST,SlimefunItems.TIN_DUST,SlimefunItems.COPPER_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.DURALUMIN_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.ALUMINUM_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.BILLON_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.SILVER_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.SILVER_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.BRASS_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.COPPER_DUST,SlimefunItems.ZINC_DUST,SlimefunItems.COPPER_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.ALUMINUM_BRASS_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.BRASS_INGOT,SlimefunItems.ALUMINUM_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.ALUMINUM_BRONZE_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.BRONZE_INGOT,SlimefunItems.ALUMINUM_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.CORINTHIAN_BRONZE_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.SILVER_DUST,SlimefunItems.GOLD_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.BRONZE_INGOT,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.SOLDER_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.LEAD_DUST,SlimefunItems.TIN_DUST,SlimefunItems.LEAD_INGOT,null,null,null,null,null,null}).register(true);
  new ReplacingAlloy(SlimefunItems.SYNTHETIC_SAPPHIRE,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,new ItemStack(Material.GLASS),new ItemStack(Material.THIN_GLASS),SlimefunItems.ALUMINUM_INGOT,new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),null,null,null,null}).register(true);
  new ReplacingItem(Categories.RESOURCES,SlimefunItems.SYNTHETIC_DIAMOND,""String_Node_Str"",RecipeType.PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.CARBON_CHUNK,null,null,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.RAW_CARBONADO,""String_Node_Str"",new ItemStack[]{SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.CARBON_CHUNK,new ItemStack(Material.THIN_GLASS),null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.NICKEL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.IRON_DUST,new ItemStack(Material.IRON_INGOT),SlimefunItems.COPPER_DUST,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.COBALT_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.IRON_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.NICKEL_INGOT,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.CARBONADO,""String_Node_Str"",RecipeType.PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.RAW_CARBONADO,null,null,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.FERROSILICON,""String_Node_Str"",new ItemStack[]{new ItemStack(Material.IRON_INGOT),SlimefunItems.IRON_DUST,SlimefunItems.SILICON,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.IRON_DUST,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{new ItemStack(Material.IRON_ORE),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.IRON_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1)).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_DUST,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{new ItemStack(Material.GOLD_ORE),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.GOLD_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1)).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.COPPER_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.TIN_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.LEAD_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SILVER_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ALUMINUM_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ZINC_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.MAGNESIUM_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.COPPER_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.COPPER_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.TIN_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.TIN_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SILVER_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.SILVER_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.LEAD_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.LEAD_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ALUMINUM_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.ALUMINUM_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ZINC_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.ZINC_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.MAGNESIUM_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.MAGNESIUM_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SULFATE,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{new ItemStack(Material.NETHERRACK,16),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.CARBON,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new ItemStack(Material.COAL,8),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.WHEAT_FLOUR,""String_Node_Str"",RecipeType.GRIND_STONE,new ItemStack[]{null,null,null,null,new ItemStack(Material.WHEAT),null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.STEEL_PLATE,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new CustomItem(SlimefunItems.STEEL_INGOT,8),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.COMPRESSED_CARBON,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new CustomItem(SlimefunItems.CARBON,4),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.CARBON_CHUNK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,new ItemStack(Material.FLINT),SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.STEEL_THRUSTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.REDSTONE),null,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.STEEL_PLATE,new ItemStack(Material.FIREBALL),SlimefunItems.STEEL_PLATE}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.POWER_CRYSTAL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.REDSTONE),SlimefunItems.SYNTHETIC_SAPPHIRE,new ItemStack(Material.REDSTONE),SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.SYNTHETIC_SAPPHIRE,new ItemStack(Material.REDSTONE),SlimefunItems.SYNTHETIC_SAPPHIRE,new ItemStack(Material.REDSTONE)}).register(true);
  new Jetpack(SlimefunItems.DURALUMIN_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.DURALUMIN_INGOT,null,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.35).register(true);
  new Jetpack(SlimefunItems.SOLDER_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.SOLDER_INGOT,null,SlimefunItems.SOLDER_INGOT,SlimefunItems.SOLDER_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.SOLDER_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.4).register(true);
  new Jetpack(SlimefunItems.BILLON_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.BILLON_INGOT,null,SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BILLON_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.45).register(true);
  new Jetpack(SlimefunItems.STEEL_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.5).register(true);
  new Jetpack(SlimefunItems.DAMASCUS_STEEL_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.55).register(true);
  new Jetpack(SlimefunItems.REINFORCED_ALLOY_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.6).register(true);
  new Jetpack(SlimefunItems.CARBONADO_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.CARBON_CHUNK,null,SlimefunItems.CARBON_CHUNK,SlimefunItems.CARBONADO,SlimefunItems.POWER_CRYSTAL,SlimefunItems.CARBONADO,SlimefunItems.STEEL_THRUSTER,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.7).register(true);
  new SlimefunItem(Categories.TECH,SlimefunItems.PARACHUTE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CHAIN,null,SlimefunItems.CHAIN,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.CHAIN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,null},new CustomItem(SlimefunItems.CHAIN,8)).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.HOOK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,null,null}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.GRAPPLING_HOOK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.HOOK,SlimefunItems.HOOK,null,SlimefunItems.CHAIN,SlimefunItems.HOOK,SlimefunItems.CHAIN,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.GRAPPLING_HOOK,true)) {
        if (e.getClickedBlock() == null && !Variables.jump.containsKey(p.getUniqueId())) {
          Variables.jump.put(p.getUniqueId(),p.getItemInHand().getType() != Material.SHEARS);
          e.setCancelled(true);
          if (p.getItemInHand().getType() == Material.LEASH)           PlayerInventory.consumeItemInHand(p);
          Vector direction=p.getEyeLocation().getDirection().multiply(2.0);
          Projectile projectile=p.getWorld().spawn(p.getEyeLocation().add(direction.getX(),direction.getY(),direction.getZ()),Arrow.class);
          projectile.setShooter(p);
          projectile.setVelocity(direction);
          Arrow arrow=(Arrow)projectile;
          Bat b=(Bat)p.getWorld().spawnEntity(p.getLocation(),EntityType.BAT);
          b.setCanPickupItems(false);
          b.addPotionEffect(new PotionEffect(PotionEffectType.INVISIBILITY,100000,100000));
          b.setLeashHolder(arrow);
          Variables.damage.put(p.getUniqueId(),true);
          Variables.remove.put(p.getUniqueId(),new Entity[]{b,arrow});
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.MAGIC_WORKBENCH,""String_Node_Str"",new ItemStack[]{null,null,null,null,null,null,new ItemStack(Material.BOOKSHELF),new ItemStack(Material.WORKBENCH),new ItemStack(Material.DISPENSER)},new ItemStack[0],Material.WORKBENCH).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=null;
          if (b.getRelative(1,0,0).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(1,0,0).getState();
 else           if (b.getRelative(0,0,1).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(0,0,1).getState();
 else           if (b.getRelative(-1,0,0).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(-1,0,0).getState();
 else           if (b.getRelative(0,0,-1).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(0,0,-1).getState();
          final Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (int j=0; j < inv.getContents().length; j++) {
              if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],true)) {
                craft=false;
                break;
              }
            }
            if (craft) {
              final ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i));
              if (Slimefun.hasUnlocked(p,adding,true)) {
                Inventory inv2=Bukkit.createInventory(null,9,""String_Node_Str"");
                for (int j=0; j < inv.getContents().length; j++) {
                  inv2.setItem(j,inv.getContents()[j] != null ? (inv.getContents()[j].getAmount() > 1 ? new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1) : null) : null);
                }
                if (InvUtils.fits(inv2,adding)) {
                  for (int j=0; j < 9; j++) {
                    if (inv.getContents()[j] != null) {
                      if (inv.getContents()[j].getType() != Material.AIR) {
                        if (inv.getContents()[j].getAmount() > 1)                         inv.setItem(j,new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1));
 else                         inv.setItem(j,null);
                      }
                    }
                  }
                  p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                  p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                  p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                      p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                      p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                          p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                          p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                              p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_ELEMENTAL,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,SlimefunItems.MAGICAL_BOOK_COVER,SlimefunItems.MAGIC_LUMP_3,null,new ItemStack(Material.STICK),SlimefunItems.MAGICAL_BOOK_COVER,SlimefunItems.MAGIC_LUMP_3,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_WIND,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.FEATHER),SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.STAFF_ELEMENTAL,new ItemStack(Material.FEATHER),SlimefunItems.STAFF_ELEMENTAL,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.STAFF_WIND,true)) {
        if (p.getFoodLevel() >= 2) {
          if (p.getItemInHand().getType() != Material.SHEARS) {
            FoodLevelChangeEvent event=new FoodLevelChangeEvent(p,p.getFoodLevel() - 2);
            Bukkit.getPluginManager().callEvent(event);
            p.setFoodLevel(event.getFoodLevel());
          }
          p.setVelocity(p.getEyeLocation().getDirection().multiply(4));
          p.getWorld().playSound(p.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
          p.getWorld().playEffect(p.getLocation(),Effect.SMOKE,1);
          p.setFallDistance(0.0f);
        }
 else {
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_WATER,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.WATER_LILY),SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.STAFF_ELEMENTAL,new ItemStack(Material.WATER_LILY),SlimefunItems.STAFF_ELEMENTAL,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.STAFF_WATER,true)) {
        p.setFireTicks(0);
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
        return true;
      }
 else       return false;
    }
  }
);
  new MultiTool(SlimefunItems.DURALUMIN_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DURALUMIN_INGOT,null,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.DURALUMIN_INGOT,null,SlimefunItems.DURALUMIN_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.SOLDER_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLDER_INGOT,null,SlimefunItems.SOLDER_INGOT,SlimefunItems.SOLDER_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.SOLDER_INGOT,null,SlimefunItems.SOLDER_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.BILLON_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BILLON_INGOT,null,SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.BILLON_INGOT,null,SlimefunItems.BILLON_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.STEEL_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.DAMASCUS_STEEL_INGOT,null,SlimefunItems.DAMASCUS_STEEL_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.CARBONADO_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,null,SlimefunItems.CARBONADO,SlimefunItems.CARBONADO,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.CARBONADO,null,SlimefunItems.CARBONADO,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ORE_WASHER,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.DISPENSER),null,null,new ItemStack(Material.FENCE),null,null,new ItemStack(Material.CAULDRON_ITEM),null},new ItemStack[]{SlimefunItems.SIFTED_ORE,SlimefunItems.IRON_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.GOLD_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.COPPER_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.TIN_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.ZINC_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.ALUMINUM_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.MAGNESIUM_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.LEAD_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.SILVER_DUST},Material.FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.UP).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            if (current != null) {
              if (SlimefunManager.isItemSimiliar(current,SlimefunItems.SIFTED_ORE,true)) {
                ItemStack adding=SlimefunItems.IRON_DUST;
                if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.GOLD_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.ALUMINUM_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.COPPER_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.ZINC_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.TIN_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.MAGNESIUM_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.LEAD_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.SILVER_DUST;
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.WATER);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1,1);
                  if (InvUtils.fits(inv,SlimefunItems.STONE_CHUNK))                   inv.addItem(SlimefunItems.STONE_CHUNK);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
 else               if (SlimefunManager.isItemSimiliar(current,new ItemStack(Material.SAND,4),false)) {
                ItemStack adding=SlimefunItems.SALT;
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(4);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.WATER);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1,1);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
 else               if (SlimefunManager.isItemSimiliar(current,SlimefunItems.PULVERIZED_ORE,true)) {
                ItemStack adding=SlimefunItems.PURE_ORE_CLUSTER;
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.WATER);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1,1);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_24K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_22K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_22K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_20K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_20K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_18K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_18K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_16K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_16K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_14K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_14K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_12K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_12K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_10K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_10K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_8K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_8K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_6K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_6K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_4K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_4K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.STONE_CHUNK,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SILICON,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{new ItemStack(Material.QUARTZ_BLOCK),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.SOLAR_PANEL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),SlimefunItems.SILICON,SlimefunItems.SILICON,SlimefunItems.SILICON,SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON}).register(true);
  new SolarHelmet(Categories.TECH,SlimefunItems.SOLAR_HELMET,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.SOLAR_PANEL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.MEDIUM_CAPACITOR,null,SlimefunItems.MEDIUM_CAPACITOR},new String[]{""String_Node_Str""},new Double[]{0.1}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.LAVA_CRYSTAL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.RUNE_FIRE,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.MAGIC_LUMP_1}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_FIRE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,null,SlimefunItems.LAVA_CRYSTAL,null,SlimefunItems.STAFF_ELEMENTAL,null,SlimefunItems.STAFF_ELEMENTAL,null,null}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.AUTO_SMELT_PICKAXE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LAVA_CRYSTAL,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.LAVA_CRYSTAL,null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.AUTO_SMELT_PICKAXE,true)) {
        if (e.getBlock().getType().equals(Material.SKULL))         return true;
        int j=-1;
        for (int i=0; i < e.getBlock().getDrops().size(); i++) {
          if (((List<ItemStack>)e.getBlock().getDrops()).get(i) != null) {
            j++;
            drops.add(e.getBlock().getType().toString().endsWith(""String_Node_Str"") ? new CustomItem(((List<ItemStack>)e.getBlock().getDrops()).get(i),fortune) : ((List<ItemStack>)e.getBlock().getDrops()).get(i));
            if (RecipeCalculator.getSmeltedOutput(drops.get(i).getType()) != null) {
              e.getBlock().getWorld().playEffect(e.getBlock().getLocation(),Effect.MOBSPAWNER_FLAMES,1);
              drops.set(j,new CustomItem(RecipeCalculator.getSmeltedOutput(drops.get(i).getType()),drops.get(i).getAmount()));
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.TALISMAN,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.MAGIC_LUMP_2,SlimefunItems.GOLD_8K,SlimefunItems.MAGIC_LUMP_2,null,new ItemStack(Material.EMERALD),null,SlimefunItems.MAGIC_LUMP_2,SlimefunItems.GOLD_8K,SlimefunItems.MAGIC_LUMP_2},new String[]{""String_Node_Str""},new Boolean[]{false}).register(true);
  new Talisman(SlimefunItems.TALISMAN_ANVIL,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.ANVIL),SlimefunItems.TALISMAN,new ItemStack(Material.ANVIL),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,false,""String_Node_Str"",new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_MINER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.TALISMAN,SlimefunItems.SIFTED_ORE,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,false,""String_Node_Str"",20,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_HUNTER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.TALISMAN,SlimefunItems.MONSTER_JERKY,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,false,""String_Node_Str"",20,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_LAVA,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.TALISMAN,new ItemStack(Material.LAVA_BUCKET),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.FIRE_RESISTANCE,3600,4)).register(true);
  new Talisman(SlimefunItems.TALISMAN_WATER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.WATER_BUCKET),SlimefunItems.TALISMAN,new ItemStack(Material.FISHING_ROD),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.WATER_BREATHING,3600,4)).register(true);
  new Talisman(SlimefunItems.TALISMAN_ANGEL,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.FEATHER),SlimefunItems.TALISMAN,new ItemStack(Material.FEATHER),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,true,""String_Node_Str"",75,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_FIRE,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.TALISMAN,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.FIRE_RESISTANCE,3600,4)).register(true);
  new Talisman(SlimefunItems.TALISMAN_MAGICIAN,""String_Node_Str"",new ItemStack[]{SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3,new ItemStack(Material.ENCHANTMENT_TABLE),SlimefunItems.TALISMAN,new ItemStack(Material.ENCHANTMENT_TABLE),SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3},false,false,""String_Node_Str"",80,new PotionEffect[0]).register(true);
  for (  Enchantment e : Enchantment.values()) {
    for (int i=1; i <= e.getMaxLevel(); i++) {
      Slimefun.setItemVariable(""String_Node_Str"",""String_Node_Str"" + e.getName() + ""String_Node_Str""+ i,true);
    }
  }
  new Talisman(SlimefunItems.TALISMAN_TRAVELLER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.STAFF_WIND,SlimefunItems.TALISMAN_ANGEL,SlimefunItems.STAFF_WIND,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,false,""String_Node_Str"",60,new PotionEffect(PotionEffectType.SPEED,3600,2)).register(true);
  new Talisman(SlimefunItems.TALISMAN_WARRIOR,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.TALISMAN,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.INCREASE_DAMAGE,3600,2)).register(true);
  new Talisman(SlimefunItems.TALISMAN_KNIGHT,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.GILDED_IRON,SlimefunItems.TALISMAN_WARRIOR,SlimefunItems.GILDED_IRON,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},""String_Node_Str"",30,new PotionEffect(PotionEffectType.REGENERATION,100,3)).register(true);
  new Alloy(SlimefunItems.GILDED_IRON,""String_Node_Str"",new ItemStack[]{SlimefunItems.GOLD_24K,SlimefunItems.IRON_DUST,null,null,null,null,null,null,null}).register(true);
  new ReplacingAlloy(SlimefunItems.SYNTHETIC_EMERALD,""String_Node_Str"",new ItemStack[]{SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.ALUMINUM_DUST,SlimefunItems.ALUMINUM_INGOT,new ItemStack(Material.THIN_GLASS),null,null,null,null,null}).register(true);
  SlimefunManager.registerArmorSet(SlimefunItems.CHAIN,new ItemStack[]{new ItemStack(Material.CHAINMAIL_HELMET),new ItemStack(Material.CHAINMAIL_CHESTPLATE),new ItemStack(Material.CHAINMAIL_LEGGINGS),new ItemStack(Material.CHAINMAIL_BOOTS)},""String_Node_Str"",true,true);
  new Talisman(SlimefunItems.TALISMAN_WHIRLWIND,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.STAFF_WIND,SlimefunItems.TALISMAN_TRAVELLER,SlimefunItems.STAFF_WIND,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,true,""String_Node_Str"",60,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_WIZARD,""String_Node_Str"",new ItemStack[]{SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.TALISMAN_MAGICIAN,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3},false,false,""String_Node_Str"",60,new PotionEffect[0]).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.LUMBER_AXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.SYNTHETIC_DIAMOND,null,SlimefunItems.SYNTHETIC_EMERALD,SlimefunItems.GILDED_IRON,null,null,SlimefunItems.GILDED_IRON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.LUMBER_AXE,true)) {
        if (e.getBlock().getType() == Material.LOG || e.getBlock().getType() == Material.LOG_2) {
          List<Location> logs=new ArrayList<Location>();
          TreeCalculator.getTree(e.getBlock().getLocation(),e.getBlock().getLocation(),logs);
          if (logs.contains(e.getBlock()))           logs.remove(e.getBlock());
          for (          Location b : logs) {
            if (CSCoreLib.getLib().getProtectionManager().canBuild(e.getPlayer().getUniqueId(),b.getBlock())) {
              b.getWorld().playEffect(b,Effect.STEP_SOUND,b.getBlock().getType());
              for (              ItemStack drop : b.getBlock().getDrops()) {
                b.getWorld().dropItemNaturally(b,drop);
              }
              b.getBlock().setType(Material.AIR);
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.SALT,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{null,null,null,null,new ItemStack(Material.SAND,4),null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.HEAVY_CREAM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.MILK_BUCKET),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.HEAVY_CREAM,2)).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.CHEESE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.MILK_BUCKET),SlimefunItems.SALT,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.BUTTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HEAVY_CREAM,SlimefunItems.SALT,null,null,null,null,null,null,null}).register(true);
  SlimefunManager.registerArmorSet(SlimefunItems.GILDED_IRON,new ItemStack[]{SlimefunItems.GILDED_IRON_HELMET,SlimefunItems.GILDED_IRON_CHESTPLATE,SlimefunItems.GILDED_IRON_LEGGINGS,SlimefunItems.GILDED_IRON_BOOTS},""String_Node_Str"",true,false);
  new SlimefunArmorPiece(Categories.ARMOR,SlimefunItems.SCUBA_HELMET,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new ItemStack(Material.THIN_GLASS),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),null,null,null},new PotionEffect[]{new PotionEffect(PotionEffectType.WATER_BREATHING,300,1)}).register(true);
  new SlimefunArmorPiece(Categories.ARMOR,SlimefunItems.HAZMATSUIT_CHESTPLATE,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new MaterialData(Material.WOOL,(byte)1).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1)},new PotionEffect[]{new PotionEffect(PotionEffectType.FIRE_RESISTANCE,300,1)}).register(true);
  new SlimefunItem(Categories.ARMOR,SlimefunItems.HAZMATSUIT_LEGGINGS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)1).toItemStack(1)}).register(true);
  new SlimefunItem(Categories.ARMOR,SlimefunItems.RUBBER_BOOTS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new MaterialData(Material.WOOL,(byte)15).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)15).toItemStack(1)}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.CRUSHED_ORE,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.PULVERIZED_ORE,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{SlimefunItems.CRUSHED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.PURE_ORE_CLUSTER,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.PULVERIZED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.TINY_URANIUM,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{SlimefunItems.PURE_ORE_CLUSTER,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.SMALL_URANIUM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.URANIUM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SMALL_URANIUM,SlimefunItems.SMALL_URANIUM,null,SlimefunItems.SMALL_URANIUM,SlimefunItems.SMALL_URANIUM,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.REDSTONE_ALLOY,""String_Node_Str"",new ItemStack[]{new ItemStack(Material.REDSTONE),new ItemStack(Material.REDSTONE_BLOCK),SlimefunItems.FERROSILICON,SlimefunItems.HARDENED_METAL_INGOT,null,null,null,null,null}).register(true);
  SlimefunManager.registerArmorSet(SlimefunItems.GOLD_12K,new ItemStack[]{SlimefunItems.GOLD_HELMET,SlimefunItems.GOLD_CHESTPLATE,SlimefunItems.GOLD_LEGGINGS,SlimefunItems.GOLD_BOOTS},""String_Node_Str"",true,false);
  new SlimefunItem(Categories.MISC,SlimefunItems.CLOTH,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.WOOL),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.CLOTH,8)).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.RAG,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH,new ItemStack(Material.STRING),null,new ItemStack(Material.STRING),SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.RAG,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playEffect(p.getLocation(),Effect.STEP_SOUND,Material.WOOL);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,0));
        p.setFireTicks(0);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.BANDAGE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.RAG,new ItemStack(Material.STRING),SlimefunItems.RAG,null,null,null,null,null,null},new CustomItem(SlimefunItems.BANDAGE,4),new String[]{""String_Node_Str""},new Boolean[]{true}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.BANDAGE,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playEffect(p.getLocation(),Effect.STEP_SOUND,Material.WOOL);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,1));
        p.setFireTicks(0);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.SPLINT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.STICK),new ItemStack(Material.STICK),new ItemStack(Material.STICK),null,new ItemStack(Material.IRON_INGOT),null},new CustomItem(SlimefunItems.SPLINT,4),new String[]{""String_Node_Str""},new Boolean[]{true}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.SPLINT,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_SKELETON_HURT,1,1);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,0));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.CAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,null,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT},new CustomItem(SlimefunItems.CAN,4)).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.VITAMINS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.APPLE),new ItemStack(Material.RED_MUSHROOM),new ItemStack(Material.SUGAR),null,null,null,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.VITAMINS,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_GENERIC_EAT,1,1);
        if (p.hasPotionEffect(PotionEffectType.POISON))         p.removePotionEffect(PotionEffectType.POISON);
        if (p.hasPotionEffect(PotionEffectType.WITHER))         p.removePotionEffect(PotionEffectType.WITHER);
        if (p.hasPotionEffect(PotionEffectType.SLOW))         p.removePotionEffect(PotionEffectType.SLOW);
        if (p.hasPotionEffect(PotionEffectType.SLOW_DIGGING))         p.removePotionEffect(PotionEffectType.SLOW_DIGGING);
        if (p.hasPotionEffect(PotionEffectType.WEAKNESS))         p.removePotionEffect(PotionEffectType.WEAKNESS);
        if (p.hasPotionEffect(PotionEffectType.CONFUSION))         p.removePotionEffect(PotionEffectType.CONFUSION);
        if (p.hasPotionEffect(PotionEffectType.BLINDNESS))         p.removePotionEffect(PotionEffectType.BLINDNESS);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,2));
        p.setFireTicks(0);
        e.setCancelled(true);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.MEDICINE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.VITAMINS,new ItemStack(Material.GLASS_BOTTLE),SlimefunItems.HEAVY_CREAM,null,null,null,null,null,null}).register(true);
  new SlimefunArmorPiece(Categories.TECH,SlimefunItems.NIGHT_VISION_GOGGLES,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.COAL_BLOCK),new ItemStack(Material.COAL_BLOCK),new ItemStack(Material.COAL_BLOCK),new MaterialData(Material.STAINED_GLASS_PANE,(byte)5).toItemStack(1),new ItemStack(Material.COAL_BLOCK),new MaterialData(Material.STAINED_GLASS_PANE,(byte)5).toItemStack(1),new ItemStack(Material.COAL_BLOCK),null,new ItemStack(Material.COAL_BLOCK)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,20)}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.PICKAXE_OF_CONTAINMENT,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON,null,SlimefunItems.GILDED_IRON,null,null,SlimefunItems.GILDED_IRON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.PICKAXE_OF_CONTAINMENT,true)) {
        if (e.getBlock().getType() != Material.MOB_SPAWNER)         return true;
        ItemStack spawner=SlimefunItems.BROKEN_SPAWNER.clone();
        ItemMeta im=spawner.getItemMeta();
        List<String> lore=im.getLore();
        for (int i=0; i < lore.size(); i++) {
          if (lore.get(i).contains(""String_Node_Str""))           lore.set(i,lore.get(i).replace(""String_Node_Str"",StringUtils.format(((CreatureSpawner)e.getBlock().getState()).getSpawnedType().toString())));
        }
        im.setLore(lore);
        spawner.setItemMeta(im);
        e.getBlock().getLocation().getWorld().dropItemNaturally(e.getBlock().getLocation(),spawner);
        e.setExpToDrop(0);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.HERCULES_PICKAXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.HERCULES_PICKAXE,true) && e.getBlock().getType().toString().endsWith(""String_Node_Str"")) {
        if (e.getBlock().getType() == Material.IRON_ORE)         drops.add(new CustomItem(SlimefunItems.IRON_DUST,2));
 else         if (e.getBlock().getType() == Material.GOLD_ORE)         drops.add(new CustomItem(SlimefunItems.GOLD_DUST,2));
 else {
          for (          ItemStack drop : e.getBlock().getDrops()) {
            drops.add(new CustomItem(drop,2));
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.SAW_MILL,""String_Node_Str"",new ItemStack[]{null,null,null,new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG),new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG),new ItemStack(Material.WORKBENCH),new ItemStack(Material.LOG)},new ItemStack[]{},Material.WORKBENCH).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.SAW_MILL,true)) {
          if (b.getRelative(BlockFace.UP).getType() == Material.LOG)           BlockBreaker.breakBlock(p,b.getRelative(BlockFace.UP),Arrays.asList(new ItemStack[]{new CustomItem(Material.WOOD,b.getRelative(BlockFace.UP).getData() % 4,8)}),true);
 else           if (b.getRelative(BlockFace.UP).getType() == Material.LOG_2)           BlockBreaker.breakBlock(p,b.getRelative(BlockFace.UP),Arrays.asList(new ItemStack[]{new CustomItem(Material.WOOD,(b.getRelative(BlockFace.UP).getData() % 2) + 4,8)}),true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,new CustomItem(Material.FIRE,""String_Node_Str"",0),""String_Node_Str"",new ItemStack[]{null,null,null,new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG_2),new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG),new ItemStack(Material.WORKBENCH),new ItemStack(Material.LOG)},new ItemStack[]{},Material.WORKBENCH,true).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_HELMET_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_CHESTPLATE_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_LEGGINGS_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL)},new PotionEffect[]{new PotionEffect(PotionEffectType.SPEED,300,2)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_BOOTS_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL)},new PotionEffect[]{new PotionEffect(PotionEffectType.JUMP,300,5)}).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.BLADE_OF_VAMPIRES,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new MaterialData(Material.SKULL_ITEM,(byte)1).toItemStack(1),null,null,new MaterialData(Material.SKULL_ITEM,(byte)1).toItemStack(1),null,null,new ItemStack(Material.BLAZE_ROD),null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.DIGITAL_MINER,""String_Node_Str"",new ItemStack[]{SlimefunItems.SOLAR_PANEL,new ItemStack(Material.CHEST),SlimefunItems.SOLAR_PANEL,new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.DISPENSER),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.HOPPER),new ItemStack(Material.IRON_BLOCK)},new ItemStack[0],Material.DISPENSER).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.DIGITAL_MINER,true)) {
          Chest chest=(Chest)b.getRelative(BlockFace.UP).getState();
          final Inventory inv=chest.getInventory();
          List<Location> ores=new ArrayList<Location>();
          for (int x=b.getX() - 4; x < b.getX() + 4; x++) {
            for (int z=b.getZ() - 4; z < b.getZ() + 4; z++) {
              for (int y=b.getY(); y > 0; y--) {
                if (b.getWorld().getBlockAt(x,y,z).getType().toString().endsWith(""String_Node_Str"")) {
                  ores.add(b.getWorld().getBlockAt(x,y,z).getLocation());
                }
              }
            }
          }
          if (!ores.isEmpty()) {
            final Material ore=ores.get(0).getBlock().getType();
            final ItemStack adding=new ItemStack(ore);
            ores.get(0).getBlock().setType(Material.AIR);
            ores.clear();
            if (InvUtils.fits(inv,adding)) {
              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                @Override public void run(){
                                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                                  p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                                  inv.addItem(adding);
                                }
                              }
,20L);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
              }
,20L);
            }
 else             Messages.local.sendTranslation(p,""String_Node_Str"",true);
          }
 else           Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ADVANCED_DIGITAL_MINER,""String_Node_Str"",new ItemStack[]{SlimefunItems.SOLAR_PANEL,new ItemStack(Material.CHEST),SlimefunItems.SOLAR_PANEL,SlimefunItems.GOLD_24K_BLOCK,new ItemStack(Material.DISPENSER),SlimefunItems.GOLD_24K_BLOCK,SlimefunItems.GOLD_24K_BLOCK,new ItemStack(Material.HOPPER),SlimefunItems.GOLD_24K_BLOCK},new ItemStack[0],Material.DISPENSER).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.ADVANCED_DIGITAL_MINER,true)) {
          Chest chest=(Chest)b.getRelative(BlockFace.UP).getState();
          final Inventory inv=chest.getInventory();
          List<Location> ores=new ArrayList<Location>();
          for (int x=b.getX() - 6; x < b.getX() + 6; x++) {
            for (int z=b.getZ() - 6; z < b.getZ() + 6; z++) {
              for (int y=b.getY(); y > 0; y--) {
                if (b.getWorld().getBlockAt(x,y,z).getType().toString().endsWith(""String_Node_Str"")) {
                  ores.add(b.getWorld().getBlockAt(x,y,z).getLocation());
                }
              }
            }
          }
          if (!ores.isEmpty()) {
            final Material ore=ores.get(0).getBlock().getType();
            ItemStack drop=new ItemStack(ore);
            if (ore == Material.COAL_ORE)             drop=new CustomItem(new ItemStack(Material.COAL),4);
 else             if (ore == Material.IRON_ORE)             drop=new CustomItem(SlimefunItems.IRON_DUST,2);
 else             if (ore == Material.GOLD_ORE)             drop=new CustomItem(SlimefunItems.GOLD_DUST,2);
 else             if (ore == Material.REDSTONE_ORE)             drop=new CustomItem(new ItemStack(Material.REDSTONE),8);
 else             if (ore == Material.QUARTZ_ORE)             drop=new CustomItem(new ItemStack(Material.QUARTZ),4);
 else             if (ore == Material.LAPIS_ORE)             drop=new CustomItem(new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),12);
 else {
              for (              ItemStack drops : ores.get(0).getBlock().getDrops()) {
                if (!drops.getType().isBlock())                 drop=new CustomItem(drops,2);
              }
            }
            final ItemStack adding=drop;
            ores.get(0).getBlock().setType(Material.AIR);
            ores.clear();
            if (InvUtils.fits(inv,adding)) {
              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
              }
,20L);
            }
 else             Messages.local.sendTranslation(p,""String_Node_Str"",true);
          }
 else           Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.GOLD_24K_BLOCK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K}).register(true);
  new SlimefunGadget(Categories.MACHINES_1,SlimefunItems.COMPOSTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.WOOD_STEP),null,new ItemStack(Material.WOOD_STEP),new ItemStack(Material.WOOD_STEP),null,new ItemStack(Material.WOOD_STEP),new ItemStack(Material.WOOD_STEP),new ItemStack(Material.CAULDRON_ITEM),new ItemStack(Material.WOOD_STEP)},new ItemStack[]{new CustomItem(Material.LEAVES,0,8),new ItemStack(Material.DIRT),new CustomItem(Material.LEAVES_2,0,8),new ItemStack(Material.DIRT),new CustomItem(Material.SAPLING,0,8),new ItemStack(Material.DIRT),new ItemStack(Material.STONE,4),new ItemStack(Material.NETHERRACK),new ItemStack(Material.SAND,2),new ItemStack(Material.SOUL_SAND),new ItemStack(Material.WHEAT,4),new ItemStack(Material.NETHER_STALK)}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    final Player p,    ItemStack item){
      if (e.getClickedBlock() != null) {
        SlimefunItem machine=BlockStorage.check(e.getClickedBlock());
        if (machine != null && machine.getName().equals(""String_Node_Str"")) {
          final ItemStack input=p.getItemInHand();
          final Block b=e.getClickedBlock();
          for (          ItemStack convert : RecipeType.getRecipeInputs(machine)) {
            if (convert != null && SlimefunManager.isItemSimiliar(input,convert,true)) {
              ItemStack removing=input.clone();
              removing.setAmount(convert.getAmount());
              p.getInventory().removeItem(removing);
              final ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  if (input.getType().isBlock())                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      if (input.getType().isBlock())                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          if (input.getType().isBlock())                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              if (input.getType().isBlock())                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                @Override public void run(){
                                  if (input.getType().isBlock())                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                    @Override public void run(){
                                      if (input.getType().isBlock())                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                        @Override public void run(){
                                          if (input.getType().isBlock())                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                            @Override public void run(){
                                              if (input.getType().isBlock())                                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                                @Override public void run(){
                                                  if (input.getType().isBlock())                                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                                    @Override public void run(){
                                                      if (input.getType().isBlock())                                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                                        @Override public void run(){
                                                          if (input.getType().isBlock())                                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                                          p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                                                          b.getWorld().dropItemNaturally(b.getRelative(BlockFace.UP).getLocation(),adding);
                                                        }
                                                      }
,30L);
                                                    }
                                                  }
,30L);
                                                }
                                              }
,30L);
                                            }
                                          }
,30L);
                                        }
                                      }
,30L);
                                    }
                                  }
,30L);
                                }
                              }
,30L);
                            }
                          }
,30L);
                        }
                      }
,30L);
                    }
                  }
,30L);
                }
              }
,30L);
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
          return true;
        }
      }
      return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.FARMER_SHOES,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.HAY_BLOCK),null,new ItemStack(Material.HAY_BLOCK),new ItemStack(Material.HAY_BLOCK),null,new ItemStack(Material.HAY_BLOCK)}).register(true);
  @SuppressWarnings(""String_Node_Str"") final String[] explosiveblacklist=Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") != null ? ((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).toArray(new String[((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).size()]) : new String[]{""String_Node_Str""};
  new SlimefunItem(Categories.TOOLS,SlimefunItems.EXPLOSIVE_PICKAXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.TNT),SlimefunItems.SYNTHETIC_DIAMOND,new ItemStack(Material.TNT),null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null},new String[]{""String_Node_Str""},new Object[]{Arrays.asList(""String_Node_Str"")}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.EXPLOSIVE_PICKAXE,true)) {
        e.getBlock().getWorld().createExplosion(e.getBlock().getLocation(),0.0F);
        e.getBlock().getWorld().playSound(e.getBlock().getLocation(),Sound.ENTITY_GENERIC_EXPLODE,1F,1F);
        for (int x=-1; x <= 1; x++) {
          for (int y=-1; y <= 1; y++) {
            for (int z=-1; z <= 1; z++) {
              Block b=e.getBlock().getRelative(x,y,z);
              if (b.getType() != Material.AIR && !StringUtils.equals(b.getType().toString(),explosiveblacklist)) {
                if (CSCoreLib.getLib().getProtectionManager().canBuild(e.getPlayer().getUniqueId(),b)) {
                  if (SlimefunStartup.instance.isCoreProtectInstalled())                   SlimefunStartup.instance.getCoreProtectAPI().logRemoval(e.getPlayer().getName(),b.getLocation(),b.getType(),b.getData());
                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,b.getType());
                  SlimefunItem sfItem=BlockStorage.check(b);
                  boolean allow=true;
                  if (sfItem != null && !(sfItem instanceof HandledBlock)) {
                    if (SlimefunItem.blockhandler.containsKey(sfItem.getName())) {
                      allow=SlimefunItem.blockhandler.get(sfItem.getName()).onBreak(e.getPlayer(),e.getBlock(),sfItem,UnregisterReason.PLAYER_BREAK);
                    }
                    if (allow) {
                      drops.add(BlockStorage.retrieve(e.getBlock()));
                    }
                  }
 else                   if (b.getType().equals(Material.SKULL)) {
                    b.breakNaturally();
                  }
 else                   if (b.getType().name().endsWith(""String_Node_Str"")) {
                    b.breakNaturally();
                  }
 else {
                    for (                    ItemStack drop : b.getDrops()) {
                      b.getWorld().dropItemNaturally(b.getLocation(),(b.getType().toString().endsWith(""String_Node_Str"") && !b.getType().equals(Material.IRON_ORE) && !b.getType().equals(Material.GOLD_ORE)) ? new CustomItem(drop,fortune) : drop);
                    }
                    b.setType(Material.AIR);
                  }
                }
              }
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.AUTOMATED_PANNING_MACHINE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.TRAP_DOOR),null,null,new ItemStack(Material.CAULDRON_ITEM),null},new ItemStack[]{new ItemStack(Material.GRAVEL),new ItemStack(Material.FLINT),new ItemStack(Material.GRAVEL),new ItemStack(Material.CLAY_BALL),new ItemStack(Material.GRAVEL),SlimefunItems.SIFTED_ORE},Material.TRAP_DOOR).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        final ItemStack input=p.getItemInHand();
        ItemStack output=null;
        if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))         output=SlimefunItems.SIFTED_ORE;
 else         if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))         output=new ItemStack(Material.CLAY_BALL);
 else         if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))         output=new ItemStack(Material.FLINT);
        final ItemStack drop=output;
        if (input != null) {
          if (input.getType() == Material.GRAVEL) {
            PlayerInventory.consumeItemInHand(p);
            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
              @Override public void run(){
                b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                  @Override public void run(){
                    b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                      @Override public void run(){
                        b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                          @Override public void run(){
                            b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                              @Override public void run(){
                                b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                  @Override public void run(){
                                    b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                                    if (drop != null)                                     b.getWorld().dropItemNaturally(b.getLocation(),drop);
                                    p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                                  }
                                }
,30L);
                              }
                            }
,30L);
                          }
                        }
,30L);
                      }
                    }
,30L);
                  }
                }
,30L);
              }
            }
,30L);
            return true;
          }
        }
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.BOOTS_OF_THE_STOMPER,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.WOOL),null,new ItemStack(Material.WOOL),new ItemStack(Material.PISTON_BASE),null,new ItemStack(Material.PISTON_BASE)}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.PICKAXE_OF_THE_SEEKER,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.COMPASS),SlimefunItems.SYNTHETIC_DIAMOND,new ItemStack(Material.COMPASS),null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.PICKAXE_OF_THE_SEEKER,true)) {
        Block closest=null;
        for (int x=-4; x <= 4; x++) {
          for (int y=-4; y <= 4; y++) {
            for (int z=-4; z <= 4; z++) {
              if (p.getLocation().getBlock().getRelative(x,y,z).getType().toString().endsWith(""String_Node_Str"")) {
                if (closest == null)                 closest=p.getLocation().getBlock().getRelative(x,y,z);
 else                 if (p.getLocation().distance(closest.getLocation()) < p.getLocation().distance(p.getLocation().getBlock().getRelative(x,y,z).getLocation()))                 closest=p.getLocation().getBlock().getRelative(x,y,z);
              }
            }
          }
        }
        if (closest == null)         Messages.local.sendTranslation(p,""String_Node_Str"",true);
 else {
          double l=closest.getX() + 0.5 - p.getLocation().getX();
          double w=closest.getZ() + 0.5 - p.getLocation().getZ();
          float yaw, pitch;
          double c=Math.sqrt(l * l + w * w);
          double alpha1=-Math.asin(l / c) / Math.PI * 180;
          double alpha2=Math.acos(w / c) / Math.PI * 180;
          if (alpha2 > 90)           yaw=(float)(180 - alpha1);
 else           yaw=(float)alpha1;
          pitch=(float)((-Math.atan((closest.getY() - 0.5 - p.getLocation().getY()) / Math.sqrt(l * l + w * w))) * 180F / Math.PI);
          p.teleport(new Location(p.getWorld(),p.getLocation().getX(),p.getLocation().getY(),p.getLocation().getZ(),yaw,pitch));
        }
        if (e.getPlayer().getItemInHand().getEnchantments().containsKey(Enchantment.DURABILITY)) {
          if (SlimefunStartup.randomize(100) <= (60 + 40 / (e.getPlayer().getItemInHand().getEnchantmentLevel(Enchantment.DURABILITY) + 1)))           PlayerInventory.damageItemInHand(e.getPlayer());
        }
 else         PlayerInventory.damageItemInHand(e.getPlayer());
        PlayerInventory.update(e.getPlayer());
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunBackpack(9,Categories.PORTABLE,SlimefunItems.BACKPACK_SMALL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),null,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_6K,new ItemStack(Material.CHEST),SlimefunItems.GOLD_6K,new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER)}).register(true);
  new SlimefunBackpack(18,Categories.PORTABLE,SlimefunItems.BACKPACK_MEDIUM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),null,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_10K,SlimefunItems.BACKPACK_SMALL,SlimefunItems.GOLD_10K,new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER)}).register(true);
  new SlimefunBackpack(27,Categories.PORTABLE,SlimefunItems.BACKPACK_LARGE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),null,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_14K,SlimefunItems.BACKPACK_MEDIUM,SlimefunItems.GOLD_14K,new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER)}).register(true);
  new SlimefunBackpack(36,Categories.PORTABLE,SlimefunItems.WOVEN_BACKPACK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,null,SlimefunItems.CLOTH,SlimefunItems.GOLD_16K,SlimefunItems.BACKPACK_LARGE,SlimefunItems.GOLD_16K,SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH}).register(true);
  new SlimefunGadget(Categories.MACHINES_1,SlimefunItems.CRUCIBLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.HARD_CLAY),null,new ItemStack(Material.HARD_CLAY),new ItemStack(Material.HARD_CLAY),null,new ItemStack(Material.HARD_CLAY),new ItemStack(Material.HARD_CLAY),new ItemStack(Material.FLINT_AND_STEEL),new ItemStack(Material.HARD_CLAY)},new ItemStack[]{new ItemStack(Material.COBBLESTONE,16),new ItemStack(Material.LAVA_BUCKET),new ItemStack(Material.LEAVES,16),new ItemStack(Material.WATER_BUCKET),new ItemStack(Material.HARD_CLAY,12),new ItemStack(Material.LAVA_BUCKET)}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    final Player p,    ItemStack item){
      if (e.getClickedBlock() != null) {
        SlimefunItem machine=BlockStorage.check(e.getClickedBlock());
        if (machine != null && machine.getName().equals(""String_Node_Str"")) {
          final ItemStack input=p.getItemInHand();
          final Block block=e.getClickedBlock().getRelative(BlockFace.UP);
          for (          ItemStack convert : RecipeType.getRecipeInputs(machine)) {
            if (input != null) {
              if (SlimefunManager.isItemSimiliar(input,convert,true)) {
                e.setCancelled(true);
                ItemStack removing=input.clone();
                removing.setAmount(convert.getAmount());
                p.getInventory().removeItem(removing);
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                  @Override public void run(){
                    if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                      block.setType(Material.LAVA);
                      block.setData((byte)7);
                      block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                    }
 else                     if (input.getType() == Material.LEAVES) {
                      block.setType(Material.WATER);
                      block.setData((byte)7);
                      block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                    }
                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                      @Override public void run(){
                        if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                          block.setType(Material.LAVA);
                          block.setData((byte)6);
                          block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                        }
 else                         if (input.getType() == Material.LEAVES) {
                          block.setType(Material.WATER);
                          block.setData((byte)6);
                          block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                        }
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                          @Override public void run(){
                            if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                              block.setType(Material.LAVA);
                              block.setData((byte)5);
                              block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                            }
 else                             if (input.getType() == Material.LEAVES) {
                              block.setType(Material.WATER);
                              block.setData((byte)5);
                              block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                            }
                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                              @Override public void run(){
                                if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                  block.setType(Material.LAVA);
                                  block.setData((byte)4);
                                  block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                }
 else                                 if (input.getType() == Material.LEAVES) {
                                  block.setType(Material.WATER);
                                  block.setData((byte)4);
                                  block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                }
                                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                  @Override public void run(){
                                    if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                      block.setType(Material.LAVA);
                                      block.setData((byte)3);
                                      block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                    }
 else                                     if (input.getType() == Material.LEAVES) {
                                      block.setType(Material.WATER);
                                      block.setData((byte)3);
                                      block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                    }
                                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                      @Override public void run(){
                                        if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                          block.setType(Material.LAVA);
                                          block.setData((byte)2);
                                          block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                        }
 else                                         if (input.getType() == Material.LEAVES) {
                                          block.setType(Material.WATER);
                                          block.setData((byte)2);
                                          block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                        }
                                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                          @Override public void run(){
                                            if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                              block.setType(Material.LAVA);
                                              block.setData((byte)1);
                                              block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                            }
 else                                             if (input.getType() == Material.LEAVES) {
                                              block.setType(Material.WATER);
                                              block.setData((byte)1);
                                              block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                            }
                                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                              @Override public void run(){
                                                if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                                  block.setType(Material.STATIONARY_LAVA);
                                                  block.setData((byte)0);
                                                  block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                                }
 else                                                 if (input.getType() == Material.LEAVES) {
                                                  block.setType(Material.WATER);
                                                  block.setData((byte)0);
                                                  block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                                }
                                              }
                                            }
,50L);
                                          }
                                        }
,50L);
                                      }
                                    }
,50L);
                                  }
                                }
,50L);
                              }
                            }
,50L);
                          }
                        }
,50L);
                      }
                    }
,50L);
                  }
                }
,50L);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
          return true;
        }
      }
      return false;
    }
  }
);
  new SlimefunBackpack(45,Categories.PORTABLE,SlimefunItems.GILDED_BACKPACK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_22K,null,SlimefunItems.GOLD_22K,new ItemStack(Material.LEATHER),SlimefunItems.WOVEN_BACKPACK,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_22K,null,SlimefunItems.GOLD_22K}).register(true);
  new Alloy(Categories.TECH_MISC,SlimefunItems.MAGNET,""String_Node_Str"",new ItemStack[]{SlimefunItems.NICKEL_INGOT,SlimefunItems.ALUMINUM_DUST,SlimefunItems.IRON_DUST,SlimefunItems.COBALT_INGOT,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFUSED_MAGNET,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.ENDER_LUMP_2,SlimefunItems.MAGNET,SlimefunItems.ENDER_LUMP_2,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.COBALT_PICKAXE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COBALT_INGOT,SlimefunItems.COBALT_INGOT,SlimefunItems.COBALT_INGOT,null,SlimefunItems.NICKEL_INGOT,null,null,SlimefunItems.NICKEL_INGOT,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.NECROTIC_SKULL,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,null,new MaterialData(Material.SKULL_ITEM,(byte)1).toItemStack(1),null,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ESSENCE_OF_AFTERLIFE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_AIR,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_EARTH,SlimefunItems.NECROTIC_SKULL,SlimefunItems.RUNE_FIRE,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_WATER,SlimefunItems.ENDER_LUMP_3}).register(true);
  new SoulboundBackpack(36,Categories.PORTABLE,SlimefunItems.BOUND_BACKPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.ENDER_LUMP_2,null,SlimefunItems.ENDER_LUMP_2,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.GILDED_BACKPACK,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.ENDER_LUMP_2,null,SlimefunItems.ENDER_LUMP_2}).register(true);
  new JetBoots(SlimefunItems.DURALUMIN_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.35).register(true);
  new JetBoots(SlimefunItems.SOLDER_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.SOLDER_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.SOLDER_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.4).register(true);
  new JetBoots(SlimefunItems.BILLON_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.BILLON_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BILLON_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.45).register(true);
  new JetBoots(SlimefunItems.STEEL_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.5).register(true);
  new JetBoots(SlimefunItems.DAMASCUS_STEEL_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.55).register(true);
  new JetBoots(SlimefunItems.REINFORCED_ALLOY_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.6).register(true);
  new JetBoots(SlimefunItems.CARBONADO_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.CARBONADO,SlimefunItems.POWER_CRYSTAL,SlimefunItems.CARBONADO,SlimefunItems.STEEL_THRUSTER,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.7).register(true);
  new JetBoots(SlimefunItems.ARMORED_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.STEEL_PLATE,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_PLATE,SlimefunItems.STEEL_THRUSTER,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.45).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.SEISMIC_AXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,null,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.STAFF_ELEMENTAL,null,null,SlimefunItems.STAFF_ELEMENTAL,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.SEISMIC_AXE,true)) {
        List<Block> blocks=p.getLineOfSight((HashSet<Material>)null,10);
        for (int i=0; i < blocks.size(); i++) {
          Block b=blocks.get(i);
          Location ground=b.getLocation();
          if (b.getType() == null || b.getType() == Material.AIR) {
            for (int y=ground.getBlockY(); y > 0; y--) {
              if (b.getWorld().getBlockAt(b.getX(),y,b.getZ()) != null) {
                if (b.getWorld().getBlockAt(b.getX(),y,b.getZ()).getType() != null) {
                  if (b.getWorld().getBlockAt(b.getX(),y,b.getZ()).getType() != Material.AIR) {
                    ground=new Location(b.getWorld(),b.getX(),y,b.getZ());
                    break;
                  }
                }
              }
            }
          }
          b.getWorld().playEffect(ground,Effect.STEP_SOUND,ground.getBlock().getType());
          if (ground.getBlock().getRelative(BlockFace.UP).getType() == null || ground.getBlock().getRelative(BlockFace.UP).getType() == Material.AIR) {
            FallingBlock block=ground.getWorld().spawnFallingBlock(ground.getBlock().getRelative(BlockFace.UP).getLocation(),ground.getBlock().getType(),ground.getBlock().getData());
            block.setDropItem(false);
            block.setVelocity(new Vector(0,0.4 + i * 0.01,0));
            Variables.blocks.add(block.getUniqueId());
          }
          for (          Entity n : ground.getChunk().getEntities()) {
            if (n instanceof LivingEntity) {
              if (n.getLocation().distance(ground) <= 2.0D && n.getUniqueId() != p.getUniqueId()) {
                Vector vector=n.getLocation().toVector().subtract(p.getLocation().toVector()).normalize().multiply(1.4);
                vector.setY(0.9);
                n.setVelocity(vector);
                if (p.getWorld().getPVP()) {
                  EntityDamageByEntityEvent event=new EntityDamageByEntityEvent(p,n,DamageCause.ENTITY_ATTACK,6D);
                  Bukkit.getPluginManager().callEvent(event);
                  if (!event.isCancelled())                   ((LivingEntity)n).damage(6D);
                }
              }
            }
          }
        }
        for (int i=0; i < 4; i++) {
          if (e.getPlayer().getItemInHand() != null) {
            if (e.getPlayer().getItemInHand().getEnchantments().containsKey(Enchantment.DURABILITY)) {
              if (SlimefunStartup.randomize(100) <= (60 + 40 / (e.getPlayer().getItemInHand().getEnchantmentLevel(Enchantment.DURABILITY) + 1)))               PlayerInventory.damageItemInHand(e.getPlayer());
            }
 else             PlayerInventory.damageItemInHand(e.getPlayer());
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.PICKAXE_OF_VEIN_MINING,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.EMERALD_ORE),SlimefunItems.SYNTHETIC_DIAMOND,new ItemStack(Material.EMERALD_ORE),null,SlimefunItems.GILDED_IRON,null,null,SlimefunItems.GILDED_IRON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.PICKAXE_OF_VEIN_MINING,true)) {
        if (e.getBlock().getType().toString().endsWith(""String_Node_Str"")) {
          List<Location> blocks=new ArrayList<Location>();
          Vein.calculate(e.getBlock().getLocation(),e.getBlock().getLocation(),blocks,16);
          for (          Location block : blocks) {
            Block b=block.getBlock();
            b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,b.getType());
            for (            ItemStack drop : b.getDrops()) {
              b.getWorld().dropItemNaturally(b.getLocation(),drop.getType().isBlock() ? drop : new CustomItem(drop,fortune));
            }
            b.setType(Material.AIR);
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SoulboundItem(Categories.WEAPONS,SlimefunItems.SOULBOUND_SWORD,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_SWORD),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.WEAPONS,SlimefunItems.SOULBOUND_BOW,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.BOW),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.TOOLS,SlimefunItems.SOULBOUND_PICKAXE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_PICKAXE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.TOOLS,SlimefunItems.SOULBOUND_AXE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_AXE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new ExcludedSoulboundTool(Categories.TOOLS,SlimefunItems.SOULBOUND_SHOVEL,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_SPADE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new ExcludedSoulboundTool(Categories.TOOLS,SlimefunItems.SOULBOUND_HOE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_HOE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_HELMET,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_HELMET),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_CHESTPLATE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_CHESTPLATE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_LEGGINGS,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_LEGGINGS),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_BOOTS,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_BOOTS),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.JUICER,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.GLASS),null,null,new ItemStack(Material.NETHER_FENCE),null,null,new CustomItem(Material.DISPENSER,""String_Node_Str"",0),null},new ItemStack[]{new ItemStack(Material.APPLE),SlimefunItems.APPLE_JUICE,new ItemStack(Material.MELON),SlimefunItems.MELON_JUICE,new ItemStack(Material.CARROT_ITEM),SlimefunItems.CARROT_JUICE,new ItemStack(Material.PUMPKIN),SlimefunItems.PUMPKIN_JUICE},Material.NETHER_FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.JUICER,true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new Juice(Categories.FOOD,SlimefunItems.APPLE_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.APPLE),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.CARROT_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.CARROT_ITEM),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.MELON_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.MELON),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.PUMPKIN_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.PUMPKIN),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.GOLDE_APPLE_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{new ItemStack(Material.GOLDEN_APPLE),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.BROKEN_SPAWNER,""String_Node_Str"",new RecipeType(SlimefunItems.PICKAXE_OF_CONTAINMENT),new ItemStack[]{null,null,null,null,new ItemStack(Material.MOB_SPAWNER),null,null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.REPAIRED_SPAWNER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.RUNE_ENDER,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.ESSENCE_OF_AFTERLIFE,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.BROKEN_SPAWNER,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.ESSENCE_OF_AFTERLIFE,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.RUNE_ENDER}).register(true,new BlockPlaceHandler(){
    @Override public boolean onBlockPlace(    BlockPlaceEvent e,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.REPAIRED_SPAWNER,false)) {
        EntityType type=null;
        for (        String line : item.getItemMeta().getLore()) {
          if (ChatColor.stripColor(line).startsWith(""String_Node_Str""))           type=EntityType.valueOf(ChatColor.stripColor(line).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
        }
        if (type != null) {
          ((CreatureSpawner)e.getBlock().getState()).setSpawnedType(type);
          e.getBlock().getState().update(true,false);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.MILK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.MILK_BUCKET),new ItemStack(Material.GLASS_BOTTLE),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.MILK,4)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHOCOLATE_MILK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MILK,new CustomItem(Material.INK_SACK,3),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.CHOCOLATE_MILK,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.EGG_NOG,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MILK,new ItemStack(Material.EGG),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.EGG_NOG,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.APPLE_CIDER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.APPLE_JUICE,new ItemStack(Material.SUGAR),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.APPLE_CIDER,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHRISTMAS_COOKIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.COOKIE),new ItemStack(Material.SUGAR),new CustomItem(Material.INK_SACK,10),null,null,null,null,null,null},new CustomItem(SlimefunItems.CHRISTMAS_COOKIE,16)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.FRUIT_CAKE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.EGG),new ItemStack(Material.APPLE),new ItemStack(Material.MELON),new ItemStack(Material.SUGAR),null,null,null,null,null},new CustomItem(SlimefunItems.FRUIT_CAKE,4)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.APPLE_PIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.APPLE),new ItemStack(Material.EGG),null,null,null,null,null,null},new CustomItem(SlimefunItems.APPLE_PIE,2)).register(true);
  new EnhancedFurnace(1,1,1,SlimefunItems.ENHANCED_FURNACE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,new ItemStack(Material.FURNACE),SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(2,1,1,SlimefunItems.ENHANCED_FURNACE_2,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(2,2,1,SlimefunItems.ENHANCED_FURNACE_3,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_2,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(3,2,1,SlimefunItems.ENHANCED_FURNACE_4,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_3,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(3,2,2,SlimefunItems.ENHANCED_FURNACE_5,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_4,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(3,3,2,SlimefunItems.ENHANCED_FURNACE_6,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_5,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(4,3,2,SlimefunItems.ENHANCED_FURNACE_7,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_6,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(4,4,2,SlimefunItems.ENHANCED_FURNACE_8,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_7,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(5,4,2,SlimefunItems.ENHANCED_FURNACE_9,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_8,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(5,5,2,SlimefunItems.ENHANCED_FURNACE_10,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_9,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(5,5,3,SlimefunItems.ENHANCED_FURNACE_11,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_10,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(10,10,3,SlimefunItems.REINFORCED_FURNACE,""String_Node_Str"",new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_11,SlimefunItems.HEATING_COIL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT}).register(true);
  new EnhancedFurnace(20,10,3,SlimefunItems.CARBONADO_EDGED_FURNACE,""String_Node_Str"",new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.CARBONADO,SlimefunItems.HEATING_COIL,SlimefunItems.REINFORCED_FURNACE,SlimefunItems.HEATING_COIL,SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.ELECTRO_MAGNET,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.NICKEL_INGOT,SlimefunItems.MAGNET,SlimefunItems.COBALT_INGOT,null,SlimefunItems.BATTERY,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.ELECTRIC_MOTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,null,SlimefunItems.ELECTRO_MAGNET,null,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.HEATING_COIL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT}).register(true);
  @SuppressWarnings(""String_Node_Str"") final String[] blockPlacerBlacklist=Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") != null ? ((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).toArray(new String[((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).size()]) : new String[]{""String_Node_Str""};
  new SlimefunItem(Categories.MACHINES_1,SlimefunItems.BLOCK_PLACER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_4K,new ItemStack(Material.PISTON_BASE),SlimefunItems.GOLD_4K,new ItemStack(Material.IRON_INGOT),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.IRON_INGOT),SlimefunItems.GOLD_4K,new ItemStack(Material.PISTON_BASE),SlimefunItems.GOLD_4K},new String[]{""String_Node_Str""},new Object[]{Arrays.asList(""String_Node_Str"")}).register(true,new AutonomousMachineHandler(){
    @Override public boolean onBlockDispense(    final BlockDispenseEvent e,    Block dispenser,    final Dispenser d,    Block block,    Block chest,    SlimefunItem machine){
      if (machine.getName().equalsIgnoreCase(""String_Node_Str"")) {
        e.setCancelled(true);
        if ((block.getType() == null || block.getType() == Material.AIR) && e.getItem().getType().isBlock()) {
          for (          String blockType : blockPlacerBlacklist) {
            if (e.getItem().getType().toString().equals(blockType)) {
              return false;
            }
          }
          SlimefunItem sfItem=SlimefunItem.getByItem(e.getItem());
          if (sfItem != null) {
            if (!SlimefunItem.blockhandler.containsKey(sfItem.getName())) {
              block.setType(e.getItem().getType());
              block.setData(e.getItem().getData().getData());
              BlockStorage.store(block,sfItem.getName());
              block.getWorld().playEffect(block.getLocation(),Effect.STEP_SOUND,e.getItem().getType());
              if (d.getInventory().containsAtLeast(e.getItem(),2))               d.getInventory().removeItem(new CustomItem(e.getItem(),1));
 else {
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                  @Override public void run(){
                    d.getInventory().removeItem(e.getItem());
                  }
                }
,2L);
              }
            }
          }
 else {
            block.setType(e.getItem().getType());
            block.setData(e.getItem().getData().getData());
            block.getWorld().playEffect(block.getLocation(),Effect.STEP_SOUND,e.getItem().getType());
            if (d.getInventory().containsAtLeast(e.getItem(),2))             d.getInventory().removeItem(new CustomItem(e.getItem(),1));
 else {
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  d.getInventory().removeItem(e.getItem());
                }
              }
,2L);
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.HOT_CHOCOLATE,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.CHOCOLATE_MILK,null,null,null,null,null,null,null,null},SlimefunItems.HOT_CHOCOLATE).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHRISTMAS_CAKE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.EGG),new ItemStack(Material.SUGAR),SlimefunItems.WHEAT_FLOUR,new ItemStack(Material.MILK_BUCKET),null,null,null,null,null},new CustomItem(SlimefunItems.FRUIT_CAKE,4)).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.SCROLL_OF_DIMENSIONAL_TELEPOSITION,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGICAL_BOOK_COVER,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.ENDER_LUMP_3,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.SCROLL_OF_DIMENSIONAL_TELEPOSITION,true)) {
        for (        Entity n : p.getNearbyEntities(10.0,10.0,10.0)) {
          if (n instanceof LivingEntity && !(n instanceof ArmorStand) && n.getUniqueId() != p.getUniqueId()) {
            float yaw=n.getLocation().getYaw() + 180.0F;
            if (yaw > 360.0F)             yaw=yaw - 360.0F;
            n.teleport(new Location(n.getWorld(),n.getLocation().getX(),n.getLocation().getY(),n.getLocation().getZ(),yaw,n.getLocation().getPitch()));
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CARAMEL,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.SUGAR),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.CARAMEL,4)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CARAMEL_APPLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.SUGAR),null,null,new ItemStack(Material.APPLE),null,null,new ItemStack(Material.STICK),null},new CustomItem(SlimefunItems.CARAMEL_APPLE,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHOCOLATE_APPLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new CustomItem(Material.INK_SACK,3),null,null,new ItemStack(Material.APPLE),null,null,new ItemStack(Material.STICK),null},new CustomItem(SlimefunItems.CARAMEL_APPLE,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.PRESENT,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.NAME_TAG),null,new CustomItem(new MaterialData(Material.WOOL,(byte)14),1),new CustomItem(new MaterialData(Material.WOOL,(byte)13),1),new CustomItem(new MaterialData(Material.WOOL,(byte)14),1),new CustomItem(new MaterialData(Material.WOOL,(byte)14),1),new CustomItem(new MaterialData(Material.WOOL,(byte)13),1),new CustomItem(new MaterialData(Material.WOOL,(byte)14),1)}).register(true);
  new SlimefunBow(SlimefunItems.EXPLOSIVE_BOW,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.STICK),new ItemStack(Material.SULPHUR),SlimefunItems.STAFF_FIRE,null,SlimefunItems.SULFATE,null,new ItemStack(Material.STICK),new ItemStack(Material.SULPHUR)}).register(true,new BowShootHandler(){
    @Override public boolean onHit(    EntityDamageByEntityEvent e,    LivingEntity n){
      if (SlimefunManager.isItemSimiliar(Variables.arrows.get(e.getDamager().getUniqueId()),SlimefunItems.EXPLOSIVE_BOW,true)) {
        Vector vector=n.getVelocity();
        vector.setY(0.6);
        n.setVelocity(vector);
        n.getWorld().createExplosion(n.getLocation(),0F);
        n.getWorld().playSound(n.getLocation(),Sound.ENTITY_GENERIC_EXPLODE,1F,1F);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunBow(SlimefunItems.ICY_BOW,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.STICK),new ItemStack(Material.ICE),SlimefunItems.STAFF_WATER,null,new ItemStack(Material.PACKED_ICE),null,new ItemStack(Material.STICK),new ItemStack(Material.ICE)}).register(true,new BowShootHandler(){
    @Override public boolean onHit(    EntityDamageByEntityEvent e,    LivingEntity n){
      if (SlimefunManager.isItemSimiliar(Variables.arrows.get(e.getDamager().getUniqueId()),SlimefunItems.ICY_BOW,true)) {
        n.getWorld().playEffect(n.getLocation(),Effect.STEP_SOUND,Material.ICE);
        n.getWorld().playEffect(n.getEyeLocation(),Effect.STEP_SOUND,Material.ICE);
        n.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,20 * 2,10));
        n.addPotionEffect(new PotionEffect(PotionEffectType.JUMP,20 * 2,-10));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.TOME_OF_KNOWLEDGE_SHARING,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.FEATHER),null,new ItemStack(Material.INK_SACK),SlimefunItems.MAGICAL_BOOK_COVER,new ItemStack(Material.GLASS_BOTTLE),null,new ItemStack(Material.BOOK_AND_QUILL),null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.TOME_OF_KNOWLEDGE_SHARING,true)) {
        List<String> lore=item.getItemMeta().getLore();
        lore.set(0,ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + p.getName()));
        lore.set(1,ChatColor.BLACK + ""String_Node_Str"" + p.getUniqueId());
        ItemMeta im=item.getItemMeta();
        im.setLore(lore);
        item.setItemMeta(im);
        p.setItemInHand(item);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_PLAYER_LEVELUP,1F,1F);
        return true;
      }
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.TOME_OF_KNOWLEDGE_SHARING,false)) {
        List<Research> researches=Research.getResearches(ChatColor.stripColor(item.getItemMeta().getLore().get(1)));
        for (        Research research : researches) {
          research.unlock(p,true);
        }
        PlayerInventory.consumeItemInHand(p);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.FLASK_OF_KNOWLEDGE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,null,null,SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.THIN_GLASS),SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,null},new CustomItem(SlimefunItems.FLASK_OF_KNOWLEDGE,8)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.FLASK_OF_KNOWLEDGE,true) && p.getLevel() >= 1) {
        p.setLevel(p.getLevel() - 1);
        p.getInventory().addItem(new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0));
        PlayerInventory.consumeItemInHand(p);
        PlayerInventory.update(p);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.REINFORCED_PLATE,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new CustomItem(SlimefunItems.REINFORCED_ALLOY_INGOT,8),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.HARDENED_GLASS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),SlimefunItems.REINFORCED_PLATE,new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS)},new CustomItem(SlimefunItems.HARDENED_GLASS,16)).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.SOLAR_ARRAY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS}).register(true);
  new SlimefunItem(Categories.EASTER,SlimefunItems.CARROT_PIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.CARROT_ITEM),new ItemStack(Material.EGG),null,null,null,null,null,null},new CustomItem(SlimefunItems.CARROT_PIE,2)).register(true);
  new SlimefunItem(Categories.EASTER,SlimefunItems.APPLE_PIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.APPLE),new ItemStack(Material.EGG),null,null,null,null,null,null},new CustomItem(SlimefunItems.APPLE_PIE,2)).register(true);
  new SlimefunItem(Categories.EASTER,SlimefunItems.EASTER_EGG,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new MaterialData(Material.INK_SACK,(byte)10).toItemStack(1),new ItemStack(Material.EGG),new MaterialData(Material.INK_SACK,(byte)13).toItemStack(1),null,null,null},new CustomItem(SlimefunItems.EASTER_EGG,2)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.EASTER_EGG,true)) {
        e.setCancelled(true);
        PlayerInventory.consumeItemInHand(e.getPlayer());
        FireworkShow.launchRandom(e.getPlayer(),2);
        List<ItemStack> gifts=new ArrayList<ItemStack>();
        for (int i=0; i < 2; i++) {
          gifts.add(new CustomItem(SlimefunItems.CARROT_PIE,4));
          gifts.add(new CustomItem(SlimefunItems.APPLE_PIE,4));
          gifts.add(new CustomItem(SlimefunItems.CARROT_JUICE,1));
        }
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        p.getWorld().dropItemNaturally(p.getLocation(),gifts.get(SlimefunStartup.randomize(gifts.size())));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.COOLING_UNIT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.ICE),new ItemStack(Material.ICE),new ItemStack(Material.ICE),SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_INGOT,new ItemStack(Material.ICE),new ItemStack(Material.ICE),new ItemStack(Material.ICE)}).register(true);
  new SlimefunBackpack(27,Categories.PORTABLE,SlimefunItems.COOLER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.COOLING_UNIT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.WITHER_PROOF_OBSIDIAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,new ItemStack(Material.OBSIDIAN),SlimefunItems.LEAD_INGOT,new ItemStack(Material.OBSIDIAN),SlimefunItems.HARDENED_GLASS,new ItemStack(Material.OBSIDIAN),SlimefunItems.LEAD_INGOT,new ItemStack(Material.OBSIDIAN),SlimefunItems.LEAD_INGOT},new CustomItem(SlimefunItems.WITHER_PROOF_OBSIDIAN,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ANCIENT_PEDESTAL,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.OBSIDIAN),SlimefunItems.GOLD_8K,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.STONE),null,new ItemStack(Material.OBSIDIAN),SlimefunItems.GOLD_8K,new ItemStack(Material.OBSIDIAN)},new CustomItem(SlimefunItems.ANCIENT_PEDESTAL,4)).register(true);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Item stack=AncientAltarListener.findItem(b);
      if (stack != null)       stack.removeMetadata(""String_Node_Str"",SlimefunStartup.instance);
      return true;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.ANCIENT_ALTAR,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.ENCHANTMENT_TABLE),null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.GOLD_8K,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.OBSIDIAN),SlimefunItems.GOLD_8K,new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.BIRTHDAY,new CustomItem(new MaterialData(Material.CAKE),""String_Node_Str""),""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.TORCH),null,new ItemStack(Material.SUGAR),new ItemStack(Material.CAKE),new ItemStack(Material.SUGAR),null,null,null}).register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.ENERGY_REGULATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SILVER_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SILVER_INGOT}).register(true,new BlockTicker(){
    @Override public boolean isSynchronized(){
      return false;
    }
    @Override public void uniqueTick(){
    }
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      EnergyNet.tick(b);
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      EnergyHologram.remove(b);
      return true;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.DUCT_TAPE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.ALUMINUM_DUST,SlimefunItems.ALUMINUM_DUST,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.WOOL),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.PAPER),new ItemStack(Material.PAPER),new ItemStack(Material.PAPER)},new CustomItem(SlimefunItems.DUCT_TAPE,2)).register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SMALL_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DURALUMIN_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.DURALUMIN_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.SULFATE,new ItemStack(Material.REDSTONE),SlimefunItems.DURALUMIN_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.DURALUMIN_INGOT}).registerDistibutingCapacitor(true,128);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.MEDIUM_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BILLON_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.BILLON_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.SMALL_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.BILLON_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.BILLON_INGOT}).registerDistibutingCapacitor(true,512);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.BIG_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.STEEL_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.MEDIUM_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.STEEL_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.STEEL_INGOT}).registerDistibutingCapacitor(true,1024);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.LARGE_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.REINFORCED_ALLOY_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.BIG_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.REINFORCED_ALLOY_INGOT}).registerDistibutingCapacitor(true,8192);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.CARBONADO_EDGED_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.CARBONADO,new ItemStack(Material.REDSTONE),SlimefunItems.LARGE_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.CARBONADO,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.CARBONADO}).registerDistibutingCapacitor(true,65536);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_INGOT,null,SlimefunItems.ALUMINUM_INGOT,null}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 2D;
      return 0D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_GENERATOR,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR,SlimefunItems.ALUMINUM_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 8;
      return 0D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_GENERATOR_2,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR_2,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.CARBONADO,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR_2,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR_2}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 32;
      return 0D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR_4,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_GENERATOR_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.SOLAR_GENERATOR_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.SOLAR_GENERATOR_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.SOLAR_GENERATOR_3}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 128;
      return 64D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new ChargingBench(Categories.ELECTRICITY,SlimefunItems.CHARGING_BENCH,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRO_MAGNET,null,SlimefunItems.BATTERY,new ItemStack(Material.WORKBENCH),SlimefunItems.BATTERY,null,SlimefunItems.SMALL_CAPACITOR,null}).registerChargeableBlock(true,128);
  new ElectricFurnace(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_FURNACE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.FURNACE),null,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 2;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,64);
  new ElectricFurnace(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_FURNACE_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_FURNACE,SlimefunItems.GILDED_IRON,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 3;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricFurnace(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_FURNACE_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_FURNACE_2,SlimefunItems.STEEL_INGOT,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 5;
    }
    @Override public int getSpeed(){
      return 4;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricGoldPan(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_GOLD_PAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_PAN,null,new ItemStack(Material.FLINT),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.FLINT),SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT}){
    @Override public int getEnergyConsumption(){
      return 1;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricGoldPan(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_GOLD_PAN_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_PAN,null,new ItemStack(Material.IRON_INGOT),SlimefunItems.ELECTRIC_GOLD_PAN,new ItemStack(Material.IRON_INGOT),SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT}){
    @Override public int getEnergyConsumption(){
      return 2;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricGoldPan(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_GOLD_PAN_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_PAN,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRIC_GOLD_PAN_2,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.COBALT_INGOT,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.COBALT_INGOT}){
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 10;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricDustWasher(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_DUST_WASHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WATER_BUCKET),null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_GOLD_PAN,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT}){
    @Override public int getEnergyConsumption(){
      return 3;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricDustWasher(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_DUST_WASHER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WATER_BUCKET),null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_DUST_WASHER,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT}){
    @Override public int getEnergyConsumption(){
      return 5;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricDustWasher(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_DUST_WASHER_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WATER_BUCKET),null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_DUST_WASHER_2,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.CORINTHIAN_BRONZE_INGOT}){
    @Override public int getEnergyConsumption(){
      return 15;
    }
    @Override public int getSpeed(){
      return 10;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricIngotFactory(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_FACTORY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.FLINT_AND_STEEL),null,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_DUST_WASHER,SlimefunItems.HEATING_COIL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 4;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new ElectricIngotFactory(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_FACTORY_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GILDED_IRON,new ItemStack(Material.FLINT_AND_STEEL),SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_INGOT_FACTORY,SlimefunItems.HEATING_COIL,SlimefunItems.BRASS_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.BRASS_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,256);
  new ElectricIngotFactory(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_FACTORY_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GILDED_IRON,new ItemStack(Material.FLINT_AND_STEEL),SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_INGOT_FACTORY_2,SlimefunItems.HEATING_COIL,SlimefunItems.BRASS_INGOT,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.BRASS_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 20;
    }
    @Override public int getSpeed(){
      return 8;
    }
  }
.registerChargeableBlock(true,512);
  new ElectrifiedCrucible(Categories.ELECTRICITY,SlimefunItems.ELECTRIFIED_CRUCIBLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.CRUCIBLE,SlimefunItems.LEAD_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.LEAD_INGOT}){
    @Override public int getEnergyConsumption(){
      return 24;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,1024);
  new ElectrifiedCrucible(Categories.ELECTRICITY,SlimefunItems.ELECTRIFIED_CRUCIBLE_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.ELECTRIFIED_CRUCIBLE,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.LEAD_INGOT}){
    @Override public int getEnergyConsumption(){
      return 40;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,1024);
  new ElectrifiedCrucible(Categories.ELECTRICITY,SlimefunItems.ELECTRIFIED_CRUCIBLE_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.ELECTRIFIED_CRUCIBLE_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.STEEL_PLATE,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_PLATE,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT}){
    @Override public int getEnergyConsumption(){
      return 60;
    }
    @Override public int getSpeed(){
      return 4;
    }
  }
.registerChargeableBlock(true,1024);
  new AContainer(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_ORE_GRINDER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.DIAMOND_PICKAXE),null,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.STONE_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 6;
    }
    @Override public int getSpeed(){
      return 1;
    }
    @Override public String getMachineIdentifier(){
      return ""String_Node_Str"";
    }
  }
.registerChargeableBlock(true,128);
  new AContainer(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_ORE_GRINDER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.DIAMOND_PICKAXE),null,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_ORE_GRINDER,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 15;
    }
    @Override public int getSpeed(){
      return 4;
    }
    @Override public String getMachineIdentifier(){
      return ""String_Node_Str"";
    }
  }
.registerChargeableBlock(true,512);
  new HeatedPressureChamber(Categories.ELECTRICITY,SlimefunItems.HEATED_PRESSURE_CHAMBER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,new ItemStack(Material.GLASS),SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.LEAD_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public int getEnergyConsumption(){
      return 5;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,128);
  new HeatedPressureChamber(Categories.ELECTRICITY,SlimefunItems.HEATED_PRESSURE_CHAMBER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATED_PRESSURE_CHAMBER,SlimefunItems.LEAD_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.REINFORCED_ALLOY_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public int getEnergyConsumption(){
      return 22;
    }
    @Override public int getSpeed(){
      return 5;
    }
  }
.registerChargeableBlock(true,256);
  new AContainer(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_PULVERIZER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRIC_ORE_GRINDER,null,SlimefunItems.LEAD_INGOT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.LEAD_INGOT}){
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.IRON_PICKAXE);
    }
    @Override public void registerDefaultRecipes(){
      registerRecipe(3,new ItemStack[]{SlimefunItems.ALUMINUM_INGOT},new ItemStack[]{SlimefunItems.ALUMINUM_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.COPPER_INGOT},new ItemStack[]{SlimefunItems.COPPER_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.GOLD_4K},new ItemStack[]{SlimefunItems.GOLD_DUST});
      registerRecipe(3,new ItemStack[]{new ItemStack(Material.IRON_INGOT)},new ItemStack[]{SlimefunItems.IRON_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.LEAD_INGOT},new ItemStack[]{SlimefunItems.LEAD_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.MAGNESIUM_INGOT},new ItemStack[]{SlimefunItems.MAGNESIUM_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.SILVER_INGOT},new ItemStack[]{SlimefunItems.SILVER_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.TIN_INGOT},new ItemStack[]{SlimefunItems.TIN_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.ZINC_INGOT},new ItemStack[]{SlimefunItems.ZINC_DUST});
    }
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 1;
    }
    @Override public String getMachineIdentifier(){
      return ""String_Node_Str"";
    }
  }
.registerChargeableBlock(true,512);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.COAL_GENERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HEATING_COIL,new ItemStack(Material.FURNACE),SlimefunItems.HEATING_COIL,SlimefunItems.NICKEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.NICKEL_INGOT,null,SlimefunItems.NICKEL_INGOT,null}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(8,new MaterialData(Material.COAL,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(8,new MaterialData(Material.COAL,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(80,new ItemStack(Material.COAL_BLOCK)));
      registerFuel(new MachineFuel(12,new ItemStack(Material.BLAZE_ROD)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG_2,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG_2,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)4).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)5).toItemStack(1)));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 8;
    }
  }
.registerUnrechargeableBlock(true,64);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.BIO_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HEATING_COIL,SlimefunItems.COMPOSTER,SlimefunItems.HEATING_COIL,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_BRASS_INGOT,null,SlimefunItems.ALUMINUM_BRASS_INGOT,null}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(2,new ItemStack(Material.ROTTEN_FLESH)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.SPIDER_EYE)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.BONE)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.APPLE)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.MELON)));
      registerFuel(new MachineFuel(27,new ItemStack(Material.MELON_BLOCK)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.PUMPKIN)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.PUMPKIN_SEEDS)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.MELON_SEEDS)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.WHEAT)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.SEEDS)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.CARROT_ITEM)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.POTATO_ITEM)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.SUGAR_CANE)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.NETHER_STALK)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.YELLOW_FLOWER)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.RED_ROSE)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.RED_MUSHROOM)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.BROWN_MUSHROOM)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.VINE)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.CACTUS)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.WATER_LILY)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES_2,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES_2,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)4).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)5).toItemStack(1)));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 4;
    }
  }
.registerUnrechargeableBlock(true,128);
  new AutoEnchanter(Categories.ELECTRICITY,SlimefunItems.AUTO_ENCHANTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.ENCHANTMENT_TABLE),null,SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN}).registerChargeableBlock(true,128);
  new AutoDisenchanter(Categories.ELECTRICITY,SlimefunItems.AUTO_DISENCHANTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.REDSTONE),new ItemStack(Material.ANVIL),new ItemStack(Material.REDSTONE),SlimefunItems.CARBONADO,SlimefunItems.AUTO_ENCHANTER,SlimefunItems.CARBONADO,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN}).registerChargeableBlock(true,128);
  new AutoAnvil(Categories.ELECTRICITY,SlimefunItems.AUTO_ANVIL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.ANVIL),null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT,new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK)}){
    @Override public int getRepairFactor(){
      return 10;
    }
    @Override public int getEnergyConsumption(){
      return 12;
    }
  }
.registerChargeableBlock(true,128);
  new AutoAnvil(Categories.ELECTRICITY,SlimefunItems.AUTO_ANVIL_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.AUTO_ANVIL,null,SlimefunItems.STEEL_PLATE,SlimefunItems.HEATING_COIL,SlimefunItems.STEEL_PLATE,new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK)}){
    @Override public int getRepairFactor(){
      return 4;
    }
    @Override public int getEnergyConsumption(){
      return 16;
    }
  }
.registerChargeableBlock(true,256);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.MULTIMETER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COPPER_INGOT,null,SlimefunItems.COPPER_INGOT,null,SlimefunItems.REDSTONE_ALLOY,null,null,SlimefunItems.GOLD_6K,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(e.getItem(),SlimefunItems.MULTIMETER,true)) {
        if (e.getClickedBlock() != null && ChargableBlock.isChargable(e.getClickedBlock())) {
          e.setCancelled(true);
          p.sendMessage(""String_Node_Str"");
          p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(ChargableBlock.getCharge(e.getClickedBlock())) + ""String_Node_Str""));
          p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(ChargableBlock.getMaxCharge(e.getClickedBlock())) + ""String_Node_Str""));
          p.sendMessage(""String_Node_Str"");
        }
        return true;
      }
      return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.PLASTIC_SHEET,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{null,null,null,null,SlimefunItems.BUCKET_OF_OIL,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ANDROID_MEMORY_CORE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BRASS_INGOT,new MaterialData(Material.STAINED_GLASS,(byte)1).toItemStack(1),SlimefunItems.BRASS_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.TIN_DUST,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BRASS_INGOT,new MaterialData(Material.STAINED_GLASS,(byte)1).toItemStack(1),SlimefunItems.BRASS_INGOT}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.STEEL_INGOT,SlimefunItems.ADVANCED_CIRCUIT_BOARD,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_INGOT}).registerChargeableBlock(true,16,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 0) {
        Slimefun.getGPSNetwork().updateTransmitter(b,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 1);
      }
 else       Slimefun.getGPSNetwork().updateTransmitter(b,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(b,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TRANSMITTER,SlimefunItems.BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER,SlimefunItems.BRONZE_INGOT,SlimefunItems.CARBON,SlimefunItems.BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER,SlimefunItems.BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER}).registerChargeableBlock(true,64,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 2) {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 4 + 100,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 3);
      }
 else {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 4 + 100,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      }
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 4 + 100,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TRANSMITTER_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.CARBONADO,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER_2}).registerChargeableBlock(true,256,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 10) {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 16 + 500,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 11);
      }
 else {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 16 + 500,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      }
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 16 + 500,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER_4,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TRANSMITTER_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.GPS_TRANSMITTER_3,SlimefunItems.NICKEL_INGOT,SlimefunItems.CARBONADO,SlimefunItems.NICKEL_INGOT,SlimefunItems.GPS_TRANSMITTER_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.GPS_TRANSMITTER_3}).registerChargeableBlock(true,1024,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 45) {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 64 + 800,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 46);
      }
 else {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 64 + 800,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      }
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 64 + 800,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_CONTROL_PANEL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.COBALT_INGOT,SlimefunItems.ADVANCED_CIRCUIT_BOARD,SlimefunItems.COBALT_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      try {
        Slimefun.getGPSNetwork().openTransmitterControlPanel(p);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_MARKER_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),SlimefunItems.BASIC_CIRCUIT_BOARD,new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),new ItemStack(Material.REDSTONE),SlimefunItems.REDSTONE_ALLOY,new ItemStack(Material.REDSTONE)}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_EMERGENCY_TRANSMITTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRO_MAGNET,null,null,SlimefunItems.GPS_TRANSMITTER,null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.PLASTIC_SHEET,SlimefunItems.COAL_GENERATOR,SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.CHEST),SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.NONE;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_MINER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.DIAMOND_PICKAXE),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_PICKAXE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.MINER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_FARMER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.DIAMOND_HOE),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_HOE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FARMER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_WOODCUTTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.DIAMOND_AXE),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_AXE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.WOODCUTTER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_FISHERMAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.FISHING_ROD),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.FISHING_ROD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FISHERMAN;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_BUTCHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER,null,new ItemStack(Material.DIAMOND_SWORD),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_SWORD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FIGHTER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.ANDROID_INTERFACE_ITEMS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.BASIC_CIRCUIT_BOARD,new MaterialData(Material.STAINED_GLASS,(byte)11).toItemStack(1),SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET}).register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.ANDROID_INTERFACE_FUEL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,new MaterialData(Material.STAINED_GLASS,(byte)14).toItemStack(1),SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET}).register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.PLASTIC_SHEET,SlimefunItems.COMBUSTION_REACTOR,SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.CHEST),SlimefunItems.PLASTIC_SHEET,SlimefunItems.POWER_CRYSTAL,SlimefunItems.PLASTIC_SHEET}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.NONE;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2_FISHERMAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.FISHING_ROD),SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.FISHING_ROD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FISHERMAN;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2_BUTCHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER,null,new ItemStack(Material.DIAMOND_SWORD),SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.DIAMOND_SWORD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FIGHTER;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2_FARMER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER,null,new ItemStack(Material.DIAMOND_HOE),SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.DIAMOND_HOE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.ADVANCED_FARMER;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.PLASTIC_SHEET,SlimefunItems.NUCLEAR_REACTOR,SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.CHEST),SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BLISTERING_INGOT_3}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.NONE;
    }
    @Override public float getFuelEfficiency(){
      return 1F;
    }
    @Override public int getTier(){
      return 3;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_3_FISHERMAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.FISHING_ROD),SlimefunItems.PROGRAMMABLE_ANDROID_3,new ItemStack(Material.FISHING_ROD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FISHERMAN;
    }
    @Override public float getFuelEfficiency(){
      return 1F;
    }
    @Override public int getTier(){
      return 3;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_3_BUTCHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER_3,null,new ItemStack(Material.DIAMOND_SWORD),SlimefunItems.PROGRAMMABLE_ANDROID_3,new ItemStack(Material.DIAMOND_SWORD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FIGHTER;
    }
    @Override public float getFuelEfficiency(){
      return 1F;
    }
    @Override public int getTier(){
      return 3;
    }
  }
.register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.BLANK_RUNE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.OBSIDIAN),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE)}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_AIR,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.FEATHER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.FEATHER),new ItemStack(Material.GHAST_TEAR),SlimefunItems.BLANK_RUNE,new ItemStack(Material.GHAST_TEAR),new ItemStack(Material.FEATHER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.FEATHER)},new CustomItem(SlimefunItems.RUNE_AIR,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_EARTH,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.DIRT),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE),new ItemStack(Material.OBSIDIAN),SlimefunItems.BLANK_RUNE,new ItemStack(Material.OBSIDIAN),new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.DIRT)},new CustomItem(SlimefunItems.RUNE_EARTH,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_FIRE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.FIREBALL),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.FIREBALL),new ItemStack(Material.BLAZE_POWDER),SlimefunItems.RUNE_EARTH,new ItemStack(Material.FLINT_AND_STEEL),new ItemStack(Material.FIREBALL),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.FIREBALL)},new CustomItem(SlimefunItems.RUNE_FIRE,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_WATER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.RAW_FISH),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.WATER_BUCKET),new ItemStack(Material.SAND),SlimefunItems.BLANK_RUNE,new ItemStack(Material.SAND),new ItemStack(Material.WATER_BUCKET),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.RAW_FISH)},new CustomItem(SlimefunItems.RUNE_WATER,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_ENDER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_3,new ItemStack(Material.ENDER_PEARL),new ItemStack(Material.EYE_OF_ENDER),SlimefunItems.BLANK_RUNE,new ItemStack(Material.EYE_OF_ENDER),new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_3,new ItemStack(Material.ENDER_PEARL)},new CustomItem(SlimefunItems.RUNE_ENDER,6)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_RAINBOW,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.MAGIC_LUMP_3,new MaterialData(Material.INK_SACK,(byte)9).toItemStack(1),new ItemStack(Material.WOOL),SlimefunItems.RUNE_ENDER,new ItemStack(Material.WOOL),new MaterialData(Material.INK_SACK,(byte)11).toItemStack(1),SlimefunItems.ENDER_LUMP_3,new MaterialData(Material.INK_SACK,(byte)10).toItemStack(1)}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFERNAL_BONEMEAL,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.NETHER_STALK),SlimefunItems.RUNE_EARTH,new ItemStack(Material.NETHER_STALK),SlimefunItems.MAGIC_LUMP_2,new MaterialData(Material.INK_SACK,(byte)15).toItemStack(1),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.NETHER_STALK),new ItemStack(Material.BLAZE_POWDER),new ItemStack(Material.NETHER_STALK)},new CustomItem(SlimefunItems.INFERNAL_BONEMEAL,8)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(e.getItem(),SlimefunItems.INFERNAL_BONEMEAL,true)) {
        if (e.getClickedBlock() != null && e.getClickedBlock().getType().equals(Material.NETHER_WARTS)) {
          if (e.getClickedBlock().getData() < 3) {
            e.getClickedBlock().setData((byte)(e.getClickedBlock().getData() + 1));
            e.getClickedBlock().getWorld().playEffect(e.getClickedBlock().getLocation(),Effect.STEP_SOUND,Material.REDSTONE_BLOCK);
            PlayerInventory.consumeItemInHand(p);
          }
        }
        return true;
      }
      return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.ELYTRA_SCALE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_AIR,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_ENDER,new ItemStack(Material.FEATHER),SlimefunItems.RUNE_ENDER,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_AIR,SlimefunItems.ENDER_LUMP_3}).register(true);
  new VanillaItem(Categories.MAGIC,SlimefunItems.ELYTRA,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.ELYTRA_SCALE,SlimefunItems.RUNE_AIR,SlimefunItems.ELYTRA_SCALE,SlimefunItems.RUNE_AIR,new ItemStack(Material.LEATHER_CHESTPLATE),SlimefunItems.RUNE_AIR,SlimefunItems.ELYTRA_SCALE,SlimefunItems.RUNE_AIR,SlimefunItems.ELYTRA_SCALE}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFUSED_ELYTRA,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA_SCALE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA_SCALE,SlimefunItems.FLASK_OF_KNOWLEDGE}).register(true);
  new SoulboundItem(Categories.MAGIC,SlimefunItems.SOULBOUND_ELYTRA,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA_SCALE,SlimefunItems.ELYTRA,SlimefunItems.ELYTRA_SCALE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.FLASK_OF_KNOWLEDGE}).register(true);
  RainbowTicker rainbow=new RainbowTicker();
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_WOOL,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL)},new CustomItem(SlimefunItems.RAINBOW_WOOL,8)).register(true,rainbow);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_GLASS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS)},new CustomItem(SlimefunItems.RAINBOW_GLASS,8)).register(true,rainbow);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_GLASS_PANE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE)},new CustomItem(SlimefunItems.RAINBOW_GLASS_PANE,8)).register(true,rainbow);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_CLAY,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY)},new CustomItem(SlimefunItems.RAINBOW_CLAY,8)).register(true,rainbow);
  RainbowTicker xmas=new RainbowTicker(13,14);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_WOOL_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.WOOL),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.WOOL),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_WOOL_XMAS,2)).register(true,xmas);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_GLASS_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_XMAS,2)).register(true,xmas);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_GLASS_PANE_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS_PANE),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS_PANE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_PANE_XMAS,2)).register(true,xmas);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_CLAY_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_CLAY),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_CLAY),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_CLAY_XMAS,2)).register(true,xmas);
  RainbowTicker valentine=new RainbowTicker(2,6,10);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_WOOL_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.WOOL),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.WOOL),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_WOOL_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_GLASS_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_GLASS_PANE_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS_PANE),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS_PANE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_PANE_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_CLAY_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_CLAY),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_CLAY),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_CLAY_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.WITHER_PROOF_GLASS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.LEAD_INGOT,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.HARDENED_GLASS,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.LEAD_INGOT,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.LEAD_INGOT},new CustomItem(SlimefunItems.WITHER_PROOF_GLASS,4)).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_GEO_SCANNER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,null,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRO_MAGNET}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      try {
        Slimefun.getGPSNetwork().scanChunk(p,e.getClickedBlock().getChunk());
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      return true;
    }
  }
);
  new OilPump(Categories.GPS,SlimefunItems.OIL_PUMP,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_INGOT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_INGOT,null,new ItemStack(Material.BUCKET),null}){
    @Override public int getEnergyConsumption(){
      return 14;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,200);
  new NetherDrill(Categories.GPS,SlimefunItems.NETHER_DRILL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.LEAD_INGOT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.OIL_PUMP,SlimefunItems.REINFORCED_PLATE,SlimefunItems.LEAD_INGOT,SlimefunItems.BIG_CAPACITOR,SlimefunItems.LEAD_INGOT}){
    @Override public int getSpeed(){
      return 1;
    }
    @Override public int getEnergyConsumption(){
      return 51;
    }
  }
.registerChargeableBlock(true,1024);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BUCKET_OF_OIL,""String_Node_Str"",new RecipeType(SlimefunItems.OIL_PUMP),new ItemStack[]{null,null,null,null,new ItemStack(Material.BUCKET),null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BUCKET_OF_FUEL,""String_Node_Str"",new RecipeType(SlimefunItems.REFINERY),new ItemStack[]{null,null,null,null,SlimefunItems.BUCKET_OF_OIL,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.NETHER_ICE,""String_Node_Str"",new RecipeType(SlimefunItems.NETHER_DRILL),new ItemStack[]{null,null,null,null,null,null,null,null}).register(true);
  new Refinery(Categories.ELECTRICITY,SlimefunItems.REFINERY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_GLASS,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.HARDENED_GLASS,new ItemStack(Material.PISTON_BASE),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.PISTON_BASE)}){
    @Override public int getEnergyConsumption(){
      return 16;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.LAVA_GENERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_16K,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(40,new ItemStack(Material.LAVA_BUCKET)));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 10;
    }
  }
.registerUnrechargeableBlock(true,512);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.COMBUSTION_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.STEEL_INGOT,SlimefunItems.HEATING_COIL}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(30,SlimefunItems.BUCKET_OF_OIL));
      registerFuel(new MachineFuel(90,SlimefunItems.BUCKET_OF_FUEL));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 12;
    }
  }
.registerUnrechargeableBlock(true,256);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TELEPORTER_PYLON,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ZINC_INGOT,new ItemStack(Material.GLASS),SlimefunItems.ZINC_INGOT,new ItemStack(Material.GLASS),SlimefunItems.HEATING_COIL,new ItemStack(Material.GLASS),SlimefunItems.ZINC_INGOT,new ItemStack(Material.GLASS),SlimefunItems.ZINC_INGOT},new CustomItem(SlimefunItems.GPS_TELEPORTER_PYLON,8)).register(true,new RainbowTicker(9,10));
  new Teleporter(Categories.GPS,SlimefunItems.GPS_TELEPORTATION_MATRIX,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TELEPORTER_PYLON,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.GPS_TELEPORTER_PYLON,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.GPS_CONTROL_PANEL,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.GPS_TELEPORTER_PYLON,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.GPS_TELEPORTER_PYLON}){
    @Override public void onInteract(    final Player p,    final Block b) throws Exception {
      GPSNetwork.openTeleporterGUI(p,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),b,Slimefun.getGPSNetwork().getNetworkComplexity(UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str""))));
    }
  }
.register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_ACTIVATION_DEVICE_SHARED,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.STONE_PLATE),null,new ItemStack(Material.REDSTONE),SlimefunItems.GPS_TRANSMITTER,new ItemStack(Material.REDSTONE),SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_ACTIVATION_DEVICE_PERSONAL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.LEAD_INGOT,null,SlimefunItems.COBALT_INGOT,SlimefunItems.GPS_ACTIVATION_DEVICE_SHARED,SlimefunItems.COBALT_INGOT,null,SlimefunItems.LEAD_INGOT,null}).register(true);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      return BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString());
    }
  }
);
  new SlimefunItem(Categories.TECH,SlimefunItems.HOLOGRAM_PROJECTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.POWER_CRYSTAL,null,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_BRASS_INGOT,null,SlimefunItems.ALUMINUM_BRASS_INGOT,null},new CustomItem(SlimefunItems.HOLOGRAM_PROJECTOR,3)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      if (BlockStorage.getBlockInfo(e.getClickedBlock(),""String_Node_Str"").equals(p.getUniqueId().toString())) {
        Projector.openEditor(p,e.getClickedBlock());
      }
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      Projector.getArmorStand(b);
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      if (BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString())) {
        Projector.getArmorStand(b).remove();
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFUSED_HOPPER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.OBSIDIAN),SlimefunItems.RUNE_EARTH,new ItemStack(Material.HOPPER),SlimefunItems.RUNE_ENDER,SlimefunItems.INFUSED_MAGNET,SlimefunItems.RUNE_ENDER,new ItemStack(Material.HOPPER),SlimefunItems.RUNE_EARTH,new ItemStack(Material.OBSIDIAN)}).register(true,new BlockTicker(){
    @Override public void uniqueTick(){
    }
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      if (b.getType() != Material.HOPPER) {
        return;
      }
      ArmorStand hologram=InfusedHopper.getArmorStand(b,true);
      boolean sound=false;
      for (      Entity n : hologram.getNearbyEntities(3.5D,3.5D,3.5D)) {
        if (n instanceof Item && !n.hasMetadata(""String_Node_Str"") && n.getLocation().distance(hologram.getLocation()) > 0.4D) {
          n.setVelocity(new Vector(0,0.1,0));
          n.teleport(hologram);
          sound=true;
        }
      }
      if (sound)       b.getWorld().playSound(b.getLocation(),Sound.ENTITY_ENDERMEN_TELEPORT,5F,2F);
    }
    @Override public boolean isSynchronized(){
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      InfusedHopper.getArmorStand(b,true);
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      final ArmorStand hologram=InfusedHopper.getArmorStand(b,false);
      if (hologram != null) {
        hologram.remove();
      }
      return true;
    }
  }
);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BLISTERING_INGOT,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.GOLD_24K,SlimefunItems.URANIUM,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BLISTERING_INGOT_2,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.BLISTERING_INGOT,SlimefunItems.CARBONADO,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BLISTERING_INGOT_3,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.BLISTERING_INGOT_2,new ItemStack(Material.NETHER_STAR),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ENRICHED_NETHER_ICE,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.NETHER_ICE,SlimefunItems.PLUTONIUM,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.ELEVATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.STONE_PLATE),null,new ItemStack(Material.PISTON_BASE),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.PISTON_BASE),SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT},new CustomItem(SlimefunItems.ELEVATOR,2)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    final ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null)       return false;
      if (!item.getName().equals(""String_Node_Str""))       return false;
      if (BlockStorage.getBlockInfo(e.getClickedBlock(),""String_Node_Str"").equals(p.getUniqueId().toString()))       Elevator.openEditor(p,e.getClickedBlock());
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      return true;
    }
  }
);
  new FoodFabricator(Categories.ELECTRICITY,SlimefunItems.FOOD_FABRICATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BILLON_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.CAN,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.CAN,null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new FoodFabricator(Categories.ELECTRICITY,SlimefunItems.FOOD_FABRICATOR_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.FOOD_FABRICATOR,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.ELECTRO_MAGNET,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 24;
    }
    @Override public int getSpeed(){
      return 6;
    }
  }
.registerChargeableBlock(true,512);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD2,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.WHEAT),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD3,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.CARROT_ITEM),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD4,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.POTATO_ITEM),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD5,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.SEEDS),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD6,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.BEETROOT),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD7,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.MELON),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD8,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.APPLE),null,null,null,null,null,null,null}).register(true);
  new AutoBreeder(Categories.ELECTRICITY,SlimefunItems.AUTO_BREEDER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_18K,SlimefunItems.CAN,SlimefunItems.GOLD_18K,SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.HAY_BLOCK),SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.FOOD_FABRICATOR,SlimefunItems.LEAD_INGOT}).registerChargeableBlock(true,1024);
  new AnimalGrowthAccelerator(Categories.ELECTRICITY,SlimefunItems.ANIMAL_GROWTH_ACCELERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ORGANIC_FOOD2,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.AUTO_BREEDER,SlimefunItems.REINFORCED_ALLOY_INGOT}).registerChargeableBlock(true,1024);
  new XPCollector(Categories.ELECTRICITY,SlimefunItems.XP_COLLECTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.AUTO_ENCHANTER,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_BRONZE_INGOT}).registerChargeableBlock(true,1024);
  new FoodComposter(Categories.ELECTRICITY,SlimefunItems.FOOD_COMPOSTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.FOOD_FABRICATOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.CAN,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.CAN,null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 8;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new FoodComposter(Categories.ELECTRICITY,SlimefunItems.FOOD_COMPOSTER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.FOOD_COMPOSTER,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.ELECTRO_MAGNET,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 26;
    }
    @Override public int getSpeed(){
      return 10;
    }
  }
.registerChargeableBlock(true,256);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER2,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD2,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER3,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD3,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER4,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD4,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER5,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD5,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER6,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD6,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER7,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD7,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER8,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD8,null,null,null,null,null,null,null,null}).register(true);
  new CropGrowthAccelerator(Categories.ELECTRICITY,SlimefunItems.CROP_GROWTH_ACCELERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.PROGRAMMABLE_ANDROID_FARMER,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ANIMAL_GROWTH_ACCELERATOR,SlimefunItems.ELECTRO_MAGNET}){
    @Override public int getEnergyConsumption(){
      return 25;
    }
    @Override public int getRadius(){
      return 3;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,1024);
  new CropGrowthAccelerator(Categories.ELECTRICITY,SlimefunItems.CROP_GROWTH_ACCELERATOR_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CROP_GROWTH_ACCELERATOR,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ADVANCED_CIRCUIT_BOARD,SlimefunItems.ELECTRO_MAGNET}){
    @Override public int getEnergyConsumption(){
      return 30;
    }
    @Override public int getRadius(){
      return 4;
    }
    @Override public int getSpeed(){
      return 4;
    }
  }
.registerChargeableBlock(true,1024);
  new Freezer(Categories.ELECTRICITY,SlimefunItems.FREEZER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.SILVER_INGOT,null,SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.PACKED_ICE),SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.COOLING_UNIT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.COOLING_UNIT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 9;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new Freezer(Categories.ELECTRICITY,SlimefunItems.FREEZER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.SILVER_INGOT,null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.FREEZER,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.COOLING_UNIT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.COOLING_UNIT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 15;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,256);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.REACTOR_COOLANT_CELL,""String_Node_Str"",new RecipeType(SlimefunItems.FREEZER),new ItemStack[]{new ItemStack(Material.PACKED_ICE),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.NETHER_ICE_COOLANT_CELL,""String_Node_Str"",new RecipeType(SlimefunItems.HEATED_PRESSURE_CHAMBER),new ItemStack[]{SlimefunItems.ENRICHED_NETHER_ICE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.NEPTUNIUM,""String_Node_Str"",new RecipeType(SlimefunItems.NUCLEAR_REACTOR),new ItemStack[]{SlimefunItems.URANIUM,null,null,null,null,null,null,null,null}).register(true);
  SlimefunItem.setRadioactive(SlimefunItems.NEPTUNIUM);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.PLUTONIUM,""String_Node_Str"",new RecipeType(SlimefunItems.NUCLEAR_REACTOR),new ItemStack[]{SlimefunItems.NEPTUNIUM,null,null,null,null,null,null,null,null}).register(true);
  SlimefunItem.setRadioactive(SlimefunItems.PLUTONIUM);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BOOSTED_URANIUM,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.PLUTONIUM,SlimefunItems.URANIUM,null,null,null,null,null,null,null}).register(true);
  SlimefunItem.setRadioactive(SlimefunItems.BOOSTED_URANIUM);
  new AReactor(Categories.ELECTRICITY,SlimefunItems.NUCLEAR_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.CARBONADO_EDGED_CAPACITOR,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.REINFORCED_PLATE,SlimefunItems.COOLING_UNIT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.LEAD_INGOT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.LEAD_INGOT}){
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(1200,SlimefunItems.URANIUM,SlimefunItems.NEPTUNIUM));
      registerFuel(new MachineFuel(600,SlimefunItems.NEPTUNIUM,SlimefunItems.PLUTONIUM));
      registerFuel(new MachineFuel(1500,SlimefunItems.BOOSTED_URANIUM,null));
    }
    @Override public int getEnergyProduction(){
      return 250;
    }
    @Override public void extraTick(    Location l){
    }
    @Override public ItemStack getProgressBar(){
      try {
        return CustomSkull.getItem(""String_Node_Str"");
      }
 catch (      Exception e) {
        return new ItemStack(Material.BLAZE_POWDER);
      }
    }
    @Override public ItemStack getCoolant(){
      return SlimefunItems.REACTOR_COOLANT_CELL;
    }
  }
.registerChargeableBlock(true,16384);
  new AReactor(Categories.ELECTRICITY,SlimefunItems.NETHERSTAR_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BOOSTED_URANIUM,SlimefunItems.CARBONADO_EDGED_CAPACITOR,SlimefunItems.BOOSTED_URANIUM,SlimefunItems.REINFORCED_PLATE,new ItemStack(Material.NETHER_STAR),SlimefunItems.REINFORCED_PLATE,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.CORINTHIAN_BRONZE_INGOT}){
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(1800,new ItemStack(Material.NETHER_STAR)));
    }
    @Override public int getEnergyProduction(){
      return 512;
    }
    @Override public void extraTick(    final Location l){
      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
        @Override public void run(){
          for (          Entity entity : ReactorHologram.getArmorStand(l).getNearbyEntities(5,5,5)) {
            if (entity instanceof LivingEntity) {
              ((LivingEntity)entity).addPotionEffect(new PotionEffect(PotionEffectType.WITHER,60,1));
            }
          }
        }
      }
,0);
    }
    @Override public ItemStack getCoolant(){
      return SlimefunItems.NETHER_ICE_COOLANT_CELL;
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.NETHER_STAR);
    }
  }
.registerChargeableBlock(true,32768);
  new SlimefunItem(Categories.CARGO,SlimefunItems.CARGO_MOTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_GLASS,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HARDENED_GLASS,SlimefunItems.SILVER_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.SILVER_INGOT,SlimefunItems.HARDENED_GLASS,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HARDENED_GLASS},new CustomItem(SlimefunItems.CARGO_MOTOR,4)).register(true);
  new SlimefunItem(Categories.CARGO,SlimefunItems.CARGO_MANAGER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.HOLOGRAM_PROJECTOR,null,SlimefunItems.REINFORCED_PLATE,SlimefunItems.CARGO_MOTOR,SlimefunItems.REINFORCED_PLATE,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.ALUMINUM_BRONZE_INGOT}).register(true,new BlockTicker(){
    @Override public void uniqueTick(){
    }
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      CargoNet.tick(b);
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      if (BlockStorage.getBlockInfo(e.getClickedBlock(),""String_Node_Str"") == null) {
        BlockStorage.addBlockInfo(e.getClickedBlock(),""String_Node_Str"",""String_Node_Str"");
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
 else {
        BlockStorage.addBlockInfo(e.getClickedBlock(),""String_Node_Str"",null);
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      CargoHologram.remove(b);
      return true;
    }
  }
);
  new SlimefunItem(Categories.CARGO,SlimefunItems.CARGO_NODE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BRONZE_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.BRONZE_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.CARGO_MOTOR,SlimefunItems.SILVER_INGOT,SlimefunItems.BRONZE_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.BRONZE_INGOT},new CustomItem(SlimefunItems.CARGO_NODE,4)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    final ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null)       return false;
      if (!item.getName().equals(""String_Node_Str""))       return false;
      if (CargoNet.isConnected(e.getClickedBlock())) {
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
 else {
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
      return true;
    }
  }
);
  new CargoInputNode(Categories.CARGO,SlimefunItems.CARGO_INPUT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.HOPPER),null,SlimefunItems.BILLON_INGOT,SlimefunItems.CARGO_NODE,SlimefunItems.BILLON_INGOT,null,new ItemStack(Material.HOPPER),null},new CustomItem(SlimefunItems.CARGO_INPUT,2)).register(true);
  new CargoOutputNode(Categories.CARGO,SlimefunItems.CARGO_OUTPUT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.HOPPER),null,SlimefunItems.BRASS_INGOT,SlimefunItems.CARGO_NODE,SlimefunItems.BRASS_INGOT,null,new ItemStack(Material.HOPPER),null},new CustomItem(SlimefunItems.CARGO_OUTPUT,2)).register(true);
  new AdvancedCargoOutputNode(Categories.CARGO,SlimefunItems.CARGO_OUTPUT_ADVANCED,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.CARGO_MOTOR,null,SlimefunItems.COBALT_INGOT,SlimefunItems.CARGO_OUTPUT,SlimefunItems.COBALT_INGOT,null,SlimefunItems.CARGO_MOTOR,null},new CustomItem(SlimefunItems.CARGO_OUTPUT_ADVANCED)).register(true);
  new AutomatedCraftingChamber(Categories.ELECTRICITY,SlimefunItems.AUTOMATED_CRAFTING_CHAMBER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WORKBENCH),null,SlimefunItems.CARGO_MOTOR,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.CARGO_MOTOR,null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public int getEnergyConsumption(){
      return 10;
    }
  }
.registerChargeableBlock(true,256);
  new ReactorAccessPort(Categories.ELECTRICITY,SlimefunItems.REACTOR_ACCESS_PORT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.LEAD_INGOT,SlimefunItems.CARGO_MOTOR,SlimefunItems.LEAD_INGOT,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new FluidPump(Categories.ELECTRICITY,SlimefunItems.FLUID_PUMP,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.MEDIUM_CAPACITOR,null,new ItemStack(Material.BUCKET),SlimefunItems.CARGO_MOTOR,new ItemStack(Material.BUCKET),null,SlimefunItems.OIL_PUMP,null}).registerChargeableBlock(true,512);
  new TrashCan(Categories.CARGO,SlimefunItems.TRASH_CAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.PORTABLE_DUSTBIN,null,SlimefunItems.LEAD_INGOT,SlimefunItems.CARGO_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.ALUMINUM_INGOT}).register(true);
  new CarbonPress(Categories.ELECTRICITY,SlimefunItems.CARBON_PRESS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBON,SlimefunItems.CARBON,SlimefunItems.HEATED_PRESSURE_CHAMBER,SlimefunItems.CARBON,SlimefunItems.HEATING_COIL,SlimefunItems.CARBONADO,SlimefunItems.HEATING_COIL}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 10;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new CarbonPress(Categories.ELECTRICITY,SlimefunItems.CARBON_PRESS_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO,SlimefunItems.CARBON,SlimefunItems.CARBON_PRESS,SlimefunItems.CARBON,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HEATING_COIL}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 25;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,512);
  new CarbonPress(Categories.ELECTRICITY,SlimefunItems.CARBON_PRESS_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.CARBON_PRESS_2,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HEATING_COIL}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 90;
    }
    @Override public int getSpeed(){
      return 15;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricSmeltery(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_SMELTERY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.NETHER_BRICK_ITEM),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.NETHER_BRICK_ITEM),SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_INGOT_FACTORY,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public int getEnergyConsumption(){
      return 10;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricSmeltery(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_SMELTERY_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_SMELTERY,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public int getEnergyConsumption(){
      return 20;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,1024);
  new WitherAssembler(Categories.ELECTRICITY,SlimefunItems.WITHER_ASSEMBLER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BLISTERING_INGOT_3,new ItemStack(Material.NETHER_STAR),SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.CARBONADO_EDGED_CAPACITOR}).registerChargeableBlock(true,4096);
}","public static void setupItems() throws Exception {
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.GRANDMAS_WALKING_STICK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.LOG),null,null,new ItemStack(Material.LOG),null,null,new ItemStack(Material.LOG),null}).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.GRANDPAS_WALKING_STICK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),new ItemStack(Material.LOG),new ItemStack(Material.LEATHER),null,new ItemStack(Material.LOG),null,null,new ItemStack(Material.LOG),null}).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.PORTABLE_CRAFTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.BOOK),new ItemStack(Material.WORKBENCH),null,null,null,null,null,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.PORTABLE_CRAFTER,true)) {
        p.openWorkbench(p.getLocation(),true);
        p.getWorld().playSound(p.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.FORTUNE_COOKIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.COOKIE),new ItemStack(Material.PAPER),null,null,null,null,null,null,null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ENHANCED_CRAFTING_TABLE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.WORKBENCH),null,null,new ItemStack(Material.DISPENSER),null},new ItemStack[0],Material.WORKBENCH).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          final Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (int j=0; j < inv.getContents().length; j++) {
              if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],true)) {
                if (SlimefunItem.getByItem(inputs.get(i)[j]) instanceof SlimefunBackpack) {
                  if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],false)) {
                    craft=false;
                    break;
                  }
                }
 else {
                  craft=false;
                  break;
                }
              }
            }
            if (craft) {
              final ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i)).clone();
              if (Slimefun.hasUnlocked(p,adding,true)) {
                Inventory inv2=Bukkit.createInventory(null,9,""String_Node_Str"");
                for (int j=0; j < inv.getContents().length; j++) {
                  inv2.setItem(j,inv.getContents()[j] != null ? (inv.getContents()[j].getAmount() > 1 ? new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1) : null) : null);
                }
                if (InvUtils.fits(inv2,adding)) {
                  SlimefunItem sfItem=SlimefunItem.getByItem(adding);
                  if (sfItem instanceof SlimefunBackpack) {
                    ItemStack backpack=null;
                    for (int j=0; j < 9; j++) {
                      if (inv.getContents()[j] != null) {
                        if (inv.getContents()[j].getType() != Material.AIR) {
                          if (SlimefunItem.getByItem(inv.getContents()[j]) instanceof SlimefunBackpack) {
                            backpack=inv.getContents()[j];
                            break;
                          }
                        }
                      }
                    }
                    String id=""String_Node_Str"";
                    int size=((SlimefunBackpack)sfItem).size;
                    if (backpack != null) {
                      for (                      String line : backpack.getItemMeta().getLore()) {
                        if (line.startsWith(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"")) && line.contains(""String_Node_Str"")) {
                          id=line.replace(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""),""String_Node_Str"");
                          Config cfg=new Config(new File(""String_Node_Str"" + id.split(""String_Node_Str"")[0] + ""String_Node_Str""));
                          cfg.setValue(""String_Node_Str"" + id.split(""String_Node_Str"")[1] + ""String_Node_Str"",size);
                          cfg.save();
                          break;
                        }
                      }
                    }
                    if (id.equals(""String_Node_Str"")) {
                      for (int line=0; line < adding.getItemMeta().getLore().size(); line++) {
                        if (adding.getItemMeta().getLore().get(line).equals(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
                          ItemMeta im=adding.getItemMeta();
                          List<String> lore=im.getLore();
                          lore.set(line,lore.get(line).replace(""String_Node_Str"",Backpacks.createBackpack(p,size)));
                          im.setLore(lore);
                          adding.setItemMeta(im);
                          break;
                        }
                      }
                    }
 else {
                      for (int line=0; line < adding.getItemMeta().getLore().size(); line++) {
                        if (adding.getItemMeta().getLore().get(line).equals(ChatColor.translateAlternateColorCodes('&',""String_Node_Str""))) {
                          ItemMeta im=adding.getItemMeta();
                          List<String> lore=im.getLore();
                          lore.set(line,lore.get(line).replace(""String_Node_Str"",id));
                          im.setLore(lore);
                          adding.setItemMeta(im);
                          break;
                        }
                      }
                    }
                  }
                  for (int j=0; j < 9; j++) {
                    if (inv.getContents()[j] != null) {
                      if (inv.getContents()[j].getType() != Material.AIR) {
                        if (inv.getContents()[j].getType().toString().endsWith(""String_Node_Str""))                         inv.setItem(j,new ItemStack(Material.BUCKET));
 else                         if (inv.getContents()[j].getAmount() > 1)                         inv.setItem(j,new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1));
 else                         inv.setItem(j,null);
                      }
                    }
                  }
                  p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                  inv.addItem(adding);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.PORTABLE_DUSTBIN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT)}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.PORTABLE_DUSTBIN,true)) {
        e.setCancelled(true);
        p.openInventory(Bukkit.createInventory(null,9 * 3,ChatColor.DARK_RED + ""String_Node_Str""));
        p.playSound(p.getLocation(),Sound.BLOCK_ANVIL_LAND,1,1);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.BEEF_JERKY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SALT,new ItemStack(Material.COOKED_BEEF),null,null,null,null,null,null,null},new String[]{""String_Node_Str""},new Integer[]{20}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.GRIND_STONE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.FENCE),null,null,new CustomItem(Material.DISPENSER,""String_Node_Str"",0),null},new ItemStack[]{new ItemStack(Material.BLAZE_ROD),new ItemStack(Material.BLAZE_POWDER,4),new ItemStack(Material.BONE),new CustomItem(Material.INK_SACK,15,4),new ItemStack(Material.GRAVEL),new ItemStack(Material.FLINT),new ItemStack(Material.NETHER_STALK),new CustomItem(SlimefunItems.MAGIC_LUMP_1,2),new ItemStack(Material.EYE_OF_ENDER),new CustomItem(SlimefunItems.ENDER_LUMP_1,2),new ItemStack(Material.COBBLESTONE),new ItemStack(Material.GRAVEL),new ItemStack(Material.WHEAT),SlimefunItems.WHEAT_FLOUR,new ItemStack(Material.DIRT),SlimefunItems.STONE_CHUNK},Material.FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                ItemStack output=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,output)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(output);
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ARMOR_FORGE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.ANVIL),null,null,new CustomItem(Material.DISPENSER,""String_Node_Str"",0),null},new ItemStack[]{},Material.ANVIL).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          final Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (int j=0; j < inv.getContents().length; j++) {
              if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],true)) {
                craft=false;
                break;
              }
            }
            if (craft) {
              final ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i));
              if (Slimefun.hasUnlocked(p,adding,true)) {
                if (InvUtils.fits(inv,adding)) {
                  for (                  ItemStack removing : inputs.get(i)) {
                    if (removing != null)                     inv.removeItem(removing);
                  }
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,1,1);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,1F,2F);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(p.getLocation(),Sound.BLOCK_ANVIL_USE,1F,2F);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ORE_CRUSHER,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.NETHER_FENCE),null,new ItemStack(Material.IRON_FENCE),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.IRON_FENCE)},new ItemStack[]{new ItemStack(Material.IRON_ORE),new CustomItem(SlimefunItems.IRON_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1),new ItemStack(Material.GOLD_ORE),new CustomItem(SlimefunItems.GOLD_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1),new ItemStack(Material.NETHERRACK,16),SlimefunItems.SULFATE,SlimefunItems.SIFTED_ORE,SlimefunItems.CRUSHED_ORE,SlimefunItems.CRUSHED_ORE,SlimefunItems.PULVERIZED_ORE,SlimefunItems.PURE_ORE_CLUSTER,SlimefunItems.TINY_URANIUM,new ItemStack(Material.COBBLESTONE,8),new ItemStack(Material.SAND,1),new ItemStack(Material.GOLD_INGOT),SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_4K,SlimefunItems.GOLD_DUST},Material.NETHER_FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(convert.getAmount());
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,1);
                  ;
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.COMPRESSOR,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.NETHER_FENCE),null,new ItemStack(Material.PISTON_BASE),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.PISTON_BASE)},new ItemStack[]{new ItemStack(Material.COAL,8),SlimefunItems.CARBON,new CustomItem(SlimefunItems.STEEL_INGOT,8),SlimefunItems.STEEL_PLATE,new CustomItem(SlimefunItems.CARBON,4),SlimefunItems.COMPRESSED_CARBON,new CustomItem(SlimefunItems.STONE_CHUNK,4),new ItemStack(Material.COBBLESTONE),new CustomItem(SlimefunItems.REINFORCED_ALLOY_INGOT,8),SlimefunItems.REINFORCED_PLATE},Material.NETHER_FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          final Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                final ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(convert.getAmount());
                  inv.removeItem(removing);
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_PISTON_EXTEND,1,1);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(p.getLocation(),Sound.BLOCK_PISTON_CONTRACT,1F,2F);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(p.getLocation(),Sound.BLOCK_PISTON_EXTEND,1F,2F);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGIC_LUMP_1,""String_Node_Str"",RecipeType.GRIND_STONE,new ItemStack[]{null,null,null,null,new ItemStack(Material.NETHER_STALK),null,null,null,null},new CustomItem(SlimefunItems.MAGIC_LUMP_1,2)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGIC_LUMP_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MAGIC_LUMP_1,SlimefunItems.MAGIC_LUMP_1,null,SlimefunItems.MAGIC_LUMP_1,SlimefunItems.MAGIC_LUMP_1,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGIC_LUMP_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MAGIC_LUMP_2,SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,SlimefunItems.MAGIC_LUMP_2,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ENDER_LUMP_1,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,null,new ItemStack(Material.EYE_OF_ENDER),null,null,null,null},new CustomItem(SlimefunItems.ENDER_LUMP_1,2)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ENDER_LUMP_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,SlimefunItems.ENDER_LUMP_1,null,SlimefunItems.ENDER_LUMP_1,SlimefunItems.ENDER_LUMP_1,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ENDER_LUMP_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ENDER_LUMP_2,SlimefunItems.ENDER_LUMP_2,null,SlimefunItems.ENDER_LUMP_2,SlimefunItems.ENDER_LUMP_2,null,null,null,null}).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.ENDER_BACKPACK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.LEATHER),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.LEATHER),new ItemStack(Material.CHEST),new ItemStack(Material.LEATHER),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.LEATHER),SlimefunItems.ENDER_LUMP_2}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.ENDER_BACKPACK,true)) {
        e.setCancelled(true);
        p.openInventory(p.getEnderChest());
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ENDERMEN_TELEPORT,1,1);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_HELMET,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.EYE_OF_ENDER),SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN),null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_CHESTPLATE,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,null,SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),new ItemStack(Material.EYE_OF_ENDER),new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_LEGGINGS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.EYE_OF_ENDER),SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN),new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.ENDER_BOOTS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,SlimefunItems.ENDER_LUMP_1,null,SlimefunItems.ENDER_LUMP_1,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.MAGIC_EYE_OF_ENDER,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.ENDER_PEARL),new ItemStack(Material.EYE_OF_ENDER),new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_2,new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_2}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MAGIC_EYE_OF_ENDER,true)) {
        e.getParentEvent().setCancelled(true);
        PlayerInventory.update(p);
        if (p.getInventory().getHelmet() != null && p.getInventory().getChestplate() != null && p.getInventory().getLeggings() != null && p.getInventory().getBoots() != null) {
          if (SlimefunManager.isItemSimiliar(p.getInventory().getHelmet(),SlimefunItems.ENDER_HELMET,true) && SlimefunManager.isItemSimiliar(p.getInventory().getChestplate(),SlimefunItems.ENDER_CHESTPLATE,true) && SlimefunManager.isItemSimiliar(p.getInventory().getLeggings(),SlimefunItems.ENDER_LEGGINGS,true)&& SlimefunManager.isItemSimiliar(p.getInventory().getBoots(),SlimefunItems.ENDER_BOOTS,true)) {
            p.launchProjectile(EnderPearl.class);
            p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ENDERMEN_TELEPORT,1,1);
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.MAGIC_SUGAR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.REDSTONE),new ItemStack(Material.GLOWSTONE_DUST),null,null,null,null,null,null},new String[]{""String_Node_Str""},new Integer[]{4}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MAGIC_SUGAR,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_GENERIC_EAT,1,1);
        p.addPotionEffect(new PotionEffect(PotionEffectType.SPEED,600,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.FOOD,SlimefunItems.MONSTER_JERKY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SALT,new ItemStack(Material.ROTTEN_FLESH),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_HELMET,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT),null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_CHESTPLATE,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_LEGGINGS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT)},new PotionEffect[]{new PotionEffect(PotionEffectType.SPEED,300,2)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_BOOTS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.IRON_INGOT)},new PotionEffect[]{new PotionEffect(PotionEffectType.JUMP,300,5)}).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.SWORD_OF_BEHEADING,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.EMERALD),null,SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.EMERALD),SlimefunItems.MAGIC_LUMP_2,null,new ItemStack(Material.BLAZE_ROD),null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Integer[]{70,40,25,40,40}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.MAGICAL_BOOK_COVER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.BOOK),SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.BASIC_CIRCUIT_BOARD,""String_Node_Str"",RecipeType.MOB_DROP,new ItemStack[]{null,null,null,null,new CustomItem(Material.MONSTER_EGG,""String_Node_Str"",99),null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.ADVANCED_CIRCUIT_BOARD,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.REDSTONE_BLOCK),SlimefunItems.BASIC_CIRCUIT_BOARD,new ItemStack(Material.REDSTONE_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK),new ItemStack(Material.LAPIS_BLOCK)}).register(true);
  new SlimefunGadget(Categories.TOOLS,SlimefunItems.GOLD_PAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.STONE),new ItemStack(Material.BOWL),new ItemStack(Material.STONE),new ItemStack(Material.STONE),new ItemStack(Material.STONE),new ItemStack(Material.STONE)},new ItemStack[]{new ItemStack(Material.GRAVEL),new ItemStack(Material.FLINT),new ItemStack(Material.GRAVEL),new ItemStack(Material.CLAY_BALL),new ItemStack(Material.GRAVEL),SlimefunItems.SIFTED_ORE},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Integer[]{47,28,15}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.GOLD_PAN,true)) {
        if (e.getClickedBlock() != null && e.getClickedBlock().getType() == Material.GRAVEL) {
          List<ItemStack> drops=new ArrayList<ItemStack>();
          if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))           drops.add(SlimefunItems.SIFTED_ORE);
 else           if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))           drops.add(new ItemStack(Material.CLAY_BALL));
 else           if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))           drops.add(new ItemStack(Material.FLINT));
          if (CSCoreLib.getLib().getProtectionManager().canBuild(p.getUniqueId(),e.getClickedBlock(),true)) {
            e.getClickedBlock().getWorld().playEffect(e.getClickedBlock().getLocation(),Effect.STEP_SOUND,e.getClickedBlock().getType());
            e.getClickedBlock().setType(Material.AIR);
            for (            ItemStack drop : drops) {
              e.getClickedBlock().getWorld().dropItemNaturally(e.getClickedBlock().getLocation(),drop);
            }
          }
        }
        e.setCancelled(true);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.SIFTED_ORE,""String_Node_Str"",RecipeType.GOLD_PAN,new ItemStack[]{new ItemStack(Material.GRAVEL),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.SMELTERY,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.NETHER_FENCE),null,new ItemStack(Material.NETHER_BRICK),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.NETHER_BRICK),null,new ItemStack(Material.FLINT_AND_STEEL),null},new ItemStack[]{SlimefunItems.IRON_DUST,new ItemStack(Material.IRON_INGOT)},Material.NETHER_FENCE,new String[]{""String_Node_Str""},new Integer[]{34}).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (            ItemStack converting : inputs.get(i)) {
              if (converting != null) {
                for (int j=0; j < inv.getContents().length; j++) {
                  if (j == (inv.getContents().length - 1) && !SlimefunManager.isItemSimiliar(converting,inv.getContents()[j],true,SlimefunManager.DataType.ALWAYS)) {
                    craft=false;
                    break;
                  }
 else                   if (SlimefunManager.isItemSimiliar(inv.getContents()[j],converting,true,SlimefunManager.DataType.ALWAYS))                   break;
                }
              }
            }
            if (craft) {
              ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i));
              if (Slimefun.hasUnlocked(p,adding,true)) {
                if (InvUtils.fits(inv,adding)) {
                  for (                  ItemStack removing : inputs.get(i)) {
                    if (removing != null)                     inv.removeItem(removing);
                  }
                  inv.addItem(adding);
                  p.getWorld().playSound(p.getLocation(),Sound.BLOCK_LAVA_POP,1,1);
                  p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                  Block raw_disp=b.getRelative(BlockFace.DOWN);
                  Hopper resf=null;
                  if (raw_disp.getRelative(BlockFace.EAST).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.EAST).getState();
                  }
 else                   if (raw_disp.getRelative(BlockFace.WEST).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.WEST).getState();
                  }
 else                   if (raw_disp.getRelative(BlockFace.NORTH).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.NORTH).getState();
                  }
 else                   if (raw_disp.getRelative(BlockFace.SOUTH).getState().getBlock().getType().name() == ""String_Node_Str"") {
                    resf=(Hopper)raw_disp.getRelative(BlockFace.SOUTH).getState();
                  }
                  boolean isIgniteChamberInstalled=false;
                  if (resf != null) {
                    if (resf.getCustomName().equalsIgnoreCase(SlimefunItems.IGNITION_CHAMBER.getItemMeta().getDisplayName()))                     isIgniteChamberInstalled=true;
                  }
                  if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str""))) {
                    if (isIgniteChamberInstalled) {
                      if (resf.getInventory().contains(Material.FLINT_AND_STEEL)) {
                        ItemStack item=resf.getInventory().getItem(resf.getInventory().first(Material.FLINT_AND_STEEL));
                        item.setDurability((short)(item.getDurability() + 1));
                        if (item.getDurability() >= 64) {
                          item.setAmount(0);
                          p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ITEM_BREAK,1,1);
                          item.setAmount(0);
                        }
                        p.getWorld().playSound(p.getLocation(),Sound.ITEM_FLINTANDSTEEL_USE,1,1);
                      }
 else {
                        Messages.local.sendTranslation(p,""String_Node_Str"",true);
                        BlockBreaker.nullify(b.getRelative(BlockFace.DOWN).getRelative(BlockFace.DOWN));
                      }
                    }
 else {
                      BlockBreaker.nullify(b.getRelative(BlockFace.DOWN).getRelative(BlockFace.DOWN));
                    }
                  }
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MACHINES_1,SlimefunItems.IGNITION_CHAMBER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_PLATE,SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.STEEL_PLATE,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_PLATE,SlimefunItems.ELECTRIC_MOTOR,null,new ItemStack(Material.HOPPER),null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.PRESSURE_CHAMBER,""String_Node_Str"",new ItemStack[]{new ItemStack(Material.STEP),new CustomItem(Material.DISPENSER,""String_Node_Str"",0),new ItemStack(Material.STEP),new ItemStack(Material.PISTON_BASE),new ItemStack(Material.GLASS),new ItemStack(Material.PISTON_BASE),new ItemStack(Material.PISTON_BASE),new ItemStack(Material.CAULDRON_ITEM),new ItemStack(Material.PISTON_BASE)},new ItemStack[]{SlimefunItems.CARBON_CHUNK,SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.RAW_CARBONADO,SlimefunItems.CARBONADO},Material.CAULDRON).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.UP).getRelative(BlockFace.UP).getState();
          final Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                final ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(convert.getAmount());
                  inv.removeItem(removing);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
                  p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                  p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                  p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(b.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
                      p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                      p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                      p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(b.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
                          p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                          p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                          p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                              p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                              p.getWorld().playEffect(b.getRelative(BlockFace.UP).getLocation(),Effect.SMOKE,4);
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.BATTERY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.REDSTONE),null,SlimefunItems.ZINC_INGOT,SlimefunItems.SULFATE,SlimefunItems.COPPER_INGOT,SlimefunItems.ZINC_INGOT,SlimefunItems.SULFATE,SlimefunItems.COPPER_INGOT}).register(true);
  SlimefunManager.registerArmorSet(new ItemStack(Material.GLOWSTONE),new ItemStack[]{SlimefunItems.GLOWSTONE_HELMET,SlimefunItems.GLOWSTONE_CHESTPLATE,SlimefunItems.GLOWSTONE_LEGGINGS,SlimefunItems.GLOWSTONE_BOOTS},""String_Node_Str"",new PotionEffect[][]{new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,0)}},true,true);
  SlimefunManager.registerArmorSet(SlimefunItems.DAMASCUS_STEEL_INGOT,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_HELMET,SlimefunItems.DAMASCUS_STEEL_CHESTPLATE,SlimefunItems.DAMASCUS_STEEL_LEGGINGS,SlimefunItems.DAMASCUS_STEEL_BOOTS},""String_Node_Str"",true,false);
  SlimefunManager.registerArmorSet(SlimefunItems.REINFORCED_ALLOY_INGOT,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_HELMET,SlimefunItems.REINFORCED_ALLOY_CHESTPLATE,SlimefunItems.REINFORCED_ALLOY_LEGGINGS,SlimefunItems.REINFORCED_ALLOY_BOOTS},""String_Node_Str"",true,false);
  SlimefunManager.registerArmorSet(new ItemStack(Material.CACTUS),new ItemStack[]{SlimefunItems.CACTUS_HELMET,SlimefunItems.CACTUS_CHESTPLATE,SlimefunItems.CACTUS_LEGGINGS,SlimefunItems.CACTUS_BOOTS},""String_Node_Str"",true,false);
  new Alloy(SlimefunItems.REINFORCED_ALLOY_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.SOLDER_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.GOLD_24K,null,null,null}).register(true);
  new Alloy(SlimefunItems.HARDENED_METAL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.ALUMINUM_BRONZE_INGOT,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.DAMASCUS_STEEL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.STEEL_INGOT,SlimefunItems.IRON_DUST,SlimefunItems.CARBON,new ItemStack(Material.IRON_INGOT),null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.STEEL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.IRON_DUST,SlimefunItems.CARBON,new ItemStack(Material.IRON_INGOT),null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.BRONZE_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.COPPER_DUST,SlimefunItems.TIN_DUST,SlimefunItems.COPPER_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.DURALUMIN_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.ALUMINUM_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.BILLON_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.SILVER_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.SILVER_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.BRASS_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.COPPER_DUST,SlimefunItems.ZINC_DUST,SlimefunItems.COPPER_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.ALUMINUM_BRASS_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.BRASS_INGOT,SlimefunItems.ALUMINUM_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.ALUMINUM_BRONZE_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.BRONZE_INGOT,SlimefunItems.ALUMINUM_INGOT,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.CORINTHIAN_BRONZE_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.SILVER_DUST,SlimefunItems.GOLD_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.BRONZE_INGOT,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.SOLDER_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.LEAD_DUST,SlimefunItems.TIN_DUST,SlimefunItems.LEAD_INGOT,null,null,null,null,null,null}).register(true);
  new ReplacingAlloy(SlimefunItems.SYNTHETIC_SAPPHIRE,""String_Node_Str"",new ItemStack[]{SlimefunItems.ALUMINUM_DUST,new ItemStack(Material.GLASS),new ItemStack(Material.THIN_GLASS),SlimefunItems.ALUMINUM_INGOT,new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),null,null,null,null}).register(true);
  new ReplacingItem(Categories.RESOURCES,SlimefunItems.SYNTHETIC_DIAMOND,""String_Node_Str"",RecipeType.PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.CARBON_CHUNK,null,null,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.RAW_CARBONADO,""String_Node_Str"",new ItemStack[]{SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.CARBON_CHUNK,new ItemStack(Material.THIN_GLASS),null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.NICKEL_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.IRON_DUST,new ItemStack(Material.IRON_INGOT),SlimefunItems.COPPER_DUST,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.COBALT_INGOT,""String_Node_Str"",new ItemStack[]{SlimefunItems.IRON_DUST,SlimefunItems.COPPER_DUST,SlimefunItems.NICKEL_INGOT,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.CARBONADO,""String_Node_Str"",RecipeType.PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.RAW_CARBONADO,null,null,null,null,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.FERROSILICON,""String_Node_Str"",new ItemStack[]{new ItemStack(Material.IRON_INGOT),SlimefunItems.IRON_DUST,SlimefunItems.SILICON,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.IRON_DUST,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{new ItemStack(Material.IRON_ORE),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.IRON_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1)).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_DUST,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{new ItemStack(Material.GOLD_ORE),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.GOLD_DUST,(Boolean)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") ? 2 : 1)).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.COPPER_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.TIN_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.LEAD_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SILVER_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ALUMINUM_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ZINC_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.MAGNESIUM_DUST,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.COPPER_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.COPPER_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.TIN_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.TIN_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SILVER_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.SILVER_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.LEAD_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.LEAD_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ALUMINUM_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.ALUMINUM_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ZINC_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.ZINC_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.MAGNESIUM_INGOT,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.MAGNESIUM_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SULFATE,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{new ItemStack(Material.NETHERRACK,16),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.CARBON,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new ItemStack(Material.COAL,8),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.WHEAT_FLOUR,""String_Node_Str"",RecipeType.GRIND_STONE,new ItemStack[]{null,null,null,null,new ItemStack(Material.WHEAT),null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.STEEL_PLATE,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new CustomItem(SlimefunItems.STEEL_INGOT,8),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.COMPRESSED_CARBON,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new CustomItem(SlimefunItems.CARBON,4),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.CARBON_CHUNK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,new ItemStack(Material.FLINT),SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON,SlimefunItems.COMPRESSED_CARBON}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.STEEL_THRUSTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.REDSTONE),null,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.STEEL_PLATE,new ItemStack(Material.FIREBALL),SlimefunItems.STEEL_PLATE}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.POWER_CRYSTAL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.REDSTONE),SlimefunItems.SYNTHETIC_SAPPHIRE,new ItemStack(Material.REDSTONE),SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.SYNTHETIC_SAPPHIRE,new ItemStack(Material.REDSTONE),SlimefunItems.SYNTHETIC_SAPPHIRE,new ItemStack(Material.REDSTONE)}).register(true);
  new Jetpack(SlimefunItems.DURALUMIN_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.DURALUMIN_INGOT,null,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.35).register(true);
  new Jetpack(SlimefunItems.SOLDER_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.SOLDER_INGOT,null,SlimefunItems.SOLDER_INGOT,SlimefunItems.SOLDER_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.SOLDER_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.4).register(true);
  new Jetpack(SlimefunItems.BILLON_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.BILLON_INGOT,null,SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BILLON_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.45).register(true);
  new Jetpack(SlimefunItems.STEEL_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.5).register(true);
  new Jetpack(SlimefunItems.DAMASCUS_STEEL_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.55).register(true);
  new Jetpack(SlimefunItems.REINFORCED_ALLOY_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.6).register(true);
  new Jetpack(SlimefunItems.CARBONADO_JETPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.CARBON_CHUNK,null,SlimefunItems.CARBON_CHUNK,SlimefunItems.CARBONADO,SlimefunItems.POWER_CRYSTAL,SlimefunItems.CARBONADO,SlimefunItems.STEEL_THRUSTER,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.7).register(true);
  new SlimefunItem(Categories.TECH,SlimefunItems.PARACHUTE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CHAIN,null,SlimefunItems.CHAIN,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.CHAIN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,null},new CustomItem(SlimefunItems.CHAIN,8)).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.HOOK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null,null,null}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.GRAPPLING_HOOK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.HOOK,SlimefunItems.HOOK,null,SlimefunItems.CHAIN,SlimefunItems.HOOK,SlimefunItems.CHAIN,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.GRAPPLING_HOOK,true)) {
        if (e.getClickedBlock() == null && !Variables.jump.containsKey(p.getUniqueId())) {
          Variables.jump.put(p.getUniqueId(),p.getItemInHand().getType() != Material.SHEARS);
          e.setCancelled(true);
          if (p.getItemInHand().getType() == Material.LEASH)           PlayerInventory.consumeItemInHand(p);
          Vector direction=p.getEyeLocation().getDirection().multiply(2.0);
          Projectile projectile=p.getWorld().spawn(p.getEyeLocation().add(direction.getX(),direction.getY(),direction.getZ()),Arrow.class);
          projectile.setShooter(p);
          projectile.setVelocity(direction);
          Arrow arrow=(Arrow)projectile;
          Bat b=(Bat)p.getWorld().spawnEntity(p.getLocation(),EntityType.BAT);
          b.setCanPickupItems(false);
          b.addPotionEffect(new PotionEffect(PotionEffectType.INVISIBILITY,100000,100000));
          b.setLeashHolder(arrow);
          Variables.damage.put(p.getUniqueId(),true);
          Variables.remove.put(p.getUniqueId(),new Entity[]{b,arrow});
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.MAGIC_WORKBENCH,""String_Node_Str"",new ItemStack[]{null,null,null,null,null,null,new ItemStack(Material.BOOKSHELF),new ItemStack(Material.WORKBENCH),new ItemStack(Material.DISPENSER)},new ItemStack[0],Material.WORKBENCH).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=null;
          if (b.getRelative(1,0,0).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(1,0,0).getState();
 else           if (b.getRelative(0,0,1).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(0,0,1).getState();
 else           if (b.getRelative(-1,0,0).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(-1,0,0).getState();
 else           if (b.getRelative(0,0,-1).getType() == Material.DISPENSER)           disp=(Dispenser)b.getRelative(0,0,-1).getState();
          final Inventory inv=disp.getInventory();
          List<ItemStack[]> inputs=RecipeType.getRecipeInputList(machine);
          for (int i=0; i < inputs.size(); i++) {
            boolean craft=true;
            for (int j=0; j < inv.getContents().length; j++) {
              if (!SlimefunManager.isItemSimiliar(inv.getContents()[j],inputs.get(i)[j],true)) {
                craft=false;
                break;
              }
            }
            if (craft) {
              final ItemStack adding=RecipeType.getRecipeOutputList(machine,inputs.get(i));
              if (Slimefun.hasUnlocked(p,adding,true)) {
                Inventory inv2=Bukkit.createInventory(null,9,""String_Node_Str"");
                for (int j=0; j < inv.getContents().length; j++) {
                  inv2.setItem(j,inv.getContents()[j] != null ? (inv.getContents()[j].getAmount() > 1 ? new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1) : null) : null);
                }
                if (InvUtils.fits(inv2,adding)) {
                  for (int j=0; j < 9; j++) {
                    if (inv.getContents()[j] != null) {
                      if (inv.getContents()[j].getType() != Material.AIR) {
                        if (inv.getContents()[j].getAmount() > 1)                         inv.setItem(j,new CustomItem(inv.getContents()[j],inv.getContents()[j].getAmount() - 1));
 else                         inv.setItem(j,null);
                      }
                    }
                  }
                  p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                  p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                  p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                      p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                      p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          p.getWorld().playSound(b.getLocation(),Sound.BLOCK_WOOD_BUTTON_CLICK_ON,1,1);
                          p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                          p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              p.getWorld().playEffect(b.getLocation(),Effect.MOBSPAWNER_FLAMES,1);
                              p.getWorld().playEffect(b.getLocation(),Effect.ENDER_SIGNAL,1);
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
              }
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_ELEMENTAL,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,SlimefunItems.MAGICAL_BOOK_COVER,SlimefunItems.MAGIC_LUMP_3,null,new ItemStack(Material.STICK),SlimefunItems.MAGICAL_BOOK_COVER,SlimefunItems.MAGIC_LUMP_3,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_WIND,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.FEATHER),SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.STAFF_ELEMENTAL,new ItemStack(Material.FEATHER),SlimefunItems.STAFF_ELEMENTAL,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.STAFF_WIND,true)) {
        if (p.getFoodLevel() >= 2) {
          if (p.getItemInHand().getType() != Material.SHEARS) {
            FoodLevelChangeEvent event=new FoodLevelChangeEvent(p,p.getFoodLevel() - 2);
            Bukkit.getPluginManager().callEvent(event);
            p.setFoodLevel(event.getFoodLevel());
          }
          p.setVelocity(p.getEyeLocation().getDirection().multiply(4));
          p.getWorld().playSound(p.getLocation(),Sound.ENTITY_TNT_PRIMED,1,1);
          p.getWorld().playEffect(p.getLocation(),Effect.SMOKE,1);
          p.setFallDistance(0.0f);
        }
 else {
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_WATER,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.WATER_LILY),SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.STAFF_ELEMENTAL,new ItemStack(Material.WATER_LILY),SlimefunItems.STAFF_ELEMENTAL,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.STAFF_WATER,true)) {
        p.setFireTicks(0);
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
        return true;
      }
 else       return false;
    }
  }
);
  new MultiTool(SlimefunItems.DURALUMIN_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DURALUMIN_INGOT,null,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.DURALUMIN_INGOT,null,SlimefunItems.DURALUMIN_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.SOLDER_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLDER_INGOT,null,SlimefunItems.SOLDER_INGOT,SlimefunItems.SOLDER_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.SOLDER_INGOT,null,SlimefunItems.SOLDER_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.BILLON_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BILLON_INGOT,null,SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.BILLON_INGOT,null,SlimefunItems.BILLON_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.STEEL_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.DAMASCUS_STEEL_INGOT,null,SlimefunItems.DAMASCUS_STEEL_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new MultiTool(SlimefunItems.CARBONADO_MULTI_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,null,SlimefunItems.CARBONADO,SlimefunItems.CARBONADO,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.CARBONADO,null,SlimefunItems.CARBONADO,null},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Object[]{true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str""}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ORE_WASHER,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.DISPENSER),null,null,new ItemStack(Material.FENCE),null,null,new ItemStack(Material.CAULDRON_ITEM),null},new ItemStack[]{SlimefunItems.SIFTED_ORE,SlimefunItems.IRON_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.GOLD_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.COPPER_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.TIN_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.ZINC_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.ALUMINUM_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.MAGNESIUM_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.LEAD_DUST,SlimefunItems.SIFTED_ORE,SlimefunItems.SILVER_DUST},Material.FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,machine.getItem(),true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.UP).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            if (current != null) {
              if (SlimefunManager.isItemSimiliar(current,SlimefunItems.SIFTED_ORE,true)) {
                ItemStack adding=SlimefunItems.IRON_DUST;
                if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.GOLD_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.ALUMINUM_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.COPPER_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.ZINC_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.TIN_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.MAGNESIUM_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.LEAD_DUST;
 else                 if (SlimefunStartup.chance(100,25))                 adding=SlimefunItems.SILVER_DUST;
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.WATER);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1,1);
                  if (InvUtils.fits(inv,SlimefunItems.STONE_CHUNK))                   inv.addItem(SlimefunItems.STONE_CHUNK);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
 else               if (SlimefunManager.isItemSimiliar(current,new ItemStack(Material.SAND,4),false)) {
                ItemStack adding=SlimefunItems.SALT;
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(4);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.WATER);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1,1);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
 else               if (SlimefunManager.isItemSimiliar(current,SlimefunItems.PULVERIZED_ORE,true)) {
                ItemStack adding=SlimefunItems.PURE_ORE_CLUSTER;
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.WATER);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1,1);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_24K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_22K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_22K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_20K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_20K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_18K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_18K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_16K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_16K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_14K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_14K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_12K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_12K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_10K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_10K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_8K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_8K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_6K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_6K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,SlimefunItems.GOLD_4K,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.GOLD_4K,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.GOLD_DUST,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.STONE_CHUNK,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.SILICON,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{new ItemStack(Material.QUARTZ_BLOCK),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.SOLAR_PANEL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),SlimefunItems.SILICON,SlimefunItems.SILICON,SlimefunItems.SILICON,SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON}).register(true);
  new SolarHelmet(Categories.TECH,SlimefunItems.SOLAR_HELMET,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.SOLAR_PANEL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.MEDIUM_CAPACITOR,null,SlimefunItems.MEDIUM_CAPACITOR},new String[]{""String_Node_Str""},new Double[]{0.1}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.LAVA_CRYSTAL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.RUNE_FIRE,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.BLAZE_POWDER),SlimefunItems.MAGIC_LUMP_1}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.STAFF_FIRE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,null,SlimefunItems.LAVA_CRYSTAL,null,SlimefunItems.STAFF_ELEMENTAL,null,SlimefunItems.STAFF_ELEMENTAL,null,null}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.AUTO_SMELT_PICKAXE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LAVA_CRYSTAL,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.LAVA_CRYSTAL,null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.AUTO_SMELT_PICKAXE,true)) {
        if (e.getBlock().getType().equals(Material.SKULL))         return true;
        int j=-1;
        for (int i=0; i < e.getBlock().getDrops().size(); i++) {
          if (((List<ItemStack>)e.getBlock().getDrops()).get(i) != null) {
            j++;
            drops.add(e.getBlock().getType().toString().endsWith(""String_Node_Str"") ? new CustomItem(((List<ItemStack>)e.getBlock().getDrops()).get(i),fortune) : ((List<ItemStack>)e.getBlock().getDrops()).get(i));
            if (RecipeCalculator.getSmeltedOutput(drops.get(i).getType()) != null) {
              e.getBlock().getWorld().playEffect(e.getBlock().getLocation(),Effect.MOBSPAWNER_FLAMES,1);
              drops.set(j,new CustomItem(RecipeCalculator.getSmeltedOutput(drops.get(i).getType()),drops.get(i).getAmount()));
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.TALISMAN,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.MAGIC_LUMP_2,SlimefunItems.GOLD_8K,SlimefunItems.MAGIC_LUMP_2,null,new ItemStack(Material.EMERALD),null,SlimefunItems.MAGIC_LUMP_2,SlimefunItems.GOLD_8K,SlimefunItems.MAGIC_LUMP_2},new String[]{""String_Node_Str""},new Boolean[]{false}).register(true);
  new Talisman(SlimefunItems.TALISMAN_ANVIL,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.ANVIL),SlimefunItems.TALISMAN,new ItemStack(Material.ANVIL),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,false,""String_Node_Str"",new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_MINER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.TALISMAN,SlimefunItems.SIFTED_ORE,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,false,""String_Node_Str"",20,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_HUNTER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.TALISMAN,SlimefunItems.MONSTER_JERKY,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,false,""String_Node_Str"",20,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_LAVA,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.TALISMAN,new ItemStack(Material.LAVA_BUCKET),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.FIRE_RESISTANCE,3600,4)).register(true);
  new Talisman(SlimefunItems.TALISMAN_WATER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.WATER_BUCKET),SlimefunItems.TALISMAN,new ItemStack(Material.FISHING_ROD),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.WATER_BREATHING,3600,4)).register(true);
  new Talisman(SlimefunItems.TALISMAN_ANGEL,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.FEATHER),SlimefunItems.TALISMAN,new ItemStack(Material.FEATHER),SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,true,""String_Node_Str"",75,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_FIRE,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.TALISMAN,SlimefunItems.LAVA_CRYSTAL,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.FIRE_RESISTANCE,3600,4)).register(true);
  new Talisman(SlimefunItems.TALISMAN_MAGICIAN,""String_Node_Str"",new ItemStack[]{SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3,new ItemStack(Material.ENCHANTMENT_TABLE),SlimefunItems.TALISMAN,new ItemStack(Material.ENCHANTMENT_TABLE),SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3},false,false,""String_Node_Str"",80,new PotionEffect[0]).register(true);
  for (  Enchantment e : Enchantment.values()) {
    for (int i=1; i <= e.getMaxLevel(); i++) {
      Slimefun.setItemVariable(""String_Node_Str"",""String_Node_Str"" + e.getName() + ""String_Node_Str""+ i,true);
    }
  }
  new Talisman(SlimefunItems.TALISMAN_TRAVELLER,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.STAFF_WIND,SlimefunItems.TALISMAN_ANGEL,SlimefunItems.STAFF_WIND,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,false,""String_Node_Str"",60,new PotionEffect(PotionEffectType.SPEED,3600,2)).register(true);
  new Talisman(SlimefunItems.TALISMAN_WARRIOR,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.TALISMAN,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},true,true,""String_Node_Str"",new PotionEffect(PotionEffectType.INCREASE_DAMAGE,3600,2)).register(true);
  new Talisman(SlimefunItems.TALISMAN_KNIGHT,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.GILDED_IRON,SlimefunItems.TALISMAN_WARRIOR,SlimefunItems.GILDED_IRON,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},""String_Node_Str"",30,new PotionEffect(PotionEffectType.REGENERATION,100,3)).register(true);
  new Alloy(SlimefunItems.GILDED_IRON,""String_Node_Str"",new ItemStack[]{SlimefunItems.GOLD_24K,SlimefunItems.IRON_DUST,null,null,null,null,null,null,null}).register(true);
  new ReplacingAlloy(SlimefunItems.SYNTHETIC_EMERALD,""String_Node_Str"",new ItemStack[]{SlimefunItems.SYNTHETIC_SAPPHIRE,SlimefunItems.ALUMINUM_DUST,SlimefunItems.ALUMINUM_INGOT,new ItemStack(Material.THIN_GLASS),null,null,null,null,null}).register(true);
  SlimefunManager.registerArmorSet(SlimefunItems.CHAIN,new ItemStack[]{new ItemStack(Material.CHAINMAIL_HELMET),new ItemStack(Material.CHAINMAIL_CHESTPLATE),new ItemStack(Material.CHAINMAIL_LEGGINGS),new ItemStack(Material.CHAINMAIL_BOOTS)},""String_Node_Str"",true,true);
  new Talisman(SlimefunItems.TALISMAN_WHIRLWIND,""String_Node_Str"",new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.STAFF_WIND,SlimefunItems.TALISMAN_TRAVELLER,SlimefunItems.STAFF_WIND,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3},false,true,""String_Node_Str"",60,new PotionEffect[0]).register(true);
  new Talisman(SlimefunItems.TALISMAN_WIZARD,""String_Node_Str"",new ItemStack[]{SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.TALISMAN_MAGICIAN,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.ENDER_LUMP_3,null,SlimefunItems.ENDER_LUMP_3},false,false,""String_Node_Str"",60,new PotionEffect[0]).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.LUMBER_AXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.SYNTHETIC_DIAMOND,SlimefunItems.SYNTHETIC_DIAMOND,null,SlimefunItems.SYNTHETIC_EMERALD,SlimefunItems.GILDED_IRON,null,null,SlimefunItems.GILDED_IRON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.LUMBER_AXE,true)) {
        if (e.getBlock().getType() == Material.LOG || e.getBlock().getType() == Material.LOG_2) {
          List<Location> logs=new ArrayList<Location>();
          TreeCalculator.getTree(e.getBlock().getLocation(),e.getBlock().getLocation(),logs);
          if (logs.contains(e.getBlock()))           logs.remove(e.getBlock());
          for (          Location b : logs) {
            if (CSCoreLib.getLib().getProtectionManager().canBuild(e.getPlayer().getUniqueId(),b.getBlock())) {
              b.getWorld().playEffect(b,Effect.STEP_SOUND,b.getBlock().getType());
              for (              ItemStack drop : b.getBlock().getDrops()) {
                b.getWorld().dropItemNaturally(b,drop);
              }
              b.getBlock().setType(Material.AIR);
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.SALT,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{null,null,null,null,new ItemStack(Material.SAND,4),null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.HEAVY_CREAM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.MILK_BUCKET),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.HEAVY_CREAM,2)).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.CHEESE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.MILK_BUCKET),SlimefunItems.SALT,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.BUTTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HEAVY_CREAM,SlimefunItems.SALT,null,null,null,null,null,null,null}).register(true);
  SlimefunManager.registerArmorSet(SlimefunItems.GILDED_IRON,new ItemStack[]{SlimefunItems.GILDED_IRON_HELMET,SlimefunItems.GILDED_IRON_CHESTPLATE,SlimefunItems.GILDED_IRON_LEGGINGS,SlimefunItems.GILDED_IRON_BOOTS},""String_Node_Str"",true,false);
  new SlimefunArmorPiece(Categories.ARMOR,SlimefunItems.SCUBA_HELMET,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new ItemStack(Material.THIN_GLASS),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),null,null,null},new PotionEffect[]{new PotionEffect(PotionEffectType.WATER_BREATHING,300,1)}).register(true);
  new SlimefunArmorPiece(Categories.ARMOR,SlimefunItems.HAZMATSUIT_CHESTPLATE,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new MaterialData(Material.WOOL,(byte)1).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1)},new PotionEffect[]{new PotionEffect(PotionEffectType.FIRE_RESISTANCE,300,1)}).register(true);
  new SlimefunItem(Categories.ARMOR,SlimefunItems.HAZMATSUIT_LEGGINGS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)1).toItemStack(1),new MaterialData(Material.WOOL,(byte)1).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)1).toItemStack(1)}).register(true);
  new SlimefunItem(Categories.ARMOR,SlimefunItems.RUBBER_BOOTS,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new MaterialData(Material.WOOL,(byte)15).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)15).toItemStack(1),new MaterialData(Material.WOOL,(byte)15).toItemStack(1),null,new MaterialData(Material.WOOL,(byte)15).toItemStack(1)}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.CRUSHED_ORE,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{SlimefunItems.SIFTED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.PULVERIZED_ORE,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{SlimefunItems.CRUSHED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.PURE_ORE_CLUSTER,""String_Node_Str"",RecipeType.ORE_WASHER,new ItemStack[]{SlimefunItems.PULVERIZED_ORE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.TINY_URANIUM,""String_Node_Str"",RecipeType.ORE_CRUSHER,new ItemStack[]{SlimefunItems.PURE_ORE_CLUSTER,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.SMALL_URANIUM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM,SlimefunItems.TINY_URANIUM}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.URANIUM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SMALL_URANIUM,SlimefunItems.SMALL_URANIUM,null,SlimefunItems.SMALL_URANIUM,SlimefunItems.SMALL_URANIUM,null,null,null,null}).register(true);
  new Alloy(SlimefunItems.REDSTONE_ALLOY,""String_Node_Str"",new ItemStack[]{new ItemStack(Material.REDSTONE),new ItemStack(Material.REDSTONE_BLOCK),SlimefunItems.FERROSILICON,SlimefunItems.HARDENED_METAL_INGOT,null,null,null,null,null}).register(true);
  SlimefunManager.registerArmorSet(SlimefunItems.GOLD_12K,new ItemStack[]{SlimefunItems.GOLD_HELMET,SlimefunItems.GOLD_CHESTPLATE,SlimefunItems.GOLD_LEGGINGS,SlimefunItems.GOLD_BOOTS},""String_Node_Str"",true,false);
  new SlimefunItem(Categories.MISC,SlimefunItems.CLOTH,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.WOOL),null,null,null,null,null,null,null,null},new CustomItem(SlimefunItems.CLOTH,8)).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.RAG,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH,new ItemStack(Material.STRING),null,new ItemStack(Material.STRING),SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.RAG,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playEffect(p.getLocation(),Effect.STEP_SOUND,Material.WOOL);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,0));
        p.setFireTicks(0);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.BANDAGE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.RAG,new ItemStack(Material.STRING),SlimefunItems.RAG,null,null,null,null,null,null},new CustomItem(SlimefunItems.BANDAGE,4),new String[]{""String_Node_Str""},new Boolean[]{true}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.BANDAGE,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playEffect(p.getLocation(),Effect.STEP_SOUND,Material.WOOL);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,1));
        p.setFireTicks(0);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.SPLINT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.IRON_INGOT),null,new ItemStack(Material.STICK),new ItemStack(Material.STICK),new ItemStack(Material.STICK),null,new ItemStack(Material.IRON_INGOT),null},new CustomItem(SlimefunItems.SPLINT,4),new String[]{""String_Node_Str""},new Boolean[]{true}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.SPLINT,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_SKELETON_HURT,1,1);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,0));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.CAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,null,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT,SlimefunItems.TIN_INGOT},new CustomItem(SlimefunItems.CAN,4)).register(true);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.VITAMINS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.APPLE),new ItemStack(Material.RED_MUSHROOM),new ItemStack(Material.SUGAR),null,null,null,null,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.VITAMINS,true)) {
        PlayerInventory.consumeItemInHand(p);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_GENERIC_EAT,1,1);
        if (p.hasPotionEffect(PotionEffectType.POISON))         p.removePotionEffect(PotionEffectType.POISON);
        if (p.hasPotionEffect(PotionEffectType.WITHER))         p.removePotionEffect(PotionEffectType.WITHER);
        if (p.hasPotionEffect(PotionEffectType.SLOW))         p.removePotionEffect(PotionEffectType.SLOW);
        if (p.hasPotionEffect(PotionEffectType.SLOW_DIGGING))         p.removePotionEffect(PotionEffectType.SLOW_DIGGING);
        if (p.hasPotionEffect(PotionEffectType.WEAKNESS))         p.removePotionEffect(PotionEffectType.WEAKNESS);
        if (p.hasPotionEffect(PotionEffectType.CONFUSION))         p.removePotionEffect(PotionEffectType.CONFUSION);
        if (p.hasPotionEffect(PotionEffectType.BLINDNESS))         p.removePotionEffect(PotionEffectType.BLINDNESS);
        p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL,1,2));
        p.setFireTicks(0);
        e.setCancelled(true);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.PORTABLE,SlimefunItems.MEDICINE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.VITAMINS,new ItemStack(Material.GLASS_BOTTLE),SlimefunItems.HEAVY_CREAM,null,null,null,null,null,null}).register(true);
  new SlimefunArmorPiece(Categories.TECH,SlimefunItems.NIGHT_VISION_GOGGLES,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.COAL_BLOCK),new ItemStack(Material.COAL_BLOCK),new ItemStack(Material.COAL_BLOCK),new MaterialData(Material.STAINED_GLASS_PANE,(byte)5).toItemStack(1),new ItemStack(Material.COAL_BLOCK),new MaterialData(Material.STAINED_GLASS_PANE,(byte)5).toItemStack(1),new ItemStack(Material.COAL_BLOCK),null,new ItemStack(Material.COAL_BLOCK)},new PotionEffect[]{new PotionEffect(PotionEffectType.NIGHT_VISION,600,20)}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.PICKAXE_OF_CONTAINMENT,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON,SlimefunItems.FERROSILICON,null,SlimefunItems.GILDED_IRON,null,null,SlimefunItems.GILDED_IRON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.PICKAXE_OF_CONTAINMENT,true)) {
        if (e.getBlock().getType() != Material.MOB_SPAWNER)         return true;
        ItemStack spawner=SlimefunItems.BROKEN_SPAWNER.clone();
        ItemMeta im=spawner.getItemMeta();
        List<String> lore=im.getLore();
        for (int i=0; i < lore.size(); i++) {
          if (lore.get(i).contains(""String_Node_Str""))           lore.set(i,lore.get(i).replace(""String_Node_Str"",StringUtils.format(((CreatureSpawner)e.getBlock().getState()).getSpawnedType().toString())));
        }
        im.setLore(lore);
        spawner.setItemMeta(im);
        e.getBlock().getLocation().getWorld().dropItemNaturally(e.getBlock().getLocation(),spawner);
        e.setExpToDrop(0);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.HERCULES_PICKAXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.HERCULES_PICKAXE,true) && e.getBlock().getType().toString().endsWith(""String_Node_Str"")) {
        if (e.getBlock().getType() == Material.IRON_ORE)         drops.add(new CustomItem(SlimefunItems.IRON_DUST,2));
 else         if (e.getBlock().getType() == Material.GOLD_ORE)         drops.add(new CustomItem(SlimefunItems.GOLD_DUST,2));
 else {
          for (          ItemStack drop : e.getBlock().getDrops()) {
            drops.add(new CustomItem(drop,2));
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.SAW_MILL,""String_Node_Str"",new ItemStack[]{null,null,null,new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG),new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG),new ItemStack(Material.WORKBENCH),new ItemStack(Material.LOG)},new ItemStack[]{},Material.WORKBENCH).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.SAW_MILL,true)) {
          if (b.getRelative(BlockFace.UP).getType() == Material.LOG)           BlockBreaker.breakBlock(p,b.getRelative(BlockFace.UP),Arrays.asList(new ItemStack[]{new CustomItem(Material.WOOD,b.getRelative(BlockFace.UP).getData() % 4,8)}),true);
 else           if (b.getRelative(BlockFace.UP).getType() == Material.LOG_2)           BlockBreaker.breakBlock(p,b.getRelative(BlockFace.UP),Arrays.asList(new ItemStack[]{new CustomItem(Material.WOOD,(b.getRelative(BlockFace.UP).getData() % 2) + 4,8)}),true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,new CustomItem(Material.FIRE,""String_Node_Str"",0),""String_Node_Str"",new ItemStack[]{null,null,null,new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG_2),new ItemStack(Material.IRON_FENCE),new ItemStack(Material.LOG),new ItemStack(Material.WORKBENCH),new ItemStack(Material.LOG)},new ItemStack[]{},Material.WORKBENCH,true).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_HELMET_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_CHESTPLATE_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_LEGGINGS_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL)},new PotionEffect[]{new PotionEffect(PotionEffectType.SPEED,300,2)}).register(true);
  new SlimefunArmorPiece(Categories.MAGIC_ARMOR,SlimefunItems.SLIME_BOOTS_STEEL,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.SLIME_BALL),null,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.SLIME_BALL),SlimefunItems.STEEL_PLATE,new ItemStack(Material.SLIME_BALL)},new PotionEffect[]{new PotionEffect(PotionEffectType.JUMP,300,5)}).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.BLADE_OF_VAMPIRES,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new MaterialData(Material.SKULL_ITEM,(byte)1).toItemStack(1),null,null,new MaterialData(Material.SKULL_ITEM,(byte)1).toItemStack(1),null,null,new ItemStack(Material.BLAZE_ROD),null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.DIGITAL_MINER,""String_Node_Str"",new ItemStack[]{SlimefunItems.SOLAR_PANEL,new ItemStack(Material.CHEST),SlimefunItems.SOLAR_PANEL,new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.DISPENSER),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.HOPPER),new ItemStack(Material.IRON_BLOCK)},new ItemStack[0],Material.DISPENSER).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.DIGITAL_MINER,true)) {
          Chest chest=(Chest)b.getRelative(BlockFace.UP).getState();
          final Inventory inv=chest.getInventory();
          List<Location> ores=new ArrayList<Location>();
          for (int x=b.getX() - 4; x < b.getX() + 4; x++) {
            for (int z=b.getZ() - 4; z < b.getZ() + 4; z++) {
              for (int y=b.getY(); y > 0; y--) {
                if (b.getWorld().getBlockAt(x,y,z).getType().toString().endsWith(""String_Node_Str"")) {
                  ores.add(b.getWorld().getBlockAt(x,y,z).getLocation());
                }
              }
            }
          }
          if (!ores.isEmpty()) {
            final Material ore=ores.get(0).getBlock().getType();
            final ItemStack adding=new ItemStack(ore);
            ores.get(0).getBlock().setType(Material.AIR);
            ores.clear();
            if (InvUtils.fits(inv,adding)) {
              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                @Override public void run(){
                                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                                  p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                                  inv.addItem(adding);
                                }
                              }
,20L);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
              }
,20L);
            }
 else             Messages.local.sendTranslation(p,""String_Node_Str"",true);
          }
 else           Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.ADVANCED_DIGITAL_MINER,""String_Node_Str"",new ItemStack[]{SlimefunItems.SOLAR_PANEL,new ItemStack(Material.CHEST),SlimefunItems.SOLAR_PANEL,SlimefunItems.GOLD_24K_BLOCK,new ItemStack(Material.DISPENSER),SlimefunItems.GOLD_24K_BLOCK,SlimefunItems.GOLD_24K_BLOCK,new ItemStack(Material.HOPPER),SlimefunItems.GOLD_24K_BLOCK},new ItemStack[0],Material.DISPENSER).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.ADVANCED_DIGITAL_MINER,true)) {
          Chest chest=(Chest)b.getRelative(BlockFace.UP).getState();
          final Inventory inv=chest.getInventory();
          List<Location> ores=new ArrayList<Location>();
          for (int x=b.getX() - 6; x < b.getX() + 6; x++) {
            for (int z=b.getZ() - 6; z < b.getZ() + 6; z++) {
              for (int y=b.getY(); y > 0; y--) {
                if (b.getWorld().getBlockAt(x,y,z).getType().toString().endsWith(""String_Node_Str"")) {
                  ores.add(b.getWorld().getBlockAt(x,y,z).getLocation());
                }
              }
            }
          }
          if (!ores.isEmpty()) {
            final Material ore=ores.get(0).getBlock().getType();
            ItemStack drop=new ItemStack(ore);
            if (ore == Material.COAL_ORE)             drop=new CustomItem(new ItemStack(Material.COAL),4);
 else             if (ore == Material.IRON_ORE)             drop=new CustomItem(SlimefunItems.IRON_DUST,2);
 else             if (ore == Material.GOLD_ORE)             drop=new CustomItem(SlimefunItems.GOLD_DUST,2);
 else             if (ore == Material.REDSTONE_ORE)             drop=new CustomItem(new ItemStack(Material.REDSTONE),8);
 else             if (ore == Material.QUARTZ_ORE)             drop=new CustomItem(new ItemStack(Material.QUARTZ),4);
 else             if (ore == Material.LAPIS_ORE)             drop=new CustomItem(new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),12);
 else {
              for (              ItemStack drops : ores.get(0).getBlock().getDrops()) {
                if (!drops.getType().isBlock())                 drop=new CustomItem(drops,2);
              }
            }
            final ItemStack adding=drop;
            ores.get(0).getBlock().setType(Material.AIR);
            ores.clear();
            if (InvUtils.fits(inv,adding)) {
              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,ore);
                              p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                              inv.addItem(adding);
                            }
                          }
,20L);
                        }
                      }
,20L);
                    }
                  }
,20L);
                }
              }
,20L);
            }
 else             Messages.local.sendTranslation(p,""String_Node_Str"",true);
          }
 else           Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.GOLD_24K_BLOCK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K,SlimefunItems.GOLD_24K}).register(true);
  new SlimefunGadget(Categories.MACHINES_1,SlimefunItems.COMPOSTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.WOOD_STEP),null,new ItemStack(Material.WOOD_STEP),new ItemStack(Material.WOOD_STEP),null,new ItemStack(Material.WOOD_STEP),new ItemStack(Material.WOOD_STEP),new ItemStack(Material.CAULDRON_ITEM),new ItemStack(Material.WOOD_STEP)},new ItemStack[]{new CustomItem(Material.LEAVES,0,8),new ItemStack(Material.DIRT),new CustomItem(Material.LEAVES_2,0,8),new ItemStack(Material.DIRT),new CustomItem(Material.SAPLING,0,8),new ItemStack(Material.DIRT),new ItemStack(Material.STONE,4),new ItemStack(Material.NETHERRACK),new ItemStack(Material.SAND,2),new ItemStack(Material.SOUL_SAND),new ItemStack(Material.WHEAT,4),new ItemStack(Material.NETHER_STALK)}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    final Player p,    ItemStack item){
      if (e.getClickedBlock() != null) {
        SlimefunItem machine=BlockStorage.check(e.getClickedBlock());
        if (machine != null && machine.getName().equals(""String_Node_Str"")) {
          final ItemStack input=p.getItemInHand();
          final Block b=e.getClickedBlock();
          for (          ItemStack convert : RecipeType.getRecipeInputs(machine)) {
            if (convert != null && SlimefunManager.isItemSimiliar(input,convert,true)) {
              ItemStack removing=input.clone();
              removing.setAmount(convert.getAmount());
              p.getInventory().removeItem(removing);
              final ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  if (input.getType().isBlock())                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                    @Override public void run(){
                      if (input.getType().isBlock())                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                        @Override public void run(){
                          if (input.getType().isBlock())                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                            @Override public void run(){
                              if (input.getType().isBlock())                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                @Override public void run(){
                                  if (input.getType().isBlock())                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                    @Override public void run(){
                                      if (input.getType().isBlock())                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                        @Override public void run(){
                                          if (input.getType().isBlock())                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                            @Override public void run(){
                                              if (input.getType().isBlock())                                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                               b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                                @Override public void run(){
                                                  if (input.getType().isBlock())                                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                                   b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                                  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                                    @Override public void run(){
                                                      if (input.getType().isBlock())                                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                                       b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                                      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                                        @Override public void run(){
                                                          if (input.getType().isBlock())                                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,input.getType());
 else                                                           b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                                                          p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                                                          b.getWorld().dropItemNaturally(b.getRelative(BlockFace.UP).getLocation(),adding);
                                                        }
                                                      }
,30L);
                                                    }
                                                  }
,30L);
                                                }
                                              }
,30L);
                                            }
                                          }
,30L);
                                        }
                                      }
,30L);
                                    }
                                  }
,30L);
                                }
                              }
,30L);
                            }
                          }
,30L);
                        }
                      }
,30L);
                    }
                  }
,30L);
                }
              }
,30L);
              return true;
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
          return true;
        }
      }
      return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.FARMER_SHOES,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.HAY_BLOCK),null,new ItemStack(Material.HAY_BLOCK),new ItemStack(Material.HAY_BLOCK),null,new ItemStack(Material.HAY_BLOCK)}).register(true);
  @SuppressWarnings(""String_Node_Str"") final String[] explosiveblacklist=Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") != null ? ((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).toArray(new String[((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).size()]) : new String[]{""String_Node_Str""};
  new SlimefunItem(Categories.TOOLS,SlimefunItems.EXPLOSIVE_PICKAXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.TNT),SlimefunItems.SYNTHETIC_DIAMOND,new ItemStack(Material.TNT),null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null},new String[]{""String_Node_Str""},new Object[]{Arrays.asList(""String_Node_Str"")}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.EXPLOSIVE_PICKAXE,true)) {
        e.getBlock().getWorld().createExplosion(e.getBlock().getLocation(),0.0F);
        e.getBlock().getWorld().playSound(e.getBlock().getLocation(),Sound.ENTITY_GENERIC_EXPLODE,1F,1F);
        for (int x=-1; x <= 1; x++) {
          for (int y=-1; y <= 1; y++) {
            for (int z=-1; z <= 1; z++) {
              Block b=e.getBlock().getRelative(x,y,z);
              if (b.getType() != Material.AIR && !StringUtils.equals(b.getType().toString(),explosiveblacklist)) {
                if (CSCoreLib.getLib().getProtectionManager().canBuild(e.getPlayer().getUniqueId(),b)) {
                  if (SlimefunStartup.instance.isCoreProtectInstalled())                   SlimefunStartup.instance.getCoreProtectAPI().logRemoval(e.getPlayer().getName(),b.getLocation(),b.getType(),b.getData());
                  b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,b.getType());
                  SlimefunItem sfItem=BlockStorage.check(b);
                  boolean allow=true;
                  if (sfItem != null && !(sfItem instanceof HandledBlock)) {
                    if (SlimefunItem.blockhandler.containsKey(sfItem.getName())) {
                      allow=SlimefunItem.blockhandler.get(sfItem.getName()).onBreak(e.getPlayer(),e.getBlock(),sfItem,UnregisterReason.PLAYER_BREAK);
                    }
                    if (allow) {
                      drops.add(BlockStorage.retrieve(e.getBlock()));
                    }
                  }
 else                   if (b.getType().equals(Material.SKULL)) {
                    b.breakNaturally();
                  }
 else                   if (b.getType().name().endsWith(""String_Node_Str"")) {
                    b.breakNaturally();
                  }
 else {
                    for (                    ItemStack drop : b.getDrops()) {
                      b.getWorld().dropItemNaturally(b.getLocation(),(b.getType().toString().endsWith(""String_Node_Str"") && !b.getType().equals(Material.IRON_ORE) && !b.getType().equals(Material.GOLD_ORE)) ? new CustomItem(drop,fortune) : drop);
                    }
                    b.setType(Material.AIR);
                  }
                }
              }
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.AUTOMATED_PANNING_MACHINE,""String_Node_Str"",new ItemStack[]{null,null,null,null,new ItemStack(Material.TRAP_DOOR),null,null,new ItemStack(Material.CAULDRON_ITEM),null},new ItemStack[]{new ItemStack(Material.GRAVEL),new ItemStack(Material.FLINT),new ItemStack(Material.GRAVEL),new ItemStack(Material.CLAY_BALL),new ItemStack(Material.GRAVEL),SlimefunItems.SIFTED_ORE},Material.TRAP_DOOR).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    final Player p,    MultiBlock mb,    final Block b){
      if (mb.isMultiBlock(SlimefunItem.getByName(""String_Node_Str""))) {
        final ItemStack input=p.getItemInHand();
        ItemStack output=null;
        if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))         output=SlimefunItems.SIFTED_ORE;
 else         if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))         output=new ItemStack(Material.CLAY_BALL);
 else         if (SlimefunStartup.chance(100,(Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")))         output=new ItemStack(Material.FLINT);
        final ItemStack drop=output;
        if (input != null) {
          if (input.getType() == Material.GRAVEL) {
            PlayerInventory.consumeItemInHand(p);
            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
              @Override public void run(){
                b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                  @Override public void run(){
                    b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                      @Override public void run(){
                        b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                          @Override public void run(){
                            b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                              @Override public void run(){
                                b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                  @Override public void run(){
                                    b.getWorld().playEffect(b.getRelative(BlockFace.DOWN).getLocation(),Effect.STEP_SOUND,Material.GRAVEL);
                                    if (drop != null)                                     b.getWorld().dropItemNaturally(b.getLocation(),drop);
                                    p.getWorld().playSound(p.getLocation(),Sound.ENTITY_ARROW_HIT_PLAYER,1F,1F);
                                  }
                                }
,30L);
                              }
                            }
,30L);
                          }
                        }
,30L);
                      }
                    }
,30L);
                  }
                }
,30L);
              }
            }
,30L);
            return true;
          }
        }
        Messages.local.sendTranslation(p,""String_Node_Str"",true);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC_ARMOR,SlimefunItems.BOOTS_OF_THE_STOMPER,""String_Node_Str"",RecipeType.ARMOR_FORGE,new ItemStack[]{null,null,null,new ItemStack(Material.WOOL),null,new ItemStack(Material.WOOL),new ItemStack(Material.PISTON_BASE),null,new ItemStack(Material.PISTON_BASE)}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.PICKAXE_OF_THE_SEEKER,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.COMPASS),SlimefunItems.SYNTHETIC_DIAMOND,new ItemStack(Material.COMPASS),null,SlimefunItems.FERROSILICON,null,null,SlimefunItems.FERROSILICON,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.PICKAXE_OF_THE_SEEKER,true)) {
        Block closest=null;
        for (int x=-4; x <= 4; x++) {
          for (int y=-4; y <= 4; y++) {
            for (int z=-4; z <= 4; z++) {
              if (p.getLocation().getBlock().getRelative(x,y,z).getType().toString().endsWith(""String_Node_Str"")) {
                if (closest == null)                 closest=p.getLocation().getBlock().getRelative(x,y,z);
 else                 if (p.getLocation().distance(closest.getLocation()) < p.getLocation().distance(p.getLocation().getBlock().getRelative(x,y,z).getLocation()))                 closest=p.getLocation().getBlock().getRelative(x,y,z);
              }
            }
          }
        }
        if (closest == null)         Messages.local.sendTranslation(p,""String_Node_Str"",true);
 else {
          double l=closest.getX() + 0.5 - p.getLocation().getX();
          double w=closest.getZ() + 0.5 - p.getLocation().getZ();
          float yaw, pitch;
          double c=Math.sqrt(l * l + w * w);
          double alpha1=-Math.asin(l / c) / Math.PI * 180;
          double alpha2=Math.acos(w / c) / Math.PI * 180;
          if (alpha2 > 90)           yaw=(float)(180 - alpha1);
 else           yaw=(float)alpha1;
          pitch=(float)((-Math.atan((closest.getY() - 0.5 - p.getLocation().getY()) / Math.sqrt(l * l + w * w))) * 180F / Math.PI);
          p.teleport(new Location(p.getWorld(),p.getLocation().getX(),p.getLocation().getY(),p.getLocation().getZ(),yaw,pitch));
        }
        if (e.getPlayer().getItemInHand().getEnchantments().containsKey(Enchantment.DURABILITY)) {
          if (SlimefunStartup.randomize(100) <= (60 + 40 / (e.getPlayer().getItemInHand().getEnchantmentLevel(Enchantment.DURABILITY) + 1)))           PlayerInventory.damageItemInHand(e.getPlayer());
        }
 else         PlayerInventory.damageItemInHand(e.getPlayer());
        PlayerInventory.update(e.getPlayer());
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunBackpack(9,Categories.PORTABLE,SlimefunItems.BACKPACK_SMALL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),null,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_6K,new ItemStack(Material.CHEST),SlimefunItems.GOLD_6K,new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER)}).register(true);
  new SlimefunBackpack(18,Categories.PORTABLE,SlimefunItems.BACKPACK_MEDIUM,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),null,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_10K,SlimefunItems.BACKPACK_SMALL,SlimefunItems.GOLD_10K,new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER)}).register(true);
  new SlimefunBackpack(27,Categories.PORTABLE,SlimefunItems.BACKPACK_LARGE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.LEATHER),null,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_14K,SlimefunItems.BACKPACK_MEDIUM,SlimefunItems.GOLD_14K,new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER),new ItemStack(Material.LEATHER)}).register(true);
  new SlimefunBackpack(36,Categories.PORTABLE,SlimefunItems.WOVEN_BACKPACK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,null,SlimefunItems.CLOTH,SlimefunItems.GOLD_16K,SlimefunItems.BACKPACK_LARGE,SlimefunItems.GOLD_16K,SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH}).register(true);
  new SlimefunGadget(Categories.MACHINES_1,SlimefunItems.CRUCIBLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.HARD_CLAY),null,new ItemStack(Material.HARD_CLAY),new ItemStack(Material.HARD_CLAY),null,new ItemStack(Material.HARD_CLAY),new ItemStack(Material.HARD_CLAY),new ItemStack(Material.FLINT_AND_STEEL),new ItemStack(Material.HARD_CLAY)},new ItemStack[]{new ItemStack(Material.COBBLESTONE,16),new ItemStack(Material.LAVA_BUCKET),new ItemStack(Material.LEAVES,16),new ItemStack(Material.WATER_BUCKET),new ItemStack(Material.HARD_CLAY,12),new ItemStack(Material.LAVA_BUCKET)}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    final Player p,    ItemStack item){
      if (e.getClickedBlock() != null) {
        SlimefunItem machine=BlockStorage.check(e.getClickedBlock());
        if (machine != null && machine.getName().equals(""String_Node_Str"")) {
          final ItemStack input=p.getItemInHand();
          final Block block=e.getClickedBlock().getRelative(BlockFace.UP);
          for (          ItemStack convert : RecipeType.getRecipeInputs(machine)) {
            if (input != null) {
              if (SlimefunManager.isItemSimiliar(input,convert,true)) {
                e.setCancelled(true);
                ItemStack removing=input.clone();
                removing.setAmount(convert.getAmount());
                p.getInventory().removeItem(removing);
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                  @Override public void run(){
                    if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                      block.setType(Material.LAVA);
                      block.setData((byte)7);
                      block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                    }
 else                     if (input.getType() == Material.LEAVES) {
                      block.setType(Material.WATER);
                      block.setData((byte)7);
                      block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                    }
                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                      @Override public void run(){
                        if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                          block.setType(Material.LAVA);
                          block.setData((byte)6);
                          block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                        }
 else                         if (input.getType() == Material.LEAVES) {
                          block.setType(Material.WATER);
                          block.setData((byte)6);
                          block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                        }
                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                          @Override public void run(){
                            if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                              block.setType(Material.LAVA);
                              block.setData((byte)5);
                              block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                            }
 else                             if (input.getType() == Material.LEAVES) {
                              block.setType(Material.WATER);
                              block.setData((byte)5);
                              block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                            }
                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                              @Override public void run(){
                                if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                  block.setType(Material.LAVA);
                                  block.setData((byte)4);
                                  block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                }
 else                                 if (input.getType() == Material.LEAVES) {
                                  block.setType(Material.WATER);
                                  block.setData((byte)4);
                                  block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                }
                                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                  @Override public void run(){
                                    if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                      block.setType(Material.LAVA);
                                      block.setData((byte)3);
                                      block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                    }
 else                                     if (input.getType() == Material.LEAVES) {
                                      block.setType(Material.WATER);
                                      block.setData((byte)3);
                                      block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                    }
                                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                      @Override public void run(){
                                        if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                          block.setType(Material.LAVA);
                                          block.setData((byte)2);
                                          block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                        }
 else                                         if (input.getType() == Material.LEAVES) {
                                          block.setType(Material.WATER);
                                          block.setData((byte)2);
                                          block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                        }
                                        Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                          @Override public void run(){
                                            if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                              block.setType(Material.LAVA);
                                              block.setData((byte)1);
                                              block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                            }
 else                                             if (input.getType() == Material.LEAVES) {
                                              block.setType(Material.WATER);
                                              block.setData((byte)1);
                                              block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                            }
                                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                                              @Override public void run(){
                                                if (input.getType() == Material.COBBLESTONE || input.getType() == Material.HARD_CLAY) {
                                                  block.setType(Material.STATIONARY_LAVA);
                                                  block.setData((byte)0);
                                                  block.getWorld().playSound(block.getLocation(),Sound.BLOCK_LAVA_POP,1F,1F);
                                                }
 else                                                 if (input.getType() == Material.LEAVES) {
                                                  block.setType(Material.WATER);
                                                  block.setData((byte)0);
                                                  block.getWorld().playSound(block.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                                                }
                                              }
                                            }
,50L);
                                          }
                                        }
,50L);
                                      }
                                    }
,50L);
                                  }
                                }
,50L);
                              }
                            }
,50L);
                          }
                        }
,50L);
                      }
                    }
,50L);
                  }
                }
,50L);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
          return true;
        }
      }
      return false;
    }
  }
);
  new SlimefunBackpack(45,Categories.PORTABLE,SlimefunItems.GILDED_BACKPACK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_22K,null,SlimefunItems.GOLD_22K,new ItemStack(Material.LEATHER),SlimefunItems.WOVEN_BACKPACK,new ItemStack(Material.LEATHER),SlimefunItems.GOLD_22K,null,SlimefunItems.GOLD_22K}).register(true);
  new Alloy(Categories.TECH_MISC,SlimefunItems.MAGNET,""String_Node_Str"",new ItemStack[]{SlimefunItems.NICKEL_INGOT,SlimefunItems.ALUMINUM_DUST,SlimefunItems.IRON_DUST,SlimefunItems.COBALT_INGOT,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFUSED_MAGNET,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.ENDER_LUMP_2,SlimefunItems.MAGNET,SlimefunItems.ENDER_LUMP_2,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3}).register(true);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.COBALT_PICKAXE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COBALT_INGOT,SlimefunItems.COBALT_INGOT,SlimefunItems.COBALT_INGOT,null,SlimefunItems.NICKEL_INGOT,null,null,SlimefunItems.NICKEL_INGOT,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.NECROTIC_SKULL,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3,null,new MaterialData(Material.SKULL_ITEM,(byte)1).toItemStack(1),null,SlimefunItems.MAGIC_LUMP_3,null,SlimefunItems.MAGIC_LUMP_3}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ESSENCE_OF_AFTERLIFE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_AIR,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_EARTH,SlimefunItems.NECROTIC_SKULL,SlimefunItems.RUNE_FIRE,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_WATER,SlimefunItems.ENDER_LUMP_3}).register(true);
  new SoulboundBackpack(36,Categories.PORTABLE,SlimefunItems.BOUND_BACKPACK,""String_Node_Str"",new ItemStack[]{SlimefunItems.ENDER_LUMP_2,null,SlimefunItems.ENDER_LUMP_2,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.GILDED_BACKPACK,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.ENDER_LUMP_2,null,SlimefunItems.ENDER_LUMP_2}).register(true);
  new JetBoots(SlimefunItems.DURALUMIN_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.35).register(true);
  new JetBoots(SlimefunItems.SOLDER_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.SOLDER_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.SOLDER_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.4).register(true);
  new JetBoots(SlimefunItems.BILLON_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.BILLON_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BILLON_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.45).register(true);
  new JetBoots(SlimefunItems.STEEL_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.5).register(true);
  new JetBoots(SlimefunItems.DAMASCUS_STEEL_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.55).register(true);
  new JetBoots(SlimefunItems.REINFORCED_ALLOY_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.STEEL_THRUSTER,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.6).register(true);
  new JetBoots(SlimefunItems.CARBONADO_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.CARBONADO,SlimefunItems.POWER_CRYSTAL,SlimefunItems.CARBONADO,SlimefunItems.STEEL_THRUSTER,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.7).register(true);
  new JetBoots(SlimefunItems.ARMORED_JETBOOTS,""String_Node_Str"",new ItemStack[]{null,null,null,SlimefunItems.STEEL_PLATE,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_PLATE,SlimefunItems.STEEL_THRUSTER,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_THRUSTER},0.45).register(true);
  new SlimefunItem(Categories.WEAPONS,SlimefunItems.SEISMIC_AXE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.HARDENED_METAL_INGOT,null,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.STAFF_ELEMENTAL,null,null,SlimefunItems.STAFF_ELEMENTAL,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.SEISMIC_AXE,true)) {
        List<Block> blocks=p.getLineOfSight((HashSet<Material>)null,10);
        for (int i=0; i < blocks.size(); i++) {
          Block b=blocks.get(i);
          Location ground=b.getLocation();
          if (b.getType() == null || b.getType() == Material.AIR) {
            for (int y=ground.getBlockY(); y > 0; y--) {
              if (b.getWorld().getBlockAt(b.getX(),y,b.getZ()) != null) {
                if (b.getWorld().getBlockAt(b.getX(),y,b.getZ()).getType() != null) {
                  if (b.getWorld().getBlockAt(b.getX(),y,b.getZ()).getType() != Material.AIR) {
                    ground=new Location(b.getWorld(),b.getX(),y,b.getZ());
                    break;
                  }
                }
              }
            }
          }
          b.getWorld().playEffect(ground,Effect.STEP_SOUND,ground.getBlock().getType());
          if (ground.getBlock().getRelative(BlockFace.UP).getType() == null || ground.getBlock().getRelative(BlockFace.UP).getType() == Material.AIR) {
            FallingBlock block=ground.getWorld().spawnFallingBlock(ground.getBlock().getRelative(BlockFace.UP).getLocation(),ground.getBlock().getType(),ground.getBlock().getData());
            block.setDropItem(false);
            block.setVelocity(new Vector(0,0.4 + i * 0.01,0));
            Variables.blocks.add(block.getUniqueId());
          }
          for (          Entity n : ground.getChunk().getEntities()) {
            if (n instanceof LivingEntity) {
              if (n.getLocation().distance(ground) <= 2.0D && n.getUniqueId() != p.getUniqueId()) {
                Vector vector=n.getLocation().toVector().subtract(p.getLocation().toVector()).normalize().multiply(1.4);
                vector.setY(0.9);
                n.setVelocity(vector);
                if (p.getWorld().getPVP()) {
                  EntityDamageByEntityEvent event=new EntityDamageByEntityEvent(p,n,DamageCause.ENTITY_ATTACK,6D);
                  Bukkit.getPluginManager().callEvent(event);
                  if (!event.isCancelled())                   ((LivingEntity)n).damage(6D);
                }
              }
            }
          }
        }
        for (int i=0; i < 4; i++) {
          if (e.getPlayer().getItemInHand() != null) {
            if (e.getPlayer().getItemInHand().getEnchantments().containsKey(Enchantment.DURABILITY)) {
              if (SlimefunStartup.randomize(100) <= (60 + 40 / (e.getPlayer().getItemInHand().getEnchantmentLevel(Enchantment.DURABILITY) + 1)))               PlayerInventory.damageItemInHand(e.getPlayer());
            }
 else             PlayerInventory.damageItemInHand(e.getPlayer());
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TOOLS,SlimefunItems.PICKAXE_OF_VEIN_MINING,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.EMERALD_ORE),SlimefunItems.SYNTHETIC_DIAMOND,new ItemStack(Material.EMERALD_ORE),null,SlimefunItems.GILDED_IRON,null,null,SlimefunItems.GILDED_IRON,null}).register(true,new BlockBreakHandler(){
    @Override public boolean onBlockBreak(    BlockBreakEvent e,    ItemStack item,    int fortune,    List<ItemStack> drops){
      if (SlimefunManager.isItemSimiliar(e.getPlayer().getItemInHand(),SlimefunItems.PICKAXE_OF_VEIN_MINING,true)) {
        if (e.getBlock().getType().toString().endsWith(""String_Node_Str"")) {
          List<Location> blocks=new ArrayList<Location>();
          Vein.calculate(e.getBlock().getLocation(),e.getBlock().getLocation(),blocks,16);
          for (          Location block : blocks) {
            Block b=block.getBlock();
            b.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,b.getType());
            for (            ItemStack drop : b.getDrops()) {
              b.getWorld().dropItemNaturally(b.getLocation(),drop.getType().isBlock() ? drop : new CustomItem(drop,fortune));
            }
            b.setType(Material.AIR);
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SoulboundItem(Categories.WEAPONS,SlimefunItems.SOULBOUND_SWORD,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_SWORD),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.WEAPONS,SlimefunItems.SOULBOUND_BOW,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.BOW),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.TOOLS,SlimefunItems.SOULBOUND_PICKAXE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_PICKAXE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.TOOLS,SlimefunItems.SOULBOUND_AXE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_AXE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new ExcludedSoulboundTool(Categories.TOOLS,SlimefunItems.SOULBOUND_SHOVEL,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_SPADE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new ExcludedSoulboundTool(Categories.TOOLS,SlimefunItems.SOULBOUND_HOE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_HOE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_HELMET,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_HELMET),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_CHESTPLATE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_CHESTPLATE),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_LEGGINGS,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_LEGGINGS),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SoulboundItem(Categories.MAGIC_ARMOR,SlimefunItems.SOULBOUND_BOOTS,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null,null,new ItemStack(Material.DIAMOND_BOOTS),null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new SlimefunMachine(Categories.MACHINES_1,SlimefunItems.JUICER,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.GLASS),null,null,new ItemStack(Material.NETHER_FENCE),null,null,new CustomItem(Material.DISPENSER,""String_Node_Str"",0),null},new ItemStack[]{new ItemStack(Material.APPLE),SlimefunItems.APPLE_JUICE,new ItemStack(Material.MELON),SlimefunItems.MELON_JUICE,new ItemStack(Material.CARROT_ITEM),SlimefunItems.CARROT_JUICE,new ItemStack(Material.PUMPKIN),SlimefunItems.PUMPKIN_JUICE},Material.NETHER_FENCE).register(true,new MultiBlockInteractionHandler(){
    @Override public boolean onInteract(    Player p,    MultiBlock mb,    Block b){
      SlimefunMachine machine=(SlimefunMachine)SlimefunItem.getByName(""String_Node_Str"");
      if (mb.isMultiBlock(machine)) {
        if (Slimefun.hasUnlocked(p,SlimefunItems.JUICER,true)) {
          Dispenser disp=(Dispenser)b.getRelative(BlockFace.DOWN).getState();
          Inventory inv=disp.getInventory();
          for (          ItemStack current : inv.getContents()) {
            for (            ItemStack convert : RecipeType.getRecipeInputs(machine)) {
              if (convert != null && SlimefunManager.isItemSimiliar(current,convert,true)) {
                ItemStack adding=RecipeType.getRecipeOutput(machine,convert);
                if (InvUtils.fits(inv,adding)) {
                  ItemStack removing=current.clone();
                  removing.setAmount(1);
                  inv.removeItem(removing);
                  inv.addItem(adding);
                  p.getWorld().playSound(b.getLocation(),Sound.ENTITY_PLAYER_SPLASH,1F,1F);
                  p.getWorld().playEffect(b.getLocation(),Effect.STEP_SOUND,Material.HAY_BLOCK);
                }
 else                 Messages.local.sendTranslation(p,""String_Node_Str"",true);
                return true;
              }
            }
          }
          Messages.local.sendTranslation(p,""String_Node_Str"",true);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new Juice(Categories.FOOD,SlimefunItems.APPLE_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.APPLE),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.CARROT_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.CARROT_ITEM),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.MELON_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.MELON),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.PUMPKIN_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{null,null,null,null,new ItemStack(Material.PUMPKIN),null,null,null,null}).register(true);
  new Juice(Categories.FOOD,SlimefunItems.GOLDE_APPLE_JUICE,""String_Node_Str"",RecipeType.JUICER,new ItemStack[]{new ItemStack(Material.GOLDEN_APPLE),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.BROKEN_SPAWNER,""String_Node_Str"",new RecipeType(SlimefunItems.PICKAXE_OF_CONTAINMENT),new ItemStack[]{null,null,null,null,new ItemStack(Material.MOB_SPAWNER),null,null,null,null}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.REPAIRED_SPAWNER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.RUNE_ENDER,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.ESSENCE_OF_AFTERLIFE,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.BROKEN_SPAWNER,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.ESSENCE_OF_AFTERLIFE,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0),SlimefunItems.RUNE_ENDER}).register(true,new BlockPlaceHandler(){
    @Override public boolean onBlockPlace(    BlockPlaceEvent e,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.REPAIRED_SPAWNER,false)) {
        EntityType type=null;
        for (        String line : item.getItemMeta().getLore()) {
          if (ChatColor.stripColor(line).startsWith(""String_Node_Str""))           type=EntityType.valueOf(ChatColor.stripColor(line).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toUpperCase());
        }
        if (type != null) {
          ((CreatureSpawner)e.getBlock().getState()).setSpawnedType(type);
          e.getBlock().getState().update(true,false);
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.MILK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.MILK_BUCKET),new ItemStack(Material.GLASS_BOTTLE),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.MILK,4)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHOCOLATE_MILK,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MILK,new CustomItem(Material.INK_SACK,3),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.CHOCOLATE_MILK,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.EGG_NOG,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.MILK,new ItemStack(Material.EGG),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.EGG_NOG,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.APPLE_CIDER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.APPLE_JUICE,new ItemStack(Material.SUGAR),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.APPLE_CIDER,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHRISTMAS_COOKIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.COOKIE),new ItemStack(Material.SUGAR),new CustomItem(Material.INK_SACK,10),null,null,null,null,null,null},new CustomItem(SlimefunItems.CHRISTMAS_COOKIE,16)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.FRUIT_CAKE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.EGG),new ItemStack(Material.APPLE),new ItemStack(Material.MELON),new ItemStack(Material.SUGAR),null,null,null,null,null},new CustomItem(SlimefunItems.FRUIT_CAKE,4)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.APPLE_PIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.APPLE),new ItemStack(Material.EGG),null,null,null,null,null,null},new CustomItem(SlimefunItems.APPLE_PIE,2)).register(true);
  new EnhancedFurnace(1,1,1,SlimefunItems.ENHANCED_FURNACE,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,new ItemStack(Material.FURNACE),SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(2,1,1,SlimefunItems.ENHANCED_FURNACE_2,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(2,2,1,SlimefunItems.ENHANCED_FURNACE_3,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_2,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(3,2,1,SlimefunItems.ENHANCED_FURNACE_4,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_3,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(3,2,2,SlimefunItems.ENHANCED_FURNACE_5,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_4,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(3,3,2,SlimefunItems.ENHANCED_FURNACE_6,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_5,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(4,3,2,SlimefunItems.ENHANCED_FURNACE_7,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_6,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(4,4,2,SlimefunItems.ENHANCED_FURNACE_8,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_7,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(5,4,2,SlimefunItems.ENHANCED_FURNACE_9,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_8,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(5,5,2,SlimefunItems.ENHANCED_FURNACE_10,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_9,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(5,5,3,SlimefunItems.ENHANCED_FURNACE_11,""String_Node_Str"",new ItemStack[]{null,SlimefunItems.BASIC_CIRCUIT_BOARD,null,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_10,SlimefunItems.HEATING_COIL,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new EnhancedFurnace(10,10,3,SlimefunItems.REINFORCED_FURNACE,""String_Node_Str"",new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.ENHANCED_FURNACE_11,SlimefunItems.HEATING_COIL,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT}).register(true);
  new EnhancedFurnace(20,10,3,SlimefunItems.CARBONADO_EDGED_FURNACE,""String_Node_Str"",new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.CARBONADO,SlimefunItems.HEATING_COIL,SlimefunItems.REINFORCED_FURNACE,SlimefunItems.HEATING_COIL,SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.ELECTRO_MAGNET,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.NICKEL_INGOT,SlimefunItems.MAGNET,SlimefunItems.COBALT_INGOT,null,SlimefunItems.BATTERY,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.ELECTRIC_MOTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,null,SlimefunItems.ELECTRO_MAGNET,null,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.HEATING_COIL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT}).register(true);
  @SuppressWarnings(""String_Node_Str"") final String[] blockPlacerBlacklist=Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"") != null ? ((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).toArray(new String[((List<String>)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str"")).size()]) : new String[]{""String_Node_Str""};
  new SlimefunItem(Categories.MACHINES_1,SlimefunItems.BLOCK_PLACER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_4K,new ItemStack(Material.PISTON_BASE),SlimefunItems.GOLD_4K,new ItemStack(Material.IRON_INGOT),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.IRON_INGOT),SlimefunItems.GOLD_4K,new ItemStack(Material.PISTON_BASE),SlimefunItems.GOLD_4K},new String[]{""String_Node_Str""},new Object[]{Arrays.asList(""String_Node_Str"")}).register(true,new AutonomousMachineHandler(){
    @Override public boolean onBlockDispense(    final BlockDispenseEvent e,    Block dispenser,    final Dispenser d,    Block block,    Block chest,    SlimefunItem machine){
      if (machine.getName().equalsIgnoreCase(""String_Node_Str"")) {
        e.setCancelled(true);
        if ((block.getType() == null || block.getType() == Material.AIR) && e.getItem().getType().isBlock()) {
          for (          String blockType : blockPlacerBlacklist) {
            if (e.getItem().getType().toString().equals(blockType)) {
              return false;
            }
          }
          SlimefunItem sfItem=SlimefunItem.getByItem(e.getItem());
          if (sfItem != null) {
            if (!SlimefunItem.blockhandler.containsKey(sfItem.getName())) {
              block.setType(e.getItem().getType());
              block.setData(e.getItem().getData().getData());
              BlockStorage.store(block,sfItem.getName());
              block.getWorld().playEffect(block.getLocation(),Effect.STEP_SOUND,e.getItem().getType());
              if (d.getInventory().containsAtLeast(e.getItem(),2))               d.getInventory().removeItem(new CustomItem(e.getItem(),1));
 else {
                Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                  @Override public void run(){
                    d.getInventory().removeItem(e.getItem());
                  }
                }
,2L);
              }
            }
          }
 else {
            block.setType(e.getItem().getType());
            block.setData(e.getItem().getData().getData());
            block.getWorld().playEffect(block.getLocation(),Effect.STEP_SOUND,e.getItem().getType());
            if (d.getInventory().containsAtLeast(e.getItem(),2))             d.getInventory().removeItem(new CustomItem(e.getItem(),1));
 else {
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
                @Override public void run(){
                  d.getInventory().removeItem(e.getItem());
                }
              }
,2L);
            }
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.HOT_CHOCOLATE,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{SlimefunItems.CHOCOLATE_MILK,null,null,null,null,null,null,null,null},SlimefunItems.HOT_CHOCOLATE).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHRISTMAS_CAKE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.EGG),new ItemStack(Material.SUGAR),SlimefunItems.WHEAT_FLOUR,new ItemStack(Material.MILK_BUCKET),null,null,null,null,null},new CustomItem(SlimefunItems.FRUIT_CAKE,4)).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.SCROLL_OF_DIMENSIONAL_TELEPOSITION,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGICAL_BOOK_COVER,SlimefunItems.ENDER_LUMP_3,SlimefunItems.MAGIC_EYE_OF_ENDER,SlimefunItems.ENDER_LUMP_3,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.SCROLL_OF_DIMENSIONAL_TELEPOSITION,true)) {
        for (        Entity n : p.getNearbyEntities(10.0,10.0,10.0)) {
          if (n instanceof LivingEntity && !(n instanceof ArmorStand) && n.getUniqueId() != p.getUniqueId()) {
            float yaw=n.getLocation().getYaw() + 180.0F;
            if (yaw > 360.0F)             yaw=yaw - 360.0F;
            n.teleport(new Location(n.getWorld(),n.getLocation().getX(),n.getLocation().getY(),n.getLocation().getZ(),yaw,n.getLocation().getPitch()));
          }
        }
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CARAMEL,""String_Node_Str"",RecipeType.SMELTERY,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.SUGAR),null,null,null,null,null,null,null},new CustomItem(SlimefunItems.CARAMEL,4)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CARAMEL_APPLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.SUGAR),null,null,new ItemStack(Material.APPLE),null,null,new ItemStack(Material.STICK),null},new CustomItem(SlimefunItems.CARAMEL_APPLE,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.CHOCOLATE_APPLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new CustomItem(Material.INK_SACK,3),null,null,new ItemStack(Material.APPLE),null,null,new ItemStack(Material.STICK),null},new CustomItem(SlimefunItems.CARAMEL_APPLE,2)).register(true);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.PRESENT,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.NAME_TAG),null,new CustomItem(new MaterialData(Material.WOOL,(byte)14),1),new CustomItem(new MaterialData(Material.WOOL,(byte)13),1),new CustomItem(new MaterialData(Material.WOOL,(byte)14),1),new CustomItem(new MaterialData(Material.WOOL,(byte)14),1),new CustomItem(new MaterialData(Material.WOOL,(byte)13),1),new CustomItem(new MaterialData(Material.WOOL,(byte)14),1)}).register(true);
  new SlimefunBow(SlimefunItems.EXPLOSIVE_BOW,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.STICK),new ItemStack(Material.SULPHUR),SlimefunItems.STAFF_FIRE,null,SlimefunItems.SULFATE,null,new ItemStack(Material.STICK),new ItemStack(Material.SULPHUR)}).register(true,new BowShootHandler(){
    @Override public boolean onHit(    EntityDamageByEntityEvent e,    LivingEntity n){
      if (SlimefunManager.isItemSimiliar(Variables.arrows.get(e.getDamager().getUniqueId()),SlimefunItems.EXPLOSIVE_BOW,true)) {
        Vector vector=n.getVelocity();
        vector.setY(0.6);
        n.setVelocity(vector);
        n.getWorld().createExplosion(n.getLocation(),0F);
        n.getWorld().playSound(n.getLocation(),Sound.ENTITY_GENERIC_EXPLODE,1F,1F);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunBow(SlimefunItems.ICY_BOW,""String_Node_Str"",new ItemStack[]{null,new ItemStack(Material.STICK),new ItemStack(Material.ICE),SlimefunItems.STAFF_WATER,null,new ItemStack(Material.PACKED_ICE),null,new ItemStack(Material.STICK),new ItemStack(Material.ICE)}).register(true,new BowShootHandler(){
    @Override public boolean onHit(    EntityDamageByEntityEvent e,    LivingEntity n){
      if (SlimefunManager.isItemSimiliar(Variables.arrows.get(e.getDamager().getUniqueId()),SlimefunItems.ICY_BOW,true)) {
        n.getWorld().playEffect(n.getLocation(),Effect.STEP_SOUND,Material.ICE);
        n.getWorld().playEffect(n.getEyeLocation(),Effect.STEP_SOUND,Material.ICE);
        n.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,20 * 2,10));
        n.addPotionEffect(new PotionEffect(PotionEffectType.JUMP,20 * 2,-10));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.TOME_OF_KNOWLEDGE_SHARING,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.FEATHER),null,new ItemStack(Material.INK_SACK),SlimefunItems.MAGICAL_BOOK_COVER,new ItemStack(Material.GLASS_BOTTLE),null,new ItemStack(Material.BOOK_AND_QUILL),null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.TOME_OF_KNOWLEDGE_SHARING,true)) {
        List<String> lore=item.getItemMeta().getLore();
        lore.set(0,ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + p.getName()));
        lore.set(1,ChatColor.BLACK + ""String_Node_Str"" + p.getUniqueId());
        ItemMeta im=item.getItemMeta();
        im.setLore(lore);
        item.setItemMeta(im);
        p.setItemInHand(item);
        p.getWorld().playSound(p.getLocation(),Sound.ENTITY_PLAYER_LEVELUP,1F,1F);
        return true;
      }
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.TOME_OF_KNOWLEDGE_SHARING,false)) {
        List<Research> researches=Research.getResearches(ChatColor.stripColor(item.getItemMeta().getLore().get(1)));
        for (        Research research : researches) {
          research.unlock(p,true);
        }
        PlayerInventory.consumeItemInHand(p);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.FLASK_OF_KNOWLEDGE,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,null,null,SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.THIN_GLASS),SlimefunItems.MAGIC_LUMP_2,null,SlimefunItems.MAGIC_LUMP_2,null},new CustomItem(SlimefunItems.FLASK_OF_KNOWLEDGE,8)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.FLASK_OF_KNOWLEDGE,true) && p.getLevel() >= 1) {
        p.setLevel(p.getLevel() - 1);
        p.getInventory().addItem(new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0));
        PlayerInventory.consumeItemInHand(p);
        PlayerInventory.update(p);
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.REINFORCED_PLATE,""String_Node_Str"",RecipeType.COMPRESSOR,new ItemStack[]{new CustomItem(SlimefunItems.REINFORCED_ALLOY_INGOT,8),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.HARDENED_GLASS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),SlimefunItems.REINFORCED_PLATE,new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS),new ItemStack(Material.GLASS)},new CustomItem(SlimefunItems.HARDENED_GLASS,16)).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.SOLAR_ARRAY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS}).register(true);
  new SlimefunItem(Categories.EASTER,SlimefunItems.CARROT_PIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.CARROT_ITEM),new ItemStack(Material.EGG),null,null,null,null,null,null},new CustomItem(SlimefunItems.CARROT_PIE,2)).register(true);
  new SlimefunItem(Categories.EASTER,SlimefunItems.APPLE_PIE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.SUGAR),new ItemStack(Material.APPLE),new ItemStack(Material.EGG),null,null,null,null,null,null},new CustomItem(SlimefunItems.APPLE_PIE,2)).register(true);
  new SlimefunItem(Categories.EASTER,SlimefunItems.EASTER_EGG,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new MaterialData(Material.INK_SACK,(byte)10).toItemStack(1),new ItemStack(Material.EGG),new MaterialData(Material.INK_SACK,(byte)13).toItemStack(1),null,null,null},new CustomItem(SlimefunItems.EASTER_EGG,2)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.EASTER_EGG,true)) {
        e.setCancelled(true);
        PlayerInventory.consumeItemInHand(e.getPlayer());
        FireworkShow.launchRandom(e.getPlayer(),2);
        List<ItemStack> gifts=new ArrayList<ItemStack>();
        for (int i=0; i < 2; i++) {
          gifts.add(new CustomItem(SlimefunItems.CARROT_PIE,4));
          gifts.add(new CustomItem(SlimefunItems.APPLE_PIE,4));
          gifts.add(new CustomItem(SlimefunItems.CARROT_JUICE,1));
        }
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        gifts.add(new SkullItem(""String_Node_Str""));
        p.getWorld().dropItemNaturally(p.getLocation(),gifts.get(SlimefunStartup.randomize(gifts.size())));
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.COOLING_UNIT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.ICE),new ItemStack(Material.ICE),new ItemStack(Material.ICE),SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_INGOT,new ItemStack(Material.ICE),new ItemStack(Material.ICE),new ItemStack(Material.ICE)}).register(true);
  new SlimefunBackpack(27,Categories.PORTABLE,SlimefunItems.COOLER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.CLOTH,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.COOLING_UNIT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.WITHER_PROOF_OBSIDIAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,new ItemStack(Material.OBSIDIAN),SlimefunItems.LEAD_INGOT,new ItemStack(Material.OBSIDIAN),SlimefunItems.HARDENED_GLASS,new ItemStack(Material.OBSIDIAN),SlimefunItems.LEAD_INGOT,new ItemStack(Material.OBSIDIAN),SlimefunItems.LEAD_INGOT},new CustomItem(SlimefunItems.WITHER_PROOF_OBSIDIAN,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.ANCIENT_PEDESTAL,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{new ItemStack(Material.OBSIDIAN),SlimefunItems.GOLD_8K,new ItemStack(Material.OBSIDIAN),null,new ItemStack(Material.STONE),null,new ItemStack(Material.OBSIDIAN),SlimefunItems.GOLD_8K,new ItemStack(Material.OBSIDIAN)},new CustomItem(SlimefunItems.ANCIENT_PEDESTAL,4)).register(true);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Item stack=AncientAltarListener.findItem(b);
      if (stack != null)       stack.removeMetadata(""String_Node_Str"",SlimefunStartup.instance);
      return true;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.ANCIENT_ALTAR,""String_Node_Str"",RecipeType.MAGIC_WORKBENCH,new ItemStack[]{null,new ItemStack(Material.ENCHANTMENT_TABLE),null,SlimefunItems.MAGIC_LUMP_3,SlimefunItems.GOLD_8K,SlimefunItems.MAGIC_LUMP_3,new ItemStack(Material.OBSIDIAN),SlimefunItems.GOLD_8K,new ItemStack(Material.OBSIDIAN)}).register(true);
  new SlimefunItem(Categories.BIRTHDAY,new CustomItem(new MaterialData(Material.CAKE),""String_Node_Str""),""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.TORCH),null,new ItemStack(Material.SUGAR),new ItemStack(Material.CAKE),new ItemStack(Material.SUGAR),null,null,null}).register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.ENERGY_REGULATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SILVER_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.SILVER_INGOT}).register(true,new BlockTicker(){
    @Override public boolean isSynchronized(){
      return false;
    }
    @Override public void uniqueTick(){
    }
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      EnergyNet.tick(b);
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      EnergyHologram.remove(b);
      return true;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.DUCT_TAPE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ALUMINUM_DUST,SlimefunItems.ALUMINUM_DUST,SlimefunItems.ALUMINUM_DUST,new ItemStack(Material.SLIME_BALL),new ItemStack(Material.WOOL),new ItemStack(Material.SLIME_BALL),new ItemStack(Material.PAPER),new ItemStack(Material.PAPER),new ItemStack(Material.PAPER)},new CustomItem(SlimefunItems.DUCT_TAPE,2)).register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SMALL_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DURALUMIN_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.DURALUMIN_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.SULFATE,new ItemStack(Material.REDSTONE),SlimefunItems.DURALUMIN_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.DURALUMIN_INGOT}).registerDistibutingCapacitor(true,128);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.MEDIUM_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BILLON_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.BILLON_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.SMALL_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.BILLON_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.BILLON_INGOT}).registerDistibutingCapacitor(true,512);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.BIG_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.STEEL_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.MEDIUM_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.STEEL_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.STEEL_INGOT}).registerDistibutingCapacitor(true,1024);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.LARGE_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.REINFORCED_ALLOY_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.BIG_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.REINFORCED_ALLOY_INGOT}).registerDistibutingCapacitor(true,8192);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.CARBONADO_EDGED_CAPACITOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.CARBONADO,new ItemStack(Material.REDSTONE),SlimefunItems.LARGE_CAPACITOR,new ItemStack(Material.REDSTONE),SlimefunItems.CARBONADO,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.CARBONADO}).registerDistibutingCapacitor(true,65536);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.SOLAR_PANEL,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_INGOT,null,SlimefunItems.ALUMINUM_INGOT,null}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 2D;
      return 0D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_GENERATOR,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR,SlimefunItems.ALUMINUM_INGOT,new ItemStack(Material.REDSTONE),SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 8;
      return 0D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_GENERATOR_2,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR_2,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.CARBONADO,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR_2,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.SOLAR_GENERATOR_2}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 32;
      return 0D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.SOLAR_GENERATOR_4,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.SOLAR_GENERATOR_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.SOLAR_GENERATOR_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.SOLAR_GENERATOR_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.SOLAR_GENERATOR_3}).register(true,new EnergyTicker(){
    @Override public double generateEnergy(    Location l,    SlimefunItem item,    Config data){
      try {
        if (l.getBlock().getLightFromSky() != 15)         return 0D;
      }
 catch (      IllegalStateException x) {
        return 0D;
      }
      if (l.getWorld().getTime() < 12300 || l.getWorld().getTime() > 23850)       return 128;
      return 64D;
    }
    @Override public boolean explode(    Location l){
      return false;
    }
  }
);
  new ChargingBench(Categories.ELECTRICITY,SlimefunItems.CHARGING_BENCH,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRO_MAGNET,null,SlimefunItems.BATTERY,new ItemStack(Material.WORKBENCH),SlimefunItems.BATTERY,null,SlimefunItems.SMALL_CAPACITOR,null}).registerChargeableBlock(true,128);
  new ElectricFurnace(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_FURNACE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.FURNACE),null,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 2;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,64);
  new ElectricFurnace(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_FURNACE_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_FURNACE,SlimefunItems.GILDED_IRON,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 3;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricFurnace(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_FURNACE_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_FURNACE_2,SlimefunItems.STEEL_INGOT,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 5;
    }
    @Override public int getSpeed(){
      return 4;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricGoldPan(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_GOLD_PAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_PAN,null,new ItemStack(Material.FLINT),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.FLINT),SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.ALUMINUM_INGOT}){
    @Override public int getEnergyConsumption(){
      return 1;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricGoldPan(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_GOLD_PAN_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_PAN,null,new ItemStack(Material.IRON_INGOT),SlimefunItems.ELECTRIC_GOLD_PAN,new ItemStack(Material.IRON_INGOT),SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT,SlimefunItems.DURALUMIN_INGOT}){
    @Override public int getEnergyConsumption(){
      return 2;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricGoldPan(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_GOLD_PAN_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_PAN,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRIC_GOLD_PAN_2,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.COBALT_INGOT,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.COBALT_INGOT}){
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 10;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricDustWasher(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_DUST_WASHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WATER_BUCKET),null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_GOLD_PAN,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT,SlimefunItems.COPPER_INGOT}){
    @Override public int getEnergyConsumption(){
      return 3;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricDustWasher(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_DUST_WASHER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WATER_BUCKET),null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_DUST_WASHER,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT}){
    @Override public int getEnergyConsumption(){
      return 5;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,128);
  new ElectricDustWasher(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_DUST_WASHER_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WATER_BUCKET),null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_DUST_WASHER_2,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.CORINTHIAN_BRONZE_INGOT}){
    @Override public int getEnergyConsumption(){
      return 15;
    }
    @Override public int getSpeed(){
      return 10;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricIngotFactory(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_FACTORY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.FLINT_AND_STEEL),null,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_DUST_WASHER,SlimefunItems.HEATING_COIL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 4;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new ElectricIngotFactory(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_FACTORY_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GILDED_IRON,new ItemStack(Material.FLINT_AND_STEEL),SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_INGOT_FACTORY,SlimefunItems.HEATING_COIL,SlimefunItems.BRASS_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.BRASS_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,256);
  new ElectricIngotFactory(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_FACTORY_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GILDED_IRON,new ItemStack(Material.FLINT_AND_STEEL),SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_INGOT_FACTORY_2,SlimefunItems.HEATING_COIL,SlimefunItems.BRASS_INGOT,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.BRASS_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 20;
    }
    @Override public int getSpeed(){
      return 8;
    }
  }
.registerChargeableBlock(true,512);
  new ElectrifiedCrucible(Categories.ELECTRICITY,SlimefunItems.ELECTRIFIED_CRUCIBLE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.CRUCIBLE,SlimefunItems.LEAD_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.LARGE_CAPACITOR,SlimefunItems.LEAD_INGOT}){
    @Override public int getEnergyConsumption(){
      return 24;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,1024);
  new ElectrifiedCrucible(Categories.ELECTRICITY,SlimefunItems.ELECTRIFIED_CRUCIBLE_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.ELECTRIFIED_CRUCIBLE,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.LEAD_INGOT}){
    @Override public int getEnergyConsumption(){
      return 40;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,1024);
  new ElectrifiedCrucible(Categories.ELECTRICITY,SlimefunItems.ELECTRIFIED_CRUCIBLE_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.ELECTRIFIED_CRUCIBLE_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.STEEL_PLATE,SlimefunItems.POWER_CRYSTAL,SlimefunItems.STEEL_PLATE,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT}){
    @Override public int getEnergyConsumption(){
      return 60;
    }
    @Override public int getSpeed(){
      return 4;
    }
  }
.registerChargeableBlock(true,1024);
  new AContainer(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_ORE_GRINDER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.DIAMOND_PICKAXE),null,SlimefunItems.GILDED_IRON,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.STONE_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 6;
    }
    @Override public int getSpeed(){
      return 1;
    }
    @Override public String getMachineIdentifier(){
      return ""String_Node_Str"";
    }
  }
.registerChargeableBlock(true,128);
  new AContainer(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_ORE_GRINDER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.DIAMOND_PICKAXE),null,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_ORE_GRINDER,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 15;
    }
    @Override public int getSpeed(){
      return 4;
    }
    @Override public String getMachineIdentifier(){
      return ""String_Node_Str"";
    }
  }
.registerChargeableBlock(true,512);
  new HeatedPressureChamber(Categories.ELECTRICITY,SlimefunItems.HEATED_PRESSURE_CHAMBER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,new ItemStack(Material.GLASS),SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.LEAD_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public int getEnergyConsumption(){
      return 5;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,128);
  new HeatedPressureChamber(Categories.ELECTRICITY,SlimefunItems.HEATED_PRESSURE_CHAMBER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATED_PRESSURE_CHAMBER,SlimefunItems.LEAD_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.REINFORCED_ALLOY_INGOT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public int getEnergyConsumption(){
      return 22;
    }
    @Override public int getSpeed(){
      return 5;
    }
  }
.registerChargeableBlock(true,256);
  new AContainer(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_INGOT_PULVERIZER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRIC_ORE_GRINDER,null,SlimefunItems.LEAD_INGOT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.LEAD_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.LEAD_INGOT}){
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.IRON_PICKAXE);
    }
    @Override public void registerDefaultRecipes(){
      registerRecipe(3,new ItemStack[]{SlimefunItems.ALUMINUM_INGOT},new ItemStack[]{SlimefunItems.ALUMINUM_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.COPPER_INGOT},new ItemStack[]{SlimefunItems.COPPER_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.GOLD_4K},new ItemStack[]{SlimefunItems.GOLD_DUST});
      registerRecipe(3,new ItemStack[]{new ItemStack(Material.IRON_INGOT)},new ItemStack[]{SlimefunItems.IRON_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.LEAD_INGOT},new ItemStack[]{SlimefunItems.LEAD_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.MAGNESIUM_INGOT},new ItemStack[]{SlimefunItems.MAGNESIUM_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.SILVER_INGOT},new ItemStack[]{SlimefunItems.SILVER_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.TIN_INGOT},new ItemStack[]{SlimefunItems.TIN_DUST});
      registerRecipe(3,new ItemStack[]{SlimefunItems.ZINC_INGOT},new ItemStack[]{SlimefunItems.ZINC_DUST});
    }
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 1;
    }
    @Override public String getMachineIdentifier(){
      return ""String_Node_Str"";
    }
  }
.registerChargeableBlock(true,512);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.COAL_GENERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HEATING_COIL,new ItemStack(Material.FURNACE),SlimefunItems.HEATING_COIL,SlimefunItems.NICKEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.NICKEL_INGOT,null,SlimefunItems.NICKEL_INGOT,null}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(8,new MaterialData(Material.COAL,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(8,new MaterialData(Material.COAL,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(80,new ItemStack(Material.COAL_BLOCK)));
      registerFuel(new MachineFuel(12,new ItemStack(Material.BLAZE_ROD)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG_2,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LOG_2,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)4).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.WOOD,(byte)5).toItemStack(1)));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 8;
    }
  }
.registerUnrechargeableBlock(true,64);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.BIO_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HEATING_COIL,SlimefunItems.COMPOSTER,SlimefunItems.HEATING_COIL,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_BRASS_INGOT,null,SlimefunItems.ALUMINUM_BRASS_INGOT,null}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(2,new ItemStack(Material.ROTTEN_FLESH)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.SPIDER_EYE)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.BONE)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.APPLE)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.MELON)));
      registerFuel(new MachineFuel(27,new ItemStack(Material.MELON_BLOCK)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.PUMPKIN)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.PUMPKIN_SEEDS)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.MELON_SEEDS)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.WHEAT)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.SEEDS)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.CARROT_ITEM)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.POTATO_ITEM)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.SUGAR_CANE)));
      registerFuel(new MachineFuel(3,new ItemStack(Material.NETHER_STALK)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.YELLOW_FLOWER)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.RED_ROSE)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.RED_MUSHROOM)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.BROWN_MUSHROOM)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.VINE)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.CACTUS)));
      registerFuel(new MachineFuel(2,new ItemStack(Material.WATER_LILY)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES_2,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.LEAVES_2,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)0).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)1).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)2).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)3).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)4).toItemStack(1)));
      registerFuel(new MachineFuel(1,new MaterialData(Material.SAPLING,(byte)5).toItemStack(1)));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 4;
    }
  }
.registerUnrechargeableBlock(true,128);
  new AutoEnchanter(Categories.ELECTRICITY,SlimefunItems.AUTO_ENCHANTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.ENCHANTMENT_TABLE),null,SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN}).registerChargeableBlock(true,128);
  new AutoDisenchanter(Categories.ELECTRICITY,SlimefunItems.AUTO_DISENCHANTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.REDSTONE),new ItemStack(Material.ANVIL),new ItemStack(Material.REDSTONE),SlimefunItems.CARBONADO,SlimefunItems.AUTO_ENCHANTER,SlimefunItems.CARBONADO,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.WITHER_PROOF_OBSIDIAN}).registerChargeableBlock(true,128);
  new AutoAnvil(Categories.ELECTRICITY,SlimefunItems.AUTO_ANVIL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.ANVIL),null,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT,new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK)}){
    @Override public int getRepairFactor(){
      return 10;
    }
    @Override public int getEnergyConsumption(){
      return 12;
    }
  }
.registerChargeableBlock(true,128);
  new AutoAnvil(Categories.ELECTRICITY,SlimefunItems.AUTO_ANVIL_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.AUTO_ANVIL,null,SlimefunItems.STEEL_PLATE,SlimefunItems.HEATING_COIL,SlimefunItems.STEEL_PLATE,new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK),new ItemStack(Material.IRON_BLOCK)}){
    @Override public int getRepairFactor(){
      return 4;
    }
    @Override public int getEnergyConsumption(){
      return 16;
    }
  }
.registerChargeableBlock(true,256);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.MULTIMETER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.COPPER_INGOT,null,SlimefunItems.COPPER_INGOT,null,SlimefunItems.REDSTONE_ALLOY,null,null,SlimefunItems.GOLD_6K,null}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(e.getItem(),SlimefunItems.MULTIMETER,true)) {
        if (e.getClickedBlock() != null && ChargableBlock.isChargable(e.getClickedBlock())) {
          e.setCancelled(true);
          p.sendMessage(""String_Node_Str"");
          p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(ChargableBlock.getCharge(e.getClickedBlock())) + ""String_Node_Str""));
          p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(ChargableBlock.getMaxCharge(e.getClickedBlock())) + ""String_Node_Str""));
          p.sendMessage(""String_Node_Str"");
        }
        return true;
      }
      return false;
    }
  }
);
  new SlimefunItem(Categories.MISC,SlimefunItems.PLASTIC_SHEET,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{null,null,null,null,SlimefunItems.BUCKET_OF_OIL,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ANDROID_MEMORY_CORE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BRASS_INGOT,new MaterialData(Material.STAINED_GLASS,(byte)1).toItemStack(1),SlimefunItems.BRASS_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.TIN_DUST,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BRASS_INGOT,new MaterialData(Material.STAINED_GLASS,(byte)1).toItemStack(1),SlimefunItems.BRASS_INGOT}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.STEEL_INGOT,SlimefunItems.ADVANCED_CIRCUIT_BOARD,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_INGOT}).registerChargeableBlock(true,16,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 0) {
        Slimefun.getGPSNetwork().updateTransmitter(b,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 1);
      }
 else       Slimefun.getGPSNetwork().updateTransmitter(b,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(b,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TRANSMITTER,SlimefunItems.BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER,SlimefunItems.BRONZE_INGOT,SlimefunItems.CARBON,SlimefunItems.BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER,SlimefunItems.BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER}).registerChargeableBlock(true,64,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 2) {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 4 + 100,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 3);
      }
 else {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 4 + 100,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      }
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 4 + 100,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TRANSMITTER_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.CARBONADO,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER_2,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.GPS_TRANSMITTER_2}).registerChargeableBlock(true,256,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 10) {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 16 + 500,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 11);
      }
 else {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 16 + 500,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      }
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 16 + 500,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TRANSMITTER_4,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TRANSMITTER_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.GPS_TRANSMITTER_3,SlimefunItems.NICKEL_INGOT,SlimefunItems.CARBONADO,SlimefunItems.NICKEL_INGOT,SlimefunItems.GPS_TRANSMITTER_3,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.GPS_TRANSMITTER_3}).registerChargeableBlock(true,1024,new BlockTicker(){
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      int charge=ChargableBlock.getCharge(b);
      if (charge > 45) {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 64 + 800,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.ONLINE);
        ChargableBlock.setCharge(b,charge - 46);
      }
 else {
        Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 64 + 800,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      }
    }
    @Override public void uniqueTick(){
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      Slimefun.getGPSNetwork().updateTransmitter(new Location(b.getWorld(),b.getX(),b.getY() * 64 + 800,b.getZ()).getBlock(),UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),NetworkStatus.OFFLINE);
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_CONTROL_PANEL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.COBALT_INGOT,SlimefunItems.ADVANCED_CIRCUIT_BOARD,SlimefunItems.COBALT_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      try {
        Slimefun.getGPSNetwork().openTransmitterControlPanel(p);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      return true;
    }
  }
);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_MARKER_TOOL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),SlimefunItems.BASIC_CIRCUIT_BOARD,new MaterialData(Material.INK_SACK,(byte)4).toItemStack(1),new ItemStack(Material.REDSTONE),SlimefunItems.REDSTONE_ALLOY,new ItemStack(Material.REDSTONE)}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_EMERGENCY_TRANSMITTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.ELECTRO_MAGNET,null,null,SlimefunItems.GPS_TRANSMITTER,null,null,SlimefunItems.ESSENCE_OF_AFTERLIFE,null}).register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.PLASTIC_SHEET,SlimefunItems.COAL_GENERATOR,SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.CHEST),SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.NONE;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_MINER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.DIAMOND_PICKAXE),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_PICKAXE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.MINER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_FARMER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.DIAMOND_HOE),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_HOE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FARMER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_WOODCUTTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.DIAMOND_AXE),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_AXE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.WOODCUTTER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_FISHERMAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.FISHING_ROD),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.FISHING_ROD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FISHERMAN;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_BUTCHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER,null,new ItemStack(Material.DIAMOND_SWORD),SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.DIAMOND_SWORD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FIGHTER;
    }
    @Override public float getFuelEfficiency(){
      return 1;
    }
    @Override public int getTier(){
      return 1;
    }
  }
.register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.ANDROID_INTERFACE_ITEMS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.BASIC_CIRCUIT_BOARD,new MaterialData(Material.STAINED_GLASS,(byte)11).toItemStack(1),SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET}).register(true);
  new SlimefunItem(Categories.ELECTRICITY,SlimefunItems.ANDROID_INTERFACE_FUEL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,new MaterialData(Material.STAINED_GLASS,(byte)14).toItemStack(1),SlimefunItems.BASIC_CIRCUIT_BOARD,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET,SlimefunItems.PLASTIC_SHEET}).register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.PLASTIC_SHEET,SlimefunItems.COMBUSTION_REACTOR,SlimefunItems.PROGRAMMABLE_ANDROID,new ItemStack(Material.CHEST),SlimefunItems.PLASTIC_SHEET,SlimefunItems.POWER_CRYSTAL,SlimefunItems.PLASTIC_SHEET}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.NONE;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2_FISHERMAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.FISHING_ROD),SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.FISHING_ROD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FISHERMAN;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2_BUTCHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER,null,new ItemStack(Material.DIAMOND_SWORD),SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.DIAMOND_SWORD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FIGHTER;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_2_FARMER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER,null,new ItemStack(Material.DIAMOND_HOE),SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.DIAMOND_HOE),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.ADVANCED_FARMER;
    }
    @Override public float getFuelEfficiency(){
      return 1.5F;
    }
    @Override public int getTier(){
      return 2;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.PLASTIC_SHEET,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.PLASTIC_SHEET,SlimefunItems.NUCLEAR_REACTOR,SlimefunItems.PROGRAMMABLE_ANDROID_2,new ItemStack(Material.CHEST),SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.POWER_CRYSTAL,SlimefunItems.BLISTERING_INGOT_3}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.NONE;
    }
    @Override public float getFuelEfficiency(){
      return 1F;
    }
    @Override public int getTier(){
      return 3;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_3_FISHERMAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,null,new ItemStack(Material.FISHING_ROD),SlimefunItems.PROGRAMMABLE_ANDROID_3,new ItemStack(Material.FISHING_ROD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FISHERMAN;
    }
    @Override public float getFuelEfficiency(){
      return 1F;
    }
    @Override public int getTier(){
      return 3;
    }
  }
.register(true);
  new ProgrammableAndroid(Categories.ELECTRICITY,SlimefunItems.PROGRAMMABLE_ANDROID_3_BUTCHER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GPS_TRANSMITTER_3,null,new ItemStack(Material.DIAMOND_SWORD),SlimefunItems.PROGRAMMABLE_ANDROID_3,new ItemStack(Material.DIAMOND_SWORD),null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public AndroidType getAndroidType(){
      return AndroidType.FIGHTER;
    }
    @Override public float getFuelEfficiency(){
      return 1F;
    }
    @Override public int getTier(){
      return 3;
    }
  }
.register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.BLANK_RUNE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.OBSIDIAN),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE)}).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_AIR,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.FEATHER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.FEATHER),new ItemStack(Material.GHAST_TEAR),SlimefunItems.BLANK_RUNE,new ItemStack(Material.GHAST_TEAR),new ItemStack(Material.FEATHER),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.FEATHER)},new CustomItem(SlimefunItems.RUNE_AIR,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_EARTH,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.DIRT),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.STONE),new ItemStack(Material.OBSIDIAN),SlimefunItems.BLANK_RUNE,new ItemStack(Material.OBSIDIAN),new ItemStack(Material.STONE),SlimefunItems.MAGIC_LUMP_1,new ItemStack(Material.DIRT)},new CustomItem(SlimefunItems.RUNE_EARTH,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_FIRE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.FIREBALL),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.FIREBALL),new ItemStack(Material.BLAZE_POWDER),SlimefunItems.RUNE_EARTH,new ItemStack(Material.FLINT_AND_STEEL),new ItemStack(Material.FIREBALL),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.FIREBALL)},new CustomItem(SlimefunItems.RUNE_FIRE,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_WATER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.RAW_FISH),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.WATER_BUCKET),new ItemStack(Material.SAND),SlimefunItems.BLANK_RUNE,new ItemStack(Material.SAND),new ItemStack(Material.WATER_BUCKET),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.RAW_FISH)},new CustomItem(SlimefunItems.RUNE_WATER,4)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_ENDER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_3,new ItemStack(Material.ENDER_PEARL),new ItemStack(Material.EYE_OF_ENDER),SlimefunItems.BLANK_RUNE,new ItemStack(Material.EYE_OF_ENDER),new ItemStack(Material.ENDER_PEARL),SlimefunItems.ENDER_LUMP_3,new ItemStack(Material.ENDER_PEARL)},new CustomItem(SlimefunItems.RUNE_ENDER,6)).register(true);
  new SlimefunItem(Categories.LUMPS_AND_MAGIC,SlimefunItems.RUNE_RAINBOW,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.MAGIC_LUMP_3,new MaterialData(Material.INK_SACK,(byte)9).toItemStack(1),new ItemStack(Material.WOOL),SlimefunItems.RUNE_ENDER,new ItemStack(Material.WOOL),new MaterialData(Material.INK_SACK,(byte)11).toItemStack(1),SlimefunItems.ENDER_LUMP_3,new MaterialData(Material.INK_SACK,(byte)10).toItemStack(1)}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFERNAL_BONEMEAL,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.NETHER_STALK),SlimefunItems.RUNE_EARTH,new ItemStack(Material.NETHER_STALK),SlimefunItems.MAGIC_LUMP_2,new MaterialData(Material.INK_SACK,(byte)15).toItemStack(1),SlimefunItems.MAGIC_LUMP_2,new ItemStack(Material.NETHER_STALK),new ItemStack(Material.BLAZE_POWDER),new ItemStack(Material.NETHER_STALK)},new CustomItem(SlimefunItems.INFERNAL_BONEMEAL,8)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack item){
      if (SlimefunManager.isItemSimiliar(e.getItem(),SlimefunItems.INFERNAL_BONEMEAL,true)) {
        if (e.getClickedBlock() != null && e.getClickedBlock().getType().equals(Material.NETHER_WARTS)) {
          if (e.getClickedBlock().getData() < 3) {
            e.getClickedBlock().setData((byte)(e.getClickedBlock().getData() + 1));
            e.getClickedBlock().getWorld().playEffect(e.getClickedBlock().getLocation(),Effect.STEP_SOUND,Material.REDSTONE_BLOCK);
            PlayerInventory.consumeItemInHand(p);
          }
        }
        return true;
      }
      return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.ELYTRA_SCALE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_AIR,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_ENDER,new ItemStack(Material.FEATHER),SlimefunItems.RUNE_ENDER,SlimefunItems.ENDER_LUMP_3,SlimefunItems.RUNE_AIR,SlimefunItems.ENDER_LUMP_3}).register(true);
  new VanillaItem(Categories.MAGIC,SlimefunItems.ELYTRA,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.ELYTRA_SCALE,SlimefunItems.RUNE_AIR,SlimefunItems.ELYTRA_SCALE,SlimefunItems.RUNE_AIR,new ItemStack(Material.LEATHER_CHESTPLATE),SlimefunItems.RUNE_AIR,SlimefunItems.ELYTRA_SCALE,SlimefunItems.RUNE_AIR,SlimefunItems.ELYTRA_SCALE}).register(true);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFUSED_ELYTRA,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA_SCALE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA_SCALE,SlimefunItems.FLASK_OF_KNOWLEDGE}).register(true);
  new SoulboundItem(Categories.MAGIC,SlimefunItems.SOULBOUND_ELYTRA,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ELYTRA_SCALE,SlimefunItems.ELYTRA,SlimefunItems.ELYTRA_SCALE,SlimefunItems.FLASK_OF_KNOWLEDGE,SlimefunItems.ESSENCE_OF_AFTERLIFE,SlimefunItems.FLASK_OF_KNOWLEDGE}).register(true);
  RainbowTicker rainbow=new RainbowTicker();
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_WOOL,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL),new ItemStack(Material.WOOL)},new CustomItem(SlimefunItems.RAINBOW_WOOL,8)).register(true,rainbow);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_GLASS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS),new ItemStack(Material.STAINED_GLASS)},new CustomItem(SlimefunItems.RAINBOW_GLASS,8)).register(true,rainbow);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_GLASS_PANE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE),new ItemStack(Material.STAINED_GLASS_PANE)},new CustomItem(SlimefunItems.RAINBOW_GLASS_PANE,8)).register(true,rainbow);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.RAINBOW_CLAY,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY),new ItemStack(Material.STAINED_CLAY)},new CustomItem(SlimefunItems.RAINBOW_CLAY,8)).register(true,rainbow);
  RainbowTicker xmas=new RainbowTicker(13,14);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_WOOL_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.WOOL),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.WOOL),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_WOOL_XMAS,2)).register(true,xmas);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_GLASS_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_XMAS,2)).register(true,xmas);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_GLASS_PANE_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS_PANE),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS_PANE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_PANE_XMAS,2)).register(true,xmas);
  new SlimefunItem(Categories.CHRISTMAS,SlimefunItems.RAINBOW_CLAY_XMAS,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_CLAY),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_CLAY),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),SlimefunItems.CHRISTMAS_COOKIE,new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_CLAY_XMAS,2)).register(true,xmas);
  RainbowTicker valentine=new RainbowTicker(2,6,10);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_WOOL_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.WOOL),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.WOOL),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_WOOL_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_GLASS_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_GLASS_PANE_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_GLASS_PANE),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_GLASS_PANE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_GLASS_PANE_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.VALENTINES_DAY,SlimefunItems.RAINBOW_CLAY_VALENTINE,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.STAINED_CLAY),SlimefunItems.RUNE_RAINBOW,new ItemStack(Material.STAINED_CLAY),new MaterialData(Material.INK_SACK,(byte)2).toItemStack(1),new ItemStack(Material.RED_ROSE),new MaterialData(Material.INK_SACK,(byte)1).toItemStack(1)},new CustomItem(SlimefunItems.RAINBOW_CLAY_VALENTINE,2)).register(true,valentine);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.WITHER_PROOF_GLASS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.LEAD_INGOT,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.HARDENED_GLASS,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.LEAD_INGOT,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.LEAD_INGOT},new CustomItem(SlimefunItems.WITHER_PROOF_GLASS,4)).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_GEO_SCANNER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,null,SlimefunItems.ELECTRO_MAGNET,null,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRO_MAGNET}).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      try {
        Slimefun.getGPSNetwork().scanChunk(p,e.getClickedBlock().getChunk());
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      return true;
    }
  }
);
  new OilPump(Categories.GPS,SlimefunItems.OIL_PUMP,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.STEEL_INGOT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.STEEL_INGOT,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_INGOT,null,new ItemStack(Material.BUCKET),null}){
    @Override public int getEnergyConsumption(){
      return 14;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,200);
  new NetherDrill(Categories.GPS,SlimefunItems.NETHER_DRILL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.LEAD_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.LEAD_INGOT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.OIL_PUMP,SlimefunItems.REINFORCED_PLATE,SlimefunItems.LEAD_INGOT,SlimefunItems.BIG_CAPACITOR,SlimefunItems.LEAD_INGOT}){
    @Override public int getSpeed(){
      return 1;
    }
    @Override public int getEnergyConsumption(){
      return 51;
    }
  }
.registerChargeableBlock(true,1024);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BUCKET_OF_OIL,""String_Node_Str"",new RecipeType(SlimefunItems.OIL_PUMP),new ItemStack[]{null,null,null,null,new ItemStack(Material.BUCKET),null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BUCKET_OF_FUEL,""String_Node_Str"",new RecipeType(SlimefunItems.REFINERY),new ItemStack[]{null,null,null,null,SlimefunItems.BUCKET_OF_OIL,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.NETHER_ICE,""String_Node_Str"",new RecipeType(SlimefunItems.NETHER_DRILL),new ItemStack[]{null,null,null,null,null,null,null,null}).register(true);
  new Refinery(Categories.ELECTRICITY,SlimefunItems.REFINERY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_GLASS,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.HARDENED_GLASS,SlimefunItems.HARDENED_GLASS,SlimefunItems.REDSTONE_ALLOY,SlimefunItems.HARDENED_GLASS,new ItemStack(Material.PISTON_BASE),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.PISTON_BASE)}){
    @Override public int getEnergyConsumption(){
      return 16;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.LAVA_GENERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.GOLD_16K,null,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(40,new ItemStack(Material.LAVA_BUCKET)));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 10;
    }
  }
.registerUnrechargeableBlock(true,512);
  new AGenerator(Categories.ELECTRICITY,SlimefunItems.COMBUSTION_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.STEEL_INGOT,null,SlimefunItems.STEEL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.STEEL_INGOT,SlimefunItems.HEATING_COIL}){
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(30,SlimefunItems.BUCKET_OF_OIL));
      registerFuel(new MachineFuel(90,SlimefunItems.BUCKET_OF_FUEL));
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.FLINT_AND_STEEL);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyProduction(){
      return 12;
    }
  }
.registerUnrechargeableBlock(true,256);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_TELEPORTER_PYLON,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.ZINC_INGOT,new ItemStack(Material.GLASS),SlimefunItems.ZINC_INGOT,new ItemStack(Material.GLASS),SlimefunItems.HEATING_COIL,new ItemStack(Material.GLASS),SlimefunItems.ZINC_INGOT,new ItemStack(Material.GLASS),SlimefunItems.ZINC_INGOT},new CustomItem(SlimefunItems.GPS_TELEPORTER_PYLON,8)).register(true,new RainbowTicker(9,10));
  new Teleporter(Categories.GPS,SlimefunItems.GPS_TELEPORTATION_MATRIX,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GPS_TELEPORTER_PYLON,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.GPS_TELEPORTER_PYLON,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.GPS_CONTROL_PANEL,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.GPS_TELEPORTER_PYLON,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.GPS_TELEPORTER_PYLON}){
    @Override public void onInteract(    final Player p,    final Block b) throws Exception {
      GPSNetwork.openTeleporterGUI(p,UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str"")),b,Slimefun.getGPSNetwork().getNetworkComplexity(UUID.fromString(BlockStorage.getBlockInfo(b,""String_Node_Str""))));
    }
  }
.register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_ACTIVATION_DEVICE_SHARED,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.STONE_PLATE),null,new ItemStack(Material.REDSTONE),SlimefunItems.GPS_TRANSMITTER,new ItemStack(Material.REDSTONE),SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.BILLON_INGOT}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.GPS_ACTIVATION_DEVICE_PERSONAL,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.LEAD_INGOT,null,SlimefunItems.COBALT_INGOT,SlimefunItems.GPS_ACTIVATION_DEVICE_SHARED,SlimefunItems.COBALT_INGOT,null,SlimefunItems.LEAD_INGOT,null}).register(true);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      return BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString());
    }
  }
);
  new SlimefunItem(Categories.TECH,SlimefunItems.HOLOGRAM_PROJECTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.POWER_CRYSTAL,null,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_BRASS_INGOT,null,SlimefunItems.ALUMINUM_BRASS_INGOT,null},new CustomItem(SlimefunItems.HOLOGRAM_PROJECTOR,3)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      if (BlockStorage.getBlockInfo(e.getClickedBlock(),""String_Node_Str"").equals(p.getUniqueId().toString())) {
        Projector.openEditor(p,e.getClickedBlock());
      }
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
      Projector.getArmorStand(b);
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      if (BlockStorage.getBlockInfo(b,""String_Node_Str"").equals(p.getUniqueId().toString())) {
        Projector.getArmorStand(b).remove();
        return true;
      }
 else       return false;
    }
  }
);
  new SlimefunItem(Categories.MAGIC,SlimefunItems.INFUSED_HOPPER,""String_Node_Str"",RecipeType.ANCIENT_ALTAR,new ItemStack[]{new ItemStack(Material.OBSIDIAN),SlimefunItems.RUNE_EARTH,new ItemStack(Material.HOPPER),SlimefunItems.RUNE_ENDER,SlimefunItems.INFUSED_MAGNET,SlimefunItems.RUNE_ENDER,new ItemStack(Material.HOPPER),SlimefunItems.RUNE_EARTH,new ItemStack(Material.OBSIDIAN)}).register(true,new BlockTicker(){
    @Override public void uniqueTick(){
    }
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      if (b.getType() != Material.HOPPER) {
        return;
      }
      ArmorStand hologram=InfusedHopper.getArmorStand(b,true);
      boolean sound=false;
      for (      Entity n : hologram.getNearbyEntities(3.5D,3.5D,3.5D)) {
        if (n instanceof Item && !n.hasMetadata(""String_Node_Str"") && n.getLocation().distance(hologram.getLocation()) > 0.4D) {
          n.setVelocity(new Vector(0,0.1,0));
          n.teleport(hologram);
          sound=true;
        }
      }
      if (sound)       b.getWorld().playSound(b.getLocation(),Sound.ENTITY_ENDERMEN_TELEPORT,5F,2F);
    }
    @Override public boolean isSynchronized(){
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      InfusedHopper.getArmorStand(b,true);
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      final ArmorStand hologram=InfusedHopper.getArmorStand(b,false);
      if (hologram != null) {
        hologram.remove();
      }
      return true;
    }
  }
);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BLISTERING_INGOT,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.GOLD_24K,SlimefunItems.URANIUM,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BLISTERING_INGOT_2,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.BLISTERING_INGOT,SlimefunItems.CARBONADO,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BLISTERING_INGOT_3,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.BLISTERING_INGOT_2,new ItemStack(Material.NETHER_STAR),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.ENRICHED_NETHER_ICE,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.NETHER_ICE,SlimefunItems.PLUTONIUM,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.GPS,SlimefunItems.ELEVATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.STONE_PLATE),null,new ItemStack(Material.PISTON_BASE),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.PISTON_BASE),SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ALUMINUM_BRONZE_INGOT},new CustomItem(SlimefunItems.ELEVATOR,2)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    final ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null)       return false;
      if (!item.getName().equals(""String_Node_Str""))       return false;
      if (BlockStorage.getBlockInfo(e.getClickedBlock(),""String_Node_Str"").equals(p.getUniqueId().toString()))       Elevator.openEditor(p,e.getClickedBlock());
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
      BlockStorage.addBlockInfo(b,""String_Node_Str"",""String_Node_Str"");
      BlockStorage.addBlockInfo(b,""String_Node_Str"",p.getUniqueId().toString());
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      return true;
    }
  }
);
  new FoodFabricator(Categories.ELECTRICITY,SlimefunItems.FOOD_FABRICATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BILLON_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.BILLON_INGOT,SlimefunItems.CAN,SlimefunItems.SMALL_CAPACITOR,SlimefunItems.CAN,null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 7;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new FoodFabricator(Categories.ELECTRICITY,SlimefunItems.FOOD_FABRICATOR_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.FOOD_FABRICATOR,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.ELECTRO_MAGNET,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 24;
    }
    @Override public int getSpeed(){
      return 6;
    }
  }
.registerChargeableBlock(true,512);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD2,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.WHEAT),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD3,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.CARROT_ITEM),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD4,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.POTATO_ITEM),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD5,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.SEEDS),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD6,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.BEETROOT),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD7,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.MELON),null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.ORGANIC_FOOD8,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_FABRICATOR),new ItemStack[]{SlimefunItems.CAN,new ItemStack(Material.APPLE),null,null,null,null,null,null,null}).register(true);
  new AutoBreeder(Categories.ELECTRICITY,SlimefunItems.AUTO_BREEDER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.GOLD_18K,SlimefunItems.CAN,SlimefunItems.GOLD_18K,SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.HAY_BLOCK),SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.FOOD_FABRICATOR,SlimefunItems.LEAD_INGOT}).registerChargeableBlock(true,1024);
  new AnimalGrowthAccelerator(Categories.ELECTRICITY,SlimefunItems.ANIMAL_GROWTH_ACCELERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ORGANIC_FOOD2,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.AUTO_BREEDER,SlimefunItems.REINFORCED_ALLOY_INGOT}).registerChargeableBlock(true,1024);
  new XPCollector(Categories.ELECTRICITY,SlimefunItems.XP_COLLECTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.AUTO_ENCHANTER,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ALUMINUM_BRONZE_INGOT}).registerChargeableBlock(true,1024);
  new FoodComposter(Categories.ELECTRICITY,SlimefunItems.FOOD_COMPOSTER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.FOOD_FABRICATOR,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.CAN,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.CAN,null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 8;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new FoodComposter(Categories.ELECTRICITY,SlimefunItems.FOOD_COMPOSTER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HARDENED_METAL_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.FOOD_COMPOSTER,SlimefunItems.ELECTRIC_MOTOR,null,SlimefunItems.ELECTRO_MAGNET,null}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_HOE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 26;
    }
    @Override public int getSpeed(){
      return 10;
    }
  }
.registerChargeableBlock(true,256);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER2,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD2,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER3,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD3,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER4,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD4,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER5,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD5,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER6,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD6,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER7,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD7,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.MISC,SlimefunItems.FERTILIZER8,""String_Node_Str"",new RecipeType(SlimefunItems.FOOD_COMPOSTER),new ItemStack[]{SlimefunItems.ORGANIC_FOOD8,null,null,null,null,null,null,null,null}).register(true);
  new CropGrowthAccelerator(Categories.ELECTRICITY,SlimefunItems.CROP_GROWTH_ACCELERATOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.PROGRAMMABLE_ANDROID_FARMER,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ANIMAL_GROWTH_ACCELERATOR,SlimefunItems.ELECTRO_MAGNET}){
    @Override public int getEnergyConsumption(){
      return 25;
    }
    @Override public int getRadius(){
      return 3;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,1024);
  new CropGrowthAccelerator(Categories.ELECTRICITY,SlimefunItems.CROP_GROWTH_ACCELERATOR_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CROP_GROWTH_ACCELERATOR,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.ADVANCED_CIRCUIT_BOARD,SlimefunItems.ELECTRO_MAGNET}){
    @Override public int getEnergyConsumption(){
      return 30;
    }
    @Override public int getRadius(){
      return 4;
    }
    @Override public int getSpeed(){
      return 4;
    }
  }
.registerChargeableBlock(true,1024);
  new Freezer(Categories.ELECTRICITY,SlimefunItems.FREEZER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.SILVER_INGOT,null,SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.PACKED_ICE),SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.COOLING_UNIT,SlimefunItems.MEDIUM_CAPACITOR,SlimefunItems.COOLING_UNIT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.GOLD_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 9;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new Freezer(Categories.ELECTRICITY,SlimefunItems.FREEZER_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.SILVER_INGOT,null,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.FREEZER,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.COOLING_UNIT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.COOLING_UNIT}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 15;
    }
    @Override public int getSpeed(){
      return 2;
    }
  }
.registerChargeableBlock(true,256);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.REACTOR_COOLANT_CELL,""String_Node_Str"",new RecipeType(SlimefunItems.FREEZER),new ItemStack[]{new ItemStack(Material.PACKED_ICE),null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.TECH_MISC,SlimefunItems.NETHER_ICE_COOLANT_CELL,""String_Node_Str"",new RecipeType(SlimefunItems.HEATED_PRESSURE_CHAMBER),new ItemStack[]{SlimefunItems.ENRICHED_NETHER_ICE,null,null,null,null,null,null,null,null}).register(true);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.NEPTUNIUM,""String_Node_Str"",new RecipeType(SlimefunItems.NUCLEAR_REACTOR),new ItemStack[]{SlimefunItems.URANIUM,null,null,null,null,null,null,null,null}).register(true);
  SlimefunItem.setRadioactive(SlimefunItems.NEPTUNIUM);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.PLUTONIUM,""String_Node_Str"",new RecipeType(SlimefunItems.NUCLEAR_REACTOR),new ItemStack[]{SlimefunItems.NEPTUNIUM,null,null,null,null,null,null,null,null}).register(true);
  SlimefunItem.setRadioactive(SlimefunItems.PLUTONIUM);
  new SlimefunItem(Categories.RESOURCES,SlimefunItems.BOOSTED_URANIUM,""String_Node_Str"",RecipeType.HEATED_PRESSURE_CHAMBER,new ItemStack[]{SlimefunItems.PLUTONIUM,SlimefunItems.URANIUM,null,null,null,null,null,null,null}).register(true);
  SlimefunItem.setRadioactive(SlimefunItems.BOOSTED_URANIUM);
  new AReactor(Categories.ELECTRICITY,SlimefunItems.NUCLEAR_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.CARBONADO_EDGED_CAPACITOR,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.REINFORCED_PLATE,SlimefunItems.COOLING_UNIT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.LEAD_INGOT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.LEAD_INGOT}){
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(1200,SlimefunItems.URANIUM,SlimefunItems.NEPTUNIUM));
      registerFuel(new MachineFuel(600,SlimefunItems.NEPTUNIUM,SlimefunItems.PLUTONIUM));
      registerFuel(new MachineFuel(1500,SlimefunItems.BOOSTED_URANIUM,null));
    }
    @Override public int getEnergyProduction(){
      return 250;
    }
    @Override public void extraTick(    Location l){
    }
    @Override public ItemStack getProgressBar(){
      try {
        return CustomSkull.getItem(""String_Node_Str"");
      }
 catch (      Exception e) {
        return new ItemStack(Material.BLAZE_POWDER);
      }
    }
    @Override public ItemStack getCoolant(){
      return SlimefunItems.REACTOR_COOLANT_CELL;
    }
  }
.registerChargeableBlock(true,16384);
  new AReactor(Categories.ELECTRICITY,SlimefunItems.NETHERSTAR_REACTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BOOSTED_URANIUM,SlimefunItems.CARBONADO_EDGED_CAPACITOR,SlimefunItems.BOOSTED_URANIUM,SlimefunItems.REINFORCED_PLATE,new ItemStack(Material.NETHER_STAR),SlimefunItems.REINFORCED_PLATE,SlimefunItems.CORINTHIAN_BRONZE_INGOT,SlimefunItems.REINFORCED_PLATE,SlimefunItems.CORINTHIAN_BRONZE_INGOT}){
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public void registerDefaultRecipes(){
      registerFuel(new MachineFuel(1800,new ItemStack(Material.NETHER_STAR)));
    }
    @Override public int getEnergyProduction(){
      return 512;
    }
    @Override public void extraTick(    final Location l){
      Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new BukkitRunnable(){
        @Override public void run(){
          for (          Entity entity : ReactorHologram.getArmorStand(l).getNearbyEntities(5,5,5)) {
            if (entity instanceof LivingEntity) {
              ((LivingEntity)entity).addPotionEffect(new PotionEffect(PotionEffectType.WITHER,60,1));
            }
          }
        }
      }
,0);
    }
    @Override public ItemStack getCoolant(){
      return SlimefunItems.NETHER_ICE_COOLANT_CELL;
    }
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.NETHER_STAR);
    }
  }
.registerChargeableBlock(true,32768);
  new SlimefunItem(Categories.CARGO,SlimefunItems.CARGO_MOTOR,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.HARDENED_GLASS,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HARDENED_GLASS,SlimefunItems.SILVER_INGOT,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.SILVER_INGOT,SlimefunItems.HARDENED_GLASS,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HARDENED_GLASS},new CustomItem(SlimefunItems.CARGO_MOTOR,4)).register(true);
  new SlimefunItem(Categories.CARGO,SlimefunItems.CARGO_MANAGER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.HOLOGRAM_PROJECTOR,null,SlimefunItems.REINFORCED_PLATE,SlimefunItems.CARGO_MOTOR,SlimefunItems.REINFORCED_PLATE,SlimefunItems.ALUMINUM_BRONZE_INGOT,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.ALUMINUM_BRONZE_INGOT}).register(true,new BlockTicker(){
    @Override public void uniqueTick(){
    }
    @Override public void tick(    Block b,    SlimefunItem item,    Config data){
      CargoNet.tick(b);
    }
    @Override public boolean isSynchronized(){
      return false;
    }
  }
,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null || !item.getName().equals(""String_Node_Str""))       return false;
      e.setCancelled(true);
      if (BlockStorage.getBlockInfo(e.getClickedBlock(),""String_Node_Str"") == null) {
        BlockStorage.addBlockInfo(e.getClickedBlock(),""String_Node_Str"",""String_Node_Str"");
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
 else {
        BlockStorage.addBlockInfo(e.getClickedBlock(),""String_Node_Str"",null);
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
      return true;
    }
  }
);
  SlimefunItem.registerBlockHandler(""String_Node_Str"",new SlimefunBlockHandler(){
    @Override public void onPlace(    Player p,    Block b,    SlimefunItem item){
    }
    @Override public boolean onBreak(    Player p,    Block b,    SlimefunItem item,    UnregisterReason reason){
      CargoHologram.remove(b);
      return true;
    }
  }
);
  new SlimefunItem(Categories.CARGO,SlimefunItems.CARGO_NODE,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BRONZE_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.BRONZE_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.CARGO_MOTOR,SlimefunItems.SILVER_INGOT,SlimefunItems.BRONZE_INGOT,SlimefunItems.SILVER_INGOT,SlimefunItems.BRONZE_INGOT},new CustomItem(SlimefunItems.CARGO_NODE,4)).register(true,new ItemInteractionHandler(){
    @Override public boolean onRightClick(    final ItemUseEvent e,    Player p,    ItemStack stack){
      if (e.getClickedBlock() == null)       return false;
      SlimefunItem item=BlockStorage.check(e.getClickedBlock());
      if (item == null)       return false;
      if (!item.getName().equals(""String_Node_Str""))       return false;
      if (CargoNet.isConnected(e.getClickedBlock())) {
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
 else {
        p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + ""String_Node_Str""));
      }
      return true;
    }
  }
);
  new CargoInputNode(Categories.CARGO,SlimefunItems.CARGO_INPUT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.HOPPER),null,SlimefunItems.BILLON_INGOT,SlimefunItems.CARGO_NODE,SlimefunItems.BILLON_INGOT,null,new ItemStack(Material.HOPPER),null},new CustomItem(SlimefunItems.CARGO_INPUT,2)).register(true);
  new CargoOutputNode(Categories.CARGO,SlimefunItems.CARGO_OUTPUT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.HOPPER),null,SlimefunItems.BRASS_INGOT,SlimefunItems.CARGO_NODE,SlimefunItems.BRASS_INGOT,null,new ItemStack(Material.HOPPER),null},new CustomItem(SlimefunItems.CARGO_OUTPUT,2)).register(true);
  new AdvancedCargoOutputNode(Categories.CARGO,SlimefunItems.CARGO_OUTPUT_ADVANCED,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.CARGO_MOTOR,null,SlimefunItems.COBALT_INGOT,SlimefunItems.CARGO_OUTPUT,SlimefunItems.COBALT_INGOT,null,SlimefunItems.CARGO_MOTOR,null},new CustomItem(SlimefunItems.CARGO_OUTPUT_ADVANCED)).register(true);
  new AutomatedCraftingChamber(Categories.ELECTRICITY,SlimefunItems.AUTOMATED_CRAFTING_CHAMBER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,new ItemStack(Material.WORKBENCH),null,SlimefunItems.CARGO_MOTOR,SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.CARGO_MOTOR,null,SlimefunItems.ELECTRIC_MOTOR,null}){
    @Override public int getEnergyConsumption(){
      return 10;
    }
  }
.registerChargeableBlock(true,256);
  new ReactorAccessPort(Categories.ELECTRICITY,SlimefunItems.REACTOR_ACCESS_PORT,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.BLISTERING_INGOT_3,null,SlimefunItems.LEAD_INGOT,SlimefunItems.CARGO_MOTOR,SlimefunItems.LEAD_INGOT,null,SlimefunItems.ELECTRIC_MOTOR,null}).register(true);
  new FluidPump(Categories.ELECTRICITY,SlimefunItems.FLUID_PUMP,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.MEDIUM_CAPACITOR,null,new ItemStack(Material.BUCKET),SlimefunItems.CARGO_MOTOR,new ItemStack(Material.BUCKET),null,SlimefunItems.OIL_PUMP,null}).registerChargeableBlock(true,512);
  new TrashCan(Categories.CARGO,SlimefunItems.TRASH_CAN,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{null,SlimefunItems.PORTABLE_DUSTBIN,null,SlimefunItems.LEAD_INGOT,SlimefunItems.CARGO_MOTOR,SlimefunItems.LEAD_INGOT,SlimefunItems.ALUMINUM_INGOT,SlimefunItems.LEAD_INGOT,SlimefunItems.ALUMINUM_INGOT}).register(true);
  new CarbonPress(Categories.ELECTRICITY,SlimefunItems.CARBON_PRESS,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBON,SlimefunItems.CARBON,SlimefunItems.HEATED_PRESSURE_CHAMBER,SlimefunItems.CARBON,SlimefunItems.HEATING_COIL,SlimefunItems.CARBONADO,SlimefunItems.HEATING_COIL}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 10;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,256);
  new CarbonPress(Categories.ELECTRICITY,SlimefunItems.CARBON_PRESS_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO,SlimefunItems.CARBON,SlimefunItems.CARBON_PRESS,SlimefunItems.CARBON,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HEATING_COIL}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 25;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,512);
  new CarbonPress(Categories.ELECTRICITY,SlimefunItems.CARBON_PRESS_3,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.CARBONADO,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.CARBONADO,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.CARBON_PRESS_2,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRO_MAGNET,SlimefunItems.HEATING_COIL}){
    @Override public ItemStack getProgressBar(){
      return new ItemStack(Material.DIAMOND_PICKAXE);
    }
    @Override public String getInventoryTitle(){
      return ""String_Node_Str"";
    }
    @Override public int getEnergyConsumption(){
      return 90;
    }
    @Override public int getSpeed(){
      return 15;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricSmeltery(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_SMELTERY,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{new ItemStack(Material.NETHER_BRICK_ITEM),SlimefunItems.ELECTRIC_MOTOR,new ItemStack(Material.NETHER_BRICK_ITEM),SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_INGOT_FACTORY,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public int getEnergyConsumption(){
      return 10;
    }
    @Override public int getSpeed(){
      return 1;
    }
  }
.registerChargeableBlock(true,512);
  new ElectricSmeltery(Categories.ELECTRICITY,SlimefunItems.ELECTRIC_SMELTERY_2,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.POWER_CRYSTAL,SlimefunItems.DAMASCUS_STEEL_INGOT,SlimefunItems.HEATING_COIL,SlimefunItems.ELECTRIC_SMELTERY,SlimefunItems.HEATING_COIL,SlimefunItems.GILDED_IRON,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.GILDED_IRON}){
    @Override public void registerDefaultRecipes(){
    }
    @Override public int getEnergyConsumption(){
      return 20;
    }
    @Override public int getSpeed(){
      return 3;
    }
  }
.registerChargeableBlock(true,1024);
  new WitherAssembler(Categories.ELECTRICITY,SlimefunItems.WITHER_ASSEMBLER,""String_Node_Str"",RecipeType.ENHANCED_CRAFTING_TABLE,new ItemStack[]{SlimefunItems.BLISTERING_INGOT_3,new ItemStack(Material.NETHER_STAR),SlimefunItems.BLISTERING_INGOT_3,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.ANDROID_MEMORY_CORE,SlimefunItems.WITHER_PROOF_OBSIDIAN,SlimefunItems.ELECTRIC_MOTOR,SlimefunItems.REINFORCED_ALLOY_INGOT,SlimefunItems.CARBONADO_EDGED_CAPACITOR}).registerChargeableBlock(true,4096);
}",0.9999701033194108
79965,"public static boolean chance(int max,int percentage){
  if (max < 1)   return 0;
  return CSCoreLib.randomizer().nextInt(max) <= percentage;
}","public static boolean chance(int max,int percentage){
  if (max < 1)   return false;
  return CSCoreLib.randomizer().nextInt(max) <= percentage;
}",0.9791666666666666
79966,"protected void tick(Block b) throws Exception {
  Iterator<Entity> iterator=me.mrCookieSlime.Slimefun.holograms.XPCollector.getArmorStand(b).getNearbyEntities(4D,4D,4D).iterator();
  while (iterator.hasNext()) {
    Entity n=iterator.next();
    if (n instanceof ExperienceOrb) {
      if (ChargableBlock.getCharge(b) < getEnergyConsumption())       return;
      int xp=getEXP(b) + ((ExperienceOrb)n).getExperience();
      ChargableBlock.addCharge(b,-getEnergyConsumption());
      n.remove();
      int withdrawn=0;
      for (int level=0; level < getEXP(b); level=level + 10) {
        if (fits(b,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0))) {
          withdrawn=withdrawn + 10;
          pushItems(b,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0));
        }
      }
      BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(xp - withdrawn));
      return;
    }
  }
}","protected void tick(Block b) throws Exception {
  Iterator<Entity> iterator=me.mrCookieSlime.Slimefun.holograms.XPCollector.getArmorStand(b).getNearbyEntities(4D,4D,4D).iterator();
  while (iterator.hasNext()) {
    Entity n=iterator.next();
    if (n instanceof ExperienceOrb) {
      if (ChargableBlock.getCharge(b) < getEnergyConsumption())       return;
      if (!n.isValid())       return;
      int xp=getEXP(b) + ((ExperienceOrb)n).getExperience();
      ChargableBlock.addCharge(b,-getEnergyConsumption());
      n.remove();
      int withdrawn=0;
      for (int level=0; level < getEXP(b); level=level + 10) {
        if (fits(b,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0))) {
          withdrawn=withdrawn + 10;
          pushItems(b,new CustomItem(Material.EXP_BOTTLE,""String_Node_Str"",0));
        }
      }
      BlockStorage.addBlockInfo(b,""String_Node_Str"",String.valueOf(xp - withdrawn));
      return;
    }
  }
}",0.9794372294372294
79967,"public void close(){
  for (  HumanEntity human : toInventory().getViewers()) {
    human.closeInventory();
  }
}","public void close(){
  Iterator<HumanEntity> iterator=toInventory().getViewers().iterator();
  while (iterator.hasNext()) {
    HumanEntity human=iterator.next();
    human.closeInventory();
  }
}",0.6537216828478964
79968,"@SuppressWarnings(""String_Node_Str"") public static void displayItem(Player p,final ItemStack item,boolean addToHistory,final boolean experimental,final int page){
  if (item == null || item.getType() == Material.AIR)   return;
  final SlimefunItem sfItem=SlimefunItem.getByItem(item);
  if (sfItem == null) {
    if (!all_recipes)     return;
  }
  ItemStack[] recipe=new ItemStack[9];
  ItemStack recipeType=null;
  ItemStack recipeOutput=item;
  ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
    }
  }
);
  if (sfItem != null) {
    recipe=sfItem.getRecipe();
    recipeType=sfItem.getRecipeType().toItem();
    recipeOutput=sfItem.getCustomOutput() != null ? sfItem.getCustomOutput() : sfItem.getItem();
  }
 else {
    List<Recipe> recipes=new ArrayList<Recipe>();
    Iterator<Recipe> iterator=Bukkit.recipeIterator();
    while (iterator.hasNext()) {
      Recipe r=iterator.next();
      if (SlimefunManager.isItemSimiliar(new CustomItem(r.getResult(),1),item,true) && r.getResult().getData().getData() == item.getData().getData())       recipes.add(r);
    }
    if (recipes.isEmpty())     return;
    Recipe r=recipes.get(page);
    if (recipes.size() > page + 1) {
      menu.addItem(1,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(1,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int slot,        ItemStack stack,        ClickAction action){
          displayItem(p,item,false,experimental,page + 1);
          return false;
        }
      }
);
    }
    if (r instanceof ShapedRecipe) {
      String[] shape=((ShapedRecipe)r).getShape();
      for (int i=0; i < shape.length; i++) {
        for (int j=0; j < shape[i].length(); j++) {
          ItemStack ingredient=((ShapedRecipe)r).getIngredientMap().get(shape[i].charAt(j));
          if (ingredient != null) {
            MaterialData data=ingredient.getData();
            if (ingredient.getData().getData() < 0)             data.setData((byte)0);
            ingredient=data.toItemStack(ingredient.getAmount());
          }
          recipe[i * 3 + j]=ingredient;
        }
      }
      recipeType=RecipeType.SHAPED_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof ShapelessRecipe) {
      List<ItemStack> ingredients=((ShapelessRecipe)r).getIngredientList();
      for (int i=0; i < ingredients.size(); i++) {
        ItemStack ingredient=ingredients.get(i);
        if (ingredient != null) {
          MaterialData data=ingredient.getData();
          if (ingredient.getData().getData() < 0)           data.setData((byte)0);
          ingredient=data.toItemStack(ingredient.getAmount());
        }
        recipe[i]=ingredient;
      }
      recipeType=RecipeType.SHAPELESS_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof FurnaceRecipe) {
      ItemStack ingredient=((FurnaceRecipe)r).getInput();
      if (ingredient != null) {
        MaterialData data=ingredient.getData();
        if (ingredient.getData().getData() < 0)         data.setData((byte)0);
        ingredient=data.toItemStack(ingredient.getAmount());
      }
      recipe[4]=ingredient;
      recipeType=RecipeType.FURNACE.toItem();
      recipeOutput=r.getResult();
    }
  }
  if (addToHistory)   addToHistory(p,sfItem != null ? sfItem.getURID() : URID.nextURID(item,true));
  if (history.containsKey(p.getUniqueId()) && history.get(p.getUniqueId()).size() > 1) {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        if (action.isShiftClicked())         openMainMenu(p,true,experimental,1);
 else {
          URID last=getLastEntry(p,true);
          if (URID.decode(last) instanceof Category)           openCategory(p,(Category)URID.decode(last),true,1,experimental);
 else           if (URID.decode(last) instanceof SlimefunItem)           displayItem(p,((SlimefunItem)URID.decode(last)).getItem(),false,experimental,0);
 else           if (URID.decode(last) instanceof GuideHandler)           ((GuideHandler)URID.decode(last)).run(p,true);
 else           displayItem(p,(ItemStack)URID.decode(last),false,experimental,0);
        }
        return false;
      }
    }
);
  }
 else {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        openMainMenu(p,true,experimental,1);
        return false;
      }
    }
);
  }
  menu.addItem(3,Slimefun.hasUnlocked(p,recipe[0],false) ? recipe[0] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[0],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[0]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(3,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(4,Slimefun.hasUnlocked(p,recipe[1],false) ? recipe[1] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[1],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[1]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(4,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(5,Slimefun.hasUnlocked(p,recipe[2],false) ? recipe[2] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[2],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[2]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(5,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(8,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(8,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str""));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(7,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(7,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str""));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  menu.addItem(10,recipeType);
  menu.addMenuClickHandler(10,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(12,Slimefun.hasUnlocked(p,recipe[3],false) ? recipe[3] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[3],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[3]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(12,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(13,Slimefun.hasUnlocked(p,recipe[4],false) ? recipe[4] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[4],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[4]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(13,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(14,Slimefun.hasUnlocked(p,recipe[5],false) ? recipe[5] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[5],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[5]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(14,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(16,recipeOutput);
  menu.addMenuClickHandler(16,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(21,Slimefun.hasUnlocked(p,recipe[6],false) ? recipe[6] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[6],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[6]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(21,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(22,Slimefun.hasUnlocked(p,recipe[7],false) ? recipe[7] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[7],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[7]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(22,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(23,Slimefun.hasUnlocked(p,recipe[8],false) ? recipe[8] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[8],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[8]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(23,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if ((sfItem instanceof SlimefunMachine && ((SlimefunMachine)sfItem).getDisplayRecipes().size() > 0) || (sfItem instanceof SlimefunGadget && ((SlimefunGadget)sfItem).getRecipes().size() > 0)) {
      for (int i=27; i < 36; i++) {
        menu.addItem(i,new CustomItem(Material.STAINED_GLASS_PANE,SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ""String_Node_Str"" : ""String_Node_Str"",7));
        menu.addMenuClickHandler(i,new MenuClickHandler(){
          @Override public boolean onClick(          Player arg0,          int arg1,          ItemStack arg2,          ClickAction arg3){
            return false;
          }
        }
);
      }
      List<ItemStack> recipes=SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ((SlimefunMachine)SlimefunItem.getByItem(item)).getDisplayRecipes() : ((SlimefunGadget)SlimefunItem.getByItem(item)).getDisplayRecipes();
      int recipe_size=recipes.size();
      if (recipe_size > 18)       recipe_size=18;
      int inputs=-1, outputs=-1;
      for (int i=0; i < recipe_size; i++) {
        int slot=36;
        if (i % 2 == 1) {
          slot=slot + 9;
          outputs++;
        }
 else         inputs++;
        int addition=(i % 2 == 0 ? inputs : outputs);
        menu.addItem(slot + addition,recipes.get(i));
        menu.addMenuClickHandler(slot + addition,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
      }
    }
 else     if (sfItem instanceof AGenerator) {
      int slot=27;
      for (      MachineFuel fuel : ((AGenerator)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AGenerator)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AGenerator)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
 else     if (sfItem instanceof AReactor) {
      int slot=27;
      for (      MachineFuel fuel : ((AReactor)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AReactor)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AReactor)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
  }
  menu.build().open(p);
}","@SuppressWarnings(""String_Node_Str"") public static void displayItem(Player p,final ItemStack item,boolean addToHistory,final boolean experimental,final int page){
  if (item == null || item.getType() == Material.AIR)   return;
  final SlimefunItem sfItem=SlimefunItem.getByItem(item);
  if (sfItem == null) {
    if (!all_recipes)     return;
  }
  ItemStack[] recipe=new ItemStack[9];
  ItemStack recipeType=null;
  ItemStack recipeOutput=item;
  ChestMenu menu=new ChestMenu(""String_Node_Str"");
  menu.addMenuOpeningHandler(new MenuOpeningHandler(){
    @Override public void onOpen(    Player p){
      p.playSound(p.getLocation(),Sound.ENTITY_BAT_TAKEOFF,0.7F,0.7F);
    }
  }
);
  if (sfItem != null) {
    recipe=sfItem.getRecipe();
    recipeType=sfItem.getRecipeType().toItem();
    recipeOutput=sfItem.getCustomOutput() != null ? sfItem.getCustomOutput() : sfItem.getItem();
  }
 else {
    List<Recipe> recipes=new ArrayList<Recipe>();
    Iterator<Recipe> iterator=Bukkit.recipeIterator();
    while (iterator.hasNext()) {
      Recipe r=iterator.next();
      if (SlimefunManager.isItemSimiliar(new CustomItem(r.getResult(),1),item,true) && r.getResult().getData().getData() == item.getData().getData())       recipes.add(r);
    }
    if (recipes.isEmpty())     return;
    Recipe r=recipes.get(page);
    if (recipes.size() > page + 1) {
      menu.addItem(1,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      menu.addMenuClickHandler(1,new MenuClickHandler(){
        @Override public boolean onClick(        Player p,        int slot,        ItemStack stack,        ClickAction action){
          displayItem(p,item,false,experimental,page + 1);
          return false;
        }
      }
);
    }
    if (r instanceof ShapedRecipe) {
      String[] shape=((ShapedRecipe)r).getShape();
      for (int i=0; i < shape.length; i++) {
        for (int j=0; j < shape[i].length(); j++) {
          ItemStack ingredient=((ShapedRecipe)r).getIngredientMap().get(shape[i].charAt(j));
          if (ingredient != null) {
            MaterialData data=ingredient.getData();
            if (ingredient.getData().getData() < 0)             data.setData((byte)0);
            ingredient=data.toItemStack(ingredient.getAmount());
          }
          recipe[i * 3 + j]=ingredient;
        }
      }
      recipeType=RecipeType.SHAPED_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof ShapelessRecipe) {
      List<ItemStack> ingredients=((ShapelessRecipe)r).getIngredientList();
      for (int i=0; i < ingredients.size(); i++) {
        ItemStack ingredient=ingredients.get(i);
        if (ingredient != null) {
          MaterialData data=ingredient.getData();
          if (ingredient.getData().getData() < 0)           data.setData((byte)0);
          ingredient=data.toItemStack(ingredient.getAmount());
        }
        recipe[i]=ingredient;
      }
      recipeType=RecipeType.SHAPELESS_RECIPE.toItem();
      recipeOutput=r.getResult();
    }
 else     if (r instanceof FurnaceRecipe) {
      ItemStack ingredient=((FurnaceRecipe)r).getInput();
      if (ingredient != null) {
        MaterialData data=ingredient.getData();
        if (ingredient.getData().getData() < 0)         data.setData((byte)0);
        ingredient=data.toItemStack(ingredient.getAmount());
      }
      recipe[4]=ingredient;
      recipeType=RecipeType.FURNACE.toItem();
      recipeOutput=r.getResult();
    }
  }
  if (addToHistory)   addToHistory(p,sfItem != null ? sfItem.getURID() : URID.nextURID(item,true));
  if (history.containsKey(p.getUniqueId()) && history.get(p.getUniqueId()).size() > 1) {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        if (action.isShiftClicked())         openMainMenu(p,true,experimental,1);
 else {
          URID last=getLastEntry(p,true);
          if (URID.decode(last) instanceof Category)           openCategory(p,(Category)URID.decode(last),true,1,experimental);
 else           if (URID.decode(last) instanceof SlimefunItem)           displayItem(p,((SlimefunItem)URID.decode(last)).getItem(),false,experimental,0);
 else           if (URID.decode(last) instanceof GuideHandler)           ((GuideHandler)URID.decode(last)).run(p,true);
 else           displayItem(p,(ItemStack)URID.decode(last),false,experimental,0);
        }
        return false;
      }
    }
);
  }
 else {
    menu.addItem(0,new CustomItem(new MaterialData(Material.ENCHANTED_BOOK),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    menu.addMenuClickHandler(0,new MenuClickHandler(){
      @Override public boolean onClick(      Player p,      int slot,      ItemStack item,      ClickAction action){
        openMainMenu(p,true,experimental,1);
        return false;
      }
    }
);
  }
  menu.addItem(3,Slimefun.hasUnlocked(p,recipe[0],false) ? recipe[0] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[0],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[0]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(3,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(4,Slimefun.hasUnlocked(p,recipe[1],false) ? recipe[1] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[1],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[1]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(4,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(5,Slimefun.hasUnlocked(p,recipe[2],false) ? recipe[2] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[2],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[2]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(5,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(8,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(8,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str"")));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (Slimefun.getItemConfig().contains(sfItem.getName() + ""String_Node_Str"")) {
      try {
        menu.addItem(7,new CustomItem(CustomSkull.getItem(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
        menu.addMenuClickHandler(7,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            p.closeInventory();
            p.sendMessage(""String_Node_Str"");
            p.sendMessage(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + Slimefun.getItemConfig().getString(sfItem.getName() + ""String_Node_Str"")));
            p.sendMessage(""String_Node_Str"");
            return false;
          }
        }
);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  menu.addItem(10,recipeType);
  menu.addMenuClickHandler(10,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(12,Slimefun.hasUnlocked(p,recipe[3],false) ? recipe[3] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[3],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[3]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(12,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(13,Slimefun.hasUnlocked(p,recipe[4],false) ? recipe[4] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[4],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[4]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(13,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(14,Slimefun.hasUnlocked(p,recipe[5],false) ? recipe[5] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[5],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[5]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(14,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(16,recipeOutput);
  menu.addMenuClickHandler(16,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      return false;
    }
  }
);
  menu.addItem(21,Slimefun.hasUnlocked(p,recipe[6],false) ? recipe[6] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[6],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[6]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(21,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(22,Slimefun.hasUnlocked(p,recipe[7],false) ? recipe[7] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[7],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[7]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(22,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  menu.addItem(23,Slimefun.hasUnlocked(p,recipe[8],false) ? recipe[8] : new CustomItem(Material.BARRIER,StringUtils.formatItemName(recipe[8],false),0,new String[]{""String_Node_Str"",""String_Node_Str"",Slimefun.hasPermission(p,SlimefunItem.getByItem(recipe[8]),false) ? ""String_Node_Str"" : ""String_Node_Str""}));
  menu.addMenuClickHandler(23,new MenuClickHandler(){
    @Override public boolean onClick(    Player p,    int slot,    ItemStack item,    ClickAction action){
      displayItem(p,item,true,experimental,0);
      return false;
    }
  }
);
  if (sfItem != null) {
    if ((sfItem instanceof SlimefunMachine && ((SlimefunMachine)sfItem).getDisplayRecipes().size() > 0) || (sfItem instanceof SlimefunGadget && ((SlimefunGadget)sfItem).getRecipes().size() > 0)) {
      for (int i=27; i < 36; i++) {
        menu.addItem(i,new CustomItem(Material.STAINED_GLASS_PANE,SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ""String_Node_Str"" : ""String_Node_Str"",7));
        menu.addMenuClickHandler(i,new MenuClickHandler(){
          @Override public boolean onClick(          Player arg0,          int arg1,          ItemStack arg2,          ClickAction arg3){
            return false;
          }
        }
);
      }
      List<ItemStack> recipes=SlimefunItem.getByItem(item) instanceof SlimefunMachine ? ((SlimefunMachine)SlimefunItem.getByItem(item)).getDisplayRecipes() : ((SlimefunGadget)SlimefunItem.getByItem(item)).getDisplayRecipes();
      int recipe_size=recipes.size();
      if (recipe_size > 18)       recipe_size=18;
      int inputs=-1, outputs=-1;
      for (int i=0; i < recipe_size; i++) {
        int slot=36;
        if (i % 2 == 1) {
          slot=slot + 9;
          outputs++;
        }
 else         inputs++;
        int addition=(i % 2 == 0 ? inputs : outputs);
        menu.addItem(slot + addition,recipes.get(i));
        menu.addMenuClickHandler(slot + addition,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
      }
    }
 else     if (sfItem instanceof AGenerator) {
      int slot=27;
      for (      MachineFuel fuel : ((AGenerator)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AGenerator)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AGenerator)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
 else     if (sfItem instanceof AReactor) {
      int slot=27;
      for (      MachineFuel fuel : ((AReactor)sfItem).getFuelTypes()) {
        if (slot > 54)         break;
        ItemStack fItem=fuel.getInput().clone();
        ItemMeta im=fItem.getItemMeta();
        List<String> lore=new ArrayList<String>();
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + getTimeLeft(fuel.getTicks() / 2)));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + (((AReactor)sfItem).getEnergyProduction() * 2) + ""String_Node_Str""));
        lore.add(ChatColor.translateAlternateColorCodes('&',""String_Node_Str"" + DoubleHandler.getFancyDouble(fuel.getTicks() * ((AReactor)sfItem).getEnergyProduction()) + ""String_Node_Str""));
        im.setLore(lore);
        fItem.setItemMeta(im);
        menu.addItem(slot,fItem);
        menu.addMenuClickHandler(slot,new MenuClickHandler(){
          @Override public boolean onClick(          Player p,          int slot,          ItemStack item,          ClickAction action){
            return false;
          }
        }
);
        slot++;
      }
    }
  }
  menu.build().open(p);
}",0.9972607856564776
79969,"@EventHandler(priority=EventPriority.HIGH) public void onInteract(PlayerInteractEvent e){
  if (e.getAction() != Action.RIGHT_CLICK_BLOCK)   return;
  Block b=e.getClickedBlock();
  SlimefunItem item=BlockStorage.check(b);
  if (item != null) {
    if (item.getName().equals(""String_Node_Str"")) {
      e.setCancelled(true);
      Item stack=findItem(b);
      if (stack == null) {
        insertItem(e.getPlayer(),b);
      }
 else       if (!removed_items.contains(stack.getUniqueId())) {
        final UUID uuid=stack.getUniqueId();
        removed_items.add(uuid);
        SlimefunStartup.instance.getServer().getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
          @Override public void run(){
            removed_items.remove(uuid);
          }
        }
,30L);
        stack.remove();
        e.getPlayer().getInventory().addItem(fixItemStack(stack.getItemStack(),stack.getCustomName()));
        e.getPlayer().playSound(b.getLocation(),Sound.ENTITY_ITEM_PICKUP,1F,1F);
        PlayerInventory.update(e.getPlayer());
      }
    }
 else     if (item.getName().equals(""String_Node_Str"")) {
      e.setCancelled(true);
      ItemStack catalyst=e.getPlayer().getInventory().getItemInMainHand();
      List<Block> pedestals=Pedestals.getPedestals(b);
      if (!altars.contains(e.getClickedBlock())) {
        altars.add(e.getClickedBlock());
        if (pedestals.size() == 8) {
          if (catalyst != null && !catalyst.getType().equals(Material.AIR)) {
            List<ItemStack> input=new ArrayList<ItemStack>();
            for (            Block pedestal : pedestals) {
              Item stack=findItem(pedestal);
              if (stack != null)               input.add(fixItemStack(stack.getItemStack(),stack.getCustomName()));
            }
            ItemStack result=Pedestals.getRecipeOutput(catalyst,input);
            if (result != null) {
              List<ItemStack> consumed=new ArrayList<ItemStack>();
              consumed.add(catalyst);
              PlayerInventory.consumeItemInHand(e.getPlayer());
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new RitualAnimation(altars,b,b.getLocation().add(0.5,1.3,0.5),result,pedestals,consumed),10L);
            }
 else {
              altars.remove(e.getClickedBlock());
              Messages.local.sendTranslation(e.getPlayer(),""String_Node_Str"",true);
            }
          }
 else {
            altars.remove(e.getClickedBlock());
            Messages.local.sendTranslation(e.getPlayer(),""String_Node_Str"",true);
          }
        }
 else {
          altars.remove(e.getClickedBlock());
          Messages.local.sendTranslation(e.getPlayer(),""String_Node_Str"",true,new Variable(""String_Node_Str"",String.valueOf(pedestals.size())));
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.HIGH) public void onInteract(PlayerInteractEvent e){
  if (e.getAction() != Action.RIGHT_CLICK_BLOCK)   return;
  Block b=e.getClickedBlock();
  SlimefunItem item=BlockStorage.check(b);
  if (item != null) {
    if (item.getName().equals(""String_Node_Str"")) {
      e.setCancelled(true);
      Item stack=findItem(b);
      if (stack == null) {
        insertItem(e.getPlayer(),b);
      }
 else       if (!removed_items.contains(stack.getUniqueId())) {
        final UUID uuid=stack.getUniqueId();
        removed_items.add(uuid);
        SlimefunStartup.instance.getServer().getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
          @Override public void run(){
            removed_items.remove(uuid);
          }
        }
,30L);
        stack.remove();
        e.getPlayer().getInventory().addItem(fixItemStack(stack.getItemStack(),stack.getCustomName()));
        e.getPlayer().playSound(b.getLocation(),Sound.ENTITY_ITEM_PICKUP,1F,1F);
        PlayerInventory.update(e.getPlayer());
      }
    }
 else     if (item.getName().equals(""String_Node_Str"")) {
      e.setCancelled(true);
      ItemStack catalyst=new CustomItem(e.getPlayer().getInventory().getItemInMainHand(),1);
      List<Block> pedestals=Pedestals.getPedestals(b);
      if (!altars.contains(e.getClickedBlock())) {
        altars.add(e.getClickedBlock());
        if (pedestals.size() == 8) {
          if (catalyst != null && !catalyst.getType().equals(Material.AIR)) {
            List<ItemStack> input=new ArrayList<ItemStack>();
            for (            Block pedestal : pedestals) {
              Item stack=findItem(pedestal);
              if (stack != null)               input.add(fixItemStack(stack.getItemStack(),stack.getCustomName()));
            }
            ItemStack result=Pedestals.getRecipeOutput(catalyst,input);
            if (result != null) {
              List<ItemStack> consumed=new ArrayList<ItemStack>();
              consumed.add(catalyst);
              PlayerInventory.consumeItemInHand(e.getPlayer());
              Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new RitualAnimation(altars,b,b.getLocation().add(0.5,1.3,0.5),result,pedestals,consumed),10L);
            }
 else {
              altars.remove(e.getClickedBlock());
              Messages.local.sendTranslation(e.getPlayer(),""String_Node_Str"",true);
            }
          }
 else {
            altars.remove(e.getClickedBlock());
            Messages.local.sendTranslation(e.getPlayer(),""String_Node_Str"",true);
          }
        }
 else {
          altars.remove(e.getClickedBlock());
          Messages.local.sendTranslation(e.getPlayer(),""String_Node_Str"",true,new Variable(""String_Node_Str"",String.valueOf(pedestals.size())));
        }
      }
    }
  }
}",0.9968141592920354
79970,"@SuppressWarnings(""String_Node_Str"") @EventHandler(priority=EventPriority.NORMAL) public void onRightClick(ItemUseEvent e){
  if (e.getParentEvent() != null && !e.getParentEvent().getHand().equals(EquipmentSlot.HAND)) {
    return;
  }
  final Player p=e.getPlayer();
  ItemStack item=e.getItem();
  if (SlimefunManager.isItemSimiliar(item,SlimefunGuide.getItem(true),true)) {
    if (p.isSneaking())     SlimefunGuide.openSettings(p,item);
 else     SlimefunGuide.openGuide(p,true);
  }
 else   if (SlimefunManager.isItemSimiliar(item,SlimefunGuide.getItem(false),true)) {
    if (p.isSneaking())     SlimefunGuide.openSettings(p,item);
 else     SlimefunGuide.openGuide(p,false);
  }
 else   if (SlimefunManager.isItemSimiliar(e.getPlayer().getInventory().getItemInMainHand(),SlimefunItems.DEBUG_FISH,true) || SlimefunManager.isItemSimiliar(e.getPlayer().getInventory().getItemInOffHand(),SlimefunItems.DEBUG_FISH,true)) {
  }
 else   if (Slimefun.hasUnlocked(p,item,true)) {
    for (    ItemHandler handler : SlimefunItem.getHandlers(""String_Node_Str"")) {
      if (((ItemInteractionHandler)handler).onRightClick(e,p,item))       return;
    }
    if (SlimefunManager.isItemSimiliar(item,SlimefunItems.DURALUMIN_MULTI_TOOL,false) || SlimefunManager.isItemSimiliar(item,SlimefunItems.SOLDER_MULTI_TOOL,false) || SlimefunManager.isItemSimiliar(item,SlimefunItems.BILLON_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.STEEL_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.CARBONADO_MULTI_TOOL,false)) {
      e.setCancelled(true);
      ItemStack tool=null;
      for (      ItemStack mTool : new ItemStack[]{SlimefunItems.DURALUMIN_MULTI_TOOL,SlimefunItems.SOLDER_MULTI_TOOL,SlimefunItems.BILLON_MULTI_TOOL,SlimefunItems.STEEL_MULTI_TOOL,SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL,SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL,SlimefunItems.CARBONADO_MULTI_TOOL}) {
        if (mTool.getItemMeta().getLore().get(0).equalsIgnoreCase(item.getItemMeta().getLore().get(0))) {
          tool=mTool;
          break;
        }
      }
      if (tool != null) {
        List<Integer> modes=((MultiTool)SlimefunItem.getByItem(tool)).getModes();
        int index=0;
        if (Variables.mode.containsKey(p.getUniqueId()))         index=Variables.mode.get(p.getUniqueId());
        if (!p.isSneaking()) {
          float charge=ItemEnergy.getStoredEnergy(item);
          float cost=0.3F;
          if (charge >= cost) {
            p.setItemInHand(ItemEnergy.chargeItem(item,-cost));
            Bukkit.getPluginManager().callEvent(new ItemUseEvent(e.getParentEvent(),SlimefunItem.getByName((String)Slimefun.getItemValue(SlimefunItem.getByItem(tool).getName(),""String_Node_Str"" + modes.get(index) + ""String_Node_Str"")).getItem(),e.getClickedBlock()));
          }
        }
 else {
          index++;
          if (index == modes.size())           index=0;
          Messages.local.sendTranslation(p,""String_Node_Str"",true,new Variable(""String_Node_Str"",""String_Node_Str""),new Variable(""String_Node_Str"",(String)Slimefun.getItemValue(SlimefunItem.getByItem(tool).getName(),""String_Node_Str"" + modes.get(index) + ""String_Node_Str"")));
          Variables.mode.put(p.getUniqueId(),index);
        }
      }
    }
 else     if (SlimefunManager.isItemSimiliar(item,SlimefunItems.HEAVY_CREAM,true))     e.setCancelled(true);
    if (e.getClickedBlock() != null && BlockStorage.hasBlockInfo(e.getClickedBlock())) {
      String id=BlockStorage.checkID(e.getClickedBlock());
      if (BlockMenuPreset.isInventory(id)) {
        if (SlimefunManager.isItemSimiliar(item,SlimefunItems.CARGO_INPUT,true))         ;
 else         if (SlimefunManager.isItemSimiliar(item,SlimefunItems.CARGO_OUTPUT,true))         ;
 else         if (SlimefunManager.isItemSimiliar(item,SlimefunItems.CARGO_OUTPUT_ADVANCED,true))         ;
 else         if (SlimefunManager.isItemSimiliar(item,SlimefunItems.CT_IMPORT_BUS,true))         ;
 else         if (SlimefunManager.isItemSimiliar(item,SlimefunItems.CT_EXPORT_BUS,true))         ;
 else {
          e.setCancelled(true);
          BlockStorage storage=BlockStorage.getStorage(e.getClickedBlock().getWorld());
          if (storage.hasUniversalInventory(id)) {
            UniversalBlockMenu menu=storage.getUniversalInventory(id);
            if (menu.canOpen(e.getClickedBlock(),p))             menu.open(p);
          }
 else           if (storage.hasInventory(e.getClickedBlock().getLocation())) {
            BlockMenu menu=BlockStorage.getInventory(e.getClickedBlock().getLocation());
            if (menu.canOpen(e.getClickedBlock(),p))             menu.open(p);
          }
        }
      }
    }
  }
 else   e.setCancelled(true);
}","@SuppressWarnings(""String_Node_Str"") @EventHandler(priority=EventPriority.NORMAL) public void onRightClick(ItemUseEvent e){
  if (e.getParentEvent() != null && !e.getParentEvent().getHand().equals(EquipmentSlot.HAND)) {
    return;
  }
  final Player p=e.getPlayer();
  ItemStack item=e.getItem();
  if (SlimefunManager.isItemSimiliar(item,SlimefunGuide.getItem(true),true)) {
    if (p.isSneaking())     SlimefunGuide.openSettings(p,item);
 else     SlimefunGuide.openGuide(p,true);
  }
 else   if (SlimefunManager.isItemSimiliar(item,SlimefunGuide.getItem(false),true)) {
    if (p.isSneaking())     SlimefunGuide.openSettings(p,item);
 else     SlimefunGuide.openGuide(p,false);
  }
 else   if (SlimefunManager.isItemSimiliar(e.getPlayer().getInventory().getItemInMainHand(),SlimefunItems.DEBUG_FISH,true) || SlimefunManager.isItemSimiliar(e.getPlayer().getInventory().getItemInOffHand(),SlimefunItems.DEBUG_FISH,true)) {
  }
 else   if (Slimefun.hasUnlocked(p,item,true)) {
    for (    ItemHandler handler : SlimefunItem.getHandlers(""String_Node_Str"")) {
      if (((ItemInteractionHandler)handler).onRightClick(e,p,item))       return;
    }
    if (SlimefunManager.isItemSimiliar(item,SlimefunItems.DURALUMIN_MULTI_TOOL,false) || SlimefunManager.isItemSimiliar(item,SlimefunItems.SOLDER_MULTI_TOOL,false) || SlimefunManager.isItemSimiliar(item,SlimefunItems.BILLON_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.STEEL_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL,false)|| SlimefunManager.isItemSimiliar(item,SlimefunItems.CARBONADO_MULTI_TOOL,false)) {
      e.setCancelled(true);
      ItemStack tool=null;
      for (      ItemStack mTool : new ItemStack[]{SlimefunItems.DURALUMIN_MULTI_TOOL,SlimefunItems.SOLDER_MULTI_TOOL,SlimefunItems.BILLON_MULTI_TOOL,SlimefunItems.STEEL_MULTI_TOOL,SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL,SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL,SlimefunItems.CARBONADO_MULTI_TOOL}) {
        if (mTool.getItemMeta().getLore().get(0).equalsIgnoreCase(item.getItemMeta().getLore().get(0))) {
          tool=mTool;
          break;
        }
      }
      if (tool != null) {
        List<Integer> modes=((MultiTool)SlimefunItem.getByItem(tool)).getModes();
        int index=0;
        if (Variables.mode.containsKey(p.getUniqueId()))         index=Variables.mode.get(p.getUniqueId());
        if (!p.isSneaking()) {
          float charge=ItemEnergy.getStoredEnergy(item);
          float cost=0.3F;
          if (charge >= cost) {
            p.setItemInHand(ItemEnergy.chargeItem(item,-cost));
            Bukkit.getPluginManager().callEvent(new ItemUseEvent(e.getParentEvent(),SlimefunItem.getByName((String)Slimefun.getItemValue(SlimefunItem.getByItem(tool).getName(),""String_Node_Str"" + modes.get(index) + ""String_Node_Str"")).getItem(),e.getClickedBlock()));
          }
        }
 else {
          index++;
          if (index == modes.size())           index=0;
          Messages.local.sendTranslation(p,""String_Node_Str"",true,new Variable(""String_Node_Str"",""String_Node_Str""),new Variable(""String_Node_Str"",(String)Slimefun.getItemValue(SlimefunItem.getByItem(tool).getName(),""String_Node_Str"" + modes.get(index) + ""String_Node_Str"")));
          Variables.mode.put(p.getUniqueId(),index);
        }
      }
    }
 else     if (SlimefunManager.isItemSimiliar(item,SlimefunItems.HEAVY_CREAM,true))     e.setCancelled(true);
    if (e.getClickedBlock() != null && BlockStorage.hasBlockInfo(e.getClickedBlock())) {
      String id=BlockStorage.checkID(e.getClickedBlock());
      if (BlockMenuPreset.isInventory(id)) {
        if (p.isSneaking() && SlimefunManager.isItemSimiliar(item,SlimefunItems.CARGO_INPUT,true))         ;
 else         if (p.isSneaking() && SlimefunManager.isItemSimiliar(item,SlimefunItems.CARGO_OUTPUT,true))         ;
 else         if (p.isSneaking() && SlimefunManager.isItemSimiliar(item,SlimefunItems.CARGO_OUTPUT_ADVANCED,true))         ;
 else         if (p.isSneaking() && SlimefunManager.isItemSimiliar(item,SlimefunItems.CT_IMPORT_BUS,true))         ;
 else         if (p.isSneaking() && SlimefunManager.isItemSimiliar(item,SlimefunItems.CT_EXPORT_BUS,true))         ;
 else {
          e.setCancelled(true);
          BlockStorage storage=BlockStorage.getStorage(e.getClickedBlock().getWorld());
          if (storage.hasUniversalInventory(id)) {
            UniversalBlockMenu menu=storage.getUniversalInventory(id);
            if (menu.canOpen(e.getClickedBlock(),p))             menu.open(p);
          }
 else           if (storage.hasInventory(e.getClickedBlock().getLocation())) {
            BlockMenu menu=BlockStorage.getInventory(e.getClickedBlock().getLocation());
            if (menu.canOpen(e.getClickedBlock(),p))             menu.open(p);
          }
        }
      }
    }
  }
 else   e.setCancelled(true);
}",0.9908462164361268
79971,"@EventHandler public void onEat(PlayerItemConsumeEvent e){
  if (e.getItem() != null) {
    final Player p=e.getPlayer();
    ItemStack item=e.getItem();
    if (Slimefun.hasUnlocked(p,item,true)) {
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MONSTER_JERKY,true)) {
        PlayerInventory.consumeItemInHand(p);
        e.setItem(new ItemStack(Material.APPLE));
      }
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.FORTUNE_COOKIE,true))       p.sendMessage(ChatColor.translateAlternateColors('&',Messages.local.getTranslation(""String_Node_Str"").get(CSCoreLib.randomizer().nextInt(Messages.local.getTranslation(""String_Node_Str"").size()))));
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.BEEF_JERKY,true))       p.setSaturation((Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str""));
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MEDICINE,true)) {
        if (p.hasPotionEffect(PotionEffectType.POISON))         p.removePotionEffect(PotionEffectType.POISON);
        if (p.hasPotionEffect(PotionEffectType.WITHER))         p.removePotionEffect(PotionEffectType.WITHER);
        if (p.hasPotionEffect(PotionEffectType.SLOW))         p.removePotionEffect(PotionEffectType.SLOW);
        if (p.hasPotionEffect(PotionEffectType.SLOW_DIGGING))         p.removePotionEffect(PotionEffectType.SLOW_DIGGING);
        if (p.hasPotionEffect(PotionEffectType.WEAKNESS))         p.removePotionEffect(PotionEffectType.WEAKNESS);
        if (p.hasPotionEffect(PotionEffectType.CONFUSION))         p.removePotionEffect(PotionEffectType.CONFUSION);
        if (p.hasPotionEffect(PotionEffectType.BLINDNESS))         p.removePotionEffect(PotionEffectType.BLINDNESS);
        p.setFireTicks(0);
      }
 else       if (item.getType() == Material.POTION) {
        SlimefunItem sfItem=SlimefunItem.getByItem(item);
        if (sfItem != null && sfItem instanceof Juice) {
          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
            @Override public void run(){
              p.getInventory().removeItem(new ItemStack(Material.GLASS_BOTTLE,1));
            }
          }
,1L);
        }
      }
    }
 else     e.setCancelled(true);
  }
}","@EventHandler public void onEat(PlayerItemConsumeEvent e){
  if (e.getItem() != null) {
    final Player p=e.getPlayer();
    ItemStack item=e.getItem();
    if (Slimefun.hasUnlocked(p,item,true)) {
      if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MONSTER_JERKY,true)) {
        PlayerInventory.consumeItemInHand(p);
        e.setItem(new ItemStack(Material.APPLE));
      }
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.FORTUNE_COOKIE,true))       p.sendMessage(ChatColor.translateAlternateColorCodes('&',Messages.local.getTranslation(""String_Node_Str"").get(CSCoreLib.randomizer().nextInt(Messages.local.getTranslation(""String_Node_Str"").size()))));
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.BEEF_JERKY,true))       p.setSaturation((Integer)Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str""));
 else       if (SlimefunManager.isItemSimiliar(item,SlimefunItems.MEDICINE,true)) {
        if (p.hasPotionEffect(PotionEffectType.POISON))         p.removePotionEffect(PotionEffectType.POISON);
        if (p.hasPotionEffect(PotionEffectType.WITHER))         p.removePotionEffect(PotionEffectType.WITHER);
        if (p.hasPotionEffect(PotionEffectType.SLOW))         p.removePotionEffect(PotionEffectType.SLOW);
        if (p.hasPotionEffect(PotionEffectType.SLOW_DIGGING))         p.removePotionEffect(PotionEffectType.SLOW_DIGGING);
        if (p.hasPotionEffect(PotionEffectType.WEAKNESS))         p.removePotionEffect(PotionEffectType.WEAKNESS);
        if (p.hasPotionEffect(PotionEffectType.CONFUSION))         p.removePotionEffect(PotionEffectType.CONFUSION);
        if (p.hasPotionEffect(PotionEffectType.BLINDNESS))         p.removePotionEffect(PotionEffectType.BLINDNESS);
        p.setFireTicks(0);
      }
 else       if (item.getType() == Material.POTION) {
        SlimefunItem sfItem=SlimefunItem.getByItem(item);
        if (sfItem != null && sfItem instanceof Juice) {
          Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
            @Override public void run(){
              p.getInventory().removeItem(new ItemStack(Material.GLASS_BOTTLE,1));
            }
          }
,1L);
        }
      }
    }
 else     e.setCancelled(true);
  }
}",0.9991142604074402
79972,"@SuppressWarnings(""String_Node_Str"") @Override public void onEnable(){
  CSCoreLibLoader loader=new CSCoreLibLoader(this);
  if (loader.load()) {
    instance=this;
    System.out.println(""String_Node_Str"");
    Files.cleanup();
    System.out.println(""String_Node_Str"");
    utils=new PluginUtils(this);
    utils.setupConfig();
    researches=new Config(Files.RESEARCHES);
    items=new Config(Files.ITEMS);
    whitelist=new Config(Files.WHITELIST);
    utils.setupUpdater(53485,getFile());
    utils.setupMetrics();
    utils.setupLocalization();
    config=utils.getConfig();
    Messages.local=utils.getLocalization();
    Messages.setup();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    SlimefunManager.plugin=this;
    System.out.println(""String_Node_Str"");
    MiscSetup.setupItemSettings();
    try {
      SlimefunSetup.setupItems();
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    MiscSetup.loadDescriptions();
    System.out.println(""String_Node_Str"");
    Research.enabled=getResearchCfg().getBoolean(""String_Node_Str"");
    ResearchSetup.setupResearches();
    MiscSetup.setupMisc();
    BlockStorage.info_delay=config.getInt(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    OilFields.init();
    new ArmorListener(this);
    new ItemListener(this);
    new BlockListener(this);
    new GearListener(this);
    new AutonomousToolsListener(this);
    new DamageListener(this);
    new BowListener(this);
    new ToolListener(this);
    new FurnaceListener(this);
    new TeleporterListener(this);
    new AndroidKillingListener(this);
    if (config.getBoolean(""String_Node_Str""))     new TalismanListener(this);
    if (config.getBoolean(""String_Node_Str""))     new BackpackListener(this);
    if (config.getBoolean(""String_Node_Str""))     new CoolerListener(this);
    if (config.getBoolean(""String_Node_Str"")) {
      getServer().getPluginManager().registerEvents(new Listener(){
        @EventHandler public void onJoin(        PlayerJoinEvent e){
          if (!e.getPlayer().hasPlayedBefore()) {
            Player p=e.getPlayer();
            if (!getWhitelist().getBoolean(p.getWorld().getName() + ""String_Node_Str""))             return;
            if (!getWhitelist().getBoolean(p.getWorld().getName() + ""String_Node_Str""))             return;
            p.getInventory().addItem(SlimefunGuide.getItem());
          }
        }
      }
,this);
    }
    getServer().getPluginManager().registerEvents(new Listener(){
      @EventHandler public void onWorldLoad(      WorldLoadEvent e){
        BlockStorage.getForcedStorage(e.getWorld());
        SlimefunStartup.getWhitelist().setDefaultValue(e.getWorld().getName() + ""String_Node_Str"",true);
        SlimefunStartup.getWhitelist().setDefaultValue(e.getWorld().getName() + ""String_Node_Str"",true);
        SlimefunStartup.getWhitelist().save();
      }
      @EventHandler public void onWorldUnload(      WorldUnloadEvent e){
        BlockStorage storage=BlockStorage.getStorage(e.getWorld());
        if (storage != null)         storage.save(true);
 else         System.err.println(""String_Node_Str"" + e.getWorld().getName() + ""String_Node_Str"");
      }
    }
,this);
    getServer().getPluginManager().registerEvents(new Listener(){
      @EventHandler public void onDisconnect(      PlayerQuitEvent e){
        if (SlimefunGuide.history.containsKey(e.getPlayer().getUniqueId()))         SlimefunGuide.history.remove(e.getPlayer().getUniqueId());
      }
    }
,this);
    getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        Slimefun.emeraldenchants=getServer().getPluginManager().isPluginEnabled(""String_Node_Str"");
        SlimefunGuide.all_recipes=config.getBoolean(""String_Node_Str"");
        MiscSetup.loadItems();
        for (        World world : Bukkit.getWorlds()) {
          new BlockStorage(world);
        }
        if (SlimefunItem.getByName(""String_Node_Str"") != null)         new AncientAltarListener((SlimefunStartup)instance);
      }
    }
,0);
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      try {
        new WESlimefunManager();
        System.out.println(""String_Node_Str"");
      }
 catch (      Exception x) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
      }
    }
    getCommand(""String_Node_Str"").setExecutor(new SlimefunCommand(this));
    getCommand(""String_Node_Str"").setTabCompleter(new SlimefunTabCompleter());
    if (config.getBoolean(""String_Node_Str"")) {
      getServer().getScheduler().runTaskTimer(this,new Runnable(){
        @Override public void run(){
          for (          Player p : Bukkit.getOnlinePlayers()) {
            for (            ItemStack armor : p.getInventory().getArmorContents()) {
              if (armor != null) {
                if (Slimefun.hasUnlocked(p,armor,true)) {
                  if (SlimefunItem.getByItem(armor) instanceof SlimefunArmorPiece) {
                    for (                    PotionEffect effect : ((SlimefunArmorPiece)SlimefunItem.getByItem(armor)).getEffects()) {
                      p.removePotionEffect(effect.getType());
                      p.addPotionEffect(effect);
                    }
                  }
                  if (SlimefunManager.isItemSimiliar(armor,SlimefunItem.getItem(""String_Node_Str""),false)) {
                    if (p.getWorld().getTime() < 12300 || p.getWorld().getTime() > 23850) {
                      if (p.getEyeLocation().getBlock().getLightFromSky() == 15) {
                        ItemEnergy.chargeInventory(p,Float.valueOf(String.valueOf(Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str""))));
                      }
                    }
                  }
                }
              }
            }
            for (            ItemStack radioactive : SlimefunItem.radioactive) {
              if (p.getInventory().containsAtLeast(radioactive,1)) {
                if (!SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getHelmet(),true) && !SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getChestplate(),true) && !SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getLeggings(),true)&& !SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getBoots(),true)) {
                  p.addPotionEffect(new PotionEffect(PotionEffectType.WITHER,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,400,1));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.SLOW_DIGGING,400,1));
                  p.setFireTicks(400);
                  break;
                }
              }
            }
          }
        }
      }
,0L,config.getInt(""String_Node_Str"") * 20L);
    }
    ticker=new TickerTask();
    getServer().getScheduler().scheduleAsyncRepeatingTask(this,new AutoSavingTask(),1200L,config.getInt(""String_Node_Str"") * 60L * 20L);
    getServer().getScheduler().scheduleAsyncRepeatingTask(this,ticker,100L,config.getInt(""String_Node_Str""));
    System.out.println(""String_Node_Str"");
    clearlag=getServer().getPluginManager().isPluginEnabled(""String_Node_Str"");
    if (clearlag)     new ClearLaggIntegration(this);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void onEnable(){
  CSCoreLibLoader loader=new CSCoreLibLoader(this);
  if (loader.load()) {
    instance=this;
    System.out.println(""String_Node_Str"");
    Files.cleanup();
    System.out.println(""String_Node_Str"");
    utils=new PluginUtils(this);
    utils.setupConfig();
    researches=new Config(Files.RESEARCHES);
    items=new Config(Files.ITEMS);
    whitelist=new Config(Files.WHITELIST);
    utils.setupUpdater(53485,getFile());
    utils.setupMetrics();
    utils.setupLocalization();
    config=utils.getConfig();
    Messages.local=utils.getLocalization();
    Messages.setup();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    if (!new File(""String_Node_Str"").exists())     new File(""String_Node_Str"").mkdirs();
    SlimefunManager.plugin=this;
    System.out.println(""String_Node_Str"");
    MiscSetup.setupItemSettings();
    try {
      SlimefunSetup.setupItems();
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    MiscSetup.loadDescriptions();
    System.out.println(""String_Node_Str"");
    Research.enabled=getResearchCfg().getBoolean(""String_Node_Str"");
    ResearchSetup.setupResearches();
    MiscSetup.setupMisc();
    BlockStorage.info_delay=config.getInt(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    OilFields.init();
    new ArmorListener(this);
    new ItemListener(this);
    new BlockListener(this);
    new GearListener(this);
    new AutonomousToolsListener(this);
    new DamageListener(this);
    new BowListener(this);
    new ToolListener(this);
    new FurnaceListener(this);
    new TeleporterListener(this);
    new AndroidKillingListener(this);
    if (config.getBoolean(""String_Node_Str""))     new TalismanListener(this);
    if (config.getBoolean(""String_Node_Str""))     new BackpackListener(this);
    if (config.getBoolean(""String_Node_Str""))     new CoolerListener(this);
    if (config.getBoolean(""String_Node_Str"")) {
      getServer().getPluginManager().registerEvents(new Listener(){
        @EventHandler public void onJoin(        PlayerJoinEvent e){
          if (!e.getPlayer().hasPlayedBefore()) {
            Player p=e.getPlayer();
            if (!getWhitelist().getBoolean(p.getWorld().getName() + ""String_Node_Str""))             return;
            if (!getWhitelist().getBoolean(p.getWorld().getName() + ""String_Node_Str""))             return;
            p.getInventory().addItem(SlimefunGuide.getItem());
          }
        }
      }
,this);
    }
    getServer().getPluginManager().registerEvents(new Listener(){
      @EventHandler public void onWorldLoad(      WorldLoadEvent e){
        BlockStorage.getForcedStorage(e.getWorld());
        SlimefunStartup.getWhitelist().setDefaultValue(e.getWorld().getName() + ""String_Node_Str"",true);
        SlimefunStartup.getWhitelist().setDefaultValue(e.getWorld().getName() + ""String_Node_Str"",true);
        SlimefunStartup.getWhitelist().save();
      }
      @EventHandler public void onWorldUnload(      WorldUnloadEvent e){
        BlockStorage storage=BlockStorage.getStorage(e.getWorld());
        if (storage != null)         storage.save(true);
 else         System.err.println(""String_Node_Str"" + e.getWorld().getName() + ""String_Node_Str"");
      }
    }
,this);
    getServer().getPluginManager().registerEvents(new Listener(){
      @EventHandler public void onDisconnect(      PlayerQuitEvent e){
        if (SlimefunGuide.history.containsKey(e.getPlayer().getUniqueId()))         SlimefunGuide.history.remove(e.getPlayer().getUniqueId());
      }
    }
,this);
    getServer().getScheduler().scheduleSyncDelayedTask(this,new Runnable(){
      @Override public void run(){
        Slimefun.emeraldenchants=getServer().getPluginManager().isPluginEnabled(""String_Node_Str"");
        SlimefunGuide.all_recipes=config.getBoolean(""String_Node_Str"");
        MiscSetup.loadItems();
        for (        World world : Bukkit.getWorlds()) {
          new BlockStorage(world);
        }
        if (SlimefunItem.getByName(""String_Node_Str"") != null)         new AncientAltarListener((SlimefunStartup)instance);
      }
    }
,0);
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      try {
        new WESlimefunManager();
        System.out.println(""String_Node_Str"");
      }
 catch (      Exception x) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
      }
    }
    getCommand(""String_Node_Str"").setExecutor(new SlimefunCommand(this));
    getCommand(""String_Node_Str"").setTabCompleter(new SlimefunTabCompleter());
    if (config.getBoolean(""String_Node_Str"")) {
      getServer().getScheduler().runTaskTimer(this,new Runnable(){
        @Override public void run(){
          for (          Player p : Bukkit.getOnlinePlayers()) {
            for (            ItemStack armor : p.getInventory().getArmorContents()) {
              if (armor != null) {
                if (Slimefun.hasUnlocked(p,armor,true)) {
                  if (SlimefunItem.getByItem(armor) instanceof SlimefunArmorPiece) {
                    for (                    PotionEffect effect : ((SlimefunArmorPiece)SlimefunItem.getByItem(armor)).getEffects()) {
                      p.removePotionEffect(effect.getType());
                      p.addPotionEffect(effect);
                    }
                  }
                  if (SlimefunManager.isItemSimiliar(armor,SlimefunItem.getItem(""String_Node_Str""),false)) {
                    if (p.getWorld().getTime() < 12300 || p.getWorld().getTime() > 23850) {
                      if (p.getEyeLocation().getBlock().getLightFromSky() == 15) {
                        ItemEnergy.chargeInventory(p,Float.valueOf(String.valueOf(Slimefun.getItemValue(""String_Node_Str"",""String_Node_Str""))));
                      }
                    }
                  }
                }
              }
            }
            for (            ItemStack radioactive : SlimefunItem.radioactive) {
              if (p.getInventory().containsAtLeast(radioactive,1)) {
                if (!SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getHelmet(),true) && !SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getChestplate(),true) && !SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getLeggings(),true)&& !SlimefunManager.isItemSimiliar(SlimefunItem.getItem(""String_Node_Str""),p.getInventory().getBoots(),true)) {
                  p.addPotionEffect(new PotionEffect(PotionEffectType.WITHER,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS,400,3));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,400,1));
                  p.addPotionEffect(new PotionEffect(PotionEffectType.SLOW_DIGGING,400,1));
                  p.setFireTicks(400);
                  break;
                }
              }
            }
          }
        }
      }
,0L,config.getInt(""String_Node_Str"") * 20L);
    }
    ticker=new TickerTask();
    getServer().getScheduler().scheduleAsyncRepeatingTask(this,new AutoSavingTask(),1200L,config.getInt(""String_Node_Str"") * 60L * 20L);
    getServer().getScheduler().scheduleAsyncRepeatingTask(this,ticker,100L,config.getInt(""String_Node_Str""));
    System.out.println(""String_Node_Str"");
    clearlag=getServer().getPluginManager().isPluginEnabled(""String_Node_Str"");
    if (clearlag)     new ClearLaggIntegration(this);
    CSCoreLib.getLib().filterLog(""String_Node_Str"");
  }
}",0.996813563398064
79973,"@EventHandler public void onArrowHit(final ProjectileHitEvent e){
  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
    @Override public void run(){
      if (Variables.arrows.containsKey(e.getEntity().getUniqueId()))       Variables.arrows.remove(e.getEntity().getUniqueId());
      handleGrapplingHook((Arrow)e.getEntity());
    }
  }
,3L);
}","@EventHandler public void onArrowHit(final ProjectileHitEvent e){
  Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunStartup.instance,new Runnable(){
    @Override public void run(){
      if (Variables.arrows.containsKey(e.getEntity().getUniqueId()))       Variables.arrows.remove(e.getEntity().getUniqueId());
      if (e.getEntity() instanceof Arrow)       handleGrapplingHook((Arrow)e.getEntity());
    }
  }
,3L);
}",0.948019801980198
79974,"@Override public ODomain defaultDomain(){
  ODomain domain=new ODomain();
  if (getOdooVersion().getVersion_number() <= 7) {
    domain.add(""String_Node_Str"");
    domain.add(""String_Node_Str"",""String_Node_Str"",getUser().getUser_id());
    domain.add(""String_Node_Str"",""String_Node_Str"",getUser().getPartner_id());
  }
 else {
    domain.add(""String_Node_Str"",""String_Node_Str"",getUser().getPartner_id());
  }
  return domain;
}","@Override public ODomain defaultDomain(){
  ODomain domain=new ODomain();
  if (getOdooVersion().getVersion_number() <= 7) {
    domain.add(""String_Node_Str"");
    domain.add(""String_Node_Str"",""String_Node_Str"",getUser().getUser_id());
    domain.add(""String_Node_Str"",""String_Node_Str"",new JSONArray().put(getUser().getPartner_id()));
  }
 else {
    domain.add(""String_Node_Str"",""String_Node_Str"",new JSONArray().put(getUser().getPartner_id()));
  }
  domain.add(""String_Node_Str"",""String_Node_Str"",false);
  return domain;
}",0.8963350785340314
79975,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.sale_detail);
  OActionBarUtils.setActionBar(this,true);
  actionBar=getSupportActionBar();
  sale=new SaleOrder(this,null);
  extra=getIntent().getExtras();
  mType=Type.valueOf(extra.getString(""String_Node_Str""));
  currencyObj=sale.currency();
  init();
  initAdapter();
  partner=new ResPartner(this,null);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.sale_detail);
  OActionBarUtils.setActionBar(this,true);
  actionBar=getSupportActionBar();
  sale=new SaleOrder(this,null);
  extra=getIntent().getExtras();
  mType=Type.valueOf(extra.getString(""String_Node_Str""));
  currencyObj=sale.currency();
  partner=new ResPartner(this,null);
  products=new ProductProduct(this,null);
  init();
  initAdapter();
}",0.8728070175438597
79976,"private void initAdapter(){
  mList=(ExpandableListControl)findViewById(R.id.expListOrderLine);
  mList.setVisibility(View.VISIBLE);
  if (extra != null && record != null) {
    List<ODataRow> lines=record.getO2MRecord(""String_Node_Str"").browseEach();
    for (    ODataRow line : lines) {
      int product_id=line.getInt(""String_Node_Str"");
      if (product_id != 0) {
        lineValues.put(product_id + ""String_Node_Str"",line.getFloat(""String_Node_Str""));
        lineIds.put(product_id + ""String_Node_Str"",line.getInt(""String_Node_Str""));
      }
    }
    objects.addAll(lines);
  }
  mAdapter=mList.getAdapter(R.layout.sale_order_line_item,objects,new ExpandableListControl.ExpandableListAdapterGetViewListener(){
    @Override public View getView(    int position,    View mView,    ViewGroup parent){
      ODataRow row=(ODataRow)mAdapter.getItem(position);
      OControls.setText(mView,R.id.edtName,row.getString(""String_Node_Str""));
      OControls.setText(mView,R.id.edtProductQty,row.getString(""String_Node_Str""));
      OControls.setText(mView,R.id.edtProductPrice,String.format(""String_Node_Str"",row.getFloat(""String_Node_Str"")));
      OControls.setText(mView,R.id.edtSubTotal,String.format(""String_Node_Str"",row.getFloat(""String_Node_Str"")));
      return mView;
    }
  }
);
  mAdapter.notifyDataSetChanged(objects);
}","private void initAdapter(){
  mList=(ExpandableListControl)findViewById(R.id.expListOrderLine);
  mList.setVisibility(View.VISIBLE);
  if (extra != null && record != null) {
    List<ODataRow> lines=record.getO2MRecord(""String_Node_Str"").browseEach();
    for (    ODataRow line : lines) {
      int product_id=products.selectServerId(line.getInt(""String_Node_Str""));
      if (product_id != 0) {
        lineValues.put(product_id + ""String_Node_Str"",line.getFloat(""String_Node_Str""));
        lineIds.put(product_id + ""String_Node_Str"",line.getInt(""String_Node_Str""));
      }
    }
    objects.addAll(lines);
  }
  mAdapter=mList.getAdapter(R.layout.sale_order_line_item,objects,new ExpandableListControl.ExpandableListAdapterGetViewListener(){
    @Override public View getView(    int position,    View mView,    ViewGroup parent){
      ODataRow row=(ODataRow)mAdapter.getItem(position);
      OControls.setText(mView,R.id.edtName,row.getString(""String_Node_Str""));
      OControls.setText(mView,R.id.edtProductQty,row.getString(""String_Node_Str""));
      OControls.setText(mView,R.id.edtProductPrice,String.format(""String_Node_Str"",row.getFloat(""String_Node_Str"")));
      OControls.setText(mView,R.id.edtSubTotal,String.format(""String_Node_Str"",row.getFloat(""String_Node_Str"")));
      return mView;
    }
  }
);
  mAdapter.notifyDataSetChanged(objects);
}",0.9848204368752314
79977,"@Override protected List<ODataRow> doInBackground(HashMap<String,Float>... params){
  List<ODataRow> items=new ArrayList<>();
  try {
    ProductProduct productProduct=new ProductProduct(SalesDetail.this,sale.getUser());
    SalesOrderLine saleLine=new SalesOrderLine(SalesDetail.this,sale.getUser());
    ResPartner partner=new ResPartner(SalesDetail.this,sale.getUser());
    ODataRow customer=partner.browse(mForm.getValues().getInt(""String_Node_Str""));
    ServerDataHelper helper=saleLine.getServerDataHelper();
    boolean stockInstalled=saleLine.isInstalledOnServer(""String_Node_Str"");
    for (    String key : params[0].keySet()) {
      ODataRow product=productProduct.browse(productProduct.selectRowId(Integer.parseInt(key)));
      Float qty=params[0].get(key);
      OArguments arguments=new OArguments();
      arguments.add(new JSONArray());
      int pricelist=customer.getInt(""String_Node_Str"");
      arguments.add(pricelist);
      arguments.add(product.getInt(""String_Node_Str""));
      arguments.add(qty);
      arguments.add(false);
      arguments.add(qty);
      arguments.add(false);
      arguments.add((product.getString(""String_Node_Str"").equals(""String_Node_Str"")) ? false : product.getString(""String_Node_Str""));
      arguments.add(customer.getInt(""String_Node_Str""));
      arguments.add(false);
      arguments.add(true);
      arguments.add((customer.getString(""String_Node_Str"").equals(""String_Node_Str"")) ? false : customer.getString(""String_Node_Str""));
      arguments.add(false);
      Object fiscal_position=(customer.getString(""String_Node_Str"").equals(""String_Node_Str"")) ? false : customer.getString(""String_Node_Str"");
      arguments.add(fiscal_position);
      arguments.add(false);
      if (stockInstalled) {
        arguments.add(false);
      }
      JSONObject context=new JSONObject();
      context.put(""String_Node_Str"",customer.getInt(""String_Node_Str""));
      context.put(""String_Node_Str"",qty);
      context.put(""String_Node_Str"",pricelist);
      String method=(stockInstalled) ? ""String_Node_Str"" : ""String_Node_Str"";
      JSONObject response=((JSONObject)helper.callMethod(method,arguments,context));
      JSONObject res=response.getJSONObject(""String_Node_Str"");
      if (response.has(""String_Node_Str"") && !response.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
        JSONObject warning_data=response.getJSONObject(""String_Node_Str"");
        if (warning_data.has(""String_Node_Str""))         warning=warning_data.getString(""String_Node_Str"");
      }
      OValues values=new OValues();
      values.put(""String_Node_Str"",product.getInt(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.getDouble(""String_Node_Str""));
      values.put(""String_Node_Str"",false);
      values.put(""String_Node_Str"",res.getDouble(""String_Node_Str"") * res.getDouble(""String_Node_Str""));
      JSONArray tax_id=new JSONArray();
      tax_id.put(6);
      tax_id.put(false);
      tax_id.put(res.getJSONArray(""String_Node_Str""));
      values.put(""String_Node_Str"",new JSONArray().put(tax_id));
      values.put(""String_Node_Str"",(res.has(""String_Node_Str"")) ? res.get(""String_Node_Str"") : 0);
      values.put(""String_Node_Str"",(res.has(""String_Node_Str"")) ? res.get(""String_Node_Str"") : 0);
      if (stockInstalled) {
        values.put(""String_Node_Str"",(res.has(""String_Node_Str"")) ? res.get(""String_Node_Str"") : false);
        values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      }
      if (extra != null)       values.put(""String_Node_Str"",extra.getInt(OColumn.ROW_ID));
      items.add(values.toDataRow());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return items;
}","@Override protected List<ODataRow> doInBackground(HashMap<String,Float>... params){
  List<ODataRow> items=new ArrayList<>();
  try {
    ProductProduct productProduct=new ProductProduct(SalesDetail.this,sale.getUser());
    SalesOrderLine saleLine=new SalesOrderLine(SalesDetail.this,sale.getUser());
    ResPartner partner=new ResPartner(SalesDetail.this,sale.getUser());
    ODataRow customer=partner.browse(mForm.getValues().getInt(""String_Node_Str""));
    ServerDataHelper helper=saleLine.getServerDataHelper();
    boolean stockInstalled=saleLine.isInstalledOnServer(""String_Node_Str"");
    for (    String key : params[0].keySet()) {
      ODataRow product=productProduct.browse(productProduct.selectRowId(Integer.parseInt(key)));
      Float qty=params[0].get(key);
      OArguments arguments=new OArguments();
      arguments.add(new JSONArray());
      int pricelist=customer.getInt(""String_Node_Str"");
      arguments.add(pricelist);
      arguments.add(product.getInt(""String_Node_Str""));
      arguments.add(qty);
      arguments.add(false);
      arguments.add(qty);
      arguments.add(false);
      arguments.add((product.getString(""String_Node_Str"").equals(""String_Node_Str"")) ? false : product.getString(""String_Node_Str""));
      arguments.add(customer.getInt(""String_Node_Str""));
      arguments.add(false);
      arguments.add(true);
      arguments.add((customer.getString(""String_Node_Str"").equals(""String_Node_Str"")) ? false : customer.getString(""String_Node_Str""));
      arguments.add(false);
      Object fiscal_position=(customer.getString(""String_Node_Str"").equals(""String_Node_Str"")) ? false : customer.getString(""String_Node_Str"");
      arguments.add(fiscal_position);
      arguments.add(false);
      int version=saleLine.getOdooVersion().getVersion_number();
      if (stockInstalled && version > 7) {
        arguments.add(false);
      }
      JSONObject context=new JSONObject();
      context.put(""String_Node_Str"",customer.getInt(""String_Node_Str""));
      context.put(""String_Node_Str"",qty);
      context.put(""String_Node_Str"",pricelist);
      String method=(stockInstalled && version > 7) ? ""String_Node_Str"" : ""String_Node_Str"";
      JSONObject response=((JSONObject)helper.callMethod(method,arguments,context));
      JSONObject res=response.getJSONObject(""String_Node_Str"");
      if (response.has(""String_Node_Str"") && !response.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
        JSONObject warning_data=response.getJSONObject(""String_Node_Str"");
        if (warning_data.has(""String_Node_Str""))         warning=warning_data.getString(""String_Node_Str"");
      }
      OValues values=new OValues();
      values.put(""String_Node_Str"",product.getInt(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      values.put(""String_Node_Str"",res.getDouble(""String_Node_Str""));
      values.put(""String_Node_Str"",false);
      values.put(""String_Node_Str"",res.getDouble(""String_Node_Str"") * res.getDouble(""String_Node_Str""));
      JSONArray tax_id=new JSONArray();
      tax_id.put(6);
      tax_id.put(false);
      tax_id.put(res.getJSONArray(""String_Node_Str""));
      values.put(""String_Node_Str"",new JSONArray().put(tax_id));
      values.put(""String_Node_Str"",(res.has(""String_Node_Str"")) ? res.get(""String_Node_Str"") : 0);
      values.put(""String_Node_Str"",(res.has(""String_Node_Str"")) ? res.get(""String_Node_Str"") : 0);
      if (stockInstalled) {
        values.put(""String_Node_Str"",(res.has(""String_Node_Str"")) ? res.get(""String_Node_Str"") : false);
        values.put(""String_Node_Str"",res.get(""String_Node_Str""));
      }
      if (extra != null)       values.put(""String_Node_Str"",extra.getInt(OColumn.ROW_ID));
      items.add(values.toDataRow());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return items;
}",0.9880668257756564
79978,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.base_about);
  OActionBarUtils.setActionBar(this,true);
  setTitle(""String_Node_Str"");
  findViewById(R.id.abtus_header).setOnClickListener(this);
  TextView versionName, aboutLine2, aboutLine3, aboutLine4;
  versionName=(TextView)findViewById(R.id.txvVersionName);
  handler=getWindow().getDecorView().getHandler();
  try {
    PackageManager packageManager=getPackageManager();
    String version=packageManager.getPackageInfo(getPackageName(),0).versionName;
    String versionCode=packageManager.getPackageInfo(getPackageName(),0).versionCode + ""String_Node_Str"";
    versionName.setText(getResources().getString(R.string.label_version) + ""String_Node_Str"" + version+ ""String_Node_Str""+ versionCode+ ""String_Node_Str"");
    aboutLine2=(TextView)findViewById(R.id.line2);
    if (aboutLine2 != null) {
      aboutLine2.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine3=(TextView)findViewById(R.id.line3);
    if (aboutLine3 != null) {
      aboutLine3.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine4=(TextView)findViewById(R.id.line4);
    if (aboutLine4 != null) {
      aboutLine4.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.base_about);
  OActionBarUtils.setActionBar(this,true);
  setTitle(""String_Node_Str"");
  findViewById(R.id.abtus_header).setOnClickListener(this);
  TextView versionName, aboutLine2, aboutLine3, aboutLine4;
  versionName=(TextView)findViewById(R.id.txvVersionName);
  handler=new Handler();
  try {
    PackageManager packageManager=getPackageManager();
    String version=packageManager.getPackageInfo(getPackageName(),0).versionName;
    String versionCode=packageManager.getPackageInfo(getPackageName(),0).versionCode + ""String_Node_Str"";
    versionName.setText(getResources().getString(R.string.label_version) + ""String_Node_Str"" + version+ ""String_Node_Str""+ versionCode+ ""String_Node_Str"");
    aboutLine2=(TextView)findViewById(R.id.line2);
    if (aboutLine2 != null) {
      aboutLine2.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine3=(TextView)findViewById(R.id.line3);
    if (aboutLine3 != null) {
      aboutLine3.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine4=(TextView)findViewById(R.id.line4);
    if (aboutLine4 != null) {
      aboutLine4.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.988295537673738
79979,"public void setLastSyncDateTimeToNow(OModel model){
  Log.i(TAG,""String_Node_Str"" + model.getModelName());
  OValues values=new OValues();
  values.put(""String_Node_Str"",model.getModelName());
  values.put(""String_Node_Str"",ODateUtils.getUTCDate());
  insertOrUpdate(""String_Node_Str"",new String[]{model.getModelName()},values);
}","public void setLastSyncDateTimeToNow(OModel model){
  Log.i(TAG,""String_Node_Str"" + model.getModelName());
  OValues values=new OValues();
  values.put(""String_Node_Str"",model.getModelName());
  Date last_sync=ODateUtils.createDateObject(ODateUtils.getUTCDate(),ODateUtils.DEFAULT_FORMAT,true);
  Calendar cal=Calendar.getInstance();
  cal.setTime(last_sync);
  cal.set(Calendar.SECOND,cal.get(Calendar.SECOND) + 2);
  last_sync=cal.getTime();
  values.put(""String_Node_Str"",ODateUtils.getDate(last_sync,ODateUtils.DEFAULT_FORMAT));
  insertOrUpdate(""String_Node_Str"",new String[]{model.getModelName()},values);
}",0.6829268292682927
79980,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.base_about);
  OActionBarUtils.setActionBar(this,true);
  setTitle(""String_Node_Str"");
  findViewById(R.id.abtus_header).setOnClickListener(this);
  TextView versionName, aboutLine2, aboutLine3, aboutLine4;
  versionName=(TextView)findViewById(R.id.txvVersionName);
  handler=getWindow().getDecorView().getHandler();
  try {
    PackageManager packageManager=getPackageManager();
    String version=packageManager.getPackageInfo(getPackageName(),0).versionName;
    String versionCode=packageManager.getPackageInfo(getPackageName(),0).versionCode + ""String_Node_Str"";
    versionName.setText(getResources().getString(R.string.label_version) + ""String_Node_Str"" + version+ ""String_Node_Str""+ versionCode+ ""String_Node_Str"");
    aboutLine2=(TextView)findViewById(R.id.line2);
    if (aboutLine2 != null) {
      aboutLine2.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine3=(TextView)findViewById(R.id.line3);
    if (aboutLine3 != null) {
      aboutLine3.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine4=(TextView)findViewById(R.id.line4);
    if (aboutLine4 != null) {
      aboutLine4.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.base_about);
  OActionBarUtils.setActionBar(this,true);
  setTitle(""String_Node_Str"");
  findViewById(R.id.abtus_header).setOnClickListener(this);
  TextView versionName, aboutLine2, aboutLine3, aboutLine4;
  versionName=(TextView)findViewById(R.id.txvVersionName);
  handler=new Handler();
  try {
    PackageManager packageManager=getPackageManager();
    String version=packageManager.getPackageInfo(getPackageName(),0).versionName;
    String versionCode=packageManager.getPackageInfo(getPackageName(),0).versionCode + ""String_Node_Str"";
    versionName.setText(getResources().getString(R.string.label_version) + ""String_Node_Str"" + version+ ""String_Node_Str""+ versionCode+ ""String_Node_Str"");
    aboutLine2=(TextView)findViewById(R.id.line2);
    if (aboutLine2 != null) {
      aboutLine2.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine3=(TextView)findViewById(R.id.line3);
    if (aboutLine3 != null) {
      aboutLine3.setMovementMethod(LinkMovementMethod.getInstance());
    }
    aboutLine4=(TextView)findViewById(R.id.line4);
    if (aboutLine4 != null) {
      aboutLine4.setMovementMethod(LinkMovementMethod.getInstance());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.988295537673738
79981,"public void exportDB(){
  FileChannel source=null;
  FileChannel destination=null;
  String currentDBPath=getDatabaseLocalPath();
  String backupDBPath=OStorageUtils.getDirectoryPath(""String_Node_Str"") + ""String_Node_Str"" + getDatabaseName();
  File currentDB=new File(currentDBPath);
  File backupDB=new File(backupDBPath);
  try {
    source=new FileInputStream(currentDB).getChannel();
    destination=new FileOutputStream(backupDB).getChannel();
    destination.transferFrom(source,0,source.size());
    source.close();
    destination.close();
    String subject=""String_Node_Str"" + getDatabaseName();
    Uri uri=Uri.fromFile(backupDB);
    Intent intent=new Intent(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_STREAM,uri);
    intent.putExtra(Intent.EXTRA_SUBJECT,subject);
    intent.setType(""String_Node_Str"");
    mContext.startActivity(intent);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void exportDB(){
  FileChannel source;
  FileChannel destination;
  String currentDBPath=getDatabaseLocalPath();
  String backupDBPath=OStorageUtils.getDirectoryPath(""String_Node_Str"") + ""String_Node_Str"" + getDatabaseName();
  File currentDB=new File(currentDBPath);
  File backupDB=new File(backupDBPath);
  try {
    source=new FileInputStream(currentDB).getChannel();
    destination=new FileOutputStream(backupDB).getChannel();
    destination.transferFrom(source,0,source.size());
    source.close();
    destination.close();
    String subject=""String_Node_Str"" + getDatabaseName();
    Uri uri=Uri.fromFile(backupDB);
    Intent intent=new Intent(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_STREAM,uri);
    intent.putExtra(Intent.EXTRA_SUBJECT,subject);
    intent.setType(""String_Node_Str"");
    mContext.startActivity(intent);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.99457111834962
79982,"public String getLastSyncDateTime(){
  IrModel model=new IrModel(mContext,mUser);
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{getModelName()});
  if (records.size() > 0) {
    return records.get(0).getString(""String_Node_Str"");
  }
  return null;
}","public String getLastSyncDateTime(){
  IrModel model=new IrModel(mContext,mUser);
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{getModelName()});
  if (records.size() > 0) {
    String date=records.get(0).getString(""String_Node_Str"");
    Date write_date=ODateUtils.createDateObject(date,ODateUtils.DEFAULT_FORMAT,true);
    Calendar cal=Calendar.getInstance();
    cal.setTime(write_date);
    cal.set(Calendar.SECOND,cal.get(Calendar.SECOND) + 2);
    write_date=cal.getTime();
    return ODateUtils.getDate(write_date,ODateUtils.DEFAULT_FORMAT);
  }
  return null;
}",0.528
79983,"private void syncData(OModel model,OUser user,ODomain domain_filter,SyncResult result,Boolean checkForDataLimit,Boolean createRelationRecords){
  Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
  try {
    ODomain domain=new ODomain();
    domain.append(model.defaultDomain());
    if (domain_filter != null) {
      domain.append(domain_filter);
    }
    if (checkForWriteCreateDate) {
      List<Integer> serverIds=model.getServerIds();
      if (model.checkForCreateDate() && checkForDataLimit) {
        if (serverIds.size() > 0) {
          if (model.checkForWriteDate() && !model.isEmptyTable()) {
            domain.add(""String_Node_Str"");
          }
          if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords&& model.getLastSyncDateTime() != null)           domain.add(""String_Node_Str"");
        }
        int data_limit=preferenceManager.getInt(""String_Node_Str"",60);
        domain.add(""String_Node_Str"",""String_Node_Str"",ODateUtils.getDateBefore(data_limit));
        if (serverIds.size() > 0) {
          domain.add(""String_Node_Str"",""String_Node_Str"",new JSONArray(serverIds.toString()));
        }
      }
      if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords) {
        String last_sync_date=model.getLastSyncDateTime();
        if (last_sync_date != null) {
          domain.add(""String_Node_Str"",""String_Node_Str"",last_sync_date);
        }
      }
    }
    JSONObject response=mOdoo.search_read(model.getModelName(),getFields(model),domain.get(),0,mSyncDataLimit,""String_Node_Str"",""String_Node_Str"");
    OSyncDataUtils dataUtils=new OSyncDataUtils(mContext,mOdoo,model,user,response,result,createRelationRecords);
    if (model.allowUpdateRecordOnServer()) {
      dataUtils.updateRecordsOnServer();
    }
    handleRelationRecords(user,dataUtils.getRelationRecordsHashMap(),result);
    if (model.allowCreateRecordOnServer()) {
      createRecordsOnServer(model);
    }
    if (model.allowDeleteRecordOnServer()) {
      removeRecordOnServer(model);
    }
    if (model.allowDeleteRecordInLocal()) {
      removeNonExistRecordFromLocal(model);
    }
    Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
    if (createRelationRecords) {
      IrModel irModel=new IrModel(mContext,user);
      irModel.setLastSyncDateTimeToNow(model);
    }
  }
 catch (  OdooSessionExpiredException odooSession) {
    app.setOdoo(null,user);
    if (user.isOAauthLogin()) {
    }
 else {
      showSignInErrorNotification(user);
    }
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  if (mSyncFinishListeners.containsKey(model.getModelName())) {
    OSyncAdapter adapter=mSyncFinishListeners.get(model.getModelName()).performNextSync(user,result);
    mSyncFinishListeners.remove(model.getModelName());
    if (adapter != null) {
      SyncResult syncResult=new SyncResult();
      OModel syncModel=model.createInstance(adapter.getModelClass());
      ContentProviderClient contentProviderClient=mContext.getContentResolver().acquireContentProviderClient(syncModel.authority());
      adapter.onPerformSync(user.getAccount(),null,syncModel.authority(),contentProviderClient,syncResult);
    }
  }
  model.close();
}","private void syncData(OModel model,OUser user,ODomain domain_filter,SyncResult result,Boolean checkForDataLimit,Boolean createRelationRecords){
  Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
  model.onSyncStarted();
  try {
    ODomain domain=new ODomain();
    domain.append(model.defaultDomain());
    if (domain_filter != null) {
      domain.append(domain_filter);
    }
    if (checkForWriteCreateDate) {
      List<Integer> serverIds=model.getServerIds();
      if (model.checkForCreateDate() && checkForDataLimit) {
        if (serverIds.size() > 0) {
          if (model.checkForWriteDate() && !model.isEmptyTable()) {
            domain.add(""String_Node_Str"");
          }
          if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords&& model.getLastSyncDateTime() != null)           domain.add(""String_Node_Str"");
        }
        int data_limit=preferenceManager.getInt(""String_Node_Str"",60);
        domain.add(""String_Node_Str"",""String_Node_Str"",ODateUtils.getDateBefore(data_limit));
        if (serverIds.size() > 0) {
          domain.add(""String_Node_Str"",""String_Node_Str"",new JSONArray(serverIds.toString()));
        }
      }
      if (model.checkForWriteDate() && !model.isEmptyTable() && createRelationRecords) {
        String last_sync_date=model.getLastSyncDateTime();
        if (last_sync_date != null) {
          domain.add(""String_Node_Str"",""String_Node_Str"",last_sync_date);
        }
      }
    }
    JSONObject response=mOdoo.search_read(model.getModelName(),getFields(model),domain.get(),0,mSyncDataLimit,""String_Node_Str"",""String_Node_Str"");
    OSyncDataUtils dataUtils=new OSyncDataUtils(mContext,mOdoo,model,user,response,result,createRelationRecords);
    if (model.allowUpdateRecordOnServer()) {
      dataUtils.updateRecordsOnServer(this);
    }
    handleRelationRecords(user,dataUtils.getRelationRecordsHashMap(),result);
    if (model.allowCreateRecordOnServer()) {
      createRecordsOnServer(model);
    }
    if (model.allowDeleteRecordOnServer()) {
      removeRecordOnServer(model);
    }
    if (model.allowDeleteRecordInLocal()) {
      removeNonExistRecordFromLocal(model);
    }
    Log.v(TAG,""String_Node_Str"" + model.getModelName() + ""String_Node_Str""+ ODateUtils.getDate());
    if (createRelationRecords) {
      IrModel irModel=new IrModel(mContext,user);
      irModel.setLastSyncDateTimeToNow(model);
    }
    model.onSyncFinished();
  }
 catch (  OdooSessionExpiredException odooSession) {
    app.setOdoo(null,user);
    if (user.isOAauthLogin()) {
    }
 else {
      showSignInErrorNotification(user);
    }
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  if (mSyncFinishListeners.containsKey(model.getModelName())) {
    OSyncAdapter adapter=mSyncFinishListeners.get(model.getModelName()).performNextSync(user,result);
    mSyncFinishListeners.remove(model.getModelName());
    if (adapter != null) {
      SyncResult syncResult=new SyncResult();
      OModel syncModel=model.createInstance(adapter.getModelClass());
      ContentProviderClient contentProviderClient=mContext.getContentResolver().acquireContentProviderClient(syncModel.authority());
      adapter.onPerformSync(user.getAccount(),null,syncModel.authority(),contentProviderClient,syncResult);
    }
  }
  model.close();
}",0.991404011461318
79984,"/** 
 * Creates locally created record on server (id with zero)
 * @param model model object
 */
private void createRecordsOnServer(OModel model){
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  int counter=0;
  for (  ODataRow record : records) {
    int id=createOnServer(model,JSONUtils.createJSONValues(model,record));
    if (id != OModel.INVALID_ROW_ID) {
      OValues values=new OValues();
      values.put(""String_Node_Str"",id);
      values.put(""String_Node_Str"",""String_Node_Str"");
      values.put(""String_Node_Str"",ODateUtils.getUTCDate());
      model.update(record.getInt(OColumn.ROW_ID),values);
      counter++;
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  if (counter == records.size()) {
    Log.i(TAG,counter + ""String_Node_Str"");
  }
}","/** 
 * Creates locally created record on server (id with zero)
 * @param model model object
 */
private void createRecordsOnServer(OModel model){
  List<ODataRow> records=model.select(null,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  int counter=0;
  for (  ODataRow record : records) {
    if (validateRelationRecords(model,record)) {
      if (model.selectServerId(record.getInt(OColumn.ROW_ID)) == 0) {
        int id=createOnServer(model,JSONUtils.createJSONValues(model,record));
        if (id != OModel.INVALID_ROW_ID) {
          OValues values=new OValues();
          values.put(""String_Node_Str"",id);
          values.put(""String_Node_Str"",""String_Node_Str"");
          values.put(""String_Node_Str"",ODateUtils.getUTCDate());
          model.update(record.getInt(OColumn.ROW_ID),values);
          counter++;
        }
 else {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
  }
  if (counter == records.size()) {
    Log.i(TAG,counter + ""String_Node_Str"");
  }
}",0.8992999461497039
79985,"private void showSignInErrorNotification(OUser user){
  ONotificationBuilder builder=new ONotificationBuilder(mContext,REQUEST_SIGN_IN_ERROR);
  builder.setTitle(""String_Node_Str"");
  builder.setBigText(""String_Node_Str"" + ""String_Node_Str"");
  builder.setIcon(R.drawable.ic_action_alert_warning);
  builder.setText(user.getAndroidName());
  builder.allowVibrate(true);
  builder.withRingTone(false);
  builder.setOngoing(true);
  builder.withLargeIcon(false);
  builder.setColor(R.color.android_orange_dark);
  Bundle extra=user.getAsBundle();
  ONotificationBuilder.NotificationAction actionReset=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_refresh,""String_Node_Str"",110,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  ONotificationBuilder.NotificationAction deleteAccount=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_navigation_close,""String_Node_Str"",111,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  builder.addAction(actionReset);
  builder.addAction(deleteAccount);
  builder.build().show();
}","private void showSignInErrorNotification(OUser user){
  ONotificationBuilder builder=new ONotificationBuilder(mContext,REQUEST_SIGN_IN_ERROR);
  builder.setTitle(""String_Node_Str"");
  builder.setBigText(""String_Node_Str"" + ""String_Node_Str"");
  builder.setIcon(R.drawable.ic_action_alert_warning);
  builder.setText(user.getAndroidName());
  builder.allowVibrate(true);
  builder.withRingTone(false);
  builder.setOngoing(true);
  builder.withLargeIcon(false);
  builder.setColor(OResource.color(mContext,R.color.android_orange_dark));
  Bundle extra=user.getAsBundle();
  ONotificationBuilder.NotificationAction actionReset=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_refresh,""String_Node_Str"",110,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  ONotificationBuilder.NotificationAction deleteAccount=new ONotificationBuilder.NotificationAction(R.drawable.ic_action_navigation_close,""String_Node_Str"",111,""String_Node_Str"",OdooAccountQuickManage.class,extra);
  builder.addAction(actionReset);
  builder.addAction(deleteAccount);
  builder.build().show();
}",0.9878957169459964
79986,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mSavedInstanceState=savedInstanceState;
  Log.i(TAG,""String_Node_Str"");
  OPreferenceManager preferenceManager=new OPreferenceManager(this);
  if (!preferenceManager.getBoolean(KEY_FRESH_LOGIN,false)) {
    preferenceManager.setBoolean(KEY_FRESH_LOGIN,true);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        startActivity(new Intent(OdooActivity.this,AppIntro.class));
      }
    }
,1000);
  }
  setContentView(R.layout.odoo_activity);
  OActionBarUtils.setActionBar(this,true);
  setupDrawer();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.i(TAG,""String_Node_Str"");
  mSavedInstanceState=savedInstanceState;
  OPreferenceManager preferenceManager=new OPreferenceManager(this);
  if (!preferenceManager.getBoolean(KEY_FRESH_LOGIN,false)) {
    preferenceManager.setBoolean(KEY_FRESH_LOGIN,true);
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        startActivity(new Intent(OdooActivity.this,AppIntro.class));
      }
    }
,1000);
  }
  setContentView(R.layout.odoo_activity);
  OActionBarUtils.setActionBar(this,true);
  setupDrawer();
}",0.934065934065934
79987,"private void settingUpdated(){
  OPreferenceManager mPref=new OPreferenceManager(this);
  int sync_interval=mPref.getInt(""String_Node_Str"",1440);
  List<String> default_authorities=new ArrayList<>();
  default_authorities.add(""String_Node_Str"");
  default_authorities.add(""String_Node_Str"");
  SyncAdapterType[] list=ContentResolver.getSyncAdapterTypes();
  Account mAccount=OUser.current(this).getAccount();
  for (  SyncAdapterType lst : list) {
    if (lst.authority.contains(""String_Node_Str"") && lst.authority.contains(""String_Node_Str"")) {
      default_authorities.add(lst.authority);
    }
  }
  for (  String authority : default_authorities) {
    boolean isSyncActive=ContentResolver.getSyncAutomatically(mAccount,authority);
    if (isSyncActive) {
      SyncUtils.get(this).setSyncPeriodic(authority,sync_interval,60,1);
    }
  }
  Toast.makeText(this,OResource.string(this,R.string.toast_setting_saved),Toast.LENGTH_LONG).show();
}","private void settingUpdated(){
  OUser user=OUser.current(this);
  if (user == null) {
    Intent loginActivity=new Intent(this,OdooLogin.class);
    loginActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    startActivity(loginActivity);
    finish();
  }
 else {
    Account mAccount=user.getAccount();
    OPreferenceManager mPref=new OPreferenceManager(this);
    int sync_interval=mPref.getInt(""String_Node_Str"",1440);
    List<String> default_authorities=new ArrayList<>();
    default_authorities.add(""String_Node_Str"");
    default_authorities.add(""String_Node_Str"");
    SyncAdapterType[] list=ContentResolver.getSyncAdapterTypes();
    for (    SyncAdapterType lst : list) {
      if (lst.authority.contains(""String_Node_Str"") && lst.authority.contains(""String_Node_Str"")) {
        default_authorities.add(lst.authority);
      }
    }
    for (    String authority : default_authorities) {
      boolean isSyncActive=ContentResolver.getSyncAutomatically(mAccount,authority);
      if (isSyncActive) {
        SyncUtils.get(this).setSyncPeriodic(authority,sync_interval,60,1);
      }
    }
    Toast.makeText(this,OResource.string(this,R.string.toast_setting_saved),Toast.LENGTH_LONG).show();
  }
}",0.7693010507080859
79988,"@Override protected void onPostExecute(OUser oUser){
  super.onPostExecute(oUser);
  if (oUser != null) {
    OdooAccountManager.updateUserData(OdooAccountQuickManage.this,user);
    finish();
    Intent intent=new Intent(OdooAccountQuickManage.this,OdooActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    getApplicationContext().startActivity(intent);
  }
 else {
    edtPassword.setText(""String_Node_Str"");
    edtPassword.setError(""String_Node_Str"");
  }
}","@Override protected void onPostExecute(OUser oUser){
  super.onPostExecute(oUser);
  progressDialog.dismiss();
  if (oUser != null) {
    OdooAccountManager.updateUserData(OdooAccountQuickManage.this,user);
    finish();
    Intent intent=new Intent(OdooAccountQuickManage.this,OdooActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    getApplicationContext().startActivity(intent);
  }
 else {
    edtPassword.setText(""String_Node_Str"");
    edtPassword.setError(""String_Node_Str"");
  }
}",0.9767054908485856
79989,"private void removeAccount(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.title_confirm);
  builder.setMessage(R.string.toast_are_you_sure_delete_account);
  builder.setPositiveButton(R.string.label_delete,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      OdooAccountManager.removeAccount(OdooAccountQuickManage.this,user.getAndroidName());
      IntentUtils.startActivity(OdooAccountQuickManage.this,OdooLogin.class,null);
      finish();
    }
  }
);
  builder.setNegativeButton(R.string.label_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
      finish();
    }
  }
);
  builder.show();
}","private void removeAccount(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.title_confirm);
  builder.setMessage(R.string.toast_are_you_sure_delete_account);
  builder.setPositiveButton(R.string.label_delete,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (OdooAccountManager.removeAccount(OdooAccountQuickManage.this,user.getAndroidName())) {
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            Intent loginActivity=new Intent(OdooAccountQuickManage.this,OdooLogin.class);
            loginActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            startActivity(loginActivity);
            finish();
          }
        }
,500);
      }
    }
  }
);
  builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      dialog.dismiss();
      finish();
    }
  }
);
  builder.setNegativeButton(R.string.label_cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
      finish();
    }
  }
);
  builder.show();
}",0.7384026781444285
79990,"@Override public void onPause(){
  super.onPause();
  if (mSyncObserverHandle != null) {
    ContentResolver.removeStatusChangeListener(mSyncObserverHandle);
    mSyncObserverHandle=null;
  }
  parent().unregisterReceiver(syncFinishReceiver);
}","@Override public void onPause(){
  super.onPause();
  if (mSyncObserverHandle != null) {
    ContentResolver.removeStatusChangeListener(mSyncObserverHandle);
    mSyncObserverHandle=null;
  }
  try {
    parent().unregisterReceiver(syncFinishReceiver);
  }
 catch (  Exception e) {
  }
}",0.9152542372881356
79991,"/** 
 * Actionbar Spinner handler
 */
public void setHasActionBarSpinner(Boolean hasActionBarSpinner){
  ActionBar actionBar=getSupportActionBar();
  if (hasActionBarSpinner) {
    findViewById(R.id.spinner_nav).setVisibility(View.VISIBLE);
    actionBar.setDisplayShowTitleEnabled(false);
  }
 else {
    findViewById(R.id.spinner_nav).setVisibility(View.GONE);
    actionBar.setDisplayShowTitleEnabled(true);
  }
  mHasActionBarSpinner=hasActionBarSpinner;
}","/** 
 * Actionbar Spinner handler
 */
public void setHasActionBarSpinner(Boolean hasActionBarSpinner){
  ActionBar actionBar=getSupportActionBar();
  Spinner spinner=(Spinner)findViewById(R.id.spinner_nav);
  if (hasActionBarSpinner) {
    if (spinner != null)     spinner.setVisibility(View.VISIBLE);
    actionBar.setDisplayShowTitleEnabled(false);
  }
 else {
    if (spinner != null)     spinner.setVisibility(View.GONE);
    actionBar.setDisplayShowTitleEnabled(true);
  }
  mHasActionBarSpinner=hasActionBarSpinner;
}",0.8138351983723296
79992,"public Spinner getActionBarSpinner(){
  if (mHasActionBarSpinner) {
    return (Spinner)findViewById(R.id.spinner_nav);
  }
  return null;
}","public Spinner getActionBarSpinner(){
  Spinner spinner=null;
  if (mHasActionBarSpinner) {
    spinner=(Spinner)findViewById(R.id.spinner_nav);
    spinner.setAdapter(null);
  }
  return spinner;
}",0.7751479289940828
79993,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  ODataRow row=(ODataRow)navSpinnerAdapter.getItem(position);
  mFilterType=FilterType.valueOf(row.getString(""String_Node_Str""));
  if (mFilterDate != null)   getLoaderManager().restartLoader(0,null,this);
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  ODataRow row=(ODataRow)navSpinnerAdapter.getItem(position);
  mFilterType=FilterType.valueOf(row.getString(""String_Node_Str""));
  if (mFilterDate != null && getActivity() != null)   getLoaderManager().restartLoader(0,null,this);
}",0.9598715890850722
79994,"@Override public OSyncAdapter performNextSync(OUser user,SyncResult syncResult){
  CalendarEvent event=new CalendarEvent(getApplicationContext(),null);
  List<ODataRow> rows=event.select();
  int count=0;
  for (  ODataRow row : rows) {
    if (row.getBoolean(""String_Node_Str"")) {
      String defaultTime=BaseSettings.getDayStartTime(getApplicationContext());
      row.put(""String_Node_Str"",row.getString(""String_Node_Str"") + ""String_Node_Str"" + defaultTime);
    }
    Date start_date=ODateUtils.createDateObject(row.getString(""String_Node_Str""),ODateUtils.DEFAULT_FORMAT,false);
    Date now=new Date();
    if (now.compareTo(start_date) < 0) {
      Bundle extra=row.getPrimaryBundleData();
      extra.putString(ReminderUtils.KEY_REMINDER_TYPE,""String_Node_Str"");
      if (ReminderUtils.get(getApplicationContext()).resetReminder(start_date,extra)) {
        OValues values=new OValues();
        values.put(""String_Node_Str"",""String_Node_Str"");
        values.put(""String_Node_Str"",""String_Node_Str"");
        event.update(row.getInt(OColumn.ROW_ID),values);
        count++;
      }
    }
  }
  Log.i(TAG,count + ""String_Node_Str"");
  SyncUtils.get(getApplicationContext(),user).requestSync(CRMPhoneCalls.AUTHORITY);
  Bundle syncData=new Bundle();
  syncData.putBoolean(CRM.KEY_IS_LEAD,false);
  SyncUtils.get(getApplicationContext(),user).requestSync(CRMLead.AUTHORITY,syncData);
  return null;
}","@Override public OSyncAdapter performNextSync(OUser user,SyncResult syncResult){
  CalendarEvent event=new CalendarEvent(getApplicationContext(),null);
  List<ODataRow> rows=event.select();
  int count=0;
  for (  ODataRow row : rows) {
    if (row.getBoolean(""String_Node_Str"")) {
      String defaultTime=BaseSettings.getDayStartTime(getApplicationContext());
      row.put(""String_Node_Str"",row.getString(""String_Node_Str"") + ""String_Node_Str"" + defaultTime);
    }
    Date start_date=ODateUtils.createDateObject(row.getString(""String_Node_Str""),ODateUtils.DEFAULT_FORMAT,false);
    Date now=new Date();
    if (now.compareTo(start_date) < 0) {
      Bundle extra=row.getPrimaryBundleData();
      extra.putString(ReminderUtils.KEY_REMINDER_TYPE,""String_Node_Str"");
      if (ReminderUtils.get(getApplicationContext()).resetReminder(start_date,extra)) {
        OValues values=new OValues();
        values.put(""String_Node_Str"",""String_Node_Str"");
        values.put(""String_Node_Str"",""String_Node_Str"");
        event.update(row.getInt(OColumn.ROW_ID),values);
        count++;
      }
    }
  }
  Log.i(TAG,count + ""String_Node_Str"");
  SyncUtils.get(getApplicationContext(),user).requestSync(CRMPhoneCalls.AUTHORITY);
  Bundle syncData=new Bundle();
  syncData.putBoolean(CRMLeads.KEY_IS_LEAD,false);
  SyncUtils.get(getApplicationContext(),user).requestSync(CRMLead.AUTHORITY,syncData);
  return null;
}",0.9982275788727402
79995,"private void init(){
  mForm=(OForm)findViewById(R.id.crmLeadForm);
  if (!extra.containsKey(OColumn.ROW_ID)) {
    if (extra.getString(""String_Node_Str"").equals(CRM.Type.Opportunities.toString())) {
      type=""String_Node_Str"";
      findViewById(R.id.opportunity_controls).setVisibility(View.VISIBLE);
    }
    mForm.initForm(null);
    actionBar.setTitle(R.string.label_tag_new);
    actionBar.setHomeAsUpIndicator(R.drawable.ic_action_navigation_close);
  }
 else {
    initFormValues();
  }
  mForm.setEditable(true);
  TextView currency_symbol=(TextView)findViewById(R.id.currency_symbol);
  ODataRow currency=ResCompany.getCurrency(this);
  if (currency != null) {
    currency_symbol.setText(currency.getString(""String_Node_Str""));
  }
}","private void init(){
  mForm=(OForm)findViewById(R.id.crmLeadForm);
  if (!extra.containsKey(OColumn.ROW_ID)) {
    if (extra.getString(""String_Node_Str"").equals(Customers.Type.Opportunities.toString())) {
      type=""String_Node_Str"";
      findViewById(R.id.opportunity_controls).setVisibility(View.VISIBLE);
    }
    mForm.initForm(null);
    actionBar.setTitle(R.string.label_tag_new);
    actionBar.setHomeAsUpIndicator(R.drawable.ic_action_navigation_close);
  }
 else {
    initFormValues();
  }
  mForm.setEditable(true);
  TextView currency_symbol=(TextView)findViewById(R.id.currency_symbol);
  ODataRow currency=ResCompany.getCurrency(this);
  if (currency != null) {
    currency_symbol.setText(currency.getString(""String_Node_Str""));
  }
}",0.9933333333333332
79996,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.calendar_event_detail_form);
  OActionBarUtils.setActionBar(this,true);
  calendarEvent=new CalendarEvent(this,null);
  actionBar=getSupportActionBar();
  actionBar.setHomeAsUpIndicator(R.drawable.ic_action_mark_undone);
  actionBar.setTitle(R.string.label_new_meeting);
  mView=findViewById(R.id.eventForm);
  event_date_end=(OField)findViewById(R.id.event_date_end);
  event_time_end=(OField)findViewById(R.id.event_end_time);
  event_date_start=(OField)findViewById(R.id.event_date_start);
  event_time_start=(OField)findViewById(R.id.event_start_time);
  allDay=(OField)findViewById(R.id.fieldAllDay);
  if (savedInstanceState != null) {
    mEventColor=savedInstanceState.getString(KEY_EXTRA_EVENT_COLOR);
    color_data=savedInstanceState.getParcelable(KEY_COLOR_DATA);
    colorSelected(color_data);
  }
 else {
    setThemeColor(mEventColor);
  }
  allDay.setOnValueChangeListener(this);
  ((OField)findViewById(R.id.event_date_start)).setOnValueChangeListener(this);
  ((OField)findViewById(R.id.event_start_time)).setOnValueChangeListener(this);
  findViewById(R.id.event_color).setOnClickListener(this);
  findViewById(R.id.reminderForEvent).setOnClickListener(this);
  Bundle extra=getIntent().getExtras();
  eventForm=(OForm)mView;
  if (extra != null) {
    row_id=getIntent().getIntExtra(OColumn.ROW_ID,-1);
    if (row_id != -1) {
      actionBar.setTitle(R.string.label_edit_meeting);
      ODataRow record=calendarEvent.browse(row_id);
      eventForm.initForm(record);
      allDay.setValue(record.getBoolean(""String_Node_Str""));
      String dateFormat=(record.getBoolean(""String_Node_Str"")) ? ODateUtils.DEFAULT_DATE_FORMAT : ODateUtils.DEFAULT_FORMAT;
      event_date_start.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_DATE_FORMAT));
      event_date_end.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_DATE_FORMAT));
      event_time_start.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_TIME_FORMAT));
      event_time_end.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_TIME_FORMAT));
      colorSelected(CalendarUtils.getColorData(record.getInt(""String_Node_Str"")));
    }
 else {
      ODataRow opp_data=null;
      OField opp_field=(OField)findViewById(R.id.opportunity_id);
      if (extra != null && extra.containsKey(""String_Node_Str"")) {
        opp_field.setVisibility(View.VISIBLE);
        opp_data=new ODataRow();
        opp_data.put(""String_Node_Str"",extra.getInt(""String_Node_Str""));
      }
      eventForm.initForm(opp_data);
      opp_field.setEditable(false);
    }
  }
 else {
    eventForm.initForm(null);
  }
  String action=getIntent().getAction();
  if (action != null && (action.equals(ReminderReceiver.ACTION_EVENT_REMINDER_DONE) || action.equals(ReminderReceiver.ACTION_EVENT_REMINDER_RE_SCHEDULE))) {
    ONotificationBuilder.cancelNotification(this,getIntent().getExtras().getInt(OColumn.ROW_ID));
    if (action.equals(ReminderReceiver.ACTION_EVENT_REMINDER_DONE)) {
      int row_id=getIntent().getExtras().getInt(OColumn.ROW_ID);
      OValues values=new OValues();
      values.put(""String_Node_Str"",1);
      calendarEvent.update(row_id,values);
      Toast.makeText(this,R.string.toast_event_marked_done,Toast.LENGTH_LONG).show();
      extra.remove(KEY_RESCHEDULE);
    }
  }
  if (extra != null && extra.containsKey(KEY_RESCHEDULE)) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        onClick(findViewById(R.id.reminderForEvent));
      }
    }
,500);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.calendar_event_detail_form);
  OActionBarUtils.setActionBar(this,true);
  calendarEvent=new CalendarEvent(this,null);
  actionBar=getSupportActionBar();
  actionBar.setHomeAsUpIndicator(R.drawable.ic_action_mark_undone);
  actionBar.setTitle(R.string.label_new_meeting);
  mView=findViewById(R.id.eventForm);
  event_date_end=(OField)findViewById(R.id.event_date_end);
  event_time_end=(OField)findViewById(R.id.event_end_time);
  event_date_start=(OField)findViewById(R.id.event_date_start);
  event_time_start=(OField)findViewById(R.id.event_start_time);
  allDay=(OField)findViewById(R.id.fieldAllDay);
  if (savedInstanceState != null) {
    mEventColor=savedInstanceState.getString(KEY_EXTRA_EVENT_COLOR);
    color_data=savedInstanceState.getParcelable(KEY_COLOR_DATA);
    colorSelected(color_data);
  }
 else {
    setThemeColor(mEventColor);
  }
  allDay.setOnValueChangeListener(this);
  ((OField)findViewById(R.id.event_date_start)).setOnValueChangeListener(this);
  ((OField)findViewById(R.id.event_start_time)).setOnValueChangeListener(this);
  findViewById(R.id.event_color).setOnClickListener(this);
  findViewById(R.id.reminderForEvent).setOnClickListener(this);
  Bundle extra=getIntent().getExtras();
  eventForm=(OForm)mView;
  if (extra != null) {
    row_id=getIntent().getIntExtra(OColumn.ROW_ID,-1);
    if (row_id != -1) {
      findViewById(R.id.meetingDeleteLayout).setVisibility(View.VISIBLE);
      findViewById(R.id.meetingDeleteLayout).setOnClickListener(this);
      actionBar.setTitle(R.string.label_edit_meeting);
      ODataRow record=calendarEvent.browse(row_id);
      eventForm.initForm(record);
      allDay.setValue(record.getBoolean(""String_Node_Str""));
      String dateFormat=(record.getBoolean(""String_Node_Str"")) ? ODateUtils.DEFAULT_DATE_FORMAT : ODateUtils.DEFAULT_FORMAT;
      event_date_start.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_DATE_FORMAT));
      event_date_end.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_DATE_FORMAT));
      event_time_start.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_TIME_FORMAT));
      event_time_end.setValue(ODateUtils.parseDate(record.getString(""String_Node_Str""),dateFormat,ODateUtils.DEFAULT_TIME_FORMAT));
      colorSelected(CalendarUtils.getColorData(record.getInt(""String_Node_Str"")));
    }
 else {
      ODataRow opp_data=new ODataRow();
      if (extra.containsKey(CalendarDashboard.KEY_DATE)) {
        event_date_start.setValue(extra.getString(CalendarDashboard.KEY_DATE));
        event_date_end.setValue(extra.getString(CalendarDashboard.KEY_DATE));
      }
      OField opp_field=(OField)findViewById(R.id.opportunity_id);
      if (extra.containsKey(""String_Node_Str"")) {
        opp_field.setVisibility(View.VISIBLE);
        opp_data.put(""String_Node_Str"",extra.getInt(""String_Node_Str""));
      }
      eventForm.initForm(opp_data);
      opp_field.setEditable(false);
    }
  }
 else {
    eventForm.initForm(null);
  }
  String action=getIntent().getAction();
  if (action != null && (action.equals(ReminderReceiver.ACTION_EVENT_REMINDER_DONE) || action.equals(ReminderReceiver.ACTION_EVENT_REMINDER_RE_SCHEDULE))) {
    ONotificationBuilder.cancelNotification(this,getIntent().getExtras().getInt(OColumn.ROW_ID));
    if (action.equals(ReminderReceiver.ACTION_EVENT_REMINDER_DONE)) {
      int row_id=getIntent().getExtras().getInt(OColumn.ROW_ID);
      OValues values=new OValues();
      values.put(""String_Node_Str"",1);
      calendarEvent.update(row_id,values);
      Toast.makeText(this,R.string.toast_event_marked_done,Toast.LENGTH_LONG).show();
      extra.remove(KEY_RESCHEDULE);
    }
  }
  if (extra != null && extra.containsKey(KEY_RESCHEDULE)) {
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        onClick(findViewById(R.id.reminderForEvent));
      }
    }
,500);
  }
}",0.94447261663286
79997,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.event_color:
    CalendarUtils.colorDialog(this,mEventColor,this).show();
  break;
case R.id.reminderForEvent:
ReminderDialog dialog=new ReminderDialog(this,(mAllDay) ? ReminderDialog.ReminderType.FullDayEvent : ReminderDialog.ReminderType.TimeBasedEvent);
dialog.setOnReminderValueSelectListener(this);
dialog.show();
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.event_color:
    CalendarUtils.colorDialog(this,mEventColor,this).show();
  break;
case R.id.reminderForEvent:
ReminderDialog dialog=new ReminderDialog(this,(mAllDay) ? ReminderDialog.ReminderType.FullDayEvent : ReminderDialog.ReminderType.TimeBasedEvent);
dialog.setOnReminderValueSelectListener(this);
dialog.show();
break;
case R.id.meetingDeleteLayout:
OAlert.showConfirm(this,""String_Node_Str"",new OAlert.OnAlertConfirmListener(){
@Override public void onConfirmChoiceSelect(OAlert.ConfirmType type){
switch (type) {
case POSITIVE:
calendarEvent.delete(row_id);
Toast.makeText(EventDetail.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
finish();
break;
case NEGATIVE:
}
}
}
);
break;
}
}",0.6855670103092784
79998,"@Override public void performDataSync(OSyncAdapter adapter,Bundle extras,OUser user){
  if (adapter.getModel().getModelName().equals(""String_Node_Str"")) {
    adapter.onSyncFinish(this);
  }
}","@Override public void performDataSync(OSyncAdapter adapter,Bundle extras,OUser user){
  if (adapter.getModel().getModelName().equals(""String_Node_Str"")) {
    adapter.onSyncFinish(this).syncDataLimit(50);
  }
}",0.9552238805970148
79999,"@Override public void performDataSync(OSyncAdapter adapter,Bundle extras,OUser user){
  if (adapter.getModel().getModelName().equals(""String_Node_Str""))   adapter.onSyncFinish(this);
}","@Override public void performDataSync(OSyncAdapter adapter,Bundle extras,OUser user){
  if (adapter.getModel().getModelName().equals(""String_Node_Str""))   adapter.onSyncFinish(this).syncDataLimit(50);
}",0.9533678756476685
80000,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  OValues values=fileManager.handleResult(requestCode,resultCode,data);
  if (values != null && !values.contains(""String_Node_Str"")) {
    newImage=values.getString(""String_Node_Str"");
    userImage.setScaleType(ImageView.ScaleType.CENTER_CROP);
    userImage.setColorFilter(null);
    userImage.setImageBitmap(BitmapUtils.getBitmapImage(this,newImage));
  }
 else {
    Toast.makeText(this,R.string.toast_image_size_too_large,Toast.LENGTH_LONG).show();
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  OValues values=fileManager.handleResult(requestCode,resultCode,data);
  if (values != null && !values.contains(""String_Node_Str"")) {
    newImage=values.getString(""String_Node_Str"");
    userImage.setScaleType(ImageView.ScaleType.CENTER_CROP);
    userImage.setColorFilter(null);
    userImage.setImageBitmap(BitmapUtils.getBitmapImage(this,newImage));
  }
 else   if (values != null) {
    Toast.makeText(this,R.string.toast_image_size_too_large,Toast.LENGTH_LONG).show();
  }
}",0.9820261437908496
