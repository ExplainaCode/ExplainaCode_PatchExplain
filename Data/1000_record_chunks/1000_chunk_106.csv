record_number,buggy_code,fixed_code,code_similarity
105001,"/** 
 * Handles a change in the selected endpoint.
 * @param oldEndpoints Set of the old selected endpoints.
 * @param newEndpoints Set of the new selected endpoints.
 */
private void selectedEndpointChanged(Set<Endpoint> oldEndpoints,Set<Endpoint> newEndpoints){
  if (logger.isDebugEnabled()) {
    if (newEndpoints.isEmpty())     logger.debug(""String_Node_Str"");
 else {
      StringBuilder newEndpointsIDList=new StringBuilder();
      for (      Endpoint e : newEndpoints) {
        newEndpointsIDList.append(e.getID());
        newEndpointsIDList.append(""String_Node_Str"");
      }
      logger.debug(""String_Node_Str"" + newEndpointsIDList.toString());
    }
  }
  SimulcastReceiver simulcastReceiver=getSimulcastReceiver();
  if (simulcastReceiver == null) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  SimulcastStream[] simStreams=simulcastReceiver.getSimulcastStreams();
  if (simStreams == null || simStreams.length == 0) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  Endpoint sendEndpoint=getSendEndpoint();
  int lqOrder=SimulcastStream.SIMULCAST_LAYER_ORDER_BASE;
  int hqOrder=simStreams.length - 1;
  int oldTargetOrder=targetOrder;
  boolean thisWasInTheSelectedEndpoints=oldEndpoints.contains(sendEndpoint);
  boolean thisWillbeInTheSelectedEndpoints=newEndpoints.contains(sendEndpoint);
  if (thisWillbeInTheSelectedEndpoints) {
    int overrideOrder=getSimulcastSenderManager().getOverrideOrder();
    if (overrideOrder == SimulcastSenderManager.SIMULCAST_LAYER_ORDER_NO_OVERRIDE) {
      targetOrder=hqOrder;
    }
 else {
      targetOrder=Math.min(hqOrder,overrideOrder);
    }
  }
 else   if (thisWasInTheSelectedEndpoints) {
    targetOrder=lqOrder;
  }
  if (oldTargetOrder != targetOrder)   react(false);
}","/** 
 * Handles a change in the selected endpoint.
 * @param oldEndpoints Set of the old selected endpoints.
 * @param newEndpoints Set of the new selected endpoints.
 */
private void selectedEndpointChanged(Set<Endpoint> oldEndpoints,Set<Endpoint> newEndpoints){
  if (logger.isDebugEnabled()) {
    if (newEndpoints.isEmpty())     logger.debug(""String_Node_Str"");
 else {
      StringBuilder newEndpointsIDList=new StringBuilder();
      for (      Endpoint e : newEndpoints) {
        newEndpointsIDList.append(e.getID());
        newEndpointsIDList.append(""String_Node_Str"");
      }
      logger.debug(""String_Node_Str"" + newEndpointsIDList.toString());
    }
  }
  SimulcastReceiver simulcastReceiver=getSimulcastReceiver();
  if (simulcastReceiver == null) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  SimulcastStream[] simStreams=simulcastReceiver.getSimulcastStreams();
  if (simStreams == null || simStreams.length == 0) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  Endpoint sendEndpoint=getSendEndpoint();
  int lqOrder=SimulcastStream.SIMULCAST_LAYER_ORDER_BASE;
  int hqOrder=simStreams.length - 1;
  int oldTargetOrder=targetOrder;
  boolean thisWasInTheSelectedEndpoints=oldEndpoints.contains(sendEndpoint);
  boolean thisWillbeInTheSelectedEndpoints=newEndpoints.contains(sendEndpoint);
  if (thisWillbeInTheSelectedEndpoints) {
    int overrideOrder=getSimulcastSenderManager().getOverrideOrder();
    if (overrideOrder == SimulcastSenderManager.SIMULCAST_LAYER_ORDER_NO_OVERRIDE) {
      targetOrder=hqOrder;
    }
 else {
      targetOrder=Math.min(hqOrder,overrideOrder);
    }
  }
 else   if (thisWasInTheSelectedEndpoints) {
    targetOrder=lqOrder;
  }
  if (oldTargetOrder != targetOrder) {
    SendMode sm=this.sendMode;
    if (sm != null) {
      this.sendMode.receive(targetOrder);
    }
  }
}",0.9670748299319728
105002,"@Override public void simulcastStreamsChanged(SimulcastStream... simulcastStreams){
  if (simulcastStreams == null || simulcastStreams.length == 0) {
    return;
  }
  SendMode sm=sendMode;
  if (sm == null) {
    return;
  }
  boolean isUrgent=false;
  for (  SimulcastStream l : simulcastStreams) {
    isUrgent=l == sm.getCurrent() && !l.isStreaming();
    if (isUrgent) {
      break;
    }
  }
  react(isUrgent);
}","@Override public void simulcastStreamsChanged(SimulcastStream... simulcastStreams){
  if (simulcastStreams == null || simulcastStreams.length == 0) {
    return;
  }
  SendMode sm=sendMode;
  if (sm == null) {
    return;
  }
  sm.receive(targetOrder);
}",0.6894502228826151
105003,"public String toJson(RewritingSendMode rewritingSendMode){
  if (rewritingSendMode == null) {
    return ""String_Node_Str"";
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  SimulcastStream current=rewritingSendMode.getCurrent();
  if (current != null) {
    sb.append(""String_Node_Str"");
    toJson(sb,current);
    sb.append(""String_Node_Str"");
  }
  SimulcastStream next=rewritingSendMode.getNext();
  if (next != null) {
    sb.append(""String_Node_Str"");
    toJson(sb,next);
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public void toJson(StringBuilder b,SimulcastStream simulcastStream){
  if (b == null || simulcastStream == null) {
    return;
  }
  b.append(""String_Node_Str"");
  b.append(Long.toString(simulcastStream.getPrimarySSRC()));
  b.append(""String_Node_Str"");
  b.append(Long.toString(simulcastStream.getRTXSSRC()));
  b.append(""String_Node_Str"");
  b.append(Boolean.toString(simulcastStream.isStreaming()));
  b.append(""String_Node_Str"");
}",0.1274900398406374
105004,"@Override public void receive(SimulcastStream simStream,boolean urgent){
  if (simStream == null) {
    weakCurrent=null;
    weakNext=null;
    return;
  }
  SimulcastStream current=getCurrent();
  SimulcastStream next=getNext();
  if (current == simStream || next == simStream) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + simStream.getOrder() + ""String_Node_Str"");
    }
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + simStream.getOrder() + ""String_Node_Str""+ urgent+ ""String_Node_Str""+ getSimulcastSender().getSimulcastReceiver().getSimulcastEngine().getVideoChannel().getEndpoint().getID()+ ""String_Node_Str"");
  }
  simStream.askForKeyframe();
  if (urgent || current == null) {
    weakCurrent=new WeakReference<>(simStream);
  }
 else {
    weakNext=new WeakReference<>(simStream);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void receive(SimulcastStream simStream){
  if (simStream == null) {
    this.state=new State(null,null);
    return;
  }
  State oldState=this.state;
  SimulcastStream current=oldState.weakCurrent != null ? oldState.weakCurrent.get() : null;
  SimulcastStream next=oldState.weakNext != null ? oldState.weakNext.get() : null;
  if (current == simStream || next == simStream) {
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + simStream.getOrder() + ""String_Node_Str"");
    }
    return;
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + simStream.getOrder() + ""String_Node_Str""+ getSimulcastSender().getSimulcastReceiver().getSimulcastEngine().getVideoChannel().getEndpoint().getID()+ ""String_Node_Str"");
  }
  simStream.askForKeyframe();
  if (current == null) {
    this.state=new State(new WeakReference<>(simStream),oldState.weakNext);
  }
 else {
    this.state=new State(oldState.weakCurrent,new WeakReference<>(simStream));
  }
}",0.5528541226215645
105005,"/** 
 * {@inheritDoc}
 */
@Override public boolean accept(RawPacket pkt){
  if (pkt == null) {
    return false;
  }
  SimulcastStream next=getNext();
  if (next != null && next.matches(pkt) && next.isKeyFrame(pkt)) {
    weakCurrent=new WeakReference<>(next);
    weakNext=null;
    return true;
  }
  SimulcastStream current=getCurrent();
  return current != null && current.matches(pkt);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean accept(RawPacket pkt){
  if (pkt == null) {
    return false;
  }
  State oldState=this.state;
  SimulcastStream next=oldState.weakNext != null ? oldState.weakNext.get() : null;
  if (next != null && next.matches(pkt) && next.isKeyFrame(pkt)) {
    this.state=new State(new WeakReference<>(next),null);
    return true;
  }
  SimulcastStream current=oldState.weakCurrent != null ? oldState.weakCurrent.get() : null;
  return current != null && current.matches(pkt);
}",0.7164835164835165
105006,"/** 
 * Configures this mode to receive the low quality stream.
 * @param urgent if urgent is true, switch immediately and don't wait for akeyframe of the low quality stream.
 */
public abstract void receive(SimulcastStream simStream,boolean urgent);","/** 
 * Configures this mode to receive the low quality stream.
 */
public abstract void receive(SimulcastStream simStream);",0.6631016042780749
105007,"/** 
 * {@inheritDoc}
 */
@Override public void receive(SimulcastStream simStream,boolean urgent){
  SwitchingModeOptions options=new SwitchingModeOptions();
  options.setNextOrder(simStream.getOrder());
  options.setHardSwitch(true);
  options.setUrgent(urgent);
  configure(options);
synchronized (sendStreamsSyncRoot) {
    SimulcastStream next=getNext();
    if (next != null && !next.isStreaming()) {
      this.weakNext=null;
      this.seenNext=0;
      nextSimulcastStreamStopped(next);
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void receive(SimulcastStream simStream){
  SwitchingModeOptions options=new SwitchingModeOptions();
  options.setNextOrder(simStream.getOrder());
  options.setHardSwitch(true);
  configure(options);
synchronized (sendStreamsSyncRoot) {
    SimulcastStream next=getNext();
    if (next != null && !next.isStreaming()) {
      this.weakNext=null;
      this.seenNext=0;
      nextSimulcastStreamStopped(next);
    }
  }
}",0.9545454545454546
105008,"/** 
 * Starts   {@link #stream} if it has not been started yet and if the state ofthis <tt>Channel</tt> meets the prerequisites to invoke {@link MediaStream#start()}. For example, <tt>MediaStream</tt> may be started only after a <tt>StreamConnector</tt> has been set on it and this <tt>Channel</tt> may be able to provide a <tt>StreamConnector</tt> only after the transport manager has completed the connectivity establishment.
 * @throws IOException if anything goes wrong while starting <tt>stream</tt>
 */
@Override protected void maybeStartStream() throws IOException {
synchronized (streamSyncRoot) {
    if (stream == null)     return;
  }
  StreamConnector connector=getStreamConnector();
  if (connector == null)   return;
 else   stream.setConnector(connector);
  MediaStreamTarget streamTarget=createStreamTarget();
  if (streamTarget != null) {
    InetSocketAddress dataAddr=streamTarget.getDataAddress();
    if (dataAddr != null) {
      this.streamTarget.setDataHostAddress(dataAddr.getAddress());
      this.streamTarget.setDataPort(dataAddr.getPort());
    }
    InetSocketAddress ctrlAddr=streamTarget.getControlAddress();
    if (ctrlAddr != null) {
      this.streamTarget.setControlHostAddress(ctrlAddr.getAddress());
      this.streamTarget.setControlPort(ctrlAddr.getPort());
    }
    if (dataAddr != null)     stream.setTarget(streamTarget);
  }
  Content content=getContent();
  if (!stream.isStarted()) {
    if (RTPLevelRelayType.MIXER.equals(getRTPLevelRelayType()))     stream.setSSRCFactory(new SSRCFactoryImpl(initialLocalSSRC));
synchronized (streamSyncRoot) {
      stream.start();
    }
    Videobridge videobridge=getContent().getConference().getVideobridge();
    EventAdmin eventAdmin=videobridge.getEventAdmin();
    if (eventAdmin != null && streamTarget != null) {
      eventAdmin.sendEvent(EventFactory.streamStarted(this));
    }
  }
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + getID() + ""String_Node_Str""+ content.getName()+ ""String_Node_Str""+ content.getConference().getID()+ ""String_Node_Str""+ stream.getDirection()+ ""String_Node_Str"");
  }
  touch();
}","/** 
 * Starts   {@link #stream} if it has not been started yet and if the state ofthis <tt>Channel</tt> meets the prerequisites to invoke {@link MediaStream#start()}. For example, <tt>MediaStream</tt> may be started only after a <tt>StreamConnector</tt> has been set on it and this <tt>Channel</tt> may be able to provide a <tt>StreamConnector</tt> only after the transport manager has completed the connectivity establishment.
 * @throws IOException if anything goes wrong while starting <tt>stream</tt>
 */
@Override protected void maybeStartStream() throws IOException {
synchronized (streamSyncRoot) {
    if (stream == null)     return;
  }
  MediaStreamTarget streamTarget=createStreamTarget();
  StreamConnector connector=getStreamConnector();
  if (streamTarget == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  if (connector == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  InetSocketAddress dataAddr=streamTarget.getDataAddress();
  if (dataAddr == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  this.streamTarget.setDataHostAddress(dataAddr.getAddress());
  this.streamTarget.setDataPort(dataAddr.getPort());
  InetSocketAddress ctrlAddr=streamTarget.getControlAddress();
  if (ctrlAddr != null) {
    this.streamTarget.setControlHostAddress(ctrlAddr.getAddress());
    this.streamTarget.setControlPort(ctrlAddr.getPort());
  }
  stream.setTarget(streamTarget);
  stream.setConnector(connector);
  Content content=getContent();
  if (!stream.isStarted()) {
    if (RTPLevelRelayType.MIXER.equals(getRTPLevelRelayType()))     stream.setSSRCFactory(new SSRCFactoryImpl(initialLocalSSRC));
synchronized (streamSyncRoot) {
      stream.start();
    }
    Videobridge videobridge=getContent().getConference().getVideobridge();
    EventAdmin eventAdmin=videobridge.getEventAdmin();
    if (eventAdmin != null) {
      eventAdmin.sendEvent(EventFactory.streamStarted(this));
    }
  }
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + getID() + ""String_Node_Str""+ content.getName()+ ""String_Node_Str""+ content.getConference().getID()+ ""String_Node_Str""+ stream.getDirection()+ ""String_Node_Str"");
  }
  touch();
}",0.713821892393321
105009,"/** 
 * Initializes the constants used by this class from the configuration.
 */
private static void initializeConfiguration(ConfigurationService cfg){
  if (configurationInitialized)   return;
synchronized (AdaptiveSimulcastBitrateController.class) {
    if (cfg != null) {
      PROCESS_INTERVAL_MS=cfg.getInt(PROCESS_INTERVAL_MS_PNAME,PROCESS_INTERVAL_MS);
      CLIMB_INTERVAL_MS=cfg.getInt(CLIMB_INTERVAL_MS_PNAME,CLIMB_INTERVAL_MS);
      CLIMB_MIN_RATIO=cfg.getDouble(CLIMB_MIN_RATIO_PNAME,CLIMB_MIN_RATIO);
      OVERSENDING_COEF=cfg.getDouble(OVERSENDING_COEF_PNAME,OVERSENDING_COEF);
      OVERSENDING_INTERVAL_MS=cfg.getInt(OVERSENDING_INTERVAL_MS_PNAME,OVERSENDING_INTERVAL_MS);
      INITIAL_PERIOD_MS=cfg.getInt(INITIAL_PERIOD_MS_PNAME,INITIAL_PERIOD_MS);
      ENABLE_TRIGGER=cfg.getBoolean(ENABLE_TRIGGER_PNAME,ENABLE_TRIGGER);
    }
    recurringProcessibleExecutor=new RecurringProcessibleExecutor();
    configurationInitialized=true;
  }
}","/** 
 * Initializes the constants used by this class from the configuration.
 */
private static void initializeConfiguration(ConfigurationService cfg){
synchronized (AdaptiveSimulcastBitrateController.class) {
    if (configurationInitialized)     return;
    configurationInitialized=true;
    if (cfg != null) {
      PROCESS_INTERVAL_MS=cfg.getInt(PROCESS_INTERVAL_MS_PNAME,PROCESS_INTERVAL_MS);
      CLIMB_INTERVAL_MS=cfg.getInt(CLIMB_INTERVAL_MS_PNAME,CLIMB_INTERVAL_MS);
      CLIMB_MIN_RATIO=cfg.getDouble(CLIMB_MIN_RATIO_PNAME,CLIMB_MIN_RATIO);
      OVERSENDING_COEF=cfg.getDouble(OVERSENDING_COEF_PNAME,OVERSENDING_COEF);
      OVERSENDING_INTERVAL_MS=cfg.getInt(OVERSENDING_INTERVAL_MS_PNAME,OVERSENDING_INTERVAL_MS);
      INITIAL_PERIOD_MS=cfg.getInt(INITIAL_PERIOD_MS_PNAME,INITIAL_PERIOD_MS);
      ENABLE_TRIGGER=cfg.getBoolean(ENABLE_TRIGGER_PNAME,ENABLE_TRIGGER);
    }
    recurringProcessibleExecutor=new RecurringProcessibleExecutor();
  }
}",0.8782518210197711
105010,"/** 
 * Notifies this   {@code Endpoint} that a {@code PinnedEndpointChangedEvent}has been received by the associated   {@code SctpConnection}.
 * @param src the {@code WebRtcDataStream} by which {@code jsonObject} hasbeen received
 * @param jsonObject the JSON object with {@link Videobridge#COLIBRI_CLASS}{@code PinnedEndpointChangedEvent} which has been received by theassociated  {@code SctpConnection}
 */
private void onPinnedEndpointChangedEvent(WebRtcDataStream src,JSONObject jsonObject){
  String newPinnedEndpointID=(String)jsonObject.get(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    StringCompiler sc=new StringCompiler();
    sc.bind(""String_Node_Str"",newPinnedEndpointID);
    sc.bind(""String_Node_Str"",this);
    logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str""));
  }
  List<String> newPinnedIDList=Collections.EMPTY_LIST;
  if (newPinnedEndpointID == null || ""String_Node_Str"".equals(newPinnedEndpointID)) {
    newPinnedIDList=Collections.singletonList(newPinnedEndpointID);
  }
  pinnedEndpointsChanged(newPinnedIDList);
}","/** 
 * Notifies this   {@code Endpoint} that a {@code PinnedEndpointChangedEvent}has been received by the associated   {@code SctpConnection}.
 * @param src the {@code WebRtcDataStream} by which {@code jsonObject} hasbeen received
 * @param jsonObject the JSON object with {@link Videobridge#COLIBRI_CLASS}{@code PinnedEndpointChangedEvent} which has been received by theassociated  {@code SctpConnection}
 */
private void onPinnedEndpointChangedEvent(WebRtcDataStream src,JSONObject jsonObject){
  String newPinnedEndpointID=(String)jsonObject.get(""String_Node_Str"");
  if (logger.isDebugEnabled()) {
    StringCompiler sc=new StringCompiler();
    sc.bind(""String_Node_Str"",newPinnedEndpointID);
    sc.bind(""String_Node_Str"",this);
    logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str""));
  }
  List<String> newPinnedIDList=Collections.EMPTY_LIST;
  if (newPinnedEndpointID != null && !""String_Node_Str"".equals(newPinnedEndpointID)) {
    newPinnedIDList=Collections.singletonList(newPinnedEndpointID);
  }
  pinnedEndpointsChanged(newPinnedIDList);
}",0.9957567185289956
105011,"/** 
 * Adds a received value to this list.
 * @param time the time of reception.
 * @param rate the value.
 */
private void add(long time,long rate){
  sum+=rate;
  receivedRembs.put(time,rate);
  clean(time);
}","/** 
 * Adds a received value to this list.
 * @param time the time of reception.
 * @param rate the value.
 */
private void add(long time,long rate){
  sum+=rate;
  receivedRembs.put(time,rate);
  last=rate;
  clean(time);
}",0.9702517162471396
105012,"int calcNumEndpointsThatFitIn(){
  final long now=System.currentTimeMillis();
  final long availableBandwidth=(long)(receivedRembs.getAverage(now) * REMB_MULT_CONSTANT);
  long remainingBandwidth=availableBandwidth;
  int numEndpointsThatFitIn=0;
  final Iterator<Endpoint> it=null;
  final Endpoint thisEndpoint=channel.getEndpoint();
  while (it.hasNext()) {
    Endpoint endpoint=it.next();
    if (endpoint != null && !endpoint.equals(thisEndpoint)) {
      long endpointBitrate=getEndpointBitrate(endpoint);
      if (remainingBandwidth >= endpointBitrate) {
        numEndpointsThatFitIn+=1;
        remainingBandwidth-=endpointBitrate;
      }
 else {
        break;
      }
    }
  }
  return numEndpointsThatFitIn;
}","int calcNumEndpointsThatFitIn(){
  final long availableBandwidth=receivedRembs.getLast();
  long remainingBandwidth=availableBandwidth;
  int numEndpointsThatFitIn=0;
  Conference conference=channel.getContent().getConference();
  for (  String endpointId : lastNController.getForwardedEndpoints()) {
    Endpoint endpoint=conference.getEndpoint(endpointId);
    if (endpoint != null) {
      long endpointBitrate=getEndpointBitrate(endpoint);
      if (remainingBandwidth >= endpointBitrate) {
        numEndpointsThatFitIn+=1;
        remainingBandwidth-=endpointBitrate;
      }
 else {
        break;
      }
    }
  }
  return numEndpointsThatFitIn;
}",0.0897900072411296
105013,"/** 
 * Initializes a new <tt>BitrateController</tt> instance.
 * @param channel the <tt>VideoChannel</tt> for which the new instance is toserve.
 */
public BitrateController(LastNController lastNController,VideoChannel channel){
  this.channel=channel;
  this.lastNController=lastNController;
  initializeConfiguration();
  BandwidthEstimator be=((VideoMediaStream)channel.getStream()).getOrCreateBandwidthEstimator();
  be.addListener(this);
}","/** 
 * Initializes a new <tt>BitrateController</tt> instance.
 * @param channel the <tt>VideoChannel</tt> for which the new instance is toserve.
 */
public BitrateController(LastNController lastNController,VideoChannel channel){
  this.channel=channel;
  this.lastNController=lastNController;
  initializeConfiguration(ServiceUtils.getService(channel.getBundleContext(),ConfigurationService.class));
  BandwidthEstimator be=((VideoMediaStream)channel.getStream()).getOrCreateBandwidthEstimator();
  be.addListener(this);
}",0.9194214876033058
105014,"/** 
 * Notifies this instance that an RTCP REMB packet with a bitrate value of <tt>remb</tt> was received on its associated <tt>VideoChannel</tt>.
 * @param remb the bitrate of the REMB packet received.
 */
@Override public void bandwidthEstimationChanged(long remb){
  logger.warn(""String_Node_Str"" + remb);
  BitrateAdaptor bitrateAdaptor=getOrCreateBitrateAdaptor();
  if (bitrateAdaptor == null) {
    return;
  }
  logger.warn(hashCode() + ""String_Node_Str"" + remb);
  long now=System.currentTimeMillis();
  int receivingEndpointCount=0;
  if (firstRemb == -1)   firstRemb=now;
  receivedRembs.add(now,remb);
  if (now - firstRemb <= INITIAL_INTERVAL_MS)   return;
  if (!bitrateAdaptor.touch())   return;
  int numEndpointsThatFitIn=calcNumEndpointsThatFitIn();
  if (numEndpointsThatFitIn < receivingEndpointCount) {
    lastNonIncrease=now;
    if (now - lastNonDecrease >= DECREASE_LAG_MS) {
      lastNonDecrease=now;
      bitrateAdaptor.decrease();
    }
  }
 else   if (numEndpointsThatFitIn == receivingEndpointCount) {
    lastNonDecrease=now;
  }
 else   if (numEndpointsThatFitIn > receivingEndpointCount) {
    lastNonDecrease=now;
    if (now - lastNonIncrease >= INCREASE_LAG_MS) {
      lastNonIncrease=now;
      bitrateAdaptor.increase();
    }
  }
}","/** 
 * Notifies this instance that an RTCP REMB packet with a bitrate value of <tt>remb</tt> was received on its associated <tt>VideoChannel</tt>.
 * @param remb the bitrate of the REMB packet received.
 */
@Override public void bandwidthEstimationChanged(long remb){
  BitrateAdaptor bitrateAdaptor=getOrCreateBitrateAdaptor();
  if (bitrateAdaptor == null) {
    return;
  }
  long now=System.currentTimeMillis();
  int receivingEndpointCount=lastNController.getForwardedEndpoints().size();
  if (firstRemb == -1)   firstRemb=now;
  receivedRembs.add(now,remb);
  if (now - firstRemb <= INITIAL_INTERVAL_MS)   return;
  if (!bitrateAdaptor.touch())   return;
  int numEndpointsThatFitIn=calcNumEndpointsThatFitIn();
  if (numEndpointsThatFitIn < receivingEndpointCount) {
    lastNonIncrease=now;
    if (now - lastNonDecrease >= DECREASE_LAG_MS) {
      lastNonDecrease=now;
      bitrateAdaptor.decrease();
    }
  }
 else   if (numEndpointsThatFitIn == receivingEndpointCount) {
    lastNonDecrease=now;
  }
 else   if (numEndpointsThatFitIn > receivingEndpointCount) {
    lastNonDecrease=now;
    if (now - lastNonIncrease >= INCREASE_LAG_MS) {
      lastNonIncrease=now;
      bitrateAdaptor.increase();
    }
  }
}",0.9031224979983988
105015,"/** 
 * Initializes the constants used by this class from the configuration.
 */
private void initializeConfiguration(){
synchronized (BitrateController.class) {
    if (configurationInitialized)     return;
    configurationInitialized=true;
    ConfigurationService cfg=ServiceUtils.getService(channel.getBundleContext(),ConfigurationService.class);
    if (cfg != null) {
      INCREASE_LAG_MS=cfg.getInt(INCREASE_LAG_MS_PNAME,INCREASE_LAG_MS);
      INCREASE_LAG_MS=cfg.getInt(DECREASE_LAG_MS_PNAME,DECREASE_LAG_MS);
      INITIAL_INTERVAL_MS=cfg.getInt(INITIAL_INTERVAL_MS_PNAME,INITIAL_INTERVAL_MS);
      String rembMultConstantStr=cfg.getString(REMB_MULT_CONSTANT_PNAME,null);
      if (rembMultConstantStr != null) {
        try {
          REMB_MULT_CONSTANT=Double.parseDouble(rembMultConstantStr);
        }
 catch (        Exception e) {
        }
      }
      REMB_AVERAGE_INTERVAL_MS=cfg.getInt(REMB_AVERAGE_INTERVAL_MS_PNAME,REMB_AVERAGE_INTERVAL_MS);
      MIN_ASSUMED_ENDPOINT_BITRATE_BPS=cfg.getInt(MIN_ASSUMED_ENDPOINT_BITRATE_BPS_PNAME,MIN_ASSUMED_ENDPOINT_BITRATE_BPS);
    }
  }
}","/** 
 * Initializes the constants used by this class from the configuration.
 */
private static void initializeConfiguration(ConfigurationService cfg){
synchronized (BitrateController.class) {
    if (configurationInitialized)     return;
    configurationInitialized=true;
    if (cfg != null) {
      INCREASE_LAG_MS=cfg.getInt(INCREASE_LAG_MS_PNAME,INCREASE_LAG_MS);
      INCREASE_LAG_MS=cfg.getInt(DECREASE_LAG_MS_PNAME,DECREASE_LAG_MS);
      INITIAL_INTERVAL_MS=cfg.getInt(INITIAL_INTERVAL_MS_PNAME,INITIAL_INTERVAL_MS);
      String rembMultConstantStr=cfg.getString(REMB_MULT_CONSTANT_PNAME,null);
      if (rembMultConstantStr != null) {
        try {
          REMB_MULT_CONSTANT=Double.parseDouble(rembMultConstantStr);
        }
 catch (        Exception e) {
        }
      }
      REMB_AVERAGE_INTERVAL_MS=cfg.getInt(REMB_AVERAGE_INTERVAL_MS_PNAME,REMB_AVERAGE_INTERVAL_MS);
      MIN_ASSUMED_ENDPOINT_BITRATE_BPS=cfg.getInt(MIN_ASSUMED_ENDPOINT_BITRATE_BPS_PNAME,MIN_ASSUMED_ENDPOINT_BITRATE_BPS);
    }
  }
}",0.9342723004694836
105016,"/** 
 * Returns the incoming bitrate in bits per second from all <tt>VideoChannel</tt>s of the endpoint <tt>endpoint</tt> or  {@link #MIN_ASSUMED_ENDPOINT_BITRATE_BPS} if the actual bitrate is thatlimit.
 * @param endpoint the endpoint.
 * @return the incoming bitrate in bits per second from <tt>endpoint</tt>,or  {@link #MIN_ASSUMED_ENDPOINT_BITRATE_BPS} if the actual bitrate isbelow that limit.
 */
private long getEndpointBitrate(Endpoint endpoint){
  SimulcastEngine mySM=this.channel.getTransformEngine().getSimulcastEngine();
  long bitrate=0;
  for (  RtpChannel channel : endpoint.getChannels(MediaType.VIDEO)) {
    if (channel != null && channel instanceof VideoChannel) {
      VideoChannel vc=(VideoChannel)channel;
      SimulcastEngine simulcastEngine=vc.getTransformEngine().getSimulcastEngine();
      if (mySM != null && simulcastEngine != null && simulcastEngine.getSimulcastReceiver().isSimulcastSignaled()) {
      }
 else {
        bitrate+=((VideoChannel)channel).getIncomingBitrate();
      }
    }
  }
  return Math.max(bitrate,MIN_ASSUMED_ENDPOINT_BITRATE_BPS);
}","/** 
 * Returns the incoming bitrate in bits per second from all <tt>VideoChannel</tt>s of the endpoint <tt>endpoint</tt> or  {@link #MIN_ASSUMED_ENDPOINT_BITRATE_BPS} if the actual bitrate is belowthat limit.
 * @param endpoint the endpoint.
 * @return the incoming bitrate in bits per second from <tt>endpoint</tt>,or  {@link #MIN_ASSUMED_ENDPOINT_BITRATE_BPS} if the actual bitrate isbelow that limit.
 */
private long getEndpointBitrate(Endpoint endpoint){
  SimulcastEngine mySM=this.channel.getTransformEngine().getSimulcastEngine();
  long bitrate=0;
  for (  RtpChannel channel : endpoint.getChannels(MediaType.VIDEO)) {
    if (channel != null && channel instanceof VideoChannel) {
      VideoChannel vc=(VideoChannel)channel;
      SimulcastEngine simulcastEngine=vc.getTransformEngine().getSimulcastEngine();
      if (mySM != null && simulcastEngine != null && simulcastEngine.getSimulcastReceiver().isSimulcastSignaled()) {
      }
 else {
        bitrate+=((VideoChannel)channel).getIncomingBitrate();
      }
    }
  }
  return Math.max(bitrate,MIN_ASSUMED_ENDPOINT_BITRATE_BPS);
}",0.9935956084172004
105017,"/** 
 * Sets the initial value of lastN.
 * @param lastN The current value of lastN.
 * @return the new value of lastN.
 */
private int setInitialLastN(int lastN){
  VideoChannel channel=bitrateController.getChannel();
  Endpoint thisEndpoint=channel.getEndpoint();
  int endpointCount=0;
  if (lastN < 0 || lastN > endpointCount) {
    lastN=endpointCount;
    channel.setLastN(endpointCount);
  }
  return lastN;
}","/** 
 * Sets the initial value of lastN.
 * @param lastN The current value of lastN.
 * @return the new value of lastN.
 */
private int setInitialLastN(int lastN){
  VideoChannel channel=bitrateController.getChannel();
  int endpointCount=bitrateController.getLastNController().getForwardedEndpoints().size();
  if (lastN < 0 || lastN > endpointCount) {
    lastN=endpointCount;
    channel.setLastN(endpointCount);
  }
  return lastN;
}",0.839390386869871
105018,"/** 
 * Updates the view that this <tt>VideoChannel</tt> has of the translated peer <tt>VideoChannel</tt>.
 * @param peerVideoChannel
 */
public void updateTranslatedVideoChannel(VideoChannel peerVideoChannel){
  if (peerVideoChannel == null) {
    logWarn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  if (peerVideoChannel == this) {
    return;
  }
  if (simulcastMode != SimulcastMode.REWRITING) {
    logDebug(""String_Node_Str"");
  }
  SimulcastEngine sim=peerVideoChannel.getTransformEngine().getSimulcastEngine();
  if (sim == null) {
    logDebug(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  SortedSet<SimulcastLayer> layers=sim.getSimulcastReceiver().getSimulcastLayers();
  if (layers == null || layers.size() == 0) {
    logDebug(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  logDebug(""String_Node_Str"");
  final Set<Integer> ssrcGroup=new HashSet<Integer>();
  final Map<Integer,Integer> rtxGroups=new HashMap<Integer,Integer>();
  for (  SimulcastLayer layer : layers) {
    int primarySSRC=(int)layer.getPrimarySSRC();
    int rtxSSRC=(int)layer.getRTXSSRC();
    ssrcGroup.add(primarySSRC);
    if (rtxSSRC != -1) {
      rtxGroups.put(rtxSSRC,primarySSRC);
    }
  }
  SimulcastLayer baseLayer=layers.first();
  final Integer ssrcTargetPrimary=(int)baseLayer.getPrimarySSRC();
  final Integer ssrcTargetRTX=(int)baseLayer.getRTXSSRC();
  final Map<Integer,Byte> ssrc2fec=new HashMap<Integer,Byte>();
  final Map<Integer,Byte> ssrc2red=new HashMap<Integer,Byte>();
  for (  Map.Entry<Byte,MediaFormat> entry : peerVideoChannel.getStream().getDynamicRTPPayloadTypes().entrySet()) {
    Byte pt=entry.getKey();
    MediaFormat format=entry.getValue();
    if (Constants.RED.equals(format.getEncoding())) {
      for (      Integer ssrc : ssrcGroup) {
        ssrc2red.put(ssrc,pt);
      }
      for (      Integer ssrc : rtxGroups.keySet()) {
        ssrc2red.put(ssrc,pt);
      }
    }
    if (Constants.ULPFEC.equals(entry.getValue().getEncoding())) {
      for (      Integer ssrc : ssrcGroup) {
        ssrc2fec.put(ssrc,pt);
      }
      for (      Integer ssrc : rtxGroups.keySet()) {
        ssrc2fec.put(ssrc,pt);
      }
    }
  }
  getStream().configureSSRCRewriting(ssrcGroup,ssrcTargetPrimary,ssrc2fec,ssrc2red,rtxGroups,ssrcTargetRTX);
}","/** 
 * Updates the view that this <tt>VideoChannel</tt> has of the translated peer <tt>VideoChannel</tt>.
 * @param peerVideoChannel
 */
public void updateTranslatedVideoChannel(VideoChannel peerVideoChannel){
  if (peerVideoChannel == null) {
    logWarn(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  if (peerVideoChannel == this) {
    logDebug(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  if (simulcastMode == null) {
    logWarn(""String_Node_Str"");
    return;
  }
  if (simulcastMode != SimulcastMode.REWRITING) {
    logDebug(""String_Node_Str"");
  }
  SimulcastEngine sim=peerVideoChannel.getTransformEngine().getSimulcastEngine();
  if (sim == null) {
    logDebug(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  SortedSet<SimulcastLayer> layers=sim.getSimulcastReceiver().getSimulcastLayers();
  if (layers == null || layers.size() == 0) {
    logDebug(""String_Node_Str"" + ""String_Node_Str"");
    return;
  }
  logDebug(""String_Node_Str"");
  final Set<Integer> ssrcGroup=new HashSet<Integer>();
  final Map<Integer,Integer> rtxGroups=new HashMap<Integer,Integer>();
  for (  SimulcastLayer layer : layers) {
    int primarySSRC=(int)layer.getPrimarySSRC();
    int rtxSSRC=(int)layer.getRTXSSRC();
    ssrcGroup.add(primarySSRC);
    if (rtxSSRC != -1) {
      rtxGroups.put(rtxSSRC,primarySSRC);
    }
  }
  SimulcastLayer baseLayer=layers.first();
  final Integer ssrcTargetPrimary=(int)baseLayer.getPrimarySSRC();
  final Integer ssrcTargetRTX=(int)baseLayer.getRTXSSRC();
  final Map<Integer,Byte> ssrc2fec=new HashMap<Integer,Byte>();
  final Map<Integer,Byte> ssrc2red=new HashMap<Integer,Byte>();
  for (  Map.Entry<Byte,MediaFormat> entry : peerVideoChannel.getStream().getDynamicRTPPayloadTypes().entrySet()) {
    Byte pt=entry.getKey();
    MediaFormat format=entry.getValue();
    if (Constants.RED.equals(format.getEncoding())) {
      for (      Integer ssrc : ssrcGroup) {
        ssrc2red.put(ssrc,pt);
      }
      for (      Integer ssrc : rtxGroups.keySet()) {
        ssrc2red.put(ssrc,pt);
      }
    }
    if (Constants.ULPFEC.equals(entry.getValue().getEncoding())) {
      for (      Integer ssrc : ssrcGroup) {
        ssrc2fec.put(ssrc,pt);
      }
      for (      Integer ssrc : rtxGroups.keySet()) {
        ssrc2fec.put(ssrc,pt);
      }
    }
  }
  getStream().configureSSRCRewriting(ssrcGroup,ssrcTargetPrimary,ssrc2fec,ssrc2red,rtxGroups,ssrcTargetRTX);
}",0.9721283783783784
105019,"/** 
 * Removes a specific RTP SSRC from the list of SSRCs received on this <tt>Channel</tt>.
 * @param receiveSSRC the RTP SSRC to be removed from the list of SSRCsreceived on this <tt>Channel</tt>
 * @return <tt>true</tt> if <tt>receiveSSRC</tt> was found in the list ofSSRCs received on this <tt>Channel</tt>; otherwise, <tt>false</tt>
 */
private synchronized boolean removeReceiveSSRC(int receiveSSRC){
  final int length=receiveSSRCs.length;
  boolean removed=false;
  if (length == 2) {
    if (((int)receiveSSRCs[0]) == receiveSSRC) {
      receiveSSRCs=NO_RECEIVE_SSRCS;
      removed=true;
    }
  }
 else {
    for (int i=0; i < length; i+=2) {
      if (((int)receiveSSRCs[i]) == receiveSSRC) {
        long[] newReceiveSSRCs=new long[length - 2];
        if (i != 0) {
          System.arraycopy(receiveSSRCs,0,newReceiveSSRCs,0,i);
        }
        if (i != newReceiveSSRCs.length) {
          System.arraycopy(receiveSSRCs,i + 2,newReceiveSSRCs,i,newReceiveSSRCs.length - i);
        }
        removed=true;
        break;
      }
    }
  }
  return removed;
}","/** 
 * Removes a specific RTP SSRC from the list of SSRCs received on this <tt>Channel</tt>.
 * @param receiveSSRC the RTP SSRC to be removed from the list of SSRCsreceived on this <tt>Channel</tt>
 * @return <tt>true</tt> if <tt>receiveSSRC</tt> was found in the list ofSSRCs received on this <tt>Channel</tt>; otherwise, <tt>false</tt>
 */
private synchronized boolean removeReceiveSSRC(int receiveSSRC){
  final int length=receiveSSRCs.length;
  boolean removed=false;
  if (length == 2) {
    if (((int)receiveSSRCs[0]) == receiveSSRC) {
      receiveSSRCs=NO_RECEIVE_SSRCS;
      removed=true;
    }
  }
 else {
    for (int i=0; i < length; i+=2) {
      if (((int)receiveSSRCs[i]) == receiveSSRC) {
        long[] newReceiveSSRCs=new long[length - 2];
        if (i != 0) {
          System.arraycopy(receiveSSRCs,0,newReceiveSSRCs,0,i);
        }
        if (i != newReceiveSSRCs.length) {
          System.arraycopy(receiveSSRCs,i + 2,newReceiveSSRCs,i,newReceiveSSRCs.length - i);
        }
        receiveSSRCs=newReceiveSSRCs;
        removed=true;
        break;
      }
    }
  }
  return removed;
}",0.982648401826484
105020,"@Override public void run(){
  while (!closed) {
synchronized (caches) {
      long now=System.currentTimeMillis();
      Iterator<Map.Entry<Long,Cache>> iter=caches.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<Long,Cache> entry=iter.next();
        Cache cache=entry.getValue();
        if (cache.lastInsertTime + SSRC_TIMEOUT_MILLIS < now) {
          logger.debug(""String_Node_Str"" + entry.getKey());
          cache.empty();
          iter.remove();
        }
      }
    }
    try {
      wait(10000);
    }
 catch (    InterruptedException ie) {
      Thread.currentThread().interrupt();
    }
  }
  logger.debug(""String_Node_Str"");
}","@Override public void run(){
  while (!closed) {
synchronized (caches) {
      long now=System.currentTimeMillis();
      Iterator<Map.Entry<Long,Cache>> iter=caches.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<Long,Cache> entry=iter.next();
        Cache cache=entry.getValue();
        if (cache.lastInsertTime + SSRC_TIMEOUT_MILLIS < now) {
          logger.debug(""String_Node_Str"" + entry.getKey());
          cache.empty();
          iter.remove();
        }
      }
    }
    try {
synchronized (this) {
        wait(10000);
      }
    }
 catch (    InterruptedException ie) {
      Thread.currentThread().interrupt();
    }
  }
  logger.debug(""String_Node_Str"");
}",0.9765739385065886
105021,"/** 
 * Returns the RTP packet with sequence number <tt>seq</tt> from the cache, or <tt>null</tt> if the cache does not contain a packet with this sequence number.
 * @param seq the RTP sequence number of the packet to get.
 * @return the RTP packet with sequence number <tt>seq</tt> from thecache, or <tt>null</tt> if the cache does not contain a packet with this sequence number.
 */
private synchronized RawPacket get(int seq){
  RawPacket pkt=cache.get(seq + ROC * (1 << 16));
  if (pkt == null && ROC > 0)   pkt=cache.get(seq + (ROC - 1) * (1 << 16));
  return new RawPacket(pkt.getBuffer().clone(),pkt.getOffset(),pkt.getLength());
}","/** 
 * Returns the RTP packet with sequence number <tt>seq</tt> from the cache, or <tt>null</tt> if the cache does not contain a packet with this sequence number.
 * @param seq the RTP sequence number of the packet to get.
 * @return the RTP packet with sequence number <tt>seq</tt> from thecache, or <tt>null</tt> if the cache does not contain a packet with this sequence number.
 */
private synchronized RawPacket get(int seq){
  RawPacket pkt=cache.get(seq + ROC * (1 << 16));
  if (pkt == null && ROC > 0)   pkt=cache.get(seq + (ROC - 1) * (1 << 16));
  return pkt == null ? null : new RawPacket(pkt.getBuffer().clone(),pkt.getOffset(),pkt.getLength());
}",0.9838337182448036
105022,"/** 
 * Initializes the transformers used by this instance and returns them as an array.
 */
private TransformEngine[] createChain(){
  List<TransformEngine> transformerList=new LinkedList<TransformEngine>();
  redFilter=new REDFilterTransformEngine(RED_PAYLOAD_TYPE);
  transformerList.add(redFilter);
  absSendTime=new AbsSendTimeEngine();
  transformerList.add(absSendTime);
  boolean enableNackTermination=true;
  Conference conference=channel.getContent().getConference();
  if (conference != null) {
    ConfigurationService cfg=conference.getVideobridge().getConfigurationService();
    if (cfg != null)     enableNackTermination=cfg.getBoolean(DISABLE_NACK_TERMINATION_PNAME,false);
  }
  if (enableNackTermination && channel instanceof NACKHandler) {
    cache=new CachingTransformer();
    transformerList.add(cache);
    nackNotifier=new NACKNotifier((NACKHandler)channel);
    rtcpTransformEngine=new RTCPTransformEngine(new Transformer[]{nackNotifier});
    transformerList.add(rtcpTransformEngine);
  }
  return transformerList.toArray(new TransformEngine[transformerList.size()]);
}","/** 
 * Initializes the transformers used by this instance and returns them as an array.
 */
private TransformEngine[] createChain(){
  List<TransformEngine> transformerList=new LinkedList<TransformEngine>();
  redFilter=new REDFilterTransformEngine(RED_PAYLOAD_TYPE);
  transformerList.add(redFilter);
  absSendTime=new AbsSendTimeEngine();
  transformerList.add(absSendTime);
  boolean enableNackTermination=true;
  Conference conference=channel.getContent().getConference();
  if (conference != null) {
    ConfigurationService cfg=conference.getVideobridge().getConfigurationService();
    if (cfg != null)     enableNackTermination=!cfg.getBoolean(DISABLE_NACK_TERMINATION_PNAME,false);
  }
  if (enableNackTermination && channel instanceof NACKHandler) {
    cache=new CachingTransformer();
    transformerList.add(cache);
    nackNotifier=new NACKNotifier((NACKHandler)channel);
    rtcpTransformEngine=new RTCPTransformEngine(new Transformer[]{nackNotifier});
    transformerList.add(rtcpTransformEngine);
  }
  return transformerList.toArray(new TransformEngine[transformerList.size()]);
}",0.9995444191343964
105023,"/** 
 * Implements  {@link org.jitsi.videobridge.rtcp.NACKHandler#handleNACK(org.jitsi.impl.neomedia.rtcp.NACKPacket)}TODO: consider doing this in a separate thread, as it might slow down the receiving RTCP thread.
 */
@Override public void handleNACK(NACKPacket nackPacket){
  Set<Integer> lostPackets=new HashSet<Integer>();
  lostPackets.addAll(nackPacket.getLostPackets());
  long ssrc=nackPacket.sourceSSRC;
  RawPacketCache cache=transformEngine.getCache();
  if (cache != null) {
    Iterator<Integer> iter=lostPackets.iterator();
    while (iter.hasNext()) {
      int seq=iter.next();
      RawPacket pkt=cache.get(ssrc,seq);
      if (pkt != null) {
        getStream().injectPacket(createPacketForRetransmission(pkt),true,true);
        iter.remove();
      }
    }
  }
  NACKPacket newNack=new NACKPacket(nackPacket.senderSSRC,ssrc,lostPackets);
  RawPacket pkt=null;
  try {
    pkt=newNack.toRawPacket();
  }
 catch (  IOException ioe) {
    logger.warn(""String_Node_Str"" + ioe);
  }
  if (pkt != null) {
    Channel channel=getContent().findChannelByReceiveSSRC(ssrc);
    if (channel != null && channel instanceof RtpChannel) {
      ((RtpChannel)channel).getStream().injectPacket(pkt,false,true);
    }
  }
}","/** 
 * Implements  {@link org.jitsi.videobridge.rtcp.NACKHandler#handleNACK(org.jitsi.impl.neomedia.rtcp.NACKPacket)}TODO: consider doing this in a separate thread, as it might slow down the receiving RTCP thread.
 */
@Override public void handleNACK(NACKPacket nackPacket){
  Set<Integer> lostPackets=new HashSet<Integer>();
  lostPackets.addAll(nackPacket.getLostPackets());
  long ssrc=nackPacket.sourceSSRC;
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + getID() + ""String_Node_Str""+ ssrc+ ""String_Node_Str""+ lostPackets);
  }
  RawPacketCache cache=transformEngine.getCache();
  if (cache != null) {
    Iterator<Integer> iter=lostPackets.iterator();
    while (iter.hasNext()) {
      int seq=iter.next();
      RawPacket pkt=cache.get(ssrc,seq);
      if (pkt != null) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + ssrc + ""String_Node_Str""+ seq);
        }
        getStream().injectPacket(createPacketForRetransmission(pkt),true,true);
        iter.remove();
      }
    }
  }
  if (!lostPackets.isEmpty()) {
    NACKPacket newNack=new NACKPacket(nackPacket.senderSSRC,ssrc,lostPackets);
    RawPacket pkt=null;
    try {
      pkt=newNack.toRawPacket();
    }
 catch (    IOException ioe) {
      logger.warn(""String_Node_Str"" + ioe);
    }
    if (pkt != null) {
      Set<RtpChannel> channelsToSendTo=new HashSet<RtpChannel>();
      Channel channel=getContent().findChannelByReceiveSSRC(ssrc);
      if (channel != null && channel instanceof RtpChannel) {
        channelsToSendTo.add((RtpChannel)channel);
      }
 else {
        for (        Channel c : getContent().getChannels()) {
          if (c != null && c instanceof RtpChannel && c != this)           channelsToSendTo.add((RtpChannel)c);
        }
      }
      for (      RtpChannel c : channelsToSendTo) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + ssrc + ""String_Node_Str""+ lostPackets+ ""String_Node_Str""+ c.getID());
        }
        c.getStream().injectPacket(pkt,false,true);
      }
    }
  }
}",0.7424242424242424
105024,"/** 
 * {@inheritDoc}Keeps   {@link #sctpConnection} and {@link #channelForDtls} up to date.
 */
@Override public boolean close(Channel channel){
  boolean removed=super.close(channel);
  if (removed) {
    if (channel == sctpConnection) {
      sctpConnection=null;
    }
    if (channel == channelForDtls) {
      if (sctpConnection != null) {
        channelForDtls=sctpConnection;
      }
 else       if (channel instanceof RtpChannel) {
        RtpChannel newChannelForDtls=null;
        for (        Channel c : getChannels()) {
          if (c instanceof RtpChannel)           newChannelForDtls=(RtpChannel)c;
        }
        if (newChannelForDtls != null) {
          newChannelForDtls.getDatagramFilter(false).setAcceptNonRtp(true);
          newChannelForDtls.getDatagramFilter(true).setAcceptNonRtp(!rtcpmux);
        }
        channelForDtls=newChannelForDtls;
      }
      if (channel instanceof RtpChannel) {
        RtpChannel rtpChannel=(RtpChannel)channel;
        rtpChannel.getDatagramFilter(false).setAcceptNonRtp(false);
        rtpChannel.getDatagramFilter(true).setAcceptNonRtp(false);
      }
    }
    try {
      StreamConnector connector=channel.getStreamConnector();
      if (connector != null) {
        DatagramSocket datagramSocket=connector.getDataSocket();
        if (datagramSocket != null)         datagramSocket.close();
        datagramSocket=connector.getControlSocket();
        if (datagramSocket != null)         datagramSocket.close();
        Socket socket=connector.getDataTCPSocket();
        if (socket != null)         socket.close();
        socket=connector.getControlTCPSocket();
        if (socket != null)         socket.close();
      }
    }
 catch (    IOException ioe) {
      logd(""String_Node_Str"" + ioe);
    }
    updatePayloadTypeFilters();
    EventAdmin eventAdmin=conference.getVideobridge().getEventAdmin();
    if (eventAdmin != null) {
      eventAdmin.sendEvent(EventFactory.transportChannelRemoved(channel));
    }
    channel.transportClosed();
  }
  if (getChannels().isEmpty())   close();
  return removed;
}","/** 
 * {@inheritDoc}Keeps   {@link #sctpConnection} and {@link #channelForDtls} up to date.
 */
@Override public boolean close(Channel channel){
  boolean removed=super.close(channel);
  if (removed) {
    if (channel == sctpConnection) {
      sctpConnection=null;
    }
    if (channel == channelForDtls) {
      if (sctpConnection != null) {
        channelForDtls=sctpConnection;
      }
 else       if (channel instanceof RtpChannel) {
        RtpChannel newChannelForDtls=null;
        for (        Channel c : getChannels()) {
          if (c instanceof RtpChannel)           newChannelForDtls=(RtpChannel)c;
        }
        if (newChannelForDtls != null) {
          newChannelForDtls.getDatagramFilter(false).setAcceptNonRtp(true);
          newChannelForDtls.getDatagramFilter(true).setAcceptNonRtp(!rtcpmux);
        }
        channelForDtls=newChannelForDtls;
      }
      if (channel instanceof RtpChannel) {
        RtpChannel rtpChannel=(RtpChannel)channel;
        rtpChannel.getDatagramFilter(false).setAcceptNonRtp(false);
        rtpChannel.getDatagramFilter(true).setAcceptNonRtp(false);
      }
    }
    try {
      StreamConnector connector=channel.getStreamConnector();
      if (connector != null) {
        DatagramSocket datagramSocket=connector.getDataSocket();
        if (datagramSocket != null)         datagramSocket.close();
        datagramSocket=connector.getControlSocket();
        if (datagramSocket != null)         datagramSocket.close();
        Socket socket=connector.getDataTCPSocket();
        if (socket != null)         socket.close();
        socket=connector.getControlTCPSocket();
        if (socket != null)         socket.close();
      }
    }
 catch (    IOException ioe) {
      logd(""String_Node_Str"" + ioe);
    }
    EventAdmin eventAdmin=conference.getVideobridge().getEventAdmin();
    if (eventAdmin != null) {
      eventAdmin.sendEvent(EventFactory.transportChannelRemoved(channel));
    }
    channel.transportClosed();
  }
  if (getChannels().isEmpty())   close();
  return removed;
}",0.9922667955534076
105025,"/** 
 * {@inheritDoc}Assures that no more than one <tt>SctpConnection</tt> is added. Keeps  {@link #sctpConnection} and {@link #channelForDtls} up to date.
 */
@Override public boolean addChannel(Channel channel){
  if (closed)   return false;
  if (channel instanceof SctpConnection && sctpConnection != null && sctpConnection != channel) {
    logd(""String_Node_Str"");
    return false;
  }
  if (!super.addChannel(channel))   return false;
  if (channel instanceof SctpConnection) {
    sctpConnection=(SctpConnection)channel;
    if (channelForDtls != null) {
      RtpChannel rtpChannelForDtls=(RtpChannel)channelForDtls;
      rtpChannelForDtls.getDatagramFilter(false).setAcceptNonRtp(false);
      rtpChannelForDtls.getDatagramFilter(true).setAcceptNonRtp(false);
    }
    channelForDtls=sctpConnection;
  }
 else   if (channelForDtls == null) {
    channelForDtls=channel;
    RtpChannel rtpChannel=(RtpChannel)channel;
    rtpChannel.getDatagramFilter(false).setAcceptNonRtp(true);
    rtpChannel.getDatagramFilter(true).setAcceptNonRtp(!rtcpmux);
  }
  updatePayloadTypeFilters();
  if (iceConnected)   channel.transportConnected();
  EventAdmin eventAdmin=conference.getVideobridge().getEventAdmin();
  if (eventAdmin != null) {
    eventAdmin.sendEvent(EventFactory.transportChannelAdded(channel));
  }
  return true;
}","/** 
 * {@inheritDoc}Assures that no more than one <tt>SctpConnection</tt> is added. Keeps  {@link #sctpConnection} and {@link #channelForDtls} up to date.
 */
@Override public boolean addChannel(Channel channel){
  if (closed)   return false;
  if (channel instanceof SctpConnection && sctpConnection != null && sctpConnection != channel) {
    logd(""String_Node_Str"");
    return false;
  }
  if (!super.addChannel(channel))   return false;
  if (channel instanceof SctpConnection) {
    sctpConnection=(SctpConnection)channel;
    if (channelForDtls != null) {
      RtpChannel rtpChannelForDtls=(RtpChannel)channelForDtls;
      rtpChannelForDtls.getDatagramFilter(false).setAcceptNonRtp(false);
      rtpChannelForDtls.getDatagramFilter(true).setAcceptNonRtp(false);
    }
    channelForDtls=sctpConnection;
  }
 else   if (channelForDtls == null) {
    channelForDtls=channel;
    RtpChannel rtpChannel=(RtpChannel)channel;
    rtpChannel.getDatagramFilter(false).setAcceptNonRtp(true);
    rtpChannel.getDatagramFilter(true).setAcceptNonRtp(!rtcpmux);
  }
  if (iceConnected)   channel.transportConnected();
  EventAdmin eventAdmin=conference.getVideobridge().getEventAdmin();
  if (eventAdmin != null) {
    eventAdmin.sendEvent(EventFactory.transportChannelAdded(channel));
  }
  return true;
}",0.988619119878604
105026,"/** 
 * Returns true if this <tt>RtpChannelDatagramFilter</tt> should accept an RTP packet with a payload type number <tt>pt</tt>. Checks whether <tt>pt</tt> is a payload type configured for the <tt>channel</tt>.
 * @param pt the payload type number of the packet.
 * @return true if this <tt>RtpChannelDatagramFilter</tt> should accept anRTP packet with a payload type number <tt>pt</tt>.
 */
private boolean acceptRTP(int pt){
  if (checkRtpPayloadType) {
    int[] channelPTs=channel.receivePTs;
    for (    int channelPT : channelPTs) {
      if (channelPT == pt)       return true;
    }
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Returns true if this <tt>RtpChannelDatagramFilter</tt> should accept an RTP packet with a payload type number <tt>pt</tt>. Checks whether <tt>pt</tt> is a payload type configured for the <tt>channel</tt>.
 * @param pt the payload type number of the packet.
 * @return true if this <tt>RtpChannelDatagramFilter</tt> should accept anRTP packet with a payload type number <tt>pt</tt>.
 */
private boolean acceptRTP(int pt){
  int[] channelPTs=channel.receivePTs;
  if (channelPTs == null || channelPTs.length == 0) {
    if (channel.getChannelBundleId() == null) {
      return true;
    }
 else {
      if (!missingPtsWarningLogged) {
        missingPtsWarningLogged=true;
        logger.warn(""String_Node_Str"" + channel.getID() + ""String_Node_Str""+ ""String_Node_Str"");
      }
      return false;
    }
  }
  for (  int channelPT : channelPTs) {
    if (channelPT == pt)     return true;
  }
  return false;
}",0.6991037131882202
105027,"/** 
 * Returns <tt>true</tt> if this <tt>RtpChannelDatagramFilter</tt> should accept an RTCP packet described by <tt>data</tt>, <tt>off</tt>, and <tt>len</tt>. Checks whether the SSRC of the packet sender is an SSRC received on the <tt>channel</tt>.
 * @param data
 * @param len
 * @param off
 * @return
 */
private boolean acceptRTCP(byte[] data,int off,int len){
  if (checkRtcpSsrc) {
    if (len >= 8) {
      int packetSenderSSRC=RTPTranslatorImpl.readInt(data,off + 4);
      int[] channelSSRCs=channel.getReceiveSSRCs();
      for (      int channelSSRC : channelSSRCs) {
        if (channelSSRC == packetSenderSSRC)         return true;
      }
    }
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Returns <tt>true</tt> if this <tt>RtpChannelDatagramFilter</tt> should accept an RTCP packet described by <tt>data</tt>, <tt>off</tt>, and <tt>len</tt>. Checks whether the SSRC of the packet sender is an SSRC received on the <tt>channel</tt>.
 * @param data
 * @param len
 * @param off
 * @return
 */
private boolean acceptRTCP(byte[] data,int off,int len){
  if (len >= 8) {
    int packetSenderSSRC=RTPTranslatorImpl.readInt(data,off + 4);
    int[] channelSSRCs=channel.getReceiveSSRCs();
    for (    int channelSSRC : channelSSRCs) {
      if (channelSSRC == packetSenderSSRC)       return true;
    }
  }
  return false;
}",0.9436201780415432
105028,"/** 
 * {@inheritDoc}
 */
@Override public boolean accept(DatagramPacket p){
  int len=p.getLength();
  if (len >= 4) {
    byte[] data=p.getData();
    int off=p.getOffset();
    if (((data[off + 0] & 0xc0) >> 6) == 2) {
      int pt=data[off + 1] & 0xff;
      if (200 <= pt && pt <= 211) {
        return rtcp && acceptRTCP(data,off,len);
      }
 else {
        return !rtcp && acceptRTP(pt & 0x7f);
      }
    }
  }
  return acceptNonRtp && DTLS_DATAGRAM_FILTER.accept(p);
}","/** 
 * {@inheritDoc}
 */
@Override public boolean accept(DatagramPacket p){
  int len=p.getLength();
  if (len >= 4) {
    byte[] data=p.getData();
    int off=p.getOffset();
    if (((data[off + 0] & 0xc0) >> 6) == 2) {
      int pt=data[off + 1] & 0xff;
      if (200 <= pt && pt <= 211) {
        return rtcp && acceptRTCP(data,off,len);
      }
 else {
        return !rtcp && acceptRTP(pt & 0x7f);
      }
    }
  }
  return acceptNonRtp && DTLSDatagramFilter.isDTLS(p);
}",0.9457202505219208
105029,"/** 
 * Logs an <tt>Event</tt> to an <tt>InfluxDB</tt> database. This method returns without blocking, the blocking operations are performed by a thread from   {@link #executor}.
 * @param e the <tt>Event</tt> to log.
 */
@SuppressWarnings(""String_Node_Str"") private void logEvent(InfluxDBEvent e){
  boolean useLocalTime=e.useLocalTime();
  long now=System.currentTimeMillis();
  boolean multipoint=false;
  int pointCount=1;
  JSONArray columns=new JSONArray();
  JSONArray points=new JSONArray();
  Object[] values=e.getValues();
  if (useLocalTime)   columns.add(""String_Node_Str"");
  Collections.addAll(columns,e.getColumns());
  if (values[0] instanceof Object[]) {
    multipoint=true;
    pointCount=values.length;
  }
  if (multipoint) {
    for (int i=0; i < pointCount; i++) {
      JSONArray point=new JSONArray();
      if (useLocalTime)       point.add(now);
      Collections.addAll(point,values[i]);
      points.add(point);
    }
  }
 else {
    JSONArray point=new JSONArray();
    if (useLocalTime)     point.add(System.currentTimeMillis());
    Collections.addAll(point,values);
    points.add(point);
  }
  JSONObject jsonObject=new JSONObject();
  jsonObject.put(""String_Node_Str"",e.getName());
  jsonObject.put(""String_Node_Str"",columns);
  jsonObject.put(""String_Node_Str"",points);
  JSONArray jsonArray=new JSONArray();
  jsonArray.add(jsonObject);
  final String jsonString=jsonArray.toJSONString();
  executor.execute(new Runnable(){
    @Override public void run(){
      sendPost(jsonString);
    }
  }
);
}","/** 
 * Logs an <tt>Event</tt> to an <tt>InfluxDB</tt> database. This method returns without blocking, the blocking operations are performed by a thread from   {@link #executor}.
 * @param e the <tt>Event</tt> to log.
 */
@SuppressWarnings(""String_Node_Str"") private void logEvent(InfluxDBEvent e){
  boolean useLocalTime=e.useLocalTime();
  long now=System.currentTimeMillis();
  boolean multipoint=false;
  int pointCount=1;
  JSONArray columns=new JSONArray();
  JSONArray points=new JSONArray();
  Object[] values=e.getValues();
  if (useLocalTime)   columns.add(""String_Node_Str"");
  Collections.addAll(columns,e.getColumns());
  if (values[0] instanceof Object[]) {
    multipoint=true;
    pointCount=values.length;
  }
  if (multipoint) {
    for (int i=0; i < pointCount; i++) {
      if (!(values[i] instanceof Object[]))       continue;
      JSONArray point=new JSONArray();
      if (useLocalTime)       point.add(now);
      Collections.addAll(point,(Object[])values[i]);
      points.add(point);
    }
  }
 else {
    JSONArray point=new JSONArray();
    if (useLocalTime)     point.add(now);
    Collections.addAll(point,values);
    points.add(point);
  }
  JSONObject jsonObject=new JSONObject();
  jsonObject.put(""String_Node_Str"",e.getName());
  jsonObject.put(""String_Node_Str"",columns);
  jsonObject.put(""String_Node_Str"",points);
  JSONArray jsonArray=new JSONArray();
  jsonArray.add(jsonObject);
  final String jsonString=jsonArray.toJSONString();
  executor.execute(new Runnable(){
    @Override public void run(){
      sendPost(jsonString);
    }
  }
);
}",0.8656620711766592
105030,"/** 
 * Sets the <tt>Set</tt> of the SSRCs that this <tt>RtpChannel</tt> has signaled and updates the <tt>Content</tt> SSRCs accordingly.
 * @param sources The <tt>List</tt> of <tt>SourcePacketExtension</tt> thatdescribes the list of sources of this <tt>RtpChannel</tt> and that is used as the input in the update of the Sets the <tt>Set</tt> of the SSRCs that this <tt>RtpChannel</tt> has signaled.
 */
public void setSources(List<SourcePacketExtension> sources){
  if (sources == null || sources.isEmpty()) {
    return;
  }
  Set<Integer> oldSignaledSSRCs=signaledSSRCs;
  Set<Integer> newSignaledSSRCs=new HashSet<Integer>();
  for (  SourcePacketExtension source : sources) {
    int ssrc=(int)source.getSSRC();
    if (ssrc != -1) {
      newSignaledSSRCs.add((int)source.getSSRC());
    }
  }
  Set<Integer> addedSSRCs=new HashSet<Integer>(newSignaledSSRCs);
  addedSSRCs.removeAll(oldSignaledSSRCs);
  if (!addedSSRCs.isEmpty()) {
    for (    Integer addedSSRC : addedSSRCs) {
      addReceiveSSRC(addedSSRC);
    }
  }
  oldSignaledSSRCs.removeAll(newSignaledSSRCs);
  if (!oldSignaledSSRCs.isEmpty()) {
    for (    Integer removedSSRC : oldSignaledSSRCs) {
      removeReceiveSSRC(removedSSRC);
    }
  }
  signaledSSRCs=newSignaledSSRCs;
  touch();
}","/** 
 * Sets the <tt>Set</tt> of the SSRCs that this <tt>RtpChannel</tt> has signaled and updates the <tt>Content</tt> SSRCs accordingly.
 * @param sources The <tt>List</tt> of <tt>SourcePacketExtension</tt> thatdescribes the list of sources of this <tt>RtpChannel</tt> and that is used as the input in the update of the Sets the <tt>Set</tt> of the SSRCs that this <tt>RtpChannel</tt> has signaled.
 */
public synchronized void setSources(List<SourcePacketExtension> sources){
  if (sources == null || sources.isEmpty()) {
    return;
  }
  Set<Integer> oldSignaledSSRCs=new HashSet<Integer>(signaledSSRCs);
  Set<Integer> newSignaledSSRCs=new HashSet<Integer>();
  for (  SourcePacketExtension source : sources) {
    int ssrc=(int)source.getSSRC();
    if (ssrc != -1) {
      newSignaledSSRCs.add((int)source.getSSRC());
    }
  }
  Set<Integer> addedSSRCs=new HashSet<Integer>(newSignaledSSRCs);
  addedSSRCs.removeAll(oldSignaledSSRCs);
  if (!addedSSRCs.isEmpty()) {
    for (    Integer addedSSRC : addedSSRCs) {
      addReceiveSSRC(addedSSRC);
    }
  }
  oldSignaledSSRCs.removeAll(newSignaledSSRCs);
  if (!oldSignaledSSRCs.isEmpty()) {
    for (    Integer removedSSRC : oldSignaledSSRCs) {
      removeReceiveSSRC(removedSSRC);
    }
  }
  signaledSSRCs=newSignaledSSRCs;
  touch();
}",0.9761811792268644
105031,"/** 
 * Creates a new ""transport manager state changed"" <tt>Event</tt>, which indicates that a Jitsi Videobridge TransportManager has changed its state.
 * @param transportManager the changed transport manager object
 * @return the <tt>Event</tt> which was created.
 */
public static Event transportStateChanged(IceUdpTransportManager transportManager,IceProcessingState oldState,IceProcessingState newState){
  Dictionary properties=new Hashtable(3);
  properties.put(""String_Node_Str"",transportManager);
  properties.put(""String_Node_Str"",oldState);
  properties.put(""String_Node_Str"",newState);
  return new Event(TRANSPORT_STATE_CHANGED_TOPIC,properties);
}","/** 
 * Creates a new ""transport manager state changed"" <tt>Event</tt>, which indicates that a Jitsi Videobridge TransportManager has changed its state.
 * @param transportManager the changed transport manager object
 * @return the <tt>Event</tt> which was created.
 */
public static Event transportStateChanged(IceUdpTransportManager transportManager,IceProcessingState oldState,IceProcessingState newState){
  Dictionary properties=new Hashtable(3);
  properties.put(EVENT_SOURCE,transportManager);
  properties.put(""String_Node_Str"",oldState);
  properties.put(""String_Node_Str"",newState);
  return new Event(TRANSPORT_STATE_CHANGED_TOPIC,properties);
}",0.979498861047836
105032,"/** 
 * Gets an <tt>Endpoint</tt> participating in this <tt>Conference</tt> which has a specific identifier/ID. If an <tt>Endpoint</tt> participating in this <tt>Conference</tt> with the specified <tt>id</tt> does not exist at the time the method is invoked, the method optionally initializes a new <tt>Endpoint</tt> instance with the specified <tt>id</tt> and adds it to the list of <tt>Endpoint</tt>s participating in this <tt>Conference</tt>.
 * @param id the identifier/ID of the <tt>Endpoint</tt> which is to bereturned
 * @return an <tt>Endpoint</tt> participating in this <tt>Conference</tt>which has the specified <tt>id</tt> or <tt>null</tt> if there is no such <tt>Endpoint</tt> and <tt>create</tt> equals <tt>false</tt>
 */
private Endpoint getEndpoint(String id,boolean create){
  Endpoint endpoint=null;
  boolean changed=false;
synchronized (endpoints) {
    for (Iterator<WeakReference<Endpoint>> i=endpoints.iterator(); i.hasNext(); ) {
      Endpoint e=i.next().get();
      if (e == null) {
        i.remove();
        changed=true;
      }
 else       if (e.getID().equals(id)) {
        endpoint=e;
      }
    }
    if (create && endpoint == null) {
      endpoint=new Endpoint(id);
      endpoint.addPropertyChangeListener(propertyChangeListener);
      endpoints.add(new WeakReference<Endpoint>(endpoint));
      changed=true;
      LoggingService loggingService=videobridge.getLoggingService();
      if (loggingService != null)       loggingService.logEvent(EventFactory.endpointCreated(getID(),id));
    }
  }
  if (changed)   firePropertyChange(ENDPOINTS_PROPERTY_NAME,null,null);
  return endpoint;
}","/** 
 * Gets an <tt>Endpoint</tt> participating in this <tt>Conference</tt> which has a specific identifier/ID. If an <tt>Endpoint</tt> participating in this <tt>Conference</tt> with the specified <tt>id</tt> does not exist at the time the method is invoked, the method optionally initializes a new <tt>Endpoint</tt> instance with the specified <tt>id</tt> and adds it to the list of <tt>Endpoint</tt>s participating in this <tt>Conference</tt>.
 * @param id the identifier/ID of the <tt>Endpoint</tt> which is to bereturned
 * @return an <tt>Endpoint</tt> participating in this <tt>Conference</tt>which has the specified <tt>id</tt> or <tt>null</tt> if there is no such <tt>Endpoint</tt> and <tt>create</tt> equals <tt>false</tt>
 */
private Endpoint getEndpoint(String id,boolean create){
  Endpoint endpoint=null;
  boolean changed=false;
synchronized (endpoints) {
    for (Iterator<WeakReference<Endpoint>> i=endpoints.iterator(); i.hasNext(); ) {
      Endpoint e=i.next().get();
      if (e == null) {
        i.remove();
        changed=true;
      }
 else       if (e.getID().equals(id)) {
        endpoint=e;
      }
    }
    if (create && endpoint == null) {
      endpoint=new Endpoint(id,this);
      endpoint.addPropertyChangeListener(propertyChangeListener);
      endpoints.add(new WeakReference<Endpoint>(endpoint));
      changed=true;
      LoggingService loggingService=videobridge.getLoggingService();
      if (loggingService != null)       loggingService.logEvent(EventFactory.endpointCreated(getID(),id));
    }
  }
  if (changed)   firePropertyChange(ENDPOINTS_PROPERTY_NAME,null,null);
  return endpoint;
}",0.9984667279975468
105033,"@Override public void onStringData(WebRtcDataStream src,String msg){
  JSONParser parser=new JSONParser();
  JSONObject jsonObject;
  try {
    Object obj=parser.parse(msg);
    if (obj instanceof JSONObject)     jsonObject=(JSONObject)obj;
 else     return;
  }
 catch (  ParseException e) {
    logger.warn(""String_Node_Str"" + getID(),e);
    return;
  }
  Object colibriClass=jsonObject.get(Videobridge.COLIBRI_CLASS);
  if (colibriClass != null) {
    if (""String_Node_Str"".equals(colibriClass)) {
      String oldSelectedEndpoint, newSelectedEndpoint;
      boolean changed;
synchronized (selectedEndpointSyncRoot) {
        oldSelectedEndpoint=this.selectedEndpointID;
        newSelectedEndpoint=(String)jsonObject.get(""String_Node_Str"");
        if (newSelectedEndpoint == null || newSelectedEndpoint.length() == 0) {
          newSelectedEndpoint=SELECTED_ENDPOINT_NOT_WATCHING_VIDEO;
        }
 else {
          newSelectedEndpoint=newSelectedEndpoint.trim();
        }
        changed=!newSelectedEndpoint.equals(oldSelectedEndpoint);
        if (changed)         this.selectedEndpointID=newSelectedEndpoint;
      }
      if (changed) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + getID() + ""String_Node_Str""+ newSelectedEndpoint);
        }
        firePropertyChange(SELECTED_ENDPOINT_PROPERTY_NAME,oldSelectedEndpoint,newSelectedEndpoint);
      }
    }
 else     if (""String_Node_Str"".equals(colibriClass)) {
      String oldPinnedEndpoint, newPinnedEndpoint;
      boolean changed;
synchronized (pinnedEndpointSyncRoot) {
        oldPinnedEndpoint=this.pinnedEndpointID;
        newPinnedEndpoint=(String)jsonObject.get(""String_Node_Str"");
        newPinnedEndpoint=newPinnedEndpoint == null ? ""String_Node_Str"" : newPinnedEndpoint.trim();
        changed=!newPinnedEndpoint.equals(oldPinnedEndpoint);
        if (changed)         this.pinnedEndpointID=newPinnedEndpoint;
      }
      if (changed) {
        if (logger.isDebugEnabled()) {
          logger.debug(""String_Node_Str"" + getID() + ""String_Node_Str""+ newPinnedEndpoint);
        }
        firePropertyChange(PINNED_ENDPOINT_PROPERTY_NAME,oldPinnedEndpoint,newPinnedEndpoint);
      }
    }
  }
 else {
    logger.warn(""String_Node_Str"" + getID() + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","@Override public void onStringData(WebRtcDataStream src,String msg){
  JSONParser parser=new JSONParser();
  JSONObject jsonObject;
  try {
    Object obj=parser.parse(msg);
    if (obj instanceof JSONObject)     jsonObject=(JSONObject)obj;
 else     return;
  }
 catch (  ParseException e) {
    logger.warn(""String_Node_Str"" + getID(),e);
    return;
  }
  Object colibriClass=jsonObject.get(Videobridge.COLIBRI_CLASS);
  if (colibriClass != null) {
    if (""String_Node_Str"".equals(colibriClass)) {
      String newSelectedEndpointID=(String)jsonObject.get(""String_Node_Str"");
      Conference conference=weakConference.get();
      Endpoint newSelectedEndpoint;
      if (!StringUtils.isNullOrEmpty(newSelectedEndpointID) && conference != null) {
        newSelectedEndpoint=conference.getEndpoint(newSelectedEndpointID);
      }
 else {
        newSelectedEndpoint=null;
      }
      boolean changed;
      Endpoint oldSelectedEndpoint=this.getSelectedEndpoint();
synchronized (selectedEndpointSyncRoot) {
        changed=newSelectedEndpoint != oldSelectedEndpoint;
        if (changed) {
          if (newSelectedEndpoint == null) {
            this.weakSelectedEndpoint=null;
          }
 else {
            this.weakSelectedEndpoint=new WeakReference<Endpoint>(newSelectedEndpoint);
          }
        }
      }
      if (changed) {
        if (logger.isDebugEnabled()) {
          StringCompiler sc=new StringCompiler();
          sc.bind(""String_Node_Str"",newSelectedEndpoint);
          sc.bind(""String_Node_Str"",this);
          logger.debug(sc.c(""String_Node_Str""));
        }
        firePropertyChange(SELECTED_ENDPOINT_PROPERTY_NAME,oldSelectedEndpoint,newSelectedEndpoint);
      }
    }
 else     if (""String_Node_Str"".equals(colibriClass)) {
      String newPinnedEndpointID=(String)jsonObject.get(""String_Node_Str"");
      Conference conference=weakConference.get();
      Endpoint newPinnedEndpoint;
      if (!StringUtils.isNullOrEmpty(newPinnedEndpointID) && conference != null) {
        newPinnedEndpoint=conference.getEndpoint(newPinnedEndpointID);
      }
 else {
        newPinnedEndpoint=null;
      }
      boolean changed;
      Endpoint oldPinnedEndpoint=this.getPinnedEndpoint();
synchronized (pinnedEndpointSyncRoot) {
        changed=newPinnedEndpoint != oldPinnedEndpoint;
        if (changed) {
          if (newPinnedEndpoint == null) {
            this.weakPinnedEndpoint=null;
          }
 else {
            this.weakPinnedEndpoint=new WeakReference<Endpoint>(newPinnedEndpoint);
          }
        }
      }
      if (changed) {
        if (logger.isDebugEnabled()) {
          StringCompiler sc=new StringCompiler();
          sc.bind(""String_Node_Str"",newPinnedEndpoint);
          sc.bind(""String_Node_Str"",this);
          logger.debug(sc.c(""String_Node_Str""));
        }
        firePropertyChange(PINNED_ENDPOINT_PROPERTY_NAME,oldPinnedEndpoint,newPinnedEndpoint);
      }
    }
  }
 else {
    logger.warn(""String_Node_Str"" + getID() + ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.3172284644194756
105034,"/** 
 * Initializes a new <tt>Endpoint</tt> instance with a specific (unique) identifier/ID of the endpoint of a participant in a <tt>Conference</tt>.
 * @param id the identifier/ID of the endpoint of a participant in a<tt>Conference</tt> with which the new instance is to be initialized
 */
public Endpoint(String id){
  if (id == null)   throw new NullPointerException(""String_Node_Str"");
  this.id=id;
}","/** 
 * Initializes a new <tt>Endpoint</tt> instance with a specific (unique) identifier/ID of the endpoint of a participant in a <tt>Conference</tt>.
 * @param id the identifier/ID of the endpoint of a participant in a<tt>Conference</tt> with which the new instance is to be initialized
 */
public Endpoint(String id,Conference conference){
  if (id == null)   throw new NullPointerException(""String_Node_Str"");
  this.weakConference=new WeakReference<Conference>(conference);
  this.id=id;
}",0.8943270300333704
105035,"private Endpoint getPinnedEndpoint(){
  Endpoint endpoint=getEndpoint();
  if (endpoint != null) {
    String pinnedEndpointID=endpoint.getPinnedEndpointID();
    if (!StringUtils.isNullOrEmpty(pinnedEndpointID)) {
      return getContent().getConference().getEndpoint(pinnedEndpointID);
    }
  }
  return null;
}","private Endpoint getPinnedEndpoint(){
  Endpoint endpoint=getEndpoint();
  return endpoint != null ? endpoint.getPinnedEndpoint() : null;
}",0.5783664459161147
105036,"/** 
 * @param ssrc
 * @return
 */
public boolean accept(long ssrc){
  SimulcastLayer current=getCurrent();
  boolean accept=false;
  if (current != null)   accept=current.accept(ssrc);
  if (!accept) {
    SimulcastLayer next=getNext();
    if (next != null) {
      accept=next.accept(ssrc);
      if (accept)       maybeSwitchToNext();
    }
  }
  SimulcastLayer override=getOverride();
  if (override != null)   accept=override.accept(ssrc);
  return accept;
}","/** 
 * @param ssrc
 * @return
 */
public boolean accept(long ssrc){
  SimulcastLayer current=getCurrent();
  boolean accept=false;
  if (current != null)   accept=current.accept(ssrc);
  if (!accept) {
    SimulcastLayer next=getNext();
    if (next != null) {
      accept=next.accept(ssrc);
      if (accept)       maybeSwitchToNext();
    }
  }
  SimulcastLayer override=getOverride();
  if (override != null)   accept=override.accept(ssrc);
  if (!accept) {
    Integer key=Integer.valueOf((int)ssrc);
    CyclicCounter counter=dropped.getOrCreate(key,0x800);
    accept=counter.cyclicallyIncrementAndGet() < 8;
  }
  return accept;
}",0.814143245693563
105037,"private List<Endpoint> speechActivityEndpointsChanged(List<Endpoint> endpoints,boolean pinnedEndpointChanged){
  Lock writeLock=lastNSyncRoot.writeLock();
  List<Endpoint> endpointsEnteringLastN=null;
  boolean lastNEndpointsChanged=pinnedEndpointChanged;
  writeLock.lock();
  try {
    int lastN=getLastN();
    if (endpoints == null) {
      endpoints=conferenceSpeechActivity.getEndpoints();
    }
    if (lastN >= 0) {
      Endpoint thisEndpoint=getEndpoint();
      endpointsEnteringLastN=new ArrayList<Endpoint>(lastN);
      for (      Endpoint e : endpoints) {
        if (endpointsEnteringLastN.size() >= lastN)         break;
        if (!e.equals(thisEndpoint))         endpointsEnteringLastN.add(e);
      }
      Endpoint pinnedEndpoint=getPinnedEndpoint();
      if (endpointsEnteringLastN.size() > 0 && pinnedEndpoint != null) {
        boolean found=false;
        for (        Endpoint e : endpointsEnteringLastN) {
          if (e != null) {
            if (pinnedEndpoint.getID().equals(e.getID())) {
              found=true;
              break;
            }
          }
        }
        if (!found) {
          endpointsEnteringLastN.remove(endpointsEnteringLastN.size() - 1);
          endpointsEnteringLastN.add(pinnedEndpoint);
        }
      }
      if (lastNEndpoints != null && !lastNEndpoints.isEmpty()) {
        int n=0;
        for (        WeakReference<Endpoint> wr : lastNEndpoints) {
          if (n >= lastN)           break;
          Endpoint e=wr.get();
          if (e != null) {
            if (e.equals(thisEndpoint)) {
              continue;
            }
 else {
              endpointsEnteringLastN.remove(e);
              if (lastNIndexOf(endpoints,lastN,e) < 0)               lastNEndpointsChanged=true;
            }
          }
          ++n;
        }
      }
    }
    lastNEndpoints=new ArrayList<WeakReference<Endpoint>>(endpoints.size());
    for (    Endpoint endpoint : endpoints)     lastNEndpoints.add(new WeakReference<Endpoint>(endpoint));
  }
  finally {
    writeLock.unlock();
  }
  if (endpointsEnteringLastN != null && !endpointsEnteringLastN.isEmpty()) {
    lastNEndpointsChanged=true;
  }
  if (lastNEndpointsChanged)   lastNEndpointsChanged(endpointsEnteringLastN);
  return endpointsEnteringLastN;
}","private List<Endpoint> speechActivityEndpointsChanged(List<Endpoint> endpoints,boolean pinnedEndpointChanged){
  Lock writeLock=lastNSyncRoot.writeLock();
  List<Endpoint> endpointsEnteringLastN=null;
  boolean lastNEndpointsChanged=pinnedEndpointChanged;
  writeLock.lock();
  try {
    int lastN=getLastN();
    if (endpoints == null) {
      endpoints=conferenceSpeechActivity.getEndpoints();
    }
    if (lastN >= 0) {
      Endpoint thisEndpoint=getEndpoint();
      endpointsEnteringLastN=new ArrayList<Endpoint>(lastN);
      Endpoint pinnedEndpoint=getPinnedEndpoint();
      if (pinnedEndpoint != null && lastN > 0) {
        endpointsEnteringLastN.add(pinnedEndpoint);
      }
      for (      Endpoint e : endpoints) {
        if (endpointsEnteringLastN.size() >= lastN)         break;
        if (!e.equals(thisEndpoint) && !e.equals(pinnedEndpoint))         endpointsEnteringLastN.add(e);
      }
      if (lastNEndpoints != null && !lastNEndpoints.isEmpty()) {
        int n=0;
        for (        WeakReference<Endpoint> wr : lastNEndpoints) {
          if (n >= lastN)           break;
          Endpoint e=wr.get();
          if (e != null) {
            if (e.equals(thisEndpoint)) {
              continue;
            }
 else {
              endpointsEnteringLastN.remove(e);
              if (lastNIndexOf(endpoints,lastN,e) < 0)               lastNEndpointsChanged=true;
            }
          }
          ++n;
        }
      }
    }
    lastNEndpoints=new ArrayList<WeakReference<Endpoint>>(endpoints.size());
    for (    Endpoint endpoint : endpoints)     lastNEndpoints.add(new WeakReference<Endpoint>(endpoint));
  }
  finally {
    writeLock.unlock();
  }
  if (endpointsEnteringLastN != null && !endpointsEnteringLastN.isEmpty()) {
    lastNEndpointsChanged=true;
  }
  if (lastNEndpointsChanged)   lastNEndpointsChanged(endpointsEnteringLastN);
  return endpointsEnteringLastN;
}",0.8105011933174224
105038,"/** 
 * {@inheritDoc}
 */
@Override public void setLastN(Integer lastN){
  if (this.lastN == lastN)   return;
  boolean askForKeyframes=this.lastN == null;
  Lock writeLock=lastNSyncRoot.writeLock();
  List<Endpoint> endpointsEnteringLastN=new LinkedList<Endpoint>();
  writeLock.lock();
  try {
    if (this.lastN != null && this.lastN >= 0) {
      if (lastN > this.lastN) {
        int n=0;
        Endpoint thisEndpoint=getEndpoint();
        if (lastNEndpoints == null) {
          speechActivityEndpointsChanged(null);
        }
        if (lastNEndpoints != null) {
          for (          WeakReference<Endpoint> wr : lastNEndpoints) {
            if (n >= lastN)             break;
            Endpoint endpoint=wr.get();
            if (endpoint != null && endpoint.equals(thisEndpoint))             continue;
            ++n;
            if (n > this.lastN && endpoint != null)             endpointsEnteringLastN.add(endpoint);
          }
        }
        Endpoint pinnedEndpoint=getPinnedEndpoint();
        if (endpointsEnteringLastN.size() > 0 && pinnedEndpoint != null) {
          boolean found=false;
          for (          Endpoint e : endpointsEnteringLastN) {
            if (e != null) {
              if (pinnedEndpoint.getID().equals(e.getID())) {
                found=true;
                break;
              }
            }
          }
          if (!found) {
            endpointsEnteringLastN.remove(endpointsEnteringLastN.size() - 1);
            endpointsEnteringLastN.add(pinnedEndpoint);
          }
        }
      }
    }
    this.lastN=lastN;
  }
  finally {
    writeLock.unlock();
  }
  lastNEndpointsChanged(endpointsEnteringLastN);
  if (askForKeyframes) {
    getContent().askForKeyframes(new HashSet<Endpoint>(endpointsEnteringLastN));
  }
  touch();
}","/** 
 * {@inheritDoc}
 */
@Override public void setLastN(Integer lastN){
  if (this.lastN == lastN)   return;
  boolean askForKeyframes=this.lastN == null;
  Lock writeLock=lastNSyncRoot.writeLock();
  List<Endpoint> endpointsEnteringLastN=new LinkedList<Endpoint>();
  writeLock.lock();
  try {
    if (this.lastN != null && this.lastN >= 0) {
      if (lastN > this.lastN) {
        Endpoint pinnedEndpoint=getPinnedEndpoint();
        int n=(pinnedEndpoint != null) ? 1 : 0;
        Endpoint thisEndpoint=getEndpoint();
        if (lastNEndpoints == null) {
          speechActivityEndpointsChanged(null);
        }
        if (lastNEndpoints != null) {
          for (          WeakReference<Endpoint> wr : lastNEndpoints) {
            if (n >= lastN)             break;
            Endpoint endpoint=wr.get();
            if (endpoint != null && (endpoint.equals(thisEndpoint) || endpoint.equals(pinnedEndpoint)))             continue;
            ++n;
            if (n > this.lastN && endpoint != null)             endpointsEnteringLastN.add(endpoint);
          }
        }
      }
    }
    this.lastN=lastN;
  }
  finally {
    writeLock.unlock();
  }
  lastNEndpointsChanged(endpointsEnteringLastN);
  if (askForKeyframes) {
    getContent().askForKeyframes(new HashSet<Endpoint>(endpointsEnteringLastN));
  }
  touch();
}",0.6496490108487556
105039,"/** 
 * Handles all error responses.
 * @param error the error object.
 * @param packetID the id of the received packet.
 */
private void handleErrorResponse(XMPPError error,String packetID){
  if (error != null && ((XMPPError.Type.CANCEL.equals(error.getType()) && (XMPPError.Condition.conflict.toString().equals(error.getCondition()))) || (XMPPError.Type.AUTH.equals(error.getType()) && (XMPPError.Condition.forbidden.toString().equals(error.getCondition()))))) {
    if (XMPPError.Condition.forbidden.toString().equals(error.getCondition())) {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
    String nodeName=pendingCreateRequests.get(packetID);
    if (nodeName != null) {
      nodes.add(nodeName);
      pendingCreateRequests.remove(packetID);
      fireResponseCreateEvent(Response.SUCCESS);
      return;
    }
  }
  String errorMessage=""String_Node_Str"";
  if (pendingCreateRequests.remove(packetID) != null) {
    fireResponseCreateEvent(Response.FAIL);
    errorMessage+=""String_Node_Str"";
  }
 else   if (pendingConfigureRequests.remove(packetID) != null) {
    errorMessage+=""String_Node_Str"";
    fireResponseCreateEvent(Response.SUCCESS);
  }
 else   if (pendingPublishRequests.remove(packetID) != null) {
    errorMessage+=""String_Node_Str"";
    fireResponsePublishEvent(Response.FAIL);
  }
  if (error != null)   errorMessage+=""String_Node_Str"" + error.getMessage() + ""String_Node_Str""+ error.getCondition()+ ""String_Node_Str""+ packetID+ ""String_Node_Str"";
  logger.error(errorMessage);
}","/** 
 * Handles all error responses.
 * @param error the error object.
 * @param packetID the id of the received packet.
 */
private void handleErrorResponse(XMPPError error,String packetID){
  if (error != null && ((XMPPError.Type.CANCEL.equals(error.getType()) && (XMPPError.Condition.conflict.toString().equals(error.getCondition()) || XMPPError.Condition.forbidden.toString().equals(error.getCondition()))))) {
    if (XMPPError.Condition.forbidden.toString().equals(error.getCondition())) {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
    String nodeName=pendingCreateRequests.get(packetID);
    if (nodeName != null) {
      nodes.add(nodeName);
      pendingCreateRequests.remove(packetID);
      fireResponseCreateEvent(Response.SUCCESS);
      return;
    }
  }
  String errorMessage=""String_Node_Str"";
  if (pendingCreateRequests.remove(packetID) != null) {
    fireResponseCreateEvent(Response.FAIL);
    errorMessage+=""String_Node_Str"";
  }
 else   if (pendingConfigureRequests.remove(packetID) != null) {
    errorMessage+=""String_Node_Str"";
    fireResponseCreateEvent(Response.SUCCESS);
  }
 else   if (pendingPublishRequests.remove(packetID) != null) {
    errorMessage+=""String_Node_Str"";
    fireResponsePublishEvent(Response.FAIL);
  }
  if (error != null)   errorMessage+=""String_Node_Str"" + error.getMessage() + ""String_Node_Str""+ error.getCondition()+ ""String_Node_Str""+ packetID+ ""String_Node_Str"";
  logger.error(errorMessage);
}",0.9462796129462796
105040,"private void maybeForgetNext(){
  SimulcastLayer next=getNext();
  if (next != null && !next.isStreaming()) {
synchronized (receiveLayersSyncRoot) {
      this.weakNext=null;
      this.seenNext=0;
    }
  }
}","private void maybeForgetNext(){
synchronized (receiveLayersSyncRoot) {
    SimulcastLayer next=getNext();
    if (next != null && !next.isStreaming()) {
      this.weakNext=null;
      this.seenNext=0;
    }
  }
}",0.8056872037914692
105041,"/** 
 * Sets the receiving simulcast substream for the peers in the endpoints parameter.
 * @param options
 */
protected void configure(SimulcastReceiverOptions options){
  if (options == null) {
    if (logger.isWarnEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(1);
      map.put(""String_Node_Str"",getSelf());
      StringCompiler sc=new StringCompiler(map);
      logger.warn(sc.c(""String_Node_Str"" + ""String_Node_Str""));
    }
    return;
  }
  SimulcastManager peerSM=this.getPeerSM();
  if (peerSM == null || !peerSM.hasLayers()) {
    if (logger.isWarnEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(1);
      map.put(""String_Node_Str"",getSelf());
      StringCompiler sc=new StringCompiler(map);
      logger.warn(sc.c(""String_Node_Str""));
    }
    return;
  }
  SimulcastLayer next=peerSM.getSimulcastLayer(options.getTargetOrder());
  if (next == null || (next.getOrder() != SimulcastManager.SIMULCAST_LAYER_ORDER_LQ && !next.isStreaming())) {
    if (logger.isDebugEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(1);
      map.put(""String_Node_Str"",getSelf());
      StringCompiler sc=new StringCompiler(map);
      logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
    }
    return;
  }
  SimulcastLayer current=getCurrent();
  if (current == next) {
    if (logger.isDebugEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(4);
      map.put(""String_Node_Str"",getSelf());
      map.put(""String_Node_Str"",getPeer());
      map.put(""String_Node_Str"",current);
      map.put(""String_Node_Str"",next);
      StringCompiler sc=new StringCompiler(map);
      logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
    }
    return;
  }
 else {
    if (options.isHardSwitch() && next != getNext()) {
      this.askForKeyframe(next);
    }
synchronized (receiveLayersSyncRoot) {
      if (options.isUrgent() || current == null) {
        this.sendSimulcastLayersChangedEvent(next);
        this.weakCurrent=new WeakReference<SimulcastLayer>(next);
        this.weakNext=null;
        this.seenNext=0;
        if (logger.isDebugEnabled()) {
          Map<String,Object> map=new HashMap<String,Object>(4);
          map.put(""String_Node_Str"",getSelf());
          map.put(""String_Node_Str"",getPeer());
          map.put(""String_Node_Str"",next);
          map.put(""String_Node_Str"",options.isUrgent() ? ""String_Node_Str"" : ""String_Node_Str"");
          StringCompiler sc=new StringCompiler(map);
          logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else {
        this.sendSimulcastLayersChangingEvent(next);
        this.weakNext=new WeakReference<SimulcastLayer>(next);
        this.seenNext=0;
        if (logger.isDebugEnabled()) {
          Map<String,Object> map=new HashMap<String,Object>(3);
          map.put(""String_Node_Str"",getSelf());
          map.put(""String_Node_Str"",getPeer());
          map.put(""String_Node_Str"",next);
          StringCompiler sc=new StringCompiler(map);
          logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""));
        }
      }
    }
  }
}","/** 
 * Sets the receiving simulcast substream for the peers in the endpoints parameter.
 * @param options
 */
protected void configure(SimulcastReceiverOptions options){
  if (options == null) {
    if (logger.isWarnEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(1);
      map.put(""String_Node_Str"",getSelf());
      StringCompiler sc=new StringCompiler(map);
      logger.warn(sc.c(""String_Node_Str"" + ""String_Node_Str""));
    }
    return;
  }
  SimulcastManager peerSM=this.getPeerSM();
  if (peerSM == null || !peerSM.hasLayers()) {
    if (logger.isWarnEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(1);
      map.put(""String_Node_Str"",getSelf());
      StringCompiler sc=new StringCompiler(map);
      logger.warn(sc.c(""String_Node_Str""));
    }
    return;
  }
  SimulcastLayer next=peerSM.getSimulcastLayer(options.getTargetOrder());
  if (next == null || (next.getOrder() != SimulcastManager.SIMULCAST_LAYER_ORDER_LQ && !next.isStreaming())) {
    if (logger.isDebugEnabled()) {
      Map<String,Object> map=new HashMap<String,Object>(1);
      map.put(""String_Node_Str"",getSelf());
      StringCompiler sc=new StringCompiler(map);
      logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
    }
    return;
  }
synchronized (receiveLayersSyncRoot) {
    SimulcastLayer current=getCurrent();
    if (current == next) {
      this.weakNext=null;
      this.seenNext=0;
      if (logger.isDebugEnabled()) {
        Map<String,Object> map=new HashMap<String,Object>(4);
        map.put(""String_Node_Str"",getSelf());
        map.put(""String_Node_Str"",getPeer());
        map.put(""String_Node_Str"",current);
        map.put(""String_Node_Str"",next);
        StringCompiler sc=new StringCompiler(map);
        logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
      }
      return;
    }
 else {
      if (options.isHardSwitch() && next != getNext()) {
        this.askForKeyframe(next);
      }
      if (options.isUrgent() || current == null) {
        this.sendSimulcastLayersChangedEvent(next);
        this.weakCurrent=new WeakReference<SimulcastLayer>(next);
        this.weakNext=null;
        this.seenNext=0;
        if (logger.isDebugEnabled()) {
          Map<String,Object> map=new HashMap<String,Object>(4);
          map.put(""String_Node_Str"",getSelf());
          map.put(""String_Node_Str"",getPeer());
          map.put(""String_Node_Str"",next);
          map.put(""String_Node_Str"",options.isUrgent() ? ""String_Node_Str"" : ""String_Node_Str"");
          StringCompiler sc=new StringCompiler(map);
          logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else {
        this.sendSimulcastLayersChangingEvent(next);
        this.weakNext=new WeakReference<SimulcastLayer>(next);
        this.seenNext=0;
        if (logger.isDebugEnabled()) {
          Map<String,Object> map=new HashMap<String,Object>(3);
          map.put(""String_Node_Str"",getSelf());
          map.put(""String_Node_Str"",getPeer());
          map.put(""String_Node_Str"",next);
          StringCompiler sc=new StringCompiler(map);
          logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""));
        }
      }
    }
  }
}",0.9704957316159952
105042,"/** 
 */
private void maybeSwitchToNext(){
  SimulcastLayer next=getNext();
  if (next != null) {
synchronized (receiveLayersSyncRoot) {
      seenNext++;
      if (seenNext > MAX_NEXT_SEEN) {
        this.sendSimulcastLayersChangedEvent(next);
        this.weakCurrent=weakNext;
        this.weakNext=null;
        if (logger.isDebugEnabled()) {
          Map<String,Object> map=new HashMap<String,Object>(3);
          map.put(""String_Node_Str"",getSelf());
          map.put(""String_Node_Str"",getPeer());
          map.put(""String_Node_Str"",next);
          StringCompiler sc=new StringCompiler(map);
          logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""));
        }
      }
    }
  }
}","/** 
 */
private void maybeSwitchToNext(){
synchronized (receiveLayersSyncRoot) {
    SimulcastLayer next=getNext();
    if (next != null) {
      seenNext++;
      if (seenNext > MAX_NEXT_SEEN * Math.pow(2,next.getOrder())) {
        this.sendSimulcastLayersChangedEvent(next);
        this.weakCurrent=weakNext;
        this.weakNext=null;
        if (logger.isDebugEnabled()) {
          Map<String,Object> map=new HashMap<String,Object>(3);
          map.put(""String_Node_Str"",getSelf());
          map.put(""String_Node_Str"",getPeer());
          map.put(""String_Node_Str"",next);
          StringCompiler sc=new StringCompiler(map);
          logger.debug(sc.c(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""));
        }
      }
    }
  }
}",0.9114927344782034
105043,"/** 
 * Initializes a new <tt>Agent</tt> instance which implements the ICE protocol and which is to be used by this instance to implement the Jingle ICE-UDP transport.
 * @return a new <tt>Agent</tt> instance which implements the ICE protocoland which is to be used by this instance to implement the Jingle ICE-UDP transport
 * @throws IOException if initializing a new <tt>Agent</tt> instance for thepurposes of this <tt>TransportManager</tt> fails
 */
private Agent createIceAgent(boolean isControlling,String iceStreamName) throws IOException {
  NetworkAddressManagerService nams=ServiceUtils.getService(getBundleContext(),NetworkAddressManagerService.class);
  Agent iceAgent=nams.createIceAgent();
  appendVideobridgeHarvesters(iceAgent);
  iceAgent.setControlling(isControlling);
  iceAgent.setPerformConsentFreshness(true);
synchronized (IceUdpTransportManager.class) {
    if (initializePortNumbers) {
      initializePortNumbers=false;
      JitsiTransportManager.initializePortNumbers();
    }
  }
  PortTracker portTracker=JitsiTransportManager.getPortTracker(MediaType.AUDIO);
  IceMediaStream iceStream=nams.createIceStream(numComponents,portTracker.getPort(),iceStreamName,iceAgent);
  try {
    portTracker.setNextPort(1 + iceStream.getComponent(Component.RTCP).getLocalCandidates().get(0).getTransportAddress().getPort());
  }
 catch (  Throwable t) {
    if (t instanceof InterruptedException)     Thread.currentThread().interrupt();
 else     if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
  }
  return iceAgent;
}","/** 
 * Initializes a new <tt>Agent</tt> instance which implements the ICE protocol and which is to be used by this instance to implement the Jingle ICE-UDP transport.
 * @return a new <tt>Agent</tt> instance which implements the ICE protocoland which is to be used by this instance to implement the Jingle ICE-UDP transport
 * @throws IOException if initializing a new <tt>Agent</tt> instance for thepurposes of this <tt>TransportManager</tt> fails
 */
private Agent createIceAgent(boolean isControlling,String iceStreamName) throws IOException {
  NetworkAddressManagerService nams=ServiceUtils.getService(getBundleContext(),NetworkAddressManagerService.class);
  Agent iceAgent=nams.createIceAgent();
  appendVideobridgeHarvesters(iceAgent);
  iceAgent.setControlling(isControlling);
  iceAgent.setPerformConsentFreshness(true);
  PortTracker portTracker=JitsiTransportManager.getPortTracker(null);
  int portBase=portTracker.getPort();
  IceMediaStream iceStream=nams.createIceStream(numComponents,portBase,iceStreamName,iceAgent);
  try {
    portTracker.setNextPort(1 + iceStream.getComponent(numComponents > 1 ? Component.RTCP : Component.RTP).getLocalCandidates().get(0).getTransportAddress().getPort());
  }
 catch (  Throwable t) {
    if (t instanceof InterruptedException)     Thread.currentThread().interrupt();
 else     if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
 else     portTracker.setNextPort(numComponents + portBase);
  }
  return iceAgent;
}",0.7958913187541418
105044,"/** 
 * Returns <tt>true</tt> if this <tt>SctpConnection</tt> is connected to the remote peer and operational.
 * @return <tt>true</tt> if this <tt>SctpConnection</tt> is connected to theremote peer and operational
 */
public boolean isReady(){
  return assocIsUp && peerAddrIsConfirmed;
}","/** 
 * Returns <tt>true</tt> if this <tt>SctpConnection</tt> is connected to the remote peer and operational.
 * @return <tt>true</tt> if this <tt>SctpConnection</tt> is connected to theremote peer and operational
 */
public boolean isReady(){
  return assocIsUp && acceptedIncomingConnection;
}",0.9367521367521368
105045,"@Override public void run(){
  SctpSocket sctpSocket=null;
  try {
    sctpSocket=SctpConnection.this.sctpSocket;
    while (sctpSocket != null && !sctpSocket.accept()) {
      Thread.sleep(100);
      sctpSocket=SctpConnection.this.sctpSocket;
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  if (sctpSocket == null && logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + getID() + ""String_Node_Str""+ ""String_Node_Str"");
  }
}","@Override public void run(){
  SctpSocket sctpSocket=null;
  try {
    sctpSocket=SctpConnection.this.sctpSocket;
    while (sctpSocket != null) {
      if (sctpSocket.accept()) {
        acceptedIncomingConnection=true;
        break;
      }
      Thread.sleep(100);
      sctpSocket=SctpConnection.this.sctpSocket;
    }
    if (isReady()) {
      notifySctpConnectionReady();
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  if (sctpSocket == null && logger.isInfoEnabled()) {
    logger.info(""String_Node_Str"" + getID() + ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.8288119738072965
105046,"private void runOnDtlsTransport(StreamConnector connector) throws IOException {
  DtlsControlImpl dtlsControl=(DtlsControlImpl)getTransportManager().getDtlsControl(this);
  DtlsTransformEngine engine=dtlsControl.getTransformEngine();
  final DtlsPacketTransformer transformer=(DtlsPacketTransformer)engine.getRTPTransformer();
  byte[] receiveBuffer=new byte[SCTP_BUFFER_SIZE];
  if (LOG_SCTP_PACKETS) {
    System.setProperty(ConfigurationService.PNAME_SC_HOME_DIR_LOCATION,System.getProperty(""String_Node_Str""));
    System.setProperty(ConfigurationService.PNAME_SC_HOME_DIR_NAME,SctpConnection.class.getName());
  }
synchronized (this) {
    sctpSocket=Sctp.createSocket(5000);
    assocIsUp=false;
    peerAddrIsConfirmed=false;
  }
  sctpSocket.setLink(new NetworkLink(){
    @Override public void onConnOut(    SctpSocket s,    byte[] packet) throws IOException {
      if (LOG_SCTP_PACKETS) {
        LibJitsi.getPacketLoggingService().logPacket(PacketLoggingService.ProtocolName.ICE4J,new byte[]{0,0,0,(byte)debugId},5000,new byte[]{0,0,0,(byte)(debugId + 1)},remoteSctpPort,PacketLoggingService.TransportName.UDP,true,packet);
      }
      transformer.sendApplicationData(packet,0,packet.length);
    }
  }
);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + remoteSctpPort + ""String_Node_Str""+ getEndpoint().getID());
  }
  sctpSocket.setNotificationListener(this);
  sctpSocket.listen();
  threadPool.execute(new Runnable(){
    @Override public void run(){
      SctpSocket sctpSocket=null;
      try {
        sctpSocket=SctpConnection.this.sctpSocket;
        while (sctpSocket != null && !sctpSocket.accept()) {
          Thread.sleep(100);
          sctpSocket=SctpConnection.this.sctpSocket;
        }
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
      if (sctpSocket == null && logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + getID() + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
);
  sctpSocket.setDataCallback(this);
  DatagramSocket datagramSocket=connector.getDataSocket();
  if (datagramSocket != null) {
    this.iceSocket=new IceUdpSocketWrapper(datagramSocket);
  }
 else {
    this.iceSocket=new IceTcpSocketWrapper(connector.getDataTCPSocket());
  }
  DatagramPacket rcvPacket=new DatagramPacket(receiveBuffer,0,receiveBuffer.length);
  try {
    do {
      iceSocket.receive(rcvPacket);
      RawPacket raw=new RawPacket(rcvPacket.getData(),rcvPacket.getOffset(),rcvPacket.getLength());
      raw=transformer.reverseTransform(raw);
      if (raw == null)       continue;
      if (LOG_SCTP_PACKETS) {
        LibJitsi.getPacketLoggingService().logPacket(PacketLoggingService.ProtocolName.ICE4J,new byte[]{0,0,0,(byte)(debugId + 1)},remoteSctpPort,new byte[]{0,0,0,(byte)debugId},5000,PacketLoggingService.TransportName.UDP,false,raw.getBuffer(),raw.getOffset(),raw.getLength());
      }
      sctpSocket.onConnIn(raw.getBuffer(),raw.getOffset(),raw.getLength());
    }
 while (true);
  }
  finally {
synchronized (this) {
      assocIsUp=false;
      peerAddrIsConfirmed=false;
      if (sctpSocket != null) {
        sctpSocket.close();
        sctpSocket=null;
      }
    }
  }
}","private void runOnDtlsTransport(StreamConnector connector) throws IOException {
  DtlsControlImpl dtlsControl=(DtlsControlImpl)getTransportManager().getDtlsControl(this);
  DtlsTransformEngine engine=dtlsControl.getTransformEngine();
  final DtlsPacketTransformer transformer=(DtlsPacketTransformer)engine.getRTPTransformer();
  byte[] receiveBuffer=new byte[SCTP_BUFFER_SIZE];
  if (LOG_SCTP_PACKETS) {
    System.setProperty(ConfigurationService.PNAME_SC_HOME_DIR_LOCATION,System.getProperty(""String_Node_Str""));
    System.setProperty(ConfigurationService.PNAME_SC_HOME_DIR_NAME,SctpConnection.class.getName());
  }
synchronized (this) {
    sctpSocket=Sctp.createSocket(5000);
    assocIsUp=false;
    acceptedIncomingConnection=false;
  }
  sctpSocket.setLink(new NetworkLink(){
    @Override public void onConnOut(    SctpSocket s,    byte[] packet) throws IOException {
      if (LOG_SCTP_PACKETS) {
        LibJitsi.getPacketLoggingService().logPacket(PacketLoggingService.ProtocolName.ICE4J,new byte[]{0,0,0,(byte)debugId},5000,new byte[]{0,0,0,(byte)(debugId + 1)},remoteSctpPort,PacketLoggingService.TransportName.UDP,true,packet);
      }
      transformer.sendApplicationData(packet,0,packet.length);
    }
  }
);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + remoteSctpPort + ""String_Node_Str""+ getEndpoint().getID());
  }
  sctpSocket.setNotificationListener(this);
  sctpSocket.listen();
  threadPool.execute(new Runnable(){
    @Override public void run(){
      SctpSocket sctpSocket=null;
      try {
        sctpSocket=SctpConnection.this.sctpSocket;
        while (sctpSocket != null) {
          if (sctpSocket.accept()) {
            acceptedIncomingConnection=true;
            break;
          }
          Thread.sleep(100);
          sctpSocket=SctpConnection.this.sctpSocket;
        }
        if (isReady()) {
          notifySctpConnectionReady();
        }
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
      if (sctpSocket == null && logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + getID() + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
);
  sctpSocket.setDataCallback(this);
  DatagramSocket datagramSocket=connector.getDataSocket();
  if (datagramSocket != null) {
    this.iceSocket=new IceUdpSocketWrapper(datagramSocket);
  }
 else {
    this.iceSocket=new IceTcpSocketWrapper(connector.getDataTCPSocket());
  }
  DatagramPacket rcvPacket=new DatagramPacket(receiveBuffer,0,receiveBuffer.length);
  try {
    do {
      iceSocket.receive(rcvPacket);
      RawPacket raw=new RawPacket(rcvPacket.getData(),rcvPacket.getOffset(),rcvPacket.getLength());
      raw=transformer.reverseTransform(raw);
      if (raw == null)       continue;
      if (LOG_SCTP_PACKETS) {
        LibJitsi.getPacketLoggingService().logPacket(PacketLoggingService.ProtocolName.ICE4J,new byte[]{0,0,0,(byte)(debugId + 1)},remoteSctpPort,new byte[]{0,0,0,(byte)debugId},5000,PacketLoggingService.TransportName.UDP,false,raw.getBuffer(),raw.getOffset(),raw.getLength());
      }
      sctpSocket.onConnIn(raw.getBuffer(),raw.getOffset(),raw.getLength());
    }
 while (true);
  }
  finally {
synchronized (this) {
      assocIsUp=false;
      acceptedIncomingConnection=false;
      if (sctpSocket != null) {
        sctpSocket.close();
        sctpSocket=null;
      }
    }
  }
}",0.9567592171142468
105047,"/** 
 * Implements notification in order to track socket state.
 */
@Override public synchronized void onSctpNotification(SctpSocket socket,SctpNotification notification){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + socket + ""String_Node_Str""+ notification);
  }
switch (notification.sn_type) {
case SctpNotification.SCTP_ASSOC_CHANGE:
    SctpNotification.AssociationChange assocChange=(SctpNotification.AssociationChange)notification;
switch (assocChange.state) {
case SctpNotification.AssociationChange.SCTP_COMM_UP:
    if (!assocIsUp) {
      boolean wasReady=isReady();
      assocIsUp=true;
      if (isReady() && !wasReady)       notifySctpConnectionReady();
    }
  break;
case SctpNotification.AssociationChange.SCTP_COMM_LOST:
case SctpNotification.AssociationChange.SCTP_SHUTDOWN_COMP:
case SctpNotification.AssociationChange.SCTP_CANT_STR_ASSOC:
try {
  closeStream();
}
 catch (IOException e) {
  logger.error(""String_Node_Str"",e);
}
break;
}
break;
case SctpNotification.SCTP_PEER_ADDR_CHANGE:
SctpNotification.PeerAddressChange peerAddrChange=(SctpNotification.PeerAddressChange)notification;
switch (peerAddrChange.state) {
case SctpNotification.PeerAddressChange.SCTP_ADDR_AVAILABLE:
case SctpNotification.PeerAddressChange.SCTP_ADDR_CONFIRMED:
if (!peerAddrIsConfirmed) {
boolean wasReady=isReady();
peerAddrIsConfirmed=true;
if (isReady() && !wasReady) notifySctpConnectionReady();
}
break;
}
break;
}
}","/** 
 * Implements notification in order to track socket state.
 */
@Override public synchronized void onSctpNotification(SctpSocket socket,SctpNotification notification){
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + socket + ""String_Node_Str""+ notification);
  }
switch (notification.sn_type) {
case SctpNotification.SCTP_ASSOC_CHANGE:
    SctpNotification.AssociationChange assocChange=(SctpNotification.AssociationChange)notification;
switch (assocChange.state) {
case SctpNotification.AssociationChange.SCTP_COMM_UP:
    if (!assocIsUp) {
      boolean wasReady=isReady();
      assocIsUp=true;
      if (isReady() && !wasReady)       notifySctpConnectionReady();
    }
  break;
case SctpNotification.AssociationChange.SCTP_COMM_LOST:
case SctpNotification.AssociationChange.SCTP_SHUTDOWN_COMP:
case SctpNotification.AssociationChange.SCTP_CANT_STR_ASSOC:
try {
  closeStream();
}
 catch (IOException e) {
  logger.error(""String_Node_Str"",e);
}
break;
}
break;
}
}",0.8132678132678133
105048,"/** 
 * {@inheritDoc}
 */
@Override protected void closeStream() throws IOException {
  try {
synchronized (this) {
      assocIsUp=false;
      peerAddrIsConfirmed=false;
      if (sctpSocket != null) {
        sctpSocket.close();
        sctpSocket=null;
      }
    }
  }
  finally {
    if (iceSocket != null) {
    }
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void closeStream() throws IOException {
  try {
synchronized (this) {
      assocIsUp=false;
      acceptedIncomingConnection=false;
      if (sctpSocket != null) {
        sctpSocket.close();
        sctpSocket=null;
      }
    }
  }
  finally {
    if (iceSocket != null) {
    }
  }
}",0.9440242057488654
105049,"/** 
 * Notifies the <tt>WebRtcDataStreamListener</tt>s added to this instance that this <tt>SctpConnection</tt> is ready i.e. it is connected to the remote peer and operational.
 */
private void notifySctpConnectionReadyInEventDispatcher(){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
  }
  if (!isExpired() && isReady()) {
    WebRtcDataStreamListener[] ls=getChannelListeners();
    if (ls != null) {
      for (      WebRtcDataStreamListener l : ls) {
        l.onSctpConnectionReady(this);
      }
    }
  }
}","/** 
 * Notifies the <tt>WebRtcDataStreamListener</tt>s added to this instance that this <tt>SctpConnection</tt> is ready i.e. it is connected to the remote peer and operational.
 */
private void notifySctpConnectionReadyInEventDispatcher(){
  if (!isExpired() && isReady()) {
    WebRtcDataStreamListener[] ls=getChannelListeners();
    if (ls != null) {
      for (      WebRtcDataStreamListener l : ls) {
        l.onSctpConnectionReady(this);
      }
    }
  }
}",0.9098116947472744
105050,"/** 
 * Initializes   {@link #tcpHostHarvester}.
 */
private void initializeTcpHarvester(){
synchronized (IceUdpTransportManager.class) {
    if (tcpHostHarvesterInitialized)     return;
    tcpHostHarvesterInitialized=true;
    ConfigurationService cfg=conference.getVideobridge().getConfigurationService();
    boolean fallback=false;
    if (!cfg.getBoolean(DISABLE_TCP_HARVESTER,false)) {
      boolean ssltcp=cfg.getBoolean(TCP_HARVESTER_SSLTCP,TCP_HARVESTER_SSLTCP_DEFAULT);
      int port=cfg.getInt(TCP_HARVESTER_PORT,-1);
      if (port == -1) {
        fallback=true;
        port=TCP_DEFAULT_PORT;
      }
      try {
        tcpHostHarvester=new MultiplexingTcpHostHarvester(port,ssltcp);
      }
 catch (      IOException ioe) {
        logger.warn(""String_Node_Str"" + port + ""String_Node_Str""+ ioe+ (fallback ? ""String_Node_Str"" + TCP_FALLBACK_PORT : ""String_Node_Str"")+ ""String_Node_Str"");
      }
      if (fallback) {
        port=TCP_FALLBACK_PORT;
        try {
          tcpHostHarvester=new MultiplexingTcpHostHarvester(port,ssltcp);
        }
 catch (        IOException e) {
          logger.warn(""String_Node_Str"" + ""String_Node_Str"" + port + ""String_Node_Str""+ e);
          return;
        }
      }
      if (logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + port + ""String_Node_Str""+ ssltcp);
      }
      String localAddressStr=cfg.getString(NAT_HARVESTER_LOCAL_ADDRESS);
      String publicAddressStr=cfg.getString(NAT_HARVESTER_PUBLIC_ADDRESS);
      if (localAddressStr != null && publicAddressStr != null) {
        try {
          tcpHostHarvester.addMappedAddress(InetAddress.getByName(publicAddressStr),InetAddress.getByName(localAddressStr));
        }
 catch (        UnknownHostException uhe) {
          logger.warn(""String_Node_Str"" + publicAddressStr + ""String_Node_Str""+ localAddressStr+ ""String_Node_Str""+ uhe);
        }
      }
      int mappedPort=cfg.getInt(TCP_HARVESTER_MAPPED_PORT,-1);
      if (mappedPort != -1) {
        tcpHostHarvesterMappedPort=mappedPort;
        tcpHostHarvester.addMappedPort(mappedPort);
      }
      if (AwsCandidateHarvester.smellsLikeAnEC2()) {
        TransportAddress localAddress=AwsCandidateHarvester.getFace();
        TransportAddress publicAddress=AwsCandidateHarvester.getMask();
        if (localAddress != null && publicAddress != null) {
          tcpHostHarvester.addMappedAddress(publicAddress.getAddress(),localAddress.getAddress());
        }
      }
    }
  }
}","/** 
 * Initializes   {@link #tcpHostHarvester}.
 */
private void initializeTcpHarvester(){
synchronized (IceUdpTransportManager.class) {
    if (tcpHostHarvesterInitialized)     return;
    tcpHostHarvesterInitialized=true;
    ConfigurationService cfg=conference.getVideobridge().getConfigurationService();
    boolean fallback=false;
    if (!cfg.getBoolean(DISABLE_TCP_HARVESTER,false)) {
      boolean ssltcp=cfg.getBoolean(TCP_HARVESTER_SSLTCP,TCP_HARVESTER_SSLTCP_DEFAULT);
      int port=cfg.getInt(TCP_HARVESTER_PORT,-1);
      if (port == -1) {
        fallback=true;
        port=TCP_DEFAULT_PORT;
      }
      try {
        tcpHostHarvester=new MultiplexingTcpHostHarvester(port,ssltcp);
      }
 catch (      IOException ioe) {
        logger.warn(""String_Node_Str"" + port + ""String_Node_Str""+ ioe+ (fallback ? ""String_Node_Str"" + TCP_FALLBACK_PORT : ""String_Node_Str"")+ ""String_Node_Str"");
      }
      if (tcpHostHarvester == null && fallback) {
        port=TCP_FALLBACK_PORT;
        try {
          tcpHostHarvester=new MultiplexingTcpHostHarvester(port,ssltcp);
        }
 catch (        IOException e) {
          logger.warn(""String_Node_Str"" + ""String_Node_Str"" + port + ""String_Node_Str""+ e);
          return;
        }
      }
      if (logger.isInfoEnabled()) {
        logger.info(""String_Node_Str"" + port + ""String_Node_Str""+ ssltcp);
      }
      String localAddressStr=cfg.getString(NAT_HARVESTER_LOCAL_ADDRESS);
      String publicAddressStr=cfg.getString(NAT_HARVESTER_PUBLIC_ADDRESS);
      if (localAddressStr != null && publicAddressStr != null) {
        try {
          tcpHostHarvester.addMappedAddress(InetAddress.getByName(publicAddressStr),InetAddress.getByName(localAddressStr));
        }
 catch (        UnknownHostException uhe) {
          logger.warn(""String_Node_Str"" + publicAddressStr + ""String_Node_Str""+ localAddressStr+ ""String_Node_Str""+ uhe);
        }
      }
      int mappedPort=cfg.getInt(TCP_HARVESTER_MAPPED_PORT,-1);
      if (mappedPort != -1) {
        tcpHostHarvesterMappedPort=mappedPort;
        tcpHostHarvester.addMappedPort(mappedPort);
      }
      if (AwsCandidateHarvester.smellsLikeAnEC2()) {
        TransportAddress localAddress=AwsCandidateHarvester.getFace();
        TransportAddress publicAddress=AwsCandidateHarvester.getMask();
        if (localAddress != null && publicAddress != null) {
          tcpHostHarvester.addMappedAddress(publicAddress.getAddress(),localAddress.getAddress());
        }
      }
    }
  }
}",0.9943775100401606
105051,"/** 
 * Gets the <tt>RTPTranslator</tt> which forwards the RTP and RTCP traffic between the <tt>Channel</tt>s of this <tt>Content</tt> which use a translator as their RTP-level relay.
 * @return the <tt>RTPTranslator</tt> which forwards the RTP and RTCPtraffic between the <tt>Channel</tt>s of this <tt>Content</tt> which use a translator as their RTP-level relay
 */
public RTPTranslator getRTPTranslator(){
synchronized (rtpLevelRelaySyncRoot) {
    if ((rtpTranslator == null) && !expired) {
      rtpTranslator=getMediaService().createRTPTranslator();
      if (rtpTranslator != null) {
        new RTPTranslatorWriteFilter(rtpTranslator,this);
        if (rtpTranslator instanceof RTPTranslatorImpl) {
          RTPTranslatorImpl rtpTranslatorImpl=(RTPTranslatorImpl)rtpTranslator;
          initialLocalSSRC=new Random().nextInt();
          rtpTranslatorImpl.setLocalSSRC(initialLocalSSRC);
          MediaType mediaType=getMediaType();
          if (MediaType.VIDEO.equals(mediaType))           setRTCPTerminationStrategyFromConfiguration();
          rtcpFeedbackMessageSender=rtpTranslatorImpl.getRtcpFeedbackMessageSender();
        }
      }
    }
    return rtpTranslator;
  }
}","/** 
 * Gets the <tt>RTPTranslator</tt> which forwards the RTP and RTCP traffic between the <tt>Channel</tt>s of this <tt>Content</tt> which use a translator as their RTP-level relay.
 * @return the <tt>RTPTranslator</tt> which forwards the RTP and RTCPtraffic between the <tt>Channel</tt>s of this <tt>Content</tt> which use a translator as their RTP-level relay
 */
public RTPTranslator getRTPTranslator(){
synchronized (rtpLevelRelaySyncRoot) {
    if ((rtpTranslator == null) && !expired) {
      rtpTranslator=getMediaService().createRTPTranslator();
      if (rtpTranslator != null) {
        new RTPTranslatorWriteFilter(rtpTranslator,this);
        if (rtpTranslator instanceof RTPTranslatorImpl) {
          RTPTranslatorImpl rtpTranslatorImpl=(RTPTranslatorImpl)rtpTranslator;
          initialLocalSSRC=Videobridge.RANDOM.nextInt();
          rtpTranslatorImpl.setLocalSSRC(initialLocalSSRC);
          MediaType mediaType=getMediaType();
          if (MediaType.VIDEO.equals(mediaType))           setRTCPTerminationStrategyFromConfiguration();
          rtcpFeedbackMessageSender=rtpTranslatorImpl.getRtcpFeedbackMessageSender();
        }
      }
    }
    return rtpTranslator;
  }
}",0.9874371859296482
105052,"/** 
 * Initializes a new <tt>Channel</tt> instance which is to have a specific ID. The initialization is to be considered requested by a specific <tt>Content</tt>.
 * @param content the <tt>Content</tt> which is initializing the newinstance
 * @param id the ID of the new instance. It is expected to be unique withinthe list of <tt>Channel</tt>s listed in <tt>content</tt> while the new instance is listed there as well.
 * @param channelBundleId the ID of the channel-bundle this<tt>RtpChannel</tt> is to be a part of (or <tt>null</tt> if no it is not to be a part of a channel-bundle).
 * @throws Exception if an error occurs while initializing the new instance
 */
public RtpChannel(Content content,String id,String channelBundleId) throws Exception {
  super(content,id,channelBundleId);
  MediaService mediaService=getMediaService();
  MediaType mediaType=getContent().getMediaType();
  stream=mediaService.createMediaStream(null,mediaType,getDtlsControl());
  stream.addPropertyChangeListener(streamPropertyChangeListener);
  stream.setName(getID());
  stream.setProperty(RtpChannel.class.getName(),this);
  initialLocalSSRC=new Random().nextInt();
  conferenceSpeechActivity=getContent().getConference().getSpeechActivity();
  if (conferenceSpeechActivity != null) {
    conferenceSpeechActivity.addPropertyChangeListener(propertyChangeListener);
  }
  touch();
}","/** 
 * Initializes a new <tt>Channel</tt> instance which is to have a specific ID. The initialization is to be considered requested by a specific <tt>Content</tt>.
 * @param content the <tt>Content</tt> which is initializing the newinstance
 * @param id the ID of the new instance. It is expected to be unique withinthe list of <tt>Channel</tt>s listed in <tt>content</tt> while the new instance is listed there as well.
 * @param channelBundleId the ID of the channel-bundle this<tt>RtpChannel</tt> is to be a part of (or <tt>null</tt> if no it is not to be a part of a channel-bundle).
 * @throws Exception if an error occurs while initializing the new instance
 */
public RtpChannel(Content content,String id,String channelBundleId) throws Exception {
  super(content,id,channelBundleId);
  MediaService mediaService=getMediaService();
  MediaType mediaType=getContent().getMediaType();
  stream=mediaService.createMediaStream(null,mediaType,getDtlsControl());
  stream.addPropertyChangeListener(streamPropertyChangeListener);
  stream.setName(getID());
  stream.setProperty(RtpChannel.class.getName(),this);
  initialLocalSSRC=Videobridge.RANDOM.nextInt();
  conferenceSpeechActivity=getContent().getConference().getSpeechActivity();
  if (conferenceSpeechActivity != null) {
    conferenceSpeechActivity.addPropertyChangeListener(propertyChangeListener);
  }
  touch();
}",0.9898107714701602
105053,"/** 
 * Starts this <tt>Videobridge</tt> in a specific <tt>BundleContext</tt>.
 * @param bundleContext the <tt>BundleContext</tt> in which this<tt>Videobridge</tt> is to start
 */
void start(final BundleContext bundleContext) throws Exception {
  ConfigurationService cfg=ServiceUtils2.getService(bundleContext,ConfigurationService.class);
  this.defaultProcessingOptions=cfg.getInt(DEFAULT_OPTIONS_PROPERTY_NAME,0);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + Integer.toHexString(defaultProcessingOptions));
  }
  ProviderManager providerManager=ProviderManager.getInstance();
  providerManager.addIQProvider(ColibriConferenceIQ.ELEMENT_NAME,ColibriConferenceIQ.NAMESPACE,new ColibriIQProvider());
  providerManager.addExtensionProvider(IceUdpTransportPacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<IceUdpTransportPacketExtension>(IceUdpTransportPacketExtension.class));
  providerManager.addExtensionProvider(RawUdpTransportPacketExtension.ELEMENT_NAME,RawUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RawUdpTransportPacketExtension>(RawUdpTransportPacketExtension.class));
  PacketExtensionProvider candidatePacketExtensionProvider=new DefaultPacketExtensionProvider<CandidatePacketExtension>(CandidatePacketExtension.class);
  providerManager.addExtensionProvider(CandidatePacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,candidatePacketExtensionProvider);
  providerManager.addExtensionProvider(CandidatePacketExtension.ELEMENT_NAME,RawUdpTransportPacketExtension.NAMESPACE,candidatePacketExtensionProvider);
  providerManager.addExtensionProvider(RtcpmuxPacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RtcpmuxPacketExtension>(RtcpmuxPacketExtension.class));
  providerManager.addExtensionProvider(DtlsFingerprintPacketExtension.ELEMENT_NAME,DtlsFingerprintPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<DtlsFingerprintPacketExtension>(DtlsFingerprintPacketExtension.class));
  providerManager.addIQProvider(PubSubElementType.PUBLISH.getElementName(),PubSubElementType.PUBLISH.getNamespace().getXmlns(),new PubSubProvider());
  StunStack.setPacketLogger(null);
  if (cfg != null) {
    List<String> ice4jPropertyNames=cfg.getPropertyNamesByPrefix(""String_Node_Str"",false);
    if (ice4jPropertyNames != null && !ice4jPropertyNames.isEmpty()) {
      for (      String propertyName : ice4jPropertyNames) {
        String propertyValue=cfg.getString(propertyName);
        if (propertyValue != null)         System.setProperty(propertyName,propertyValue);
      }
    }
  }
  try {
    HostCandidateHarvester.initializeInterfaceFilters();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"",e);
  }
  this.bundleContext=bundleContext;
}","/** 
 * Starts this <tt>Videobridge</tt> in a specific <tt>BundleContext</tt>.
 * @param bundleContext the <tt>BundleContext</tt> in which this<tt>Videobridge</tt> is to start
 */
void start(final BundleContext bundleContext) throws Exception {
  ConfigurationService cfg=ServiceUtils2.getService(bundleContext,ConfigurationService.class);
  this.defaultProcessingOptions=(cfg == null) ? 0 : cfg.getInt(DEFAULT_OPTIONS_PROPERTY_NAME,0);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + Integer.toHexString(defaultProcessingOptions));
  }
  ProviderManager providerManager=ProviderManager.getInstance();
  providerManager.addIQProvider(ColibriConferenceIQ.ELEMENT_NAME,ColibriConferenceIQ.NAMESPACE,new ColibriIQProvider());
  providerManager.addExtensionProvider(IceUdpTransportPacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<IceUdpTransportPacketExtension>(IceUdpTransportPacketExtension.class));
  providerManager.addExtensionProvider(RawUdpTransportPacketExtension.ELEMENT_NAME,RawUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RawUdpTransportPacketExtension>(RawUdpTransportPacketExtension.class));
  PacketExtensionProvider candidatePacketExtensionProvider=new DefaultPacketExtensionProvider<CandidatePacketExtension>(CandidatePacketExtension.class);
  providerManager.addExtensionProvider(CandidatePacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,candidatePacketExtensionProvider);
  providerManager.addExtensionProvider(CandidatePacketExtension.ELEMENT_NAME,RawUdpTransportPacketExtension.NAMESPACE,candidatePacketExtensionProvider);
  providerManager.addExtensionProvider(RtcpmuxPacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RtcpmuxPacketExtension>(RtcpmuxPacketExtension.class));
  providerManager.addExtensionProvider(DtlsFingerprintPacketExtension.ELEMENT_NAME,DtlsFingerprintPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<DtlsFingerprintPacketExtension>(DtlsFingerprintPacketExtension.class));
  providerManager.addIQProvider(PubSubElementType.PUBLISH.getElementName(),PubSubElementType.PUBLISH.getNamespace().getXmlns(),new PubSubProvider());
  StunStack.setPacketLogger(null);
  if (cfg != null) {
    List<String> ice4jPropertyNames=cfg.getPropertyNamesByPrefix(""String_Node_Str"",false);
    if (ice4jPropertyNames != null && !ice4jPropertyNames.isEmpty()) {
      for (      String propertyName : ice4jPropertyNames) {
        String propertyValue=cfg.getString(propertyName);
        if (propertyValue != null)         System.setProperty(propertyName,propertyValue);
      }
    }
  }
  try {
    HostCandidateHarvester.initializeInterfaceFilters();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + ""String_Node_Str"",e);
  }
  this.bundleContext=bundleContext;
}",0.9965313909122442
105054,"/** 
 * Handles PubSub configuration responses.
 * @param response the configuration response.
 */
private void handleConfigurationResponse(IQ response){
  if (pendingConfigureRequests.remove(response) != null)   fireResponseCreateEvent(Response.SUCCESS);
}","/** 
 * Handles PubSub configuration responses.
 * @param response the configuration response.
 */
private void handleConfigurationResponse(IQ response){
  if (pendingConfigureRequests.remove(response.getPacketID()) != null)   fireResponseCreateEvent(Response.SUCCESS);
}",0.9734848484848484
105055,"/** 
 * Releases the resources for the <tt>PubSubPublisher</tt> and removes it from the list of available instances.
 * @param mgr the <tt>PubSubPublisher</tt> that will be released.
 */
public static void releasePubsubManager(PubSubPublisher mgr){
  instances.remove(mgr);
  mgr.dispose();
}","/** 
 * Releases the resources for the <tt>PubSubPublisher</tt> and removes it from the list of available instances.
 * @param publisher the <tt>PubSubPublisher</tt> that will be released.
 */
public static void releasePubsubManager(PubSubPublisher publisher){
  instances.values().remove(publisher);
  publisher.dispose();
}",0.920583468395462
105056,"/** 
 * Creates and returns <tt>PubSubPublisher</tt> instance for the given service
 * @param serviceName the name of the service
 * @return <tt>PubSubPublisher</tt> instance.
 */
public static PubSubPublisher getPubsubManager(String serviceName){
  if (!instances.containsKey(serviceName)) {
    instances.put(serviceName,new PubSubPublisher(serviceName));
  }
  return instances.get(serviceName);
}","/** 
 * Creates and returns <tt>PubSubPublisher</tt> instance for the given service
 * @param serviceName the name of the service
 * @return <tt>PubSubPublisher</tt> instance.
 */
public static PubSubPublisher getPubsubManager(String serviceName){
  PubSubPublisher publisher;
  if (instances.containsKey(serviceName)) {
    publisher=instances.get(serviceName);
  }
 else {
    publisher=new PubSubPublisher(serviceName);
    instances.put(serviceName,publisher);
  }
  return publisher;
}",0.7303370786516854
105057,"/** 
 * Sets the values of the properties of a specific <tt>ColibriConferenceIQ</tt> to the values of the respective properties of this instance. Thus, the specified <tt>iq</tt> may be thought of as a description of this instance. <p> <b>Note</b>: The copying of the values is deep i.e. the <tt>Contents</tt>s of this instance are described in the specified <tt>iq</tt>. </p>
 * @param iq the <tt>ColibriConferenceIQ</tt> to set the values of theproperties of this instance on
 */
public void describeDeep(ColibriConferenceIQ iq){
  describeShallow(iq);
  if (isRecording()) {
    ColibriConferenceIQ.Recording recordingIQ=new ColibriConferenceIQ.Recording(true);
    recordingIQ.setPath(getRecordingPath());
    iq.setRecording(recordingIQ);
  }
  for (  Content content : getContents()) {
    ColibriConferenceIQ.Content contentIQ=iq.getOrCreateContent(content.getName());
    for (    Channel channel : content.getChannels()) {
      ColibriConferenceIQ.Channel channelIQ=new ColibriConferenceIQ.Channel();
      channel.describe(channelIQ);
      contentIQ.addChannel(channelIQ);
    }
  }
}","/** 
 * Sets the values of the properties of a specific <tt>ColibriConferenceIQ</tt> to the values of the respective properties of this instance. Thus, the specified <tt>iq</tt> may be thought of as a description of this instance. <p> <b>Note</b>: The copying of the values is deep i.e. the <tt>Contents</tt>s of this instance are described in the specified <tt>iq</tt>. </p>
 * @param iq the <tt>ColibriConferenceIQ</tt> to set the values of theproperties of this instance on
 */
public void describeDeep(ColibriConferenceIQ iq){
  describeShallow(iq);
  if (isRecording()) {
    ColibriConferenceIQ.Recording recordingIQ=new ColibriConferenceIQ.Recording(true);
    recordingIQ.setPath(getRecordingPath());
    iq.setRecording(recordingIQ);
  }
  for (  Content content : getContents()) {
    ColibriConferenceIQ.Content contentIQ=iq.getOrCreateContent(content.getName());
    for (    Channel channel : content.getChannels()) {
      if (channel instanceof SctpConnection) {
        ColibriConferenceIQ.SctpConnection sctpConnectionIQ=new ColibriConferenceIQ.SctpConnection();
        channel.describe(sctpConnectionIQ);
        contentIQ.addSctpConnection(sctpConnectionIQ);
      }
 else {
        ColibriConferenceIQ.Channel channelIQ=new ColibriConferenceIQ.Channel();
        channel.describe(channelIQ);
        contentIQ.addChannel(channelIQ);
      }
    }
  }
}",0.8111831442463533
105058,"public static JSONObject serializeChannelCommon(ColibriConferenceIQ.ChannelCommon channelCommon){
  JSONObject jsonObject;
  if (channelCommon == null) {
    jsonObject=null;
  }
 else {
    String channelBundleId=channelCommon.getChannelBundleId();
    String endpoint=channelCommon.getEndpoint();
    int expire=channelCommon.getExpire();
    Boolean initiator=channelCommon.isInitiator();
    IceUdpTransportPacketExtension transport=channelCommon.getTransport();
    jsonObject=new JSONObject();
    if (channelBundleId != null) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.CHANNEL_BUNDLE_ID_ATTR_NAME,channelBundleId);
    }
    if (endpoint != null) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.ENDPOINT_ATTR_NAME,endpoint);
    }
    if (expire >= 0) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.EXPIRE_ATTR_NAME,expire);
    }
    if (initiator != null) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.INITIATOR_ATTR_NAME,initiator);
    }
    if (transport != null) {
      jsonObject.put(transport.getElementName(),serializeTransport(transport));
    }
  }
  return jsonObject;
}","public static JSONObject serializeChannelCommon(ColibriConferenceIQ.ChannelCommon channelCommon){
  JSONObject jsonObject;
  if (channelCommon == null) {
    jsonObject=null;
  }
 else {
    String id=channelCommon.getID();
    String channelBundleId=channelCommon.getChannelBundleId();
    String endpoint=channelCommon.getEndpoint();
    int expire=channelCommon.getExpire();
    Boolean initiator=channelCommon.isInitiator();
    IceUdpTransportPacketExtension transport=channelCommon.getTransport();
    jsonObject=new JSONObject();
    if (id != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.ID_ATTR_NAME,id);
    }
    if (channelBundleId != null) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.CHANNEL_BUNDLE_ID_ATTR_NAME,channelBundleId);
    }
    if (endpoint != null) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.ENDPOINT_ATTR_NAME,endpoint);
    }
    if (expire >= 0) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.EXPIRE_ATTR_NAME,expire);
    }
    if (initiator != null) {
      jsonObject.put(ColibriConferenceIQ.ChannelCommon.INITIATOR_ATTR_NAME,initiator);
    }
    if (transport != null) {
      jsonObject.put(transport.getElementName(),serializeTransport(transport));
    }
  }
  return jsonObject;
}",0.945
105059,"public static JSONObject serializeChannel(ColibriConferenceIQ.Channel channel){
  JSONObject jsonObject;
  if (channel == null) {
    jsonObject=null;
  }
 else {
    MediaDirection direction=channel.getDirection();
    String id=channel.getID();
    Integer lastN=channel.getLastN();
    List<PayloadTypePacketExtension> payloadTypes=channel.getPayloadTypes();
    Integer receivingSimulcastLayer=channel.getReceivingSimulcastLayer();
    RTPLevelRelayType rtpLevelRelayType=channel.getRTPLevelRelayType();
    List<SourcePacketExtension> sources=channel.getSources();
    List<SourceGroupPacketExtension> sourceGroups=channel.getSourceGroups();
    int[] ssrcs=channel.getSSRCs();
    jsonObject=serializeChannelCommon(channel);
    if (direction != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.DIRECTION_ATTR_NAME,direction.toString());
    }
    if (id != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.ID_ATTR_NAME,id);
    }
    if (lastN != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.LAST_N_ATTR_NAME,lastN);
    }
    if (lastN != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.RECEIVING_SIMULCAST_LAYER,receivingSimulcastLayer);
    }
    if ((payloadTypes != null) && !payloadTypes.isEmpty()) {
      jsonObject.put(PAYLOAD_TYPES,serializePayloadTypes(payloadTypes));
    }
    if (rtpLevelRelayType != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.RTP_LEVEL_RELAY_TYPE_ATTR_NAME,rtpLevelRelayType.toString());
    }
    if ((sources != null) && !sources.isEmpty())     jsonObject.put(SOURCES,serializeSources(sources));
    if ((sourceGroups != null) && !sourceGroups.isEmpty()) {
      jsonObject.put(SOURCE_GROUPS,serializeSourceGroups(sourceGroups));
    }
    if ((ssrcs != null) && (ssrcs.length > 0))     jsonObject.put(SSRCS,serializeSSRCs(ssrcs));
  }
  return jsonObject;
}","public static JSONObject serializeChannel(ColibriConferenceIQ.Channel channel){
  JSONObject jsonObject;
  if (channel == null) {
    jsonObject=null;
  }
 else {
    MediaDirection direction=channel.getDirection();
    Integer lastN=channel.getLastN();
    List<PayloadTypePacketExtension> payloadTypes=channel.getPayloadTypes();
    Integer receivingSimulcastLayer=channel.getReceivingSimulcastLayer();
    RTPLevelRelayType rtpLevelRelayType=channel.getRTPLevelRelayType();
    List<SourcePacketExtension> sources=channel.getSources();
    List<SourceGroupPacketExtension> sourceGroups=channel.getSourceGroups();
    int[] ssrcs=channel.getSSRCs();
    jsonObject=serializeChannelCommon(channel);
    if (direction != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.DIRECTION_ATTR_NAME,direction.toString());
    }
    if (lastN != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.LAST_N_ATTR_NAME,lastN);
    }
    if (lastN != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.RECEIVING_SIMULCAST_LAYER,receivingSimulcastLayer);
    }
    if ((payloadTypes != null) && !payloadTypes.isEmpty()) {
      jsonObject.put(PAYLOAD_TYPES,serializePayloadTypes(payloadTypes));
    }
    if (rtpLevelRelayType != null) {
      jsonObject.put(ColibriConferenceIQ.Channel.RTP_LEVEL_RELAY_TYPE_ATTR_NAME,rtpLevelRelayType.toString());
    }
    if ((sources != null) && !sources.isEmpty())     jsonObject.put(SOURCES,serializeSources(sources));
    if ((sourceGroups != null) && !sourceGroups.isEmpty()) {
      jsonObject.put(SOURCE_GROUPS,serializeSourceGroups(sourceGroups));
    }
    if ((ssrcs != null) && (ssrcs.length > 0))     jsonObject.put(SSRCS,serializeSSRCs(ssrcs));
  }
  return jsonObject;
}",0.9647453833240068
105060,"/** 
 * {@inheritDoc}
 */
@Override List<Endpoint> speechActivityEndpointsChanged(List<Endpoint> endpoints){
  Lock writeLock=lastNSyncRoot.writeLock();
  List<Endpoint> endpointsEnteringLastN=null;
  boolean lastNEndpointsChanged=false;
  writeLock.lock();
  try {
    int lastN=getLastN();
    if (endpoints == null) {
      endpoints=conferenceSpeechActivity.getEndpoints();
    }
    if (lastN > 0) {
      Endpoint thisEndpoint=getEndpoint();
      endpointsEnteringLastN=new ArrayList<Endpoint>(lastN);
      for (      Endpoint e : endpoints) {
        if (!e.equals(thisEndpoint)) {
          endpointsEnteringLastN.add(e);
          if (endpointsEnteringLastN.size() >= lastN)           break;
        }
      }
      if (!endpointsEnteringLastN.isEmpty())       lastNEndpointsChanged=true;
      if (lastNEndpoints != null && !lastNEndpoints.isEmpty()) {
        int n=0;
        for (        WeakReference<Endpoint> wr : lastNEndpoints) {
          Endpoint e=wr.get();
          if (e != null) {
            if (e.equals(thisEndpoint)) {
              continue;
            }
 else {
              endpointsEnteringLastN.remove(e);
              if (lastNIndexOf(endpoints,lastN,e) < 0)               lastNEndpointsChanged=true;
            }
          }
          ++n;
          if (n >= lastN)           break;
        }
      }
    }
    lastNEndpoints=new ArrayList<WeakReference<Endpoint>>(endpoints.size());
    for (    Endpoint endpoint : endpoints)     lastNEndpoints.add(new WeakReference<Endpoint>(endpoint));
  }
  finally {
    writeLock.unlock();
  }
  if (lastNEndpointsChanged)   lastNEndpointsChanged(endpointsEnteringLastN);
  return endpointsEnteringLastN;
}","/** 
 * {@inheritDoc}
 */
@Override List<Endpoint> speechActivityEndpointsChanged(List<Endpoint> endpoints){
  Lock writeLock=lastNSyncRoot.writeLock();
  List<Endpoint> endpointsEnteringLastN=null;
  boolean lastNEndpointsChanged=false;
  writeLock.lock();
  try {
    int lastN=getLastN();
    if (endpoints == null) {
      endpoints=conferenceSpeechActivity.getEndpoints();
    }
    if (lastN > 0) {
      Endpoint thisEndpoint=getEndpoint();
      endpointsEnteringLastN=new ArrayList<Endpoint>(lastN);
      for (      Endpoint e : endpoints) {
        if (!e.equals(thisEndpoint)) {
          endpointsEnteringLastN.add(e);
          if (endpointsEnteringLastN.size() >= lastN)           break;
        }
      }
      if (lastNEndpoints != null && !lastNEndpoints.isEmpty()) {
        int n=0;
        for (        WeakReference<Endpoint> wr : lastNEndpoints) {
          Endpoint e=wr.get();
          if (e != null) {
            if (e.equals(thisEndpoint)) {
              continue;
            }
 else {
              endpointsEnteringLastN.remove(e);
              if (lastNIndexOf(endpoints,lastN,e) < 0)               lastNEndpointsChanged=true;
            }
          }
          ++n;
          if (n >= lastN)           break;
        }
      }
    }
    lastNEndpoints=new ArrayList<WeakReference<Endpoint>>(endpoints.size());
    for (    Endpoint endpoint : endpoints)     lastNEndpoints.add(new WeakReference<Endpoint>(endpoint));
  }
  finally {
    writeLock.unlock();
  }
  if (endpointsEnteringLastN != null && !endpointsEnteringLastN.isEmpty()) {
    lastNEndpointsChanged=true;
  }
  if (lastNEndpointsChanged)   lastNEndpointsChanged(endpointsEnteringLastN);
  return endpointsEnteringLastN;
}",0.9413833528722158
105061,"/** 
 * Gets the simulcast layers of this simulcast manager.
 * @return
 */
public SortedSet<SimulcastLayer> getSimulcastLayers(){
  return new TreeSet<SimulcastLayer>(simulcastLayers);
}","/** 
 * Gets the simulcast layers of this simulcast manager.
 * @return
 */
public SortedSet<SimulcastLayer> getSimulcastLayers(){
synchronized (simulcastLayersSyncRoot) {
    return simulcastLayers == null ? null : new TreeSet<SimulcastLayer>(simulcastLayers);
  }
}",0.788546255506608
105062,"/** 
 * Updates the receiving simulcast layers of this <tt>Simulcast</tt> instance.
 * @param sourceGroups
 */
public void updateSimulcastLayers(List<SourceGroupPacketExtension> sourceGroups){
  if (sourceGroups == null)   return;
synchronized (simulcastLayersSyncRoot) {
    if (sourceGroups.size() == 0)     simulcastLayers=null;
  }
  Map<Long,SimulcastLayer> reverseMap=new HashMap<Long,SimulcastLayer>();
  SortedSet<SimulcastLayer> layers=new TreeSet<SimulcastLayer>();
  for (  SourceGroupPacketExtension sourceGroup : sourceGroups) {
    List<SourcePacketExtension> sources=sourceGroup.getSources();
    if (sources == null || sources.size() == 0 || !""String_Node_Str"".equals(sourceGroup.getSemantics())) {
      continue;
    }
    int order=0;
    for (    SourcePacketExtension source : sources) {
      Long primarySSRC=source.getSSRC();
      SimulcastLayer simulcastLayer=new SimulcastLayer(primarySSRC,order++);
      reverseMap.put(primarySSRC,simulcastLayer);
      layers.add(simulcastLayer);
    }
  }
  for (  SourceGroupPacketExtension sourceGroup : sourceGroups) {
    List<SourcePacketExtension> sources=sourceGroup.getSources();
    if (sources == null || sources.size() == 0 || ""String_Node_Str"".equals(sourceGroup.getSemantics())) {
      continue;
    }
    SimulcastLayer simulcastLayer=null;
    Set<Long> ssrcs=new HashSet<Long>();
    for (    SourcePacketExtension source : sources) {
      Long ssrc=source.getSSRC();
      ssrcs.add(source.getSSRC());
      if (reverseMap.containsKey(ssrc)) {
        simulcastLayer=reverseMap.get(ssrc);
      }
    }
    if (simulcastLayer != null) {
      simulcastLayer.associateSSRCs(ssrcs);
    }
  }
synchronized (simulcastLayersSyncRoot) {
    simulcastLayers=layers;
  }
  if (logger.isInfoEnabled()) {
synchronized (simulcastLayers) {
      logger.info(""String_Node_Str"" + videoChannel.getEndpoint().getID() + ""String_Node_Str""+ MyJsonEncoder.toJson(simulcastLayers));
    }
  }
}","/** 
 * Updates the receiving simulcast layers of this <tt>Simulcast</tt> instance.
 * @param sourceGroups
 */
public void updateSimulcastLayers(List<SourceGroupPacketExtension> sourceGroups){
  if (sourceGroups == null)   return;
synchronized (simulcastLayersSyncRoot) {
    if (sourceGroups.size() == 0)     simulcastLayers=null;
  }
  Map<Long,SimulcastLayer> reverseMap=new HashMap<Long,SimulcastLayer>();
  SortedSet<SimulcastLayer> layers=new TreeSet<SimulcastLayer>();
  for (  SourceGroupPacketExtension sourceGroup : sourceGroups) {
    List<SourcePacketExtension> sources=sourceGroup.getSources();
    if (sources == null || sources.size() == 0 || !""String_Node_Str"".equals(sourceGroup.getSemantics())) {
      continue;
    }
    int order=0;
    for (    SourcePacketExtension source : sources) {
      Long primarySSRC=source.getSSRC();
      SimulcastLayer simulcastLayer=new SimulcastLayer(primarySSRC,order++);
      reverseMap.put(primarySSRC,simulcastLayer);
      layers.add(simulcastLayer);
    }
  }
  for (  SourceGroupPacketExtension sourceGroup : sourceGroups) {
    List<SourcePacketExtension> sources=sourceGroup.getSources();
    if (sources == null || sources.size() == 0 || ""String_Node_Str"".equals(sourceGroup.getSemantics())) {
      continue;
    }
    SimulcastLayer simulcastLayer=null;
    Set<Long> ssrcs=new HashSet<Long>();
    for (    SourcePacketExtension source : sources) {
      Long ssrc=source.getSSRC();
      ssrcs.add(source.getSSRC());
      if (reverseMap.containsKey(ssrc)) {
        simulcastLayer=reverseMap.get(ssrc);
      }
    }
    if (simulcastLayer != null) {
      simulcastLayer.associateSSRCs(ssrcs);
    }
  }
synchronized (simulcastLayersSyncRoot) {
    simulcastLayers=layers;
  }
  if (logger.isInfoEnabled()) {
synchronized (simulcastLayersSyncRoot) {
      logger.info(""String_Node_Str"" + videoChannel.getEndpoint().getID() + ""String_Node_Str""+ MyJsonEncoder.toJson(simulcastLayers));
    }
  }
}",0.99796126401631
105063,"/** 
 * Handles control packet.
 * @param data raw packet data that arrived on control PPID.
 * @param sid SCTP stream id on which the data has arrived.
 */
private synchronized void onCtrlPacket(byte[] data,int sid) throws IOException {
  java.nio.ByteBuffer buffer=java.nio.ByteBuffer.wrap(data);
  int messageType=buffer.get();
  if (messageType == MSG_CHANNEL_ACK) {
    logger.info(getEndpoint().getID() + ""String_Node_Str"" + sid);
    WebRtcDataStream channel=channels.get(sid);
    if (channel != null) {
      if (!channel.isAcknowledged()) {
        channel.ackReceived();
        notifyChannelOpened(channel);
      }
 else {
        logger.warn(""String_Node_Str"" + sid);
      }
    }
 else {
      logger.error(""String_Node_Str"" + sid);
    }
  }
 else   if (messageType == MSG_OPEN_CHANNEL) {
    int channelType=buffer.get();
    int priority=buffer.getShort();
    long reliability=buffer.getInt();
    int labelLength=buffer.getShort();
    int protocolLength=buffer.getShort();
    byte[] labelRaw=new byte[labelLength];
    buffer.get(labelRaw);
    String label=new String(labelRaw);
    byte[] protocolRaw=new byte[protocolLength];
    buffer.get(protocolRaw);
    String protocol=new String(protocolRaw);
    logger.info(""String_Node_Str"" + getEndpoint().getID() + ""String_Node_Str""+ ""String_Node_Str""+ sid+ ""String_Node_Str""+ channelType+ ""String_Node_Str""+ priority+ ""String_Node_Str""+ reliability+ ""String_Node_Str""+ label+ ""String_Node_Str""+ protocol);
    if (channels.containsKey(sid)) {
      logger.error(""String_Node_Str"" + sid + ""String_Node_Str"");
    }
    WebRtcDataStream newChannel=new WebRtcDataStream(sctpSocket,sid,label,true);
    channels.put(sid,newChannel);
    sendOpenChannelAck(sid);
    notifyChannelOpened(newChannel);
  }
 else {
    logger.error(""String_Node_Str"" + messageType);
  }
}","/** 
 * Handles control packet.
 * @param data raw packet data that arrived on control PPID.
 * @param sid SCTP stream id on which the data has arrived.
 */
private synchronized void onCtrlPacket(byte[] data,int sid) throws IOException {
  ByteBuffer buffer=ByteBuffer.wrap(data);
  int messageType=0xFF & buffer.get();
  if (messageType == MSG_CHANNEL_ACK) {
    logger.info(getEndpoint().getID() + ""String_Node_Str"" + sid);
    WebRtcDataStream channel=channels.get(sid);
    if (channel != null) {
      if (!channel.isAcknowledged()) {
        channel.ackReceived();
        notifyChannelOpened(channel);
      }
 else {
        logger.warn(""String_Node_Str"" + sid);
      }
    }
 else {
      logger.error(""String_Node_Str"" + sid);
    }
  }
 else   if (messageType == MSG_OPEN_CHANNEL) {
    int channelType=0xFF & buffer.get();
    int priority=0xFFFF & buffer.getShort();
    long reliability=0xFFFFFFFFL & buffer.getInt();
    int labelLength=0xFFFF & buffer.getShort();
    int protocolLength=0xFFFF & buffer.getShort();
    String label;
    String protocol;
    if (labelLength == 0) {
      label=""String_Node_Str"";
    }
 else {
      byte[] labelBytes=new byte[labelLength];
      buffer.get(labelBytes);
      label=new String(labelBytes,""String_Node_Str"");
    }
    if (protocolLength == 0) {
      protocol=""String_Node_Str"";
    }
 else {
      byte[] protocolBytes=new byte[protocolLength];
      buffer.get(protocolBytes);
      protocol=new String(protocolBytes,""String_Node_Str"");
    }
    if (logger.isInfoEnabled()) {
      logger.info(""String_Node_Str"" + getEndpoint().getID() + ""String_Node_Str""+ sid+ ""String_Node_Str""+ channelType+ ""String_Node_Str""+ priority+ ""String_Node_Str""+ reliability+ ""String_Node_Str""+ label+ ""String_Node_Str""+ protocol);
    }
    if (channels.containsKey(sid)) {
      logger.error(""String_Node_Str"" + sid + ""String_Node_Str"");
    }
    WebRtcDataStream newChannel=new WebRtcDataStream(sctpSocket,sid,label,true);
    channels.put(sid,newChannel);
    sendOpenChannelAck(sid);
    notifyChannelOpened(newChannel);
  }
 else {
    logger.error(""String_Node_Str"" + messageType);
  }
}",0.7911535561698919
105064,"/** 
 * Opens new WebRTC data channel using specified parameters.
 * @param type channel type as defined in control protocol description.Use 0 for ""realiable"".
 * @param prio channel priority. The higher the number, the lowerthe priority.
 * @param reliab Reliability Parameter<br/>This field is ignored if a reliable channel is used. If a partial reliable channel with limited number of retransmissions is used, this field specifies the number of retransmissions.  If a partial reliable channel with limited lifetime is used, this field specifies the maximum lifetime in milliseconds.  The following table summarizes this:<br/></br> +------------------------------------------------+------------------+ | Channel Type                                   |   Reliability    | |                                                |    Parameter     | +------------------------------------------------+------------------+ | DATA_CHANNEL_RELIABLE                          |     Ignored      | | DATA_CHANNEL_RELIABLE_UNORDERED                |     Ignored      | | DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT           |  Number of RTX   | | DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED |  Number of RTX   | | DATA_CHANNEL_PARTIAL_RELIABLE_TIMED            |  Lifetime in ms  | | DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED  |  Lifetime in ms  | +------------------------------------------------+------------------+
 * @param sid SCTP stream id that will be used by new channel(it must not be already used).
 * @param label text label for the channel.
 * @return new instance of <tt>WebRtcDataStream</tt> that represents openedWebRTC data channel.
 * @throws IOException if IO error occurs.
 */
public synchronized WebRtcDataStream openChannel(int type,int prio,long reliab,int sid,String label) throws IOException {
  if (channels.containsKey(sid)) {
    throw new IOException(""String_Node_Str"" + sid + ""String_Node_Str"");
  }
  ByteBuffer packet=ByteBuffer.allocate(14 + label.length());
  packet.put((byte)MSG_OPEN_CHANNEL);
  packet.put((byte)type);
  packet.putShort((short)prio);
  packet.putInt((int)reliab);
  packet.putShort((short)label.length());
  packet.putShort((short)0);
  if (label.length() > 0) {
    packet.put(label.getBytes(""String_Node_Str""));
  }
  int sentCount=sctpSocket.send(packet.array(),true,sid,WEB_RTC_PPID_CTRL);
  if (sentCount != packet.capacity()) {
    throw new IOException(""String_Node_Str"" + sid);
  }
  WebRtcDataStream channel=new WebRtcDataStream(sctpSocket,sid,label,false);
  channels.put(sid,channel);
  return channel;
}","/** 
 * Opens new WebRTC data channel using specified parameters.
 * @param type channel type as defined in control protocol description.Use 0 for ""realiable"".
 * @param prio channel priority. The higher the number, the lowerthe priority.
 * @param reliab Reliability Parameter<br/>This field is ignored if a reliable channel is used. If a partial reliable channel with limited number of retransmissions is used, this field specifies the number of retransmissions.  If a partial reliable channel with limited lifetime is used, this field specifies the maximum lifetime in milliseconds.  The following table summarizes this:<br/></br> +------------------------------------------------+------------------+ | Channel Type                                   |   Reliability    | |                                                |    Parameter     | +------------------------------------------------+------------------+ | DATA_CHANNEL_RELIABLE                          |     Ignored      | | DATA_CHANNEL_RELIABLE_UNORDERED                |     Ignored      | | DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT           |  Number of RTX   | | DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED |  Number of RTX   | | DATA_CHANNEL_PARTIAL_RELIABLE_TIMED            |  Lifetime in ms  | | DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED  |  Lifetime in ms  | +------------------------------------------------+------------------+
 * @param sid SCTP stream id that will be used by new channel(it must not be already used).
 * @param label text label for the channel.
 * @return new instance of <tt>WebRtcDataStream</tt> that represents openedWebRTC data channel.
 * @throws IOException if IO error occurs.
 */
public synchronized WebRtcDataStream openChannel(int type,int prio,long reliab,int sid,String label) throws IOException {
  if (channels.containsKey(sid)) {
    throw new IOException(""String_Node_Str"" + sid + ""String_Node_Str"");
  }
  byte[] labelBytes;
  int labelByteLength;
  if (label == null) {
    labelBytes=null;
    labelByteLength=0;
  }
 else {
    labelBytes=label.getBytes(""String_Node_Str"");
    labelByteLength=labelBytes.length;
    if (labelByteLength > 0xFFFF)     labelByteLength=0xFFFF;
  }
  String protocol=WEBRTC_DATA_CHANNEL_PROTOCOL;
  byte[] protocolBytes;
  int protocolByteLength;
  if (protocol == null) {
    protocolBytes=null;
    protocolByteLength=0;
  }
 else {
    protocolBytes=protocol.getBytes(""String_Node_Str"");
    protocolByteLength=protocolBytes.length;
    if (protocolByteLength > 0xFFFF)     protocolByteLength=0xFFFF;
  }
  ByteBuffer packet=ByteBuffer.allocate(12 + labelByteLength + protocolByteLength);
  packet.put((byte)MSG_OPEN_CHANNEL);
  packet.put((byte)type);
  packet.putShort((short)prio);
  packet.putInt((int)reliab);
  packet.putShort((short)labelByteLength);
  packet.putShort((short)protocolByteLength);
  if (labelByteLength != 0) {
    packet.put(labelBytes,0,labelByteLength);
  }
  if (protocolByteLength != 0) {
    packet.put(protocolBytes,0,protocolByteLength);
  }
  int sentCount=sctpSocket.send(packet.array(),true,sid,WEB_RTC_PPID_CTRL);
  if (sentCount != packet.capacity()) {
    throw new IOException(""String_Node_Str"" + sid);
  }
  WebRtcDataStream channel=new WebRtcDataStream(sctpSocket,sid,label,false);
  channels.put(sid,channel);
  return channel;
}",0.8350076621828708
105065,"/** 
 * {@inheritDoc}SCTP input data callback.
 */
@Override public void onSctpPacket(byte[] data,int sid,int ssn,int tsn,long ppid,int context,int flags){
  if (ppid == WEB_RTC_PPID_CTRL) {
    try {
      onCtrlPacket(data,sid);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (ppid == WEB_RTC_PPID_STRING || ppid == WEB_RTC_PPID_BIN) {
    WebRtcDataStream channel;
synchronized (this) {
      channel=channels.get(sid);
    }
    if (channel == null) {
      logger.error(""String_Node_Str"" + sid);
      return;
    }
    if (ppid == WEB_RTC_PPID_STRING) {
      channel.onStringMsg(new String(data));
    }
 else {
      channel.onBinaryMsg(data);
    }
  }
 else {
    logger.warn(""String_Node_Str"" + ppid);
  }
}","/** 
 * {@inheritDoc}SCTP input data callback.
 */
@Override public void onSctpPacket(byte[] data,int sid,int ssn,int tsn,long ppid,int context,int flags){
  if (ppid == WEB_RTC_PPID_CTRL) {
    try {
      onCtrlPacket(data,sid);
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
  }
 else   if (ppid == WEB_RTC_PPID_STRING || ppid == WEB_RTC_PPID_BIN) {
    WebRtcDataStream channel;
synchronized (this) {
      channel=channels.get(sid);
    }
    if (channel == null) {
      logger.error(""String_Node_Str"" + sid);
      return;
    }
    if (ppid == WEB_RTC_PPID_STRING) {
      String str;
      String charsetName=""String_Node_Str"";
      try {
        str=new String(data,charsetName);
      }
 catch (      UnsupportedEncodingException uee) {
        logger.error(""String_Node_Str"" + charsetName,uee);
        str=null;
      }
      channel.onStringMsg(str);
    }
 else {
      channel.onBinaryMsg(data);
    }
  }
 else {
    logger.warn(""String_Node_Str"" + ppid);
  }
}",0.8361391694725028
105066,"/** 
 * Sends given text message over this WebRTC data channel using UTF8 encoding.
 * @param strMsg the text to be sent.
 * @throws IOException if IO error occurs while sending the message.
 */
public void sendString(String strMsg) throws IOException {
  try {
    byte[] raw=strMsg.getBytes(""String_Node_Str"");
    int res=socket.send(raw,true,sid,SctpConnection.WEB_RTC_PPID_STRING);
    if (res != raw.length) {
      throw new IOException(""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new IOException(e);
  }
}","/** 
 * Sends given text message over this WebRTC data channel using UTF8 encoding.
 * @param strMsg the text to be sent.
 * @throws IOException if IO error occurs while sending the message.
 */
public void sendString(String strMsg) throws IOException {
  try {
    byte[] bytes=strMsg.getBytes(""String_Node_Str"");
    int res=socket.send(bytes,true,sid,SctpConnection.WEB_RTC_PPID_STRING);
    if (res != bytes.length) {
      throw new IOException(""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new IOException(e);
  }
}",0.9784172661870504
105067,"/** 
 * Initializes a new <tt>Channel</tt> instance which is to have a specific ID. The initialization is to be considered requested by a specific <tt>Content</tt>.
 * @param content the <tt>Content</tt> which is initializing the newinstance
 * @param id the ID of the new instance. It is expected to be unique withinthe list of <tt>Channel</tt>s listed in <tt>content</tt> while the new instance is listed there as well.
 * @throws Exception if an error occurs while initializing the new instance
 */
public RtpChannel(Content content,String id) throws Exception {
  super(content);
  if (id == null)   throw new NullPointerException(""String_Node_Str"");
  this.id=id;
  MediaService mediaService=getMediaService();
  MediaType mediaType=getContent().getMediaType();
  stream=mediaService.createMediaStream(null,mediaType,mediaService.createSrtpControl(SrtpControlType.DTLS_SRTP));
  stream.addPropertyChangeListener(streamPropertyChangeListener);
  stream.setName(this.id);
  stream.setProperty(RtpChannel.class.getName(),this);
  if (RTPLevelRelayType.MIXER.equals(getRTPLevelRelayType())) {
    initialLocalSSRC=new Random().nextInt();
    stream.setSSRCFactory(new SSRCFactoryImpl(initialLocalSSRC));
  }
  conferenceSpeechActivity=getContent().getConference().getSpeechActivity();
  if (conferenceSpeechActivity != null) {
    conferenceSpeechActivity.addPropertyChangeListener(new WeakReferencePropertyChangeListener(this));
  }
  touch();
}","/** 
 * Initializes a new <tt>Channel</tt> instance which is to have a specific ID. The initialization is to be considered requested by a specific <tt>Content</tt>.
 * @param content the <tt>Content</tt> which is initializing the newinstance
 * @param id the ID of the new instance. It is expected to be unique withinthe list of <tt>Channel</tt>s listed in <tt>content</tt> while the new instance is listed there as well.
 * @throws Exception if an error occurs while initializing the new instance
 */
public RtpChannel(Content content,String id) throws Exception {
  super(content);
  if (id == null)   throw new NullPointerException(""String_Node_Str"");
  this.id=id;
  MediaService mediaService=getMediaService();
  MediaType mediaType=getContent().getMediaType();
  stream=mediaService.createMediaStream(null,mediaType,mediaService.createSrtpControl(SrtpControlType.DTLS_SRTP));
  stream.addPropertyChangeListener(streamPropertyChangeListener);
  stream.setName(this.id);
  stream.setProperty(RtpChannel.class.getName(),this);
  initialLocalSSRC=new Random().nextInt();
  conferenceSpeechActivity=getContent().getConference().getSpeechActivity();
  if (conferenceSpeechActivity != null) {
    conferenceSpeechActivity.addPropertyChangeListener(new WeakReferencePropertyChangeListener(this));
  }
  touch();
}",0.9282088469905728
105068,"/** 
 * Starts   {@link #stream} if it has not been started yet and if the state ofthis <tt>Channel</tt> meets the prerequisites to invoke {@link MediaStream#start()}. For example, <tt>MediaStream</tt> may be started only after a <tt>StreamConnector</tt> has been set on it and this <tt>Channel</tt> may be able to provide a <tt>StreamConnector</tt> only after   {@link #wrapupConnectivityEstablishment(TransportManager)} hascompleted on  {@link #transportManager}.
 * @throws IOException if anything goes wrong while starting <tt>stream</tt>
 */
@Override protected void maybeStartStream() throws IOException {
  StreamConnector connector=createStreamConnector();
  if (connector == null)   return;
 else   stream.setConnector(connector);
  MediaStreamTarget streamTarget=createStreamTarget();
  if (streamTarget != null) {
    InetSocketAddress dataAddr=streamTarget.getDataAddress();
    if (dataAddr != null) {
      this.streamTarget.setDataHostAddress(dataAddr.getAddress());
      this.streamTarget.setDataPort(dataAddr.getPort());
    }
    InetSocketAddress ctrlAddr=streamTarget.getControlAddress();
    if (ctrlAddr != null) {
      this.streamTarget.setControlHostAddress(ctrlAddr.getAddress());
      this.streamTarget.setControlPort(ctrlAddr.getPort());
    }
    if (dataAddr != null)     stream.setTarget(streamTarget);
  }
  Content content=getContent();
  if (!stream.isStarted()) {
    SrtpControl srtpControl=stream.getSrtpControl();
    if (srtpControl != null) {
      if (srtpControl instanceof DtlsControl) {
        DtlsControl dtlsControl=(DtlsControl)srtpControl;
        dtlsControl.setSetup(isInitiator() ? DtlsControl.Setup.PASSIVE : DtlsControl.Setup.ACTIVE);
      }
      srtpControl.start(content.getMediaType());
    }
    stream.start();
  }
  logd(""String_Node_Str"" + getID() + ""String_Node_Str""+ content.getName()+ ""String_Node_Str""+ content.getConference().getID()+ ""String_Node_Str""+ stream.getDirection()+ ""String_Node_Str"");
  touch();
}","/** 
 * Starts   {@link #stream} if it has not been started yet and if the state ofthis <tt>Channel</tt> meets the prerequisites to invoke {@link MediaStream#start()}. For example, <tt>MediaStream</tt> may be started only after a <tt>StreamConnector</tt> has been set on it and this <tt>Channel</tt> may be able to provide a <tt>StreamConnector</tt> only after   {@link #wrapupConnectivityEstablishment(TransportManager)} hascompleted on  {@link #transportManager}.
 * @throws IOException if anything goes wrong while starting <tt>stream</tt>
 */
@Override protected void maybeStartStream() throws IOException {
  StreamConnector connector=createStreamConnector();
  if (connector == null)   return;
 else   stream.setConnector(connector);
  MediaStreamTarget streamTarget=createStreamTarget();
  if (streamTarget != null) {
    InetSocketAddress dataAddr=streamTarget.getDataAddress();
    if (dataAddr != null) {
      this.streamTarget.setDataHostAddress(dataAddr.getAddress());
      this.streamTarget.setDataPort(dataAddr.getPort());
    }
    InetSocketAddress ctrlAddr=streamTarget.getControlAddress();
    if (ctrlAddr != null) {
      this.streamTarget.setControlHostAddress(ctrlAddr.getAddress());
      this.streamTarget.setControlPort(ctrlAddr.getPort());
    }
    if (dataAddr != null)     stream.setTarget(streamTarget);
  }
  Content content=getContent();
  if (!stream.isStarted()) {
    if (RTPLevelRelayType.MIXER.equals(getRTPLevelRelayType()))     stream.setSSRCFactory(new SSRCFactoryImpl(initialLocalSSRC));
    SrtpControl srtpControl=stream.getSrtpControl();
    if (srtpControl != null) {
      if (srtpControl instanceof DtlsControl) {
        DtlsControl dtlsControl=(DtlsControl)srtpControl;
        dtlsControl.setSetup(isInitiator() ? DtlsControl.Setup.PASSIVE : DtlsControl.Setup.ACTIVE);
      }
      srtpControl.start(content.getMediaType());
    }
    stream.start();
  }
  logd(""String_Node_Str"" + getID() + ""String_Node_Str""+ content.getName()+ ""String_Node_Str""+ content.getConference().getID()+ ""String_Node_Str""+ stream.getDirection()+ ""String_Node_Str"");
  touch();
}",0.9681996086105676
105069,"/** 
 * Sets the values of the properties of a specific <tt>ColibriConferenceIQ.ChannelCommon</tt> to the values of the respective properties of this instance. Thus, the specified <tt>iq</tt> may be thought of as a description of this instance.
 * @param commonIq the <tt>ColibriConferenceIQ.ChannelCommon</tt> on whichto set the values of the properties of this instance.
 */
public void describe(ColibriConferenceIQ.ChannelCommon commonIq){
  super.describe(commonIq);
  ColibriConferenceIQ.Channel iq=(ColibriConferenceIQ.Channel)commonIq;
  iq.setRTPLevelRelayType(getRTPLevelRelayType());
  iq.setDirection(stream.getDirection());
  iq.setID(getID());
  iq.setLastN(lastN);
  long initialLocalSSRC=getInitialLocalSSRC();
  if (initialLocalSSRC != -1 && announceLocalSSRC()) {
    SourcePacketExtension source=new SourcePacketExtension();
    source.setSSRC(initialLocalSSRC);
    iq.addSource(source);
  }
  iq.setSSRCs(getReceiveSSRCs());
}","/** 
 * Sets the values of the properties of a specific <tt>ColibriConferenceIQ.ChannelCommon</tt> to the values of the respective properties of this instance. Thus, the specified <tt>iq</tt> may be thought of as a description of this instance.
 * @param commonIq the <tt>ColibriConferenceIQ.ChannelCommon</tt> on whichto set the values of the properties of this instance.
 */
@Override public void describe(ColibriConferenceIQ.ChannelCommon commonIq){
  ColibriConferenceIQ.Channel iq=(ColibriConferenceIQ.Channel)commonIq;
  iq.setRTPLevelRelayType(getRTPLevelRelayType());
  super.describe(commonIq);
  iq.setDirection(stream.getDirection());
  iq.setID(getID());
  iq.setLastN(lastN);
  long initialLocalSSRC=getInitialLocalSSRC();
  if (initialLocalSSRC != -1 && announceLocalSSRC()) {
    SourcePacketExtension source=new SourcePacketExtension();
    source.setSSRC(initialLocalSSRC);
    iq.addSource(source);
  }
  iq.setSSRCs(getReceiveSSRCs());
}",0.9652996845425869
105070,"/** 
 * Initializes OSGi and the videobridge.
 */
@BeforeClass public static void setUp() throws InterruptedException {
  StackProperties.initialize();
  OSGi.start(new BundleActivator(){
    @Override public void start(    BundleContext bundleContext) throws Exception {
      FocusControlTest.bc=bundleContext;
synchronized (FocusControlTest.class) {
        FocusControlTest.class.notify();
      }
    }
    @Override public void stop(    BundleContext bundleContext) throws Exception {
    }
  }
);
synchronized (FocusControlTest.class) {
    FocusControlTest.class.wait(5000);
    if (bc == null)     throw new RuntimeException(""String_Node_Str"");
  }
  bridge=ServiceUtils.getService(bc,Videobridge.class);
}","/** 
 * Initializes OSGi and the videobridge.
 */
@BeforeClass public static void setUp() throws InterruptedException {
  OSGi.start(new BundleActivator(){
    @Override public void start(    BundleContext bundleContext) throws Exception {
      FocusControlTest.bc=bundleContext;
synchronized (FocusControlTest.class) {
        FocusControlTest.class.notify();
      }
    }
    @Override public void stop(    BundleContext bundleContext) throws Exception {
    }
  }
);
synchronized (FocusControlTest.class) {
    FocusControlTest.class.wait(5000);
    if (bc == null)     throw new RuntimeException(""String_Node_Str"");
  }
  bridge=ServiceUtils.getService(bc,Videobridge.class);
}",0.977110157367668
105071,"public Channel(Content content,String id) throws Exception {
  if (content == null)   throw new NullPointerException(""String_Node_Str"");
  if (id == null)   throw new NullPointerException(""String_Node_Str"");
  this.content=content;
  this.id=id;
  streamConnector=createStreamConnector();
  stream=getMediaService().createMediaStream(this.content.getMediaType());
  stream.setConnector(streamConnector);
  stream.setName(this.id);
  stream.setRTPTranslator(this.content.getRTPTranslator());
  stream.addPropertyChangeListener(streamPropertyChangeListener);
  stream.start();
  touch();
}","public Channel(Content content,String id) throws Exception {
  if (content == null)   throw new NullPointerException(""String_Node_Str"");
  if (id == null)   throw new NullPointerException(""String_Node_Str"");
  this.content=content;
  this.id=id;
  streamConnector=createStreamConnector();
  stream=getMediaService().createMediaStream(this.content.getMediaType());
  stream.addPropertyChangeListener(streamPropertyChangeListener);
  stream.setConnector(streamConnector);
  stream.setName(this.id);
  stream.setRTPTranslator(this.content.getRTPTranslator());
  stream.start();
  touch();
}",0.8875638841567292
105072,"/** 
 * Notifies this <tt>Channel</tt> that the value of a property of  {@link #stream} has changed from a specific old value to a specific newvalue.
 * @param ev a <tt>PropertyChangeEvent</tt> which specifies the name of theproperty which had its value changed and the old and new values of that property
 */
private void streamPropertyChange(PropertyChangeEvent ev){
  String propertyName=ev.getPropertyName();
  String prefix=MediaStreamImpl.class.getName() + ""String_Node_Str"";
  if (propertyName.startsWith(prefix)) {
    Object newValue=ev.getNewValue();
    if (newValue instanceof RTPConnectorInputStream) {
      String rtpConnectorPropertyName=propertyName.substring(0,prefix.length());
      DatagramPacketFilter datagramPacketFilter;
      if (rtpConnectorPropertyName.equals(""String_Node_Str"")) {
        datagramPacketFilter=new DatagramPacketFilter(){
          public boolean accept(          DatagramPacket p){
            return acceptControlInputStreamDatagramPacket(p);
          }
        }
;
      }
 else       if (rtpConnectorPropertyName.equals(""String_Node_Str"")) {
        datagramPacketFilter=new DatagramPacketFilter(){
          public boolean accept(          DatagramPacket p){
            return acceptDataInputStreamDatagramPacket(p);
          }
        }
;
      }
 else       datagramPacketFilter=null;
      if (datagramPacketFilter != null) {
        ((RTPConnectorInputStream)newValue).addDatagramPacketFilter(datagramPacketFilter);
      }
    }
  }
}","/** 
 * Notifies this <tt>Channel</tt> that the value of a property of  {@link #stream} has changed from a specific old value to a specific newvalue.
 * @param ev a <tt>PropertyChangeEvent</tt> which specifies the name of theproperty which had its value changed and the old and new values of that property
 */
private void streamPropertyChange(PropertyChangeEvent ev){
  String propertyName=ev.getPropertyName();
  String prefix=MediaStreamImpl.class.getName() + ""String_Node_Str"";
  if (propertyName.startsWith(prefix)) {
    Object newValue=ev.getNewValue();
    if (newValue instanceof RTPConnectorInputStream) {
      String rtpConnectorPropertyName=propertyName.substring(prefix.length());
      DatagramPacketFilter datagramPacketFilter;
      if (rtpConnectorPropertyName.equals(""String_Node_Str"")) {
        datagramPacketFilter=new DatagramPacketFilter(){
          public boolean accept(          DatagramPacket p){
            return acceptControlInputStreamDatagramPacket(p);
          }
        }
;
      }
 else       if (rtpConnectorPropertyName.equals(""String_Node_Str"")) {
        datagramPacketFilter=new DatagramPacketFilter(){
          public boolean accept(          DatagramPacket p){
            return acceptDataInputStreamDatagramPacket(p);
          }
        }
;
      }
 else       datagramPacketFilter=null;
      if (datagramPacketFilter != null) {
        ((RTPConnectorInputStream)newValue).addDatagramPacketFilter(datagramPacketFilter);
      }
    }
  }
}",0.999329309188464
105073,"@Override public NetworkACLItem moveNetworkAclRuleToNewPosition(MoveNetworkAclItemCmd moveNetworkAclItemCmd){
  String uuidRuleBeingMoved=moveNetworkAclItemCmd.getUuidRuleBeingMoved();
  String nextAclRuleUuid=moveNetworkAclItemCmd.getNextAclRuleUuid();
  String previousAclRuleUuid=moveNetworkAclItemCmd.getPreviousAclRuleUuid();
  if (StringUtils.isBlank(previousAclRuleUuid) && StringUtils.isBlank(nextAclRuleUuid)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkACLItemVO ruleBeingMoved=_networkACLItemDao.findByUuid(uuidRuleBeingMoved);
  if (ruleBeingMoved == null) {
    throw new InvalidParameterValueException(String.format(""String_Node_Str"",uuidRuleBeingMoved));
  }
  NetworkACLItemVO previousRule=retrieveAndValidateAclRule(previousAclRuleUuid);
  NetworkACLItemVO nextRule=retrieveAndValidateAclRule(nextAclRuleUuid);
  validateMoveAclRulesData(ruleBeingMoved,previousRule,nextRule);
  List<NetworkACLItemVO> allAclRules=getAllAclRulesSortedByNumber(ruleBeingMoved.getAclId());
  if (previousRule == null) {
    return moveRuleToTheTop(ruleBeingMoved,allAclRules);
  }
  if (nextRule == null) {
    return moveRuleToTheBottom(ruleBeingMoved,allAclRules);
  }
  return moveRuleBetweenAclRules(ruleBeingMoved,allAclRules,previousRule,nextRule);
}","@Override public NetworkACLItem moveNetworkAclRuleToNewPosition(MoveNetworkAclItemCmd moveNetworkAclItemCmd){
  String uuidRuleBeingMoved=moveNetworkAclItemCmd.getUuidRuleBeingMoved();
  String nextAclRuleUuid=moveNetworkAclItemCmd.getNextAclRuleUuid();
  String previousAclRuleUuid=moveNetworkAclItemCmd.getPreviousAclRuleUuid();
  if (StringUtils.isBlank(previousAclRuleUuid) && StringUtils.isBlank(nextAclRuleUuid)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkACLItemVO ruleBeingMoved=_networkACLItemDao.findByUuid(uuidRuleBeingMoved);
  if (ruleBeingMoved == null) {
    throw new InvalidParameterValueException(String.format(""String_Node_Str"",uuidRuleBeingMoved));
  }
  NetworkACLItemVO previousRule=retrieveAndValidateAclRule(previousAclRuleUuid);
  NetworkACLItemVO nextRule=retrieveAndValidateAclRule(nextAclRuleUuid);
  validateMoveAclRulesData(ruleBeingMoved,previousRule,nextRule);
  try {
    NetworkACLVO lockedAcl=_networkACLDao.acquireInLockTable(ruleBeingMoved.getAclId());
    List<NetworkACLItemVO> allAclRules=getAllAclRulesSortedByNumber(lockedAcl.getId());
    validateAclConsistency(moveNetworkAclItemCmd,lockedAcl,allAclRules);
    if (previousRule == null) {
      return moveRuleToTheTop(ruleBeingMoved,allAclRules);
    }
    if (nextRule == null) {
      return moveRuleToTheBottom(ruleBeingMoved,allAclRules);
    }
    return moveRuleBetweenAclRules(ruleBeingMoved,allAclRules,previousRule,nextRule);
  }
  finally {
    _networkACLDao.releaseFromLockTable(ruleBeingMoved.getAclId());
  }
}",0.8945888966971187
105074,"@Test public void moveNetworkAclRuleToNewPositionTestMoveRuleToBottom(){
  configureNextAndPreviousAclRuleUuidsForMoveAclRuleCommand(nextAclRuleUuid,previousAclRuleUuid);
  Mockito.doNothing().when(networkAclServiceImpl).validateMoveAclRulesData(aclRuleBeingMovedMock,previousAclRuleMock,null);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclItemDaoMock).findByUuid(uuidAclRuleBeingMoved);
  Mockito.doReturn(previousAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(previousAclRuleUuid);
  Mockito.doReturn(null).when(networkAclServiceImpl).retrieveAndValidateAclRule(nextAclRuleUuid);
  configureMoveMethodsToDoNothing();
  networkAclServiceImpl.moveNetworkAclRuleToNewPosition(moveNetworkAclItemCmdMock);
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
}","@Test public void moveNetworkAclRuleToNewPositionTestMoveRuleToBottom(){
  configureNextAndPreviousAclRuleUuidsForMoveAclRuleCommand(nextAclRuleUuid,previousAclRuleUuid);
  Mockito.doNothing().when(networkAclServiceImpl).validateMoveAclRulesData(aclRuleBeingMovedMock,previousAclRuleMock,null);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclItemDaoMock).findByUuid(uuidAclRuleBeingMoved);
  Mockito.doReturn(previousAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(previousAclRuleUuid);
  Mockito.doReturn(null).when(networkAclServiceImpl).retrieveAndValidateAclRule(nextAclRuleUuid);
  configureMoveMethodsToDoNothing();
  networkAclServiceImpl.moveNetworkAclRuleToNewPosition(moveNetworkAclItemCmdMock);
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).validateAclConsistency(Mockito.any(MoveNetworkAclItemCmd.class),Mockito.any(NetworkACLVO.class),Mockito.anyListOf(NetworkACLItemVO.class));
}",0.927653323540213
105075,"@Test public void moveNetworkAclRuleToNewPositionTestMoveRuleToTop(){
  configureNextAndPreviousAclRuleUuidsForMoveAclRuleCommand(nextAclRuleUuid,previousAclRuleUuid);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclItemDaoMock).findByUuid(uuidAclRuleBeingMoved);
  Mockito.doReturn(null).when(networkAclServiceImpl).retrieveAndValidateAclRule(previousAclRuleUuid);
  Mockito.doReturn(nextAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(nextAclRuleUuid);
  Mockito.doNothing().when(networkAclServiceImpl).validateMoveAclRulesData(aclRuleBeingMovedMock,null,nextAclRuleMock);
  configureMoveMethodsToDoNothing();
  networkAclServiceImpl.moveNetworkAclRuleToNewPosition(moveNetworkAclItemCmdMock);
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
}","@Test public void moveNetworkAclRuleToNewPositionTestMoveRuleToTop(){
  configureNextAndPreviousAclRuleUuidsForMoveAclRuleCommand(nextAclRuleUuid,previousAclRuleUuid);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclItemDaoMock).findByUuid(uuidAclRuleBeingMoved);
  Mockito.doReturn(null).when(networkAclServiceImpl).retrieveAndValidateAclRule(previousAclRuleUuid);
  Mockito.doReturn(nextAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(nextAclRuleUuid);
  Mockito.doNothing().when(networkAclServiceImpl).validateMoveAclRulesData(aclRuleBeingMovedMock,null,nextAclRuleMock);
  configureMoveMethodsToDoNothing();
  networkAclServiceImpl.moveNetworkAclRuleToNewPosition(moveNetworkAclItemCmdMock);
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).validateAclConsistency(Mockito.any(MoveNetworkAclItemCmd.class),Mockito.any(NetworkACLVO.class),Mockito.anyListOf(NetworkACLItemVO.class));
}",0.9270640503517216
105076,"private void configureMoveMethodsToDoNothing(){
  Mockito.doReturn(new ArrayList<>()).when(networkAclServiceImpl).getAllAclRulesSortedByNumber(networkAclMockId);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclServiceImpl).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclServiceImpl).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclServiceImpl).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
}","private void configureMoveMethodsToDoNothing(){
  Mockito.doReturn(networkACLVOMock).when(networkAclDaoMock).acquireInLockTable(Mockito.anyLong());
  Mockito.doReturn(true).when(networkAclDaoMock).releaseFromLockTable(Mockito.anyLong());
  Mockito.doNothing().when(networkAclServiceImpl).validateAclConsistency(Mockito.any(MoveNetworkAclItemCmd.class),Mockito.any(NetworkACLVO.class),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.doReturn(new ArrayList<>()).when(networkAclServiceImpl).getAllAclRulesSortedByNumber(networkAclMockId);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclServiceImpl).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclServiceImpl).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclServiceImpl).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
}",0.7930283224400871
105077,"@Before public void befoteTest(){
  PowerMockito.mockStatic(CallContext.class);
  PowerMockito.when(CallContext.current()).thenReturn(Mockito.mock(CallContext.class));
  Mockito.when(networkAclDaoMock.findById(networkAclListId)).thenReturn(networkACLVOMock);
  Mockito.when(createNetworkAclCmdMock.getNetworkId()).thenReturn(1L);
  Mockito.when(createNetworkAclCmdMock.getProtocol()).thenReturn(""String_Node_Str"");
  Mockito.when(networkMock.getNetworkOfferingId()).thenReturn(networkOfferingMockId);
  Mockito.when(networkMock.getVpcId()).thenReturn(networkMockVpcMockId);
  Mockito.when(moveNetworkAclItemCmdMock.getUuidRuleBeingMoved()).thenReturn(uuidAclRuleBeingMoved);
  Mockito.when(aclRuleBeingMovedMock.getUuid()).thenReturn(uuidAclRuleBeingMoved);
  Mockito.when(aclRuleBeingMovedMock.getAclId()).thenReturn(networkAclMockId);
  Mockito.when(previousAclRuleMock.getUuid()).thenReturn(previousAclRuleUuid);
  Mockito.when(nextAclRuleMock.getUuid()).thenReturn(nextAclRuleUuid);
  Mockito.when(networkAclMock.getVpcId()).thenReturn(networkMockVpcMockId);
}","@Before public void befoteTest(){
  PowerMockito.mockStatic(CallContext.class);
  PowerMockito.when(CallContext.current()).thenReturn(callContextMock);
  Mockito.doReturn(Mockito.mock(User.class)).when(callContextMock).getCallingUser();
  Mockito.doReturn(Mockito.mock(Account.class)).when(callContextMock).getCallingAccount();
  Mockito.when(networkAclDaoMock.findById(networkAclListId)).thenReturn(networkACLVOMock);
  Mockito.when(createNetworkAclCmdMock.getNetworkId()).thenReturn(1L);
  Mockito.when(createNetworkAclCmdMock.getProtocol()).thenReturn(""String_Node_Str"");
  Mockito.when(networkMock.getNetworkOfferingId()).thenReturn(networkOfferingMockId);
  Mockito.when(networkMock.getVpcId()).thenReturn(networkMockVpcMockId);
  Mockito.when(moveNetworkAclItemCmdMock.getUuidRuleBeingMoved()).thenReturn(uuidAclRuleBeingMoved);
  Mockito.when(aclRuleBeingMovedMock.getUuid()).thenReturn(uuidAclRuleBeingMoved);
  Mockito.when(aclRuleBeingMovedMock.getAclId()).thenReturn(networkAclMockId);
  Mockito.when(previousAclRuleMock.getUuid()).thenReturn(previousAclRuleUuid);
  Mockito.when(nextAclRuleMock.getUuid()).thenReturn(nextAclRuleUuid);
  Mockito.when(networkAclMock.getVpcId()).thenReturn(networkMockVpcMockId);
}",0.9204545454545454
105078,"@Test public void moveNetworkAclRuleToNewPositionTestMoveBetweenAclRules(){
  configureNextAndPreviousAclRuleUuidsForMoveAclRuleCommand(nextAclRuleUuid,previousAclRuleUuid);
  Mockito.doNothing().when(networkAclServiceImpl).validateMoveAclRulesData(aclRuleBeingMovedMock,previousAclRuleMock,nextAclRuleMock);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclItemDaoMock).findByUuid(uuidAclRuleBeingMoved);
  Mockito.doReturn(previousAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(previousAclRuleUuid);
  Mockito.doReturn(nextAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(nextAclRuleUuid);
  configureMoveMethodsToDoNothing();
  networkAclServiceImpl.moveNetworkAclRuleToNewPosition(moveNetworkAclItemCmdMock);
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
}","@Test public void moveNetworkAclRuleToNewPositionTestMoveBetweenAclRules(){
  configureNextAndPreviousAclRuleUuidsForMoveAclRuleCommand(nextAclRuleUuid,previousAclRuleUuid);
  Mockito.doNothing().when(networkAclServiceImpl).validateMoveAclRulesData(aclRuleBeingMovedMock,previousAclRuleMock,nextAclRuleMock);
  Mockito.doReturn(aclRuleBeingMovedMock).when(networkAclItemDaoMock).findByUuid(uuidAclRuleBeingMoved);
  Mockito.doReturn(previousAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(previousAclRuleUuid);
  Mockito.doReturn(nextAclRuleMock).when(networkAclServiceImpl).retrieveAndValidateAclRule(nextAclRuleUuid);
  configureMoveMethodsToDoNothing();
  networkAclServiceImpl.moveNetworkAclRuleToNewPosition(moveNetworkAclItemCmdMock);
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheTop(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(0)).moveRuleToTheBottom(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).moveRuleBetweenAclRules(Mockito.eq(aclRuleBeingMovedMock),Mockito.anyListOf(NetworkACLItemVO.class),Mockito.eq(previousAclRuleMock),Mockito.eq(nextAclRuleMock));
  Mockito.verify(networkAclServiceImpl,Mockito.times(1)).validateAclConsistency(Mockito.any(MoveNetworkAclItemCmd.class),Mockito.any(NetworkACLVO.class),Mockito.anyListOf(NetworkACLItemVO.class));
}",0.9289578074287776
105079,"@Override public boolean savePassword(final Network network,final NicProfile nic,final VirtualMachineProfile vm) throws ResourceUnavailableException {
  if (vm != null && vm.getVirtualMachine().getState().equals(VirtualMachine.State.Running)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return canHandle(network.getTrafficType());
}","@Override public boolean savePassword(final Network network,final NicProfile nic,final VirtualMachineProfile vm) throws ResourceUnavailableException {
  if (vm != null && vm.getVirtualMachine().getState().equals(VirtualMachine.State.Running)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  final boolean canHandle=canHandle(network.getTrafficType());
  if (canHandle) {
    storePasswordInVmDetails(vm);
  }
  return canHandle;
}",0.8646616541353384
105080,"@Override public boolean saveSSHKey(final Network network,final NicProfile nic,final VirtualMachineProfile vm,final String sshPublicKey) throws ResourceUnavailableException {
  if (vm != null && vm.getVirtualMachine().getState().equals(VirtualMachine.State.Running)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return canHandle(network.getTrafficType());
}","@Override public boolean saveSSHKey(final Network network,final NicProfile nic,final VirtualMachineProfile vm,final String sshPublicKey) throws ResourceUnavailableException {
  if (vm != null && vm.getVirtualMachine().getState().equals(VirtualMachine.State.Running)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  final boolean canHandle=canHandle(network.getTrafficType());
  if (canHandle) {
    storePasswordInVmDetails(vm);
  }
  return canHandle;
}",0.8723404255319149
105081,"public List<DatadiskTO> getOVFVolumeInfo(final String ovfFilePath){
  if (StringUtils.isBlank(ovfFilePath)) {
    return new ArrayList<DatadiskTO>();
  }
  ArrayList<OVFFile> vf=new ArrayList<OVFFile>();
  ArrayList<OVFDisk> vd=new ArrayList<OVFDisk>();
  File ovfFile=new File(ovfFilePath);
  try {
    final Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(ovfFilePath));
    NodeList disks=doc.getElementsByTagName(""String_Node_Str"");
    NodeList files=doc.getElementsByTagName(""String_Node_Str"");
    NodeList items=doc.getElementsByTagName(""String_Node_Str"");
    boolean toggle=true;
    for (int j=0; j < files.getLength(); j++) {
      Element file=(Element)files.item(j);
      OVFFile of=new OVFFile();
      of._href=file.getAttribute(""String_Node_Str"");
      if (of._href.endsWith(""String_Node_Str"") || of._href.endsWith(""String_Node_Str"")) {
        of._id=file.getAttribute(""String_Node_Str"");
        String size=file.getAttribute(""String_Node_Str"");
        if (StringUtils.isNotBlank(size)) {
          of._size=Long.parseLong(size);
        }
 else {
          String dataDiskPath=ovfFile.getParent() + File.separator + of._href;
          File this_file=new File(dataDiskPath);
          of._size=this_file.length();
        }
        of.isIso=of._href.endsWith(""String_Node_Str"");
        if (toggle && !of.isIso) {
          of._bootable=true;
          toggle=!toggle;
        }
        vf.add(of);
      }
    }
    for (int i=0; i < disks.getLength(); i++) {
      Element disk=(Element)disks.item(i);
      OVFDisk od=new OVFDisk();
      String virtualSize=disk.getAttribute(""String_Node_Str"");
      od._capacity=NumberUtils.toLong(virtualSize,0L);
      String allocationUnits=disk.getAttribute(""String_Node_Str"");
      od._diskId=disk.getAttribute(""String_Node_Str"");
      od._fileRef=disk.getAttribute(""String_Node_Str"");
      od._populatedSize=Long.parseLong(disk.getAttribute(""String_Node_Str"") == null ? ""String_Node_Str"" : disk.getAttribute(""String_Node_Str""));
      if ((od._capacity != 0) && (allocationUnits != null)) {
        long units=1;
        if (allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"")) {
          units=ResourceType.bytesToKiB;
        }
 else         if (allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"")) {
          units=ResourceType.bytesToMiB;
        }
 else         if (allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"")) {
          units=ResourceType.bytesToGiB;
        }
        od._capacity=od._capacity * units;
      }
      od._controller=getControllerType(items,od._diskId);
      vd.add(od);
    }
  }
 catch (  SAXException|IOException|ParserConfigurationException e) {
    s_logger.error(""String_Node_Str"" + ovfFilePath,e);
    throw new CloudRuntimeException(e);
  }
  List<DatadiskTO> disksTO=new ArrayList<DatadiskTO>();
  for (  OVFFile of : vf) {
    if (StringUtils.isBlank(of._id)) {
      s_logger.error(""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    OVFDisk cdisk=getDisk(of._id,vd);
    if (cdisk == null && !of.isIso) {
      s_logger.error(""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    Long capacity=cdisk == null ? of._size : cdisk._capacity;
    String controller=cdisk == null ? ""String_Node_Str"" : cdisk._controller._name;
    String controllerSubType=cdisk == null ? ""String_Node_Str"" : cdisk._controller._subType;
    String dataDiskPath=ovfFile.getParent() + File.separator + of._href;
    File f=new File(dataDiskPath);
    if (!f.exists() || f.isDirectory()) {
      s_logger.error(""String_Node_Str"" + dataDiskPath);
      throw new CloudRuntimeException(""String_Node_Str"" + dataDiskPath);
    }
    disksTO.add(new DatadiskTO(dataDiskPath,capacity,of._size,of._id,of.isIso,of._bootable,controller,controllerSubType));
  }
  DatadiskTO fd=disksTO.get(0);
  if (fd.isIso()) {
    disksTO.remove(0);
    disksTO.add(fd);
  }
  return disksTO;
}","public List<DatadiskTO> getOVFVolumeInfo(final String ovfFilePath){
  if (StringUtils.isBlank(ovfFilePath)) {
    return new ArrayList<DatadiskTO>();
  }
  ArrayList<OVFFile> vf=new ArrayList<OVFFile>();
  ArrayList<OVFDisk> vd=new ArrayList<OVFDisk>();
  File ovfFile=new File(ovfFilePath);
  try {
    final Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(ovfFilePath));
    NodeList disks=doc.getElementsByTagName(""String_Node_Str"");
    NodeList files=doc.getElementsByTagName(""String_Node_Str"");
    NodeList items=doc.getElementsByTagName(""String_Node_Str"");
    boolean toggle=true;
    for (int j=0; j < files.getLength(); j++) {
      Element file=(Element)files.item(j);
      OVFFile of=new OVFFile();
      of._href=file.getAttribute(""String_Node_Str"");
      if (of._href.endsWith(""String_Node_Str"") || of._href.endsWith(""String_Node_Str"")) {
        of._id=file.getAttribute(""String_Node_Str"");
        String size=file.getAttribute(""String_Node_Str"");
        if (StringUtils.isNotBlank(size)) {
          of._size=Long.parseLong(size);
        }
 else {
          String dataDiskPath=ovfFile.getParent() + File.separator + of._href;
          File this_file=new File(dataDiskPath);
          of._size=this_file.length();
        }
        of.isIso=of._href.endsWith(""String_Node_Str"");
        if (toggle && !of.isIso) {
          of._bootable=true;
          toggle=!toggle;
        }
        vf.add(of);
      }
    }
    for (int i=0; i < disks.getLength(); i++) {
      Element disk=(Element)disks.item(i);
      OVFDisk od=new OVFDisk();
      String virtualSize=disk.getAttribute(""String_Node_Str"");
      od._capacity=NumberUtils.toLong(virtualSize,0L);
      String allocationUnits=disk.getAttribute(""String_Node_Str"");
      od._diskId=disk.getAttribute(""String_Node_Str"");
      od._fileRef=disk.getAttribute(""String_Node_Str"");
      od._populatedSize=NumberUtils.toLong(disk.getAttribute(""String_Node_Str""));
      if ((od._capacity != 0) && (allocationUnits != null)) {
        long units=1;
        if (allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"")) {
          units=ResourceType.bytesToKiB;
        }
 else         if (allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"")) {
          units=ResourceType.bytesToMiB;
        }
 else         if (allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"") || allocationUnits.equalsIgnoreCase(""String_Node_Str"")) {
          units=ResourceType.bytesToGiB;
        }
        od._capacity=od._capacity * units;
      }
      od._controller=getControllerType(items,od._diskId);
      vd.add(od);
    }
  }
 catch (  SAXException|IOException|ParserConfigurationException e) {
    s_logger.error(""String_Node_Str"" + ovfFilePath,e);
    throw new CloudRuntimeException(e);
  }
  List<DatadiskTO> disksTO=new ArrayList<DatadiskTO>();
  for (  OVFFile of : vf) {
    if (StringUtils.isBlank(of._id)) {
      s_logger.error(""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    OVFDisk cdisk=getDisk(of._id,vd);
    if (cdisk == null && !of.isIso) {
      s_logger.error(""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    Long capacity=cdisk == null ? of._size : cdisk._capacity;
    String controller=cdisk == null ? ""String_Node_Str"" : cdisk._controller._name;
    String controllerSubType=cdisk == null ? ""String_Node_Str"" : cdisk._controller._subType;
    String dataDiskPath=ovfFile.getParent() + File.separator + of._href;
    File f=new File(dataDiskPath);
    if (!f.exists() || f.isDirectory()) {
      s_logger.error(""String_Node_Str"" + dataDiskPath);
      throw new CloudRuntimeException(""String_Node_Str"" + dataDiskPath);
    }
    disksTO.add(new DatadiskTO(dataDiskPath,capacity,of._size,of._id,of.isIso,of._bootable,controller,controllerSubType));
  }
  DatadiskTO fd=disksTO.get(0);
  if (fd.isIso()) {
    disksTO.remove(0);
    disksTO.add(fd);
  }
  return disksTO;
}",0.9891087949408596
105082,"@Test public void testVmSnapshotDetails(){
  VMSnapshotDetailsVO detailsVO=new VMSnapshotDetailsVO(1L,""String_Node_Str"",""String_Node_Str"",display);
  vmsnapshotDetailsDao.persist(detailsVO);
  Map<String,String> details=vmsnapshotDetailsDao.listDetailsKeyPairs(1L);
  Assert.assertTrue(details.containsKey(""String_Node_Str""));
}","@Test public void testVmSnapshotDetails(){
  VMSnapshotDetailsVO detailsVO=new VMSnapshotDetailsVO(1L,""String_Node_Str"",""String_Node_Str"",true);
  vmsnapshotDetailsDao.persist(detailsVO);
  Map<String,String> details=vmsnapshotDetailsDao.listDetailsKeyPairs(1L);
  Assert.assertTrue(details.containsKey(""String_Node_Str""));
}",0.9831546707503828
105083,"protected void createDb(){
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null,""String_Node_Str"",null,null,NetworkType.Basic,null,null,true,true,null,null);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  HostPodVO pod=new HostPodVO(UUID.randomUUID().toString(),dc.getId(),""String_Node_Str"",""String_Node_Str"",8,""String_Node_Str"");
  pod=podDao.persist(pod);
  podId=pod.getId();
  ClusterVO cluster=new ClusterVO(dc.getId(),pod.getId(),""String_Node_Str"");
  cluster.setHypervisorType(HypervisorType.XenServer.toString());
  cluster.setClusterType(ClusterType.CloudManaged);
  cluster.setManagedState(ManagedState.Managed);
  cluster=clusterDao.persist(cluster);
  clusterId=cluster.getId();
  DataStoreProvider provider=providerMgr.getDataStoreProvider(DataStoreProvider.DEFAULT_PRIMARY);
  storage=new StoragePoolVO();
  storage.setDataCenterId(dcId);
  storage.setPodId(podId);
  storage.setPoolType(StoragePoolType.NetworkFilesystem);
  storage.setClusterId(clusterId);
  storage.setStatus(StoragePoolStatus.Up);
  storage.setScope(ScopeType.CLUSTER);
  storage.setUsedBytes(1000);
  storage.setCapacityBytes(20000);
  storage.setHostAddress(UUID.randomUUID().toString());
  storage.setPath(UUID.randomUUID().toString());
  storage.setStorageProviderName(provider.getName());
  storage=storagePoolDao.persist(storage);
  storagePoolId=storage.getId();
  storageMgr.createCapacityEntry(storage.getId());
  diskOffering=new DiskOfferingVO();
  diskOffering.setDiskSize(500);
  diskOffering.setName(""String_Node_Str"");
  diskOffering.setSystemUse(false);
  diskOffering.setUseLocalStorage(false);
  diskOffering.setCustomized(false);
  diskOffering.setRecreatable(false);
  diskOffering=diskOfferingDao.persist(diskOffering);
  diskOfferingId=diskOffering.getId();
  volume=new VolumeVO(Volume.Type.ROOT,""String_Node_Str"",dcId,1,1,diskOffering.getId(),diskOffering.getDiskSize(),diskOffering.getMinIops(),diskOffering.getMaxIops(),""String_Node_Str"");
  volume=volumeDao.persist(volume);
  volumeId=volume.getId();
}","protected void createDb(){
  DataCenterVO dc=new DataCenterVO(UUID.randomUUID().toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",null,""String_Node_Str"",null,null,NetworkType.Basic,null,null,true,true,null,null);
  dc=dcDao.persist(dc);
  dcId=dc.getId();
  HostPodVO pod=new HostPodVO(UUID.randomUUID().toString(),dc.getId(),""String_Node_Str"",""String_Node_Str"",8,""String_Node_Str"");
  pod=podDao.persist(pod);
  podId=pod.getId();
  ClusterVO cluster=new ClusterVO(dc.getId(),pod.getId(),""String_Node_Str"");
  cluster.setHypervisorType(HypervisorType.XenServer.toString());
  cluster.setClusterType(ClusterType.CloudManaged);
  cluster.setManagedState(ManagedState.Managed);
  cluster=clusterDao.persist(cluster);
  clusterId=cluster.getId();
  DataStoreProvider provider=providerMgr.getDataStoreProvider(DataStoreProvider.DEFAULT_PRIMARY);
  storage=new StoragePoolVO();
  storage.setDataCenterId(dcId);
  storage.setPodId(podId);
  storage.setPoolType(StoragePoolType.NetworkFilesystem);
  storage.setClusterId(clusterId);
  storage.setStatus(StoragePoolStatus.Up);
  storage.setScope(ScopeType.CLUSTER);
  storage.setUsedBytes(1000);
  storage.setCapacityBytes(20000);
  storage.setHostAddress(UUID.randomUUID().toString());
  storage.setPath(UUID.randomUUID().toString());
  storage.setStorageProviderName(provider.getName());
  storage=storagePoolDao.persist(storage);
  storagePoolId=storage.getId();
  storageMgr.createCapacityEntry(storage.getId());
  diskOffering=new DiskOfferingVO();
  diskOffering.setDiskSize(500);
  diskOffering.setName(""String_Node_Str"");
  diskOffering.setSystemUse(false);
  diskOffering.setUseLocalStorage(false);
  diskOffering.setCustomized(false);
  diskOffering.setRecreatable(false);
  diskOffering=diskOfferingDao.persist(diskOffering);
  diskOfferingId=diskOffering.getId();
  volume=new VolumeVO(Volume.Type.ROOT,""String_Node_Str"",dcId,1,1,diskOffering.getId(),Storage.ProvisioningType.THIN,diskOffering.getDiskSize(),diskOffering.getMinIops(),diskOffering.getMaxIops(),""String_Node_Str"");
  volume=volumeDao.persist(volume);
  volumeId=volume.getId();
}",0.992867332382311
105084,"private SnapshotVO createSnapshotInDb(VolumeInfo volume){
  Snapshot.Type snapshotType=Snapshot.Type.MANUAL;
  SnapshotVO snapshotVO=new SnapshotVO(volume.getDataCenterId(),2,1,volume.getId(),1L,UUID.randomUUID().toString(),(short)snapshotType.ordinal(),snapshotType.name(),volume.getSize(),HypervisorType.XenServer);
  return this.snapshotDao.persist(snapshotVO);
}","private SnapshotVO createSnapshotInDb(VolumeInfo volume){
  Snapshot.Type snapshotType=Snapshot.Type.MANUAL;
  SnapshotVO snapshotVO=new SnapshotVO(volume.getDataCenterId(),2,1,volume.getId(),1L,UUID.randomUUID().toString(),(short)snapshotType.ordinal(),snapshotType.name(),volume.getSize(),1L,100L,HypervisorType.XenServer,LocationType.PRIMARY);
  return this.snapshotDao.persist(snapshotVO);
}",0.961892247043364
105085,"private VolumeVO createVolume(Long templateId,long dataStoreId){
  VolumeVO volume=new VolumeVO(Volume.Type.DATADISK,UUID.randomUUID().toString(),this.dcId,1L,1L,1L,1000,0L,0L,""String_Node_Str"");
  volume.setDataCenterId(this.dcId);
  volume.setPoolId(dataStoreId);
  volume=volumeDao.persist(volume);
  return volume;
}","private VolumeVO createVolume(Long templateId,long dataStoreId){
  VolumeVO volume=new VolumeVO(Volume.Type.DATADISK,UUID.randomUUID().toString(),this.dcId,1L,1L,1L,Storage.ProvisioningType.THIN,1000,0L,0L,""String_Node_Str"");
  volume.setDataCenterId(this.dcId);
  volume.setPoolId(dataStoreId);
  volume=volumeDao.persist(volume);
  return volume;
}",0.9552238805970148
105086,"private Pair<List<AccountJoinVO>,Integer> searchForAccountsInternal(ListAccountsCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    _accountMgr.checkAccess(caller,null,true,account);
  }
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,true,account);
    }
  }
  if (accountId == null) {
    if (_accountMgr.isAdmin(caller.getId()) && listAll && domainId == null) {
      listForDomain=true;
      isRecursive=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (_accountMgr.isAdmin(caller.getId()) && domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountJoinVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountJoinVO> sb=_accountJoinDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    sb.and(""String_Node_Str"",sb.entity().getDomainPath(),SearchCriteria.Op.LIKE);
  }
  SearchCriteria<AccountJoinVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountJoinVO> ssc=_accountJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    if (isRecursive) {
      Domain domain=_domainDao.findById(domainId);
      sc.setParameters(""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountJoinDao.searchAndCount(sc,searchFilter);
}","private Pair<List<AccountJoinVO>,Integer> searchForAccountsInternal(ListAccountsCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  boolean callerIsAdmin=_accountMgr.isAdmin(caller.getId());
  Account account;
  Domain domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (accountId == null) {
    if (listAll && callerIsAdmin) {
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
      isRecursive=true;
    }
 else     if (!callerIsAdmin || domainId == null) {
      accountId=caller.getAccountId();
    }
  }
 else   if (domainId != null && accountName != null) {
    account=_accountDao.findActiveAccount(accountName,domainId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    _accountMgr.checkAccess(caller,null,true,account);
  }
 else {
    if (domainId == null) {
      account=_accountDao.findById(accountId);
    }
 else {
      account=_accountDao.findActiveAccountById(accountId,domainId);
    }
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId + (domainId == null ? ""String_Node_Str"" : ""String_Node_Str"" + domainId));
    }
    _accountMgr.checkAccess(caller,null,true,account);
  }
  Filter searchFilter=new Filter(AccountJoinVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountJoinVO> sb=_accountJoinDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (domainId != null && isRecursive) {
    sb.and(""String_Node_Str"",sb.entity().getDomainPath(),SearchCriteria.Op.LIKE);
  }
  SearchCriteria<AccountJoinVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountJoinVO> ssc=_accountJoinDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (domainId != null) {
    if (isRecursive) {
      if (domain == null) {
        domain=_domainDao.findById(domainId);
      }
      sc.setParameters(""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountJoinDao.searchAndCount(sc,searchFilter);
}",0.7563395810363837
105087,"/** 
 * Give hypervisor guru opportunity to decide if certain command needs to be delegated to other host, mainly to secondary storage VM host
 * @param hostId original hypervisor host
 * @param cmd command that is going to be sent, hypervisor guru usually needs to register various context objects into the command object
 * @return delegated host id if the command will be delegated
 */
Pair<Boolean,Long> getCommandHostDelegation(long hostId,Command cmd);","/** 
 * Gives hypervisor guru opportunity to decide if certain commands need to be delegated to another host, for instance, we may have the opportunity to change from a system VM (is considered a host) to a real host to execute commands.
 * @param hostId original hypervisor host
 * @param cmd command that is going to be sent, hypervisor guru usually needs to register various context objects into the command object
 * @return delegated host id if the command will be delegated
 */
Pair<Boolean,Long> getCommandHostDelegation(long hostId,Command cmd);",0.8328387734915925
105088,"/** 
 * @param type
 * @param clusterId
 * @param podId
 * @param dcId
 * @param haTag TODO
 * @return
 */
List<HostVO> listAllUpAndEnabledNonHAHosts(Type type,Long clusterId,Long podId,long dcId,String haTag);","List<HostVO> listAllUpAndEnabledNonHAHosts(Type type,Long clusterId,Long podId,long dcId,String haTag);",0.65814696485623
105089,"private boolean canOwnCluster(long clusterId){
  SearchCriteria<HostVO> sc=HostsInClusterSearch.create();
  sc.setParameters(""String_Node_Str"",clusterId);
  List<HostVO> hosts=search(sc,null);
  boolean ownCluster=(hosts == null || hosts.size() == 0);
  return ownCluster;
}","/** 
 * This determines if hosts belonging to cluster(@clusterId) are up for grabs This is used for handling following cases: 1. First host added in cluster 2. During MS restart all hosts in a cluster are without any MS
 */
private boolean canOwnCluster(long clusterId){
  SearchCriteria<HostVO> sc=HostsInClusterSearch.create();
  sc.setParameters(""String_Node_Str"",clusterId);
  List<HostVO> hosts=search(sc,null);
  boolean ownCluster=(hosts == null || hosts.size() == 0);
  return ownCluster;
}",0.7098445595854922
105090,"@DB public boolean releasePublicIpRange(final long vlanDbId,final long userId,final Account caller){
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  boolean isAccountSpecific=false;
  final List<AccountVlanMapVO> acctVln=_accountVlanMapDao.listAccountVlanMapsByVlan(vlanDbId);
  if (acctVln != null && !acctVln.isEmpty()) {
    isAccountSpecific=true;
  }
  boolean isDomainSpecific=false;
  final List<DomainVlanMapVO> domainVln=_domainVlanMapDao.listDomainVlanMapsByVlan(vlanDbId);
  if (domainVln != null && !domainVln.isEmpty()) {
    isDomainSpecific=true;
  }
  if (!isAccountSpecific && !isDomainSpecific) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanDbId + ""String_Node_Str"");
  }
  final long allocIpCount=_publicIpAddressDao.countIPs(vlan.getDataCenterId(),vlanDbId,true);
  final List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlanDbId);
  boolean success=true;
  final List<IPAddressVO> ipsInUse=new ArrayList<IPAddressVO>();
  if (allocIpCount > 0) {
    try {
      vlan=_vlanDao.acquireInLockTable(vlanDbId,30);
      if (vlan == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + vlanDbId);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vlanDbId + ""String_Node_Str"");
      }
      for (      final IPAddressVO ip : ips) {
        if (!ip.isOneToOneNat() && !ip.isSourceNat() && !(_firewallDao.countRulesByIpId(ip.getId()) > 0)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ vlanDbId+ ""String_Node_Str""+ ""String_Node_Str"");
          }
          success=success && _ipAddrMgr.disassociatePublicIpAddress(ip.getId(),userId,caller);
        }
 else {
          ipsInUse.add(ip);
        }
      }
      if (!success) {
        s_logger.warn(""String_Node_Str"" + ""String_Node_Str"" + vlanDbId + ""String_Node_Str"");
      }
    }
  finally {
      _vlanDao.releaseFromLockTable(vlanDbId);
    }
  }
  if (isAccountSpecific && _accountVlanMapDao.remove(acctVln.get(0).getId())) {
    for (    final IPAddressVO ip : ips) {
      if (!ipsInUse.contains(ip)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlan.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
      }
    }
    _resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(ips.size()));
    return true;
  }
 else   if (isDomainSpecific && _domainVlanMapDao.remove(domainVln.get(0).getId())) {
    s_logger.debug(""String_Node_Str"");
    return true;
  }
 else {
    return false;
  }
}","@DB public boolean releasePublicIpRange(final long vlanDbId,final long userId,final Account caller){
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    s_logger.warn(""String_Node_Str"" + caller + ""String_Node_Str""+ userId+ ""String_Node_Str""+ vlanDbId+ ""String_Node_Str"");
  }
  boolean isAccountSpecific=false;
  final List<AccountVlanMapVO> acctVln=_accountVlanMapDao.listAccountVlanMapsByVlan(vlanDbId);
  if (acctVln != null && !acctVln.isEmpty()) {
    isAccountSpecific=true;
  }
  boolean isDomainSpecific=false;
  final List<DomainVlanMapVO> domainVln=_domainVlanMapDao.listDomainVlanMapsByVlan(vlanDbId);
  if (domainVln != null && !domainVln.isEmpty()) {
    isDomainSpecific=true;
  }
  if (!isAccountSpecific && !isDomainSpecific) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanDbId + ""String_Node_Str"");
  }
  final long allocIpCount=_publicIpAddressDao.countIPs(vlan.getDataCenterId(),vlanDbId,true);
  final List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlanDbId);
  boolean success=true;
  final List<IPAddressVO> ipsInUse=new ArrayList<IPAddressVO>();
  if (allocIpCount > 0) {
    try {
      vlan=_vlanDao.acquireInLockTable(vlanDbId,30);
      if (vlan == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + vlanDbId);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vlanDbId + ""String_Node_Str"");
      }
      for (      final IPAddressVO ip : ips) {
        if (!ip.isOneToOneNat() && !ip.isSourceNat() && !(_firewallDao.countRulesByIpId(ip.getId()) > 0)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ vlanDbId+ ""String_Node_Str""+ ""String_Node_Str"");
          }
          success=success && _ipAddrMgr.disassociatePublicIpAddress(ip.getId(),userId,caller);
        }
 else {
          ipsInUse.add(ip);
        }
      }
      if (!success) {
        s_logger.warn(""String_Node_Str"" + ""String_Node_Str"" + vlanDbId + ""String_Node_Str"");
      }
    }
  finally {
      _vlanDao.releaseFromLockTable(vlanDbId);
    }
  }
  if (isAccountSpecific && _accountVlanMapDao.remove(acctVln.get(0).getId())) {
    for (    final IPAddressVO ip : ips) {
      if (!ipsInUse.contains(ip)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_RELEASE,acctVln.get(0).getAccountId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlan.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
      }
    }
    _resourceLimitMgr.decrementResourceCount(acctVln.get(0).getAccountId(),ResourceType.public_ip,new Long(ips.size()));
    return true;
  }
 else   if (isDomainSpecific && _domainVlanMapDao.remove(domainVln.get(0).getId())) {
    s_logger.debug(""String_Node_Str"");
    return true;
  }
 else {
    return false;
  }
}",0.9734071033374978
105091,"@Override public void doInTransactionWithoutResult(TransactionStatus status){
  for (  ResourceTag tagToRemove : tagsToRemove) {
    _resourceTagDao.remove(tagToRemove.getId());
    s_logger.debug(""String_Node_Str"" + tagToRemove);
  }
}","@Override public void doInTransactionWithoutResult(TransactionStatus status){
  for (  ResourceTag tagToRemove : tagsToDelete) {
    _resourceTagDao.remove(tagToRemove.getId());
    s_logger.debug(""String_Node_Str"" + tagToRemove + ""String_Node_Str""+ String.join(""String_Node_Str"",resourceIds)+ ""String_Node_Str"");
  }
}",0.5081081081081081
105092,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TAGS_CREATE,eventDescription=""String_Node_Str"") public List<ResourceTag> createTags(final List<String> resourceIds,final ResourceObjectType resourceType,final Map<String,String> tags,final String customer){
  final Account caller=CallContext.current().getCallingAccount();
  final List<ResourceTag> resourceTags=new ArrayList<ResourceTag>(tags.size());
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      String key : tags.keySet()) {
        for (        String resourceId : resourceIds) {
          if (!resourceType.resourceTagsSupport()) {
            throw new InvalidParameterValueException(""String_Node_Str"" + resourceType + ""String_Node_Str"");
          }
          long id=getResourceId(resourceId,resourceType);
          String resourceUuid=getUuid(resourceId,resourceType);
          Pair<Long,Long> accountDomainPair=getAccountDomain(id,resourceType);
          Long domainId=accountDomainPair.second();
          Long accountId=accountDomainPair.first();
          if ((domainId != null) && (domainId == -1)) {
            throw new CloudRuntimeException(""String_Node_Str"");
          }
          if (accountId != null) {
            _accountMgr.checkAccess(caller,null,false,_accountMgr.getAccount(accountId));
          }
 else           if (domainId != null && !_accountMgr.isNormalUser(caller.getId())) {
            _accountMgr.checkAccess(caller,_domainMgr.getDomain(domainId));
          }
 else {
            throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ ""String_Node_Str""+ key);
          }
          String value=tags.get(key);
          if (value == null || value.isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"" + key + ""String_Node_Str"");
          }
          ResourceTagVO resourceTag=new ResourceTagVO(key,value,accountDomainPair.first(),accountDomainPair.second(),id,resourceType,customer,resourceUuid);
          resourceTag=_resourceTagDao.persist(resourceTag);
          resourceTags.add(resourceTag);
        }
      }
    }
  }
);
  return resourceTags;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TAGS_CREATE,eventDescription=""String_Node_Str"") public List<ResourceTag> createTags(final List<String> resourceIds,final ResourceObjectType resourceType,final Map<String,String> tags,final String customer){
  final Account caller=CallContext.current().getCallingAccount();
  final List<ResourceTag> resourceTags=new ArrayList<>(tags.size());
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      String key : tags.keySet()) {
        for (        String resourceId : resourceIds) {
          if (!resourceType.resourceTagsSupport()) {
            throw new InvalidParameterValueException(""String_Node_Str"" + resourceType + ""String_Node_Str"");
          }
          long id=getResourceId(resourceId,resourceType);
          String resourceUuid=getUuid(resourceId,resourceType);
          Pair<Long,Long> accountDomainPair=getAccountDomain(id,resourceType);
          Long domainId=accountDomainPair.second();
          Long accountId=accountDomainPair.first();
          checkResourceAccessible(accountId,domainId,""String_Node_Str"" + caller + ""String_Node_Str""+ ""String_Node_Str""+ id+ ""String_Node_Str""+ key+ ""String_Node_Str"");
          String value=tags.get(key);
          if (value == null || value.isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"" + key + ""String_Node_Str"");
          }
          ResourceTagVO resourceTag=new ResourceTagVO(key,value,accountDomainPair.first(),accountDomainPair.second(),id,resourceType,customer,resourceUuid);
          resourceTag=_resourceTagDao.persist(resourceTag);
          resourceTags.add(resourceTag);
        }
      }
    }
  }
);
  return resourceTags;
}",0.8296075509190264
105093,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TAGS_DELETE,eventDescription=""String_Node_Str"") public boolean deleteTags(List<String> resourceIds,ResourceObjectType resourceType,Map<String,String> tags){
  Account caller=CallContext.current().getCallingAccount();
  SearchBuilder<ResourceTagVO> sb=_resourceTagDao.createSearchBuilder();
  sb.and().op(""String_Node_Str"",sb.entity().getResourceId(),SearchCriteria.Op.IN);
  sb.or(""String_Node_Str"",sb.entity().getResourceUuid(),SearchCriteria.Op.IN);
  sb.cp();
  sb.and(""String_Node_Str"",sb.entity().getResourceType(),SearchCriteria.Op.EQ);
  SearchCriteria<ResourceTagVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",resourceIds.toArray());
  sc.setParameters(""String_Node_Str"",resourceIds.toArray());
  sc.setParameters(""String_Node_Str"",resourceType);
  List<? extends ResourceTag> resourceTags=_resourceTagDao.search(sc,null);
  ;
  final List<ResourceTag> tagsToRemove=new ArrayList<ResourceTag>();
  for (  ResourceTag resourceTag : resourceTags) {
    Account owner=_accountMgr.getAccount(resourceTag.getAccountId());
    _accountMgr.checkAccess(caller,null,false,owner);
    if (tags != null && !tags.isEmpty()) {
      for (      String key : tags.keySet()) {
        boolean canBeRemoved=false;
        if (resourceTag.getKey().equalsIgnoreCase(key)) {
          String value=tags.get(key);
          if (value != null) {
            if (resourceTag.getValue().equalsIgnoreCase(value)) {
              canBeRemoved=true;
            }
          }
 else {
            canBeRemoved=true;
          }
          if (canBeRemoved) {
            tagsToRemove.add(resourceTag);
            break;
          }
        }
      }
    }
 else {
      tagsToRemove.add(resourceTag);
    }
  }
  if (tagsToRemove.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      ResourceTag tagToRemove : tagsToRemove) {
        _resourceTagDao.remove(tagToRemove.getId());
        s_logger.debug(""String_Node_Str"" + tagToRemove);
      }
    }
  }
);
  return true;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TAGS_DELETE,eventDescription=""String_Node_Str"") public boolean deleteTags(List<String> resourceIds,ResourceObjectType resourceType,Map<String,String> tags){
  Account caller=CallContext.current().getCallingAccount();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + String.join(""String_Node_Str"",resourceIds));
  }
  List<? extends ResourceTag> resourceTags=searchResourceTags(resourceIds,resourceType);
  final List<ResourceTag> tagsToDelete=new ArrayList<>();
  for (  ResourceTag resourceTag : resourceTags) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + resourceTag.getResourceId());
      s_logger.debug(""String_Node_Str"" + resourceTag.getAccountId());
    }
    Account owner=_accountMgr.getAccount(resourceTag.getAccountId());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + owner);
    }
    _accountMgr.checkAccess(caller,null,false,owner);
    if (MapUtils.isEmpty(tags)) {
      tagsToDelete.add(resourceTag);
    }
 else {
      for (      String key : tags.keySet()) {
        boolean deleteTag=false;
        if (resourceTag.getKey().equalsIgnoreCase(key)) {
          String value=tags.get(key);
          if (value != null) {
            if (resourceTag.getValue().equalsIgnoreCase(value)) {
              deleteTag=true;
            }
          }
 else {
            deleteTag=true;
          }
          if (deleteTag) {
            tagsToDelete.add(resourceTag);
            break;
          }
        }
      }
    }
  }
  if (tagsToDelete.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      ResourceTag tagToRemove : tagsToDelete) {
        _resourceTagDao.remove(tagToRemove.getId());
        s_logger.debug(""String_Node_Str"" + tagToRemove + ""String_Node_Str""+ String.join(""String_Node_Str"",resourceIds)+ ""String_Node_Str"");
      }
    }
  }
);
  return true;
}",0.555889840314742
105094,"@Override public List<? extends ResourceTag> listByResourceTypeAndId(ResourceObjectType type,long resourceId){
  return _resourceTagDao.listBy(resourceId,type);
}","@Override public List<? extends ResourceTag> listByResourceTypeAndId(ResourceObjectType resourceType,long resourceId){
  return _resourceTagDao.listBy(resourceId,resourceType);
}",0.9411764705882352
105095,"private Pair<Long,Long> getAccountDomain(long resourceId,ResourceObjectType resourceType){
  Class<?> clazz=s_typeMap.get(resourceType);
  Object entity=_entityMgr.findById(clazz,resourceId);
  Long accountId=null;
  Long domainId=null;
  if (resourceType == ResourceObjectType.SecurityGroupRule) {
    SecurityGroupRuleVO rule=(SecurityGroupRuleVO)entity;
    Object SecurityGroup=_entityMgr.findById(s_typeMap.get(ResourceObjectType.SecurityGroup),rule.getSecurityGroupId());
    accountId=((SecurityGroupVO)SecurityGroup).getAccountId();
    domainId=((SecurityGroupVO)SecurityGroup).getDomainId();
  }
  if (resourceType == ResourceObjectType.NetworkACL) {
    NetworkACLItemVO aclItem=(NetworkACLItemVO)entity;
    Object networkACL=_entityMgr.findById(s_typeMap.get(ResourceObjectType.NetworkACLList),aclItem.getAclId());
    Long vpcId=((NetworkACLVO)networkACL).getVpcId();
    if (vpcId != null && vpcId != 0) {
      Object vpc=_entityMgr.findById(s_typeMap.get(ResourceObjectType.Vpc),vpcId);
      accountId=((VpcVO)vpc).getAccountId();
      domainId=((VpcVO)vpc).getDomainId();
    }
  }
  if (entity instanceof OwnedBy) {
    accountId=((OwnedBy)entity).getAccountId();
  }
  if (entity instanceof PartOf) {
    domainId=((PartOf)entity).getDomainId();
  }
  if (accountId == null) {
    accountId=Account.ACCOUNT_ID_SYSTEM;
  }
  if ((domainId == null) || ((accountId != null) && (domainId.longValue() == -1))) {
    domainId=_accountDao.getDomainIdForGivenAccountId(accountId);
  }
  return new Pair<Long,Long>(accountId,domainId);
}","private Pair<Long,Long> getAccountDomain(long resourceId,ResourceObjectType resourceType){
  Class<?> clazz=s_typeMap.get(resourceType);
  Object entity=_entityMgr.findById(clazz,resourceId);
  Long accountId=null;
  Long domainId=null;
  if (resourceType == ResourceObjectType.SecurityGroupRule) {
    SecurityGroupRuleVO rule=(SecurityGroupRuleVO)entity;
    Object SecurityGroup=_entityMgr.findById(s_typeMap.get(ResourceObjectType.SecurityGroup),rule.getSecurityGroupId());
    accountId=((SecurityGroupVO)SecurityGroup).getAccountId();
    domainId=((SecurityGroupVO)SecurityGroup).getDomainId();
  }
  if (resourceType == ResourceObjectType.Account) {
    AccountVO account=(AccountVO)entity;
    accountId=account.getId();
    domainId=account.getDomainId();
  }
  if (resourceType == ResourceObjectType.NetworkACL) {
    NetworkACLItemVO aclItem=(NetworkACLItemVO)entity;
    Object networkACL=_entityMgr.findById(s_typeMap.get(ResourceObjectType.NetworkACLList),aclItem.getAclId());
    Long vpcId=((NetworkACLVO)networkACL).getVpcId();
    if (vpcId != null && vpcId != 0) {
      Object vpc=_entityMgr.findById(s_typeMap.get(ResourceObjectType.Vpc),vpcId);
      accountId=((VpcVO)vpc).getAccountId();
      domainId=((VpcVO)vpc).getDomainId();
    }
  }
  if (entity instanceof OwnedBy) {
    accountId=((OwnedBy)entity).getAccountId();
  }
  if (entity instanceof PartOf) {
    domainId=((PartOf)entity).getDomainId();
  }
  if (accountId == null) {
    accountId=Account.ACCOUNT_ID_SYSTEM;
  }
  if ((domainId == null) || ((accountId != null) && (domainId.longValue() == -1))) {
    domainId=_accountDao.getDomainIdForGivenAccountId(accountId);
  }
  return new Pair<>(accountId,domainId);
}",0.9400921658986175
105096,"private PDU createPDU(SnmpTrapInfo snmpTrapInfo){
  PDU trap=new PDU();
  trap.setType(PDU.TRAP);
  int alertType=snmpTrapInfo.getAlertType() + 1;
  if (alertType > 0) {
    trap.add(new VariableBinding(SnmpConstants.snmpTrapOID,getOID(CsSnmpConstants.TRAPS_PREFIX + alertType)));
    if (snmpTrapInfo.getDataCenterId() != 0) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.DATA_CENTER_ID),new UnsignedInteger32(snmpTrapInfo.getDataCenterId())));
    }
    if (snmpTrapInfo.getPodId() != 0) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.POD_ID),new UnsignedInteger32(snmpTrapInfo.getPodId())));
    }
    if (snmpTrapInfo.getClusterId() != 0) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.CLUSTER_ID),new UnsignedInteger32(snmpTrapInfo.getClusterId())));
    }
    if (snmpTrapInfo.getMessage() != null) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.MESSAGE),new OctetString(snmpTrapInfo.getMessage())));
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    if (snmpTrapInfo.getGenerationTime() != null) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.GENERATION_TIME),new OctetString(snmpTrapInfo.getGenerationTime().toString())));
    }
 else {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.GENERATION_TIME)));
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return trap;
}","private PDU createPDU(SnmpTrapInfo snmpTrapInfo){
  PDU trap=new PDU();
  trap.setType(PDU.TRAP);
  int alertType=snmpTrapInfo.getAlertType() + 1;
  if (alertType > 0) {
    long sysUpTimeTicks=ManagementFactory.getRuntimeMXBean().getUptime() / 10;
    trap.add(new VariableBinding(SnmpConstants.sysUpTime,new TimeTicks(sysUpTimeTicks)));
    trap.add(new VariableBinding(SnmpConstants.snmpTrapOID,getOID(CsSnmpConstants.TRAPS_PREFIX + alertType)));
    if (snmpTrapInfo.getDataCenterId() != 0) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.DATA_CENTER_ID),new UnsignedInteger32(snmpTrapInfo.getDataCenterId())));
    }
    if (snmpTrapInfo.getPodId() != 0) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.POD_ID),new UnsignedInteger32(snmpTrapInfo.getPodId())));
    }
    if (snmpTrapInfo.getClusterId() != 0) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.CLUSTER_ID),new UnsignedInteger32(snmpTrapInfo.getClusterId())));
    }
    if (snmpTrapInfo.getMessage() != null) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.MESSAGE),new OctetString(snmpTrapInfo.getMessage())));
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    if (snmpTrapInfo.getGenerationTime() != null) {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.GENERATION_TIME),new OctetString(snmpTrapInfo.getGenerationTime().toString())));
    }
 else {
      trap.add(new VariableBinding(getOID(CsSnmpConstants.GENERATION_TIME)));
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return trap;
}",0.9436102769436104
105097,"@ReflectionUse private Pair<JobInfo.Status,String> orchestrateStop(final VmWorkStop work) throws Exception {
}","@ReflectionUse private Pair<JobInfo.Status,String> orchestrateStop(final VmWorkStop work) throws Exception {
  final VMInstanceVO vm=_entityMgr.findById(VMInstanceVO.class,work.getVmId());
  if (vm == null) {
    s_logger.info(""String_Node_Str"" + work.getVmId());
    throw new CloudRuntimeException(""String_Node_Str"" + work.getVmId());
  }
  orchestrateStop(vm.getUuid(),work.isCleanup());
  return new Pair<JobInfo.Status,String>(JobInfo.Status.SUCCEEDED,null);
}",0.3826086956521739
105098,"@Override public long getEntityOwnerId(){
  Long accountId=_accountService.getActiveAccountByName(accountName,domainId).getAccountId();
  if (accountId == null) {
    return CallContext.current().getCallingAccount().getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  Account activeAccountByName=_accountService.getActiveAccountByName(accountName,domainId);
  if (activeAccountByName != null) {
    return activeAccountByName.getAccountId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}",0.6209523809523809
105099,"@Override public Answer execute(final MigrateWithStorageReceiveCommand command,final XenServer610Resource xenServer610Resource){
  final Connection connection=xenServer610Resource.getConnection();
  final VirtualMachineTO vmSpec=command.getVirtualMachine();
  final List<Pair<VolumeTO,String>> volumeToStorageUuid=command.getVolumeToStorageUuid();
  try {
    Gson gson=new Gson();
    final List<Pair<VolumeTO,Object>> volumeToSr=new ArrayList<>();
    for (    final Pair<VolumeTO,String> entry : volumeToStorageUuid) {
      final String storageUuid=entry.second();
      final SR sr=xenServer610Resource.getStorageRepository(connection,storageUuid);
      volumeToSr.add(new Pair<VolumeTO,Object>(entry.first(),sr));
    }
    final List<Pair<NicTO,Object>> nicToNetwork=new ArrayList<Pair<NicTO,Object>>();
    for (    final NicTO nicTo : vmSpec.getNics()) {
      final Network network=xenServer610Resource.getNetwork(connection,nicTo);
      nicToNetwork.add(new Pair<NicTO,Object>(nicTo,network));
    }
    final XsLocalNetwork nativeNetworkForTraffic=xenServer610Resource.getNativeNetworkForTraffic(connection,TrafficType.Storage,null);
    final Network network=nativeNetworkForTraffic.getNetwork();
    final XsHost xsHost=xenServer610Resource.getHost();
    final String uuid=xsHost.getUuid();
    final Map<String,String> other=new HashMap<String,String>();
    other.put(""String_Node_Str"",""String_Node_Str"");
    final Host host=Host.getByUuid(connection,uuid);
    final Map<String,String> token=host.migrateReceive(connection,network,other);
    return new MigrateWithStorageReceiveAnswer(command,volumeToSr,nicToNetwork,token);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"" + vmSpec.getName() + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageReceiveAnswer(command,e);
  }
catch (  final Exception e) {
    s_logger.error(""String_Node_Str"" + vmSpec.getName() + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageReceiveAnswer(command,e);
  }
}","@Override public Answer execute(final MigrateWithStorageReceiveCommand command,final XenServer610Resource xenServer610Resource){
  final Connection connection=xenServer610Resource.getConnection();
  final VirtualMachineTO vmSpec=command.getVirtualMachine();
  final List<Pair<VolumeTO,String>> volumeToStorageUuid=command.getVolumeToStorageUuid();
  try {
    final List<Pair<VolumeTO,Object>> volumeToSr=new ArrayList<>();
    for (    final Pair<VolumeTO,String> entry : volumeToStorageUuid) {
      final String storageUuid=entry.second();
      final SR sr=xenServer610Resource.getStorageRepository(connection,storageUuid);
      volumeToSr.add(new Pair<VolumeTO,Object>(entry.first(),sr));
    }
    final List<Pair<NicTO,Object>> nicToNetwork=new ArrayList<Pair<NicTO,Object>>();
    for (    final NicTO nicTo : vmSpec.getNics()) {
      final Network network=xenServer610Resource.getNetwork(connection,nicTo);
      nicToNetwork.add(new Pair<NicTO,Object>(nicTo,network));
    }
    final XsLocalNetwork nativeNetworkForTraffic=xenServer610Resource.getNativeNetworkForTraffic(connection,TrafficType.Storage,null);
    final Network network=nativeNetworkForTraffic.getNetwork();
    final XsHost xsHost=xenServer610Resource.getHost();
    final String uuid=xsHost.getUuid();
    final Map<String,String> other=new HashMap<String,String>();
    other.put(""String_Node_Str"",""String_Node_Str"");
    final Host host=Host.getByUuid(connection,uuid);
    final Map<String,String> token=host.migrateReceive(connection,network,other);
    return new MigrateWithStorageReceiveAnswer(command,volumeToSr,nicToNetwork,token);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"" + vmSpec.getName() + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageReceiveAnswer(command,e);
  }
catch (  final Exception e) {
    s_logger.error(""String_Node_Str"" + vmSpec.getName() + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageReceiveAnswer(command,e);
  }
}",0.993583415597236
105100,"@Override public Answer execute(final MigrateWithStorageSendCommand command,final XenServer610Resource xenServer610Resource){
  final Connection connection=xenServer610Resource.getConnection();
  final VirtualMachineTO vmSpec=command.getVirtualMachine();
  final List<Pair<VolumeTO,Object>> volumeToSr=command.getVolumeToSr();
  final List<Pair<NicTO,Object>> nicToNetwork=command.getNicToNetwork();
  final Map<String,String> token=command.getToken();
  final String vmName=vmSpec.getName();
  Task task=null;
  try {
    Gson gson=new Gson();
    final Map<String,String> other=new HashMap<String,String>();
    other.put(""String_Node_Str"",""String_Node_Str"");
    final Map<VDI,SR> vdiMap=new HashMap<VDI,SR>();
    for (    final Pair<VolumeTO,Object> entry : volumeToSr) {
      if (entry.second() instanceof SR) {
        final SR sr=(SR)entry.second();
        final VDI vdi=xenServer610Resource.getVDIbyUuid(connection,entry.first().getPath());
        vdiMap.put(vdi,sr);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + entry.second() + ""String_Node_Str"");
      }
    }
    final Set<VM> vms=VM.getByNameLabel(connection,vmSpec.getName());
    VM vmToMigrate=null;
    if (vms != null) {
      vmToMigrate=vms.iterator().next();
    }
    final Map<VIF,Network> vifMap=new HashMap<VIF,Network>();
    for (    final Pair<NicTO,Object> entry : nicToNetwork) {
      if (entry.second() instanceof Network) {
        final Network network=(Network)entry.second();
        final VIF vif=xenServer610Resource.getVifByMac(connection,vmToMigrate,entry.first().getMac());
        vifMap.put(vif,network);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + entry.second() + ""String_Node_Str"");
      }
    }
    task=vmToMigrate.assertCanMigrateAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=xenServer610Resource.getMigrateWait() * 1000L;
      xenServer610Resource.waitForTask(connection,task,1000,timeout);
      xenServer610Resource.checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error(""String_Node_Str"" + vmName + ""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"" + vmName + ""String_Node_Str"",e);
    }
    task=vmToMigrate.migrateSendAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=xenServer610Resource.getMigrateWait() * 1000L;
      xenServer610Resource.waitForTask(connection,task,1000,timeout);
      xenServer610Resource.checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error(""String_Node_Str"" + vmName,e);
      throw new CloudRuntimeException(""String_Node_Str"" + vmName,e);
    }
    final Set<VolumeTO> volumeToSet=null;
    return new MigrateWithStorageSendAnswer(command,volumeToSet);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(command,e);
  }
catch (  final Exception e) {
    s_logger.error(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(command,e);
  }
 finally {
    if (task != null) {
      try {
        task.destroy(connection);
      }
 catch (      final Exception e) {
        s_logger.debug(""String_Node_Str"" + task.toString() + ""String_Node_Str""+ xenServer610Resource.getHost().getUuid()+ ""String_Node_Str""+ e.toString());
      }
    }
  }
}","@Override public Answer execute(final MigrateWithStorageSendCommand command,final XenServer610Resource xenServer610Resource){
  final Connection connection=xenServer610Resource.getConnection();
  final VirtualMachineTO vmSpec=command.getVirtualMachine();
  final List<Pair<VolumeTO,Object>> volumeToSr=command.getVolumeToSr();
  final List<Pair<NicTO,Object>> nicToNetwork=command.getNicToNetwork();
  final Map<String,String> token=command.getToken();
  final String vmName=vmSpec.getName();
  Task task=null;
  try {
    final Map<String,String> other=new HashMap<String,String>();
    other.put(""String_Node_Str"",""String_Node_Str"");
    final Map<VDI,SR> vdiMap=new HashMap<VDI,SR>();
    for (    final Pair<VolumeTO,Object> entry : volumeToSr) {
      if (entry.second() instanceof SR) {
        final SR sr=(SR)entry.second();
        final VDI vdi=xenServer610Resource.getVDIbyUuid(connection,entry.first().getPath());
        vdiMap.put(vdi,sr);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + entry.second() + ""String_Node_Str"");
      }
    }
    final Set<VM> vms=VM.getByNameLabel(connection,vmSpec.getName());
    VM vmToMigrate=null;
    if (vms != null) {
      vmToMigrate=vms.iterator().next();
    }
    final Map<VIF,Network> vifMap=new HashMap<VIF,Network>();
    for (    final Pair<NicTO,Object> entry : nicToNetwork) {
      if (entry.second() instanceof Network) {
        final Network network=(Network)entry.second();
        final VIF vif=xenServer610Resource.getVifByMac(connection,vmToMigrate,entry.first().getMac());
        vifMap.put(vif,network);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + entry.second() + ""String_Node_Str"");
      }
    }
    task=vmToMigrate.assertCanMigrateAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=xenServer610Resource.getMigrateWait() * 1000L;
      xenServer610Resource.waitForTask(connection,task,1000,timeout);
      xenServer610Resource.checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error(""String_Node_Str"" + vmName + ""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"" + vmName + ""String_Node_Str"",e);
    }
    task=vmToMigrate.migrateSendAsync(connection,token,true,vdiMap,vifMap,other);
    try {
      final long timeout=xenServer610Resource.getMigrateWait() * 1000L;
      xenServer610Resource.waitForTask(connection,task,1000,timeout);
      xenServer610Resource.checkForSuccess(connection,task);
    }
 catch (    final Types.HandleInvalid e) {
      s_logger.error(""String_Node_Str"" + vmName,e);
      throw new CloudRuntimeException(""String_Node_Str"" + vmName,e);
    }
    final Set<VolumeTO> volumeToSet=null;
    return new MigrateWithStorageSendAnswer(command,volumeToSet);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.error(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(command,e);
  }
catch (  final Exception e) {
    s_logger.error(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.toString(),e);
    return new MigrateWithStorageSendAnswer(command,e);
  }
 finally {
    if (task != null) {
      try {
        task.destroy(connection);
      }
 catch (      final Exception e) {
        s_logger.debug(""String_Node_Str"" + task.toString() + ""String_Node_Str""+ xenServer610Resource.getHost().getUuid()+ ""String_Node_Str""+ e.toString());
      }
    }
  }
}",0.996293128029655
105101,"protected boolean sendStop(final VirtualMachineGuru guru,final VirtualMachineProfile profile,final boolean force,final boolean checkBeforeCleanup){
  final VirtualMachine vm=profile.getVirtualMachine();
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),checkBeforeCleanup);
  try {
    final Answer answer=_agentMgr.send(vm.getHostId(),stop);
    if (answer != null && answer instanceof StopAnswer) {
      final StopAnswer stopAns=(StopAnswer)answer;
      if (vm.getType() == VirtualMachine.Type.User) {
        final String platform=stopAns.getPlatform();
        if (platform != null) {
          final UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
      if (!answer.getResult()) {
        final String details=answer.getDetails();
        s_logger.debug(""String_Node_Str"" + details);
        return false;
      }
      guru.finalizeStop(profile,answer);
    }
 else {
      s_logger.error(""String_Node_Str"" + vm.getInstanceName());
      return false;
    }
  }
 catch (  final AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  final OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}","protected boolean sendStop(final VirtualMachineGuru guru,final VirtualMachineProfile profile,final boolean force,final boolean checkBeforeCleanup){
  final VirtualMachine vm=profile.getVirtualMachine();
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),checkBeforeCleanup);
  try {
    Answer answer=null;
    if (vm.getHostId() != null) {
      answer=_agentMgr.send(vm.getHostId(),stop);
    }
    if (answer != null && answer instanceof StopAnswer) {
      final StopAnswer stopAns=(StopAnswer)answer;
      if (vm.getType() == VirtualMachine.Type.User) {
        final String platform=stopAns.getPlatform();
        if (platform != null) {
          final UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
      if (!answer.getResult()) {
        final String details=answer.getDetails();
        s_logger.debug(""String_Node_Str"" + details);
        return false;
      }
      guru.finalizeStop(profile,answer);
    }
 else {
      s_logger.error(""String_Node_Str"" + vm.getInstanceName());
      return false;
    }
  }
 catch (  final AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  final OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}",0.9793977812995246
105102,"private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"")+ ""String_Node_Str"");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
      in.close();
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}","private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    BufferedReader in=null;
    OutputStream os=null;
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"");
      String postData=""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"") + ""String_Node_Str"";
      HttpURLConnection con=(HttpURLConnection)trafficSentinel.openConnection();
      con.setRequestMethod(""String_Node_Str"");
      con.setRequestProperty(""String_Node_Str"",String.valueOf(postData.length()));
      con.setDoOutput(true);
      os=con.getOutputStream();
      os.write(postData.getBytes(""String_Node_Str""));
      in=new BufferedReader(new InputStreamReader(con.getInputStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
 finally {
      if (os != null) {
        os.close();
      }
      if (in != null) {
        in.close();
      }
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}",0.8354700854700855
105103,"private HashMap<String,VmStatsEntry> getVmStats(List<String> vmNames) throws Exception {
  VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  ManagedObjectReference perfMgr=getServiceContext().getServiceContent().getPerfManager();
  VimPortType service=getServiceContext().getService();
  PerfCounterInfo rxPerfCounterInfo=null;
  PerfCounterInfo txPerfCounterInfo=null;
  List<PerfCounterInfo> cInfo=getServiceContext().getVimClient().getDynamicProperty(perfMgr,""String_Node_Str"");
  for (  PerfCounterInfo info : cInfo) {
    if (""String_Node_Str"".equalsIgnoreCase(info.getGroupInfo().getKey())) {
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        txPerfCounterInfo=info;
      }
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        rxPerfCounterInfo=info;
      }
    }
  }
  int key=((HostMO)hyperHost).getCustomFieldKey(""String_Node_Str"",CustomFieldConstants.CLOUD_VM_INTERNAL_NAME);
  if (key == 0) {
    s_logger.warn(""String_Node_Str"" + CustomFieldConstants.CLOUD_VM_INTERNAL_NAME + ""String_Node_Str"");
  }
  String instanceNameCustomField=""String_Node_Str"" + key + ""String_Node_Str"";
  final String numCpuStr=""String_Node_Str"";
  final String cpuUseStr=""String_Node_Str"";
  final String guestMemUseStr=""String_Node_Str"";
  final String memLimitStr=""String_Node_Str"";
  final String memMbStr=""String_Node_Str"";
  ObjectContent[] ocs=hyperHost.getVmPropertiesOnHyperHost(new String[]{""String_Node_Str"",numCpuStr,cpuUseStr,guestMemUseStr,memLimitStr,memMbStr,instanceNameCustomField});
  if (ocs != null && ocs.length > 0) {
    for (    ObjectContent oc : ocs) {
      List<DynamicProperty> objProps=oc.getPropSet();
      if (objProps != null) {
        String name=null;
        String numberCPUs=null;
        String maxCpuUsage=null;
        String memlimit=null;
        String memkb=null;
        String guestMemusage=null;
        String vmNameOnVcenter=null;
        String vmInternalCSName=null;
        for (        DynamicProperty objProp : objProps) {
          if (objProp.getName().equals(""String_Node_Str"")) {
            vmNameOnVcenter=objProp.getVal().toString();
          }
 else           if (objProp.getName().contains(instanceNameCustomField)) {
            if (objProp.getVal() != null)             vmInternalCSName=((CustomFieldStringValue)objProp.getVal()).getValue();
          }
 else           if (objProp.getName().equals(guestMemusage)) {
            guestMemusage=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(numCpuStr)) {
            numberCPUs=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(cpuUseStr)) {
            maxCpuUsage=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(memLimitStr)) {
            memlimit=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(memMbStr)) {
            memkb=objProp.getVal().toString();
          }
        }
        new VirtualMachineMO(hyperHost.getContext(),oc.getObj());
        if (vmInternalCSName != null) {
          name=vmInternalCSName;
        }
 else {
          name=vmNameOnVcenter;
        }
        if (!vmNames.contains(name)) {
          continue;
        }
        ManagedObjectReference vmMor=hyperHost.findVmOnHyperHost(name).getMor();
        assert(vmMor != null);
        ArrayList<PerfMetricId> vmNetworkMetrics=new ArrayList<PerfMetricId>();
        List<PerfMetricId> perfMetrics=service.queryAvailablePerfMetric(perfMgr,vmMor,null,null,null);
        if (perfMetrics != null) {
          for (int index=0; index < perfMetrics.size(); ++index) {
            if (((rxPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == rxPerfCounterInfo.getKey())) || ((txPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == txPerfCounterInfo.getKey()))) {
              vmNetworkMetrics.add(perfMetrics.get(index));
            }
          }
        }
        double networkReadKBs=0;
        double networkWriteKBs=0;
        long sampleDuration=0;
        if (vmNetworkMetrics.size() != 0) {
          PerfQuerySpec qSpec=new PerfQuerySpec();
          qSpec.setEntity(vmMor);
          PerfMetricId[] availableMetricIds=vmNetworkMetrics.toArray(new PerfMetricId[0]);
          qSpec.getMetricId().addAll(Arrays.asList(availableMetricIds));
          List<PerfQuerySpec> qSpecs=new ArrayList<PerfQuerySpec>();
          qSpecs.add(qSpec);
          List<PerfEntityMetricBase> values=service.queryPerf(perfMgr,qSpecs);
          for (int i=0; i < values.size(); ++i) {
            List<PerfSampleInfo> infos=((PerfEntityMetric)values.get(i)).getSampleInfo();
            if (infos != null && infos.size() > 0) {
              int endMs=infos.get(infos.size() - 1).getTimestamp().getSecond() * 1000 + infos.get(infos.size() - 1).getTimestamp().getMillisecond();
              int beginMs=infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();
              sampleDuration=(endMs - beginMs) / 1000;
              List<PerfMetricSeries> vals=((PerfEntityMetric)values.get(i)).getValue();
              for (int vi=0; ((vals != null) && (vi < vals.size())); ++vi) {
                if (vals.get(vi) instanceof PerfMetricIntSeries) {
                  PerfMetricIntSeries val=(PerfMetricIntSeries)vals.get(vi);
                  List<Long> perfValues=val.getValue();
                  Long sumRate=0L;
                  for (int j=0; j < infos.size(); j++) {
                    sumRate+=perfValues.get(j);
                  }
                  Long averageRate=sumRate / infos.size();
                  if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {
                    networkReadKBs=sampleDuration * averageRate;
                  }
                  if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {
                    networkWriteKBs=sampleDuration * averageRate;
                  }
                }
              }
            }
          }
        }
        vmResponseMap.put(name,new VmStatsEntry(NumberUtils.toDouble(memkb) * 1024,NumberUtils.toDouble(guestMemusage) * 1024,NumberUtils.toDouble(memlimit) * 1024,NumberUtils.toDouble(maxCpuUsage),networkReadKBs,networkWriteKBs,NumberUtils.toInt(numberCPUs),""String_Node_Str""));
      }
    }
  }
  return vmResponseMap;
}","private HashMap<String,VmStatsEntry> getVmStats(List<String> vmNames) throws Exception {
  VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  ManagedObjectReference perfMgr=getServiceContext().getServiceContent().getPerfManager();
  VimPortType service=getServiceContext().getService();
  PerfCounterInfo rxPerfCounterInfo=null;
  PerfCounterInfo txPerfCounterInfo=null;
  List<PerfCounterInfo> cInfo=getServiceContext().getVimClient().getDynamicProperty(perfMgr,""String_Node_Str"");
  for (  PerfCounterInfo info : cInfo) {
    if (""String_Node_Str"".equalsIgnoreCase(info.getGroupInfo().getKey())) {
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        txPerfCounterInfo=info;
      }
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        rxPerfCounterInfo=info;
      }
    }
  }
  int key=((HostMO)hyperHost).getCustomFieldKey(""String_Node_Str"",CustomFieldConstants.CLOUD_VM_INTERNAL_NAME);
  if (key == 0) {
    s_logger.warn(""String_Node_Str"" + CustomFieldConstants.CLOUD_VM_INTERNAL_NAME + ""String_Node_Str"");
  }
  String instanceNameCustomField=""String_Node_Str"" + key + ""String_Node_Str"";
  final String numCpuStr=""String_Node_Str"";
  final String cpuUseStr=""String_Node_Str"";
  final String guestMemUseStr=""String_Node_Str"";
  final String memLimitStr=""String_Node_Str"";
  final String memMbStr=""String_Node_Str"";
  final String allocatedCpuStr=""String_Node_Str"";
  ObjectContent[] ocs=hyperHost.getVmPropertiesOnHyperHost(new String[]{""String_Node_Str"",numCpuStr,cpuUseStr,guestMemUseStr,memLimitStr,memMbStr,allocatedCpuStr,instanceNameCustomField});
  if (ocs != null && ocs.length > 0) {
    for (    ObjectContent oc : ocs) {
      List<DynamicProperty> objProps=oc.getPropSet();
      if (objProps != null) {
        String name=null;
        String numberCPUs=null;
        double maxCpuUsage=0;
        String memlimit=null;
        String memkb=null;
        String guestMemusage=null;
        String vmNameOnVcenter=null;
        String vmInternalCSName=null;
        double allocatedCpu=0;
        for (        DynamicProperty objProp : objProps) {
          if (objProp.getName().equals(""String_Node_Str"")) {
            vmNameOnVcenter=objProp.getVal().toString();
          }
 else           if (objProp.getName().contains(instanceNameCustomField)) {
            if (objProp.getVal() != null)             vmInternalCSName=((CustomFieldStringValue)objProp.getVal()).getValue();
          }
 else           if (objProp.getName().equals(guestMemusage)) {
            guestMemusage=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(numCpuStr)) {
            numberCPUs=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(cpuUseStr)) {
            maxCpuUsage=NumberUtils.toDouble(objProp.getVal().toString());
          }
 else           if (objProp.getName().equals(memLimitStr)) {
            memlimit=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(memMbStr)) {
            memkb=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(allocatedCpuStr)) {
            allocatedCpu=NumberUtils.toDouble(objProp.getVal().toString());
          }
        }
        maxCpuUsage=(maxCpuUsage / allocatedCpu) * 100;
        new VirtualMachineMO(hyperHost.getContext(),oc.getObj());
        if (vmInternalCSName != null) {
          name=vmInternalCSName;
        }
 else {
          name=vmNameOnVcenter;
        }
        if (!vmNames.contains(name)) {
          continue;
        }
        ManagedObjectReference vmMor=hyperHost.findVmOnHyperHost(name).getMor();
        assert(vmMor != null);
        ArrayList<PerfMetricId> vmNetworkMetrics=new ArrayList<PerfMetricId>();
        List<PerfMetricId> perfMetrics=service.queryAvailablePerfMetric(perfMgr,vmMor,null,null,null);
        if (perfMetrics != null) {
          for (int index=0; index < perfMetrics.size(); ++index) {
            if (((rxPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == rxPerfCounterInfo.getKey())) || ((txPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == txPerfCounterInfo.getKey()))) {
              vmNetworkMetrics.add(perfMetrics.get(index));
            }
          }
        }
        double networkReadKBs=0;
        double networkWriteKBs=0;
        long sampleDuration=0;
        if (vmNetworkMetrics.size() != 0) {
          PerfQuerySpec qSpec=new PerfQuerySpec();
          qSpec.setEntity(vmMor);
          PerfMetricId[] availableMetricIds=vmNetworkMetrics.toArray(new PerfMetricId[0]);
          qSpec.getMetricId().addAll(Arrays.asList(availableMetricIds));
          List<PerfQuerySpec> qSpecs=new ArrayList<PerfQuerySpec>();
          qSpecs.add(qSpec);
          List<PerfEntityMetricBase> values=service.queryPerf(perfMgr,qSpecs);
          for (int i=0; i < values.size(); ++i) {
            List<PerfSampleInfo> infos=((PerfEntityMetric)values.get(i)).getSampleInfo();
            if (infos != null && infos.size() > 0) {
              int endMs=infos.get(infos.size() - 1).getTimestamp().getSecond() * 1000 + infos.get(infos.size() - 1).getTimestamp().getMillisecond();
              int beginMs=infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();
              sampleDuration=(endMs - beginMs) / 1000;
              List<PerfMetricSeries> vals=((PerfEntityMetric)values.get(i)).getValue();
              for (int vi=0; ((vals != null) && (vi < vals.size())); ++vi) {
                if (vals.get(vi) instanceof PerfMetricIntSeries) {
                  PerfMetricIntSeries val=(PerfMetricIntSeries)vals.get(vi);
                  List<Long> perfValues=val.getValue();
                  Long sumRate=0L;
                  for (int j=0; j < infos.size(); j++) {
                    sumRate+=perfValues.get(j);
                  }
                  Long averageRate=sumRate / infos.size();
                  if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {
                    networkReadKBs=sampleDuration * averageRate;
                  }
                  if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {
                    networkWriteKBs=sampleDuration * averageRate;
                  }
                }
              }
            }
          }
        }
        vmResponseMap.put(name,new VmStatsEntry(NumberUtils.toDouble(memkb) * 1024,NumberUtils.toDouble(guestMemusage) * 1024,NumberUtils.toDouble(memlimit) * 1024,maxCpuUsage,networkReadKBs,networkWriteKBs,NumberUtils.toInt(numberCPUs),""String_Node_Str""));
      }
    }
  }
  return vmResponseMap;
}",0.9724577861163228
105104,"public void createVpcAssociatePublicIPCommands(final VirtualRouter router,final List<? extends PublicIpAddress> ips,final Commands cmds,final Map<String,String> vlanMacAddress){
  final String ipAssocCommand=""String_Node_Str"";
  if (router.getIsRedundantRouter()) {
    createRedundantAssociateIPCommands(router,ips,cmds,ipAssocCommand,0);
    return;
  }
  Pair<IpAddressTO,Long> sourceNatIpAdd=null;
  Boolean addSourceNat=null;
  final Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    final String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {
      ipAddress.setState(IpAddress.State.Allocated);
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  final Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    final List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    final Integer networkRate=_networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(),router.getId());
    final Network network=_networkModel.getNetwork(ipAddrList.get(0).getNetworkId());
    final IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      final boolean add=ipAddr.getState() == IpAddress.State.Releasing ? false : true;
      final String macAddress=vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));
      final IpAddressTO ip=new IpAddressTO(ipAddr.getAccountId(),ipAddr.getAddress().addr(),add,false,ipAddr.isSourceNat(),BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(),ipAddr.getGateway(),ipAddr.getNetmask(),macAddress,networkRate,ipAddr.isOneToOneNat());
      ip.setTrafficType(network.getTrafficType());
      ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(),network));
      ipsToSend[i++]=ip;
      if (ipAddr.isSourceNat()) {
        sourceNatIpAdd=new Pair<IpAddressTO,Long>(ip,ipAddr.getNetworkId());
        addSourceNat=add;
      }
    }
    final IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,_routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(ipAssocCommand,cmd);
  }
  if (sourceNatIpAdd != null) {
    final IpAddressTO sourceNatIp=sourceNatIpAdd.first();
    final SetSourceNatCommand cmd=new SetSourceNatCommand(sourceNatIp,addSourceNat);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}","public void createVpcAssociatePublicIPCommands(final VirtualRouter router,final List<? extends PublicIpAddress> ips,final Commands cmds,final Map<String,String> vlanMacAddress){
  final String ipAssocCommand=""String_Node_Str"";
  if (router.getIsRedundantRouter()) {
    createRedundantAssociateIPCommands(router,ips,cmds,ipAssocCommand,0);
    return;
  }
  Pair<IpAddressTO,Long> sourceNatIpAdd=null;
  Boolean addSourceNat=null;
  final Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    final String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {
      ipAddress.setState(IpAddress.State.Allocated);
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  final Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    final List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      final PublicIpAddress o1,      final PublicIpAddress o2){
        final boolean s1=o1.isSourceNat();
        final boolean s2=o2.isSourceNat();
        return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;
      }
    }
);
    final Integer networkRate=_networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(),router.getId());
    final Network network=_networkModel.getNetwork(ipAddrList.get(0).getNetworkId());
    final IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      final boolean add=ipAddr.getState() == IpAddress.State.Releasing ? false : true;
      boolean sourceNat=ipAddr.isSourceNat();
      if (firstIP) {
        sourceNat=true;
      }
      final String macAddress=vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));
      final IpAddressTO ip=new IpAddressTO(ipAddr.getAccountId(),ipAddr.getAddress().addr(),add,firstIP,sourceNat,BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(),ipAddr.getGateway(),ipAddr.getNetmask(),macAddress,networkRate,ipAddr.isOneToOneNat());
      ip.setTrafficType(network.getTrafficType());
      ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(),network));
      ipsToSend[i++]=ip;
      if (ipAddr.isSourceNat()) {
        sourceNatIpAdd=new Pair<IpAddressTO,Long>(ip,ipAddr.getNetworkId());
        addSourceNat=add;
      }
      if (!firstIP || add) {
        firstIP=false;
      }
    }
    final IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,_routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(ipAssocCommand,cmd);
  }
  if (sourceNatIpAdd != null) {
    final IpAddressTO sourceNatIp=sourceNatIpAdd.first();
    final SetSourceNatCommand cmd=new SetSourceNatCommand(sourceNatIp,addSourceNat);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}",0.928192898781134
105105,"@Test public void testAddAndDeleteTemplate() throws Exception {
  try {
    selenium.open(""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    selenium.click(""String_Node_Str"");
    Thread.sleep(3000);
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
    selenium.click(""String_Node_Str"");
    selenium.click(""String_Node_Str"");
    Thread.sleep(3000);
    selenium.click(""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    String template_url=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    selenium.type(""String_Node_Str"",template_url);
    String template_zone=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    selenium.select(""String_Node_Str"",""String_Node_Str"" + template_zone);
    String template_os_type=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    selenium.select(""String_Node_Str"",""String_Node_Str"" + template_os_type);
    selenium.click(""String_Node_Str"");
    Thread.sleep(3000);
    int i=1;
    try {
      for (; ; i++) {
        System.out.println(""String_Node_Str"" + i);
        selenium.click(""String_Node_Str"" + i + ""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage());
    }
    for (int second=0; ; second++) {
      if (second >= 60)       fail(""String_Node_Str"");
      try {
        if (selenium.isVisible(""String_Node_Str""))         break;
      }
 catch (      Exception e) {
        s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage());
      }
      Thread.sleep(10000);
    }
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
    Thread.sleep(3000);
    int status=1;
    while (!selenium.isTextPresent(""String_Node_Str"")) {
      for (int j=1; j <= i; j++) {
        if (selenium.isTextPresent(""String_Node_Str"")) {
          status=0;
          break;
        }
        selenium.click(""String_Node_Str"" + j + ""String_Node_Str"");
      }
      if (status == 0) {
        break;
      }
 else {
        selenium.click(""String_Node_Str"");
        Thread.sleep(3000);
        selenium.click(""String_Node_Str"");
        Thread.sleep(3000);
      }
    }
    selenium.click(""String_Node_Str"");
    selenium.click(""String_Node_Str"");
    for (int second=0; ; second++) {
      if (second >= 60)       fail(""String_Node_Str"");
      try {
        if (selenium.isVisible(""String_Node_Str""))         break;
      }
 catch (      Exception e) {
        s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage());
      }
      Thread.sleep(1000);
    }
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
    selenium.click(""String_Node_Str"");
    selenium.waitForPageToLoad(""String_Node_Str"");
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
  }
 catch (  SeleniumException ex) {
    System.err.println(ex.getMessage());
    fail(ex.getMessage());
    throw ex;
  }
}","@Test public void testAddAndDeleteTemplate() throws Exception {
  try {
    selenium.open(""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    selenium.click(""String_Node_Str"");
    Thread.sleep(3000);
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
    selenium.click(""String_Node_Str"");
    selenium.click(""String_Node_Str"");
    Thread.sleep(3000);
    selenium.click(""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    selenium.type(""String_Node_Str"",""String_Node_Str"");
    String template_url=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    selenium.type(""String_Node_Str"",template_url);
    String template_zone=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    selenium.select(""String_Node_Str"",""String_Node_Str"" + template_zone);
    String template_os_type=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    selenium.select(""String_Node_Str"",""String_Node_Str"" + template_os_type);
    selenium.click(""String_Node_Str"");
    Thread.sleep(3000);
    int i=1;
    try {
      for (; ; i++) {
        System.out.println(""String_Node_Str"" + i);
        selenium.click(""String_Node_Str"" + i + ""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + ex.getLocalizedMessage());
    }
    for (int second=0; ; second++) {
      if (second >= 60)       fail(""String_Node_Str"");
      try {
        if (selenium.isVisible(""String_Node_Str""))         break;
      }
 catch (      Exception e) {
        s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage());
      }
      Thread.sleep(10000);
    }
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
    Thread.sleep(3000);
    int status=1;
    while (!selenium.isTextPresent(""String_Node_Str"")) {
      for (int j=1; j <= i; j++) {
        if (selenium.isTextPresent(""String_Node_Str"")) {
          status=0;
          break;
        }
        selenium.click(""String_Node_Str"" + j + ""String_Node_Str"");
      }
      if (status == 0) {
        break;
      }
 else {
        selenium.click(""String_Node_Str"");
        Thread.sleep(3000);
        selenium.click(""String_Node_Str"");
        Thread.sleep(3000);
      }
    }
    selenium.click(""String_Node_Str"");
    selenium.click(""String_Node_Str"");
    for (int second=0; ; second++) {
      if (second >= 60)       fail(""String_Node_Str"");
      try {
        if (selenium.isVisible(""String_Node_Str""))         break;
      }
 catch (      Exception e) {
        s_logger.info(""String_Node_Str"" + ""String_Node_Str"" + e.getLocalizedMessage());
      }
      Thread.sleep(1000);
    }
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
    selenium.click(""String_Node_Str"");
    selenium.waitForPageToLoad(""String_Node_Str"");
    assertTrue(selenium.isTextPresent(""String_Node_Str""));
  }
 catch (  SeleniumException ex) {
    System.err.println(ex.getMessage());
    fail(ex.getMessage());
    throw ex;
  }
}",0.9998373190174068
105106,"@Test public void testGetDifferenceDays(){
  Date now=new Date();
  assertTrue(QuotaAlertManagerImpl.getDifferenceDays(now,now) == 0L);
  assertTrue(QuotaAlertManagerImpl.getDifferenceDays(now,new DateTime(now).plusDays(1).toDate()) == 1L);
}","@Test public void testGetDifferenceDays(){
  Date now=new Date();
  assertTrue(QuotaAlertManagerImpl.getDifferenceDays(now,now) == 0L);
  Calendar c=Calendar.getInstance();
  c.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  Calendar c2=(Calendar)c.clone();
  c2.add(Calendar.DATE,1);
  assertEquals(1L,QuotaAlertManagerImpl.getDifferenceDays(c.getTime(),c2.getTime()));
}",0.4758842443729904
105107,"public Void deleteVolumeCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CommandResult> callback,DeleteVolumeContext<VolumeApiResult> context){
  CommandResult result=callback.getResult();
  VolumeObject vo=context.getVolume();
  VolumeApiResult apiResult=new VolumeApiResult(vo);
  try {
    if (result.isSuccess()) {
      vo.processEvent(Event.OperationSuccessed);
      if (canVolumeBeRemoved(vo.getId())) {
        s_logger.info(""String_Node_Str"" + vo.getId() + ""String_Node_Str"");
        volDao.remove(vo.getId());
      }
      SnapshotDataStoreVO snapStoreVo=_snapshotStoreDao.findByVolume(vo.getId(),DataStoreRole.Primary);
      if (snapStoreVo != null) {
        _snapshotStoreDao.remove(snapStoreVo.getId());
      }
    }
 else {
      vo.processEvent(Event.OperationFailed);
      apiResult.setResult(result.getResult());
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
  context.getFuture().complete(apiResult);
  return null;
}","public Void deleteVolumeCallback(AsyncCallbackDispatcher<VolumeServiceImpl,CommandResult> callback,DeleteVolumeContext<VolumeApiResult> context){
  CommandResult result=callback.getResult();
  VolumeObject vo=context.getVolume();
  VolumeApiResult apiResult=new VolumeApiResult(vo);
  try {
    if (result.isSuccess()) {
      vo.processEvent(Event.OperationSuccessed);
      if (canVolumeBeRemoved(vo.getId())) {
        s_logger.info(""String_Node_Str"" + vo.getId() + ""String_Node_Str"");
        volDao.remove(vo.getId());
      }
      SnapshotDataStoreVO snapStoreVo=_snapshotStoreDao.findByVolume(vo.getId(),DataStoreRole.Primary);
      if (snapStoreVo != null) {
        long storagePoolId=snapStoreVo.getDataStoreId();
        StoragePoolVO storagePoolVO=storagePoolDao.findById(storagePoolId);
        if (storagePoolVO.isManaged()) {
          DataStore primaryDataStore=dataStoreMgr.getPrimaryDataStore(storagePoolId);
          Map<String,String> mapCapabilities=primaryDataStore.getDriver().getCapabilities();
          String value=mapCapabilities.get(DataStoreCapabilities.STORAGE_SYSTEM_SNAPSHOT.toString());
          Boolean supportsStorageSystemSnapshots=new Boolean(value);
          if (!supportsStorageSystemSnapshots) {
            _snapshotStoreDao.remove(snapStoreVo.getId());
          }
        }
 else {
          _snapshotStoreDao.remove(snapStoreVo.getId());
        }
      }
    }
 else {
      vo.processEvent(Event.OperationFailed);
      apiResult.setResult(result.getResult());
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
  context.getFuture().complete(apiResult);
  return null;
}",0.7429657794676806
105108,"public String stopVM(final Connect conn,final String vmName,final boolean forceStop){
  DomainState state=null;
  Domain dm=null;
  s_logger.debug(""String_Node_Str"");
  if (forceStop) {
    return stopVMInternal(conn,vmName,true);
  }
  String ret=stopVM(conn,vmName,false);
  if (ret == Script.ERR_TIMEOUT) {
    ret=stopVMInternal(conn,vmName,true);
  }
 else   if (ret != null) {
    for (int i=0; i < 3; i++) {
      try {
        dm=conn.domainLookupByName(vmName);
        state=dm.getInfo().state;
        break;
      }
 catch (      final LibvirtException e) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
 finally {
        try {
          if (dm != null) {
            dm.free();
          }
        }
 catch (        final LibvirtException l) {
          s_logger.trace(""String_Node_Str"",l);
        }
      }
    }
    if (state == null) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    if (state != DomainState.VIR_DOMAIN_SHUTOFF) {
      s_logger.debug(""String_Node_Str"");
      ret=stopVMInternal(conn,vmName,true);
      if (ret != null) {
        return ret;
      }
    }
  }
  return null;
}","public String stopVM(final Connect conn,final String vmName,final boolean forceStop){
  DomainState state=null;
  Domain dm=null;
  s_logger.debug(""String_Node_Str"");
  if (forceStop) {
    return stopVMInternal(conn,vmName,true);
  }
  String ret=stopVMInternal(conn,vmName,false);
  if (ret == Script.ERR_TIMEOUT) {
    ret=stopVMInternal(conn,vmName,true);
  }
 else   if (ret != null) {
    for (int i=0; i < 3; i++) {
      try {
        dm=conn.domainLookupByName(vmName);
        state=dm.getInfo().state;
        break;
      }
 catch (      final LibvirtException e) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
 finally {
        try {
          if (dm != null) {
            dm.free();
          }
        }
 catch (        final LibvirtException l) {
          s_logger.trace(""String_Node_Str"",l);
        }
      }
    }
    if (state == null) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    if (state != DomainState.VIR_DOMAIN_SHUTOFF) {
      s_logger.debug(""String_Node_Str"");
      ret=stopVMInternal(conn,vmName,true);
      if (ret != null) {
        return ret;
      }
    }
  }
  return null;
}",0.9965546942291128
105109,"public void setCpuMaxDeviation(final Double maxCpuDeviation,final Double totalCpuUsed,final Long totalHosts){
  if (maxCpuDeviation != null && totalCpuUsed != null && totalHosts != null && totalHosts != 0) {
    final Double averageCpuUsage=totalCpuUsed / totalHosts;
    this.cpuMaxDeviation=String.format(""String_Node_Str"",(maxCpuDeviation - averageCpuUsage) * 100.0 / averageCpuUsage);
  }
}","public void setCpuMaxDeviation(final Double maxCpuUsagePercentage,final Double totalCpuUsedPercentage,final Long totalHosts){
  if (maxCpuUsagePercentage != null && totalCpuUsedPercentage != null && totalHosts != null && totalHosts != 0) {
    final Double averageCpuUsagePercentage=totalCpuUsedPercentage / totalHosts;
    this.cpuMaxDeviation=String.format(""String_Node_Str"",(maxCpuUsagePercentage - averageCpuUsagePercentage) / averageCpuUsagePercentage);
  }
}",0.8205128205128205
105110,"public void setCpuMaxDeviation(final Double maxCpuDeviation,final Double totalCpuUsed,final Long totalHosts){
  if (maxCpuDeviation != null && totalCpuUsed != null && totalHosts != null && totalHosts != 0) {
    final Double averageCpuUsage=totalCpuUsed / totalHosts;
    this.cpuMaxDeviation=String.format(""String_Node_Str"",(maxCpuDeviation - averageCpuUsage) * 100.0 / averageCpuUsage);
  }
}","public void setCpuMaxDeviation(final Double maxCpuUsagePercentage,final Double totalCpuUsedPercentage,final Long totalHosts){
  if (maxCpuUsagePercentage != null && totalCpuUsedPercentage != null && totalHosts != null && totalHosts != 0) {
    final Double averageCpuUsagePercentage=totalCpuUsedPercentage / totalHosts;
    this.cpuMaxDeviation=String.format(""String_Node_Str"",(maxCpuUsagePercentage - averageCpuUsagePercentage) / averageCpuUsagePercentage);
  }
}",0.8205128205128205
105111,"@Override public String authenticate(String command,Map<String,Object[]> params,HttpSession session,InetAddress remoteAddress,String responseType,StringBuilder auditTrailSb,final HttpServletRequest req,final HttpServletResponse resp) throws ServerApiException {
  if (HTTPMethod.valueOf(req.getMethod()) != HTTPMethod.POST) {
    throw new ServerApiException(ApiErrorCode.METHOD_NOT_ALLOWED,""String_Node_Str"");
  }
  final String[] username=(String[])params.get(ApiConstants.USERNAME);
  final String[] password=(String[])params.get(ApiConstants.PASSWORD);
  String[] domainIdArr=(String[])params.get(ApiConstants.DOMAIN_ID);
  if (domainIdArr == null) {
    domainIdArr=(String[])params.get(ApiConstants.DOMAIN__ID);
  }
  final String[] domainName=(String[])params.get(ApiConstants.DOMAIN);
  Long domainId=null;
  if ((domainIdArr != null) && (domainIdArr.length > 0)) {
    try {
      domainId=_apiServer.fetchDomainId(domainIdArr[0]);
      if (domainId == null) {
        domainId=Long.parseLong(domainIdArr[0]);
      }
      auditTrailSb.append(""String_Node_Str"" + domainId);
    }
 catch (    final NumberFormatException e) {
      s_logger.warn(""String_Node_Str"");
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      throw new ServerApiException(ApiErrorCode.UNAUTHORIZED,_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType));
    }
  }
  String domain=null;
  if (domainName != null) {
    domain=domainName[0];
    auditTrailSb.append(""String_Node_Str"" + domain);
    if (domain != null) {
      if (!domain.endsWith(""String_Node_Str"")) {
        domain+='/';
      }
      if (!domain.startsWith(""String_Node_Str"")) {
        domain=""String_Node_Str"" + domain;
      }
    }
  }
  String serializedResponse=null;
  if (username != null) {
    final String pwd=((password == null) ? null : password[0]);
    try {
      final Domain userDomain=_domainService.findDomainByIdOrPath(domainId,domain);
      if (userDomain != null) {
        domainId=userDomain.getId();
      }
 else {
        throw new CloudAuthenticationException(""String_Node_Str"" + domain);
      }
      final UserAccount userAccount=_accountService.getActiveUserAccount(username[0],domainId);
      if (userAccount == null || !(User.Source.UNKNOWN.equals(userAccount.getSource()) || User.Source.LDAP.equals(userAccount.getSource()))) {
        throw new CloudAuthenticationException(""String_Node_Str"");
      }
      return ApiResponseSerializer.toSerializedString(_apiServer.loginUser(session,username[0],pwd,domainId,domain,remoteAddress,params),responseType);
    }
 catch (    final CloudAuthenticationException ex) {
      try {
        session.invalidate();
      }
 catch (      final IllegalStateException ise) {
      }
      auditTrailSb.append(""String_Node_Str"" + ApiErrorCode.ACCOUNT_ERROR + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
      serializedResponse=_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"",params,responseType);
    }
  }
  throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,serializedResponse);
}","@Override public String authenticate(String command,Map<String,Object[]> params,HttpSession session,InetAddress remoteAddress,String responseType,StringBuilder auditTrailSb,final HttpServletRequest req,final HttpServletResponse resp) throws ServerApiException {
  if (HTTPMethod.valueOf(req.getMethod()) != HTTPMethod.POST) {
    throw new ServerApiException(ApiErrorCode.METHOD_NOT_ALLOWED,""String_Node_Str"");
  }
  final String[] username=(String[])params.get(ApiConstants.USERNAME);
  final String[] password=(String[])params.get(ApiConstants.PASSWORD);
  String[] domainIdArr=(String[])params.get(ApiConstants.DOMAIN_ID);
  if (domainIdArr == null) {
    domainIdArr=(String[])params.get(ApiConstants.DOMAIN__ID);
  }
  final String[] domainName=(String[])params.get(ApiConstants.DOMAIN);
  Long domainId=null;
  if ((domainIdArr != null) && (domainIdArr.length > 0)) {
    try {
      domainId=_apiServer.fetchDomainId(domainIdArr[0]);
      if (domainId == null) {
        domainId=Long.parseLong(domainIdArr[0]);
      }
      auditTrailSb.append(""String_Node_Str"" + domainId);
    }
 catch (    final NumberFormatException e) {
      s_logger.warn(""String_Node_Str"");
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      throw new ServerApiException(ApiErrorCode.UNAUTHORIZED,_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType));
    }
  }
  String domain=null;
  if (domainName != null) {
    domain=domainName[0];
    auditTrailSb.append(""String_Node_Str"" + domain);
    if (domain != null) {
      if (!domain.endsWith(""String_Node_Str"")) {
        domain+='/';
      }
      if (!domain.startsWith(""String_Node_Str"")) {
        domain=""String_Node_Str"" + domain;
      }
    }
  }
  String serializedResponse=null;
  if (username != null) {
    final String pwd=((password == null) ? null : password[0]);
    try {
      final Domain userDomain=_domainService.findDomainByIdOrPath(domainId,domain);
      if (userDomain != null) {
        domainId=userDomain.getId();
      }
 else {
        throw new CloudAuthenticationException(""String_Node_Str"" + domain);
      }
      final UserAccount userAccount=_accountService.getActiveUserAccount(username[0],domainId);
      if (userAccount != null && User.Source.SAML2 == userAccount.getSource()) {
        throw new CloudAuthenticationException(""String_Node_Str"");
      }
      return ApiResponseSerializer.toSerializedString(_apiServer.loginUser(session,username[0],pwd,domainId,domain,remoteAddress,params),responseType);
    }
 catch (    final CloudAuthenticationException ex) {
      try {
        session.invalidate();
      }
 catch (      final IllegalStateException ise) {
      }
      auditTrailSb.append(""String_Node_Str"" + ApiErrorCode.ACCOUNT_ERROR + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
      serializedResponse=_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"",params,responseType);
    }
  }
  throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,serializedResponse);
}",0.9781134401972872
105112,"private HashMap<String,VmStatsEntry> getVmStats(List<String> vmNames) throws Exception {
  VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  ManagedObjectReference perfMgr=getServiceContext().getServiceContent().getPerfManager();
  VimPortType service=getServiceContext().getService();
  PerfCounterInfo rxPerfCounterInfo=null;
  PerfCounterInfo txPerfCounterInfo=null;
  List<PerfCounterInfo> cInfo=getServiceContext().getVimClient().getDynamicProperty(perfMgr,""String_Node_Str"");
  for (  PerfCounterInfo info : cInfo) {
    if (""String_Node_Str"".equalsIgnoreCase(info.getGroupInfo().getKey())) {
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        txPerfCounterInfo=info;
      }
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        rxPerfCounterInfo=info;
      }
    }
  }
  int key=((HostMO)hyperHost).getCustomFieldKey(""String_Node_Str"",CustomFieldConstants.CLOUD_VM_INTERNAL_NAME);
  if (key == 0) {
    s_logger.warn(""String_Node_Str"" + CustomFieldConstants.CLOUD_VM_INTERNAL_NAME + ""String_Node_Str"");
  }
  String instanceNameCustomField=""String_Node_Str"" + key + ""String_Node_Str"";
  final String numCpuStr=""String_Node_Str"";
  final String cpuUseStr=""String_Node_Str"";
  final String guestMemUseStr=""String_Node_Str"";
  final String memLimitStr=""String_Node_Str"";
  final String memMbStr=""String_Node_Str"";
  ObjectContent[] ocs=hyperHost.getVmPropertiesOnHyperHost(new String[]{""String_Node_Str"",numCpuStr,cpuUseStr,guestMemUseStr,memLimitStr,memMbStr,instanceNameCustomField});
  if (ocs != null && ocs.length > 0) {
    for (    ObjectContent oc : ocs) {
      List<DynamicProperty> objProps=oc.getPropSet();
      if (objProps != null) {
        String name=null;
        String numberCPUs=null;
        String maxCpuUsage=null;
        String memlimit=null;
        String memkb=null;
        String guestMemusage=null;
        String vmNameOnVcenter=null;
        String vmInternalCSName=null;
        for (        DynamicProperty objProp : objProps) {
          if (objProp.getName().equals(""String_Node_Str"")) {
            vmNameOnVcenter=objProp.getVal().toString();
          }
 else           if (objProp.getName().contains(instanceNameCustomField)) {
            if (objProp.getVal() != null)             vmInternalCSName=((CustomFieldStringValue)objProp.getVal()).getValue();
          }
 else           if (objProp.getName().equals(guestMemusage)) {
            guestMemusage=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(numCpuStr)) {
            numberCPUs=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(cpuUseStr)) {
            maxCpuUsage=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(memLimitStr)) {
            memlimit=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(memMbStr)) {
            memkb=objProp.getVal().toString();
          }
        }
        new VirtualMachineMO(hyperHost.getContext(),oc.getObj());
        if (vmInternalCSName != null) {
          name=vmInternalCSName;
        }
 else {
          name=vmNameOnVcenter;
        }
        if (!vmNames.contains(name)) {
          continue;
        }
        ManagedObjectReference vmMor=hyperHost.findVmOnHyperHost(name).getMor();
        assert(vmMor != null);
        ArrayList<PerfMetricId> vmNetworkMetrics=new ArrayList<PerfMetricId>();
        List<PerfMetricId> perfMetrics=service.queryAvailablePerfMetric(perfMgr,vmMor,null,null,null);
        if (perfMetrics != null) {
          for (int index=0; index < perfMetrics.size(); ++index) {
            if (((rxPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == rxPerfCounterInfo.getKey())) || ((txPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == txPerfCounterInfo.getKey()))) {
              vmNetworkMetrics.add(perfMetrics.get(index));
            }
          }
        }
        double networkReadKBs=0;
        double networkWriteKBs=0;
        long sampleDuration=0;
        if (vmNetworkMetrics.size() != 0) {
          PerfQuerySpec qSpec=new PerfQuerySpec();
          qSpec.setEntity(vmMor);
          PerfMetricId[] availableMetricIds=vmNetworkMetrics.toArray(new PerfMetricId[0]);
          qSpec.getMetricId().addAll(Arrays.asList(availableMetricIds));
          List<PerfQuerySpec> qSpecs=new ArrayList<PerfQuerySpec>();
          qSpecs.add(qSpec);
          List<PerfEntityMetricBase> values=service.queryPerf(perfMgr,qSpecs);
          for (int i=0; i < values.size(); ++i) {
            List<PerfSampleInfo> infos=((PerfEntityMetric)values.get(i)).getSampleInfo();
            if (infos != null && infos.size() > 0) {
              int endMs=infos.get(infos.size() - 1).getTimestamp().getSecond() * 1000 + infos.get(infos.size() - 1).getTimestamp().getMillisecond();
              int beginMs=infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();
              sampleDuration=(endMs - beginMs) / 1000;
              List<PerfMetricSeries> vals=((PerfEntityMetric)values.get(i)).getValue();
              for (int vi=0; ((vals != null) && (vi < vals.size())); ++vi) {
                if (vals.get(vi) instanceof PerfMetricIntSeries) {
                  PerfMetricIntSeries val=(PerfMetricIntSeries)vals.get(vi);
                  List<Long> perfValues=val.getValue();
                  Long sumRate=0L;
                  for (int j=0; j < infos.size(); j++) {
                    sumRate+=perfValues.get(j);
                  }
                  Long averageRate=sumRate / infos.size();
                  if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {
                    networkReadKBs=sampleDuration * averageRate;
                  }
                  if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {
                    networkWriteKBs=sampleDuration * averageRate;
                  }
                }
              }
            }
          }
        }
        vmResponseMap.put(name,new VmStatsEntry(NumberUtils.toDouble(memkb) * 1024,NumberUtils.toDouble(guestMemusage) * 1024,NumberUtils.toDouble(memlimit) * 1024,NumberUtils.toDouble(maxCpuUsage),networkReadKBs,networkWriteKBs,NumberUtils.toInt(numberCPUs),""String_Node_Str""));
      }
    }
  }
  return vmResponseMap;
}","private HashMap<String,VmStatsEntry> getVmStats(List<String> vmNames) throws Exception {
  VmwareHypervisorHost hyperHost=getHyperHost(getServiceContext());
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  ManagedObjectReference perfMgr=getServiceContext().getServiceContent().getPerfManager();
  VimPortType service=getServiceContext().getService();
  PerfCounterInfo rxPerfCounterInfo=null;
  PerfCounterInfo txPerfCounterInfo=null;
  List<PerfCounterInfo> cInfo=getServiceContext().getVimClient().getDynamicProperty(perfMgr,""String_Node_Str"");
  for (  PerfCounterInfo info : cInfo) {
    if (""String_Node_Str"".equalsIgnoreCase(info.getGroupInfo().getKey())) {
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        txPerfCounterInfo=info;
      }
      if (""String_Node_Str"".equalsIgnoreCase(info.getNameInfo().getKey())) {
        rxPerfCounterInfo=info;
      }
    }
  }
  int key=((HostMO)hyperHost).getCustomFieldKey(""String_Node_Str"",CustomFieldConstants.CLOUD_VM_INTERNAL_NAME);
  if (key == 0) {
    s_logger.warn(""String_Node_Str"" + CustomFieldConstants.CLOUD_VM_INTERNAL_NAME + ""String_Node_Str"");
  }
  String instanceNameCustomField=""String_Node_Str"" + key + ""String_Node_Str"";
  final String numCpuStr=""String_Node_Str"";
  final String cpuUseStr=""String_Node_Str"";
  final String guestMemUseStr=""String_Node_Str"";
  final String memLimitStr=""String_Node_Str"";
  final String memMbStr=""String_Node_Str"";
  final String allocatedCpuStr=""String_Node_Str"";
  ObjectContent[] ocs=hyperHost.getVmPropertiesOnHyperHost(new String[]{""String_Node_Str"",numCpuStr,cpuUseStr,guestMemUseStr,memLimitStr,memMbStr,allocatedCpuStr,instanceNameCustomField});
  if (ocs != null && ocs.length > 0) {
    for (    ObjectContent oc : ocs) {
      List<DynamicProperty> objProps=oc.getPropSet();
      if (objProps != null) {
        String name=null;
        String numberCPUs=null;
        double maxCpuUsage=0;
        String memlimit=null;
        String memkb=null;
        String guestMemusage=null;
        String vmNameOnVcenter=null;
        String vmInternalCSName=null;
        double allocatedCpu=0;
        for (        DynamicProperty objProp : objProps) {
          if (objProp.getName().equals(""String_Node_Str"")) {
            vmNameOnVcenter=objProp.getVal().toString();
          }
 else           if (objProp.getName().contains(instanceNameCustomField)) {
            if (objProp.getVal() != null)             vmInternalCSName=((CustomFieldStringValue)objProp.getVal()).getValue();
          }
 else           if (objProp.getName().equals(guestMemusage)) {
            guestMemusage=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(numCpuStr)) {
            numberCPUs=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(cpuUseStr)) {
            maxCpuUsage=NumberUtils.toDouble(objProp.getVal().toString());
          }
 else           if (objProp.getName().equals(memLimitStr)) {
            memlimit=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(memMbStr)) {
            memkb=objProp.getVal().toString();
          }
 else           if (objProp.getName().equals(allocatedCpuStr)) {
            allocatedCpu=NumberUtils.toDouble(objProp.getVal().toString());
          }
        }
        maxCpuUsage=(maxCpuUsage / allocatedCpu) * 100;
        new VirtualMachineMO(hyperHost.getContext(),oc.getObj());
        if (vmInternalCSName != null) {
          name=vmInternalCSName;
        }
 else {
          name=vmNameOnVcenter;
        }
        if (!vmNames.contains(name)) {
          continue;
        }
        ManagedObjectReference vmMor=hyperHost.findVmOnHyperHost(name).getMor();
        assert(vmMor != null);
        ArrayList<PerfMetricId> vmNetworkMetrics=new ArrayList<PerfMetricId>();
        List<PerfMetricId> perfMetrics=service.queryAvailablePerfMetric(perfMgr,vmMor,null,null,null);
        if (perfMetrics != null) {
          for (int index=0; index < perfMetrics.size(); ++index) {
            if (((rxPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == rxPerfCounterInfo.getKey())) || ((txPerfCounterInfo != null) && (perfMetrics.get(index).getCounterId() == txPerfCounterInfo.getKey()))) {
              vmNetworkMetrics.add(perfMetrics.get(index));
            }
          }
        }
        double networkReadKBs=0;
        double networkWriteKBs=0;
        long sampleDuration=0;
        if (vmNetworkMetrics.size() != 0) {
          PerfQuerySpec qSpec=new PerfQuerySpec();
          qSpec.setEntity(vmMor);
          PerfMetricId[] availableMetricIds=vmNetworkMetrics.toArray(new PerfMetricId[0]);
          qSpec.getMetricId().addAll(Arrays.asList(availableMetricIds));
          List<PerfQuerySpec> qSpecs=new ArrayList<PerfQuerySpec>();
          qSpecs.add(qSpec);
          List<PerfEntityMetricBase> values=service.queryPerf(perfMgr,qSpecs);
          for (int i=0; i < values.size(); ++i) {
            List<PerfSampleInfo> infos=((PerfEntityMetric)values.get(i)).getSampleInfo();
            if (infos != null && infos.size() > 0) {
              int endMs=infos.get(infos.size() - 1).getTimestamp().getSecond() * 1000 + infos.get(infos.size() - 1).getTimestamp().getMillisecond();
              int beginMs=infos.get(0).getTimestamp().getSecond() * 1000 + infos.get(0).getTimestamp().getMillisecond();
              sampleDuration=(endMs - beginMs) / 1000;
              List<PerfMetricSeries> vals=((PerfEntityMetric)values.get(i)).getValue();
              for (int vi=0; ((vals != null) && (vi < vals.size())); ++vi) {
                if (vals.get(vi) instanceof PerfMetricIntSeries) {
                  PerfMetricIntSeries val=(PerfMetricIntSeries)vals.get(vi);
                  List<Long> perfValues=val.getValue();
                  Long sumRate=0L;
                  for (int j=0; j < infos.size(); j++) {
                    sumRate+=perfValues.get(j);
                  }
                  Long averageRate=sumRate / infos.size();
                  if (vals.get(vi).getId().getCounterId() == rxPerfCounterInfo.getKey()) {
                    networkReadKBs=sampleDuration * averageRate;
                  }
                  if (vals.get(vi).getId().getCounterId() == txPerfCounterInfo.getKey()) {
                    networkWriteKBs=sampleDuration * averageRate;
                  }
                }
              }
            }
          }
        }
        vmResponseMap.put(name,new VmStatsEntry(NumberUtils.toDouble(memkb) * 1024,NumberUtils.toDouble(guestMemusage) * 1024,NumberUtils.toDouble(memlimit) * 1024,maxCpuUsage,networkReadKBs,networkWriteKBs,NumberUtils.toInt(numberCPUs),""String_Node_Str""));
      }
    }
  }
  return vmResponseMap;
}",0.9724577861163228
105113,"@SuppressWarnings(""String_Node_Str"") private void updateSystemVmTemplates(final Connection conn){
  LOG.debug(""String_Node_Str"");
  final Set<Hypervisor.HypervisorType> hypervisorsListInUse=new HashSet<Hypervisor.HypervisorType>();
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");ResultSet rs=pstmt.executeQuery()){
    while (rs.next()) {
switch (Hypervisor.HypervisorType.getType(rs.getString(1))) {
case XenServer:
        hypervisorsListInUse.add(Hypervisor.HypervisorType.XenServer);
      break;
case KVM:
    hypervisorsListInUse.add(Hypervisor.HypervisorType.KVM);
  break;
case VMware:
hypervisorsListInUse.add(Hypervisor.HypervisorType.VMware);
break;
case Hyperv:
hypervisorsListInUse.add(Hypervisor.HypervisorType.Hyperv);
break;
default :
break;
}
}
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
final Map<Hypervisor.HypervisorType,String> NewTemplateNameList=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
final Map<Hypervisor.HypervisorType,String> routerTemplateConfigurationNames=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
final Map<Hypervisor.HypervisorType,String> newTemplateUrl=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
final Map<Hypervisor.HypervisorType,String> newTemplateChecksum=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
for (final Map.Entry<Hypervisor.HypervisorType,String> hypervisorAndTemplateName : NewTemplateNameList.entrySet()) {
LOG.debug(""String_Node_Str"" + hypervisorAndTemplateName.getKey() + ""String_Node_Str"");
try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
long templateId=-1;
pstmt.setString(1,hypervisorAndTemplateName.getValue());
try (ResultSet rs=pstmt.executeQuery()){
if (rs.next()) {
templateId=rs.getLong(1);
}
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
if (templateId != -1) {
try (PreparedStatement templ_type_pstmt=conn.prepareStatement(""String_Node_Str"")){
templ_type_pstmt.setLong(1,templateId);
templ_type_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + templateId + ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + templateId + ""String_Node_Str"",e);
}
try (PreparedStatement update_templ_id_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_templ_id_pstmt.setLong(1,templateId);
update_templ_id_pstmt.setString(2,hypervisorAndTemplateName.getKey().toString());
update_templ_id_pstmt.executeUpdate();
}
 catch (final Exception e) {
LOG.error(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString() + ""String_Node_Str""+ templateId+ ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString() + ""String_Node_Str""+ templateId,e);
}
try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_pstmt.setString(1,hypervisorAndTemplateName.getValue());
update_pstmt.setString(2,routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()));
update_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + ""String_Node_Str""+ hypervisorAndTemplateName.getValue()+ ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + ""String_Node_Str""+ hypervisorAndTemplateName.getValue(),e);
}
try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_pstmt.setString(1,getUpgradedVersion());
update_pstmt.setString(2,""String_Node_Str"");
update_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
}
 else {
if (hypervisorsListInUse.contains(hypervisorAndTemplateName.getKey())) {
throw new CloudRuntimeException(getUpgradedVersion() + hypervisorAndTemplateName.getKey() + ""String_Node_Str"");
}
 else {
LOG.warn(getUpgradedVersion() + hypervisorAndTemplateName.getKey() + ""String_Node_Str""+ hypervisorAndTemplateName.getKey()+ ""String_Node_Str"");
try (PreparedStatement update_templ_url_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_templ_url_pstmt.setString(1,newTemplateUrl.get(hypervisorAndTemplateName.getKey()));
update_templ_url_pstmt.setString(2,newTemplateChecksum.get(hypervisorAndTemplateName.getKey()));
update_templ_url_pstmt.setString(3,hypervisorAndTemplateName.getKey().toString());
update_templ_url_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString() + ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString(),e);
}
}
}
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
}
LOG.debug(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") private void updateSystemVmTemplates(final Connection conn){
  LOG.debug(""String_Node_Str"");
  final Set<Hypervisor.HypervisorType> hypervisorsListInUse=new HashSet<Hypervisor.HypervisorType>();
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");ResultSet rs=pstmt.executeQuery()){
    while (rs.next()) {
switch (Hypervisor.HypervisorType.getType(rs.getString(1))) {
case XenServer:
        hypervisorsListInUse.add(Hypervisor.HypervisorType.XenServer);
      break;
case KVM:
    hypervisorsListInUse.add(Hypervisor.HypervisorType.KVM);
  break;
case VMware:
hypervisorsListInUse.add(Hypervisor.HypervisorType.VMware);
break;
case Hyperv:
hypervisorsListInUse.add(Hypervisor.HypervisorType.Hyperv);
break;
default :
break;
}
}
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
final Map<Hypervisor.HypervisorType,String> NewTemplateNameList=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
final Map<Hypervisor.HypervisorType,String> routerTemplateConfigurationNames=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
final Map<Hypervisor.HypervisorType,String> newTemplateUrl=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
final Map<Hypervisor.HypervisorType,String> newTemplateChecksum=new HashMap<Hypervisor.HypervisorType,String>(){
{
put(Hypervisor.HypervisorType.XenServer,""String_Node_Str"");
put(Hypervisor.HypervisorType.VMware,""String_Node_Str"");
put(Hypervisor.HypervisorType.KVM,""String_Node_Str"");
put(Hypervisor.HypervisorType.Hyperv,""String_Node_Str"");
}
}
;
for (final Map.Entry<Hypervisor.HypervisorType,String> hypervisorAndTemplateName : NewTemplateNameList.entrySet()) {
LOG.debug(""String_Node_Str"" + hypervisorAndTemplateName.getKey() + ""String_Node_Str"");
try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
long templateId=-1;
pstmt.setString(1,hypervisorAndTemplateName.getValue());
try (ResultSet rs=pstmt.executeQuery()){
if (rs.next()) {
templateId=rs.getLong(1);
}
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
if (templateId != -1) {
try (PreparedStatement templ_type_pstmt=conn.prepareStatement(""String_Node_Str"")){
templ_type_pstmt.setLong(1,templateId);
templ_type_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + templateId + ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + templateId + ""String_Node_Str"",e);
}
try (PreparedStatement update_templ_id_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_templ_id_pstmt.setLong(1,templateId);
update_templ_id_pstmt.setString(2,hypervisorAndTemplateName.getKey().toString());
update_templ_id_pstmt.executeUpdate();
}
 catch (final Exception e) {
LOG.error(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString() + ""String_Node_Str""+ templateId+ ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString() + ""String_Node_Str""+ templateId,e);
}
try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_pstmt.setString(1,hypervisorAndTemplateName.getValue());
update_pstmt.setString(2,routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()));
update_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + ""String_Node_Str""+ hypervisorAndTemplateName.getValue()+ ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + routerTemplateConfigurationNames.get(hypervisorAndTemplateName.getKey()) + ""String_Node_Str""+ hypervisorAndTemplateName.getValue(),e);
}
try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_pstmt.setString(1,""String_Node_Str"");
update_pstmt.setString(2,""String_Node_Str"");
update_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
}
 else {
if (hypervisorsListInUse.contains(hypervisorAndTemplateName.getKey())) {
throw new CloudRuntimeException(getUpgradedVersion() + hypervisorAndTemplateName.getKey() + ""String_Node_Str"");
}
 else {
LOG.warn(getUpgradedVersion() + hypervisorAndTemplateName.getKey() + ""String_Node_Str""+ hypervisorAndTemplateName.getKey()+ ""String_Node_Str"");
try (PreparedStatement update_templ_url_pstmt=conn.prepareStatement(""String_Node_Str"")){
update_templ_url_pstmt.setString(1,newTemplateUrl.get(hypervisorAndTemplateName.getKey()));
update_templ_url_pstmt.setString(2,newTemplateChecksum.get(hypervisorAndTemplateName.getKey()));
update_templ_url_pstmt.setString(3,hypervisorAndTemplateName.getKey().toString());
update_templ_url_pstmt.executeUpdate();
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString() + ""String_Node_Str""+ e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"" + hypervisorAndTemplateName.getKey().toString(),e);
}
}
}
}
 catch (final SQLException e) {
LOG.error(""String_Node_Str"" + e.getMessage());
throw new CloudRuntimeException(""String_Node_Str"",e);
}
}
LOG.debug(""String_Node_Str"");
}",0.9969474465803152
105114,"private String getBroadcastUriFromBridge(final String brName){
  final String pif=matchPifFileInDirectory(brName);
  final Pattern pattern=Pattern.compile(""String_Node_Str"");
  final Matcher matcher=pattern.matcher(pif);
  s_logger.debug(""String_Node_Str"" + pif + ""String_Node_Str""+ brName);
  if (matcher.find()) {
    if (brName.startsWith(""String_Node_Str"")) {
      return BroadcastDomainType.Vxlan.toUri(matcher.group(2)).toString();
    }
 else {
      if (!matcher.group(4).isEmpty()) {
        return BroadcastDomainType.Vlan.toUri(matcher.group(4)).toString();
      }
 else {
        s_logger.debug(""String_Node_Str"" + brName + ""String_Node_Str""+ pif+ ""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + brName + ""String_Node_Str""+ pif);
    return ""String_Node_Str"";
  }
}","private String getBroadcastUriFromBridge(final String brName){
  final String pif=matchPifFileInDirectory(brName);
  final Pattern pattern=Pattern.compile(""String_Node_Str"");
  final Matcher matcher=pattern.matcher(pif);
  s_logger.debug(""String_Node_Str"" + pif + ""String_Node_Str""+ brName);
  if (matcher.find()) {
    if (brName.startsWith(""String_Node_Str"")) {
      return BroadcastDomainType.Vxlan.toUri(matcher.group(2)).toString();
    }
 else {
      if (!matcher.group(6).isEmpty()) {
        return BroadcastDomainType.Vlan.toUri(matcher.group(6)).toString();
      }
 else       if (!matcher.group(4).isEmpty()) {
        return BroadcastDomainType.Vlan.toUri(matcher.group(4)).toString();
      }
 else {
        s_logger.debug(""String_Node_Str"" + brName + ""String_Node_Str""+ pif+ ""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + brName + ""String_Node_Str""+ pif);
    return ""String_Node_Str"";
  }
}",0.9273620972146368
105115,"protected boolean sendStop(final VirtualMachineGuru guru,final VirtualMachineProfile profile,final boolean force,final boolean checkBeforeCleanup){
  final VirtualMachine vm=profile.getVirtualMachine();
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),checkBeforeCleanup);
  try {
    final Answer answer=_agentMgr.send(vm.getHostId(),stop);
    if (answer != null && answer instanceof StopAnswer) {
      final StopAnswer stopAns=(StopAnswer)answer;
      if (vm.getType() == VirtualMachine.Type.User) {
        final String platform=stopAns.getPlatform();
        if (platform != null) {
          final UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
      if (!answer.getResult()) {
        final String details=answer.getDetails();
        s_logger.debug(""String_Node_Str"" + details);
        return false;
      }
      guru.finalizeStop(profile,answer);
    }
 else {
      s_logger.error(""String_Node_Str"" + vm.getInstanceName());
      return false;
    }
  }
 catch (  final AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  final OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}","protected boolean sendStop(final VirtualMachineGuru guru,final VirtualMachineProfile profile,final boolean force,final boolean checkBeforeCleanup){
  final VirtualMachine vm=profile.getVirtualMachine();
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),checkBeforeCleanup);
  try {
    Answer answer=null;
    if (vm.getHostId() != null) {
      answer=_agentMgr.send(vm.getHostId(),stop);
    }
    if (answer != null && answer instanceof StopAnswer) {
      final StopAnswer stopAns=(StopAnswer)answer;
      if (vm.getType() == VirtualMachine.Type.User) {
        final String platform=stopAns.getPlatform();
        if (platform != null) {
          final UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
      if (!answer.getResult()) {
        final String details=answer.getDetails();
        s_logger.debug(""String_Node_Str"" + details);
        return false;
      }
      guru.finalizeStop(profile,answer);
    }
 else {
      s_logger.error(""String_Node_Str"" + vm.getInstanceName());
      return false;
    }
  }
 catch (  final AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  final OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}",0.9793977812995246
105116,"private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"")+ ""String_Node_Str"");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
      in.close();
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}","private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    BufferedReader in=null;
    OutputStream os=null;
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"");
      String postData=""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"") + ""String_Node_Str"";
      HttpURLConnection con=(HttpURLConnection)trafficSentinel.openConnection();
      con.setRequestMethod(""String_Node_Str"");
      con.setRequestProperty(""String_Node_Str"",String.valueOf(postData.length()));
      con.setDoOutput(true);
      os=con.getOutputStream();
      os.write(postData.getBytes(""String_Node_Str""));
      in=new BufferedReader(new InputStreamReader(con.getInputStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
 finally {
      if (os != null) {
        os.close();
      }
      if (in != null) {
        in.close();
      }
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}",0.8354700854700855
105117,"boolean applyVpnUsers(long vpnOwnerId,String userName);","boolean applyVpnUsers(long vpnOwnerId,String userName) throws ResourceUnavailableException ;",0.7482993197278912
105118,"@Override public void execute(){
  VpnUser vpnUser=_entityMgr.findById(VpnUser.class,getEntityId());
  Account account=_entityMgr.findById(Account.class,vpnUser.getAccountId());
  if (!_ravService.applyVpnUsers(vpnUser.getAccountId(),userName)) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  VpnUsersResponse vpnResponse=new VpnUsersResponse();
  vpnResponse.setId(vpnUser.getUuid());
  vpnResponse.setUserName(vpnUser.getUsername());
  vpnResponse.setAccountName(account.getAccountName());
  Domain domain=_entityMgr.findById(Domain.class,account.getDomainId());
  if (domain != null) {
    vpnResponse.setDomainId(domain.getUuid());
    vpnResponse.setDomainName(domain.getName());
  }
  vpnResponse.setResponseName(getCommandName());
  vpnResponse.setObjectName(""String_Node_Str"");
  setResponseObject(vpnResponse);
}","@Override public void execute(){
  VpnUser vpnUser=_entityMgr.findById(VpnUser.class,getEntityId());
  Account account=_entityMgr.findById(Account.class,vpnUser.getAccountId());
  try {
    if (!_ravService.applyVpnUsers(vpnUser.getAccountId(),userName)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  VpnUsersResponse vpnResponse=new VpnUsersResponse();
  vpnResponse.setId(vpnUser.getUuid());
  vpnResponse.setUserName(vpnUser.getUsername());
  vpnResponse.setAccountName(account.getAccountName());
  Domain domain=_entityMgr.findById(Domain.class,account.getDomainId());
  if (domain != null) {
    vpnResponse.setDomainId(domain.getUuid());
    vpnResponse.setDomainName(domain.getName());
  }
  vpnResponse.setResponseName(getCommandName());
  vpnResponse.setObjectName(""String_Node_Str"");
  setResponseObject(vpnResponse);
}",0.9303831624392876
105119,"@Override public void execute(){
  Account owner=_accountService.getAccount(getEntityOwnerId());
  boolean result=_ravService.removeVpnUser(owner.getId(),userName,CallContext.current().getCallingAccount());
  if (!result) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  if (!_ravService.applyVpnUsers(owner.getId(),userName)) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  SuccessResponse response=new SuccessResponse(getCommandName());
  setResponseObject(response);
}","@Override public void execute(){
  Account owner=_accountService.getAccount(getEntityOwnerId());
  boolean result=_ravService.removeVpnUser(owner.getId(),userName,CallContext.current().getCallingAccount());
  if (!result) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  try {
    if (!_ravService.applyVpnUsers(owner.getId(),userName)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  SuccessResponse response=new SuccessResponse(getCommandName());
  setResponseObject(response);
}",0.8953771289537713
105120,"@DB @Override public boolean applyVpnUsers(long vpnOwnerId,String userName){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountDao.findById(vpnOwnerId);
  _accountMgr.checkAccess(caller,null,true,owner);
  s_logger.debug(""String_Node_Str"" + owner);
  List<RemoteAccessVpnVO> vpns=_remoteAccessVpnDao.findByAccount(vpnOwnerId);
  List<VpnUserVO> users=_vpnUsersDao.listByAccount(vpnOwnerId);
  for (  VpnUserVO user : users) {
    if (user.getState() == State.Active) {
      user.setState(State.Add);
      _vpnUsersDao.update(user.getId(),user);
    }
  }
  boolean success=true;
  boolean[] finals=new boolean[users.size()];
  for (  RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
    s_logger.debug(""String_Node_Str"" + element.getName());
    for (    RemoteAccessVpnVO vpn : vpns) {
      try {
        String[] results=element.applyVpnUsers(vpn,users);
        if (results != null) {
          for (int i=0; i < results.length; i++) {
            s_logger.debug(""String_Node_Str"" + users.get(i) + (results[i] == null ? ""String_Node_Str"" : (""String_Node_Str"" + results[i]) + ""String_Node_Str"")+ vpn);
            if (results[i] == null) {
              if (!finals[i]) {
                finals[i]=true;
              }
            }
 else {
              finals[i]=false;
              success=false;
            }
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
        success=false;
        for (int i=0; i < finals.length; i++) {
          finals[i]=false;
        }
      }
    }
  }
  for (int i=0; i < finals.length; i++) {
    final VpnUserVO user=users.get(i);
    if (finals[i]) {
      if (user.getState() == State.Add) {
        user.setState(State.Active);
        _vpnUsersDao.update(user.getId(),user);
      }
 else       if (user.getState() == State.Revoke) {
        _vpnUsersDao.remove(user.getId());
      }
    }
 else {
      if (user.getState() == State.Add && (user.getUsername()).equals(userName)) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _vpnUsersDao.remove(user.getId());
            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
          }
        }
);
      }
      s_logger.warn(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getAccountId());
    }
  }
  return success;
}","@DB @Override public boolean applyVpnUsers(long vpnOwnerId,String userName) throws ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountDao.findById(vpnOwnerId);
  _accountMgr.checkAccess(caller,null,true,owner);
  s_logger.debug(""String_Node_Str"" + owner);
  List<RemoteAccessVpnVO> vpns=_remoteAccessVpnDao.findByAccount(vpnOwnerId);
  RemoteAccessVpnVO vpnTemp=null;
  List<VpnUserVO> users=_vpnUsersDao.listByAccount(vpnOwnerId);
  for (  VpnUserVO user : users) {
    if (user.getState() == State.Active) {
      user.setState(State.Add);
      _vpnUsersDao.update(user.getId(),user);
    }
  }
  boolean success=true;
  boolean[] finals=new boolean[users.size()];
  for (  RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
    s_logger.debug(""String_Node_Str"" + element.getName());
    for (    RemoteAccessVpnVO vpn : vpns) {
      try {
        String[] results=element.applyVpnUsers(vpn,users);
        if (results != null) {
          for (int i=0; i < results.length; i++) {
            s_logger.debug(""String_Node_Str"" + users.get(i) + (results[i] == null ? ""String_Node_Str"" : (""String_Node_Str"" + results[i]) + ""String_Node_Str"")+ vpn);
            if (results[i] == null) {
              if (!finals[i]) {
                finals[i]=true;
              }
            }
 else {
              finals[i]=false;
              success=false;
              vpnTemp=vpn;
            }
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
        success=false;
        vpnTemp=vpn;
        for (int i=0; i < finals.length; i++) {
          finals[i]=false;
        }
      }
    }
  }
  for (int i=0; i < finals.length; i++) {
    final VpnUserVO user=users.get(i);
    if (finals[i]) {
      if (user.getState() == State.Add) {
        user.setState(State.Active);
        _vpnUsersDao.update(user.getId(),user);
      }
 else       if (user.getState() == State.Revoke) {
        _vpnUsersDao.remove(user.getId());
      }
    }
 else {
      if (user.getState() == State.Add && (user.getUsername()).equals(userName)) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _vpnUsersDao.remove(user.getId());
            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
          }
        }
);
      }
      s_logger.warn(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getAccountId());
    }
  }
  if (!success) {
    throw new ResourceUnavailableException(""String_Node_Str"",RemoteAccessVPNServiceProvider.class,vpnTemp.getId());
  }
  return success;
}",0.9467281105990784
105121,"boolean applyVpnUsers(long vpnOwnerId,String userName) throws ResourceUnavailableException ;","boolean applyVpnUsers(long vpnOwnerId,String userName);",0.7482993197278912
105122,"@Override public void execute(){
  VpnUser vpnUser=_entityMgr.findById(VpnUser.class,getEntityId());
  Account account=_entityMgr.findById(Account.class,vpnUser.getAccountId());
  try {
    if (!_ravService.applyVpnUsers(vpnUser.getAccountId(),userName)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  VpnUsersResponse vpnResponse=new VpnUsersResponse();
  vpnResponse.setId(vpnUser.getUuid());
  vpnResponse.setUserName(vpnUser.getUsername());
  vpnResponse.setAccountName(account.getAccountName());
  Domain domain=_entityMgr.findById(Domain.class,account.getDomainId());
  if (domain != null) {
    vpnResponse.setDomainId(domain.getUuid());
    vpnResponse.setDomainName(domain.getName());
  }
  vpnResponse.setResponseName(getCommandName());
  vpnResponse.setObjectName(""String_Node_Str"");
  setResponseObject(vpnResponse);
}","@Override public void execute(){
  VpnUser vpnUser=_entityMgr.findById(VpnUser.class,getEntityId());
  Account account=_entityMgr.findById(Account.class,vpnUser.getAccountId());
  if (!_ravService.applyVpnUsers(vpnUser.getAccountId(),userName)) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  VpnUsersResponse vpnResponse=new VpnUsersResponse();
  vpnResponse.setId(vpnUser.getUuid());
  vpnResponse.setUserName(vpnUser.getUsername());
  vpnResponse.setAccountName(account.getAccountName());
  Domain domain=_entityMgr.findById(Domain.class,account.getDomainId());
  if (domain != null) {
    vpnResponse.setDomainId(domain.getUuid());
    vpnResponse.setDomainName(domain.getName());
  }
  vpnResponse.setResponseName(getCommandName());
  vpnResponse.setObjectName(""String_Node_Str"");
  setResponseObject(vpnResponse);
}",0.9303831624392876
105123,"@Override public void execute(){
  Account owner=_accountService.getAccount(getEntityOwnerId());
  boolean result=_ravService.removeVpnUser(owner.getId(),userName,CallContext.current().getCallingAccount());
  if (!result) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  try {
    if (!_ravService.applyVpnUsers(owner.getId(),userName)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  SuccessResponse response=new SuccessResponse(getCommandName());
  setResponseObject(response);
}","@Override public void execute(){
  Account owner=_accountService.getAccount(getEntityOwnerId());
  boolean result=_ravService.removeVpnUser(owner.getId(),userName,CallContext.current().getCallingAccount());
  if (!result) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  if (!_ravService.applyVpnUsers(owner.getId(),userName)) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  SuccessResponse response=new SuccessResponse(getCommandName());
  setResponseObject(response);
}",0.8953771289537713
105124,"@DB @Override public boolean applyVpnUsers(long vpnOwnerId,String userName) throws ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountDao.findById(vpnOwnerId);
  _accountMgr.checkAccess(caller,null,true,owner);
  s_logger.debug(""String_Node_Str"" + owner);
  List<RemoteAccessVpnVO> vpns=_remoteAccessVpnDao.findByAccount(vpnOwnerId);
  RemoteAccessVpnVO vpnTemp=null;
  List<VpnUserVO> users=_vpnUsersDao.listByAccount(vpnOwnerId);
  for (  VpnUserVO user : users) {
    if (user.getState() == State.Active) {
      user.setState(State.Add);
      _vpnUsersDao.update(user.getId(),user);
    }
  }
  boolean success=true;
  boolean[] finals=new boolean[users.size()];
  for (  RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
    s_logger.debug(""String_Node_Str"" + element.getName());
    for (    RemoteAccessVpnVO vpn : vpns) {
      try {
        String[] results=element.applyVpnUsers(vpn,users);
        if (results != null) {
          for (int i=0; i < results.length; i++) {
            s_logger.debug(""String_Node_Str"" + users.get(i) + (results[i] == null ? ""String_Node_Str"" : (""String_Node_Str"" + results[i]) + ""String_Node_Str"")+ vpn);
            if (results[i] == null) {
              if (!finals[i]) {
                finals[i]=true;
              }
            }
 else {
              finals[i]=false;
              success=false;
              vpnTemp=vpn;
            }
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
        success=false;
        vpnTemp=vpn;
        for (int i=0; i < finals.length; i++) {
          finals[i]=false;
        }
      }
    }
  }
  for (int i=0; i < finals.length; i++) {
    final VpnUserVO user=users.get(i);
    if (finals[i]) {
      if (user.getState() == State.Add) {
        user.setState(State.Active);
        _vpnUsersDao.update(user.getId(),user);
      }
 else       if (user.getState() == State.Revoke) {
        _vpnUsersDao.remove(user.getId());
      }
    }
 else {
      if (user.getState() == State.Add && (user.getUsername()).equals(userName)) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _vpnUsersDao.remove(user.getId());
            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
          }
        }
);
      }
      s_logger.warn(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getAccountId());
    }
  }
  if (!success) {
    throw new ResourceUnavailableException(""String_Node_Str"",RemoteAccessVPNServiceProvider.class,vpnTemp.getId());
  }
  return success;
}","@DB @Override public boolean applyVpnUsers(long vpnOwnerId,String userName){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountDao.findById(vpnOwnerId);
  _accountMgr.checkAccess(caller,null,true,owner);
  s_logger.debug(""String_Node_Str"" + owner);
  List<RemoteAccessVpnVO> vpns=_remoteAccessVpnDao.findByAccount(vpnOwnerId);
  List<VpnUserVO> users=_vpnUsersDao.listByAccount(vpnOwnerId);
  for (  VpnUserVO user : users) {
    if (user.getState() == State.Active) {
      user.setState(State.Add);
      _vpnUsersDao.update(user.getId(),user);
    }
  }
  boolean success=true;
  boolean[] finals=new boolean[users.size()];
  for (  RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
    s_logger.debug(""String_Node_Str"" + element.getName());
    for (    RemoteAccessVpnVO vpn : vpns) {
      try {
        String[] results=element.applyVpnUsers(vpn,users);
        if (results != null) {
          for (int i=0; i < results.length; i++) {
            s_logger.debug(""String_Node_Str"" + users.get(i) + (results[i] == null ? ""String_Node_Str"" : (""String_Node_Str"" + results[i]) + ""String_Node_Str"")+ vpn);
            if (results[i] == null) {
              if (!finals[i]) {
                finals[i]=true;
              }
            }
 else {
              finals[i]=false;
              success=false;
            }
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
        success=false;
        for (int i=0; i < finals.length; i++) {
          finals[i]=false;
        }
      }
    }
  }
  for (int i=0; i < finals.length; i++) {
    final VpnUserVO user=users.get(i);
    if (finals[i]) {
      if (user.getState() == State.Add) {
        user.setState(State.Active);
        _vpnUsersDao.update(user.getId(),user);
      }
 else       if (user.getState() == State.Revoke) {
        _vpnUsersDao.remove(user.getId());
      }
    }
 else {
      if (user.getState() == State.Add && (user.getUsername()).equals(userName)) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _vpnUsersDao.remove(user.getId());
            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
          }
        }
);
      }
      s_logger.warn(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getAccountId());
    }
  }
  return success;
}",0.9467281105990784
105125,"public void createVpcAssociatePublicIPCommands(final VirtualRouter router,final List<? extends PublicIpAddress> ips,final Commands cmds,final Map<String,String> vlanMacAddress){
  final String ipAssocCommand=""String_Node_Str"";
  if (router.getIsRedundantRouter()) {
    createRedundantAssociateIPCommands(router,ips,cmds,ipAssocCommand,0);
    return;
  }
  Pair<IpAddressTO,Long> sourceNatIpAdd=null;
  Boolean addSourceNat=null;
  final Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    final String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {
      ipAddress.setState(IpAddress.State.Allocated);
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  final Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    final List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    final Integer networkRate=_networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(),router.getId());
    final Network network=_networkModel.getNetwork(ipAddrList.get(0).getNetworkId());
    final IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      final boolean add=ipAddr.getState() == IpAddress.State.Releasing ? false : true;
      final String macAddress=vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));
      final IpAddressTO ip=new IpAddressTO(ipAddr.getAccountId(),ipAddr.getAddress().addr(),add,false,ipAddr.isSourceNat(),BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(),ipAddr.getGateway(),ipAddr.getNetmask(),macAddress,networkRate,ipAddr.isOneToOneNat());
      ip.setTrafficType(network.getTrafficType());
      ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(),network));
      ipsToSend[i++]=ip;
      if (ipAddr.isSourceNat()) {
        sourceNatIpAdd=new Pair<IpAddressTO,Long>(ip,ipAddr.getNetworkId());
        addSourceNat=add;
      }
    }
    final IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,_routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(ipAssocCommand,cmd);
  }
  if (sourceNatIpAdd != null) {
    final IpAddressTO sourceNatIp=sourceNatIpAdd.first();
    final SetSourceNatCommand cmd=new SetSourceNatCommand(sourceNatIp,addSourceNat);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}","public void createVpcAssociatePublicIPCommands(final VirtualRouter router,final List<? extends PublicIpAddress> ips,final Commands cmds,final Map<String,String> vlanMacAddress){
  final String ipAssocCommand=""String_Node_Str"";
  if (router.getIsRedundantRouter()) {
    createRedundantAssociateIPCommands(router,ips,cmds,ipAssocCommand,0);
    return;
  }
  Pair<IpAddressTO,Long> sourceNatIpAdd=null;
  Boolean addSourceNat=null;
  final Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    final String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    if (ipAddress.isSourceNat() && ipAddress.getState() == IpAddress.State.Releasing) {
      ipAddress.setState(IpAddress.State.Allocated);
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  final Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    final List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      final PublicIpAddress o1,      final PublicIpAddress o2){
        final boolean s1=o1.isSourceNat();
        final boolean s2=o2.isSourceNat();
        return s1 ^ s2 ? s1 ^ true ? 1 : -1 : 0;
      }
    }
);
    final Integer networkRate=_networkModel.getNetworkRate(ipAddrList.get(0).getNetworkId(),router.getId());
    final Network network=_networkModel.getNetwork(ipAddrList.get(0).getNetworkId());
    final IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      final boolean add=ipAddr.getState() == IpAddress.State.Releasing ? false : true;
      boolean sourceNat=ipAddr.isSourceNat();
      if (firstIP) {
        sourceNat=true;
      }
      final String macAddress=vlanMacAddress.get(BroadcastDomainType.getValue(BroadcastDomainType.fromString(ipAddr.getVlanTag())));
      final IpAddressTO ip=new IpAddressTO(ipAddr.getAccountId(),ipAddr.getAddress().addr(),add,firstIP,sourceNat,BroadcastDomainType.fromString(ipAddr.getVlanTag()).toString(),ipAddr.getGateway(),ipAddr.getNetmask(),macAddress,networkRate,ipAddr.isOneToOneNat());
      ip.setTrafficType(network.getTrafficType());
      ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(),network));
      ipsToSend[i++]=ip;
      if (ipAddr.isSourceNat()) {
        sourceNatIpAdd=new Pair<IpAddressTO,Long>(ip,ipAddr.getNetworkId());
        addSourceNat=add;
      }
      if (!firstIP || add) {
        firstIP=false;
      }
    }
    final IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,_routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(),router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(ipAssocCommand,cmd);
  }
  if (sourceNatIpAdd != null) {
    final IpAddressTO sourceNatIp=sourceNatIpAdd.first();
    final SetSourceNatCommand cmd=new SetSourceNatCommand(sourceNatIp,addSourceNat);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,_routerControlHelper.getRouterControlIp(router.getId()));
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}",0.928192898781134
105126,"public VM createWorkingVM(final Connection conn,final String vmName,final String guestOSType,final String platformEmulator,final List<VolumeObjectTO> listVolumeTo) throws BadServerResponse, Types.VmBadPowerState, Types.SrFull, Types.OperationNotAllowed, XenAPIException, XmlRpcException {
  final String guestOsTypeName=platformEmulator;
  if (guestOsTypeName == null) {
    final String msg=""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ guestOSType+ ""String_Node_Str"";
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  final VM template=getVM(conn,guestOsTypeName);
  final VM vm=template.createClone(conn,vmName);
  vm.setIsATemplate(conn,false);
  final Map<VDI,VolumeObjectTO> vdiMap=new HashMap<VDI,VolumeObjectTO>();
  for (  final VolumeObjectTO volume : listVolumeTo) {
    final String vdiUuid=volume.getPath();
    try {
      final VDI vdi=VDI.getByUuid(conn,vdiUuid);
      vdiMap.put(vdi,volume);
    }
 catch (    final Types.UuidInvalid e) {
      s_logger.warn(""String_Node_Str"" + vdiUuid + ""String_Node_Str"");
    }
  }
  for (  final Map.Entry<VDI,VolumeObjectTO> entry : vdiMap.entrySet()) {
    final VDI vdi=entry.getKey();
    final VolumeObjectTO volumeTO=entry.getValue();
    final VBD.Record vbdr=new VBD.Record();
    vbdr.VM=vm;
    vbdr.VDI=vdi;
    if (volumeTO.getVolumeType() == Volume.Type.ROOT) {
      vbdr.bootable=true;
      vbdr.unpluggable=false;
    }
 else {
      vbdr.bootable=false;
      vbdr.unpluggable=true;
    }
    vbdr.userdevice=""String_Node_Str"";
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
    VBD.create(conn,vbdr);
  }
  return vm;
}","public VM createWorkingVM(final Connection conn,final String vmName,final String guestOSType,final String platformEmulator,final List<VolumeObjectTO> listVolumeTo) throws BadServerResponse, Types.VmBadPowerState, Types.SrFull, Types.OperationNotAllowed, XenAPIException, XmlRpcException {
  final String guestOsTypeName=platformEmulator;
  if (guestOsTypeName == null) {
    final String msg=""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ guestOSType+ ""String_Node_Str"";
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  final VM template=getVM(conn,guestOsTypeName);
  final VM vm=template.createClone(conn,vmName);
  vm.setIsATemplate(conn,false);
  final Map<VDI,VolumeObjectTO> vdiMap=new HashMap<VDI,VolumeObjectTO>();
  for (  final VolumeObjectTO volume : listVolumeTo) {
    final String vdiUuid=volume.getPath();
    try {
      final VDI vdi=VDI.getByUuid(conn,vdiUuid);
      vdiMap.put(vdi,volume);
    }
 catch (    final Types.UuidInvalid e) {
      s_logger.warn(""String_Node_Str"" + vdiUuid + ""String_Node_Str"");
    }
  }
  for (  final Map.Entry<VDI,VolumeObjectTO> entry : vdiMap.entrySet()) {
    final VDI vdi=entry.getKey();
    final VolumeObjectTO volumeTO=entry.getValue();
    final VBD.Record vbdr=new VBD.Record();
    vbdr.VM=vm;
    vbdr.VDI=vdi;
    if (volumeTO.getVolumeType() == Volume.Type.ROOT) {
      vbdr.bootable=true;
      vbdr.unpluggable=false;
    }
 else {
      vbdr.bootable=false;
      vbdr.unpluggable=true;
    }
    vbdr.userdevice=""String_Node_Str"";
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
    Long deviceId=volumeTO.getDeviceId();
    if (deviceId != null && (!isDeviceUsed(conn,vm,deviceId) || deviceId > 3)) {
      vbdr.userdevice=deviceId.toString();
    }
    VBD.create(conn,vbdr);
  }
  return vm;
}",0.9506314580941446
105127,"protected boolean destroySnapshotOnPrimaryStorageExceptThis(final Connection conn,final String volumeUuid,final String avoidSnapshotUuid){
  try {
    final VDI volume=getVDIbyUuid(conn,volumeUuid);
    if (volume == null) {
      throw new InternalErrorException(""String_Node_Str"" + volumeUuid + ""String_Node_Str"");
    }
    VDI avoidSnapshot=getVDIbyUuid(conn,avoidSnapshotUuid);
    if (avoidSnapshot == null) {
      throw new InternalErrorException(""String_Node_Str"" + avoidSnapshotUuid);
    }
    final Set<VDI> snapshots=volume.getSnapshots(conn);
    for (    final VDI snapshot : snapshots) {
      try {
        if (!snapshot.getUuid(conn).equals(avoidSnapshotUuid) && snapshot.getSnapshotTime(conn).before(avoidSnapshot.getSnapshotTime(conn))) {
          snapshot.destroy(conn);
        }
      }
 catch (      final Exception e) {
        final String msg=""String_Node_Str"" + snapshot + ""String_Node_Str""+ e.toString();
        s_logger.warn(msg,e);
      }
    }
    s_logger.debug(""String_Node_Str"" + volumeUuid + ""String_Node_Str""+ avoidSnapshotUuid);
    return true;
  }
 catch (  final XenAPIException e) {
    final String msg=""String_Node_Str"" + volumeUuid + ""String_Node_Str""+ avoidSnapshotUuid+ ""String_Node_Str""+ e.toString();
    s_logger.error(msg,e);
  }
catch (  final Exception e) {
    final String msg=""String_Node_Str"" + volumeUuid + ""String_Node_Str""+ avoidSnapshotUuid+ ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
  }
  return false;
}","protected boolean destroySnapshotOnPrimaryStorageExceptThis(final Connection conn,final String volumeUuid,final String avoidSnapshotUuid){
  try {
    final VDI volume=getVDIbyUuid(conn,volumeUuid);
    if (volume == null) {
      throw new InternalErrorException(""String_Node_Str"" + volumeUuid + ""String_Node_Str"");
    }
    VDI avoidSnapshot=getVDIbyUuid(conn,avoidSnapshotUuid);
    if (avoidSnapshot == null) {
      throw new InternalErrorException(""String_Node_Str"" + avoidSnapshotUuid);
    }
    final Set<VDI> snapshots=volume.getSnapshots(conn);
    for (    final VDI snapshot : snapshots) {
      try {
        if (!snapshot.getUuid(conn).equals(avoidSnapshotUuid) && snapshot.getSnapshotTime(conn).before(avoidSnapshot.getSnapshotTime(conn)) && snapshot.getVBDs(conn).isEmpty()) {
          snapshot.destroy(conn);
        }
      }
 catch (      final Exception e) {
        final String msg=""String_Node_Str"" + snapshot + ""String_Node_Str""+ e.toString();
        s_logger.warn(msg,e);
      }
    }
    s_logger.debug(""String_Node_Str"" + volumeUuid + ""String_Node_Str""+ avoidSnapshotUuid);
    return true;
  }
 catch (  final XenAPIException e) {
    final String msg=""String_Node_Str"" + volumeUuid + ""String_Node_Str""+ avoidSnapshotUuid+ ""String_Node_Str""+ e.toString();
    s_logger.error(msg,e);
  }
catch (  final Exception e) {
    final String msg=""String_Node_Str"" + volumeUuid + ""String_Node_Str""+ avoidSnapshotUuid+ ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
  }
  return false;
}",0.988031914893617
105128,"@Override public Answer createVolumeFromSnapshot(final CopyCommand cmd){
  final Connection conn=hypervisorResource.getConnection();
  final DataTO srcData=cmd.getSrcTO();
  final SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  final DataTO destData=cmd.getDestTO();
  final PrimaryDataStoreTO pool=(PrimaryDataStoreTO)destData.getDataStore();
  final VolumeObjectTO volume=(VolumeObjectTO)destData;
  final DataStoreTO imageStore=srcData.getDataStore();
  if (srcData.getDataStore() instanceof PrimaryDataStoreTO && destData.getDataStore() instanceof PrimaryDataStoreTO) {
    return createVolumeFromSnapshot2(cmd);
  }
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  final NfsTO nfsImageStore=(NfsTO)imageStore;
  final String primaryStorageNameLabel=pool.getUuid();
  final String secondaryStorageUrl=nfsImageStore.getUrl();
  final int wait=cmd.getWait();
  boolean result=false;
  String details=null;
  String volumeUUID=null;
  if (secondaryStorageUrl == null) {
    details+=""String_Node_Str"" + secondaryStorageUrl + ""String_Node_Str"";
    return new CopyCmdAnswer(details);
  }
  SR srcSr=null;
  VDI destVdi=null;
  try {
    final SR primaryStorageSR=hypervisorResource.getSRByNameLabelandHost(conn,primaryStorageNameLabel);
    if (primaryStorageSR == null) {
      throw new InternalErrorException(""String_Node_Str"" + primaryStorageNameLabel);
    }
    final String nameLabel=""String_Node_Str"" + UUID.randomUUID().toString();
    destVdi=createVdi(conn,nameLabel,primaryStorageSR,volume.getSize());
    volumeUUID=destVdi.getUuid(conn);
    final String snapshotInstallPath=snapshot.getPath();
    final int index=snapshotInstallPath.lastIndexOf(File.separator);
    final String snapshotDirectory=snapshotInstallPath.substring(0,index);
    final String snapshotUuid=getSnapshotUuid(snapshotInstallPath);
    final URI uri=new URI(secondaryStorageUrl);
    srcSr=createFileSr(conn,uri.getHost() + ""String_Node_Str"" + uri.getPath(),snapshotDirectory);
    final String[] parents=snapshot.getParents();
    final List<VDI> snapshotChains=new ArrayList<VDI>();
    if (parents != null) {
      for (int i=0; i < parents.length; i++) {
        final String snChainPath=parents[i];
        final String uuid=getSnapshotUuid(snChainPath);
        final VDI chain=VDI.getByUuid(conn,uuid);
        snapshotChains.add(chain);
      }
    }
    final VDI snapshotVdi=VDI.getByUuid(conn,snapshotUuid);
    snapshotChains.add(snapshotVdi);
    for (    final VDI snapChain : snapshotChains) {
      final Task task=snapChain.copyAsync(conn,null,null,destVdi);
      hypervisorResource.waitForTask(conn,task,1000,wait * 1000);
      hypervisorResource.checkForSuccess(conn,task);
      task.destroy(conn);
    }
    result=true;
    destVdi=VDI.getByUuid(conn,volumeUUID);
    final VDI.Record vdir=destVdi.getRecord(conn);
    final VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(volumeUUID);
    newVol.setSize(vdir.virtualSize);
    return new CopyCmdAnswer(newVol);
  }
 catch (  final Types.XenAPIException e) {
    details+=""String_Node_Str"" + e.toString();
    s_logger.warn(details,e);
  }
catch (  final Exception e) {
    details+=""String_Node_Str"" + e.getMessage();
    s_logger.warn(details,e);
  }
 finally {
    if (srcSr != null) {
      hypervisorResource.removeSR(conn,srcSr);
    }
    if (!result && destVdi != null) {
      try {
        destVdi.destroy(conn);
      }
 catch (      final Exception e) {
        s_logger.debug(""String_Node_Str"",e);
      }
    }
  }
  if (!result) {
    s_logger.error(details);
  }
  return new CopyCmdAnswer(details);
}","@Override public Answer createVolumeFromSnapshot(final CopyCommand cmd){
  final Connection conn=hypervisorResource.getConnection();
  final DataTO srcData=cmd.getSrcTO();
  final SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  final DataTO destData=cmd.getDestTO();
  final PrimaryDataStoreTO pool=(PrimaryDataStoreTO)destData.getDataStore();
  final VolumeObjectTO volume=(VolumeObjectTO)destData;
  final DataStoreTO imageStore=srcData.getDataStore();
  if (srcData.getDataStore() instanceof PrimaryDataStoreTO && destData.getDataStore() instanceof PrimaryDataStoreTO) {
    return createVolumeFromSnapshot2(cmd);
  }
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  final NfsTO nfsImageStore=(NfsTO)imageStore;
  final String primaryStorageNameLabel=pool.getUuid();
  final String secondaryStorageUrl=nfsImageStore.getUrl();
  final int wait=cmd.getWait();
  boolean result=false;
  String details=null;
  String volumeUUID=null;
  if (secondaryStorageUrl == null) {
    details+=""String_Node_Str"" + secondaryStorageUrl + ""String_Node_Str"";
    return new CopyCmdAnswer(details);
  }
  SR srcSr=null;
  VDI destVdi=null;
  try {
    final SR primaryStorageSR=hypervisorResource.getSRByNameLabelandHost(conn,primaryStorageNameLabel);
    if (primaryStorageSR == null) {
      throw new InternalErrorException(""String_Node_Str"" + primaryStorageNameLabel);
    }
    final String nameLabel=""String_Node_Str"" + UUID.randomUUID().toString();
    destVdi=createVdi(conn,nameLabel,primaryStorageSR,volume.getSize());
    volumeUUID=destVdi.getUuid(conn);
    final String snapshotInstallPath=snapshot.getPath();
    final int index=snapshotInstallPath.lastIndexOf(File.separator);
    final String snapshotDirectory=snapshotInstallPath.substring(0,index);
    final String snapshotUuid=getSnapshotUuid(snapshotInstallPath);
    final URI uri=new URI(secondaryStorageUrl);
    srcSr=createFileSr(conn,uri.getHost() + ""String_Node_Str"" + uri.getPath(),snapshotDirectory);
    final String[] parents=snapshot.getParents();
    final List<VDI> snapshotChains=new ArrayList<VDI>();
    if (parents != null) {
      for (int i=0; i < parents.length; i++) {
        final String snChainPath=parents[i];
        final String uuid=getSnapshotUuid(snChainPath);
        final VDI chain=VDI.getByUuid(conn,uuid);
        snapshotChains.add(chain);
      }
    }
    final VDI snapshotVdi=VDI.getByUuid(conn,snapshotUuid);
    snapshotChains.add(snapshotVdi);
    for (    final VDI snapChain : snapshotChains) {
      final Task task=snapChain.copyAsync(conn,null,null,destVdi);
      hypervisorResource.waitForTask(conn,task,1000,wait * 1000);
      hypervisorResource.checkForSuccess(conn,task);
      task.destroy(conn);
    }
    result=true;
    destVdi=VDI.getByUuid(conn,volumeUUID);
    final VDI.Record vdir=destVdi.getRecord(conn);
    final VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(volumeUUID);
    newVol.setSize(vdir.virtualSize);
    return new CopyCmdAnswer(newVol);
  }
 catch (  final Types.XenAPIException e) {
    details+=""String_Node_Str"" + e.toString();
    s_logger.warn(details,e);
  }
catch (  final Exception e) {
    details+=""String_Node_Str"" + e.getMessage();
    s_logger.warn(details,e);
  }
 finally {
    if (srcSr != null) {
      hypervisorResource.skipOrRemoveSR(conn,srcSr);
    }
    if (!result && destVdi != null) {
      try {
        destVdi.destroy(conn);
      }
 catch (      final Exception e) {
        s_logger.debug(""String_Node_Str"",e);
      }
    }
  }
  if (!result) {
    s_logger.error(details);
  }
  return new CopyCmdAnswer(details);
}",0.9989044097507532
105129,"@Override @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_CREATE,eventDescription=""String_Node_Str"",create=true) public Snapshot allocSnapshot(Long volumeId,Long policyId,String snapshotName) throws ResourceAllocationException {
  Account caller=CallContext.current().getCallingAccount();
  VolumeInfo volume=volFactory.getVolume(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  DataCenter zone=_dcDao.findById(volume.getDataCenterId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volume.getDataCenterId());
  }
  if (volume.getInstanceId() != null) {
    if (_vmSnapshotDao.findByVm(volume.getInstanceId()).size() > 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getName());
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (ImageFormat.DIR.equals(volume.getFormat())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  StoragePool storagePool=(StoragePool)volume.getDataStore();
  if (storagePool == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  return snapshotMgr.allocSnapshot(volumeId,policyId,snapshotName);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_CREATE,eventDescription=""String_Node_Str"",create=true) public Snapshot allocSnapshot(Long volumeId,Long policyId,String snapshotName) throws ResourceAllocationException {
  Account caller=CallContext.current().getCallingAccount();
  VolumeInfo volume=volFactory.getVolume(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  DataCenter zone=_dcDao.findById(volume.getDataCenterId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volume.getDataCenterId());
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getName());
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (ImageFormat.DIR.equals(volume.getFormat())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  StoragePool storagePool=(StoragePool)volume.getDataStore();
  if (storagePool == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  return snapshotMgr.allocSnapshot(volumeId,policyId,snapshotName);
}",0.949825596994902
105130,"@Override public VMSnapshot allocVMSnapshot(Long vmId,String vsDisplayName,String vsDescription,Boolean snapshotMemory) throws ResourceAllocationException {
  Account caller=getCaller();
  UserVmVO userVmVo=_userVMDao.findById(vmId);
  if (userVmVo == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (_snapshotDao.listByInstanceId(vmId,Snapshot.State.BackedUp).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (snapshotMemory && _serviceOfferingDetailsDao.findDetail(userVmVo.getServiceOfferingId(),GPU.Keys.vgpuType.toString()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!_hypervisorCapabilitiesDao.isVmSnapshotEnabled(userVmVo.getHypervisorType(),""String_Node_Str""))   throw new InvalidParameterValueException(""String_Node_Str"" + userVmVo.getHypervisorType());
  if (vsDisplayName != null && vsDisplayName.length() > 255)   throw new InvalidParameterValueException(""String_Node_Str"");
  if (vsDescription != null && vsDescription.length() > 255)   throw new InvalidParameterValueException(""String_Node_Str"");
  String timeString=DateUtil.getDateDisplayString(DateUtil.GMT_TIMEZONE,new Date(),DateUtil.YYYYMMDD_FORMAT);
  String vmSnapshotName=userVmVo.getInstanceName() + ""String_Node_Str"" + timeString;
  if (vsDisplayName == null) {
    vsDisplayName=vmSnapshotName;
  }
  if (_vmSnapshotDao.findByName(vmId,vsDisplayName) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vsDisplayName + ""String_Node_Str"");
  }
  if (userVmVo.getState() != VirtualMachine.State.Running && userVmVo.getState() != VirtualMachine.State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (snapshotMemory && userVmVo.getState() == VirtualMachine.State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,true,userVmVo);
  if (_vmSnapshotDao.findByVm(vmId).size() >= _vmSnapshotMax) {
    throw new CloudRuntimeException(""String_Node_Str"" + _vmSnapshotMax + ""String_Node_Str"");
  }
  List<VolumeVO> listVolumes=_volumeDao.findByInstance(vmId);
  for (  VolumeVO volume : listVolumes) {
    List<SnapshotVO> activeSnapshots=_snapshotDao.listByInstanceId(volume.getInstanceId(),Snapshot.State.Creating,Snapshot.State.CreatedOnPrimary,Snapshot.State.BackingUp);
    if (activeSnapshots.size() > 0) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (hasActiveVMSnapshotTasks(vmId)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  VMSnapshot.Type vmSnapshotType=VMSnapshot.Type.Disk;
  if (snapshotMemory && userVmVo.getState() == VirtualMachine.State.Running)   vmSnapshotType=VMSnapshot.Type.DiskAndMemory;
  try {
    VMSnapshotVO vmSnapshotVo=new VMSnapshotVO(userVmVo.getAccountId(),userVmVo.getDomainId(),vmId,vsDescription,vmSnapshotName,vsDisplayName,userVmVo.getServiceOfferingId(),vmSnapshotType,null);
    VMSnapshot vmSnapshot=_vmSnapshotDao.persist(vmSnapshotVo);
    if (vmSnapshot == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vmId);
    }
    return vmSnapshot;
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    s_logger.error(""String_Node_Str"" + vmId + ""String_Node_Str""+ msg);
  }
  return null;
}","@Override public VMSnapshot allocVMSnapshot(Long vmId,String vsDisplayName,String vsDescription,Boolean snapshotMemory) throws ResourceAllocationException {
  Account caller=getCaller();
  UserVmVO userVmVo=_userVMDao.findById(vmId);
  if (userVmVo == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (snapshotMemory && _serviceOfferingDetailsDao.findDetail(userVmVo.getServiceOfferingId(),GPU.Keys.vgpuType.toString()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!_hypervisorCapabilitiesDao.isVmSnapshotEnabled(userVmVo.getHypervisorType(),""String_Node_Str""))   throw new InvalidParameterValueException(""String_Node_Str"" + userVmVo.getHypervisorType());
  if (vsDisplayName != null && vsDisplayName.length() > 255)   throw new InvalidParameterValueException(""String_Node_Str"");
  if (vsDescription != null && vsDescription.length() > 255)   throw new InvalidParameterValueException(""String_Node_Str"");
  String timeString=DateUtil.getDateDisplayString(DateUtil.GMT_TIMEZONE,new Date(),DateUtil.YYYYMMDD_FORMAT);
  String vmSnapshotName=userVmVo.getInstanceName() + ""String_Node_Str"" + timeString;
  if (vsDisplayName == null) {
    vsDisplayName=vmSnapshotName;
  }
  if (_vmSnapshotDao.findByName(vmId,vsDisplayName) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vsDisplayName + ""String_Node_Str"");
  }
  if (userVmVo.getState() != VirtualMachine.State.Running && userVmVo.getState() != VirtualMachine.State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (snapshotMemory && userVmVo.getState() == VirtualMachine.State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (userVmVo.getHypervisorType() == HypervisorType.KVM && userVmVo.getState() == State.Running && !snapshotMemory) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,true,userVmVo);
  if (_vmSnapshotDao.findByVm(vmId).size() >= _vmSnapshotMax) {
    throw new CloudRuntimeException(""String_Node_Str"" + _vmSnapshotMax + ""String_Node_Str"");
  }
  List<VolumeVO> listVolumes=_volumeDao.findByInstance(vmId);
  for (  VolumeVO volume : listVolumes) {
    List<SnapshotVO> activeSnapshots=_snapshotDao.listByInstanceId(volume.getInstanceId(),Snapshot.State.Creating,Snapshot.State.CreatedOnPrimary,Snapshot.State.BackingUp);
    if (activeSnapshots.size() > 0) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (hasActiveVMSnapshotTasks(vmId)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  VMSnapshot.Type vmSnapshotType=VMSnapshot.Type.Disk;
  if (snapshotMemory && userVmVo.getState() == VirtualMachine.State.Running)   vmSnapshotType=VMSnapshot.Type.DiskAndMemory;
  try {
    VMSnapshotVO vmSnapshotVo=new VMSnapshotVO(userVmVo.getAccountId(),userVmVo.getDomainId(),vmId,vsDescription,vmSnapshotName,vsDisplayName,userVmVo.getServiceOfferingId(),vmSnapshotType,null);
    VMSnapshot vmSnapshot=_vmSnapshotDao.persist(vmSnapshotVo);
    if (vmSnapshot == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vmId);
    }
    return vmSnapshot;
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    s_logger.error(""String_Node_Str"" + vmId + ""String_Node_Str""+ msg);
  }
  return null;
}",0.9785950294497916
105131,"public DatabaseUpgradeChecker(){
  _dao=new VersionDaoImpl();
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade431to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade432to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade443to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade444to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade453to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade303to304(),new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to303(),new Upgrade303to304(),new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to303(),new Upgrade303to304(),new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  final List<CloudStackVersion> sortedVersions=newArrayList(_upgradeMap.keySet());
  sort(sortedVersions);
  availableVersions=ImmutableList.copyOf(sortedVersions);
}","public DatabaseUpgradeChecker(){
  _dao=new VersionDaoImpl();
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade222to224(),new UpgradeSnapshot223to224(),new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade224to225(),new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade225to226(),new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade227to228(),new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade228to229(),new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade229to2210(),new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2210to2211(),new Upgrade2211to2212(),new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2212to2213(),new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2213to2214(),new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade301to302(),new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade302to40(),new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade40to41(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade431to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade432to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade443to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade444to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade453to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade303to304(),new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to303(),new Upgrade303to304(),new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  _upgradeMap.put(CloudStackVersion.parse(""String_Node_Str""),new DbUpgrade[]{new Upgrade2214to30(),new Upgrade30to301(),new Upgrade301to302(),new Upgrade302to303(),new Upgrade303to304(),new Upgrade304to305(),new Upgrade305to306(),new Upgrade306to307(),new Upgrade307to410(),new Upgrade410to420(),new Upgrade420to421(),new Upgrade421to430(),new Upgrade430to440(),new Upgrade440to441(),new Upgrade441to442(),new Upgrade442to450(),new Upgrade450to451(),new Upgrade451to452(),new Upgrade452to460(),new Upgrade460to461(),new Upgrade461to470(),new Upgrade470to471(),new Upgrade471to480(),new Upgrade480to481(),new Upgrade481to490(),new Upgrade490to4910(),new Upgrade4910to4920()});
  final List<CloudStackVersion> sortedVersions=newArrayList(_upgradeMap.keySet());
  sort(sortedVersions);
  availableVersions=ImmutableList.copyOf(sortedVersions);
}",0.9995870958476204
105132,"boolean applyVpnUsers(long vpnOwnerId,String userName);","boolean applyVpnUsers(long vpnOwnerId,String userName) throws ResourceUnavailableException ;",0.7482993197278912
105133,"@Override public void execute(){
  VpnUser vpnUser=_entityMgr.findById(VpnUser.class,getEntityId());
  Account account=_entityMgr.findById(Account.class,vpnUser.getAccountId());
  if (!_ravService.applyVpnUsers(vpnUser.getAccountId(),userName)) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  VpnUsersResponse vpnResponse=new VpnUsersResponse();
  vpnResponse.setId(vpnUser.getUuid());
  vpnResponse.setUserName(vpnUser.getUsername());
  vpnResponse.setAccountName(account.getAccountName());
  Domain domain=_entityMgr.findById(Domain.class,account.getDomainId());
  if (domain != null) {
    vpnResponse.setDomainId(domain.getUuid());
    vpnResponse.setDomainName(domain.getName());
  }
  vpnResponse.setResponseName(getCommandName());
  vpnResponse.setObjectName(""String_Node_Str"");
  setResponseObject(vpnResponse);
}","@Override public void execute(){
  VpnUser vpnUser=_entityMgr.findById(VpnUser.class,getEntityId());
  Account account=_entityMgr.findById(Account.class,vpnUser.getAccountId());
  try {
    if (!_ravService.applyVpnUsers(vpnUser.getAccountId(),userName)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  VpnUsersResponse vpnResponse=new VpnUsersResponse();
  vpnResponse.setId(vpnUser.getUuid());
  vpnResponse.setUserName(vpnUser.getUsername());
  vpnResponse.setAccountName(account.getAccountName());
  Domain domain=_entityMgr.findById(Domain.class,account.getDomainId());
  if (domain != null) {
    vpnResponse.setDomainId(domain.getUuid());
    vpnResponse.setDomainName(domain.getName());
  }
  vpnResponse.setResponseName(getCommandName());
  vpnResponse.setObjectName(""String_Node_Str"");
  setResponseObject(vpnResponse);
}",0.9303831624392876
105134,"@Override public void execute(){
  Account owner=_accountService.getAccount(getEntityOwnerId());
  boolean result=_ravService.removeVpnUser(owner.getId(),userName,CallContext.current().getCallingAccount());
  if (!result) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  if (!_ravService.applyVpnUsers(owner.getId(),userName)) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  SuccessResponse response=new SuccessResponse(getCommandName());
  setResponseObject(response);
}","@Override public void execute(){
  Account owner=_accountService.getAccount(getEntityOwnerId());
  boolean result=_ravService.removeVpnUser(owner.getId(),userName,CallContext.current().getCallingAccount());
  if (!result) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  try {
    if (!_ravService.applyVpnUsers(owner.getId(),userName)) {
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
  SuccessResponse response=new SuccessResponse(getCommandName());
  setResponseObject(response);
}",0.8953771289537713
105135,"@DB @Override public boolean applyVpnUsers(long vpnOwnerId,String userName){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountDao.findById(vpnOwnerId);
  _accountMgr.checkAccess(caller,null,true,owner);
  s_logger.debug(""String_Node_Str"" + owner);
  List<RemoteAccessVpnVO> vpns=_remoteAccessVpnDao.findByAccount(vpnOwnerId);
  List<VpnUserVO> users=_vpnUsersDao.listByAccount(vpnOwnerId);
  for (  VpnUserVO user : users) {
    if (user.getState() == State.Active) {
      user.setState(State.Add);
      _vpnUsersDao.update(user.getId(),user);
    }
  }
  boolean success=true;
  boolean[] finals=new boolean[users.size()];
  for (  RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
    s_logger.debug(""String_Node_Str"" + element.getName());
    for (    RemoteAccessVpnVO vpn : vpns) {
      try {
        String[] results=element.applyVpnUsers(vpn,users);
        if (results != null) {
          for (int i=0; i < results.length; i++) {
            s_logger.debug(""String_Node_Str"" + users.get(i) + (results[i] == null ? ""String_Node_Str"" : (""String_Node_Str"" + results[i]) + ""String_Node_Str"")+ vpn);
            if (results[i] == null) {
              if (!finals[i]) {
                finals[i]=true;
              }
            }
 else {
              finals[i]=false;
              success=false;
            }
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
        success=false;
        for (int i=0; i < finals.length; i++) {
          finals[i]=false;
        }
      }
    }
  }
  for (int i=0; i < finals.length; i++) {
    final VpnUserVO user=users.get(i);
    if (finals[i]) {
      if (user.getState() == State.Add) {
        user.setState(State.Active);
        _vpnUsersDao.update(user.getId(),user);
      }
 else       if (user.getState() == State.Revoke) {
        _vpnUsersDao.remove(user.getId());
      }
    }
 else {
      if (user.getState() == State.Add && (user.getUsername()).equals(userName)) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _vpnUsersDao.remove(user.getId());
            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
          }
        }
);
      }
      s_logger.warn(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getAccountId());
    }
  }
  return success;
}","@DB @Override public boolean applyVpnUsers(long vpnOwnerId,String userName) throws ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountDao.findById(vpnOwnerId);
  _accountMgr.checkAccess(caller,null,true,owner);
  s_logger.debug(""String_Node_Str"" + owner);
  List<RemoteAccessVpnVO> vpns=_remoteAccessVpnDao.findByAccount(vpnOwnerId);
  RemoteAccessVpnVO vpnTemp=null;
  List<VpnUserVO> users=_vpnUsersDao.listByAccount(vpnOwnerId);
  for (  VpnUserVO user : users) {
    if (user.getState() == State.Active) {
      user.setState(State.Add);
      _vpnUsersDao.update(user.getId(),user);
    }
  }
  boolean success=true;
  boolean[] finals=new boolean[users.size()];
  for (  RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
    s_logger.debug(""String_Node_Str"" + element.getName());
    for (    RemoteAccessVpnVO vpn : vpns) {
      try {
        String[] results=element.applyVpnUsers(vpn,users);
        if (results != null) {
          for (int i=0; i < results.length; i++) {
            s_logger.debug(""String_Node_Str"" + users.get(i) + (results[i] == null ? ""String_Node_Str"" : (""String_Node_Str"" + results[i]) + ""String_Node_Str"")+ vpn);
            if (results[i] == null) {
              if (!finals[i]) {
                finals[i]=true;
              }
            }
 else {
              finals[i]=false;
              success=false;
              vpnTemp=vpn;
            }
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
        success=false;
        vpnTemp=vpn;
        for (int i=0; i < finals.length; i++) {
          finals[i]=false;
        }
      }
    }
  }
  for (int i=0; i < finals.length; i++) {
    final VpnUserVO user=users.get(i);
    if (finals[i]) {
      if (user.getState() == State.Add) {
        user.setState(State.Active);
        _vpnUsersDao.update(user.getId(),user);
      }
 else       if (user.getState() == State.Revoke) {
        _vpnUsersDao.remove(user.getId());
      }
    }
 else {
      if (user.getState() == State.Add && (user.getUsername()).equals(userName)) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _vpnUsersDao.remove(user.getId());
            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
          }
        }
);
      }
      s_logger.warn(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getAccountId());
    }
  }
  if (!success) {
    throw new ResourceUnavailableException(""String_Node_Str"",RemoteAccessVPNServiceProvider.class,vpnTemp.getId());
  }
  return success;
}",0.9467281105990784
105136,"@Override public boolean isRedundant(){
  return this.isRedundant;
}","@Override public boolean isRedundant(){
  return this.redundant;
}",0.9701492537313432
105137,"public void setIsReduntant(boolean reduntant){
  this.isRedundant=reduntant;
}","public void setIsReduntant(boolean reduntant){
  this.redundant=reduntant;
}",0.974025974025974
105138,"public VBD createVbd(final Connection conn,final DiskTO volume,final String vmName,final VM vm,final BootloaderType bootLoaderType,VDI vdi) throws XmlRpcException, XenAPIException {
  final Volume.Type type=volume.getType();
  if (vdi == null) {
    vdi=mount(conn,vmName,volume);
  }
  if (vdi != null) {
    if (""String_Node_Str"".equals(vdi.getNameLabel(conn))) {
      vdi.setNameLabel(conn,vmName + ""String_Node_Str"");
    }
    final Map<String,String> smConfig=vdi.getSmConfig(conn);
    for (    final String key : smConfig.keySet()) {
      if (key.startsWith(""String_Node_Str"")) {
        vdi.removeFromSmConfig(conn,key);
        break;
      }
    }
  }
  final VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null) {
    vbdr.VDI=vdi;
  }
 else {
    vbdr.empty=true;
  }
  if (type == Volume.Type.ROOT && bootLoaderType == BootloaderType.PyGrub) {
    vbdr.bootable=true;
  }
 else   if (type == Volume.Type.ISO && bootLoaderType == BootloaderType.CD) {
    vbdr.bootable=true;
  }
  if (volume.getType() == Volume.Type.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
    vbdr.userdevice=""String_Node_Str"";
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
    vbdr.unpluggable=(volume.getType() == Volume.Type.ROOT) ? false : true;
    vbdr.userdevice=""String_Node_Str"";
    final Long deviceId=volume.getDiskSeq();
    if (deviceId != null && !isDeviceUsed(conn,vm,deviceId)) {
      vbdr.userdevice=deviceId.toString();
    }
  }
  final VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}","public VBD createVbd(final Connection conn,final DiskTO volume,final String vmName,final VM vm,final BootloaderType bootLoaderType,VDI vdi) throws XmlRpcException, XenAPIException {
  final Volume.Type type=volume.getType();
  if (vdi == null) {
    vdi=mount(conn,vmName,volume);
  }
  if (vdi != null) {
    if (""String_Node_Str"".equals(vdi.getNameLabel(conn))) {
      vdi.setNameLabel(conn,vmName + ""String_Node_Str"");
    }
    final Map<String,String> smConfig=vdi.getSmConfig(conn);
    for (    final String key : smConfig.keySet()) {
      if (key.startsWith(""String_Node_Str"")) {
        vdi.removeFromSmConfig(conn,key);
        break;
      }
    }
  }
  final VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null) {
    vbdr.VDI=vdi;
  }
 else {
    vbdr.empty=true;
  }
  if (type == Volume.Type.ROOT && bootLoaderType == BootloaderType.PyGrub) {
    vbdr.bootable=true;
  }
 else   if (type == Volume.Type.ISO && bootLoaderType == BootloaderType.CD) {
    vbdr.bootable=true;
  }
  if (volume.getType() == Volume.Type.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
    vbdr.userdevice=""String_Node_Str"";
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
    vbdr.unpluggable=(volume.getType() == Volume.Type.ROOT) ? false : true;
    vbdr.userdevice=""String_Node_Str"";
    final Long deviceId=volume.getDiskSeq();
    if (deviceId != null && (!isDeviceUsed(conn,vm,deviceId) || deviceId > 3)) {
      vbdr.userdevice=deviceId.toString();
    }
  }
  final VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}",0.9947027663331371
105139,"@Override public void prepare(VirtualMachineProfile vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException, ConcurrentOperationException {
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
  if (_volsDao.findByInstanceAndType(vm.getId(),Volume.Type.ROOT).isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeTask> tasks=getTasks(vols,dest.getStorageForDisks(),vm);
  Volume vol=null;
  StoragePool pool=null;
  for (  VolumeTask task : tasks) {
    if (task.type == VolumeTaskType.NOP) {
      pool=(StoragePool)dataStoreMgr.getDataStore(task.pool.getId(),DataStoreRole.Primary);
      vol=task.volume;
    }
 else     if (task.type == VolumeTaskType.MIGRATE) {
      pool=(StoragePool)dataStoreMgr.getDataStore(task.pool.getId(),DataStoreRole.Primary);
      vol=migrateVolume(task.volume,pool);
    }
 else     if (task.type == VolumeTaskType.RECREATE) {
      Pair<VolumeVO,DataStore> result=recreateVolume(task.volume,vm,dest);
      pool=(StoragePool)dataStoreMgr.getDataStore(result.second().getId(),DataStoreRole.Primary);
      vol=result.first();
    }
    DataTO volumeTO=volFactory.getVolume(vol.getId()).getTO();
    DiskTO disk=new DiskTO(volumeTO,vol.getDeviceId(),vol.getPath(),vol.getVolumeType());
    VolumeInfo volumeInfo=volFactory.getVolume(vol.getId());
    DataStore dataStore=dataStoreMgr.getDataStore(vol.getPoolId(),DataStoreRole.Primary);
    disk.setDetails(getDetails(volumeInfo,dataStore));
    vm.addDisk(disk);
  }
}","@Override public void prepare(VirtualMachineProfile vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException, ConcurrentOperationException {
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
  if (_volsDao.findByInstanceAndType(vm.getId(),Volume.Type.ROOT).isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeTask> tasks=getTasks(vols,dest.getStorageForDisks(),vm);
  Volume vol=null;
  StoragePool pool=null;
  for (  VolumeTask task : tasks) {
    if (task.type == VolumeTaskType.NOP) {
      pool=(StoragePool)dataStoreMgr.getDataStore(task.pool.getId(),DataStoreRole.Primary);
      vol=task.volume;
    }
 else     if (task.type == VolumeTaskType.MIGRATE) {
      pool=(StoragePool)dataStoreMgr.getDataStore(task.pool.getId(),DataStoreRole.Primary);
      vol=migrateVolume(task.volume,pool);
    }
 else     if (task.type == VolumeTaskType.RECREATE) {
      Pair<VolumeVO,DataStore> result=recreateVolume(task.volume,vm,dest);
      pool=(StoragePool)dataStoreMgr.getDataStore(result.second().getId(),DataStoreRole.Primary);
      vol=result.first();
    }
    VolumeInfo volumeInfo=volFactory.getVolume(vol.getId());
    DataTO volTO=volumeInfo.getTO();
    DiskTO disk=storageMgr.getDiskWithThrottling(volTO,vol.getVolumeType(),vol.getDeviceId(),vol.getPath(),vm.getServiceOfferingId(),vol.getDiskOfferingId());
    DataStore dataStore=dataStoreMgr.getDataStore(vol.getPoolId(),DataStoreRole.Primary);
    disk.setDetails(getDetails(volumeInfo,dataStore));
    vm.addDisk(disk);
  }
}",0.8177181208053691
105140,"@Override public void prepareForMigration(VirtualMachineProfile vm,DeployDestination dest){
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  for (  VolumeVO vol : vols) {
    DataTO volTO=volFactory.getVolume(vol.getId()).getTO();
    DiskTO disk=new DiskTO(volTO,vol.getDeviceId(),vol.getPath(),vol.getVolumeType());
    VolumeInfo volumeInfo=volFactory.getVolume(vol.getId());
    DataStore dataStore=dataStoreMgr.getDataStore(vol.getPoolId(),DataStoreRole.Primary);
    disk.setDetails(getDetails(volumeInfo,dataStore));
    vm.addDisk(disk);
  }
  if (vm.getType() == VirtualMachine.Type.User) {
    _tmpltMgr.prepareIsoForVmProfile(vm);
  }
}","@Override public void prepareForMigration(VirtualMachineProfile vm,DeployDestination dest){
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  for (  VolumeVO vol : vols) {
    VolumeInfo volumeInfo=volFactory.getVolume(vol.getId());
    DataTO volTO=volumeInfo.getTO();
    DiskTO disk=storageMgr.getDiskWithThrottling(volTO,vol.getVolumeType(),vol.getDeviceId(),vol.getPath(),vm.getServiceOfferingId(),vol.getDiskOfferingId());
    DataStore dataStore=dataStoreMgr.getDataStore(vol.getPoolId(),DataStoreRole.Primary);
    disk.setDetails(getDetails(volumeInfo,dataStore));
    vm.addDisk(disk);
  }
  if (vm.getType() == VirtualMachine.Type.User) {
    _tmpltMgr.prepareIsoForVmProfile(vm);
  }
}",0.8186846957590658
105141,"@DB public VolumeInfo createVolume(VolumeInfo volume,VirtualMachine vm,VirtualMachineTemplate template,DataCenter dc,Pod pod,Long clusterId,ServiceOffering offering,DiskOffering diskOffering,List<StoragePool> avoids,long size,HypervisorType hyperType){
  volume=volService.updateHypervisorSnapshotReserveForVolume(diskOffering,volume.getId(),hyperType);
  StoragePool pool=null;
  DiskProfile dskCh=null;
  if (volume.getVolumeType() == Type.ROOT && Storage.ImageFormat.ISO != template.getFormat()) {
    dskCh=createDiskCharacteristics(volume,template,dc,offering);
  }
 else {
    dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  }
  if (diskOffering != null && diskOffering.isCustomized()) {
    dskCh.setSize(size);
  }
  dskCh.setHyperType(hyperType);
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  pool=findStoragePool(dskCh,dc,pod,clusterId,vm.getHostId(),vm,avoidPools);
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + volume.getName());
    throw new CloudRuntimeException(""String_Node_Str"" + volume.getName());
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + volume + ""String_Node_Str""+ pool);
  }
  DataStore store=dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
  for (int i=0; i < 2; i++) {
    AsyncCallFuture<VolumeApiResult> future=null;
    boolean isNotCreatedFromTemplate=volume.getTemplateId() == null ? true : false;
    if (isNotCreatedFromTemplate) {
      future=volService.createVolumeAsync(volume,store);
    }
 else {
      TemplateInfo templ=tmplFactory.getTemplate(template.getId(),DataStoreRole.Image);
      future=volService.createVolumeFromTemplateAsync(volume,store.getId(),templ);
    }
    try {
      VolumeApiResult result=future.get();
      if (result.isFailed()) {
        if (result.getResult().contains(""String_Node_Str"") && (i == 0)) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + result.getResult());
          throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
        }
      }
      return result.getVolume();
    }
 catch (    InterruptedException e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  throw new CloudRuntimeException(""String_Node_Str"");
}","@DB public VolumeInfo createVolume(VolumeInfo volume,VirtualMachine vm,VirtualMachineTemplate template,DataCenter dc,Pod pod,Long clusterId,ServiceOffering offering,DiskOffering diskOffering,List<StoragePool> avoids,long size,HypervisorType hyperType){
  volume=volService.updateHypervisorSnapshotReserveForVolume(diskOffering,volume.getId(),hyperType);
  StoragePool pool=null;
  DiskProfile dskCh=null;
  if (volume.getVolumeType() == Type.ROOT && Storage.ImageFormat.ISO != template.getFormat()) {
    dskCh=createDiskCharacteristics(volume,template,dc,offering);
    storageMgr.setDiskProfileThrottling(dskCh,offering,diskOffering);
  }
 else {
    dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
    storageMgr.setDiskProfileThrottling(dskCh,null,diskOffering);
  }
  if (diskOffering != null && diskOffering.isCustomized()) {
    dskCh.setSize(size);
  }
  dskCh.setHyperType(hyperType);
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  pool=findStoragePool(dskCh,dc,pod,clusterId,vm.getHostId(),vm,avoidPools);
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + volume.getName());
    throw new CloudRuntimeException(""String_Node_Str"" + volume.getName());
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + volume + ""String_Node_Str""+ pool);
  }
  DataStore store=dataStoreMgr.getDataStore(pool.getId(),DataStoreRole.Primary);
  for (int i=0; i < 2; i++) {
    AsyncCallFuture<VolumeApiResult> future=null;
    boolean isNotCreatedFromTemplate=volume.getTemplateId() == null ? true : false;
    if (isNotCreatedFromTemplate) {
      future=volService.createVolumeAsync(volume,store);
    }
 else {
      TemplateInfo templ=tmplFactory.getTemplate(template.getId(),DataStoreRole.Image);
      future=volService.createVolumeFromTemplateAsync(volume,store.getId(),templ);
    }
    try {
      VolumeApiResult result=future.get();
      if (result.isFailed()) {
        if (result.getResult().contains(""String_Node_Str"") && (i == 0)) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + result.getResult());
          throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
        }
      }
      return result.getVolume();
    }
 catch (    InterruptedException e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      s_logger.error(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  throw new CloudRuntimeException(""String_Node_Str"");
}",0.8966049382716049
105142,"@Override public VolumeInfo moveVolume(VolumeInfo volume,long destPoolDcId,Long destPoolPodId,Long destPoolClusterId,HypervisorType dataDiskHyperType) throws ConcurrentOperationException, StorageUnavailableException {
  DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
  ;
  DiskProfile dskCh=new DiskProfile(volume.getId(),volume.getVolumeType(),volume.getName(),diskOffering.getId(),diskOffering.getDiskSize(),diskOffering.getTagsArray(),diskOffering.getUseLocalStorage(),diskOffering.isRecreatable(),null);
  dskCh.setHyperType(dataDiskHyperType);
  DataCenter destPoolDataCenter=_entityMgr.findById(DataCenter.class,destPoolDcId);
  Pod destPoolPod=_entityMgr.findById(Pod.class,destPoolPodId);
  StoragePool destPool=findStoragePool(dskCh,destPoolDataCenter,destPoolPod,destPoolClusterId,null,null,new HashSet<StoragePool>());
  if (destPool == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  Volume newVol=migrateVolume(volume,destPool);
  return volFactory.getVolume(newVol.getId());
}","@Override public VolumeInfo moveVolume(VolumeInfo volume,long destPoolDcId,Long destPoolPodId,Long destPoolClusterId,HypervisorType dataDiskHyperType) throws ConcurrentOperationException, StorageUnavailableException {
  DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
  DiskProfile dskCh=new DiskProfile(volume.getId(),volume.getVolumeType(),volume.getName(),diskOffering.getId(),diskOffering.getDiskSize(),diskOffering.getTagsArray(),diskOffering.getUseLocalStorage(),diskOffering.isRecreatable(),null);
  dskCh.setHyperType(dataDiskHyperType);
  storageMgr.setDiskProfileThrottling(dskCh,null,diskOffering);
  DataCenter destPoolDataCenter=_entityMgr.findById(DataCenter.class,destPoolDcId);
  Pod destPoolPod=_entityMgr.findById(Pod.class,destPoolPodId);
  StoragePool destPool=findStoragePool(dskCh,destPoolDataCenter,destPoolPod,destPoolClusterId,null,null,new HashSet<StoragePool>());
  if (destPool == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  Volume newVol=migrateVolume(volume,destPool);
  return volFactory.getVolume(newVol.getId());
}",0.9687786960514232
105143,"@DB public VolumeInfo copyVolumeFromSecToPrimary(VolumeInfo volume,VirtualMachine vm,VirtualMachineTemplate template,DataCenter dc,Pod pod,Long clusterId,ServiceOffering offering,DiskOffering diskOffering,List<StoragePool> avoids,long size,HypervisorType hyperType) throws NoTransitionException {
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  DiskProfile dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  dskCh.setHyperType(vm.getHypervisorType());
  StoragePool destPool=findStoragePool(dskCh,dc,pod,clusterId,null,vm,avoidPools);
  DataStore destStore=dataStoreMgr.getDataStore(destPool.getId(),DataStoreRole.Primary);
  AsyncCallFuture<VolumeApiResult> future=volService.copyVolume(volume,destStore);
  try {
    VolumeApiResult result=future.get();
    if (result.isFailed()) {
      s_logger.debug(""String_Node_Str"" + result.getResult());
      throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
    }
    return result.getVolume();
  }
 catch (  InterruptedException e) {
    s_logger.debug(""String_Node_Str"" + volume.getId(),e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    s_logger.debug(""String_Node_Str"" + volume.getId(),e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","@DB public VolumeInfo copyVolumeFromSecToPrimary(VolumeInfo volume,VirtualMachine vm,VirtualMachineTemplate template,DataCenter dc,Pod pod,Long clusterId,ServiceOffering offering,DiskOffering diskOffering,List<StoragePool> avoids,long size,HypervisorType hyperType) throws NoTransitionException {
  final HashSet<StoragePool> avoidPools=new HashSet<StoragePool>(avoids);
  DiskProfile dskCh=createDiskCharacteristics(volume,template,dc,diskOffering);
  dskCh.setHyperType(vm.getHypervisorType());
  storageMgr.setDiskProfileThrottling(dskCh,null,diskOffering);
  StoragePool destPool=findStoragePool(dskCh,dc,pod,clusterId,null,vm,avoidPools);
  DataStore destStore=dataStoreMgr.getDataStore(destPool.getId(),DataStoreRole.Primary);
  AsyncCallFuture<VolumeApiResult> future=volService.copyVolume(volume,destStore);
  try {
    VolumeApiResult result=future.get();
    if (result.isFailed()) {
      s_logger.debug(""String_Node_Str"" + result.getResult());
      throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
    }
    return result.getVolume();
  }
 catch (  InterruptedException e) {
    s_logger.debug(""String_Node_Str"" + volume.getId(),e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ExecutionException e) {
    s_logger.debug(""String_Node_Str"" + volume.getId(),e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.950516986706056
105144,"protected synchronized String attachOrDetachDisk(final Connect conn,final boolean attach,final String vmName,final KVMPhysicalDisk attachingDisk,final int devId,final String serial) throws LibvirtException, InternalErrorException {
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  final KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      final LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      final String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        if (resource.getHypervisorType() == Hypervisor.HypervisorType.LXC) {
          final String device=resource.mapRbdDevice(attachingDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            attachingDisk.setPath(device);
          }
        }
      }
      for (      final DiskDef disk : disks) {
        final String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
      }
    }
 else {
      diskdef=new DiskDef();
      diskdef.setSerial(serial);
      if (attachingPool.getType() == StoragePoolType.RBD) {
        if (resource.getHypervisorType() == Hypervisor.HypervisorType.LXC) {
          final String device=resource.mapRbdDevice(attachingDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            diskdef.defBlockBasedDisk(device,devId,DiskDef.DiskBus.VIRTIO);
          }
 else {
            throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
          }
        }
 else {
          diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.DiskBus.VIRTIO,DiskProtocol.RBD,DiskDef.DiskFmtType.RAW);
        }
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        final String mountpoint=attachingPool.getLocalPath();
        final String path=attachingDisk.getPath();
        final String glusterVolume=attachingPool.getSourceDir().replace(""String_Node_Str"",""String_Node_Str"");
        diskdef.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""String_Node_Str""),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.DiskBus.VIRTIO,DiskProtocol.GLUSTER,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO);
      }
    }
    final String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}","protected synchronized String attachOrDetachDisk(final Connect conn,final boolean attach,final String vmName,final KVMPhysicalDisk attachingDisk,final int devId,final String serial,final Long bytesReadRate,final Long bytesWriteRate,final Long iopsReadRate,final Long iopsWriteRate) throws LibvirtException, InternalErrorException {
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  final KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      final LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      final String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        if (resource.getHypervisorType() == Hypervisor.HypervisorType.LXC) {
          final String device=resource.mapRbdDevice(attachingDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            attachingDisk.setPath(device);
          }
        }
      }
      for (      final DiskDef disk : disks) {
        final String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
      }
    }
 else {
      diskdef=new DiskDef();
      diskdef.setSerial(serial);
      if (attachingPool.getType() == StoragePoolType.RBD) {
        if (resource.getHypervisorType() == Hypervisor.HypervisorType.LXC) {
          final String device=resource.mapRbdDevice(attachingDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            diskdef.defBlockBasedDisk(device,devId,DiskDef.DiskBus.VIRTIO);
          }
 else {
            throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
          }
        }
 else {
          diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.DiskBus.VIRTIO,DiskProtocol.RBD,DiskDef.DiskFmtType.RAW);
        }
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        final String mountpoint=attachingPool.getLocalPath();
        final String path=attachingDisk.getPath();
        final String glusterVolume=attachingPool.getSourceDir().replace(""String_Node_Str"",""String_Node_Str"");
        diskdef.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""String_Node_Str""),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.DiskBus.VIRTIO,DiskProtocol.GLUSTER,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO,DiskDef.DiskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.DiskBus.VIRTIO);
      }
      if ((bytesReadRate != null) && (bytesReadRate > 0)) {
        diskdef.setBytesReadRate(bytesReadRate);
      }
      if ((bytesWriteRate != null) && (bytesWriteRate > 0)) {
        diskdef.setBytesWriteRate(bytesWriteRate);
      }
      if ((iopsReadRate != null) && (iopsReadRate > 0)) {
        diskdef.setIopsReadRate(iopsReadRate);
      }
      if ((iopsWriteRate != null) && (iopsWriteRate > 0)) {
        diskdef.setIopsWriteRate(iopsWriteRate);
      }
    }
    final String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}",0.920803123257111
105145,"@Override public Answer dettachVolume(final DettachCommand cmd){
  final DiskTO disk=cmd.getDisk();
  final VolumeObjectTO vol=(VolumeObjectTO)disk.getData();
  final PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)vol.getDataStore();
  final String vmName=cmd.getVmName();
  final String serial=resource.diskUuidToSerial(vol.getUuid());
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    final KVMPhysicalDisk phyDisk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    attachOrDetachDisk(conn,false,vmName,phyDisk,disk.getDiskSeq().intValue(),serial);
    storagePoolMgr.disconnectPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    return new DettachAnswer(disk);
  }
 catch (  final LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    return new DettachAnswer(e.toString());
  }
catch (  final InternalErrorException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    return new DettachAnswer(e.toString());
  }
}","@Override public Answer dettachVolume(final DettachCommand cmd){
  final DiskTO disk=cmd.getDisk();
  final VolumeObjectTO vol=(VolumeObjectTO)disk.getData();
  final PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)vol.getDataStore();
  final String vmName=cmd.getVmName();
  final String serial=resource.diskUuidToSerial(vol.getUuid());
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    final KVMPhysicalDisk phyDisk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    attachOrDetachDisk(conn,false,vmName,phyDisk,disk.getDiskSeq().intValue(),serial,vol.getBytesReadRate(),vol.getBytesWriteRate(),vol.getIopsReadRate(),vol.getIopsWriteRate());
    storagePoolMgr.disconnectPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    return new DettachAnswer(disk);
  }
 catch (  final LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    return new DettachAnswer(e.toString());
  }
catch (  final InternalErrorException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    return new DettachAnswer(e.toString());
  }
}",0.9605488850771868
105146,"@Override public Answer attachVolume(final AttachCommand cmd){
  final DiskTO disk=cmd.getDisk();
  final VolumeObjectTO vol=(VolumeObjectTO)disk.getData();
  final PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)vol.getDataStore();
  final String vmName=cmd.getVmName();
  final String serial=resource.diskUuidToSerial(vol.getUuid());
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    storagePoolMgr.connectPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath(),disk.getDetails());
    final KVMPhysicalDisk phyDisk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    attachOrDetachDisk(conn,true,vmName,phyDisk,disk.getDiskSeq().intValue(),serial);
    return new AttachAnswer(disk);
  }
 catch (  final LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    storagePoolMgr.disconnectPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    return new AttachAnswer(e.toString());
  }
catch (  final InternalErrorException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    return new AttachAnswer(e.toString());
  }
}","@Override public Answer attachVolume(final AttachCommand cmd){
  final DiskTO disk=cmd.getDisk();
  final VolumeObjectTO vol=(VolumeObjectTO)disk.getData();
  final PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)vol.getDataStore();
  final String vmName=cmd.getVmName();
  final String serial=resource.diskUuidToSerial(vol.getUuid());
  try {
    final Connect conn=LibvirtConnection.getConnectionByVmName(vmName);
    storagePoolMgr.connectPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath(),disk.getDetails());
    final KVMPhysicalDisk phyDisk=storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    attachOrDetachDisk(conn,true,vmName,phyDisk,disk.getDiskSeq().intValue(),serial,vol.getBytesReadRate(),vol.getBytesWriteRate(),vol.getIopsReadRate(),vol.getIopsWriteRate());
    return new AttachAnswer(disk);
  }
 catch (  final LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    storagePoolMgr.disconnectPhysicalDisk(primaryStore.getPoolType(),primaryStore.getUuid(),vol.getPath());
    return new AttachAnswer(e.toString());
  }
catch (  final InternalErrorException e) {
    s_logger.debug(""String_Node_Str"" + vol.getPath() + ""String_Node_Str"",e);
    return new AttachAnswer(e.toString());
  }
}",0.9641465315666408
105147,"@Override public Long getDiskBytesWriteRate(ServiceOfferingVO offering,DiskOfferingVO diskOffering){
  if ((offering != null) && (offering.getBytesWriteRate() != null) && (offering.getBytesWriteRate() > 0)) {
    return offering.getBytesWriteRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getBytesWriteRate() != null) && (diskOffering.getBytesWriteRate() > 0)) {
    return diskOffering.getBytesWriteRate();
  }
 else {
    Long bytesWriteRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingBytesWriteRate.key()));
    if ((bytesWriteRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return bytesWriteRate;
    }
  }
  return 0L;
}","@Override public Long getDiskBytesWriteRate(final ServiceOffering offering,final DiskOffering diskOffering){
  if ((offering != null) && (offering.getBytesWriteRate() != null) && (offering.getBytesWriteRate() > 0)) {
    return offering.getBytesWriteRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getBytesWriteRate() != null) && (diskOffering.getBytesWriteRate() > 0)) {
    return diskOffering.getBytesWriteRate();
  }
 else {
    Long bytesWriteRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingBytesWriteRate.key()));
    if ((bytesWriteRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return bytesWriteRate;
    }
  }
  return 0L;
}",0.9883381924198252
105148,"@Override public Long getDiskIopsReadRate(ServiceOfferingVO offering,DiskOfferingVO diskOffering){
  if ((offering != null) && (offering.getIopsReadRate() != null) && (offering.getIopsReadRate() > 0)) {
    return offering.getIopsReadRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getIopsReadRate() != null) && (diskOffering.getIopsReadRate() > 0)) {
    return diskOffering.getIopsReadRate();
  }
 else {
    Long iopsReadRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingIopsReadRate.key()));
    if ((iopsReadRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return iopsReadRate;
    }
  }
  return 0L;
}","@Override public Long getDiskIopsReadRate(final ServiceOffering offering,final DiskOffering diskOffering){
  if ((offering != null) && (offering.getIopsReadRate() != null) && (offering.getIopsReadRate() > 0)) {
    return offering.getIopsReadRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getIopsReadRate() != null) && (diskOffering.getIopsReadRate() > 0)) {
    return diskOffering.getIopsReadRate();
  }
 else {
    Long iopsReadRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingIopsReadRate.key()));
    if ((iopsReadRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return iopsReadRate;
    }
  }
  return 0L;
}",0.9879518072289156
105149,"@Override public Long getDiskBytesReadRate(ServiceOfferingVO offering,DiskOfferingVO diskOffering){
  if ((offering != null) && (offering.getBytesReadRate() != null) && (offering.getBytesReadRate() > 0)) {
    return offering.getBytesReadRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getBytesReadRate() != null) && (diskOffering.getBytesReadRate() > 0)) {
    return diskOffering.getBytesReadRate();
  }
 else {
    Long bytesReadRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingBytesReadRate.key()));
    if ((bytesReadRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return bytesReadRate;
    }
  }
  return 0L;
}","@Override public Long getDiskBytesReadRate(final ServiceOffering offering,final DiskOffering diskOffering){
  if ((offering != null) && (offering.getBytesReadRate() != null) && (offering.getBytesReadRate() > 0)) {
    return offering.getBytesReadRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getBytesReadRate() != null) && (diskOffering.getBytesReadRate() > 0)) {
    return diskOffering.getBytesReadRate();
  }
 else {
    Long bytesReadRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingBytesReadRate.key()));
    if ((bytesReadRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return bytesReadRate;
    }
  }
  return 0L;
}",0.988148148148148
105150,"@Override public Long getDiskIopsWriteRate(ServiceOfferingVO offering,DiskOfferingVO diskOffering){
  if ((offering != null) && (offering.getIopsWriteRate() != null) && (offering.getIopsWriteRate() > 0)) {
    return offering.getIopsWriteRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getIopsWriteRate() != null) && (diskOffering.getIopsWriteRate() > 0)) {
    return diskOffering.getIopsWriteRate();
  }
 else {
    Long iopsWriteRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingIopsWriteRate.key()));
    if ((iopsWriteRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return iopsWriteRate;
    }
  }
  return 0L;
}","@Override public Long getDiskIopsWriteRate(final ServiceOffering offering,final DiskOffering diskOffering){
  if ((offering != null) && (offering.getIopsWriteRate() != null) && (offering.getIopsWriteRate() > 0)) {
    return offering.getIopsWriteRate();
  }
 else   if ((diskOffering != null) && (diskOffering.getIopsWriteRate() != null) && (diskOffering.getIopsWriteRate() > 0)) {
    return diskOffering.getIopsWriteRate();
  }
 else {
    Long iopsWriteRate=Long.parseLong(_configDao.getValue(Config.VmDiskThrottlingIopsWriteRate.key()));
    if ((iopsWriteRate > 0) && ((offering == null) || (!offering.getSystemUse()))) {
      return iopsWriteRate;
    }
  }
  return 0L;
}",0.988148148148148
105151,"private VolumeVO sendAttachVolumeCommand(UserVmVO vm,VolumeVO volumeToAttach,Long deviceId){
  String errorMsg=""String_Node_Str"" + volumeToAttach.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=vm.getState() == State.Running;
  AttachAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  HostVO host=null;
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (hostId != null) {
    host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumeToAttachStoragePool != null && volumeToAttachStoragePool.isManaged()) {
      sendCommand=true;
    }
  }
  DataStore dataStore=volumeToAttachStoragePool != null ? dataStoreMgr.getDataStore(volumeToAttachStoragePool.getId(),DataStoreRole.Primary) : null;
  if (host != null) {
    try {
      volService.grantAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
 catch (    Exception e) {
      volService.revokeAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      throw new CloudRuntimeException(e.getMessage());
    }
  }
  if (sendCommand) {
    if (host != null && host.getHypervisorType() == HypervisorType.KVM && volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
      volumeToAttach.setPath(volumeToAttach.get_iScsiName());
      _volsDao.update(volumeToAttach.getId(),volumeToAttach);
    }
    DataTO volTO=volFactory.getVolume(volumeToAttach.getId()).getTO();
    deviceId=getDeviceId(vm.getId(),deviceId);
    DiskTO disk=new DiskTO(volTO,deviceId,volumeToAttach.getPath(),volumeToAttach.getVolumeType());
    AttachCommand cmd=new AttachCommand(disk,vm.getInstanceName());
    ChapInfo chapInfo=volService.getChapInfo(volFactory.getVolume(volumeToAttach.getId()),dataStore);
    Map<String,String> details=new HashMap<String,String>();
    disk.setDetails(details);
    details.put(DiskTO.MANAGED,String.valueOf(volumeToAttachStoragePool.isManaged()));
    details.put(DiskTO.STORAGE_HOST,volumeToAttachStoragePool.getHostAddress());
    details.put(DiskTO.STORAGE_PORT,String.valueOf(volumeToAttachStoragePool.getPort()));
    details.put(DiskTO.VOLUME_SIZE,String.valueOf(volumeToAttach.getSize()));
    details.put(DiskTO.IQN,volumeToAttach.get_iScsiName());
    details.put(DiskTO.MOUNT_POINT,volumeToAttach.get_iScsiName());
    details.put(DiskTO.PROTOCOL_TYPE,(volumeToAttach.getPoolType() != null) ? volumeToAttach.getPoolType().toString() : null);
    if (chapInfo != null) {
      details.put(DiskTO.CHAP_INITIATOR_USERNAME,chapInfo.getInitiatorUsername());
      details.put(DiskTO.CHAP_INITIATOR_SECRET,chapInfo.getInitiatorSecret());
      details.put(DiskTO.CHAP_TARGET_USERNAME,chapInfo.getTargetUsername());
      details.put(DiskTO.CHAP_TARGET_SECRET,chapInfo.getTargetSecret());
    }
    _userVmDao.loadDetails(vm);
    Map<String,String> controllerInfo=new HashMap<String,String>();
    controllerInfo.put(VmDetailConstants.ROOT_DISK_CONTROLLER,vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER));
    controllerInfo.put(VmDetailConstants.DATA_DISK_CONTROLLER,vm.getDetail(VmDetailConstants.DATA_DISK_CONTROLLER));
    cmd.setControllerInfo(controllerInfo);
    s_logger.debug(""String_Node_Str"" + volumeToAttach.getId() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ controllerInfo);
    try {
      answer=(AttachAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      if (host != null) {
        volService.revokeAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      }
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      DiskTO disk=answer.getDisk();
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),disk.getDiskSeq());
      volumeToAttach=_volsDao.findById(volumeToAttach.getId());
      if (volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
        volumeToAttach.setPath(answer.getDisk().getPath());
        _volsDao.update(volumeToAttach.getId(),volumeToAttach);
      }
    }
 else {
      deviceId=getDeviceId(vm.getId(),deviceId);
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),deviceId);
    }
    VmDiskStatisticsVO diskstats=_vmDiskStatsDao.findBy(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
    if (diskstats == null) {
      diskstats=new VmDiskStatisticsVO(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
      _vmDiskStatsDao.persist(diskstats);
    }
    return _volsDao.findById(volumeToAttach.getId());
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    if (host != null) {
      volService.revokeAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
    throw new CloudRuntimeException(errorMsg);
  }
}","private VolumeVO sendAttachVolumeCommand(UserVmVO vm,VolumeVO volumeToAttach,Long deviceId){
  String errorMsg=""String_Node_Str"" + volumeToAttach.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=vm.getState() == State.Running;
  AttachAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  HostVO host=null;
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (hostId != null) {
    host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumeToAttachStoragePool != null && volumeToAttachStoragePool.isManaged()) {
      sendCommand=true;
    }
  }
  DataStore dataStore=volumeToAttachStoragePool != null ? dataStoreMgr.getDataStore(volumeToAttachStoragePool.getId(),DataStoreRole.Primary) : null;
  if (host != null) {
    try {
      volService.grantAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
 catch (    Exception e) {
      volService.revokeAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      throw new CloudRuntimeException(e.getMessage());
    }
  }
  if (sendCommand) {
    if (host != null && host.getHypervisorType() == HypervisorType.KVM && volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
      volumeToAttach.setPath(volumeToAttach.get_iScsiName());
      _volsDao.update(volumeToAttach.getId(),volumeToAttach);
    }
    DataTO volTO=volFactory.getVolume(volumeToAttach.getId()).getTO();
    deviceId=getDeviceId(vm.getId(),deviceId);
    DiskTO disk=storageMgr.getDiskWithThrottling(volTO,volumeToAttach.getVolumeType(),deviceId,volumeToAttach.getPath(),vm.getServiceOfferingId(),volumeToAttach.getDiskOfferingId());
    AttachCommand cmd=new AttachCommand(disk,vm.getInstanceName());
    ChapInfo chapInfo=volService.getChapInfo(volFactory.getVolume(volumeToAttach.getId()),dataStore);
    Map<String,String> details=new HashMap<String,String>();
    disk.setDetails(details);
    details.put(DiskTO.MANAGED,String.valueOf(volumeToAttachStoragePool.isManaged()));
    details.put(DiskTO.STORAGE_HOST,volumeToAttachStoragePool.getHostAddress());
    details.put(DiskTO.STORAGE_PORT,String.valueOf(volumeToAttachStoragePool.getPort()));
    details.put(DiskTO.VOLUME_SIZE,String.valueOf(volumeToAttach.getSize()));
    details.put(DiskTO.IQN,volumeToAttach.get_iScsiName());
    details.put(DiskTO.MOUNT_POINT,volumeToAttach.get_iScsiName());
    details.put(DiskTO.PROTOCOL_TYPE,(volumeToAttach.getPoolType() != null) ? volumeToAttach.getPoolType().toString() : null);
    if (chapInfo != null) {
      details.put(DiskTO.CHAP_INITIATOR_USERNAME,chapInfo.getInitiatorUsername());
      details.put(DiskTO.CHAP_INITIATOR_SECRET,chapInfo.getInitiatorSecret());
      details.put(DiskTO.CHAP_TARGET_USERNAME,chapInfo.getTargetUsername());
      details.put(DiskTO.CHAP_TARGET_SECRET,chapInfo.getTargetSecret());
    }
    _userVmDao.loadDetails(vm);
    Map<String,String> controllerInfo=new HashMap<String,String>();
    controllerInfo.put(VmDetailConstants.ROOT_DISK_CONTROLLER,vm.getDetail(VmDetailConstants.ROOT_DISK_CONTROLLER));
    controllerInfo.put(VmDetailConstants.DATA_DISK_CONTROLLER,vm.getDetail(VmDetailConstants.DATA_DISK_CONTROLLER));
    cmd.setControllerInfo(controllerInfo);
    s_logger.debug(""String_Node_Str"" + volumeToAttach.getId() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ controllerInfo);
    try {
      answer=(AttachAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      if (host != null) {
        volService.revokeAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      }
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      DiskTO disk=answer.getDisk();
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),disk.getDiskSeq());
      volumeToAttach=_volsDao.findById(volumeToAttach.getId());
      if (volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
        volumeToAttach.setPath(answer.getDisk().getPath());
        _volsDao.update(volumeToAttach.getId(),volumeToAttach);
      }
    }
 else {
      deviceId=getDeviceId(vm.getId(),deviceId);
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),deviceId);
    }
    VmDiskStatisticsVO diskstats=_vmDiskStatsDao.findBy(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
    if (diskstats == null) {
      diskstats=new VmDiskStatisticsVO(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
      _vmDiskStatsDao.persist(diskstats);
    }
    return _volsDao.findById(volumeToAttach.getId());
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    if (host != null) {
      volService.revokeAccess(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
    throw new CloudRuntimeException(errorMsg);
  }
}",0.9846443711728686
105152,"public VmStatsEntry getVmStat(final Connect conn,final String vmName) throws LibvirtException {
  Domain dm=null;
  try {
    dm=getDomain(conn,vmName);
    final DomainInfo info=dm.getInfo();
    final MemoryStatistic[] mems=dm.memoryStats(NUMMEMSTATS);
    final VmStatsEntry stats=new VmStatsEntry();
    stats.setNumCPUs(info.nrVirtCpu);
    stats.setEntityType(""String_Node_Str"");
    stats.setMemoryKBs(info.maxMem);
    stats.setTargetMemoryKBs(info.memory);
    stats.setIntFreeMemoryKBs((double)mems[0].getValue());
    VmStats oldStats=null;
    final Calendar now=Calendar.getInstance();
    oldStats=_vmStats.get(vmName);
    long elapsedTime=0;
    if (oldStats != null) {
      elapsedTime=now.getTimeInMillis() - oldStats._timestamp.getTimeInMillis();
      double utilization=(info.cpuTime - oldStats._usedTime) / ((double)elapsedTime * 1000000);
      final NodeInfo node=conn.nodeInfo();
      utilization=utilization / node.cpus;
      if (utilization > 0) {
        stats.setCPUUtilization(utilization * 100);
      }
    }
    final List<InterfaceDef> vifs=getInterfaces(conn,vmName);
    long rx=0;
    long tx=0;
    for (    final InterfaceDef vif : vifs) {
      final DomainInterfaceStats ifStats=dm.interfaceStats(vif.getDevName());
      rx+=ifStats.rx_bytes;
      tx+=ifStats.tx_bytes;
    }
    if (oldStats != null) {
      final double deltarx=rx - oldStats._rx;
      if (deltarx > 0) {
        stats.setNetworkReadKBs(deltarx / 1024);
      }
      final double deltatx=tx - oldStats._tx;
      if (deltatx > 0) {
        stats.setNetworkWriteKBs(deltatx / 1024);
      }
    }
    final List<DiskDef> disks=getDisks(conn,vmName);
    long io_rd=0;
    long io_wr=0;
    long bytes_rd=0;
    long bytes_wr=0;
    for (    final DiskDef disk : disks) {
      final DomainBlockStats blockStats=dm.blockStats(disk.getDiskLabel());
      io_rd+=blockStats.rd_req;
      io_wr+=blockStats.wr_req;
      bytes_rd+=blockStats.rd_bytes;
      bytes_wr+=blockStats.wr_bytes;
    }
    if (oldStats != null) {
      final long deltaiord=io_rd - oldStats._ioRead;
      if (deltaiord > 0) {
        stats.setDiskReadIOs(deltaiord);
      }
      final long deltaiowr=io_wr - oldStats._ioWrote;
      if (deltaiowr > 0) {
        stats.setDiskWriteIOs(deltaiowr);
      }
      final double deltabytesrd=bytes_rd - oldStats._bytesRead;
      if (deltabytesrd > 0) {
        stats.setDiskReadKBs(deltabytesrd / 1024);
      }
      final double deltabyteswr=bytes_wr - oldStats._bytesWrote;
      if (deltabyteswr > 0) {
        stats.setDiskWriteKBs(deltabyteswr / 1024);
      }
    }
    final VmStats newStat=new VmStats();
    newStat._usedTime=info.cpuTime;
    newStat._rx=rx;
    newStat._tx=tx;
    newStat._ioRead=io_rd;
    newStat._ioWrote=io_wr;
    newStat._bytesRead=bytes_rd;
    newStat._bytesWrote=bytes_wr;
    newStat._timestamp=now;
    newStat._intmemfree=mems[0].getValue();
    newStat._memory=info.memory;
    newStat._maxmemory=info.maxMem;
    _vmStats.put(vmName,newStat);
    return stats;
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}","public VmStatsEntry getVmStat(final Connect conn,final String vmName) throws LibvirtException {
  Domain dm=null;
  try {
    dm=getDomain(conn,vmName);
    if (dm == null) {
      return null;
    }
    DomainInfo info=dm.getInfo();
    final VmStatsEntry stats=new VmStatsEntry();
    stats.setNumCPUs(info.nrVirtCpu);
    stats.setEntityType(""String_Node_Str"");
    stats.setMemoryKBs(info.maxMem);
    stats.setTargetMemoryKBs(info.memory);
    stats.setIntFreeMemoryKBs(getMemoryFreeInKBs(dm));
    VmStats oldStats=null;
    final Calendar now=Calendar.getInstance();
    oldStats=_vmStats.get(vmName);
    long elapsedTime=0;
    if (oldStats != null) {
      elapsedTime=now.getTimeInMillis() - oldStats._timestamp.getTimeInMillis();
      double utilization=(info.cpuTime - oldStats._usedTime) / ((double)elapsedTime * 1000000);
      final NodeInfo node=conn.nodeInfo();
      utilization=utilization / node.cpus;
      if (utilization > 0) {
        stats.setCPUUtilization(utilization * 100);
      }
    }
    final List<InterfaceDef> vifs=getInterfaces(conn,vmName);
    long rx=0;
    long tx=0;
    for (    final InterfaceDef vif : vifs) {
      final DomainInterfaceStats ifStats=dm.interfaceStats(vif.getDevName());
      rx+=ifStats.rx_bytes;
      tx+=ifStats.tx_bytes;
    }
    if (oldStats != null) {
      final double deltarx=rx - oldStats._rx;
      if (deltarx > 0) {
        stats.setNetworkReadKBs(deltarx / 1024);
      }
      final double deltatx=tx - oldStats._tx;
      if (deltatx > 0) {
        stats.setNetworkWriteKBs(deltatx / 1024);
      }
    }
    final List<DiskDef> disks=getDisks(conn,vmName);
    long io_rd=0;
    long io_wr=0;
    long bytes_rd=0;
    long bytes_wr=0;
    for (    final DiskDef disk : disks) {
      final DomainBlockStats blockStats=dm.blockStats(disk.getDiskLabel());
      io_rd+=blockStats.rd_req;
      io_wr+=blockStats.wr_req;
      bytes_rd+=blockStats.rd_bytes;
      bytes_wr+=blockStats.wr_bytes;
    }
    if (oldStats != null) {
      final long deltaiord=io_rd - oldStats._ioRead;
      if (deltaiord > 0) {
        stats.setDiskReadIOs(deltaiord);
      }
      final long deltaiowr=io_wr - oldStats._ioWrote;
      if (deltaiowr > 0) {
        stats.setDiskWriteIOs(deltaiowr);
      }
      final double deltabytesrd=bytes_rd - oldStats._bytesRead;
      if (deltabytesrd > 0) {
        stats.setDiskReadKBs(deltabytesrd / 1024);
      }
      final double deltabyteswr=bytes_wr - oldStats._bytesWrote;
      if (deltabyteswr > 0) {
        stats.setDiskWriteKBs(deltabyteswr / 1024);
      }
    }
    final VmStats newStat=new VmStats();
    newStat._usedTime=info.cpuTime;
    newStat._rx=rx;
    newStat._tx=tx;
    newStat._ioRead=io_rd;
    newStat._ioWrote=io_wr;
    newStat._bytesRead=bytes_rd;
    newStat._bytesWrote=bytes_wr;
    newStat._timestamp=now;
    _vmStats.put(vmName,newStat);
    return stats;
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}",0.956221198156682
105153,"@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String hypervisorScriptsDir=(String)params.get(""String_Node_Str"");
  if (hypervisorScriptsDir == null) {
    hypervisorScriptsDir=getDefaultHypervisorScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  final String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _updateHostPasswdPath=Script.findScript(hypervisorScriptsDir,VRScripts.UPDATE_HOST_PASSWD);
  if (_updateHostPasswdPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  final boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  final String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  final File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.randomUUID().toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,1024) * 1024 * 1024L;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < 10 * 1000 + 0) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  final LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=_hvVersion % 1000000 / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  final LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  final String cpuFeatures=(String)params.get(""String_Node_Str"");
  if (cpuFeatures != null) {
    _cpuFeatures=new ArrayList<String>();
    for (    final String feature : cpuFeatures.split(""String_Node_Str"")) {
      if (!feature.isEmpty()) {
        _cpuFeatures.add(feature);
      }
    }
  }
  final String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  final Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    final String[] isoPaths={""String_Node_Str""};
    for (    final String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=canBridgeFirewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
final String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
final String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (final NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
final Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
configureDiskActivityChecks(params);
final KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
final String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
final String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}","@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String hypervisorScriptsDir=(String)params.get(""String_Node_Str"");
  if (hypervisorScriptsDir == null) {
    hypervisorScriptsDir=getDefaultHypervisorScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  final String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _updateHostPasswdPath=Script.findScript(hypervisorScriptsDir,VRScripts.UPDATE_HOST_PASSWD);
  if (_updateHostPasswdPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  final boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  final String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  final File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.randomUUID().toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,1024) * 1024 * 1024L;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < 10 * 1000 + 0) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  final LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=_hvVersion % 1000000 / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  final LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  final String cpuFeatures=(String)params.get(""String_Node_Str"");
  if (cpuFeatures != null) {
    _cpuFeatures=new ArrayList<String>();
    for (    final String feature : cpuFeatures.split(""String_Node_Str"")) {
      if (!feature.isEmpty()) {
        _cpuFeatures.add(feature);
      }
    }
  }
  final String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  final Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    final String[] isoPaths={""String_Node_Str""};
    for (    final String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=canBridgeFirewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
final String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
final String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (final NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
final Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
configureDiskActivityChecks(params);
final KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
return true;
}",0.9876335694561172
105154,"/** 
 * This test verifies that CPU topology is properly set for hex-core
 */
@Test public void testCreateVMFromSpecWithTopology6(){
  final int id=_random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=12;
  final int minSpeed=1024;
  final int maxSpeed=2048;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,minSpeed,maxSpeed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(_hyperVisorType);
  verifyVm(to,vm);
}","/** 
 * This test verifies that CPU topology is properly set for hex-core
 */
@Test public void testCreateVMFromSpecWithTopology6(){
  final int id=random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=12;
  final int minSpeed=1024;
  final int maxSpeed=2048;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,minSpeed,maxSpeed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(hyperVisorType);
  verifyVm(to,vm);
}",0.9988518943742823
105155,"/** 
 * This test verifies that CPU topology is properly set for quad-core
 */
@Test public void testCreateVMFromSpecWithTopology4(){
  final int id=_random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=8;
  final int minSpeed=1024;
  final int maxSpeed=2048;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,minSpeed,maxSpeed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(_hyperVisorType);
  verifyVm(to,vm);
}","/** 
 * This test verifies that CPU topology is properly set for quad-core
 */
@Test public void testCreateVMFromSpecWithTopology4(){
  final int id=random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=8;
  final int minSpeed=1024;
  final int maxSpeed=2048;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,minSpeed,maxSpeed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(hyperVisorType);
  verifyVm(to,vm);
}",0.9988518943742823
105156,"@SuppressWarnings(""String_Node_Str"") @Test public void testCreatePrivateTemplateFromVolumeCommand(){
  final StoragePool pool=Mockito.mock(StoragePool.class);
  ;
  final String secondaryStorageUrl=""String_Node_Str"";
  final long templateId=1l;
  final long accountId=1l;
  final String userSpecifiedName=""String_Node_Str"";
  final String uniqueName=""String_Node_Str"";
  final String volumePath=""String_Node_Str"";
  final String vmName=""String_Node_Str"";
  final int wait=0;
  final CreatePrivateTemplateFromVolumeCommand command=new CreatePrivateTemplateFromVolumeCommand(pool,secondaryStorageUrl,templateId,accountId,userSpecifiedName,uniqueName,volumePath,vmName,wait);
  final KVMStoragePoolManager storagePoolMgr=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool secondaryStorage=Mockito.mock(KVMStoragePool.class);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);
  when(storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl)).thenReturn(secondaryStorage);
  when(storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel())).thenThrow(new CloudRuntimeException(""String_Node_Str""));
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(storagePoolMgr,times(1)).getStoragePoolByURI(secondaryStorageUrl);
  verify(storagePoolMgr,times(1)).getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel());
}","@Test public void testCreatePrivateTemplateFromVolumeCommand(){
  final StoragePool pool=Mockito.mock(StoragePool.class);
  ;
  final String secondaryStorageUrl=""String_Node_Str"";
  final long templateId=1l;
  final long accountId=1l;
  final String userSpecifiedName=""String_Node_Str"";
  final String uniqueName=""String_Node_Str"";
  final String volumePath=""String_Node_Str"";
  final String vmName=""String_Node_Str"";
  final int wait=0;
  final CreatePrivateTemplateFromVolumeCommand command=new CreatePrivateTemplateFromVolumeCommand(pool,secondaryStorageUrl,templateId,accountId,userSpecifiedName,uniqueName,volumePath,vmName,wait);
  final KVMStoragePoolManager storagePoolMgr=Mockito.mock(KVMStoragePoolManager.class);
  final KVMStoragePool secondaryStorage=Mockito.mock(KVMStoragePool.class);
  when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(storagePoolMgr);
  when(storagePoolMgr.getStoragePoolByURI(secondaryStorageUrl)).thenReturn(secondaryStorage);
  when(storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel())).thenThrow(new CloudRuntimeException(""String_Node_Str""));
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertFalse(answer.getResult());
  verify(libvirtComputingResource,times(1)).getStoragePoolMgr();
  verify(storagePoolMgr,times(1)).getStoragePoolByURI(secondaryStorageUrl);
  verify(storagePoolMgr,times(1)).getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel());
}",0.988646824179196
105157,"/** 
 * This test tests if the Agent can handle a vmSpec coming from a >4.1 management server. It tests if the Agent can handle a vmSpec with overcommit data like minSpeed and maxSpeed in there
 */
@Test public void testCreateVMFromSpec(){
  final int id=_random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=_random.nextInt(2) + 1;
  final int minSpeed=1024;
  final int maxSpeed=2048;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,minSpeed,maxSpeed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(_hyperVisorType);
  verifyVm(to,vm);
}","/** 
 * This test tests if the Agent can handle a vmSpec coming from a >4.1 management server. It tests if the Agent can handle a vmSpec with overcommit data like minSpeed and maxSpeed in there
 */
@Test public void testCreateVMFromSpec(){
  final int id=random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=random.nextInt(2) + 1;
  final int minSpeed=1024;
  final int maxSpeed=2048;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,minSpeed,maxSpeed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(hyperVisorType);
  verifyVm(to,vm);
}",0.9984962406015038
105158,"@Test public void testGetHostStatsCommand(){
  Mockito.mock(LibvirtUtilitiesHelper.class);
  final CPUStat cpuStat=Mockito.mock(CPUStat.class);
  final MemStat memStat=Mockito.mock(MemStat.class);
  final String uuid=""String_Node_Str"";
  final GetHostStatsCommand command=new GetHostStatsCommand(uuid,""String_Node_Str"",1l);
  when(libvirtComputingResource.getCPUStat()).thenReturn(cpuStat);
  when(libvirtComputingResource.getMemStat()).thenReturn(memStat);
  when(libvirtComputingResource.getNicStats(Mockito.anyString())).thenReturn(new Pair<Double,Double>(1.0d,1.0d));
  when(cpuStat.getCpuUsedPercent()).thenReturn(0.5d);
  when(memStat.getAvailable()).thenReturn(1500.5d);
  when(memStat.getTotal()).thenReturn(15000d);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getCPUStat();
  verify(libvirtComputingResource,times(1)).getMemStat();
  verify(cpuStat,times(1)).getCpuUsedPercent();
  verify(memStat,times(1)).getAvailable();
  verify(memStat,times(1)).getTotal();
}","@Test public void testGetHostStatsCommand(){
  final CPUStat cpuStat=Mockito.mock(CPUStat.class);
  final MemStat memStat=Mockito.mock(MemStat.class);
  final String uuid=""String_Node_Str"";
  final GetHostStatsCommand command=new GetHostStatsCommand(uuid,""String_Node_Str"",1l);
  when(libvirtComputingResource.getCPUStat()).thenReturn(cpuStat);
  when(libvirtComputingResource.getMemStat()).thenReturn(memStat);
  when(libvirtComputingResource.getNicStats(Mockito.anyString())).thenReturn(new Pair<Double,Double>(1.0d,1.0d));
  when(cpuStat.getCpuUsedPercent()).thenReturn(0.5d);
  when(memStat.getAvailable()).thenReturn(1500.5d);
  when(memStat.getTotal()).thenReturn(15000d);
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getCPUStat();
  verify(libvirtComputingResource,times(1)).getMemStat();
  verify(cpuStat,times(1)).getCpuUsedPercent();
  verify(memStat,times(1)).getAvailable();
  verify(memStat,times(1)).getTotal();
}",0.9801210025929128
105159,"/** 
 * This test tests if the Agent can handle a vmSpec coming from a <=4.1 management server. The overcommit feature has not been merged in there and thus only 'speed' is set.
 */
@Test public void testCreateVMFromSpecLegacy(){
  final int id=_random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=_random.nextInt(2) + 1;
  final int speed=1024;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,speed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(_hyperVisorType);
  verifyVm(to,vm);
}","/** 
 * This test tests if the Agent can handle a vmSpec coming from a <=4.1 management server. The overcommit feature has not been merged in there and thus only 'speed' is set.
 */
@Test public void testCreateVMFromSpecLegacy(){
  final int id=random.nextInt(65534);
  final String name=""String_Node_Str"";
  final int cpus=random.nextInt(2) + 1;
  final int speed=1024;
  final int minRam=256 * 1024;
  final int maxRam=512 * 1024;
  final String os=""String_Node_Str"";
  final String vncAddr=""String_Node_Str"";
  final String vncPassword=""String_Node_Str"";
  final LibvirtComputingResource lcr=new LibvirtComputingResource();
  final VirtualMachineTO to=new VirtualMachineTO(id,name,VirtualMachine.Type.User,cpus,speed,minRam,maxRam,BootloaderType.HVM,os,false,false,vncPassword);
  to.setVncAddr(vncAddr);
  to.setUuid(""String_Node_Str"");
  final LibvirtVMDef vm=lcr.createVMFromSpec(to);
  vm.setHvsType(hyperVisorType);
  verifyVm(to,vm);
}",0.9984135378106822
105160,"@SuppressWarnings(""String_Node_Str"") @Test public void testGetVmDiskStatsCommandException(){
  Mockito.mock(Connect.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final String vmName=""String_Node_Str"";
  final String uuid=""String_Node_Str"";
  final List<String> vms=new ArrayList<String>();
  vms.add(vmName);
  final GetVmDiskStatsCommand command=new GetVmDiskStatsCommand(vms,uuid,""String_Node_Str"");
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnection()).thenThrow(LibvirtException.class);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnection();
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}","@Test @SuppressWarnings(""String_Node_Str"") public void testGetVmDiskStatsCommandException(){
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final String vmName=""String_Node_Str"";
  final String uuid=""String_Node_Str"";
  final List<String> vms=new ArrayList<String>();
  vms.add(vmName);
  final GetVmDiskStatsCommand command=new GetVmDiskStatsCommand(vms,uuid,""String_Node_Str"");
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnection()).thenThrow(LibvirtException.class);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnection();
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}",0.9810154525386312
105161,"public HashMap<String,VmStatsEntry> getVmStats(final Connection conn,final GetVmStatsCommand cmd,final List<String> vmUUIDs,final String hostGuid){
  final HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  final String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,0,0,0,""String_Node_Str""));
  }
  final Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  final Integer numRows=(Integer)rrdData[0];
  final Integer numColumns=(Integer)rrdData[1];
  final Node legend=(Node)rrdData[2];
  final Node dataNode=(Node)rrdData[3];
  final NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    final String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    final String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    final String type=columnMetadataList[1];
    final String uuid=columnMetadataList[2];
    final String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      final VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows));
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(vmStatsAnswer.getNetworkReadKBs() + getDataAverage(dataNode,col,numRows) / 1000);
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(vmStatsAnswer.getNetworkWriteKBs() + getDataAverage(dataNode,col,numRows) / 1000);
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setDiskReadKBs(vmStatsAnswer.getDiskReadKBs() + getDataAverage(dataNode,col,numRows) / 1000);
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setDiskWriteKBs(vmStatsAnswer.getDiskWriteKBs() + getDataAverage(dataNode,col,numRows) / 1000);
      }
 else       if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setIntFreeMemoryKBs(vmStatsAnswer.getIntFreeMemoryKBs() + getDataAverage(dataNode,col,numRows) / 1024);
      }
 else       if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setTargetMemoryKBs(vmStatsAnswer.getTargetMemoryKBs() + getDataAverage(dataNode,col,numRows) / 1024);
      }
 else       if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setMemoryKBs(vmStatsAnswer.getMemoryKBs() + getDataAverage(dataNode,col,numRows) / 1024);
      }
    }
  }
  for (  final Map.Entry<String,VmStatsEntry> entry : vmResponseMap.entrySet()) {
    final VmStatsEntry vmStatsAnswer=entry.getValue();
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}","public HashMap<String,VmStatsEntry> getVmStats(final Connection conn,final GetVmStatsCommand cmd,final List<String> vmUUIDs,final String hostGuid){
  final HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  final String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,0,0,0,""String_Node_Str""));
  }
  final Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  final Integer numRows=(Integer)rrdData[0];
  final Integer numColumns=(Integer)rrdData[1];
  final Node legend=(Node)rrdData[2];
  final Node dataNode=(Node)rrdData[3];
  final NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    final String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    final String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    final String type=columnMetadataList[1];
    final String uuid=columnMetadataList[2];
    final String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      final VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows));
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(vmStatsAnswer.getNetworkReadKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(vmStatsAnswer.getNetworkWriteKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setDiskReadKBs(vmStatsAnswer.getDiskReadKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setDiskWriteKBs(vmStatsAnswer.getDiskWriteKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setIntFreeMemoryKBs(vmStatsAnswer.getIntFreeMemoryKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setTargetMemoryKBs(vmStatsAnswer.getTargetMemoryKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
 else       if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setMemoryKBs(vmStatsAnswer.getMemoryKBs() + getDataAverage(dataNode,col,numRows) / BASE_TO_CONVERT_BYTES_INTO_KILOBYTES);
      }
    }
  }
  for (  final Map.Entry<String,VmStatsEntry> entry : vmResponseMap.entrySet()) {
    final VmStatsEntry vmStatsAnswer=entry.getValue();
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}",0.9607513316512476
105162,"public Calendar[] statementTime(final Calendar today,final STATEMENT_PERIODS period){
  int day_of_month=today.get(Calendar.DAY_OF_MONTH);
  int month_of_year=today.get(Calendar.MONTH);
  Calendar firstDateOfPreviousPeriod, lastDateOfPreviousPeriod;
switch (period) {
case BIMONTHLY:
    if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
      Calendar aCalendar=(Calendar)today.clone();
      aCalendar.add(Calendar.MONTH,0);
      aCalendar.set(Calendar.DATE,1);
      aCalendar.set(Calendar.HOUR,0);
      aCalendar.set(Calendar.MINUTE,0);
      aCalendar.set(Calendar.SECOND,0);
      firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      aCalendar.set(Calendar.DATE,15);
      lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
    }
 else     if (day_of_month > 15 && (day_of_month - 15) < s_LAST_STATEMENT_SENT_DAYS) {
      Calendar aCalendar=(Calendar)today.clone();
      aCalendar.add(Calendar.MONTH,-1);
      aCalendar.set(Calendar.DATE,16);
      aCalendar.set(Calendar.HOUR,0);
      aCalendar.set(Calendar.MINUTE,0);
      aCalendar.set(Calendar.SECOND,0);
      firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
      lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
    }
  return null;
case MONTHLY:
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
  Calendar aCalendar=(Calendar)today.clone();
  aCalendar.add(Calendar.MONTH,-1);
  aCalendar.set(Calendar.DATE,1);
  aCalendar.set(Calendar.HOUR,0);
  aCalendar.set(Calendar.MINUTE,0);
  aCalendar.set(Calendar.SECOND,0);
  firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
  return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
return null;
case QUATERLY:
if (month_of_year == Calendar.JANUARY || month_of_year == Calendar.APRIL || month_of_year == Calendar.JULY || month_of_year == Calendar.OCTOBER) {
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
Calendar aCalendar=(Calendar)today.clone();
aCalendar.add(Calendar.MONTH,-3);
aCalendar.set(Calendar.DATE,1);
aCalendar.set(Calendar.HOUR,0);
aCalendar.set(Calendar.MINUTE,0);
aCalendar.set(Calendar.SECOND,0);
firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
aCalendar.add(Calendar.MONTH,2);
aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
}
return null;
case HALFYEARLY:
if (month_of_year == Calendar.JANUARY || month_of_year == Calendar.JULY) {
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
Calendar aCalendar=(Calendar)today.clone();
aCalendar.add(Calendar.MONTH,-6);
aCalendar.set(Calendar.DATE,1);
aCalendar.set(Calendar.HOUR,0);
aCalendar.set(Calendar.MINUTE,0);
aCalendar.set(Calendar.SECOND,0);
firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
aCalendar.add(Calendar.MONTH,5);
aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
}
return null;
case YEARLY:
if (month_of_year == Calendar.JANUARY) {
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
Calendar aCalendar=(Calendar)today.clone();
aCalendar.add(Calendar.MONTH,-12);
aCalendar.set(Calendar.DATE,1);
aCalendar.set(Calendar.HOUR,0);
aCalendar.set(Calendar.MINUTE,0);
aCalendar.set(Calendar.SECOND,0);
firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
aCalendar.add(Calendar.MONTH,11);
aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
}
return null;
default :
break;
}
return null;
}","public Calendar[] statementTime(final Calendar today,final QuotaStatementPeriods period){
  int day_of_month=today.get(Calendar.DAY_OF_MONTH);
  int month_of_year=today.get(Calendar.MONTH);
  Calendar firstDateOfPreviousPeriod, lastDateOfPreviousPeriod;
switch (period) {
case BIMONTHLY:
    if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
      Calendar aCalendar=(Calendar)today.clone();
      aCalendar.add(Calendar.MONTH,0);
      aCalendar.set(Calendar.DATE,1);
      aCalendar.set(Calendar.HOUR,0);
      aCalendar.set(Calendar.MINUTE,0);
      aCalendar.set(Calendar.SECOND,0);
      firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      aCalendar.set(Calendar.DATE,15);
      lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
    }
 else     if (day_of_month > 15 && (day_of_month - 15) < s_LAST_STATEMENT_SENT_DAYS) {
      Calendar aCalendar=(Calendar)today.clone();
      aCalendar.add(Calendar.MONTH,-1);
      aCalendar.set(Calendar.DATE,16);
      aCalendar.set(Calendar.HOUR,0);
      aCalendar.set(Calendar.MINUTE,0);
      aCalendar.set(Calendar.SECOND,0);
      firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
      lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
      return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
    }
  return null;
case MONTHLY:
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
  Calendar aCalendar=(Calendar)today.clone();
  aCalendar.add(Calendar.MONTH,-1);
  aCalendar.set(Calendar.DATE,1);
  aCalendar.set(Calendar.HOUR,0);
  aCalendar.set(Calendar.MINUTE,0);
  aCalendar.set(Calendar.SECOND,0);
  firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
  return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
return null;
case QUATERLY:
if (month_of_year == Calendar.JANUARY || month_of_year == Calendar.APRIL || month_of_year == Calendar.JULY || month_of_year == Calendar.OCTOBER) {
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
Calendar aCalendar=(Calendar)today.clone();
aCalendar.add(Calendar.MONTH,-3);
aCalendar.set(Calendar.DATE,1);
aCalendar.set(Calendar.HOUR,0);
aCalendar.set(Calendar.MINUTE,0);
aCalendar.set(Calendar.SECOND,0);
firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
aCalendar.add(Calendar.MONTH,2);
aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
}
return null;
case HALFYEARLY:
if (month_of_year == Calendar.JANUARY || month_of_year == Calendar.JULY) {
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
Calendar aCalendar=(Calendar)today.clone();
aCalendar.add(Calendar.MONTH,-6);
aCalendar.set(Calendar.DATE,1);
aCalendar.set(Calendar.HOUR,0);
aCalendar.set(Calendar.MINUTE,0);
aCalendar.set(Calendar.SECOND,0);
firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
aCalendar.add(Calendar.MONTH,5);
aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
}
return null;
case YEARLY:
if (month_of_year == Calendar.JANUARY) {
if (day_of_month < s_LAST_STATEMENT_SENT_DAYS) {
Calendar aCalendar=(Calendar)today.clone();
aCalendar.add(Calendar.MONTH,-12);
aCalendar.set(Calendar.DATE,1);
aCalendar.set(Calendar.HOUR,0);
aCalendar.set(Calendar.MINUTE,0);
aCalendar.set(Calendar.SECOND,0);
firstDateOfPreviousPeriod=(Calendar)aCalendar.clone();
aCalendar.add(Calendar.MONTH,11);
aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
lastDateOfPreviousPeriod=(Calendar)aCalendar.clone();
return new Calendar[]{firstDateOfPreviousPeriod,lastDateOfPreviousPeriod};
}
}
return null;
default :
break;
}
return null;
}",0.9956395348837208
105163,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> configs=_configDao.getConfiguration(params);
  if (params != null) {
    mergeConfigs(configs,params);
  }
  String period_str=configs.get(QuotaConfig.QuotaStatementPeriod.key());
  int period=period_str == null ? 1 : Integer.parseInt(period_str);
  STATEMENT_PERIODS _period=STATEMENT_PERIODS.values()[period];
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> configs=_configDao.getConfiguration(params);
  if (params != null) {
    mergeConfigs(configs,params);
  }
  String period_str=configs.get(QuotaConfig.QuotaStatementPeriod.key());
  int period=period_str == null ? 1 : Integer.parseInt(period_str);
  QuotaStatementPeriods _period=QuotaStatementPeriods.values()[period];
  return true;
}",0.9083503054989815
105164,"@Test public void testSendStatement() throws UnsupportedEncodingException, MessagingException {
  Calendar date=Calendar.getInstance();
  AccountVO accountVO=new AccountVO();
  accountVO.setId(2L);
  accountVO.setDomainId(1L);
  Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);
  QuotaAccountVO acc=new QuotaAccountVO(2L);
  acc.setQuotaBalance(new BigDecimal(404));
  acc.setLastStatementDate(null);
  List<QuotaAccountVO> accounts=new ArrayList<>();
  accounts.add(acc);
  Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);
  Mockito.when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(),Mockito.anyLong(),Mockito.anyInt(),Mockito.any(Date.class),Mockito.any(Date.class))).thenReturn(new BigDecimal(100));
  quotaStatement.sendStatement();
  Calendar period[]=quotaStatement.statementTime(date,STATEMENT_PERIODS.MONTHLY);
  if (period != null) {
    Mockito.verify(alertManager,Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));
  }
}","@Test public void testSendStatement() throws UnsupportedEncodingException, MessagingException {
  Calendar date=Calendar.getInstance();
  AccountVO accountVO=new AccountVO();
  accountVO.setId(2L);
  accountVO.setDomainId(1L);
  Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);
  QuotaAccountVO acc=new QuotaAccountVO(2L);
  acc.setQuotaBalance(new BigDecimal(404));
  acc.setLastStatementDate(null);
  List<QuotaAccountVO> accounts=new ArrayList<>();
  accounts.add(acc);
  Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);
  Mockito.when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(),Mockito.anyLong(),Mockito.anyInt(),Mockito.any(Date.class),Mockito.any(Date.class))).thenReturn(new BigDecimal(100));
  quotaStatement.sendStatement();
  Calendar period[]=quotaStatement.statementTime(date,QuotaStatementPeriods.MONTHLY);
  if (period != null) {
    Mockito.verify(alertManager,Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));
  }
}",0.9834146341463414
105165,"@Test public void testStatementPeriodMONTHLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 1);
  Calendar period[]=quotaStatement.statementTime(date,STATEMENT_PERIODS.MONTHLY);
  assertTrue(period == null);
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS - 1);
  period=quotaStatement.statementTime(date,STATEMENT_PERIODS.MONTHLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(period[0].toString(),period[0].before(period[1]));
  assertTrue(period[0].toString(),period[0].get(Calendar.DATE) == 1);
  aCalendar=Calendar.getInstance();
  aCalendar.add(Calendar.MONTH,-1);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
}","@Test public void testStatementPeriodMONTHLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 1);
  Calendar period[]=quotaStatement.statementTime(date,QuotaStatementPeriods.MONTHLY);
  assertTrue(period == null);
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS - 1);
  period=quotaStatement.statementTime(date,QuotaStatementPeriods.MONTHLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(period[0].toString(),period[0].before(period[1]));
  assertTrue(period[0].toString(),period[0].get(Calendar.DATE) == 1);
  aCalendar=Calendar.getInstance();
  aCalendar.add(Calendar.MONTH,-1);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
}",0.9624608967674662
105166,"@Test public void testStatementPeriodBIMONTHLY(){
  Calendar date=Calendar.getInstance();
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 1);
  Calendar period[]=quotaStatement.statementTime(date,STATEMENT_PERIODS.BIMONTHLY);
  assertTrue(period == null);
  date.set(Calendar.DATE,1);
  period=quotaStatement.statementTime(date,STATEMENT_PERIODS.BIMONTHLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(period[0].toString(),period[0].before(period[1]));
  assertTrue(period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(period[1].toString(),period[1].get(Calendar.DATE) == 15);
  date=Calendar.getInstance();
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 16);
  period=quotaStatement.statementTime(date,STATEMENT_PERIODS.BIMONTHLY);
  assertTrue(period == null);
  date.set(Calendar.DATE,17);
  period=quotaStatement.statementTime(date,STATEMENT_PERIODS.BIMONTHLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(period[0].toString(),period[0].before(period[1]));
  assertTrue(period[0].toString(),period[0].get(Calendar.DATE) == 16);
  Calendar aCalendar=Calendar.getInstance();
  aCalendar.add(Calendar.MONTH,-1);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
}","@Test public void testStatementPeriodBIMONTHLY(){
  Calendar date=Calendar.getInstance();
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 1);
  Calendar period[]=quotaStatement.statementTime(date,QuotaStatementPeriods.BIMONTHLY);
  assertTrue(period == null);
  date.set(Calendar.DATE,1);
  period=quotaStatement.statementTime(date,QuotaStatementPeriods.BIMONTHLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(period[0].toString(),period[0].before(period[1]));
  assertTrue(period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(period[1].toString(),period[1].get(Calendar.DATE) == 15);
  date=Calendar.getInstance();
  date.set(Calendar.DATE,QuotaStatementImpl.s_LAST_STATEMENT_SENT_DAYS + 16);
  period=quotaStatement.statementTime(date,QuotaStatementPeriods.BIMONTHLY);
  assertTrue(period == null);
  date.set(Calendar.DATE,17);
  period=quotaStatement.statementTime(date,QuotaStatementPeriods.BIMONTHLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(period[0].toString(),period[0].before(period[1]));
  assertTrue(period[0].toString(),period[0].get(Calendar.DATE) == 16);
  Calendar aCalendar=Calendar.getInstance();
  aCalendar.add(Calendar.MONTH,-1);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
}",0.9499652536483668
105167,"@Test public void testStatementPeriodQUATERLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.MONTH,Calendar.JANUARY);
  date.set(Calendar.DATE,1);
  Calendar period[]=quotaStatement.statementTime(date,STATEMENT_PERIODS.QUATERLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].before(period[1]));
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.MONTH) == Calendar.OCTOBER);
  aCalendar=Calendar.getInstance();
  aCalendar.set(Calendar.MONTH,Calendar.DECEMBER);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));
}","@Test public void testStatementPeriodQUATERLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.MONTH,Calendar.JANUARY);
  date.set(Calendar.DATE,1);
  Calendar period[]=quotaStatement.statementTime(date,QuotaStatementPeriods.QUATERLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].before(period[1]));
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.MONTH) == Calendar.OCTOBER);
  aCalendar=Calendar.getInstance();
  aCalendar.set(Calendar.MONTH,Calendar.DECEMBER);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));
}",0.9833024118738404
105168,"@Test public void testStatementPeriodYEARLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.MONTH,Calendar.JANUARY);
  date.set(Calendar.DATE,1);
  Calendar period[]=quotaStatement.statementTime(date,STATEMENT_PERIODS.YEARLY);
  assertTrue(""String_Node_Str"",period != null);
  assertTrue(period.length == 2);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].before(period[1]));
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.MONTH) == Calendar.JANUARY);
  aCalendar=Calendar.getInstance();
  aCalendar.set(Calendar.MONTH,Calendar.DECEMBER);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));
}","@Test public void testStatementPeriodYEARLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.MONTH,Calendar.JANUARY);
  date.set(Calendar.DATE,1);
  Calendar period[]=quotaStatement.statementTime(date,QuotaStatementPeriods.YEARLY);
  assertTrue(""String_Node_Str"",period != null);
  assertTrue(period.length == 2);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].before(period[1]));
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.MONTH) == Calendar.JANUARY);
  aCalendar=Calendar.getInstance();
  aCalendar.set(Calendar.MONTH,Calendar.DECEMBER);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));
}",0.9835164835164836
105169,"@Test public void testStatementPeriodHALFYEARLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.MONTH,Calendar.JANUARY);
  date.set(Calendar.DATE,1);
  Calendar period[]=quotaStatement.statementTime(date,STATEMENT_PERIODS.HALFYEARLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].before(period[1]));
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.MONTH) == Calendar.JULY);
  aCalendar=Calendar.getInstance();
  aCalendar.set(Calendar.MONTH,Calendar.DECEMBER);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));
}","@Test public void testStatementPeriodHALFYEARLY(){
  Calendar date=Calendar.getInstance();
  Calendar aCalendar=Calendar.getInstance();
  date=Calendar.getInstance();
  date.set(Calendar.MONTH,Calendar.JANUARY);
  date.set(Calendar.DATE,1);
  Calendar period[]=quotaStatement.statementTime(date,QuotaStatementPeriods.HALFYEARLY);
  assertTrue(period != null);
  assertTrue(period.length == 2);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].before(period[1]));
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.DATE) == 1);
  assertTrue(""String_Node_Str"" + period[0].toString(),period[0].get(Calendar.MONTH) == Calendar.JULY);
  aCalendar=Calendar.getInstance();
  aCalendar.set(Calendar.MONTH,Calendar.DECEMBER);
  aCalendar.set(Calendar.DATE,aCalendar.getActualMaximum(Calendar.DAY_OF_MONTH) + 1);
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.DATE) == aCalendar.get(Calendar.DATE));
  assertTrue(""String_Node_Str"" + period[1].toString(),period[1].get(Calendar.MONTH) == aCalendar.get(Calendar.MONTH));
}",0.9833178869323448
105170,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _monitoringInterval=UploadMonitoringInterval.value();
  _uploadOperationTimeout=UploadOperationTimeout.value() * 60 * 1000;
  _nodeId=ManagementServerNode.getManagementServerId();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _monitoringInterval=UploadMonitoringInterval.value();
  _uploadOperationTimeout=UploadOperationTimeout.value() * 60 * 1000L;
  _nodeId=ManagementServerNode.getManagementServerId();
  return true;
}",0.9987357774968394
105171,"@Override public String[] applyVpnUsers(final Network network,final List<? extends VpnUser> users,final List<DomainRouterVO> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"");
    throw new ResourceUnavailableException(""String_Node_Str"" + network.getId(),DataCenter.class,network.getDataCenterId());
  }
  s_logger.debug(""String_Node_Str"");
  final BasicVpnRules vpnRules=new BasicVpnRules(network,users);
  boolean agentResults=true;
  for (  final DomainRouterVO router : routers) {
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"");
      throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
    }
    final boolean agentResult=vpnRules.accept(_basicVisitor,router);
    agentResults=agentResults && agentResult;
  }
  final String[] result=new String[users.size()];
  for (int i=0; i < result.length; i++) {
    if (agentResults) {
      result[i]=null;
    }
 else {
      result[i]=String.valueOf(agentResults);
    }
  }
  return result;
}","@Override public String[] applyVpnUsers(final Network network,final List<? extends VpnUser> users,final List<DomainRouterVO> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"");
    throw new ResourceUnavailableException(""String_Node_Str"" + network.getId(),DataCenter.class,network.getDataCenterId());
  }
  s_logger.debug(""String_Node_Str"");
  final BasicVpnRules vpnRules=new BasicVpnRules(network,users);
  boolean agentResults=true;
  for (  final DomainRouterVO router : routers) {
    if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.info(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
      continue;
    }
 else     if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"");
      throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
    }
    final boolean agentResult=vpnRules.accept(_basicVisitor,router);
    agentResults=agentResults && agentResult;
  }
  final String[] result=new String[users.size()];
  for (int i=0; i < result.length; i++) {
    if (agentResults) {
      result[i]=null;
    }
 else {
      result[i]=String.valueOf(agentResults);
    }
  }
  return result;
}",0.9047237790232184
105172,"public Map<String,String> getDetails(){
  return details;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}",0.1827768014059754
105173,"public Map<String,String> getDetails(){
  return details;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}",0.1827768014059754
105174,"/** 
 * 1 millisecond = 1e+6 nanoseconds 1 second = 1000 milliseconds = 1e+9 nanoseconds
 * @return the duration in nanoseconds.
 */
public long getDuration(){
  if (startTickNanoSeconds != null && stopTickNanoSeconds != null) {
    final long timeInNanoSeconds=stopTickNanoSeconds - startTickNanoSeconds;
    return timeInNanoSeconds;
  }
  return -1;
}","/** 
 * 1 millisecond = 1e+6 nanoseconds 1 second = 1000 milliseconds = 1e+9 nanoseconds
 * @return the duration in nanoseconds.
 */
public long getDuration(){
  if (startTickNanoSeconds != null && stopTickNanoSeconds != null) {
    return stopTickNanoSeconds - startTickNanoSeconds;
  }
  return -1;
}",0.8597560975609756
105175,"/** 
 * 1 millisecond = 1e+6 nanoseconds 1 second = 1000 millisecond = 1e+9 nanoseconds
 * @return the duration in milliseconds.
 */
public long getDurationInMillis(){
  if (startTickNanoSeconds != null && stopTickNanoSeconds != null) {
    final long timeInMillis=(stopTickNanoSeconds - startTickNanoSeconds) / (long)Math.pow(MILLIS_FACTOR,EXPONENT);
    return timeInMillis;
  }
  return -1;
}","/** 
 * 1 millisecond = 1e+6 nanoseconds 1 second = 1000 millisecond = 1e+9 nanoseconds
 * @return the duration in milliseconds.
 */
public long getDurationInMillis(){
  if (startTickNanoSeconds != null && stopTickNanoSeconds != null) {
    return (stopTickNanoSeconds - startTickNanoSeconds) / (long)Math.pow(MILLIS_FACTOR,EXPONENT);
  }
  return -1;
}",0.8903743315508021
105176,"@Test public void testProfilerInMillis(){
  s_logger.info(""String_Node_Str"");
  final Profiler pf=new Profiler();
  pf.start();
  try {
    Thread.sleep(ONE_SECOND);
  }
 catch (  final InterruptedException e) {
  }
  pf.stop();
  final long durationInMillis=pf.getDurationInMillis();
  s_logger.info(""String_Node_Str"" + durationInMillis);
  Assert.assertTrue(durationInMillis >= MILLIS_FACTOR && durationInMillis <= MILLIS_FACTOR + MARGIN);
  s_logger.info(""String_Node_Str"");
}","@Test public void testProfilerInMillis(){
  final long sleepTimeMillis=SLEEP_TIME_NANO / 1000000L;
  pf.start();
  pf.stop();
  Assert.assertTrue(pf.getDurationInMillis() == sleepTimeMillis);
}",0.3839285714285714
105177,"@Test public void testProfilerNoStop(){
  final Profiler pf=new Profiler();
  pf.start();
  try {
    Thread.sleep(20);
  }
 catch (  final InterruptedException e) {
  }
  Assert.assertTrue(pf.getDurationInMillis() == -1);
  Assert.assertFalse(pf.isStopped());
}","@Test public void testProfilerNoStop(){
  final long expectedAnswer=-1;
  pf.start();
  Assert.assertTrue(pf.getDurationInMillis() == expectedAnswer);
  Assert.assertFalse(pf.isStopped());
}",0.6991150442477876
105178,"@Test public void testProfilerInNano(){
  final Profiler pf=new Profiler();
  pf.start();
  try {
    Thread.sleep(ONE_SECOND);
  }
 catch (  final InterruptedException e) {
  }
  pf.stop();
  final long duration=pf.getDuration();
  s_logger.info(""String_Node_Str"" + duration);
  Assert.assertTrue(duration >= Math.pow(MILLIS_FACTOR,EXPONENT));
}","@Test public void testProfilerInNano(){
  final long sleepTimeNano=SLEEP_TIME_NANO;
  pf.start();
  pf.stop();
  Assert.assertTrue(pf.getDuration() == sleepTimeNano);
}",0.4630350194552529
105179,"@Test public void testProfilerNoStart(){
  final Profiler pf=new Profiler();
  try {
    Thread.sleep(20);
  }
 catch (  final InterruptedException e) {
  }
  pf.stop();
  Assert.assertTrue(pf.getDurationInMillis() == -1);
  Assert.assertFalse(pf.isStarted());
}","@Test public void testProfilerNoStart(){
  final long expectedAnswer=-1;
  pf.stop();
  Assert.assertTrue(pf.getDurationInMillis() == expectedAnswer);
  Assert.assertFalse(pf.isStarted());
}",0.7168141592920354
105180,"/** 
 * Mount remote device named on local file system on subfolder of _parent field. <p> Supported schemes are ""nfs"" and ""cifs"". <p> CIFS parameters are documented with mount.cifs at http://linux.die.net/man/8/mount.cifs For simplicity, when a URI is used to specify a CIFS share, options such as domain,user,password are passed as query parameters.
 * @param uri crresponding to the remote device. Will throw for unsupported scheme.
 * @param imgStoreId
 * @return name of folder in _parent that device was mounted.
 * @throws UnknownHostException
 */
protected String mountUri(URI uri,String nfsVersion) throws UnknownHostException {
  String uriHostIp=getUriHostIp(uri);
  String nfsPath=uriHostIp + ""String_Node_Str"" + uri.getPath();
  String dir=UUID.nameUUIDFromBytes(nfsPath.getBytes()).toString();
  String localRootPath=_parent + ""String_Node_Str"" + dir;
  String remoteDevice;
  if (uri.getScheme().equals(""String_Node_Str"")) {
    remoteDevice=""String_Node_Str"" + uriHostIp + uri.getPath();
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
 else {
    remoteDevice=nfsPath;
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
  mount(localRootPath,remoteDevice,uri,nfsVersion);
  return dir;
}","/** 
 * Mount remote device named on local file system on subfolder of _parent field. <p> Supported schemes are ""nfs"" and ""cifs"". <p> CIFS parameters are documented with mount.cifs at http://linux.die.net/man/8/mount.cifs For simplicity, when a URI is used to specify a CIFS share, options such as domain,user,password are passed as query parameters.
 * @param uri crresponding to the remote device. Will throw for unsupported scheme.
 * @param imgStoreId
 * @return name of folder in _parent that device was mounted.
 * @throws UnknownHostException
 */
protected String mountUri(URI uri,String nfsVersion) throws UnknownHostException {
  String uriHostIp=getUriHostIp(uri);
  String nfsPath=uriHostIp + ""String_Node_Str"" + uri.getPath();
  String dir=UUID.nameUUIDFromBytes(nfsPath.getBytes(com.cloud.utils.StringUtils.getPreferredCharset())).toString();
  String localRootPath=_parent + ""String_Node_Str"" + dir;
  String remoteDevice;
  if (uri.getScheme().equals(""String_Node_Str"")) {
    remoteDevice=""String_Node_Str"" + uriHostIp + uri.getPath();
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
 else {
    remoteDevice=nfsPath;
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
  mount(localRootPath,remoteDevice,uri,nfsVersion);
  return dir;
}",0.9803133788670148
105181,"@SuppressWarnings(""String_Node_Str"") protected String determineS3TemplateDirectory(final Long accountId,final Long templateId,final String templateUniqueName){
  return join(asList(TEMPLATE_ROOT_DIR,accountId,templateId,templateUniqueName),S3Utils.SEPARATOR);
}","protected String determineS3TemplateDirectory(final Long accountId,final Long templateId,final String templateUniqueName){
  return join(asList(TEMPLATE_ROOT_DIR,accountId,templateId,templateUniqueName),S3Utils.SEPARATOR);
}",0.9237113402061856
105182,"@SuppressWarnings(""String_Node_Str"") protected String determineS3VolumeDirectory(final Long accountId,final Long volId){
  return join(asList(VOLUME_ROOT_DIR,accountId,volId),S3Utils.SEPARATOR);
}","protected String determineS3VolumeDirectory(final Long accountId,final Long volId){
  return join(asList(VOLUME_ROOT_DIR,accountId,volId),S3Utils.SEPARATOR);
}",0.895774647887324
105183,"protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath,_nfsVersion);
    final File downloadDirectory=_storage.getFile(downloadPath);
    if (downloadDirectory.exists()) {
      s_logger.debug(""String_Node_Str"" + downloadPath + ""String_Node_Str"");
    }
 else {
      if (!downloadDirectory.mkdirs()) {
        final String errMsg=""String_Node_Str"" + downloadPath + ""String_Node_Str"";
        s_logger.error(errMsg);
        return new CopyCmdAnswer(errMsg);
      }
    }
    File destFile=new File(downloadDirectory,substringAfterLast(srcData.getPath(),S3Utils.SEPARATOR));
    S3Utils.getFile(s3,s3.getBucketName(),srcData.getPath(),destFile).waitForCompletion();
    if (destFile == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    return postProcessing(destFile,downloadPath,destPath,srcData,destData);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}","protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath,_nfsVersion);
    final File downloadDirectory=_storage.getFile(downloadPath);
    if (downloadDirectory.exists()) {
      s_logger.debug(""String_Node_Str"" + downloadPath + ""String_Node_Str"");
    }
 else {
      if (!downloadDirectory.mkdirs()) {
        final String errMsg=""String_Node_Str"" + downloadPath + ""String_Node_Str"";
        s_logger.error(errMsg);
        return new CopyCmdAnswer(errMsg);
      }
    }
    File destFile=new File(downloadDirectory,substringAfterLast(srcData.getPath(),S3Utils.SEPARATOR));
    S3Utils.getFile(s3,s3.getBucketName(),srcData.getPath(),destFile).waitForCompletion();
    return postProcessing(destFile,downloadPath,destPath,srcData,destData);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}",0.779296066252588
105184,"/** 
 * Mount remote device named on local file system on subfolder of _parent field. <p> Supported schemes are ""nfs"" and ""cifs"". <p> CIFS parameters are documented with mount.cifs at http://linux.die.net/man/8/mount.cifs For simplicity, when a URI is used to specify a CIFS share, options such as domain,user,password are passed as query parameters.
 * @param uri crresponding to the remote device. Will throw for unsupported scheme.
 * @param imgStoreId
 * @return name of folder in _parent that device was mounted.
 * @throws UnknownHostException
 */
protected String mountUri(URI uri,String nfsVersion) throws UnknownHostException {
  String uriHostIp=getUriHostIp(uri);
  String nfsPath=uriHostIp + ""String_Node_Str"" + uri.getPath();
  String dir=UUID.nameUUIDFromBytes(nfsPath.getBytes()).toString();
  String localRootPath=_parent + ""String_Node_Str"" + dir;
  String remoteDevice;
  if (uri.getScheme().equals(""String_Node_Str"")) {
    remoteDevice=""String_Node_Str"" + uriHostIp + uri.getPath();
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
 else {
    remoteDevice=nfsPath;
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
  mount(localRootPath,remoteDevice,uri,nfsVersion);
  return dir;
}","/** 
 * Mount remote device named on local file system on subfolder of _parent field. <p> Supported schemes are ""nfs"" and ""cifs"". <p> CIFS parameters are documented with mount.cifs at http://linux.die.net/man/8/mount.cifs For simplicity, when a URI is used to specify a CIFS share, options such as domain,user,password are passed as query parameters.
 * @param uri crresponding to the remote device. Will throw for unsupported scheme.
 * @param imgStoreId
 * @return name of folder in _parent that device was mounted.
 * @throws UnknownHostException
 */
protected String mountUri(URI uri,String nfsVersion) throws UnknownHostException {
  String uriHostIp=getUriHostIp(uri);
  String nfsPath=uriHostIp + ""String_Node_Str"" + uri.getPath();
  String dir=UUID.nameUUIDFromBytes(nfsPath.getBytes(com.cloud.utils.StringUtils.getPreferredCharset())).toString();
  String localRootPath=_parent + ""String_Node_Str"" + dir;
  String remoteDevice;
  if (uri.getScheme().equals(""String_Node_Str"")) {
    remoteDevice=""String_Node_Str"" + uriHostIp + uri.getPath();
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
 else {
    remoteDevice=nfsPath;
    s_logger.debug(""String_Node_Str"" + remoteDevice);
  }
  mount(localRootPath,remoteDevice,uri,nfsVersion);
  return dir;
}",0.9803133788670148
105185,"@SuppressWarnings(""String_Node_Str"") protected String determineS3TemplateDirectory(final Long accountId,final Long templateId,final String templateUniqueName){
  return join(asList(TEMPLATE_ROOT_DIR,accountId,templateId,templateUniqueName),S3Utils.SEPARATOR);
}","protected String determineS3TemplateDirectory(final Long accountId,final Long templateId,final String templateUniqueName){
  return join(asList(TEMPLATE_ROOT_DIR,accountId,templateId,templateUniqueName),S3Utils.SEPARATOR);
}",0.9237113402061856
105186,"@SuppressWarnings(""String_Node_Str"") protected String determineS3VolumeDirectory(final Long accountId,final Long volId){
  return join(asList(VOLUME_ROOT_DIR,accountId,volId),S3Utils.SEPARATOR);
}","protected String determineS3VolumeDirectory(final Long accountId,final Long volId){
  return join(asList(VOLUME_ROOT_DIR,accountId,volId),S3Utils.SEPARATOR);
}",0.895774647887324
105187,"protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath,_nfsVersion);
    final File downloadDirectory=_storage.getFile(downloadPath);
    if (downloadDirectory.exists()) {
      s_logger.debug(""String_Node_Str"" + downloadPath + ""String_Node_Str"");
    }
 else {
      if (!downloadDirectory.mkdirs()) {
        final String errMsg=""String_Node_Str"" + downloadPath + ""String_Node_Str"";
        s_logger.error(errMsg);
        return new CopyCmdAnswer(errMsg);
      }
    }
    File destFile=new File(downloadDirectory,substringAfterLast(srcData.getPath(),S3Utils.SEPARATOR));
    S3Utils.getFile(s3,s3.getBucketName(),srcData.getPath(),destFile).waitForCompletion();
    if (destFile == null) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    return postProcessing(destFile,downloadPath,destPath,srcData,destData);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}","protected Answer copyFromS3ToNfs(CopyCommand cmd,DataTO srcData,S3TO s3,DataTO destData,NfsTO destImageStore){
  final String storagePath=destImageStore.getUrl();
  final String destPath=destData.getPath();
  try {
    String downloadPath=determineStorageTemplatePath(storagePath,destPath,_nfsVersion);
    final File downloadDirectory=_storage.getFile(downloadPath);
    if (downloadDirectory.exists()) {
      s_logger.debug(""String_Node_Str"" + downloadPath + ""String_Node_Str"");
    }
 else {
      if (!downloadDirectory.mkdirs()) {
        final String errMsg=""String_Node_Str"" + downloadPath + ""String_Node_Str"";
        s_logger.error(errMsg);
        return new CopyCmdAnswer(errMsg);
      }
    }
    File destFile=new File(downloadDirectory,substringAfterLast(srcData.getPath(),S3Utils.SEPARATOR));
    S3Utils.getFile(s3,s3.getBucketName(),srcData.getPath(),destFile).waitForCompletion();
    return postProcessing(destFile,downloadPath,destPath,srcData,destData);
  }
 catch (  Exception e) {
    final String errMsg=format(""String_Node_Str"" + ""String_Node_Str"",e.getMessage());
    s_logger.error(errMsg,e);
    return new CopyCmdAnswer(errMsg);
  }
}",0.779296066252588
105188,"public Map<String,String> getDetails(){
  return details;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}",0.1827768014059754
105189,"public Map<String,String> getDetails(){
  return details;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}",0.1827768014059754
105190,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> configs=_configDao.getConfiguration(params);
  if (params != null) {
    mergeConfigs(configs,params);
  }
  String period_str=configs.get(QuotaConfig.QuotaStatementPeriod.key());
  int period=period_str == null ? 1 : Integer.valueOf(period_str);
  STATEMENT_PERIODS _period=STATEMENT_PERIODS.values()[period];
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> configs=_configDao.getConfiguration(params);
  if (params != null) {
    mergeConfigs(configs,params);
  }
  String period_str=configs.get(QuotaConfig.QuotaStatementPeriod.key());
  int period=period_str == null ? 1 : Integer.parseInt(period_str);
  STATEMENT_PERIODS _period=STATEMENT_PERIODS.values()[period];
  return true;
}",0.9845837615621787
105191,"public String getDetail(String name){
}","public String getDetail(String name){
  return details.get(name);
}",0.7358490566037735
105192,"@Override public QuotaBalanceResponse createQuotaBalanceResponse(List<QuotaBalanceVO> quotaBalance,Date startDate,Date endDate){
  if (quotaBalance == null || quotaBalance.isEmpty()) {
    new InvalidParameterValueException(""String_Node_Str"");
  }
  Collections.sort(quotaBalance,new Comparator<QuotaBalanceVO>(){
    public int compare(    QuotaBalanceVO o1,    QuotaBalanceVO o2){
      return o2.getUpdatedOn().compareTo(o1.getUpdatedOn());
    }
  }
);
  boolean have_balance_entries=false;
  for (Iterator<QuotaBalanceVO> it=quotaBalance.iterator(); it.hasNext(); ) {
    QuotaBalanceVO entry=it.next();
    if (entry.getCreditsId() > 0) {
      have_balance_entries=true;
      break;
    }
  }
  if (have_balance_entries) {
    ListIterator<QuotaBalanceVO> li=quotaBalance.listIterator(quotaBalance.size());
    while (li.hasPrevious()) {
      QuotaBalanceVO entry=li.previous();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + entry);
      }
      if (entry.getCreditsId() > 0) {
        li.remove();
      }
 else {
        break;
      }
    }
  }
  int quota_activity=quotaBalance.size();
  QuotaBalanceResponse resp=new QuotaBalanceResponse();
  BigDecimal lastCredits=new BigDecimal(0);
  boolean consecutive=true;
  for (Iterator<QuotaBalanceVO> it=quotaBalance.iterator(); it.hasNext(); ) {
    QuotaBalanceVO entry=it.next();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + entry);
    }
    if (entry.getCreditsId() > 0) {
      if (consecutive) {
        lastCredits=lastCredits.add(entry.getCreditBalance());
      }
      resp.addCredits(entry);
      it.remove();
    }
 else {
      consecutive=false;
    }
  }
  if (quota_activity > 0 && quotaBalance.size() > 0) {
    QuotaBalanceVO startItem=quotaBalance.get(quotaBalance.size() - 1);
    QuotaBalanceVO endItem=quotaBalance.get(0);
    resp.setStartDate(startDate);
    resp.setStartQuota(startItem.getCreditBalance());
    resp.setEndDate(endDate);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + startItem);
      s_logger.debug(""String_Node_Str"" + endItem);
    }
    resp.setEndQuota(endItem.getCreditBalance().add(lastCredits));
  }
 else   if (quota_activity > 0) {
    resp.setStartDate(startDate);
    resp.setStartQuota(new BigDecimal(0));
    resp.setEndDate(endDate);
    resp.setEndQuota(new BigDecimal(0).add(lastCredits));
  }
 else {
    resp.setStartDate(startDate);
    resp.setEndDate(endDate);
    resp.setStartQuota(new BigDecimal(0));
    resp.setEndQuota(new BigDecimal(0));
  }
  resp.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());
  resp.setObjectName(""String_Node_Str"");
  return resp;
}","@Override public QuotaBalanceResponse createQuotaBalanceResponse(List<QuotaBalanceVO> quotaBalance,Date startDate,Date endDate){
  if (quotaBalance == null || quotaBalance.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Collections.sort(quotaBalance,new Comparator<QuotaBalanceVO>(){
    public int compare(    QuotaBalanceVO o1,    QuotaBalanceVO o2){
      o1=o1 == null ? new QuotaBalanceVO() : o1;
      o2=o2 == null ? new QuotaBalanceVO() : o2;
      return o2.getUpdatedOn().compareTo(o1.getUpdatedOn());
    }
  }
);
  boolean have_balance_entries=false;
  for (Iterator<QuotaBalanceVO> it=quotaBalance.iterator(); it.hasNext(); ) {
    QuotaBalanceVO entry=it.next();
    if (entry.getCreditsId() > 0) {
      have_balance_entries=true;
      break;
    }
  }
  if (have_balance_entries) {
    ListIterator<QuotaBalanceVO> li=quotaBalance.listIterator(quotaBalance.size());
    while (li.hasPrevious()) {
      QuotaBalanceVO entry=li.previous();
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + entry);
      }
      if (entry.getCreditsId() > 0) {
        li.remove();
      }
 else {
        break;
      }
    }
  }
  int quota_activity=quotaBalance.size();
  QuotaBalanceResponse resp=new QuotaBalanceResponse();
  BigDecimal lastCredits=new BigDecimal(0);
  boolean consecutive=true;
  for (Iterator<QuotaBalanceVO> it=quotaBalance.iterator(); it.hasNext(); ) {
    QuotaBalanceVO entry=it.next();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + entry);
    }
    if (entry.getCreditsId() > 0) {
      if (consecutive) {
        lastCredits=lastCredits.add(entry.getCreditBalance());
      }
      resp.addCredits(entry);
      it.remove();
    }
 else {
      consecutive=false;
    }
  }
  if (quota_activity > 0 && quotaBalance.size() > 0) {
    QuotaBalanceVO startItem=quotaBalance.get(quotaBalance.size() - 1);
    QuotaBalanceVO endItem=quotaBalance.get(0);
    resp.setStartDate(startDate);
    resp.setStartQuota(startItem.getCreditBalance());
    resp.setEndDate(endDate);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + startItem);
      s_logger.debug(""String_Node_Str"" + endItem);
    }
    resp.setEndQuota(endItem.getCreditBalance().add(lastCredits));
  }
 else   if (quota_activity > 0) {
    resp.setStartDate(startDate);
    resp.setStartQuota(new BigDecimal(0));
    resp.setEndDate(endDate);
    resp.setEndQuota(new BigDecimal(0).add(lastCredits));
  }
 else {
    resp.setStartDate(startDate);
    resp.setEndDate(endDate);
    resp.setStartQuota(new BigDecimal(0));
    resp.setEndQuota(new BigDecimal(0));
  }
  resp.setCurrency(QuotaConfig.QuotaCurrencySymbol.value());
  resp.setObjectName(""String_Node_Str"");
  return resp;
}",0.9810495626822158
105193,"private QuotaTariffVO makeTariffTestData(){
  QuotaTariffVO tariffVO=new QuotaTariffVO();
  tariffVO.setUsageType(QuotaTypes.IP_ADDRESS);
  tariffVO.setUsageName(""String_Node_Str"");
  tariffVO.setUsageUnit(""String_Node_Str"");
  tariffVO.setCurrencyValue(new BigDecimal(100.19));
  tariffVO.setEffectiveOn(new Date());
  tariffVO.setUsageDiscriminator(""String_Node_Str"");
  return tariffVO;
}","private QuotaTariffVO makeTariffTestData(){
  QuotaTariffVO tariffVO=new QuotaTariffVO();
  tariffVO.setUsageType(QuotaTypes.IP_ADDRESS);
  tariffVO.setUsageName(""String_Node_Str"");
  tariffVO.setUsageUnit(""String_Node_Str"");
  tariffVO.setCurrencyValue(BigDecimal.valueOf(100.19));
  tariffVO.setEffectiveOn(new Date());
  tariffVO.setUsageDiscriminator(""String_Node_Str"");
  return tariffVO;
}",0.9847328244274808
105194,"@Override public NuageVspDeviceVO updateNuageVspDevice(UpdateNuageVspDeviceCmd command){
  NuageVspResource resource=new NuageVspResource();
  final String deviceName=Network.Provider.NuageVsp.getName();
  ExternalNetworkDeviceManager.NetworkDevice networkDevice=ExternalNetworkDeviceManager.NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=command.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  HostVO nuageVspHost=null;
  NuageVspDeviceVO nuageVspDevice=null;
  List<NuageVspDeviceVO> nuageVspDevices=_nuageVspDao.listByPhysicalNetwork(physicalNetworkId);
  if (nuageVspDevices == null || nuageVspDevices.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"" + physicalNetworkId);
  }
 else {
    nuageVspDevice=nuageVspDevices.iterator().next();
    nuageVspHost=_hostDao.findById(nuageVspDevice.getHostId());
    _hostDao.loadDetails(nuageVspHost);
  }
  boolean updateRequired=false;
  NuageVspResource.Configuration resourceConfiguration=NuageVspResource.Configuration.fromConfiguration(nuageVspHost.getDetails());
  if (!Strings.isNullOrEmpty(command.getHostName()) && !command.getHostName().equals(resourceConfiguration.hostName())) {
    resourceConfiguration.name(""String_Node_Str"" + command.getHostName());
    resourceConfiguration.hostName(command.getHostName());
    updateRequired=true;
  }
  if (!Strings.isNullOrEmpty(command.getUserName()) && !command.getUserName().equals(resourceConfiguration.cmsUser())) {
    resourceConfiguration.cmsUser(command.getUserName());
    updateRequired=true;
  }
  if (!Strings.isNullOrEmpty(command.getPassword())) {
    String encodedNewPassword=org.apache.commons.codec.binary.StringUtils.newStringUtf8(Base64.encodeBase64(command.getPassword().getBytes()));
    if (!encodedNewPassword.equals(resourceConfiguration.cmsUserPassword())) {
      resourceConfiguration.cmsUserPassword(encodedNewPassword);
      updateRequired=true;
    }
  }
  if (command.getPort() != null && command.getPort() != Integer.parseInt(resourceConfiguration.port())) {
    resourceConfiguration.port(String.valueOf(command.getPort()));
    updateRequired=true;
  }
  GetClientDefaultsCommand getClientDefaultsCmd=new GetClientDefaultsCommand();
  GetClientDefaultsAnswer getClientDefaultsAnswer=(GetClientDefaultsAnswer)_agentMgr.easySend(nuageVspHost.getId(),getClientDefaultsCmd);
  String apiVersion=MoreObjects.firstNonNull(command.getApiVersion(),resourceConfiguration.apiVersion());
  SupportedApiVersionCommand supportedApiVersionCmd=new SupportedApiVersionCommand(apiVersion);
  Answer supportedApiVersionAnswer=_agentMgr.easySend(nuageVspHost.getId(),supportedApiVersionCmd);
  if (!supportedApiVersionAnswer.getResult()) {
    throw new CloudRuntimeException(""String_Node_Str"" + getClientDefaultsAnswer.getCurrentApiVersion());
  }
  String apiRelativePath=""String_Node_Str"" + apiVersion;
  if (!apiRelativePath.equals(resourceConfiguration.apiRelativePath())) {
    resourceConfiguration.apiVersion(apiVersion);
    resourceConfiguration.apiRelativePath(apiRelativePath);
    updateRequired=true;
  }
  if (command.getApiRetryCount() != null && resourceConfiguration.retryCount() != null) {
    final int retryCount=Integer.parseInt(resourceConfiguration.retryCount());
    if (command.getApiRetryCount() != retryCount) {
      resourceConfiguration.retryCount(String.valueOf(command.getApiRetryCount()));
      updateRequired=true;
    }
  }
  if (command.getApiRetryInterval() != null && resourceConfiguration.retryInterval() != null) {
    final int apiRetryInterval=Integer.parseInt(resourceConfiguration.retryInterval());
    if (command.getApiRetryInterval() != apiRetryInterval) {
      resourceConfiguration.retryInterval(String.valueOf(command.getApiRetryInterval()));
      updateRequired=true;
    }
  }
  if (!updateRequired) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return nuageVspDevice;
  }
  Map<String,String> config=resourceConfiguration.build();
  String updateParameters=""String_Node_Str"" + Joiner.on(""String_Node_Str"").withKeyValueSeparator(""String_Node_Str"").join(config) + ""String_Node_Str"";
  Map<String,Object> hostDetails=Maps.<String,Object>newHashMap(config);
  try {
    resource.configure(resourceConfiguration.hostName(),hostDetails);
    _hostDetailsDao.persist(nuageVspDevice.getHostId(),config);
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + nuageVspDevice.getId() + ""String_Node_Str""+ updateParameters,e);
  }
  return nuageVspDevice;
}","@Override public NuageVspDeviceVO updateNuageVspDevice(UpdateNuageVspDeviceCmd command){
  NuageVspResource resource=new NuageVspResource();
  final String deviceName=Network.Provider.NuageVsp.getName();
  ExternalNetworkDeviceManager.NetworkDevice networkDevice=ExternalNetworkDeviceManager.NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=command.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  HostVO nuageVspHost=null;
  NuageVspDeviceVO nuageVspDevice=null;
  List<NuageVspDeviceVO> nuageVspDevices=_nuageVspDao.listByPhysicalNetwork(physicalNetworkId);
  if (nuageVspDevices == null || nuageVspDevices.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"" + physicalNetworkId);
  }
 else {
    nuageVspDevice=nuageVspDevices.iterator().next();
    nuageVspHost=_hostDao.findById(nuageVspDevice.getHostId());
    _hostDao.loadDetails(nuageVspHost);
  }
  boolean updateRequired=false;
  NuageVspResource.Configuration resourceConfiguration=NuageVspResource.Configuration.fromConfiguration(nuageVspHost.getDetails());
  if (!Strings.isNullOrEmpty(command.getHostName()) && !command.getHostName().equals(resourceConfiguration.hostName())) {
    resourceConfiguration.name(""String_Node_Str"" + command.getHostName());
    resourceConfiguration.hostName(command.getHostName());
    updateRequired=true;
  }
  if (!Strings.isNullOrEmpty(command.getUserName()) && !command.getUserName().equals(resourceConfiguration.cmsUser())) {
    resourceConfiguration.cmsUser(command.getUserName());
    updateRequired=true;
  }
  if (!Strings.isNullOrEmpty(command.getPassword())) {
    String encodedNewPassword=NuageVspUtil.encodePassword(command.getPassword());
    if (!encodedNewPassword.equals(resourceConfiguration.cmsUserPassword())) {
      resourceConfiguration.cmsUserPassword(encodedNewPassword);
      updateRequired=true;
    }
  }
  if (command.getPort() != null && command.getPort() != Integer.parseInt(resourceConfiguration.port())) {
    resourceConfiguration.port(String.valueOf(command.getPort()));
    updateRequired=true;
  }
  GetClientDefaultsCommand getClientDefaultsCmd=new GetClientDefaultsCommand();
  GetClientDefaultsAnswer getClientDefaultsAnswer=(GetClientDefaultsAnswer)_agentMgr.easySend(nuageVspHost.getId(),getClientDefaultsCmd);
  String apiVersion=MoreObjects.firstNonNull(command.getApiVersion(),resourceConfiguration.apiVersion());
  SupportedApiVersionCommand supportedApiVersionCmd=new SupportedApiVersionCommand(apiVersion);
  Answer supportedApiVersionAnswer=_agentMgr.easySend(nuageVspHost.getId(),supportedApiVersionCmd);
  if (!supportedApiVersionAnswer.getResult()) {
    throw new CloudRuntimeException(""String_Node_Str"" + getClientDefaultsAnswer.getCurrentApiVersion());
  }
  String apiRelativePath=""String_Node_Str"" + apiVersion;
  if (!apiRelativePath.equals(resourceConfiguration.apiRelativePath())) {
    resourceConfiguration.apiVersion(apiVersion);
    resourceConfiguration.apiRelativePath(apiRelativePath);
    updateRequired=true;
  }
  if (command.getApiRetryCount() != null && resourceConfiguration.retryCount() != null) {
    final int retryCount=Integer.parseInt(resourceConfiguration.retryCount());
    if (command.getApiRetryCount() != retryCount) {
      resourceConfiguration.retryCount(String.valueOf(command.getApiRetryCount()));
      updateRequired=true;
    }
  }
  if (command.getApiRetryInterval() != null && resourceConfiguration.retryInterval() != null) {
    final int apiRetryInterval=Integer.parseInt(resourceConfiguration.retryInterval());
    if (command.getApiRetryInterval() != apiRetryInterval) {
      resourceConfiguration.retryInterval(String.valueOf(command.getApiRetryInterval()));
      updateRequired=true;
    }
  }
  if (!updateRequired) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return nuageVspDevice;
  }
  Map<String,String> config=resourceConfiguration.build();
  String updateParameters=""String_Node_Str"" + Joiner.on(""String_Node_Str"").withKeyValueSeparator(""String_Node_Str"").join(config) + ""String_Node_Str"";
  Map<String,Object> hostDetails=Maps.<String,Object>newHashMap(config);
  try {
    resource.configure(resourceConfiguration.hostName(),hostDetails);
    _hostDetailsDao.persist(nuageVspDevice.getHostId(),config);
  }
 catch (  ConfigurationException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + nuageVspDevice.getId() + ""String_Node_Str""+ updateParameters,e);
  }
  return nuageVspDevice;
}",0.9875986471251408
105195,"@Override public NuageVspDeviceVO addNuageVspDevice(AddNuageVspDeviceCmd cmd){
  final NuageVspResource resource=new NuageVspResource();
  final String deviceName=Network.Provider.NuageVsp.getName();
  ExternalNetworkDeviceManager.NetworkDevice networkDevice=ExternalNetworkDeviceManager.NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  if (_nuageVspDao.listByPhysicalNetwork(physicalNetworkId).size() != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    NuageVspPluginClientLoader clientLoader=NuageVspPluginClientLoader.getClientLoader(null,null,1,1,null);
    Map<String,Object> clientDefaults=clientLoader.getNuageVspManagerClient().getClientDefaults();
    String apiVersion=MoreObjects.firstNonNull(cmd.getApiVersion(),(String)clientDefaults.get(""String_Node_Str""));
    if (!clientLoader.getNuageVspManagerClient().isSupportedApiVersion(apiVersion)) {
      throw new CloudRuntimeException(""String_Node_Str"" + apiVersion);
    }
    int port=cmd.getPort();
    if (0 == port) {
      port=8443;
    }
    String cmsUserPasswordBase64=org.apache.commons.codec.binary.StringUtils.newStringUtf8(Base64.encodeBase64(cmd.getPassword().getBytes()));
    String retryCount=String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryCount(),clientDefaults.get(""String_Node_Str"")));
    String retryInterval=String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryInterval(),clientDefaults.get(""String_Node_Str"")));
    NuageVspResource.Configuration resourceConfiguration=new NuageVspResource.Configuration().name(""String_Node_Str"" + cmd.getHostName()).guid(UUID.randomUUID().toString()).zoneId(String.valueOf(physicalNetwork.getDataCenterId())).hostName(cmd.getHostName()).cmsUser(cmd.getUserName()).cmsUserPassword(cmsUserPasswordBase64).port(String.valueOf(port)).apiVersion(apiVersion).apiRelativePath(""String_Node_Str"" + apiVersion).retryCount(retryCount).retryInterval(retryInterval);
    Map<String,String> hostDetails=resourceConfiguration.build();
    resource.configure(cmd.getHostName(),Maps.<String,Object>newHashMap(hostDetails));
    Host host=_resourceMgr.addHost(zoneId,resource,Host.Type.L2Networking,hostDetails);
    if (host == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    NuageVspDeviceVO nuageVspDevice=new NuageVspDeviceVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),deviceName);
    _nuageVspDao.persist(nuageVspDevice);
    DetailVO detail=new DetailVO(host.getId(),""String_Node_Str"",String.valueOf(nuageVspDevice.getId()));
    _hostDetailsDao.persist(detail);
    ConfigurationVO cmsIdConfig=_configDao.findByName(""String_Node_Str"");
    host=findNuageVspHost(nuageVspDevice.getHostId());
    SyncNuageVspCmsIdCommand syncCmd=new SyncNuageVspCmsIdCommand(SyncType.REGISTER,null);
    SyncNuageVspCmsIdAnswer answer=(SyncNuageVspCmsIdAnswer)_agentMgr.easySend(nuageVspDevice.getHostId(),syncCmd);
    if (answer != null && answer.getSuccess()) {
      registerNewNuageVspDevice(cmsIdConfig,nuageVspDevice.getId() + ""String_Node_Str"" + answer.getNuageVspCmsId());
      detail=new DetailVO(host.getId(),""String_Node_Str"",answer.getNuageVspCmsId());
      _hostDetailsDao.persist(detail);
      resourceConfiguration.nuageVspCmsId(answer.getNuageVspCmsId());
      resource.configure(cmd.getHostName(),Maps.<String,Object>newHashMap(resourceConfiguration.build()));
      auditDomainsOnVsp((HostVO)host,true,false);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    return nuageVspDevice;
  }
 catch (  ConfigurationException e) {
    s_logger.error(""String_Node_Str"" + cmd.getHostName(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + cmd.getHostName(),e);
  }
catch (  ExecutionException ee) {
    s_logger.error(""String_Node_Str"" + cmd.getHostName(),ee);
    throw new CloudRuntimeException(""String_Node_Str"" + cmd.getHostName(),ee);
  }
}","@Override public NuageVspDeviceVO addNuageVspDevice(AddNuageVspDeviceCmd cmd){
  final NuageVspResource resource=new NuageVspResource();
  final String deviceName=Network.Provider.NuageVsp.getName();
  ExternalNetworkDeviceManager.NetworkDevice networkDevice=ExternalNetworkDeviceManager.NetworkDevice.getNetworkDevice(deviceName);
  final Long physicalNetworkId=cmd.getPhysicalNetworkId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
  long zoneId=physicalNetwork.getDataCenterId();
  final PhysicalNetworkServiceProviderVO ntwkSvcProvider=_physicalNetworkServiceProviderDao.findByServiceProvider(physicalNetwork.getId(),networkDevice.getNetworkServiceProvder());
  if (ntwkSvcProvider == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + networkDevice.getNetworkServiceProvder() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
 else   if (ntwkSvcProvider.getState() == PhysicalNetworkServiceProvider.State.Shutdown) {
    throw new CloudRuntimeException(""String_Node_Str"" + ntwkSvcProvider.getProviderName() + ""String_Node_Str""+ physicalNetworkId+ ""String_Node_Str"");
  }
  if (_nuageVspDao.listByPhysicalNetwork(physicalNetworkId).size() != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    NuageVspPluginClientLoader clientLoader=NuageVspPluginClientLoader.getClientLoader(null,null,1,1,null);
    Map<String,Object> clientDefaults=clientLoader.getNuageVspManagerClient().getClientDefaults();
    String apiVersion=MoreObjects.firstNonNull(cmd.getApiVersion(),(String)clientDefaults.get(""String_Node_Str""));
    if (!clientLoader.getNuageVspManagerClient().isSupportedApiVersion(apiVersion)) {
      throw new CloudRuntimeException(""String_Node_Str"" + apiVersion);
    }
    int port=cmd.getPort();
    if (0 == port) {
      port=8443;
    }
    String cmsUserPasswordBase64=NuageVspUtil.encodePassword(cmd.getPassword());
    String retryCount=String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryCount(),clientDefaults.get(""String_Node_Str"")));
    String retryInterval=String.valueOf(MoreObjects.firstNonNull(cmd.getApiRetryInterval(),clientDefaults.get(""String_Node_Str"")));
    NuageVspResource.Configuration resourceConfiguration=new NuageVspResource.Configuration().name(""String_Node_Str"" + cmd.getHostName()).guid(UUID.randomUUID().toString()).zoneId(String.valueOf(physicalNetwork.getDataCenterId())).hostName(cmd.getHostName()).cmsUser(cmd.getUserName()).cmsUserPassword(cmsUserPasswordBase64).port(String.valueOf(port)).apiVersion(apiVersion).apiRelativePath(""String_Node_Str"" + apiVersion).retryCount(retryCount).retryInterval(retryInterval);
    Map<String,String> hostDetails=resourceConfiguration.build();
    resource.configure(cmd.getHostName(),Maps.<String,Object>newHashMap(hostDetails));
    Host host=_resourceMgr.addHost(zoneId,resource,Host.Type.L2Networking,hostDetails);
    if (host == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    NuageVspDeviceVO nuageVspDevice=new NuageVspDeviceVO(host.getId(),physicalNetworkId,ntwkSvcProvider.getProviderName(),deviceName);
    _nuageVspDao.persist(nuageVspDevice);
    DetailVO detail=new DetailVO(host.getId(),""String_Node_Str"",String.valueOf(nuageVspDevice.getId()));
    _hostDetailsDao.persist(detail);
    ConfigurationVO cmsIdConfig=_configDao.findByName(""String_Node_Str"");
    host=findNuageVspHost(nuageVspDevice.getHostId());
    SyncNuageVspCmsIdCommand syncCmd=new SyncNuageVspCmsIdCommand(SyncType.REGISTER,null);
    SyncNuageVspCmsIdAnswer answer=(SyncNuageVspCmsIdAnswer)_agentMgr.easySend(nuageVspDevice.getHostId(),syncCmd);
    if (answer != null && answer.getSuccess()) {
      registerNewNuageVspDevice(cmsIdConfig,nuageVspDevice.getId() + ""String_Node_Str"" + answer.getNuageVspCmsId());
      detail=new DetailVO(host.getId(),""String_Node_Str"",answer.getNuageVspCmsId());
      _hostDetailsDao.persist(detail);
      resourceConfiguration.nuageVspCmsId(answer.getNuageVspCmsId());
      resource.configure(cmd.getHostName(),Maps.<String,Object>newHashMap(resourceConfiguration.build()));
      auditDomainsOnVsp((HostVO)host,true,false);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    return nuageVspDevice;
  }
 catch (  ConfigurationException e) {
    s_logger.error(""String_Node_Str"" + cmd.getHostName(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + cmd.getHostName(),e);
  }
catch (  ExecutionException ee) {
    s_logger.error(""String_Node_Str"" + cmd.getHostName(),ee);
    throw new CloudRuntimeException(""String_Node_Str"" + cmd.getHostName(),ee);
  }
}",0.9870401337792644
105196,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=(String)params.get(NAME);
  if (_name == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _guid=(String)params.get(GUID);
  if (_guid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _zoneId=(String)params.get(ZONE_ID);
  if (_zoneId == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _hostName=(String)params.get(HOST_NAME);
  if (Strings.isNullOrEmpty(_hostName)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String cmsUser=(String)params.get(CMS_USER);
  if (Strings.isNullOrEmpty(cmsUser)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String cmsUserPassBase64=(String)params.get(CMS_USER_PASSWORD);
  if (Strings.isNullOrEmpty(cmsUserPassBase64)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String port=(String)params.get(PORT);
  if (Strings.isNullOrEmpty(port)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String apiVersion=(String)params.get(API_VERSION);
  if (Strings.isNullOrEmpty(apiVersion)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
 else   if (!Pattern.matches(""String_Node_Str"",apiVersion)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String apiRelativePath=(String)params.get(API_RELATIVE_PATH);
  if (Strings.isNullOrEmpty(apiRelativePath) || !apiRelativePath.contains(apiVersion)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String retryCount=(String)params.get(RETRY_COUNT);
  if (!Strings.isNullOrEmpty(retryCount)) {
    try {
      _numRetries=Integer.parseInt(retryCount);
    }
 catch (    NumberFormatException ex) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if ((_numRetries < 1) || (_numRetries > 10)) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String retryInterval=(String)params.get(RETRY_INTERVAL);
  if (!Strings.isNullOrEmpty(retryInterval)) {
    try {
      _retryInterval=Integer.parseInt(retryInterval);
    }
 catch (    NumberFormatException ex) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if ((_retryInterval < 0) || (_retryInterval > 10000)) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _relativePath=new StringBuffer().append(""String_Node_Str"").append(_hostName).append(""String_Node_Str"").append(port).append(apiRelativePath).toString();
  String cmsUserPass=org.apache.commons.codec.binary.StringUtils.newStringUtf8(Base64.decodeBase64(cmsUserPassBase64));
  _cmsUserInfo=new String[]{CMS_USER_ENTEPRISE_NAME,cmsUser,cmsUserPass};
  _nuageVspCmsId=(String)params.get(NUAGE_VSP_CMS_ID);
  loadNuageClient();
  try {
    login();
  }
 catch (  ExecutionException|ConfigurationException e) {
    s_logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ cmsUser,e);
    throw new CloudRuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ cmsUser,e);
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=(String)params.get(NAME);
  if (_name == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _guid=(String)params.get(GUID);
  if (_guid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _zoneId=(String)params.get(ZONE_ID);
  if (_zoneId == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _hostName=(String)params.get(HOST_NAME);
  if (Strings.isNullOrEmpty(_hostName)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String cmsUser=(String)params.get(CMS_USER);
  if (Strings.isNullOrEmpty(cmsUser)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String cmsUserPassBase64=(String)params.get(CMS_USER_PASSWORD);
  if (Strings.isNullOrEmpty(cmsUserPassBase64)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String port=(String)params.get(PORT);
  if (Strings.isNullOrEmpty(port)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String apiVersion=(String)params.get(API_VERSION);
  if (Strings.isNullOrEmpty(apiVersion)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
 else   if (!Pattern.matches(""String_Node_Str"",apiVersion)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String apiRelativePath=(String)params.get(API_RELATIVE_PATH);
  if (Strings.isNullOrEmpty(apiRelativePath) || !apiRelativePath.contains(apiVersion)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String retryCount=(String)params.get(RETRY_COUNT);
  if (!Strings.isNullOrEmpty(retryCount)) {
    try {
      _numRetries=Integer.parseInt(retryCount);
    }
 catch (    NumberFormatException ex) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if ((_numRetries < 1) || (_numRetries > 10)) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String retryInterval=(String)params.get(RETRY_INTERVAL);
  if (!Strings.isNullOrEmpty(retryInterval)) {
    try {
      _retryInterval=Integer.parseInt(retryInterval);
    }
 catch (    NumberFormatException ex) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if ((_retryInterval < 0) || (_retryInterval > 10000)) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _relativePath=new StringBuffer().append(""String_Node_Str"").append(_hostName).append(""String_Node_Str"").append(port).append(apiRelativePath).toString();
  String cmsUserPass=NuageVspUtil.decodePassword(cmsUserPassBase64);
  _cmsUserInfo=new String[]{CMS_USER_ENTEPRISE_NAME,cmsUser,cmsUserPass};
  _nuageVspCmsId=(String)params.get(NUAGE_VSP_CMS_ID);
  loadNuageClient();
  try {
    login();
  }
 catch (  ExecutionException|ConfigurationException e) {
    s_logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ cmsUser,e);
    throw new CloudRuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ cmsUser,e);
  }
  return true;
}",0.9803180601480082
105197,"/** 
 * Post local download activity (install and cleanup). Executed in context of downloader thread
 * @throws IOException
 */
private String postLocalDownload(String jobId){
  DownloadJob dnld=jobs.get(jobId);
  TemplateDownloader td=dnld.getTemplateDownloader();
  String resourcePath=dnld.getInstallPathPrefix();
  String finalResourcePath=dnld.getTmpltPath();
  ResourceType resourceType=dnld.getResourceType();
  File originalTemplate=new File(td.getDownloadLocalPath());
  String checkSum=computeCheckSum(originalTemplate);
  if (checkSum == null) {
    s_logger.warn(""String_Node_Str"");
  }
  dnld.setCheckSum(checkSum);
  int imgSizeGigs=(int)Math.ceil(_storage.getSize(td.getDownloadLocalPath()) * 1.0d / (1024 * 1024 * 1024));
  imgSizeGigs++;
  long timeout=(long)imgSizeGigs * installTimeoutPerGig;
  Script scr=null;
  String script=resourceType == ResourceType.TEMPLATE ? createTmpltScr : createVolScr;
  scr=new Script(script,timeout,s_logger);
  scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
  scr.add(""String_Node_Str"",Long.toString(td.getMaxTemplateSizeInBytes()));
  if (dnld.getDescription() != null && dnld.getDescription().length() > 1) {
    scr.add(""String_Node_Str"",dnld.getDescription());
  }
  if (dnld.isHvm()) {
    scr.add(""String_Node_Str"");
  }
  String extension=dnld.getFormat().getFileExtension();
  String templateName=""String_Node_Str"";
  if (extension.equals(""String_Node_Str"")) {
    templateName=jobs.get(jobId).getTmpltName().trim().replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    templateName=java.util.UUID.nameUUIDFromBytes((jobs.get(jobId).getTmpltName() + System.currentTimeMillis()).getBytes()).toString();
  }
  String templateFilename=templateName + ""String_Node_Str"" + extension;
  dnld.setTmpltPath(finalResourcePath + ""String_Node_Str"" + templateFilename);
  scr.add(""String_Node_Str"",templateFilename);
  scr.add(""String_Node_Str"",resourcePath);
  scr.add(""String_Node_Str"",td.getDownloadLocalPath());
  if (dnld.getChecksum() != null && dnld.getChecksum().length() > 1) {
    scr.add(""String_Node_Str"",dnld.getChecksum());
  }
  scr.add(""String_Node_Str"");
  String result;
  result=scr.execute();
  if (result != null) {
    return result;
  }
  File downloadedTemplate=new File(resourcePath + ""String_Node_Str"" + templateFilename);
  _storage.setWorldReadableAndWriteable(downloadedTemplate);
  String propertiesFile=resourcePath;
  if (resourceType == ResourceType.TEMPLATE) {
    propertiesFile+=""String_Node_Str"";
  }
 else {
    propertiesFile+=""String_Node_Str"";
  }
  File templateProperties=new File(propertiesFile);
  _storage.setWorldReadableAndWriteable(templateProperties);
  TemplateLocation loc=new TemplateLocation(_storage,resourcePath);
  try {
    loc.create(dnld.getId(),true,dnld.getTmpltName());
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"" + resourcePath,e);
    loc.purge();
    return ""String_Node_Str"" + e.getMessage();
  }
  Iterator<Processor> en=_processors.values().iterator();
  while (en.hasNext()) {
    Processor processor=en.next();
    FormatInfo info=null;
    try {
      info=processor.process(resourcePath,null,templateName);
    }
 catch (    InternalErrorException e) {
      s_logger.error(""String_Node_Str"",e);
      return e.toString();
    }
    if (info != null) {
      loc.addFormat(info);
      dnld.setTemplatesize(info.virtualSize);
      dnld.setTemplatePhysicalSize(info.size);
      break;
    }
  }
  if (!loc.save()) {
    s_logger.warn(""String_Node_Str"");
    loc.purge();
  }
  return null;
}","/** 
 * Post local download activity (install and cleanup). Executed in context of downloader thread
 * @throws IOException
 */
private String postLocalDownload(String jobId){
  DownloadJob dnld=jobs.get(jobId);
  TemplateDownloader td=dnld.getTemplateDownloader();
  String resourcePath=dnld.getInstallPathPrefix();
  String finalResourcePath=dnld.getTmpltPath();
  ResourceType resourceType=dnld.getResourceType();
  File originalTemplate=new File(td.getDownloadLocalPath());
  String checkSum=computeCheckSum(originalTemplate);
  if (checkSum == null) {
    s_logger.warn(""String_Node_Str"");
  }
  dnld.setCheckSum(checkSum);
  int imgSizeGigs=(int)Math.ceil(_storage.getSize(td.getDownloadLocalPath()) * 1.0d / (1024 * 1024 * 1024));
  imgSizeGigs++;
  long timeout=(long)imgSizeGigs * installTimeoutPerGig;
  Script scr=null;
  String script=resourceType == ResourceType.TEMPLATE ? createTmpltScr : createVolScr;
  scr=new Script(script,timeout,s_logger);
  scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
  scr.add(""String_Node_Str"",Long.toString(td.getMaxTemplateSizeInBytes()));
  if (dnld.getDescription() != null && dnld.getDescription().length() > 1) {
    scr.add(""String_Node_Str"",dnld.getDescription());
  }
  if (dnld.isHvm()) {
    scr.add(""String_Node_Str"");
  }
  String extension=dnld.getFormat().getFileExtension();
  String templateName=""String_Node_Str"";
  if (extension.equals(""String_Node_Str"")) {
    templateName=jobs.get(jobId).getTmpltName().trim().replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    templateName=java.util.UUID.nameUUIDFromBytes((jobs.get(jobId).getTmpltName() + System.currentTimeMillis()).getBytes(StringUtils.getPreferredCharset())).toString();
  }
  String templateFilename=templateName + ""String_Node_Str"" + extension;
  dnld.setTmpltPath(finalResourcePath + ""String_Node_Str"" + templateFilename);
  scr.add(""String_Node_Str"",templateFilename);
  scr.add(""String_Node_Str"",resourcePath);
  scr.add(""String_Node_Str"",td.getDownloadLocalPath());
  if (dnld.getChecksum() != null && dnld.getChecksum().length() > 1) {
    scr.add(""String_Node_Str"",dnld.getChecksum());
  }
  scr.add(""String_Node_Str"");
  String result;
  result=scr.execute();
  if (result != null) {
    return result;
  }
  File downloadedTemplate=new File(resourcePath + ""String_Node_Str"" + templateFilename);
  _storage.setWorldReadableAndWriteable(downloadedTemplate);
  String propertiesFile=resourcePath;
  if (resourceType == ResourceType.TEMPLATE) {
    propertiesFile+=""String_Node_Str"";
  }
 else {
    propertiesFile+=""String_Node_Str"";
  }
  File templateProperties=new File(propertiesFile);
  _storage.setWorldReadableAndWriteable(templateProperties);
  TemplateLocation loc=new TemplateLocation(_storage,resourcePath);
  try {
    loc.create(dnld.getId(),true,dnld.getTmpltName());
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"" + resourcePath,e);
    loc.purge();
    return ""String_Node_Str"" + e.getMessage();
  }
  Iterator<Processor> en=_processors.values().iterator();
  while (en.hasNext()) {
    Processor processor=en.next();
    FormatInfo info=null;
    try {
      info=processor.process(resourcePath,null,templateName);
    }
 catch (    InternalErrorException e) {
      s_logger.error(""String_Node_Str"",e);
      return e.toString();
    }
    if (info != null) {
      loc.addFormat(info);
      dnld.setTemplatesize(info.virtualSize);
      dnld.setTemplatePhysicalSize(info.size);
      break;
    }
  }
  if (!loc.save()) {
    s_logger.warn(""String_Node_Str"");
    loc.purge();
  }
  return null;
}",0.9953787984876068
105198,"protected boolean isUserDisabled(SearchResult result) throws NamingException {
  boolean isDisabledUser=false;
  String userAccountControl=LdapUtils.getAttributeValue(result.getAttributes(),_ldapConfiguration.getUserAccountControlAttribute());
  if (userAccountControl != null) {
    int control=Integer.valueOf(userAccountControl);
    if ((control & 2) > 0) {
      isDisabledUser=true;
    }
  }
  return isDisabledUser;
}","protected boolean isUserDisabled(SearchResult result) throws NamingException {
  boolean isDisabledUser=false;
  String userAccountControl=LdapUtils.getAttributeValue(result.getAttributes(),_ldapConfiguration.getUserAccountControlAttribute());
  if (userAccountControl != null) {
    int control=Integer.parseInt(userAccountControl);
    if ((control & 2) > 0) {
      isDisabledUser=true;
    }
  }
  return isDisabledUser;
}",0.7732079905992949
105199,"@Override public List<Long> orderHostsByFreeCapacity(Long clusterId,short capacityTypeForOrdering){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  StringBuilder sql=new StringBuilder(ORDER_HOSTS_BY_FREE_CAPACITY);
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    pstmt.setLong(1,clusterId);
    pstmt.setShort(2,capacityTypeForOrdering);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      result.add(rs.getLong(1));
    }
    return result;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + sql,e);
  }
}","@Override public List<Long> orderHostsByFreeCapacity(Long clusterId,short capacityTypeForOrdering){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  StringBuilder sql=new StringBuilder(ORDER_HOSTS_BY_FREE_CAPACITY_PART1);
  if (clusterId != null) {
    sql.append(""String_Node_Str"");
  }
  sql.append(ORDER_HOSTS_BY_FREE_CAPACITY_PART2);
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    pstmt.setShort(1,capacityTypeForOrdering);
    if (clusterId != null) {
      pstmt.setLong(2,clusterId);
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      result.add(rs.getLong(1));
    }
    return result;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + sql,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + sql,e);
  }
}",0.8525373134328358
105200,"@Override public VpcResponse createVpcResponse(ResponseView view,Vpc vpc){
  VpcResponse response=new VpcResponse();
  response.setId(vpc.getUuid());
  response.setName(vpc.getName());
  response.setDisplayText(vpc.getDisplayText());
  response.setState(vpc.getState().name());
  VpcOffering voff=ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());
  if (voff != null) {
    response.setVpcOfferingId(voff.getUuid());
  }
  response.setCidr(vpc.getCidr());
  response.setRestartRequired(vpc.isRestartRequired());
  response.setNetworkDomain(vpc.getNetworkDomain());
  response.setForDisplay(vpc.isDisplay());
  response.setUsesDistributedRouter(vpc.usesDistributedRouter());
  response.setRedundantRouter(vpc.isRedundant());
  response.setRegionLevelVpc(vpc.isRegionLevelVpc());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> serviceProviders=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviders) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  List<NetworkResponse> networkResponses=new ArrayList<NetworkResponse>();
  List<? extends Network> networks=ApiDBUtils.listVpcNetworks(vpc.getId());
  for (  Network network : networks) {
    NetworkResponse ntwkRsp=createNetworkResponse(view,network);
    networkResponses.add(ntwkRsp);
  }
  DataCenter zone=ApiDBUtils.findZoneById(vpc.getZoneId());
  if (zone != null) {
    response.setZoneId(zone.getUuid());
    response.setZoneName(zone.getName());
  }
  response.setNetworks(networkResponses);
  response.setServices(serviceResponses);
  populateOwner(response,vpc);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc,vpc.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public VpcResponse createVpcResponse(ResponseView view,Vpc vpc){
  VpcResponse response=new VpcResponse();
  response.setId(vpc.getUuid());
  response.setName(vpc.getName());
  response.setDisplayText(vpc.getDisplayText());
  response.setState(vpc.getState().name());
  VpcOffering voff=ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());
  if (voff != null) {
    response.setVpcOfferingId(voff.getUuid());
  }
  response.setCidr(vpc.getCidr());
  response.setRestartRequired(vpc.isRestartRequired());
  response.setNetworkDomain(vpc.getNetworkDomain());
  response.setForDisplay(vpc.isDisplay());
  response.setUsesDistributedRouter(vpc.usesDistributedRouter());
  response.setRedundantRouter(vpc.isRedundant());
  response.setRegionLevelVpc(vpc.isRegionLevelVpc());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> serviceProviders=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviders) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  List<NetworkResponse> networkResponses=new ArrayList<NetworkResponse>();
  List<? extends Network> networks=ApiDBUtils.listVpcNetworks(vpc.getId());
  for (  Network network : networks) {
    NetworkResponse ntwkRsp=createNetworkResponse(view,network);
    networkResponses.add(ntwkRsp);
  }
  DataCenter zone=ApiDBUtils.findZoneById(vpc.getZoneId());
  if (zone != null) {
    response.setZoneId(zone.getUuid());
    response.setZoneName(zone.getName());
  }
  response.setNetworks(networkResponses);
  response.setServices(serviceResponses);
  populateOwner(response,vpc);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc,vpc.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9888600074266616
105201,"@Override public FirewallResponse createFirewallResponse(FirewallRule fwRule){
  FirewallResponse response=new FirewallResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  if (fwRule.getSourcePortStart() != null) {
    response.setStartPort(Integer.toString(fwRule.getSourcePortStart()));
  }
  if (fwRule.getSourcePortEnd() != null) {
    response.setEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  }
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  if (fwRule.getTrafficType() == FirewallRule.TrafficType.Ingress) {
    IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
  }
  Network network=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(network.getUuid());
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setIcmpCode(fwRule.getIcmpCode());
  response.setIcmpType(fwRule.getIcmpType());
  response.setForDisplay(fwRule.isDisplay());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.FirewallRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallResponse createFirewallResponse(FirewallRule fwRule){
  FirewallResponse response=new FirewallResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  if (fwRule.getSourcePortStart() != null) {
    response.setStartPort(Integer.toString(fwRule.getSourcePortStart()));
  }
  if (fwRule.getSourcePortEnd() != null) {
    response.setEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  }
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  if (fwRule.getTrafficType() == FirewallRule.TrafficType.Ingress) {
    IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
  }
  Network network=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(network.getUuid());
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setIcmpCode(fwRule.getIcmpCode());
  response.setIcmpType(fwRule.getIcmpType());
  response.setForDisplay(fwRule.isDisplay());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.FirewallRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9829738933030648
105202,"@Override public SnapshotResponse createSnapshotResponse(Snapshot snapshot){
  SnapshotResponse snapshotResponse=new SnapshotResponse();
  snapshotResponse.setId(snapshot.getUuid());
  populateOwner(snapshotResponse,snapshot);
  VolumeVO volume=findVolumeById(snapshot.getVolumeId());
  String snapshotTypeStr=snapshot.getRecurringType().name();
  snapshotResponse.setSnapshotType(snapshotTypeStr);
  if (volume != null) {
    snapshotResponse.setVolumeId(volume.getUuid());
    snapshotResponse.setVolumeName(volume.getName());
    snapshotResponse.setVolumeType(volume.getVolumeType().name());
    DataCenter zone=ApiDBUtils.findZoneById(volume.getDataCenterId());
    if (zone != null) {
      snapshotResponse.setZoneId(zone.getUuid());
    }
  }
  snapshotResponse.setCreated(snapshot.getCreated());
  snapshotResponse.setName(snapshot.getName());
  snapshotResponse.setIntervalType(ApiDBUtils.getSnapshotIntervalTypes(snapshot.getId()));
  snapshotResponse.setState(snapshot.getState());
  SnapshotInfo snapshotInfo=null;
  if (snapshot instanceof SnapshotInfo) {
    snapshotInfo=(SnapshotInfo)snapshot;
  }
 else {
    DataStoreRole dataStoreRole=getDataStoreRole(snapshot,_snapshotStoreDao,_dataStoreMgr);
    snapshotInfo=snapshotfactory.getSnapshot(snapshot.getId(),dataStoreRole);
  }
  if (snapshotInfo == null) {
    s_logger.debug(""String_Node_Str"" + snapshot.getUuid());
    snapshotResponse.setRevertable(false);
  }
 else {
    snapshotResponse.setRevertable(snapshotInfo.isRevertable());
    snapshotResponse.setPhysicaSize(snapshotInfo.getPhysicalSize());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Snapshot,snapshot.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  snapshotResponse.setTags(tagResponses);
  snapshotResponse.setObjectName(""String_Node_Str"");
  return snapshotResponse;
}","@Override public SnapshotResponse createSnapshotResponse(Snapshot snapshot){
  SnapshotResponse snapshotResponse=new SnapshotResponse();
  snapshotResponse.setId(snapshot.getUuid());
  populateOwner(snapshotResponse,snapshot);
  VolumeVO volume=findVolumeById(snapshot.getVolumeId());
  String snapshotTypeStr=snapshot.getRecurringType().name();
  snapshotResponse.setSnapshotType(snapshotTypeStr);
  if (volume != null) {
    snapshotResponse.setVolumeId(volume.getUuid());
    snapshotResponse.setVolumeName(volume.getName());
    snapshotResponse.setVolumeType(volume.getVolumeType().name());
    DataCenter zone=ApiDBUtils.findZoneById(volume.getDataCenterId());
    if (zone != null) {
      snapshotResponse.setZoneId(zone.getUuid());
    }
  }
  snapshotResponse.setCreated(snapshot.getCreated());
  snapshotResponse.setName(snapshot.getName());
  snapshotResponse.setIntervalType(ApiDBUtils.getSnapshotIntervalTypes(snapshot.getId()));
  snapshotResponse.setState(snapshot.getState());
  SnapshotInfo snapshotInfo=null;
  if (snapshot instanceof SnapshotInfo) {
    snapshotInfo=(SnapshotInfo)snapshot;
  }
 else {
    DataStoreRole dataStoreRole=getDataStoreRole(snapshot,_snapshotStoreDao,_dataStoreMgr);
    snapshotInfo=snapshotfactory.getSnapshot(snapshot.getId(),dataStoreRole);
  }
  if (snapshotInfo == null) {
    s_logger.debug(""String_Node_Str"" + snapshot.getUuid());
    snapshotResponse.setRevertable(false);
  }
 else {
    snapshotResponse.setRevertable(snapshotInfo.isRevertable());
    snapshotResponse.setPhysicaSize(snapshotInfo.getPhysicalSize());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Snapshot,snapshot.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  snapshotResponse.setTags(tagResponses);
  snapshotResponse.setObjectName(""String_Node_Str"");
  return snapshotResponse;
}",0.985429820301117
105203,"@Override public ResourceTagResponse createResourceTagResponse(ResourceTag resourceTag,boolean keyValueOnly){
  ResourceTagJoinVO rto=ApiDBUtils.newResourceTagView(resourceTag);
  return ApiDBUtils.newResourceTagResponse(rto,keyValueOnly);
}","@Override public ResourceTagResponse createResourceTagResponse(ResourceTag resourceTag,boolean keyValueOnly){
  ResourceTagJoinVO rto=ApiDBUtils.newResourceTagView(resourceTag);
  if (rto == null)   return null;
  return ApiDBUtils.newResourceTagResponse(rto,keyValueOnly);
}",0.9341085271317828
105204,"@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
  response.setDomainName(domain.getName());
}
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}","@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
  response.setDomainName(domain.getName());
}
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}",0.9977951984321412
105205,"@Override public NetworkACLItemResponse createNetworkACLItemResponse(NetworkACLItem aclItem){
  NetworkACLItemResponse response=new NetworkACLItemResponse();
  response.setId(aclItem.getUuid());
  response.setProtocol(aclItem.getProtocol());
  if (aclItem.getSourcePortStart() != null) {
    response.setStartPort(Integer.toString(aclItem.getSourcePortStart()));
  }
  if (aclItem.getSourcePortEnd() != null) {
    response.setEndPort(Integer.toString(aclItem.getSourcePortEnd()));
  }
  response.setCidrList(StringUtils.join(aclItem.getSourceCidrList(),""String_Node_Str""));
  response.setTrafficType(aclItem.getTrafficType().toString());
  NetworkACLItem.State state=aclItem.getState();
  String stateToSet=state.toString();
  if (state.equals(NetworkACLItem.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setIcmpCode(aclItem.getIcmpCode());
  response.setIcmpType(aclItem.getIcmpType());
  response.setState(stateToSet);
  response.setNumber(aclItem.getNumber());
  response.setAction(aclItem.getAction().toString());
  response.setForDisplay(aclItem.isDisplay());
  NetworkACL acl=ApiDBUtils.findByNetworkACLId(aclItem.getAclId());
  if (acl != null) {
    response.setAclId(acl.getUuid());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.NetworkACL,aclItem.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkACLItemResponse createNetworkACLItemResponse(NetworkACLItem aclItem){
  NetworkACLItemResponse response=new NetworkACLItemResponse();
  response.setId(aclItem.getUuid());
  response.setProtocol(aclItem.getProtocol());
  if (aclItem.getSourcePortStart() != null) {
    response.setStartPort(Integer.toString(aclItem.getSourcePortStart()));
  }
  if (aclItem.getSourcePortEnd() != null) {
    response.setEndPort(Integer.toString(aclItem.getSourcePortEnd()));
  }
  response.setCidrList(StringUtils.join(aclItem.getSourceCidrList(),""String_Node_Str""));
  response.setTrafficType(aclItem.getTrafficType().toString());
  NetworkACLItem.State state=aclItem.getState();
  String stateToSet=state.toString();
  if (state.equals(NetworkACLItem.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setIcmpCode(aclItem.getIcmpCode());
  response.setIcmpType(aclItem.getIcmpType());
  response.setState(stateToSet);
  response.setNumber(aclItem.getNumber());
  response.setAction(aclItem.getAction().toString());
  response.setForDisplay(aclItem.isDisplay());
  NetworkACL acl=ApiDBUtils.findByNetworkACLId(aclItem.getAclId());
  if (acl != null) {
    response.setAclId(acl.getUuid());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.NetworkACL,aclItem.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.982068141063957
105206,"@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Map.Entry<Ip,UserVm> entry : lbInstances.entrySet()) {
    Ip ip=entry.getKey();
    UserVm vm=entry.getValue();
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}","@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Map.Entry<Ip,UserVm> entry : lbInstances.entrySet()) {
    Ip ip=entry.getKey();
    UserVm vm=entry.getValue();
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}",0.9893314366998578
105207,"@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestinationIpAddress() != null) {
      response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
      UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestinationIpAddress() != null) {
      response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
      UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9868995633187772
105208,"@Override public LoadBalancerResponse createLoadBalancerResponse(LoadBalancer loadBalancer){
  LoadBalancerResponse lbResponse=new LoadBalancerResponse();
  lbResponse.setId(loadBalancer.getUuid());
  lbResponse.setName(loadBalancer.getName());
  lbResponse.setDescription(loadBalancer.getDescription());
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(loadBalancer.getId());
  lbResponse.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  IPAddressVO publicIp=ApiDBUtils.findIpAddressById(loadBalancer.getSourceIpAddressId());
  lbResponse.setPublicIpId(publicIp.getUuid());
  lbResponse.setPublicIp(publicIp.getAddress().addr());
  lbResponse.setPublicPort(Integer.toString(loadBalancer.getSourcePortStart()));
  lbResponse.setPrivatePort(Integer.toString(loadBalancer.getDefaultPortStart()));
  lbResponse.setAlgorithm(loadBalancer.getAlgorithm());
  lbResponse.setLbProtocol(loadBalancer.getLbProtocol());
  lbResponse.setForDisplay(loadBalancer.isDisplay());
  FirewallRule.State state=loadBalancer.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  lbResponse.setState(stateToSet);
  populateOwner(lbResponse,loadBalancer);
  DataCenter zone=ApiDBUtils.findZoneById(publicIp.getDataCenterId());
  if (zone != null) {
    lbResponse.setZoneId(zone.getUuid());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,loadBalancer.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  Network ntwk=ApiDBUtils.findNetworkById(loadBalancer.getNetworkId());
  lbResponse.setNetworkId(ntwk.getUuid());
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}","@Override public LoadBalancerResponse createLoadBalancerResponse(LoadBalancer loadBalancer){
  LoadBalancerResponse lbResponse=new LoadBalancerResponse();
  lbResponse.setId(loadBalancer.getUuid());
  lbResponse.setName(loadBalancer.getName());
  lbResponse.setDescription(loadBalancer.getDescription());
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(loadBalancer.getId());
  lbResponse.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  IPAddressVO publicIp=ApiDBUtils.findIpAddressById(loadBalancer.getSourceIpAddressId());
  lbResponse.setPublicIpId(publicIp.getUuid());
  lbResponse.setPublicIp(publicIp.getAddress().addr());
  lbResponse.setPublicPort(Integer.toString(loadBalancer.getSourcePortStart()));
  lbResponse.setPrivatePort(Integer.toString(loadBalancer.getDefaultPortStart()));
  lbResponse.setAlgorithm(loadBalancer.getAlgorithm());
  lbResponse.setLbProtocol(loadBalancer.getLbProtocol());
  lbResponse.setForDisplay(loadBalancer.isDisplay());
  FirewallRule.State state=loadBalancer.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  lbResponse.setState(stateToSet);
  populateOwner(lbResponse,loadBalancer);
  DataCenter zone=ApiDBUtils.findZoneById(publicIp.getDataCenterId());
  if (zone != null) {
    lbResponse.setZoneId(zone.getUuid());
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,loadBalancer.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  lbResponse.setTags(tagResponses);
  Network ntwk=ApiDBUtils.findNetworkById(loadBalancer.getNetworkId());
  lbResponse.setNetworkId(ntwk.getUuid());
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}",0.9846625766871164
105209,"@Override public IPAddressResponse createIPAddressResponse(ResponseView view,IpAddress ipAddr){
  VlanVO vlan=ApiDBUtils.findVlanById(ipAddr.getVlanId());
  boolean forVirtualNetworks=vlan.getVlanType().equals(VlanType.VirtualNetwork);
  long zoneId=ipAddr.getDataCenterId();
  IPAddressResponse ipResponse=new IPAddressResponse();
  ipResponse.setId(ipAddr.getUuid());
  ipResponse.setIpAddress(ipAddr.getAddress().toString());
  if (ipAddr.getAllocatedTime() != null) {
    ipResponse.setAllocated(ipAddr.getAllocatedTime());
  }
  DataCenter zone=ApiDBUtils.findZoneById(ipAddr.getDataCenterId());
  if (zone != null) {
    ipResponse.setZoneId(zone.getUuid());
    ipResponse.setZoneName(zone.getName());
  }
  ipResponse.setSourceNat(ipAddr.isSourceNat());
  ipResponse.setIsSystem(ipAddr.getSystem());
  if (ipAddr.getAllocatedToAccountId() != null) {
    populateOwner(ipResponse,ipAddr);
  }
  ipResponse.setForVirtualNetwork(forVirtualNetworks);
  ipResponse.setStaticNat(ipAddr.isOneToOneNat());
  if (ipAddr.getAssociatedWithVmId() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(ipAddr.getAssociatedWithVmId());
    if (vm != null) {
      ipResponse.setVirtualMachineId(vm.getUuid());
      ipResponse.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        ipResponse.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        ipResponse.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  if (ipAddr.getVmIp() != null) {
    ipResponse.setVirtualMachineIp(ipAddr.getVmIp());
  }
  if (ipAddr.getAssociatedWithNetworkId() != null) {
    Network ntwk=ApiDBUtils.findNetworkById(ipAddr.getAssociatedWithNetworkId());
    if (ntwk != null) {
      ipResponse.setAssociatedNetworkId(ntwk.getUuid());
      ipResponse.setAssociatedNetworkName(ntwk.getName());
    }
  }
  if (ipAddr.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(ipAddr.getVpcId());
    if (vpc != null) {
      ipResponse.setVpcId(vpc.getUuid());
    }
  }
  Long vlanNetworkId=ApiDBUtils.getVlanNetworkId(ipAddr.getVlanId());
  Long networkId;
  if (vlanNetworkId != null) {
    networkId=vlanNetworkId;
  }
 else {
    networkId=ApiDBUtils.getPublicNetworkIdByZone(zoneId);
  }
  if (networkId != null) {
    NetworkVO nw=ApiDBUtils.findNetworkById(networkId);
    if (nw != null) {
      ipResponse.setNetworkId(nw.getUuid());
    }
  }
  ipResponse.setState(ipAddr.getState().toString());
  if (ipAddr.getPhysicalNetworkId() != null) {
    PhysicalNetworkVO pnw=ApiDBUtils.findPhysicalNetworkById(ipAddr.getPhysicalNetworkId());
    if (pnw != null) {
      ipResponse.setPhysicalNetworkId(pnw.getUuid());
    }
  }
  if (view == ResponseView.Full) {
    VlanVO vl=ApiDBUtils.findVlanById(ipAddr.getVlanId());
    if (vl != null) {
      ipResponse.setVlanId(vl.getUuid());
      ipResponse.setVlanName(vl.getVlanTag());
    }
  }
  if (ipAddr.getSystem()) {
    if (ipAddr.isOneToOneNat()) {
      ipResponse.setPurpose(IpAddress.Purpose.StaticNat.toString());
    }
 else {
      ipResponse.setPurpose(IpAddress.Purpose.Lb.toString());
    }
  }
  ipResponse.setForDisplay(ipAddr.isDisplay());
  ipResponse.setPortable(ipAddr.isPortable());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PublicIpAddress,ipAddr.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  ipResponse.setTags(tagResponses);
  ipResponse.setObjectName(""String_Node_Str"");
  return ipResponse;
}","@Override public IPAddressResponse createIPAddressResponse(ResponseView view,IpAddress ipAddr){
  VlanVO vlan=ApiDBUtils.findVlanById(ipAddr.getVlanId());
  boolean forVirtualNetworks=vlan.getVlanType().equals(VlanType.VirtualNetwork);
  long zoneId=ipAddr.getDataCenterId();
  IPAddressResponse ipResponse=new IPAddressResponse();
  ipResponse.setId(ipAddr.getUuid());
  ipResponse.setIpAddress(ipAddr.getAddress().toString());
  if (ipAddr.getAllocatedTime() != null) {
    ipResponse.setAllocated(ipAddr.getAllocatedTime());
  }
  DataCenter zone=ApiDBUtils.findZoneById(ipAddr.getDataCenterId());
  if (zone != null) {
    ipResponse.setZoneId(zone.getUuid());
    ipResponse.setZoneName(zone.getName());
  }
  ipResponse.setSourceNat(ipAddr.isSourceNat());
  ipResponse.setIsSystem(ipAddr.getSystem());
  if (ipAddr.getAllocatedToAccountId() != null) {
    populateOwner(ipResponse,ipAddr);
  }
  ipResponse.setForVirtualNetwork(forVirtualNetworks);
  ipResponse.setStaticNat(ipAddr.isOneToOneNat());
  if (ipAddr.getAssociatedWithVmId() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(ipAddr.getAssociatedWithVmId());
    if (vm != null) {
      ipResponse.setVirtualMachineId(vm.getUuid());
      ipResponse.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        ipResponse.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        ipResponse.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  if (ipAddr.getVmIp() != null) {
    ipResponse.setVirtualMachineIp(ipAddr.getVmIp());
  }
  if (ipAddr.getAssociatedWithNetworkId() != null) {
    Network ntwk=ApiDBUtils.findNetworkById(ipAddr.getAssociatedWithNetworkId());
    if (ntwk != null) {
      ipResponse.setAssociatedNetworkId(ntwk.getUuid());
      ipResponse.setAssociatedNetworkName(ntwk.getName());
    }
  }
  if (ipAddr.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(ipAddr.getVpcId());
    if (vpc != null) {
      ipResponse.setVpcId(vpc.getUuid());
    }
  }
  Long vlanNetworkId=ApiDBUtils.getVlanNetworkId(ipAddr.getVlanId());
  Long networkId;
  if (vlanNetworkId != null) {
    networkId=vlanNetworkId;
  }
 else {
    networkId=ApiDBUtils.getPublicNetworkIdByZone(zoneId);
  }
  if (networkId != null) {
    NetworkVO nw=ApiDBUtils.findNetworkById(networkId);
    if (nw != null) {
      ipResponse.setNetworkId(nw.getUuid());
    }
  }
  ipResponse.setState(ipAddr.getState().toString());
  if (ipAddr.getPhysicalNetworkId() != null) {
    PhysicalNetworkVO pnw=ApiDBUtils.findPhysicalNetworkById(ipAddr.getPhysicalNetworkId());
    if (pnw != null) {
      ipResponse.setPhysicalNetworkId(pnw.getUuid());
    }
  }
  if (view == ResponseView.Full) {
    VlanVO vl=ApiDBUtils.findVlanById(ipAddr.getVlanId());
    if (vl != null) {
      ipResponse.setVlanId(vl.getUuid());
      ipResponse.setVlanName(vl.getVlanTag());
    }
  }
  if (ipAddr.getSystem()) {
    if (ipAddr.isOneToOneNat()) {
      ipResponse.setPurpose(IpAddress.Purpose.StaticNat.toString());
    }
 else {
      ipResponse.setPurpose(IpAddress.Purpose.Lb.toString());
    }
  }
  ipResponse.setForDisplay(ipAddr.isDisplay());
  ipResponse.setPortable(ipAddr.isPortable());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PublicIpAddress,ipAddr.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  ipResponse.setTags(tagResponses);
  ipResponse.setObjectName(""String_Node_Str"");
  return ipResponse;
}",0.9918233851185608
105210,"@Override public StaticRouteResponse createStaticRouteResponse(StaticRoute result){
  StaticRouteResponse response=new StaticRouteResponse();
  response.setId(result.getUuid());
  if (result.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(result.getVpcId());
    if (vpc != null) {
      response.setVpcId(vpc.getUuid());
    }
  }
  response.setCidr(result.getCidr());
  StaticRoute.State state=result.getState();
  if (state.equals(StaticRoute.State.Revoke)) {
    state=StaticRoute.State.Deleting;
  }
  response.setState(state.toString());
  populateAccount(response,result.getAccountId());
  populateDomain(response,result.getDomainId());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.StaticRoute,result.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public StaticRouteResponse createStaticRouteResponse(StaticRoute result){
  StaticRouteResponse response=new StaticRouteResponse();
  response.setId(result.getUuid());
  if (result.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(result.getVpcId());
    if (vpc != null) {
      response.setVpcId(vpc.getUuid());
    }
  }
  response.setCidr(result.getCidr());
  StaticRoute.State state=result.getState();
  if (state.equals(StaticRoute.State.Revoke)) {
    state=StaticRoute.State.Deleting;
  }
  response.setState(state.toString());
  populateAccount(response,result.getAccountId());
  populateDomain(response,result.getDomainId());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.StaticRoute,result.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    CollectionUtils.addIgnoreNull(tagResponses,tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9729486023444543
105211,"@Test public void testRevertToVMSnapshotCommand(){
  final Connection conn=Mockito.mock(Connection.class);
  final VMSnapshotTO snapshotTO=Mockito.mock(VMSnapshotTO.class);
  final List<VolumeObjectTO> volumeTOs=new ArrayList<VolumeObjectTO>();
  final RevertToVMSnapshotCommand vmSnapshot=new RevertToVMSnapshotCommand(""String_Node_Str"",snapshotTO,volumeTOs,""String_Node_Str"");
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  final Answer answer=wrapper.execute(vmSnapshot,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertFalse(answer.getResult());
}","@Test public void testRevertToVMSnapshotCommand(){
  final Connection conn=Mockito.mock(Connection.class);
  final VMSnapshotTO snapshotTO=Mockito.mock(VMSnapshotTO.class);
  final List<VolumeObjectTO> volumeTOs=new ArrayList<VolumeObjectTO>();
  final RevertToVMSnapshotCommand vmSnapshot=new RevertToVMSnapshotCommand(""String_Node_Str"",""String_Node_Str"",snapshotTO,volumeTOs,""String_Node_Str"");
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  final Answer answer=wrapper.execute(vmSnapshot,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertFalse(answer.getResult());
}",0.9576868829337094
105212,"@Test public void testCreateVMSnapshotCommand(){
  final Connection conn=Mockito.mock(Connection.class);
  final VMSnapshotTO snapshotTO=Mockito.mock(VMSnapshotTO.class);
  final List<VolumeObjectTO> volumeTOs=new ArrayList<VolumeObjectTO>();
  final CreateVMSnapshotCommand vmSnapshot=new CreateVMSnapshotCommand(""String_Node_Str"",snapshotTO,volumeTOs,""String_Node_Str"");
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  final Answer answer=wrapper.execute(vmSnapshot,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertTrue(answer.getResult());
}","@Test public void testCreateVMSnapshotCommand(){
  final Connection conn=Mockito.mock(Connection.class);
  final VMSnapshotTO snapshotTO=Mockito.mock(VMSnapshotTO.class);
  final List<VolumeObjectTO> volumeTOs=new ArrayList<VolumeObjectTO>();
  final CreateVMSnapshotCommand vmSnapshot=new CreateVMSnapshotCommand(""String_Node_Str"",""String_Node_Str"",snapshotTO,volumeTOs,""String_Node_Str"");
  final CitrixRequestWrapper wrapper=CitrixRequestWrapper.getInstance();
  assertNotNull(wrapper);
  when(citrixResourceBase.getConnection()).thenReturn(conn);
  final Answer answer=wrapper.execute(vmSnapshot,citrixResourceBase);
  verify(citrixResourceBase,times(1)).getConnection();
  assertTrue(answer.getResult());
}",0.9572649572649572
105213,"@Override public Answer execute(final CreateCommand command,final LibvirtComputingResource libvirtComputingResource){
  final StorageFilerTO pool=command.getPool();
  final DiskProfile dskch=command.getDiskCharacteristics();
  KVMPhysicalDisk baseVol=null;
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  long disksize;
  try {
    final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
    primaryPool=storagePoolMgr.getStoragePool(pool.getType(),pool.getUuid());
    disksize=dskch.getSize();
    if (command.getTemplateUrl() != null) {
      if (primaryPool.getType() == StoragePoolType.CLVM) {
        vol=libvirtComputingResource.templateToPrimaryDownload(command.getTemplateUrl(),primaryPool,dskch.getPath());
      }
 else {
        baseVol=primaryPool.getPhysicalDisk(command.getTemplateUrl());
        vol=storagePoolMgr.createDiskFromTemplate(baseVol,dskch.getPath(),dskch.getProvisioningType(),primaryPool,0);
      }
      if (vol == null) {
        return new Answer(command,false,""String_Node_Str"");
      }
    }
 else {
      vol=primaryPool.createPhysicalDisk(dskch.getPath(),dskch.getProvisioningType(),dskch.getSize());
    }
    final VolumeTO volume=new VolumeTO(command.getVolumeId(),dskch.getType(),pool.getType(),pool.getUuid(),pool.getPath(),vol.getName(),vol.getName(),disksize,null);
    volume.setBytesReadRate(dskch.getBytesReadRate());
    volume.setBytesWriteRate(dskch.getBytesWriteRate());
    volume.setIopsReadRate(dskch.getIopsReadRate());
    volume.setIopsWriteRate(dskch.getIopsWriteRate());
    volume.setCacheMode(dskch.getCacheMode());
    return new CreateAnswer(command,volume);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CreateAnswer(command,e);
  }
}","@Override public Answer execute(final CreateCommand command,final LibvirtComputingResource libvirtComputingResource){
  final StorageFilerTO pool=command.getPool();
  final DiskProfile dskch=command.getDiskCharacteristics();
  KVMPhysicalDisk baseVol=null;
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  long disksize;
  try {
    final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
    primaryPool=storagePoolMgr.getStoragePool(pool.getType(),pool.getUuid());
    disksize=dskch.getSize();
    if (command.getTemplateUrl() != null) {
      if (primaryPool.getType() == StoragePoolType.CLVM) {
        vol=libvirtComputingResource.templateToPrimaryDownload(command.getTemplateUrl(),primaryPool,dskch.getPath());
      }
 else {
        baseVol=primaryPool.getPhysicalDisk(command.getTemplateUrl());
        vol=storagePoolMgr.createDiskFromTemplate(baseVol,dskch.getPath(),dskch.getProvisioningType(),primaryPool,0);
      }
      if (vol == null) {
        return new Answer(command,false,""String_Node_Str"");
      }
    }
 else {
      vol=primaryPool.createPhysicalDisk(dskch.getPath(),dskch.getProvisioningType(),dskch.getSize());
      if (vol == null) {
        return new Answer(command,false,""String_Node_Str"");
      }
    }
    final VolumeTO volume=new VolumeTO(command.getVolumeId(),dskch.getType(),pool.getType(),pool.getUuid(),pool.getPath(),vol.getName(),vol.getName(),disksize,null);
    volume.setBytesReadRate(dskch.getBytesReadRate());
    volume.setBytesWriteRate(dskch.getBytesWriteRate());
    volume.setIopsReadRate(dskch.getIopsReadRate());
    volume.setIopsWriteRate(dskch.getIopsWriteRate());
    volume.setCacheMode(dskch.getCacheMode());
    return new CreateAnswer(command,volume);
  }
 catch (  final CloudRuntimeException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    return new CreateAnswer(command,e);
  }
}",0.975087061344763
105214,"@Test public void testMigrateCommand(){
  final Connect conn=Mockito.mock(Connect.class);
  final Connect dconn=Mockito.mock(Connect.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final String vmName=""String_Node_Str"";
  final String destIp=""String_Node_Str"";
  final boolean isWindows=false;
  final VirtualMachineTO vmTO=Mockito.mock(VirtualMachineTO.class);
  final boolean executeInSequence=false;
  final MigrateCommand command=new MigrateCommand(vmName,destIp,isWindows,vmTO,executeInSequence);
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnectionByVmName(vmName)).thenReturn(conn);
    when(libvirtUtilitiesHelper.retrieveQemuConnection(""String_Node_Str"" + command.getDestinationIp() + ""String_Node_Str"")).thenReturn(dconn);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final InterfaceDef interfaceDef=Mockito.mock(InterfaceDef.class);
  final List<InterfaceDef> ifaces=new ArrayList<InterfaceDef>();
  ifaces.add(interfaceDef);
  when(libvirtComputingResource.getInterfaces(conn,vmName)).thenReturn(ifaces);
  final DiskDef diskDef=Mockito.mock(DiskDef.class);
  final List<DiskDef> disks=new ArrayList<DiskDef>();
  disks.add(diskDef);
  when(libvirtComputingResource.getDisks(conn,vmName)).thenReturn(disks);
  final Domain dm=Mockito.mock(Domain.class);
  try {
    when(conn.domainLookupByName(vmName)).thenReturn(dm);
    when(libvirtComputingResource.getPrivateIp()).thenReturn(""String_Node_Str"");
    when(dm.getXMLDesc(0)).thenReturn(""String_Node_Str"");
    when(dm.isPersistent()).thenReturn(1);
    doNothing().when(dm).undefine();
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final Exception e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnectionByVmName(vmName);
    verify(libvirtUtilitiesHelper,times(1)).retrieveQemuConnection(""String_Node_Str"" + command.getDestinationIp() + ""String_Node_Str"");
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  verify(libvirtComputingResource,times(1)).getInterfaces(conn,vmName);
  verify(libvirtComputingResource,times(1)).getDisks(conn,vmName);
  try {
    verify(conn,times(1)).domainLookupByName(vmName);
    verify(dm,times(1)).getXMLDesc(0);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}","@Test public void testMigrateCommand(){
  final Connect conn=Mockito.mock(Connect.class);
  final Connect dconn=Mockito.mock(Connect.class);
  final LibvirtUtilitiesHelper libvirtUtilitiesHelper=Mockito.mock(LibvirtUtilitiesHelper.class);
  final String vmName=""String_Node_Str"";
  final String destIp=""String_Node_Str"";
  final boolean isWindows=false;
  final VirtualMachineTO vmTO=Mockito.mock(VirtualMachineTO.class);
  final boolean executeInSequence=false;
  final MigrateCommand command=new MigrateCommand(vmName,destIp,isWindows,vmTO,executeInSequence);
  when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(libvirtUtilitiesHelper);
  try {
    when(libvirtUtilitiesHelper.getConnectionByVmName(vmName)).thenReturn(conn);
    when(libvirtUtilitiesHelper.retrieveQemuConnection(""String_Node_Str"" + command.getDestinationIp() + ""String_Node_Str"")).thenReturn(dconn);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  final InterfaceDef interfaceDef=Mockito.mock(InterfaceDef.class);
  final List<InterfaceDef> ifaces=new ArrayList<InterfaceDef>();
  ifaces.add(interfaceDef);
  when(libvirtComputingResource.getInterfaces(conn,vmName)).thenReturn(ifaces);
  final DiskDef diskDef=Mockito.mock(DiskDef.class);
  final List<DiskDef> disks=new ArrayList<DiskDef>();
  disks.add(diskDef);
  when(libvirtComputingResource.getDisks(conn,vmName)).thenReturn(disks);
  final Domain dm=Mockito.mock(Domain.class);
  try {
    when(conn.domainLookupByName(vmName)).thenReturn(dm);
    when(libvirtComputingResource.getPrivateIp()).thenReturn(""String_Node_Str"");
    when(dm.getXMLDesc(8)).thenReturn(""String_Node_Str"");
    when(dm.isPersistent()).thenReturn(1);
    doNothing().when(dm).undefine();
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
catch (  final Exception e) {
    fail(e.getMessage());
  }
  final LibvirtRequestWrapper wrapper=LibvirtRequestWrapper.getInstance();
  assertNotNull(wrapper);
  final Answer answer=wrapper.execute(command,libvirtComputingResource);
  assertTrue(answer.getResult());
  verify(libvirtComputingResource,times(1)).getLibvirtUtilitiesHelper();
  try {
    verify(libvirtUtilitiesHelper,times(1)).getConnectionByVmName(vmName);
    verify(libvirtUtilitiesHelper,times(1)).retrieveQemuConnection(""String_Node_Str"" + command.getDestinationIp() + ""String_Node_Str"");
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
  verify(libvirtComputingResource,times(1)).getInterfaces(conn,vmName);
  verify(libvirtComputingResource,times(1)).getDisks(conn,vmName);
  try {
    verify(conn,times(1)).domainLookupByName(vmName);
    verify(dm,times(1)).getXMLDesc(8);
  }
 catch (  final LibvirtException e) {
    fail(e.getMessage());
  }
}",0.9992740471869328
105215,"@Override public String authenticate(final String command,final Map<String,Object[]> params,final HttpSession session,final String remoteAddress,final String responseType,final StringBuilder auditTrailSb,final HttpServletRequest req,final HttpServletResponse resp) throws ServerApiException {
  if (session == null || session.isNew()) {
    throw new ServerApiException(ApiErrorCode.UNAUTHORIZED,_apiServer.getSerializedApiError(ApiErrorCode.UNAUTHORIZED.getHttpCode(),""String_Node_Str"",params,responseType));
  }
  if (!HttpUtils.validateSessionKey(session,params,req.getCookies(),ApiConstants.SESSIONKEY)) {
    throw new ServerApiException(ApiErrorCode.UNAUTHORIZED,_apiServer.getSerializedApiError(ApiErrorCode.UNAUTHORIZED.getHttpCode(),""String_Node_Str"",params,responseType));
  }
  final long currentUserId=(Long)session.getAttribute(""String_Node_Str"");
  final UserAccount currentUserAccount=_accountService.getUserAccountById(currentUserId);
  if (currentUserAccount == null || currentUserAccount.getSource() != User.Source.SAML2) {
    throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
  }
  String userUuid=null;
  String domainUuid=null;
  if (params.containsKey(ApiConstants.USER_ID)) {
    userUuid=((String[])params.get(ApiConstants.USER_ID))[0];
  }
  if (params.containsKey(ApiConstants.DOMAIN_ID)) {
    domainUuid=((String[])params.get(ApiConstants.DOMAIN_ID))[0];
  }
  if (userUuid != null && domainUuid != null) {
    final User user=_userDao.findByUuid(userUuid);
    final Domain domain=_domainDao.findByUuid(domainUuid);
    final UserAccount nextUserAccount=_accountService.getUserAccountById(user.getId());
    if (nextUserAccount != null && !nextUserAccount.getAccountState().equals(Account.State.enabled.toString())) {
      throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.PARAM_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
    }
    if (nextUserAccount == null || !nextUserAccount.getAccountState().equals(Account.State.enabled.toString()) || !nextUserAccount.getUsername().equals(currentUserAccount.getUsername()) || !nextUserAccount.getExternalEntity().equals(currentUserAccount.getExternalEntity()) || (nextUserAccount.getDomainId() != domain.getId()) || (nextUserAccount.getSource() != User.Source.SAML2)) {
      throw new ServerApiException(ApiErrorCode.PARAM_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.PARAM_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
    }
    try {
      if (_apiServer.verifyUser(nextUserAccount.getId())) {
        final LoginCmdResponse loginResponse=(LoginCmdResponse)_apiServer.loginUser(session,nextUserAccount.getUsername(),nextUserAccount.getUsername() + nextUserAccount.getSource().toString(),nextUserAccount.getDomainId(),null,remoteAddress,params);
        SAMLUtils.setupSamlUserCookies(loginResponse,resp);
        resp.sendRedirect(SAML2AuthManager.SAMLCloudStackRedirectionUrl.value());
        return ApiResponseSerializer.toSerializedString(loginResponse,responseType);
      }
    }
 catch (    CloudAuthenticationException|IOException exception) {
      s_logger.debug(""String_Node_Str"" + exception.getMessage());
    }
  }
 else {
    List<UserAccountVO> switchableAccounts=_userAccountDao.getAllUsersByNameAndEntity(currentUserAccount.getUsername(),currentUserAccount.getExternalEntity());
    if (switchableAccounts != null && switchableAccounts.size() > 0 && currentUserId != User.UID_SYSTEM) {
      List<SamlUserAccountResponse> accountResponses=new ArrayList<SamlUserAccountResponse>();
      for (      UserAccountVO userAccount : switchableAccounts) {
        User user=_userDao.getUser(userAccount.getId());
        Domain domain=_domainService.getDomain(userAccount.getDomainId());
        SamlUserAccountResponse accountResponse=new SamlUserAccountResponse();
        accountResponse.setUserId(user.getUuid());
        accountResponse.setUserName(user.getUsername());
        accountResponse.setDomainId(domain.getUuid());
        accountResponse.setDomainName(domain.getName());
        accountResponse.setAccountName(userAccount.getAccountName());
        accountResponse.setIdpId(user.getExternalEntity());
        accountResponses.add(accountResponse);
      }
      ListResponse<SamlUserAccountResponse> response=new ListResponse<SamlUserAccountResponse>();
      response.setResponses(accountResponses);
      response.setResponseName(getCommandName());
      return ApiResponseSerializer.toSerializedString(response,responseType);
    }
  }
  throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
}","@Override public String authenticate(final String command,final Map<String,Object[]> params,final HttpSession session,InetAddress remoteAddress,final String responseType,final StringBuilder auditTrailSb,final HttpServletRequest req,final HttpServletResponse resp) throws ServerApiException {
  if (session == null || session.isNew()) {
    throw new ServerApiException(ApiErrorCode.UNAUTHORIZED,_apiServer.getSerializedApiError(ApiErrorCode.UNAUTHORIZED.getHttpCode(),""String_Node_Str"",params,responseType));
  }
  if (!HttpUtils.validateSessionKey(session,params,req.getCookies(),ApiConstants.SESSIONKEY)) {
    throw new ServerApiException(ApiErrorCode.UNAUTHORIZED,_apiServer.getSerializedApiError(ApiErrorCode.UNAUTHORIZED.getHttpCode(),""String_Node_Str"",params,responseType));
  }
  final long currentUserId=(Long)session.getAttribute(""String_Node_Str"");
  final UserAccount currentUserAccount=_accountService.getUserAccountById(currentUserId);
  if (currentUserAccount == null || currentUserAccount.getSource() != User.Source.SAML2) {
    throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
  }
  String userUuid=null;
  String domainUuid=null;
  if (params.containsKey(ApiConstants.USER_ID)) {
    userUuid=((String[])params.get(ApiConstants.USER_ID))[0];
  }
  if (params.containsKey(ApiConstants.DOMAIN_ID)) {
    domainUuid=((String[])params.get(ApiConstants.DOMAIN_ID))[0];
  }
  if (userUuid != null && domainUuid != null) {
    final User user=_userDao.findByUuid(userUuid);
    final Domain domain=_domainDao.findByUuid(domainUuid);
    final UserAccount nextUserAccount=_accountService.getUserAccountById(user.getId());
    if (nextUserAccount != null && !nextUserAccount.getAccountState().equals(Account.State.enabled.toString())) {
      throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.PARAM_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
    }
    if (nextUserAccount == null || !nextUserAccount.getAccountState().equals(Account.State.enabled.toString()) || !nextUserAccount.getUsername().equals(currentUserAccount.getUsername()) || !nextUserAccount.getExternalEntity().equals(currentUserAccount.getExternalEntity()) || (nextUserAccount.getDomainId() != domain.getId()) || (nextUserAccount.getSource() != User.Source.SAML2)) {
      throw new ServerApiException(ApiErrorCode.PARAM_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.PARAM_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
    }
    try {
      if (_apiServer.verifyUser(nextUserAccount.getId())) {
        final LoginCmdResponse loginResponse=(LoginCmdResponse)_apiServer.loginUser(session,nextUserAccount.getUsername(),nextUserAccount.getUsername() + nextUserAccount.getSource().toString(),nextUserAccount.getDomainId(),null,remoteAddress,params);
        SAMLUtils.setupSamlUserCookies(loginResponse,resp);
        resp.sendRedirect(SAML2AuthManager.SAMLCloudStackRedirectionUrl.value());
        return ApiResponseSerializer.toSerializedString(loginResponse,responseType);
      }
    }
 catch (    CloudAuthenticationException|IOException exception) {
      s_logger.debug(""String_Node_Str"" + exception.getMessage());
    }
  }
 else {
    List<UserAccountVO> switchableAccounts=_userAccountDao.getAllUsersByNameAndEntity(currentUserAccount.getUsername(),currentUserAccount.getExternalEntity());
    if (switchableAccounts != null && switchableAccounts.size() > 0 && currentUserId != User.UID_SYSTEM) {
      List<SamlUserAccountResponse> accountResponses=new ArrayList<SamlUserAccountResponse>();
      for (      UserAccountVO userAccount : switchableAccounts) {
        User user=_userDao.getUser(userAccount.getId());
        Domain domain=_domainService.getDomain(userAccount.getDomainId());
        SamlUserAccountResponse accountResponse=new SamlUserAccountResponse();
        accountResponse.setUserId(user.getUuid());
        accountResponse.setUserName(user.getUsername());
        accountResponse.setDomainId(domain.getUuid());
        accountResponse.setDomainName(domain.getName());
        accountResponse.setAccountName(userAccount.getAccountName());
        accountResponse.setIdpId(user.getExternalEntity());
        accountResponses.add(accountResponse);
      }
      ListResponse<SamlUserAccountResponse> response=new ListResponse<SamlUserAccountResponse>();
      response.setResponses(accountResponses);
      response.setResponseName(getCommandName());
      return ApiResponseSerializer.toSerializedString(response,responseType);
    }
  }
  throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,_apiServer.getSerializedApiError(ApiErrorCode.ACCOUNT_ERROR.getHttpCode(),""String_Node_Str"",params,responseType));
}",0.9976168272717854
105216,"@Test public void testListAndSwitchSAMLAccountCmd() throws Exception {
  final Map<String,Object[]> params=new HashMap<String,Object[]>();
  final String sessionKeyValue=""String_Node_Str"";
  Mockito.when(session.getAttribute(ApiConstants.SESSIONKEY)).thenReturn(sessionKeyValue);
  Mockito.when(session.getAttribute(""String_Node_Str"")).thenReturn(2L);
  params.put(ApiConstants.USER_ID,new String[]{""String_Node_Str""});
  params.put(ApiConstants.DOMAIN_ID,new String[]{""String_Node_Str""});
  Mockito.when(userDao.findByUuid(Mockito.anyString())).thenReturn(new UserVO(2L));
  Mockito.when(domainDao.findByUuid(Mockito.anyString())).thenReturn(new DomainVO());
  ListAndSwitchSAMLAccountCmd cmd=new ListAndSwitchSAMLAccountCmd();
  Field apiServerField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  apiServerField.setAccessible(true);
  apiServerField.set(cmd,apiServer);
  Field managerField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  managerField.setAccessible(true);
  managerField.set(cmd,samlAuthManager);
  Field accountServiceField=BaseCmd.class.getDeclaredField(""String_Node_Str"");
  accountServiceField.setAccessible(true);
  accountServiceField.set(cmd,accountService);
  Field userAccountDaoField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  userAccountDaoField.setAccessible(true);
  userAccountDaoField.set(cmd,userAccountDao);
  Field userDaoField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  userDaoField.setAccessible(true);
  userDaoField.set(cmd,userDao);
  Field domainDaoField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  domainDaoField.setAccessible(true);
  domainDaoField.set(cmd,domainDao);
  try {
    cmd.authenticate(""String_Node_Str"",params,null,""String_Node_Str"",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.UNAUTHORIZED);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(0)).getUserAccountById(Mockito.anyLong());
  }
  params.put(ApiConstants.SESSIONKEY,new String[]{""String_Node_Str""});
  try {
    Mockito.when(session.isNew()).thenReturn(false);
    cmd.authenticate(""String_Node_Str"",params,session,""String_Node_Str"",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.UNAUTHORIZED);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(0)).getUserAccountById(Mockito.anyLong());
  }
  params.put(ApiConstants.SESSIONKEY,new String[]{sessionKeyValue});
  try {
    cmd.authenticate(""String_Node_Str"",params,session,""String_Node_Str"",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.ACCOUNT_ERROR);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(1)).getUserAccountById(Mockito.anyLong());
  }
  UserAccountVO mockedUserAccount=new UserAccountVO();
  mockedUserAccount.setId(2L);
  mockedUserAccount.setAccountState(Account.State.enabled.toString());
  mockedUserAccount.setUsername(""String_Node_Str"");
  mockedUserAccount.setExternalEntity(""String_Node_Str"");
  mockedUserAccount.setDomainId(0L);
  mockedUserAccount.setSource(User.Source.UNKNOWN);
  Mockito.when(accountService.getUserAccountById(Mockito.anyLong())).thenReturn(mockedUserAccount);
  try {
    cmd.authenticate(""String_Node_Str"",params,session,""String_Node_Str"",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.ACCOUNT_ERROR);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(2)).getUserAccountById(Mockito.anyLong());
  }
  mockedUserAccount.setSource(User.Source.SAML2);
  Mockito.when(accountService.getUserAccountById(Mockito.anyLong())).thenReturn(mockedUserAccount);
  Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(true);
  LoginCmdResponse loginCmdResponse=new LoginCmdResponse();
  loginCmdResponse.setUserId(""String_Node_Str"");
  loginCmdResponse.setDomainId(""String_Node_Str"");
  loginCmdResponse.setType(""String_Node_Str"");
  loginCmdResponse.setUsername(""String_Node_Str"");
  loginCmdResponse.setAccount(""String_Node_Str"");
  loginCmdResponse.setFirstName(""String_Node_Str"");
  loginCmdResponse.setLastName(""String_Node_Str"");
  loginCmdResponse.setSessionKey(""String_Node_Str"");
  Mockito.when(apiServer.loginUser(Mockito.any(HttpSession.class),Mockito.anyString(),Mockito.anyString(),Mockito.anyLong(),Mockito.anyString(),Mockito.anyString(),Mockito.anyMap())).thenReturn(loginCmdResponse);
  try {
    cmd.authenticate(""String_Node_Str"",params,session,""String_Node_Str"",HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    fail(""String_Node_Str"" + exception.getMessage());
  }
 finally {
    Mockito.verify(accountService,Mockito.times(4)).getUserAccountById(Mockito.anyLong());
    Mockito.verify(resp,Mockito.times(1)).sendRedirect(Mockito.anyString());
  }
}","@Test public void testListAndSwitchSAMLAccountCmd() throws Exception {
  final Map<String,Object[]> params=new HashMap<String,Object[]>();
  final String sessionKeyValue=""String_Node_Str"";
  Mockito.when(session.getAttribute(ApiConstants.SESSIONKEY)).thenReturn(sessionKeyValue);
  Mockito.when(session.getAttribute(""String_Node_Str"")).thenReturn(2L);
  params.put(ApiConstants.USER_ID,new String[]{""String_Node_Str""});
  params.put(ApiConstants.DOMAIN_ID,new String[]{""String_Node_Str""});
  Mockito.when(userDao.findByUuid(Mockito.anyString())).thenReturn(new UserVO(2L));
  Mockito.when(domainDao.findByUuid(Mockito.anyString())).thenReturn(new DomainVO());
  ListAndSwitchSAMLAccountCmd cmd=new ListAndSwitchSAMLAccountCmd();
  Field apiServerField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  apiServerField.setAccessible(true);
  apiServerField.set(cmd,apiServer);
  Field managerField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  managerField.setAccessible(true);
  managerField.set(cmd,samlAuthManager);
  Field accountServiceField=BaseCmd.class.getDeclaredField(""String_Node_Str"");
  accountServiceField.setAccessible(true);
  accountServiceField.set(cmd,accountService);
  Field userAccountDaoField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  userAccountDaoField.setAccessible(true);
  userAccountDaoField.set(cmd,userAccountDao);
  Field userDaoField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  userDaoField.setAccessible(true);
  userDaoField.set(cmd,userDao);
  Field domainDaoField=ListAndSwitchSAMLAccountCmd.class.getDeclaredField(""String_Node_Str"");
  domainDaoField.setAccessible(true);
  domainDaoField.set(cmd,domainDao);
  try {
    cmd.authenticate(""String_Node_Str"",params,null,null,HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.UNAUTHORIZED);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(0)).getUserAccountById(Mockito.anyLong());
  }
  params.put(ApiConstants.SESSIONKEY,new String[]{""String_Node_Str""});
  try {
    Mockito.when(session.isNew()).thenReturn(false);
    cmd.authenticate(""String_Node_Str"",params,session,null,HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.UNAUTHORIZED);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(0)).getUserAccountById(Mockito.anyLong());
  }
  params.put(ApiConstants.SESSIONKEY,new String[]{sessionKeyValue});
  try {
    cmd.authenticate(""String_Node_Str"",params,session,null,HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.ACCOUNT_ERROR);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(1)).getUserAccountById(Mockito.anyLong());
  }
  UserAccountVO mockedUserAccount=new UserAccountVO();
  mockedUserAccount.setId(2L);
  mockedUserAccount.setAccountState(Account.State.enabled.toString());
  mockedUserAccount.setUsername(""String_Node_Str"");
  mockedUserAccount.setExternalEntity(""String_Node_Str"");
  mockedUserAccount.setDomainId(0L);
  mockedUserAccount.setSource(User.Source.UNKNOWN);
  Mockito.when(accountService.getUserAccountById(Mockito.anyLong())).thenReturn(mockedUserAccount);
  try {
    cmd.authenticate(""String_Node_Str"",params,session,null,HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    assertEquals(exception.getErrorCode(),ApiErrorCode.ACCOUNT_ERROR);
  }
 finally {
    Mockito.verify(accountService,Mockito.times(2)).getUserAccountById(Mockito.anyLong());
  }
  mockedUserAccount.setSource(User.Source.SAML2);
  Mockito.when(accountService.getUserAccountById(Mockito.anyLong())).thenReturn(mockedUserAccount);
  Mockito.when(apiServer.verifyUser(Mockito.anyLong())).thenReturn(true);
  LoginCmdResponse loginCmdResponse=new LoginCmdResponse();
  loginCmdResponse.setUserId(""String_Node_Str"");
  loginCmdResponse.setDomainId(""String_Node_Str"");
  loginCmdResponse.setType(""String_Node_Str"");
  loginCmdResponse.setUsername(""String_Node_Str"");
  loginCmdResponse.setAccount(""String_Node_Str"");
  loginCmdResponse.setFirstName(""String_Node_Str"");
  loginCmdResponse.setLastName(""String_Node_Str"");
  loginCmdResponse.setSessionKey(""String_Node_Str"");
  Mockito.when(apiServer.loginUser(Mockito.any(HttpSession.class),Mockito.anyString(),Mockito.anyString(),Mockito.anyLong(),Mockito.anyString(),Mockito.any(InetAddress.class),Mockito.anyMap())).thenReturn(loginCmdResponse);
  try {
    cmd.authenticate(""String_Node_Str"",params,session,null,HttpUtils.RESPONSE_TYPE_JSON,new StringBuilder(),req,resp);
  }
 catch (  ServerApiException exception) {
    fail(""String_Node_Str"" + exception.getMessage());
  }
 finally {
    Mockito.verify(accountService,Mockito.times(4)).getUserAccountById(Mockito.anyLong());
    Mockito.verify(resp,Mockito.times(1)).sendRedirect(Mockito.anyString());
  }
}",0.987425033855678
105217,"@Override public long getUsedBytes(StoragePool storagePool){
  long usedSpace=0;
  List<VolumeVO> lstVolumes=_volumeDao.findByPoolId(storagePool.getId(),null);
  if (lstVolumes != null) {
    for (    VolumeVO volume : lstVolumes) {
      VolumeDetailVO volumeDetail=_volumeDetailsDao.findDetail(volume.getId(),SolidFireUtil.VOLUME_SIZE);
      if (volumeDetail != null && volumeDetail.getValue() != null) {
        long volumeSize=Long.parseLong(volumeDetail.getValue());
        usedSpace+=volumeSize;
      }
 else {
        SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePool.getId(),_storagePoolDetailsDao);
        long lVolumeId=Long.valueOf(volume.getFolder());
        SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getSolidFireVolume(sfConnection,lVolumeId);
        updateVolumeDetails(volume.getId(),sfVolume.getTotalSize());
      }
    }
  }
  List<SnapshotVO> lstSnapshots=_snapshotDao.listAll();
  if (lstSnapshots != null) {
    for (    SnapshotVO snapshot : lstSnapshots) {
      SnapshotDetailsVO snapshotDetails=_snapshotDetailsDao.findDetail(snapshot.getId(),SolidFireUtil.STORAGE_POOL_ID);
      if (snapshotDetails != null && snapshotDetails.getValue() != null && Long.parseLong(snapshotDetails.getValue()) == storagePool.getId()) {
        snapshotDetails=_snapshotDetailsDao.findDetail(snapshot.getId(),SolidFireUtil.VOLUME_SIZE);
        if (snapshotDetails != null && snapshotDetails.getValue() != null) {
          long snapshotSize=Long.parseLong(snapshotDetails.getValue());
          usedSpace+=snapshotSize;
        }
      }
    }
  }
  return usedSpace;
}","@Override public long getUsedBytes(StoragePool storagePool){
  long usedSpace=0;
  List<VolumeVO> lstVolumes=_volumeDao.findByPoolId(storagePool.getId(),null);
  if (lstVolumes != null) {
    for (    VolumeVO volume : lstVolumes) {
      VolumeDetailVO volumeDetail=_volumeDetailsDao.findDetail(volume.getId(),SolidFireUtil.VOLUME_SIZE);
      if (volumeDetail != null && volumeDetail.getValue() != null) {
        long volumeSize=Long.parseLong(volumeDetail.getValue());
        usedSpace+=volumeSize;
      }
 else {
        SolidFireUtil.SolidFireConnection sfConnection=SolidFireUtil.getSolidFireConnection(storagePool.getId(),_storagePoolDetailsDao);
        long lVolumeId=Long.parseLong(volume.getFolder());
        SolidFireUtil.SolidFireVolume sfVolume=SolidFireUtil.getSolidFireVolume(sfConnection,lVolumeId);
        updateVolumeDetails(volume.getId(),sfVolume.getTotalSize());
      }
    }
  }
  List<SnapshotVO> lstSnapshots=_snapshotDao.listAll();
  if (lstSnapshots != null) {
    for (    SnapshotVO snapshot : lstSnapshots) {
      SnapshotDetailsVO snapshotDetails=_snapshotDetailsDao.findDetail(snapshot.getId(),SolidFireUtil.STORAGE_POOL_ID);
      if (snapshotDetails != null && snapshotDetails.getValue() != null && Long.parseLong(snapshotDetails.getValue()) == storagePool.getId()) {
        snapshotDetails=_snapshotDetailsDao.findDetail(snapshot.getId(),SolidFireUtil.VOLUME_SIZE);
        if (snapshotDetails != null && snapshotDetails.getValue() != null) {
          long snapshotSize=Long.parseLong(snapshotDetails.getValue());
          usedSpace+=snapshotSize;
        }
      }
    }
  }
  return usedSpace;
}",0.9951249238269348
105218,"private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing ol=client.listObjects(listObjectsRequest);
  while (ol != null && ol.isTruncated()) {
    objects.addAll(ol.getObjectSummaries());
    listObjectsRequest.setMarker(ol.getNextMarker());
    ol=client.listObjects(listObjectsRequest);
  }
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}","private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing ol=client.listObjects(listObjectsRequest);
  if (ol.isTruncated()) {
    do {
      objects.addAll(ol.getObjectSummaries());
      listObjectsRequest.setMarker(ol.getNextMarker());
      ol=client.listObjects(listObjectsRequest);
    }
 while (ol.isTruncated());
  }
 else {
    objects.addAll(ol.getObjectSummaries());
  }
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}",0.7738264580369844
105219,"private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing ol=client.listObjects(listObjectsRequest);
  while (ol != null && ol.isTruncated()) {
    objects.addAll(ol.getObjectSummaries());
    listObjectsRequest.setMarker(ol.getNextMarker());
    ol=client.listObjects(listObjectsRequest);
  }
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}","private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing ol=client.listObjects(listObjectsRequest);
  if (ol.isTruncated()) {
    do {
      objects.addAll(ol.getObjectSummaries());
      listObjectsRequest.setMarker(ol.getNextMarker());
      ol=client.listObjects(listObjectsRequest);
    }
 while (ol.isTruncated());
  }
 else {
    objects.addAll(ol.getObjectSummaries());
  }
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}",0.7738264580369844
105220,"private boolean initSP(){
  KeystoreVO keyStoreVO=_ksDao.findByName(SAMLPluginConstants.SAMLSP_KEYPAIR);
  if (keyStoreVO == null) {
    try {
      KeyPair keyPair=SAMLUtils.generateRandomKeyPair();
      _ksDao.save(SAMLPluginConstants.SAMLSP_KEYPAIR,SAMLUtils.savePrivateKey(keyPair.getPrivate()),SAMLUtils.savePublicKey(keyPair.getPublic()),""String_Node_Str"");
      keyStoreVO=_ksDao.findByName(SAMLPluginConstants.SAMLSP_KEYPAIR);
      s_logger.info(""String_Node_Str"");
    }
 catch (    NoSuchProviderException|NoSuchAlgorithmException e) {
      s_logger.error(""String_Node_Str"" + e.toString());
    }
  }
  String spId=SAMLServiceProviderID.value();
  String spSsoUrl=SAMLServiceProviderSingleSignOnURL.value();
  String spSloUrl=SAMLServiceProviderSingleLogOutURL.value();
  String spOrgName=SAMLServiceProviderOrgName.value();
  String spOrgUrl=SAMLServiceProviderOrgUrl.value();
  String spContactPersonName=SAMLServiceProviderContactPersonName.value();
  String spContactPersonEmail=SAMLServiceProviderContactEmail.value();
  KeyPair spKeyPair=null;
  X509Certificate spX509Key=null;
  if (keyStoreVO != null) {
    PrivateKey privateKey=SAMLUtils.loadPrivateKey(keyStoreVO.getCertificate());
    PublicKey publicKey=SAMLUtils.loadPublicKey(keyStoreVO.getKey());
    if (privateKey != null && publicKey != null) {
      spKeyPair=new KeyPair(publicKey,privateKey);
      KeystoreVO x509VO=_ksDao.findByName(SAMLPluginConstants.SAMLSP_X509CERT);
      if (x509VO == null) {
        try {
          spX509Key=SAMLUtils.generateRandomX509Certificate(spKeyPair);
          ByteArrayOutputStream bos=new ByteArrayOutputStream();
          ObjectOutput out=new ObjectOutputStream(bos);
          out.writeObject(spX509Key);
          out.flush();
          _ksDao.save(SAMLPluginConstants.SAMLSP_X509CERT,Base64.encodeBase64String(bos.toByteArray()),""String_Node_Str"",""String_Node_Str"");
          bos.close();
        }
 catch (        NoSuchAlgorithmException|NoSuchProviderException|CertificateEncodingException|SignatureException|InvalidKeyException|IOException e) {
          s_logger.error(""String_Node_Str"");
        }
      }
 else {
        try {
          ByteArrayInputStream bi=new ByteArrayInputStream(Base64.decodeBase64(x509VO.getCertificate()));
          ObjectInputStream si=new ObjectInputStream(bi);
          spX509Key=(X509Certificate)si.readObject();
          bi.close();
        }
 catch (        IOException|ClassNotFoundException ignored) {
          s_logger.error(""String_Node_Str"");
        }
      }
    }
  }
  if (spKeyPair != null && spX509Key != null && spId != null && spSsoUrl != null && spSloUrl != null && spOrgName != null && spOrgUrl != null && spContactPersonName != null && spContactPersonEmail != null) {
    _spMetadata.setEntityId(spId);
    _spMetadata.setOrganizationName(spOrgName);
    _spMetadata.setOrganizationUrl(spOrgUrl);
    _spMetadata.setContactPersonName(spContactPersonName);
    _spMetadata.setContactPersonEmail(spContactPersonEmail);
    _spMetadata.setSsoUrl(spSsoUrl);
    _spMetadata.setSloUrl(spSloUrl);
    _spMetadata.setKeyPair(spKeyPair);
    _spMetadata.setSigningCertificate(spX509Key);
    _spMetadata.setEncryptionCertificate(spX509Key);
    return true;
  }
  return false;
}","protected boolean initSP(){
  KeystoreVO keyStoreVO=_ksDao.findByName(SAMLPluginConstants.SAMLSP_KEYPAIR);
  if (keyStoreVO == null) {
    try {
      KeyPair keyPair=SAMLUtils.generateRandomKeyPair();
      _ksDao.save(SAMLPluginConstants.SAMLSP_KEYPAIR,SAMLUtils.savePrivateKey(keyPair.getPrivate()),SAMLUtils.savePublicKey(keyPair.getPublic()),""String_Node_Str"");
      keyStoreVO=_ksDao.findByName(SAMLPluginConstants.SAMLSP_KEYPAIR);
      s_logger.info(""String_Node_Str"");
    }
 catch (    NoSuchProviderException|NoSuchAlgorithmException e) {
      s_logger.error(""String_Node_Str"" + e.toString());
    }
  }
  String spId=SAMLServiceProviderID.value();
  String spSsoUrl=SAMLServiceProviderSingleSignOnURL.value();
  String spSloUrl=SAMLServiceProviderSingleLogOutURL.value();
  String spOrgName=SAMLServiceProviderOrgName.value();
  String spOrgUrl=SAMLServiceProviderOrgUrl.value();
  String spContactPersonName=SAMLServiceProviderContactPersonName.value();
  String spContactPersonEmail=SAMLServiceProviderContactEmail.value();
  KeyPair spKeyPair=null;
  X509Certificate spX509Key=null;
  if (keyStoreVO != null) {
    PrivateKey privateKey=SAMLUtils.loadPrivateKey(keyStoreVO.getCertificate());
    PublicKey publicKey=SAMLUtils.loadPublicKey(keyStoreVO.getKey());
    if (privateKey != null && publicKey != null) {
      spKeyPair=new KeyPair(publicKey,privateKey);
      KeystoreVO x509VO=_ksDao.findByName(SAMLPluginConstants.SAMLSP_X509CERT);
      if (x509VO == null) {
        try {
          spX509Key=SAMLUtils.generateRandomX509Certificate(spKeyPair);
          ByteArrayOutputStream bos=new ByteArrayOutputStream();
          ObjectOutput out=new ObjectOutputStream(bos);
          out.writeObject(spX509Key);
          out.flush();
          _ksDao.save(SAMLPluginConstants.SAMLSP_X509CERT,Base64.encodeBase64String(bos.toByteArray()),""String_Node_Str"",""String_Node_Str"");
          bos.close();
        }
 catch (        NoSuchAlgorithmException|NoSuchProviderException|CertificateEncodingException|SignatureException|InvalidKeyException|IOException e) {
          s_logger.error(""String_Node_Str"");
        }
      }
 else {
        try {
          ByteArrayInputStream bi=new ByteArrayInputStream(Base64.decodeBase64(x509VO.getCertificate()));
          ObjectInputStream si=new ObjectInputStream(bi);
          spX509Key=(X509Certificate)si.readObject();
          bi.close();
        }
 catch (        IOException|ClassNotFoundException ignored) {
          s_logger.error(""String_Node_Str"");
        }
      }
    }
  }
  if (spKeyPair != null && spX509Key != null && spId != null && spSsoUrl != null && spSloUrl != null && spOrgName != null && spOrgUrl != null && spContactPersonName != null && spContactPersonEmail != null) {
    _spMetadata.setEntityId(spId);
    _spMetadata.setOrganizationName(spOrgName);
    _spMetadata.setOrganizationUrl(spOrgUrl);
    _spMetadata.setContactPersonName(spContactPersonName);
    _spMetadata.setContactPersonEmail(spContactPersonEmail);
    _spMetadata.setSsoUrl(spSsoUrl);
    _spMetadata.setSloUrl(spSloUrl);
    _spMetadata.setKeyPair(spKeyPair);
    _spMetadata.setSigningCertificate(spX509Key);
    _spMetadata.setEncryptionCertificate(spX509Key);
    return true;
  }
  return false;
}",0.9981600735970562
105221,"@Override public boolean start(){
  if (isSAMLPluginEnabled()) {
    setup();
    s_logger.info(""String_Node_Str"");
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
  return super.start();
}","@Override public boolean start(){
  if (isSAMLPluginEnabled()) {
    s_logger.info(""String_Node_Str"");
    return setup();
  }
 else {
    s_logger.info(""String_Node_Str"");
    return super.start();
  }
}",0.606516290726817
105222,"private boolean setup(){
  if (!initSP()) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  _timer=new Timer();
  final HttpClient client=new HttpClient();
  final String idpMetaDataUrl=SAMLIdentityProviderMetadataURL.value();
  if (SAMLTimeout.value() != null && SAMLTimeout.value() > SAMLPluginConstants.SAML_REFRESH_INTERVAL) {
    _refreshInterval=SAMLTimeout.value();
  }
  try {
    DefaultBootstrap.bootstrap();
    if (idpMetaDataUrl.startsWith(""String_Node_Str"")) {
      _idpMetaDataProvider=new HTTPMetadataProvider(_timer,client,idpMetaDataUrl);
    }
 else {
      File metadataFile=PropertiesUtil.findConfigFile(idpMetaDataUrl);
      s_logger.debug(""String_Node_Str"" + metadataFile.getAbsolutePath());
      _idpMetaDataProvider=new FilesystemMetadataProvider(_timer,metadataFile);
    }
    _idpMetaDataProvider.setRequireValidMetadata(true);
    _idpMetaDataProvider.setParserPool(new BasicParserPool());
    _idpMetaDataProvider.initialize();
    _timer.scheduleAtFixedRate(new MetadataRefreshTask(),0,_refreshInterval * 1000);
  }
 catch (  MetadataProviderException e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    s_logger.error(""String_Node_Str"");
  }
catch (  ConfigurationException|FactoryConfigurationError e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
  }
catch (  NullPointerException e) {
    s_logger.error(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
  }
  return true;
}","private boolean setup(){
  if (!initSP()) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  _timer=new Timer();
  final HttpClient client=new HttpClient();
  final String idpMetaDataUrl=getSAMLIdentityProviderMetadataURL();
  if (SAMLTimeout.value() != null && SAMLTimeout.value() > SAMLPluginConstants.SAML_REFRESH_INTERVAL) {
    _refreshInterval=SAMLTimeout.value();
  }
  try {
    DefaultBootstrap.bootstrap();
    if (idpMetaDataUrl.startsWith(""String_Node_Str"")) {
      _idpMetaDataProvider=new HTTPMetadataProvider(_timer,client,idpMetaDataUrl);
    }
 else {
      File metadataFile=PropertiesUtil.findConfigFile(idpMetaDataUrl);
      if (metadataFile == null) {
        s_logger.error(""String_Node_Str"" + idpMetaDataUrl);
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + metadataFile.getAbsolutePath());
        _idpMetaDataProvider=new FilesystemMetadataProvider(_timer,metadataFile);
      }
    }
    _idpMetaDataProvider.setRequireValidMetadata(true);
    _idpMetaDataProvider.setParserPool(new BasicParserPool());
    _idpMetaDataProvider.initialize();
    _timer.scheduleAtFixedRate(new MetadataRefreshTask(),0,_refreshInterval * 1000);
  }
 catch (  MetadataProviderException e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    s_logger.error(""String_Node_Str"");
    return false;
  }
catch (  ConfigurationException|FactoryConfigurationError e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    return false;
  }
catch (  NullPointerException e) {
    s_logger.error(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}",0.9335046578862832
105223,"@Override public Answer execute(final BackupSnapshotCommand command,final LibvirtComputingResource libvirtComputingResource){
  final Long dcId=command.getDataCenterId();
  final Long accountId=command.getAccountId();
  final Long volumeId=command.getVolumeId();
  final String secondaryStoragePoolUrl=command.getSecondaryStorageUrl();
  final String snapshotName=command.getSnapshotName();
  String snapshotDestPath=null;
  String snapshotRelPath=null;
  final String vmName=command.getVmName();
  KVMStoragePool secondaryStoragePool=null;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  try {
    final LibvirtUtilitiesHelper libvirtUtilitiesHelper=libvirtComputingResource.getLibvirtUtilitiesHelper();
    final Connect conn=libvirtUtilitiesHelper.getConnectionByVmName(vmName);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);
    final String ssPmountPath=secondaryStoragePool.getLocalPath();
    snapshotRelPath=File.separator + ""String_Node_Str"" + File.separator+ dcId+ File.separator+ accountId+ File.separator+ volumeId;
    snapshotDestPath=ssPmountPath + File.separator + ""String_Node_Str""+ File.separator+ dcId+ File.separator+ accountId+ File.separator+ volumeId;
    final KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel());
    final KVMPhysicalDisk snapshotDisk=primaryPool.getPhysicalDisk(command.getVolumePath());
    final String manageSnapshotPath=libvirtComputingResource.manageSnapshotPath();
    final int cmdsTimeout=libvirtComputingResource.getCmdsTimeout();
    if (primaryPool.getType() == StoragePoolType.RBD) {
      try {
        final Rados r=new Rados(primaryPool.getAuthUserName());
        r.confSet(""String_Node_Str"",primaryPool.getSourceHost() + ""String_Node_Str"" + primaryPool.getSourcePort());
        r.confSet(""String_Node_Str"",primaryPool.getAuthSecret());
        r.confSet(""String_Node_Str"",""String_Node_Str"");
        r.connect();
        s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
        final IoCTX io=r.ioCtxCreate(primaryPool.getSourceDir());
        final Rbd rbd=new Rbd(io);
        final RbdImage image=rbd.open(snapshotDisk.getName(),snapshotName);
        final File fh=new File(snapshotDestPath);
        try (BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(fh))){
          final int chunkSize=4194304;
          long offset=0;
          s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapshotDestPath);
          while (true) {
            final byte[] buf=new byte[chunkSize];
            final int bytes=image.read(offset,buf,chunkSize);
            if (bytes <= 0) {
              break;
            }
            bos.write(buf,0,bytes);
            offset+=bytes;
          }
          s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapshotDestPath+ ""String_Node_Str""+ offset);
        }
 catch (        final IOException ex) {
          s_logger.error(""String_Node_Str"" + ex.getMessage());
        }
        r.ioCtxDestroy(io);
      }
 catch (      final RadosException e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
        return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
      }
catch (      final RbdException e) {
        s_logger.error(""String_Node_Str"" + snapshotDisk.getName() + ""String_Node_Str""+ e.getMessage());
        return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
      }
    }
 else {
      final Script scriptCommand=new Script(manageSnapshotPath,cmdsTimeout,s_logger);
      scriptCommand.add(""String_Node_Str"",snapshotDisk.getPath());
      scriptCommand.add(""String_Node_Str"",snapshotName);
      scriptCommand.add(""String_Node_Str"",snapshotDestPath);
      scriptCommand.add(""String_Node_Str"",snapshotName);
      final String result=scriptCommand.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new BackupSnapshotAnswer(command,false,result,null,true);
      }
    }
    DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=libvirtComputingResource.getDomain(conn,command.getVmName());
        state=vm.getInfo().state;
      }
 catch (      final LibvirtException e) {
        s_logger.trace(""String_Node_Str"",e);
      }
    }
    final KVMStoragePool primaryStorage=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPool().getUuid());
    if (state == DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {
      final MessageFormat snapshotXML=new MessageFormat(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      final String vmUuid=vm.getUUIDString();
      final Object[] args=new Object[]{snapshotName,vmUuid};
      final String snapshot=snapshotXML.format(args);
      s_logger.debug(snapshot);
      final DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
      snap.delete(0);
      vm=libvirtComputingResource.getDomain(conn,command.getVmName());
      state=vm.getInfo().state;
      if (state == DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      final Script scriptCommand=new Script(manageSnapshotPath,cmdsTimeout,s_logger);
      scriptCommand.add(""String_Node_Str"",snapshotDisk.getPath());
      scriptCommand.add(""String_Node_Str"",snapshotName);
      final String result=scriptCommand.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new BackupSnapshotAnswer(command,false,""String_Node_Str"" + result,null,true);
      }
    }
  }
 catch (  final LibvirtException e) {
    return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
  }
catch (  final CloudRuntimeException e) {
    return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
  }
 finally {
    if (secondaryStoragePool != null) {
      storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    }
  }
  return new BackupSnapshotAnswer(command,true,null,snapshotRelPath + File.separator + snapshotName,true);
}","@Override public Answer execute(final BackupSnapshotCommand command,final LibvirtComputingResource libvirtComputingResource){
  final Long dcId=command.getDataCenterId();
  final Long accountId=command.getAccountId();
  final Long volumeId=command.getVolumeId();
  final String secondaryStoragePoolUrl=command.getSecondaryStorageUrl();
  final String snapshotName=command.getSnapshotName();
  String snapshotDestPath=null;
  String snapshotRelPath=null;
  final String vmName=command.getVmName();
  KVMStoragePool secondaryStoragePool=null;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  try {
    final LibvirtUtilitiesHelper libvirtUtilitiesHelper=libvirtComputingResource.getLibvirtUtilitiesHelper();
    final Connect conn=libvirtUtilitiesHelper.getConnectionByVmName(vmName);
    secondaryStoragePool=storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);
    final String ssPmountPath=secondaryStoragePool.getLocalPath();
    snapshotRelPath=File.separator + ""String_Node_Str"" + File.separator+ dcId+ File.separator+ accountId+ File.separator+ volumeId;
    snapshotDestPath=ssPmountPath + File.separator + ""String_Node_Str""+ File.separator+ dcId+ File.separator+ accountId+ File.separator+ volumeId;
    final KVMStoragePool primaryPool=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel());
    final KVMPhysicalDisk snapshotDisk=primaryPool.getPhysicalDisk(command.getVolumePath());
    final String manageSnapshotPath=libvirtComputingResource.manageSnapshotPath();
    final int cmdsTimeout=libvirtComputingResource.getCmdsTimeout();
    if (primaryPool.getType() == StoragePoolType.RBD) {
      try {
        final Rados r=new Rados(primaryPool.getAuthUserName());
        r.confSet(""String_Node_Str"",primaryPool.getSourceHost() + ""String_Node_Str"" + primaryPool.getSourcePort());
        r.confSet(""String_Node_Str"",primaryPool.getAuthSecret());
        r.confSet(""String_Node_Str"",""String_Node_Str"");
        r.connect();
        s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
        final IoCTX io=r.ioCtxCreate(primaryPool.getSourceDir());
        final Rbd rbd=new Rbd(io);
        final RbdImage image=rbd.open(snapshotDisk.getName(),snapshotName);
        final File fh=new File(snapshotDestPath);
        try (BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(fh))){
          final int chunkSize=4194304;
          long offset=0;
          s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapshotDestPath);
          while (true) {
            final byte[] buf=new byte[chunkSize];
            final int bytes=image.read(offset,buf,chunkSize);
            if (bytes <= 0) {
              break;
            }
            bos.write(buf,0,bytes);
            offset+=bytes;
          }
          s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ snapshotDestPath+ ""String_Node_Str""+ offset);
        }
 catch (        final IOException ex) {
          s_logger.error(""String_Node_Str"" + ex.getMessage());
        }
        r.ioCtxDestroy(io);
      }
 catch (      final RadosException e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
        return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
      }
catch (      final RbdException e) {
        s_logger.error(""String_Node_Str"" + snapshotDisk.getName() + ""String_Node_Str""+ e.getMessage());
        return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
      }
    }
 else {
      final Script scriptCommand=new Script(manageSnapshotPath,cmdsTimeout,s_logger);
      scriptCommand.add(""String_Node_Str"",snapshotDisk.getPath());
      scriptCommand.add(""String_Node_Str"",snapshotName);
      scriptCommand.add(""String_Node_Str"",snapshotDestPath);
      scriptCommand.add(""String_Node_Str"",snapshotName);
      final String result=scriptCommand.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new BackupSnapshotAnswer(command,false,result,null,true);
      }
    }
    DomainState state=null;
    Domain vm=null;
    if (vmName != null) {
      try {
        vm=libvirtComputingResource.getDomain(conn,command.getVmName());
        state=vm.getInfo().state;
      }
 catch (      final LibvirtException e) {
        s_logger.trace(""String_Node_Str"",e);
      }
    }
    final KVMStoragePool primaryStorage=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPool().getUuid());
    if (state == DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {
      final MessageFormat snapshotXML=new MessageFormat(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      final String vmUuid=vm.getUUIDString();
      final Object[] args=new Object[]{snapshotName,vmUuid};
      final String snapshot=snapshotXML.format(args);
      s_logger.debug(snapshot);
      final DomainSnapshot snap=vm.snapshotLookupByName(snapshotName);
      if (snap != null) {
        snap.delete(0);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotName);
      }
      vm=libvirtComputingResource.getDomain(conn,command.getVmName());
      state=vm.getInfo().state;
      if (state == DomainState.VIR_DOMAIN_PAUSED) {
        vm.resume();
      }
    }
 else {
      final Script scriptCommand=new Script(manageSnapshotPath,cmdsTimeout,s_logger);
      scriptCommand.add(""String_Node_Str"",snapshotDisk.getPath());
      scriptCommand.add(""String_Node_Str"",snapshotName);
      final String result=scriptCommand.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new BackupSnapshotAnswer(command,false,""String_Node_Str"" + result,null,true);
      }
    }
  }
 catch (  final LibvirtException e) {
    return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
  }
catch (  final CloudRuntimeException e) {
    return new BackupSnapshotAnswer(command,false,e.toString(),null,true);
  }
 finally {
    if (secondaryStoragePool != null) {
      storagePoolMgr.deleteStoragePool(secondaryStoragePool.getType(),secondaryStoragePool.getUuid());
    }
  }
  return new BackupSnapshotAnswer(command,true,null,snapshotRelPath + File.separator + snapshotName,true);
}",0.9899628546589742
105224,"public Map<String,List<String>> getServiceProviders(){
  Map<String,List<String>> serviceProviderMap=null;
  if (serviceProviderList != null && !serviceProviderList.isEmpty()) {
    serviceProviderMap=new HashMap<String,List<String>>();
    Collection servicesCollection=serviceProviderList.values();
    Iterator iter=servicesCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> services=(HashMap<String,String>)iter.next();
      String service=services.get(""String_Node_Str"");
      String provider=services.get(""String_Node_Str"");
      List<String> providerList=null;
      if (serviceProviderMap.containsKey(service)) {
        providerList=serviceProviderMap.get(service);
      }
 else {
        providerList=new ArrayList<String>();
      }
      providerList.add(provider);
      serviceProviderMap.put(service,providerList);
    }
  }
  return serviceProviderMap;
}","public Map<String,List<String>> getServiceProviders(){
  Map<String,List<String>> serviceProviderMap=null;
  if (serviceProviderList != null && !serviceProviderList.isEmpty()) {
    serviceProviderMap=new HashMap<String,List<String>>();
    Collection<? extends Map<String,String>> servicesCollection=serviceProviderList.values();
    Iterator<? extends Map<String,String>> iter=servicesCollection.iterator();
    while (iter.hasNext()) {
      Map<String,String> obj=iter.next();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + obj);
      }
      HashMap<String,String> services=(HashMap<String,String>)obj;
      String service=services.get(""String_Node_Str"");
      String provider=services.get(""String_Node_Str"");
      List<String> providerList=null;
      if (serviceProviderMap.containsKey(service)) {
        providerList=serviceProviderMap.get(service);
      }
 else {
        providerList=new ArrayList<String>();
      }
      providerList.add(provider);
      serviceProviderMap.put(service,providerList);
    }
  }
  return serviceProviderMap;
}",0.8168168168168168
105225,"private boolean doUpdateHostPassword(final long hostId){
  if (_agentMgr.isAgentAttached(hostId)) {
    return false;
  }
  DetailVO nv=_hostDetailsDao.findDetail(hostId,ApiConstants.USERNAME);
  final String username=nv.getValue();
  nv=_hostDetailsDao.findDetail(hostId,ApiConstants.PASSWORD);
  final String password=nv.getValue();
  final UpdateHostPasswordCommand cmd=new UpdateHostPasswordCommand(username,password);
  final Answer answer=_agentMgr.easySend(hostId,cmd);
  return answer != null;
}","private boolean doUpdateHostPassword(final long hostId){
  if (!_agentMgr.isAgentAttached(hostId)) {
    return false;
  }
  DetailVO nv=_hostDetailsDao.findDetail(hostId,ApiConstants.USERNAME);
  final String username=nv.getValue();
  nv=_hostDetailsDao.findDetail(hostId,ApiConstants.PASSWORD);
  final String password=nv.getValue();
  final UpdateHostPasswordCommand cmd=new UpdateHostPasswordCommand(username,password);
  final Answer answer=_agentMgr.easySend(hostId,cmd);
  return answer != null;
}",0.9990069513406156
105226,"public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.error(""String_Node_Str"" + publicIp);
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        String privateIp=(String)rule[3];
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
 else {
          long instanceId=rs.getLong(1);
          s_logger.debug(""String_Node_Str"" + instanceId);
          s_logger.trace(""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setInt(2,ipAddressId);
          pstmt.setInt(3,Integer.parseInt(sourcePort.trim()));
          pstmt.setInt(4,Integer.parseInt(sourcePort.trim()));
          pstmt.setString(5,protocol);
          pstmt.setLong(6,accountId);
          pstmt.setLong(7,domainId);
          pstmt.setLong(8,networkId);
          pstmt.setString(9,UUID.randomUUID().toString());
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
          rs.close();
          pstmt.close();
          String privatePort=(String)rule[4];
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setLong(2,instanceId);
          pstmt.setString(3,privateIp);
          pstmt.setInt(4,Integer.valueOf(privatePort.trim()));
          pstmt.setInt(5,Integer.valueOf(privatePort.trim()));
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.error(""String_Node_Str"" + publicIp);
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        String privateIp=(String)rule[3];
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
 else {
          long instanceId=rs.getLong(1);
          s_logger.debug(""String_Node_Str"" + instanceId);
          s_logger.trace(""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setInt(2,ipAddressId);
          pstmt.setInt(3,Integer.parseInt(sourcePort.trim()));
          pstmt.setInt(4,Integer.parseInt(sourcePort.trim()));
          pstmt.setString(5,protocol);
          pstmt.setLong(6,accountId);
          pstmt.setLong(7,domainId);
          pstmt.setLong(8,networkId);
          pstmt.setString(9,UUID.randomUUID().toString());
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
          rs.close();
          pstmt.close();
          String privatePort=(String)rule[4];
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setLong(2,instanceId);
          pstmt.setString(3,privateIp);
          pstmt.setInt(4,Integer.parseInt(privatePort.trim()));
          pstmt.setInt(5,Integer.parseInt(privatePort.trim()));
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9951377633711508
105227,"public static UpdateTsmStorageCmdResponse updateElastistorTsmStorage(String capacityBytes,String uuid) throws Throwable {
  Long size=(Long.parseLong(capacityBytes) / (1024 * 1024 * 1024));
  String quotasize=null;
  if (size > 1024) {
    quotasize=(String.valueOf(Long.valueOf(capacityBytes) / (1024)) + ""String_Node_Str"");
  }
 else {
    quotasize=String.valueOf(quotasize) + ""String_Node_Str"";
  }
  s_logger.info(""String_Node_Str"" + quotasize);
  UpdateTsmStorageCmd updateTsmStorageCmd=new UpdateTsmStorageCmd();
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",uuid);
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",quotasize);
  UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=(UpdateTsmStorageCmdResponse)getElastistorRestClient().executeCommand(updateTsmStorageCmd);
  return updateTsmStorageCmdResponse;
}","public static UpdateTsmStorageCmdResponse updateElastistorTsmStorage(String capacityBytes,String uuid) throws Throwable {
  Long size=(Long.parseLong(capacityBytes) / (1024 * 1024 * 1024));
  String quotasize=null;
  if (size > 1024) {
    quotasize=(String.valueOf(Long.parseLong(capacityBytes) / (1024)) + ""String_Node_Str"");
  }
 else {
    quotasize=String.valueOf(quotasize) + ""String_Node_Str"";
  }
  s_logger.info(""String_Node_Str"" + quotasize);
  UpdateTsmStorageCmd updateTsmStorageCmd=new UpdateTsmStorageCmd();
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",uuid);
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",quotasize);
  UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=(UpdateTsmStorageCmdResponse)getElastistorRestClient().executeCommand(updateTsmStorageCmd);
  return updateTsmStorageCmdResponse;
}",0.9905771495877504
105228,"public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.parseInt(sourcePort));
        pstmt.setInt(4,Integer.parseInt(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.parseInt(sourcePort));
        pstmt.setInt(4,Integer.parseInt(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.parseInt(destPort));
        pstmt.setInt(4,Integer.parseInt(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9958993985784582
105229,"private void upgradeVmwareLabels(Connection conn){
  String newLabel;
  String trafficType=null;
  String trafficTypeVswitchParam;
  String trafficTypeVswitchParamValue;
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    try (ResultSet rsParams=pstmt.executeQuery()){
      while (rsParams.next()) {
        trafficTypeVswitchParam=rsParams.getString(""String_Node_Str"");
        trafficTypeVswitchParamValue=rsParams.getString(""String_Node_Str"");
        if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
        try (PreparedStatement sel_pstmt=conn.prepareStatement(""String_Node_Str"")){
          pstmt.setString(1,trafficType);
          try (ResultSet rsLabel=sel_pstmt.executeQuery()){
            newLabel=getNewLabel(rsLabel,trafficTypeVswitchParamValue);
            try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"" + newLabel + ""String_Node_Str""+ trafficType+ ""String_Node_Str"")){
              s_logger.debug(""String_Node_Str"" + trafficType + ""String_Node_Str""+ pstmt);
              update_pstmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
          }
 catch (          SQLException e) {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void upgradeVmwareLabels(Connection conn){
  String newLabel;
  String trafficType=null;
  String trafficTypeVswitchParam;
  String trafficTypeVswitchParamValue;
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    try (ResultSet rsParams=pstmt.executeQuery()){
      while (rsParams.next()) {
        trafficTypeVswitchParam=rsParams.getString(""String_Node_Str"");
        trafficTypeVswitchParamValue=rsParams.getString(""String_Node_Str"");
        if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
        try (PreparedStatement sel_pstmt=conn.prepareStatement(""String_Node_Str"")){
          pstmt.setString(1,trafficType);
          try (ResultSet rsLabel=sel_pstmt.executeQuery()){
            newLabel=getNewLabel(rsLabel,trafficTypeVswitchParamValue);
            try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"")){
              s_logger.debug(""String_Node_Str"" + trafficType + ""String_Node_Str""+ pstmt);
              pstmt.setString(1,newLabel);
              pstmt.setString(2,trafficType);
              update_pstmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
          }
 catch (          SQLException e) {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9266194331983806
105230,"private void verifyMinAndMaxIops(String minIops,String maxIops){
  if ((minIops != null && maxIops == null) || (minIops == null && maxIops != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMinIops;
  try {
    if (minIops != null) {
      lMinIops=Long.parseLong(minIops);
    }
 else {
      lMinIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMaxIops;
  try {
    if (maxIops != null) {
      lMaxIops=Long.valueOf(maxIops);
    }
 else {
      lMaxIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (lMinIops > lMaxIops) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
}","private void verifyMinAndMaxIops(String minIops,String maxIops){
  if ((minIops != null && maxIops == null) || (minIops == null && maxIops != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMinIops;
  try {
    if (minIops != null) {
      lMinIops=Long.parseLong(minIops);
    }
 else {
      lMinIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMaxIops;
  try {
    if (maxIops != null) {
      lMaxIops=Long.parseLong(maxIops);
    }
 else {
      lMaxIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (lMinIops > lMaxIops) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
}",0.99
105231,"@Override public void updateStoragePool(StoragePool storagePool,Map<String,String> details){
  String capacityBytes=details.get(PrimaryDataStoreLifeCycle.CAPACITY_BYTES);
  String capacityIops=details.get(PrimaryDataStoreLifeCycle.CAPACITY_IOPS);
  StoragePoolVO storagePoolVO=_storagePoolDao.findById(storagePool.getId());
  try {
    if (capacityBytes != null) {
      long usedBytes=_capacityMgr.getUsedBytes(storagePoolVO);
      if (Long.parseLong(capacityBytes) < usedBytes) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=ElastistorUtil.updateElastistorTsmStorage(capacityBytes,storagePool.getUuid());
      if (updateTsmStorageCmdResponse.getStorage().getId() != null) {
        _storagePoolDao.updateCapacityBytes(storagePool.getId(),Long.valueOf(capacityBytes));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmStorageCmdResponse.toString());
      }
    }
    if (capacityIops != null) {
      long usedIops=_capacityMgr.getUsedIops(storagePoolVO);
      if (Long.valueOf(capacityIops) < usedIops) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmCmdResponse updateTsmCmdResponse=ElastistorUtil.updateElastistorTsmIOPS(capacityIops,storagePool.getUuid());
      if (updateTsmCmdResponse.getTsm(0).getUuid() != null) {
        _storagePoolDao.updateCapacityIops(storagePool.getId(),Long.valueOf(capacityIops));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmCmdResponse.toString());
      }
    }
  }
 catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e);
  }
}","@Override public void updateStoragePool(StoragePool storagePool,Map<String,String> details){
  String capacityBytes=details.get(PrimaryDataStoreLifeCycle.CAPACITY_BYTES);
  String capacityIops=details.get(PrimaryDataStoreLifeCycle.CAPACITY_IOPS);
  StoragePoolVO storagePoolVO=_storagePoolDao.findById(storagePool.getId());
  try {
    if (capacityBytes != null) {
      long usedBytes=_capacityMgr.getUsedBytes(storagePoolVO);
      if (Long.parseLong(capacityBytes) < usedBytes) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=ElastistorUtil.updateElastistorTsmStorage(capacityBytes,storagePool.getUuid());
      if (updateTsmStorageCmdResponse.getStorage().getId() != null) {
        _storagePoolDao.updateCapacityBytes(storagePool.getId(),Long.parseLong(capacityBytes));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmStorageCmdResponse.toString());
      }
    }
    if (capacityIops != null) {
      long usedIops=_capacityMgr.getUsedIops(storagePoolVO);
      if (Long.valueOf(capacityIops) < usedIops) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmCmdResponse updateTsmCmdResponse=ElastistorUtil.updateElastistorTsmIOPS(capacityIops,storagePool.getUuid());
      if (updateTsmCmdResponse.getTsm(0).getUuid() != null) {
        _storagePoolDao.updateCapacityIops(storagePool.getId(),Long.valueOf(capacityIops));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmCmdResponse.toString());
      }
    }
  }
 catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e);
  }
}",0.6372824256035935
105232,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _uuid=(String)params.get(""String_Node_Str"");
  try {
    _memCapacity=Long.parseLong((String)params.get(ApiConstants.MEMORY)) * 1024L * 1024L;
    _cpuCapacity=Long.parseLong((String)params.get(ApiConstants.CPU_SPEED));
    _cpuNum=Long.parseLong((String)params.get(ApiConstants.CPU_NUMBER));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format(""String_Node_Str"" + ""String_Node_Str"",params.get(ApiConstants.CPU_NUMBER),params.get(ApiConstants.MEMORY),params.get(ApiConstants.CPU_SPEED)));
  }
  _zone=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  hostId=(Long)params.get(""String_Node_Str"");
  _ip=(String)params.get(ApiConstants.PRIVATE_IP);
  _mac=(String)params.get(ApiConstants.HOST_MAC);
  _username=(String)params.get(ApiConstants.USERNAME);
  _password=(String)params.get(ApiConstants.PASSWORD);
  _vmName=(String)params.get(""String_Node_Str"");
  String echoScAgent=(String)params.get(BaremetalManager.EchoSecurityGroupAgent);
  vmDao=(VMInstanceDao)params.get(""String_Node_Str"");
  configDao=(ConfigurationDao)params.get(""String_Node_Str"");
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_cluster == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.equalsIgnoreCase(""String_Node_Str"")) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.split(""String_Node_Str"").length != 6) {
    throw new ConfigurationException(""String_Node_Str"" + _mac + ""String_Node_Str"");
  }
  if (_uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (echoScAgent != null) {
    _isEchoScAgent=Boolean.valueOf(echoScAgent);
  }
  String ipmiIface=""String_Node_Str"";
  try {
    ipmiIface=configDao.getValue(Config.BaremetalIpmiLanInterface.key());
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    ipmiRetryTimes=Integer.parseInt(configDao.getValue(Config.BaremetalIpmiRetryTimes.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    provisionDoneNotificationOn=Boolean.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()));
    isProvisionDoneNotificationTimeout=Integer.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationTimeout.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  String injectScript=""String_Node_Str"";
  String scriptPath=Script.findScript(""String_Node_Str"",injectScript);
  if (scriptPath == null) {
    throw new ConfigurationException(""String_Node_Str"" + scriptPath);
  }
  String pythonPath=""String_Node_Str"";
  _pingCommand=new Script2(pythonPath,s_logger);
  _pingCommand.add(scriptPath);
  _pingCommand.add(""String_Node_Str"");
  _pingCommand.add(""String_Node_Str"" + ipmiIface);
  _pingCommand.add(""String_Node_Str"" + _ip);
  _pingCommand.add(""String_Node_Str"" + _username);
  _pingCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand=new Script2(pythonPath,s_logger);
  _setPxeBootCommand.add(scriptPath);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setPxeBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setPxeBootCommand.add(""String_Node_Str"" + _ip);
  _setPxeBootCommand.add(""String_Node_Str"" + _username);
  _setPxeBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand=new Script2(pythonPath,s_logger);
  _setDiskBootCommand.add(scriptPath);
  _setDiskBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setDiskBootCommand.add(""String_Node_Str"" + _ip);
  _setDiskBootCommand.add(""String_Node_Str"" + _username);
  _setDiskBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setDiskBootCommand.add(""String_Node_Str"");
  _rebootCommand=new Script2(pythonPath,s_logger);
  _rebootCommand.add(scriptPath);
  _rebootCommand.add(""String_Node_Str"");
  _rebootCommand.add(""String_Node_Str"" + ipmiIface);
  _rebootCommand.add(""String_Node_Str"" + _ip);
  _rebootCommand.add(""String_Node_Str"" + _username);
  _rebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _getStatusCommand=new Script2(pythonPath,s_logger);
  _getStatusCommand.add(scriptPath);
  _getStatusCommand.add(""String_Node_Str"");
  _getStatusCommand.add(""String_Node_Str"" + ipmiIface);
  _getStatusCommand.add(""String_Node_Str"" + _ip);
  _getStatusCommand.add(""String_Node_Str"" + _username);
  _getStatusCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand=new Script2(pythonPath,s_logger);
  _powerOnCommand.add(scriptPath);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOnCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOnCommand.add(""String_Node_Str"" + _ip);
  _powerOnCommand.add(""String_Node_Str"" + _username);
  _powerOnCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOffCommand=new Script2(pythonPath,s_logger);
  _powerOffCommand.add(scriptPath);
  _powerOffCommand.add(""String_Node_Str"");
  _powerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOffCommand.add(""String_Node_Str"" + _ip);
  _powerOffCommand.add(""String_Node_Str"" + _username);
  _powerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand=new Script2(pythonPath,s_logger);
  _forcePowerOffCommand.add(scriptPath);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _forcePowerOffCommand.add(""String_Node_Str"" + _ip);
  _forcePowerOffCommand.add(""String_Node_Str"" + _username);
  _forcePowerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _bootOrRebootCommand=new Script2(pythonPath,s_logger);
  _bootOrRebootCommand.add(scriptPath);
  _bootOrRebootCommand.add(""String_Node_Str"");
  _bootOrRebootCommand.add(""String_Node_Str"" + ipmiIface);
  _bootOrRebootCommand.add(""String_Node_Str"" + _ip);
  _bootOrRebootCommand.add(""String_Node_Str"" + _username);
  _bootOrRebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _uuid=(String)params.get(""String_Node_Str"");
  try {
    _memCapacity=Long.parseLong((String)params.get(ApiConstants.MEMORY)) * 1024L * 1024L;
    _cpuCapacity=Long.parseLong((String)params.get(ApiConstants.CPU_SPEED));
    _cpuNum=Long.parseLong((String)params.get(ApiConstants.CPU_NUMBER));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format(""String_Node_Str"" + ""String_Node_Str"",params.get(ApiConstants.CPU_NUMBER),params.get(ApiConstants.MEMORY),params.get(ApiConstants.CPU_SPEED)));
  }
  _zone=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  hostId=(Long)params.get(""String_Node_Str"");
  _ip=(String)params.get(ApiConstants.PRIVATE_IP);
  _mac=(String)params.get(ApiConstants.HOST_MAC);
  _username=(String)params.get(ApiConstants.USERNAME);
  _password=(String)params.get(ApiConstants.PASSWORD);
  _vmName=(String)params.get(""String_Node_Str"");
  String echoScAgent=(String)params.get(BaremetalManager.EchoSecurityGroupAgent);
  vmDao=(VMInstanceDao)params.get(""String_Node_Str"");
  configDao=(ConfigurationDao)params.get(""String_Node_Str"");
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_cluster == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.equalsIgnoreCase(""String_Node_Str"")) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.split(""String_Node_Str"").length != 6) {
    throw new ConfigurationException(""String_Node_Str"" + _mac + ""String_Node_Str"");
  }
  if (_uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (echoScAgent != null) {
    _isEchoScAgent=Boolean.valueOf(echoScAgent);
  }
  String ipmiIface=""String_Node_Str"";
  try {
    ipmiIface=configDao.getValue(Config.BaremetalIpmiLanInterface.key());
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    ipmiRetryTimes=Integer.parseInt(configDao.getValue(Config.BaremetalIpmiRetryTimes.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    provisionDoneNotificationOn=Boolean.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()));
    isProvisionDoneNotificationTimeout=Integer.parseInt(configDao.getValue(Config.BaremetalProvisionDoneNotificationTimeout.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  String injectScript=""String_Node_Str"";
  String scriptPath=Script.findScript(""String_Node_Str"",injectScript);
  if (scriptPath == null) {
    throw new ConfigurationException(""String_Node_Str"" + scriptPath);
  }
  String pythonPath=""String_Node_Str"";
  _pingCommand=new Script2(pythonPath,s_logger);
  _pingCommand.add(scriptPath);
  _pingCommand.add(""String_Node_Str"");
  _pingCommand.add(""String_Node_Str"" + ipmiIface);
  _pingCommand.add(""String_Node_Str"" + _ip);
  _pingCommand.add(""String_Node_Str"" + _username);
  _pingCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand=new Script2(pythonPath,s_logger);
  _setPxeBootCommand.add(scriptPath);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setPxeBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setPxeBootCommand.add(""String_Node_Str"" + _ip);
  _setPxeBootCommand.add(""String_Node_Str"" + _username);
  _setPxeBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand=new Script2(pythonPath,s_logger);
  _setDiskBootCommand.add(scriptPath);
  _setDiskBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setDiskBootCommand.add(""String_Node_Str"" + _ip);
  _setDiskBootCommand.add(""String_Node_Str"" + _username);
  _setDiskBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setDiskBootCommand.add(""String_Node_Str"");
  _rebootCommand=new Script2(pythonPath,s_logger);
  _rebootCommand.add(scriptPath);
  _rebootCommand.add(""String_Node_Str"");
  _rebootCommand.add(""String_Node_Str"" + ipmiIface);
  _rebootCommand.add(""String_Node_Str"" + _ip);
  _rebootCommand.add(""String_Node_Str"" + _username);
  _rebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _getStatusCommand=new Script2(pythonPath,s_logger);
  _getStatusCommand.add(scriptPath);
  _getStatusCommand.add(""String_Node_Str"");
  _getStatusCommand.add(""String_Node_Str"" + ipmiIface);
  _getStatusCommand.add(""String_Node_Str"" + _ip);
  _getStatusCommand.add(""String_Node_Str"" + _username);
  _getStatusCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand=new Script2(pythonPath,s_logger);
  _powerOnCommand.add(scriptPath);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOnCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOnCommand.add(""String_Node_Str"" + _ip);
  _powerOnCommand.add(""String_Node_Str"" + _username);
  _powerOnCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOffCommand=new Script2(pythonPath,s_logger);
  _powerOffCommand.add(scriptPath);
  _powerOffCommand.add(""String_Node_Str"");
  _powerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOffCommand.add(""String_Node_Str"" + _ip);
  _powerOffCommand.add(""String_Node_Str"" + _username);
  _powerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand=new Script2(pythonPath,s_logger);
  _forcePowerOffCommand.add(scriptPath);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _forcePowerOffCommand.add(""String_Node_Str"" + _ip);
  _forcePowerOffCommand.add(""String_Node_Str"" + _username);
  _forcePowerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _bootOrRebootCommand=new Script2(pythonPath,s_logger);
  _bootOrRebootCommand.add(scriptPath);
  _bootOrRebootCommand.add(""String_Node_Str"");
  _bootOrRebootCommand.add(""String_Node_Str"" + ipmiIface);
  _bootOrRebootCommand.add(""String_Node_Str"" + _ip);
  _bootOrRebootCommand.add(""String_Node_Str"" + _username);
  _bootOrRebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  return true;
}",0.9988469521100776
105233,"@DB protected void saveUser(){
  String insertSql=""String_Node_Str"";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
  insertSql=""String_Node_Str"" + ""String_Node_Str"";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
  long id=Long.parseLong(_currentObjectParams.get(""String_Node_Str""));
  String username=_currentObjectParams.get(""String_Node_Str"");
  String firstname=_currentObjectParams.get(""String_Node_Str"");
  String lastname=_currentObjectParams.get(""String_Node_Str"");
  String password=_currentObjectParams.get(""String_Node_Str"");
  String email=_currentObjectParams.get(""String_Node_Str"");
  if (email == null || email.equals(""String_Node_Str"")) {
    printError(""String_Node_Str"");
  }
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error(""String_Node_Str"",e);
    return;
  }
  md5.reset();
  BigInteger pwInt=new BigInteger(1,md5.digest(password.getBytes()));
  String pwStr=pwInt.toString(16);
  int padding=32 - pwStr.length();
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < padding; i++) {
    sb.append('0');
  }
  sb.append(pwStr);
  insertSql=""String_Node_Str"" + id + ""String_Node_Str""+ username+ ""String_Node_Str"";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
  insertSql=""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str""+ username+ ""String_Node_Str""+ sb.toString()+ ""String_Node_Str""+ firstname+ ""String_Node_Str""+ lastname+ ""String_Node_Str""+ email+ ""String_Node_Str"";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}","@DB protected void saveUser(){
  String insertSql=""String_Node_Str"";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
  insertSql=""String_Node_Str"" + ""String_Node_Str"";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
  long id=Long.parseLong(_currentObjectParams.get(""String_Node_Str""));
  String username=_currentObjectParams.get(""String_Node_Str"");
  String firstname=_currentObjectParams.get(""String_Node_Str"");
  String lastname=_currentObjectParams.get(""String_Node_Str"");
  String password=_currentObjectParams.get(""String_Node_Str"");
  String email=_currentObjectParams.get(""String_Node_Str"");
  if (email == null || email.equals(""String_Node_Str"")) {
    printError(""String_Node_Str"");
  }
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    s_logger.error(""String_Node_Str"",e);
    return;
  }
  md5.reset();
  BigInteger pwInt=new BigInteger(1,md5.digest(password.getBytes()));
  String pwStr=pwInt.toString(16);
  int padding=32 - pwStr.length();
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < padding; i++) {
    sb.append('0');
  }
  sb.append(pwStr);
  insertSql=""String_Node_Str"";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.setLong(1,id);
    stmt.setString(2,username);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
  insertSql=""String_Node_Str"" + ""String_Node_Str"" + id + ""String_Node_Str""+ username+ ""String_Node_Str""+ sb.toString()+ ""String_Node_Str""+ firstname+ ""String_Node_Str""+ lastname+ ""String_Node_Str""+ email+ ""String_Node_Str"";
  txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(insertSql);
    stmt.executeUpdate();
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}",0.9757922535211268
105234,"@DB protected void saveConfiguration(String name,String value,String category){
  String instance=""String_Node_Str"";
  String description=s_configurationDescriptions.get(name);
  String component=s_configurationComponents.get(name);
  if (category == null) {
    category=""String_Node_Str"";
  }
  String instanceNameError=""String_Node_Str"";
  if (name.equals(""String_Node_Str"")) {
    if (value == null || value.isEmpty() || !value.matches(""String_Node_Str"")) {
      printError(instanceNameError + ""String_Node_Str"");
    }
  }
  if (name.equals(""String_Node_Str"")) {
    if (value != null && !value.isEmpty()) {
      _networkThrottlingRate=value;
    }
  }
  if (name.equals(""String_Node_Str"")) {
    if (value != null && !value.isEmpty()) {
      _multicastThrottlingRate=value;
    }
  }
  String insertSql=""String_Node_Str"" + ""String_Node_Str"" + instance + ""String_Node_Str""+ component+ ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str""+ description+ ""String_Node_Str""+ category+ ""String_Node_Str"";
  String selectSql=""String_Node_Str"" + name + ""String_Node_Str"";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
    ResultSet result=stmt.executeQuery();
    Boolean hasRow=result.next();
    if (!hasRow) {
      stmt=txn.prepareAutoCloseStatement(insertSql);
      stmt.executeUpdate();
    }
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}","@DB protected void saveConfiguration(String name,String value,String category){
  String instance=""String_Node_Str"";
  String description=s_configurationDescriptions.get(name);
  String component=s_configurationComponents.get(name);
  if (category == null) {
    category=""String_Node_Str"";
  }
  String instanceNameError=""String_Node_Str"";
  if (name.equals(""String_Node_Str"")) {
    if (value == null || value.isEmpty() || !value.matches(""String_Node_Str"")) {
      printError(instanceNameError + ""String_Node_Str"");
    }
  }
  if (name.equals(""String_Node_Str"")) {
    if (value != null && !value.isEmpty()) {
      _networkThrottlingRate=value;
    }
  }
  if (name.equals(""String_Node_Str"")) {
    if (value != null && !value.isEmpty()) {
      _multicastThrottlingRate=value;
    }
  }
  String insertSql=""String_Node_Str"" + ""String_Node_Str"" + instance + ""String_Node_Str""+ component+ ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str""+ description+ ""String_Node_Str""+ category+ ""String_Node_Str"";
  String selectSql=""String_Node_Str"";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
    stmt.setString(1,name);
    ResultSet result=stmt.executeQuery();
    Boolean hasRow=result.next();
    if (!hasRow) {
      stmt=txn.prepareAutoCloseStatement(insertSql);
      stmt.executeUpdate();
    }
  }
 catch (  SQLException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}",0.9814752441899628
105235,"@DB protected void checkIfPodIsDeletable(final long podId){
  final List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  final HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  final List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  final List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  final List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  final List<String> cluster=new ArrayList<String>();
  cluster.add(0,""String_Node_Str"");
  cluster.add(1,""String_Node_Str"");
  cluster.add(2,""String_Node_Str"");
  tablesToCheck.add(cluster);
  for (  final List<String> table : tablesToCheck) {
    final String tableName=table.get(0);
    final String column=table.get(1);
    final String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      dbName=""String_Node_Str"";
    }
 else {
      dbName=""String_Node_Str"";
    }
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"" + VirtualMachine.State.Expunging.toString() + ""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    final TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      final PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,podId);
      final ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    final SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}","@DB protected void checkIfPodIsDeletable(final long podId){
  final List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  final HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  final List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  final List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  final List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  final List<String> cluster=new ArrayList<String>();
  cluster.add(0,""String_Node_Str"");
  cluster.add(1,""String_Node_Str"");
  cluster.add(2,""String_Node_Str"");
  tablesToCheck.add(cluster);
  for (  final List<String> table : tablesToCheck) {
    final String tableName=table.get(0);
    final String column=table.get(1);
    final String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      dbName=""String_Node_Str"";
    }
 else {
      dbName=""String_Node_Str"";
    }
    String selectSql=""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"" + VirtualMachine.State.Expunging.toString() + ""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    final TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      final PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setString(1,dbName);
      stmt.setString(2,tableName);
      stmt.setString(3,column);
      stmt.setLong(4,podId);
      final ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    final SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}",0.9637807476273484
105236,"@DB protected void checkIfZoneIsDeletable(final long zoneId){
  final List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  final List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  final List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,""String_Node_Str"");
  hostPodRef.add(1,""String_Node_Str"");
  hostPodRef.add(2,""String_Node_Str"");
  tablesToCheck.add(hostPodRef);
  final List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,""String_Node_Str"");
  privateIP.add(1,""String_Node_Str"");
  privateIP.add(2,""String_Node_Str"");
  tablesToCheck.add(privateIP);
  final List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,""String_Node_Str"");
  publicIP.add(1,""String_Node_Str"");
  publicIP.add(2,""String_Node_Str"");
  tablesToCheck.add(publicIP);
  final List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  final List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  final List<String> physicalNetworks=new ArrayList<String>();
  physicalNetworks.add(0,""String_Node_Str"");
  physicalNetworks.add(1,""String_Node_Str"");
  physicalNetworks.add(2,""String_Node_Str"");
  tablesToCheck.add(physicalNetworks);
  final List<String> vmwareDcs=new ArrayList<String>();
  vmwareDcs.add(0,""String_Node_Str"");
  vmwareDcs.add(1,""String_Node_Str"");
  vmwareDcs.add(2,""String_Node_Str"");
  tablesToCheck.add(vmwareDcs);
  for (  final List<String> table : tablesToCheck) {
    final String tableName=table.get(0);
    final String column=table.get(1);
    final String errorMsg=table.get(2);
    final String dbName=""String_Node_Str"";
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"" + VirtualMachine.State.Expunging.toString() + ""String_Node_Str"";
    }
    final TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      final PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,zoneId);
      final ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    final SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}","@DB protected void checkIfZoneIsDeletable(final long zoneId){
  final List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  final List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  final List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,""String_Node_Str"");
  hostPodRef.add(1,""String_Node_Str"");
  hostPodRef.add(2,""String_Node_Str"");
  tablesToCheck.add(hostPodRef);
  final List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,""String_Node_Str"");
  privateIP.add(1,""String_Node_Str"");
  privateIP.add(2,""String_Node_Str"");
  tablesToCheck.add(privateIP);
  final List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,""String_Node_Str"");
  publicIP.add(1,""String_Node_Str"");
  publicIP.add(2,""String_Node_Str"");
  tablesToCheck.add(publicIP);
  final List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  final List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  final List<String> physicalNetworks=new ArrayList<String>();
  physicalNetworks.add(0,""String_Node_Str"");
  physicalNetworks.add(1,""String_Node_Str"");
  physicalNetworks.add(2,""String_Node_Str"");
  tablesToCheck.add(physicalNetworks);
  final List<String> vmwareDcs=new ArrayList<String>();
  vmwareDcs.add(0,""String_Node_Str"");
  vmwareDcs.add(1,""String_Node_Str"");
  vmwareDcs.add(2,""String_Node_Str"");
  tablesToCheck.add(vmwareDcs);
  for (  final List<String> table : tablesToCheck) {
    final String tableName=table.get(0);
    final String column=table.get(1);
    final String errorMsg=table.get(2);
    final String dbName=""String_Node_Str"";
    String selectSql=""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"" + VirtualMachine.State.Expunging.toString() + ""String_Node_Str"";
    }
    final TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      final PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setString(1,dbName);
      stmt.setString(2,tableName);
      stmt.setString(3,column);
      stmt.setLong(4,zoneId);
      final ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    final SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}",0.9706205813040064
105237,"@DB protected void updateSystemvmPassword(){
  String userid=System.getProperty(""String_Node_Str"");
  if (!userid.startsWith(""String_Node_Str"")) {
    return;
  }
  if (!Boolean.valueOf(_configDao.getValue(""String_Node_Str""))) {
    return;
  }
  String already=_configDao.getValue(""String_Node_Str"");
  if (already == null) {
    TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      String rpassword=PasswordGenerator.generatePresharedKey(8);
      String wSql=""String_Node_Str"" + ""String_Node_Str"" + DBEncryptionUtil.encrypt(rpassword) + ""String_Node_Str"";
      PreparedStatement stmt=txn.prepareAutoCloseStatement(wSql);
      stmt.executeUpdate(wSql);
      s_logger.info(""String_Node_Str"");
    }
 catch (    SQLException e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}","@DB protected void updateSystemvmPassword(){
  String userid=System.getProperty(""String_Node_Str"");
  if (!userid.startsWith(""String_Node_Str"")) {
    return;
  }
  if (!Boolean.valueOf(_configDao.getValue(""String_Node_Str""))) {
    return;
  }
  String already=_configDao.getValue(""String_Node_Str"");
  if (already == null) {
    TransactionLegacy txn=TransactionLegacy.currentTxn();
    try {
      String rpassword=PasswordGenerator.generatePresharedKey(8);
      String wSql=""String_Node_Str"" + ""String_Node_Str"";
      PreparedStatement stmt=txn.prepareAutoCloseStatement(wSql);
      stmt.setString(1,DBEncryptionUtil.encrypt(rpassword));
      stmt.executeUpdate();
      s_logger.info(""String_Node_Str"");
    }
 catch (    SQLException e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}",0.8686994399502178
105238,"@Override public ExecutionResult createFileInVR(String routerIp,String filePath,String fileName,String content){
  VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  File keyFile=mgr.getSystemVMKeyFile();
  try {
    SshHelper.scpTo(routerIp,3922,""String_Node_Str"",keyFile,null,filePath,content.getBytes(),fileName,null);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + filePath + fileName+ ""String_Node_Str""+ routerIp,e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult createFileInVR(String routerIp,String filePath,String fileName,String content){
  VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  File keyFile=mgr.getSystemVMKeyFile();
  try {
    SshHelper.scpTo(routerIp,3922,""String_Node_Str"",keyFile,null,filePath,content.getBytes(""String_Node_Str""),fileName,null);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + filePath + fileName+ ""String_Node_Str""+ routerIp,e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}",0.9855810008481763
105239,"@Override @DB public void resetJobProcess(long msid,int jobResultCode,String jobResultMessage){
  String sql=""String_Node_Str"" + JobInfo.Status.FAILED.ordinal() + ""String_Node_Str""+ jobResultCode+ ""String_Node_Str""+ jobResultMessage+ ""String_Node_Str""+ JobInfo.Status.IN_PROGRESS.ordinal()+ ""String_Node_Str"";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,msid);
    pstmt.setLong(2,msid);
    pstmt.execute();
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"" + msid,e);
  }
catch (  Throwable e) {
    s_logger.warn(""String_Node_Str"" + msid,e);
  }
}","@Override @DB public void resetJobProcess(long msid,int jobResultCode,String jobResultMessage){
  String sql=""String_Node_Str"";
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setInt(1,JobInfo.Status.FAILED.ordinal());
    pstmt.setInt(2,jobResultCode);
    pstmt.setString(3,jobResultMessage);
    pstmt.setInt(4,JobInfo.Status.IN_PROGRESS.ordinal());
    pstmt.setLong(5,msid);
    pstmt.setLong(6,msid);
    pstmt.execute();
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"" + msid,e);
  }
catch (  Throwable e) {
    s_logger.warn(""String_Node_Str"" + msid,e);
  }
}",0.59840232389252
105240,"public String getDetail(String name){
}","public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.5954198473282443
105241,"@Override public List<Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>> getVmsDetailByNames(Set<String> vmNames,String detail){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>> vmsDetailByNames=new ArrayList<Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>>();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareStatement(VMS_DETAIL_BY_NAME + detail + VMS_DETAIL_BY_NAME2+ getQueryBatchAppender(vmNames.size()));
    int i=1;
    for (    String name : vmNames) {
      pstmt.setString(i,name);
      i++;
    }
    try {
      ResultSet rs=pstmt.executeQuery();
      while (rs.next()) {
        vmsDetailByNames.add(new Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>(new Pair<String,VirtualMachine.Type>(rs.getString(""String_Node_Str""),VirtualMachine.Type.valueOf(rs.getString(""String_Node_Str""))),new Pair<Long,String>(rs.getLong(""String_Node_Str""),rs.getString(""String_Node_Str""))));
      }
      rs.close();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
    }
    if (pstmt != null) {
      pstmt.close();
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return vmsDetailByNames;
}","@Override public List<Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>> getVmsDetailByNames(Set<String> vmNames,String detail){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>> vmsDetailByNames=new ArrayList<Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>>();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareStatement(VMS_DETAIL_BY_NAME + getQueryBatchAppender(vmNames.size()));
    pstmt.setString(1,detail);
    int i=2;
    for (    String name : vmNames) {
      pstmt.setString(i,name);
      i++;
    }
    try {
      ResultSet rs=pstmt.executeQuery();
      while (rs.next()) {
        vmsDetailByNames.add(new Pair<Pair<String,VirtualMachine.Type>,Pair<Long,String>>(new Pair<String,VirtualMachine.Type>(rs.getString(""String_Node_Str""),VirtualMachine.Type.valueOf(rs.getString(""String_Node_Str""))),new Pair<Long,String>(rs.getLong(""String_Node_Str""),rs.getString(""String_Node_Str""))));
      }
      rs.close();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
    }
    if (pstmt != null) {
      pstmt.close();
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return vmsDetailByNames;
}",0.9780717020536024
105242,"protected boolean sendStop(final VirtualMachineGuru guru,final VirtualMachineProfile profile,final boolean force,final boolean checkBeforeCleanup){
  final VirtualMachine vm=profile.getVirtualMachine();
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),checkBeforeCleanup);
  try {
    final Answer answer=_agentMgr.send(vm.getHostId(),stop);
    if (answer != null && answer instanceof StopAnswer) {
      final StopAnswer stopAns=(StopAnswer)answer;
      if (vm.getType() == VirtualMachine.Type.User) {
        final String platform=stopAns.getPlatform();
        if (platform != null) {
          final UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
      if (answer == null || !answer.getResult()) {
        final String details=answer != null ? answer.getDetails() : ""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + details);
        return false;
      }
      guru.finalizeStop(profile,answer);
    }
 else {
      s_logger.error(""String_Node_Str"" + vm.getInstanceName());
      return false;
    }
  }
 catch (  final AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  final OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}","protected boolean sendStop(final VirtualMachineGuru guru,final VirtualMachineProfile profile,final boolean force,final boolean checkBeforeCleanup){
  final VirtualMachine vm=profile.getVirtualMachine();
  final StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),checkBeforeCleanup);
  try {
    final Answer answer=_agentMgr.send(vm.getHostId(),stop);
    if (answer != null && answer instanceof StopAnswer) {
      final StopAnswer stopAns=(StopAnswer)answer;
      if (vm.getType() == VirtualMachine.Type.User) {
        final String platform=stopAns.getPlatform();
        if (platform != null) {
          final UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      final GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
      if (!answer.getResult()) {
        final String details=answer.getDetails();
        s_logger.debug(""String_Node_Str"" + details);
        return false;
      }
      guru.finalizeStop(profile,answer);
    }
 else {
      s_logger.error(""String_Node_Str"" + vm.getInstanceName());
      return false;
    }
  }
 catch (  final AgentUnavailableException e) {
    if (!force) {
      return false;
    }
  }
catch (  final OperationTimedoutException e) {
    if (!force) {
      return false;
    }
  }
  return true;
}",0.8729806778587267
105243,"@Override @DB public boolean disassociatePublicIpAddress(long addrId,long userId,Account caller){
}","@Override @DB public boolean disassociatePublicIpAddress(long addrId,long userId,Account caller){
  boolean success=true;
  if (!cleanupIpResources(addrId,userId,caller)) {
    success=false;
    s_logger.warn(""String_Node_Str"" + addrId);
  }
  IPAddressVO ip=markIpAsUnavailable(addrId);
  if (ip == null) {
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + addrId + ""String_Node_Str""+ ip.isSourceNat());
  }
  if (ip.getAssociatedWithNetworkId() != null) {
    Network network=_networksDao.findById(ip.getAssociatedWithNetworkId());
    try {
      if (!applyIpAssociations(network,true)) {
        s_logger.warn(""String_Node_Str"" + network);
        success=false;
      }
    }
 catch (    ResourceUnavailableException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 else {
    if (ip.getState() == IpAddress.State.Releasing) {
      _ipAddressDao.unassignIpAddress(ip.getId());
    }
  }
  if (success) {
    if (ip.isPortable()) {
      releasePortableIpAddress(addrId);
    }
    s_logger.debug(""String_Node_Str"" + addrId);
  }
  return success;
}",0.1615008156606851
105244,"private static String deriveTemplateUuidOnHost(VmwareHypervisorHost hyperHost,String storeIdentifier,String templateName){
  String templateUuid=UUID.nameUUIDFromBytes((templateName + ""String_Node_Str"" + storeIdentifier+ ""String_Node_Str""+ hyperHost.getMor().getValue()).getBytes()).toString();
  templateUuid=templateUuid.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return templateUuid;
}","private static String deriveTemplateUuidOnHost(VmwareHypervisorHost hyperHost,String storeIdentifier,String templateName){
  String templateUuid=UUID.nameUUIDFromBytes((templateName + ""String_Node_Str"" + storeIdentifier+ ""String_Node_Str""+ hyperHost.getMor().getValue()).getBytes(""String_Node_Str"")).toString();
  templateUuid=templateUuid.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return templateUuid;
}",0.9789864029666254
105245,"@Override public String getDetail(String name){
}","@Override public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.6490066225165563
105246,"public String getDetail(String name){
}","public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.5954198473282443
105247,"@Override public void runJob(AsyncJob job){
  VmWork work=null;
  try {
    String cmd=job.getCmd();
    assert(cmd != null);
    Class<?> workClz=null;
    try {
      workClz=Class.forName(job.getCmd());
    }
 catch (    ClassNotFoundException e) {
      s_logger.error(""String_Node_Str"" + cmd + ""String_Node_Str""+ ""String_Node_Str""+ job.getRelated(),e);
      _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,e.getMessage());
      return;
    }
    work=VmWorkSerializer.deserialize(workClz,job.getCmdInfo());
    assert(work != null);
    if (work == null) {
      s_logger.error(""String_Node_Str"" + job.getCmd() + ""String_Node_Str""+ job.getCmdInfo()+ ""String_Node_Str""+ job.getRelated());
      _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,""String_Node_Str"");
      return;
    }
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ work.getVmId()+ ""String_Node_Str""+ job.getRelated());
    try {
      if (_handlers == null || _handlers.isEmpty()) {
        s_logger.error(""String_Node_Str"" + job.getCmd() + ""String_Node_Str""+ job.getCmdInfo()+ ""String_Node_Str""+ job.getRelated());
        _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,""String_Node_Str"");
        return;
      }
      VmWorkJobHandler handler=_handlers.get(work.getHandlerName());
      if (handler == null) {
        s_logger.error(""String_Node_Str"" + work.getHandlerName() + ""String_Node_Str""+ job.getCmd()+ ""String_Node_Str""+ job.getCmdInfo()+ ""String_Node_Str""+ job.getRelated());
        _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,""String_Node_Str"");
        return;
      }
      CallContext.register(work.getUserId(),work.getAccountId());
      try {
        Pair<JobInfo.Status,String> result=handler.handleVmWorkJob(work);
        _asyncJobMgr.completeAsyncJob(job.getId(),result.first(),0,result.second());
      }
  finally {
        CallContext.unregister();
      }
    }
  finally {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ work.getVmId()+ ""String_Node_Str""+ job.getRelated());
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(""String_Node_Str"" + job + ""String_Node_Str""+ job.getRelated());
    _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,_asyncJobMgr.marshallResultObject(e));
  }
catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + job + ""String_Node_Str""+ job.getRelated(),e);
    _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,_asyncJobMgr.marshallResultObject(e));
  }
}","@Override public void runJob(AsyncJob job){
  VmWork work=null;
  try {
    String cmd=job.getCmd();
    assert(cmd != null);
    Class<?> workClz=null;
    try {
      workClz=Class.forName(job.getCmd());
    }
 catch (    ClassNotFoundException e) {
      s_logger.error(""String_Node_Str"" + cmd + ""String_Node_Str""+ ""String_Node_Str""+ job.getRelated(),e);
      _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,e.getMessage());
      return;
    }
    work=VmWorkSerializer.deserialize(workClz,job.getCmdInfo());
    if (work == null) {
      s_logger.error(""String_Node_Str"" + job.getCmd() + ""String_Node_Str""+ job.getCmdInfo()+ ""String_Node_Str""+ job.getRelated());
      _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,""String_Node_Str"");
      return;
    }
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ work.getVmId()+ ""String_Node_Str""+ job.getRelated());
    try {
      if (_handlers == null || _handlers.isEmpty()) {
        s_logger.error(""String_Node_Str"" + job.getCmd() + ""String_Node_Str""+ job.getCmdInfo()+ ""String_Node_Str""+ job.getRelated());
        _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,""String_Node_Str"");
        return;
      }
      VmWorkJobHandler handler=_handlers.get(work.getHandlerName());
      if (handler == null) {
        s_logger.error(""String_Node_Str"" + work.getHandlerName() + ""String_Node_Str""+ job.getCmd()+ ""String_Node_Str""+ job.getCmdInfo()+ ""String_Node_Str""+ job.getRelated());
        _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,""String_Node_Str"");
        return;
      }
      CallContext.register(work.getUserId(),work.getAccountId());
      try {
        Pair<JobInfo.Status,String> result=handler.handleVmWorkJob(work);
        _asyncJobMgr.completeAsyncJob(job.getId(),result.first(),0,result.second());
      }
  finally {
        CallContext.unregister();
      }
    }
  finally {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ work.getVmId()+ ""String_Node_Str""+ job.getRelated());
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(""String_Node_Str"" + job + ""String_Node_Str""+ job.getRelated());
    _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,_asyncJobMgr.marshallResultObject(e));
  }
catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + job + ""String_Node_Str""+ job.getRelated(),e);
    _asyncJobMgr.completeAsyncJob(job.getId(),JobInfo.Status.FAILED,0,_asyncJobMgr.marshallResultObject(e));
  }
}",0.9950381679389312
105248,"public String getDetail(String name){
}","public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.5954198473282443
105249,"private boolean openSocket(){
  try {
    Socket s=new Socket(_ip,3221);
    s.setKeepAlive(true);
    s.setSoTimeout(_timeoutInSeconds * 1000);
    _toSrx=new PrintWriter(s.getOutputStream(),true);
    _fromSrx=new BufferedReader(new InputStreamReader(s.getInputStream()));
    return true;
  }
 catch (  IOException e) {
    s_logger.error(e);
    return false;
  }
}","private boolean openSocket(){
  try {
    Socket s=new Socket(_ip,3221);
    s.setKeepAlive(true);
    s.setSoTimeout(_timeoutInSeconds * 1000);
    _toSrx=new BufferedWriter(new OutputStreamWriter(s.getOutputStream(),""String_Node_Str""));
    _fromSrx=new BufferedReader(new InputStreamReader(s.getInputStream(),""String_Node_Str""));
    return true;
  }
 catch (  IOException e) {
    s_logger.error(e);
    return false;
  }
}",0.9045226130653268
105250,"private String sendRequestPrim(PrintWriter sendStream,BufferedReader recvStream,String xmlRequest) throws ExecutionException {
  if (!xmlRequest.contains(""String_Node_Str"")) {
    s_logger.debug(""String_Node_Str"" + xmlRequest);
  }
 else {
    s_logger.debug(""String_Node_Str"");
  }
  boolean timedOut=false;
  StringBuffer xmlResponseBuffer=new StringBuffer(""String_Node_Str"");
  try {
    sendStream.write(xmlRequest);
    sendStream.flush();
    String line=""String_Node_Str"";
    while ((line=recvStream.readLine()) != null) {
      xmlResponseBuffer.append(line);
      if (line.contains(""String_Node_Str"")) {
        break;
      }
    }
  }
 catch (  SocketTimeoutException e) {
    s_logger.debug(e);
    timedOut=true;
  }
catch (  IOException e) {
    s_logger.debug(e);
    return null;
  }
  String xmlResponse=xmlResponseBuffer.toString();
  String errorMsg=null;
  if (timedOut) {
    errorMsg=""String_Node_Str"" + xmlRequest;
  }
 else   if (xmlResponse.isEmpty()) {
    errorMsg=""String_Node_Str"";
  }
 else   if (xmlResponse.contains(""String_Node_Str"")) {
    errorMsg=""String_Node_Str"";
  }
 else   if (!xmlResponse.contains(""String_Node_Str"")) {
    errorMsg=""String_Node_Str"";
  }
  if (errorMsg == null) {
    return xmlResponse;
  }
 else {
    s_logger.error(errorMsg);
    throw new ExecutionException(errorMsg);
  }
}","private String sendRequestPrim(BufferedWriter sendStream,BufferedReader recvStream,String xmlRequest) throws ExecutionException {
  if (!xmlRequest.contains(""String_Node_Str"")) {
    s_logger.debug(""String_Node_Str"" + xmlRequest);
  }
 else {
    s_logger.debug(""String_Node_Str"");
  }
  boolean timedOut=false;
  StringBuffer xmlResponseBuffer=new StringBuffer(""String_Node_Str"");
  try {
    sendStream.write(xmlRequest);
    sendStream.flush();
    String line=""String_Node_Str"";
    while ((line=recvStream.readLine()) != null) {
      xmlResponseBuffer.append(line);
      if (line.contains(""String_Node_Str"")) {
        break;
      }
    }
  }
 catch (  SocketTimeoutException e) {
    s_logger.debug(e);
    timedOut=true;
  }
catch (  IOException e) {
    s_logger.debug(e);
    return null;
  }
  String xmlResponse=xmlResponseBuffer.toString();
  String errorMsg=null;
  if (timedOut) {
    errorMsg=""String_Node_Str"" + xmlRequest;
  }
 else   if (xmlResponse.isEmpty()) {
    errorMsg=""String_Node_Str"";
  }
 else   if (xmlResponse.contains(""String_Node_Str"")) {
    errorMsg=""String_Node_Str"";
  }
 else   if (!xmlResponse.contains(""String_Node_Str"")) {
    errorMsg=""String_Node_Str"";
  }
  if (errorMsg == null) {
    return xmlResponse;
  }
 else {
    s_logger.error(errorMsg);
    throw new ExecutionException(errorMsg);
  }
}",0.9951582867783983
105251,"private boolean openUsageSocket() throws ExecutionException {
  try {
    Socket s=new Socket(_ip,3221);
    s.setKeepAlive(true);
    s.setSoTimeout(_timeoutInSeconds * 1000);
    _UsagetoSrx=new PrintWriter(s.getOutputStream(),true);
    _UsagefromSrx=new BufferedReader(new InputStreamReader(s.getInputStream()));
    return usageLogin();
  }
 catch (  IOException e) {
    s_logger.error(e);
    return false;
  }
}","private boolean openUsageSocket() throws ExecutionException {
  try {
    Socket s=new Socket(_ip,3221);
    s.setKeepAlive(true);
    s.setSoTimeout(_timeoutInSeconds * 1000);
    _UsagetoSrx=new BufferedWriter(new OutputStreamWriter(s.getOutputStream(),""String_Node_Str""));
    _UsagefromSrx=new BufferedReader(new InputStreamReader(s.getInputStream(),""String_Node_Str""));
    return usageLogin();
  }
 catch (  IOException e) {
    s_logger.error(e);
    return false;
  }
}",0.9151785714285714
105252,"@Override public List<StoragePoolVO> findZoneWideStoragePoolsByTags(long dcId,String[] tags){
  List<StoragePoolVO> storagePools=null;
  if (tags == null || tags.length == 0) {
    QueryBuilder<StoragePoolVO> sc=QueryBuilder.create(StoragePoolVO.class);
    sc.and(sc.entity().getDataCenterId(),Op.EQ,dcId);
    sc.and(sc.entity().getStatus(),Op.EQ,Status.Up);
    sc.and(sc.entity().getScope(),Op.EQ,ScopeType.ZONE);
    return sc.list();
  }
 else {
    Map<String,String> details=tagsToDetails(tags);
    StringBuilder sql=new StringBuilder(ZoneWideDetailsSqlPrefix);
    for (    Map.Entry<String,String> detail : details.entrySet()) {
      sql.append(""String_Node_Str"").append(detail.getKey()).append(""String_Node_Str"").append(detail.getValue()).append(""String_Node_Str"");
    }
    sql.delete(sql.length() - 4,sql.length());
    sql.append(ZoneWideDetailsSqlSuffix);
    TransactionLegacy txn=TransactionLegacy.currentTxn();
    try (PreparedStatement pstmt=txn.prepareStatement(sql.toString())){
      List<StoragePoolVO> pools=new ArrayList<StoragePoolVO>();
      if (pstmt != null) {
        int i=1;
        pstmt.setLong(i++,dcId);
        pstmt.setString(i++,ScopeType.ZONE.toString());
        pstmt.setInt(i++,details.size());
        try (ResultSet rs=pstmt.executeQuery()){
          while (rs.next()) {
            pools.add(toEntityBean(rs,false));
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
        }
      }
      return pools;
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","@Override public List<StoragePoolVO> findZoneWideStoragePoolsByTags(long dcId,String[] tags){
  List<StoragePoolVO> storagePools=null;
  if (tags == null || tags.length == 0) {
    QueryBuilder<StoragePoolVO> sc=QueryBuilder.create(StoragePoolVO.class);
    sc.and(sc.entity().getDataCenterId(),Op.EQ,dcId);
    sc.and(sc.entity().getStatus(),Op.EQ,Status.Up);
    sc.and(sc.entity().getScope(),Op.EQ,ScopeType.ZONE);
    return sc.list();
  }
 else {
    Map<String,String> details=tagsToDetails(tags);
    StringBuilder sql=new StringBuilder(ZoneWideDetailsSqlPrefix);
    for (int i=0; i < details.size(); i++) {
      sql.append(""String_Node_Str"");
    }
    sql.delete(sql.length() - 4,sql.length());
    sql.append(ZoneWideDetailsSqlSuffix);
    TransactionLegacy txn=TransactionLegacy.currentTxn();
    try (PreparedStatement pstmt=txn.prepareStatement(sql.toString())){
      int i=0;
      for (      Map.Entry<String,String> detail : details.entrySet()) {
        pstmt.setString(++i,detail.getKey());
        pstmt.setString(++i,detail.getValue());
      }
      List<StoragePoolVO> pools=new ArrayList<StoragePoolVO>();
      if (pstmt != null) {
        i=1;
        pstmt.setLong(i++,dcId);
        pstmt.setString(i++,ScopeType.ZONE.toString());
        pstmt.setInt(i++,details.size());
        try (ResultSet rs=pstmt.executeQuery()){
          while (rs.next()) {
            pools.add(toEntityBean(rs,false));
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
        }
      }
      return pools;
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
    }
  }
}",0.7926972909305064
105253,"@Override public boolean initialize(){
  assert(_transportProvider != null);
  if (_transportProvider == null)   return false;
  TransportEndpointSite endpointSite=_transportProvider.attach(_transportEndpoint,""String_Node_Str"");
  endpointSite.registerMultiplexier(RPC_MULTIPLEXIER,this);
  return true;
}","@Override public boolean initialize(){
  if (_transportProvider == null)   return false;
  TransportEndpointSite endpointSite=_transportProvider.attach(_transportEndpoint,""String_Node_Str"");
  endpointSite.registerMultiplexier(RPC_MULTIPLEXIER,this);
  return true;
}",0.9335664335664337
105254,"private long[] getNetworkStats(String privateIP){
  String result=networkUsage(privateIP,""String_Node_Str"",null);
  long[] stats=new long[2];
  if (result != null) {
    try {
      String[] splitResult=result.split(""String_Node_Str"");
      int i=0;
      while (i < splitResult.length - 1) {
        stats[0]+=(new Long(splitResult[i++])).longValue();
        stats[1]+=(new Long(splitResult[i++])).longValue();
      }
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + e.toString(),e);
    }
  }
  return stats;
}","private long[] getNetworkStats(String privateIP){
  String result=networkUsage(privateIP,""String_Node_Str"",null);
  long[] stats=new long[2];
  if (result != null) {
    try {
      String[] splitResult=result.split(""String_Node_Str"");
      int i=0;
      while (i < splitResult.length - 1) {
        stats[0]+=Long.parseLong(splitResult[i++]);
        stats[1]+=Long.parseLong(splitResult[i++]);
      }
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + e.toString(),e);
    }
  }
  return stats;
}",0.911487758945386
105255,"public String getDetail(String name){
}","public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.5954198473282443
105256,"public static String getDhcpRange(final String cidr){
  final String[] splitResult=cidr.split(""String_Node_Str"");
  final long size=Long.valueOf(splitResult[1]);
  return NetUtils.getIpRangeStartIpFromCidr(splitResult[0],size);
}","public static String getDhcpRange(final String cidr){
  final String[] splitResult=cidr.split(""String_Node_Str"");
  final long size=Long.parseLong(splitResult[1]);
  return NetUtils.getIpRangeStartIpFromCidr(splitResult[0],size);
}",0.9652173913043478
105257,"public static UpdateTsmStorageCmdResponse updateElastistorTsmStorage(String capacityBytes,String uuid) throws Throwable {
  Long size=(Long.valueOf(capacityBytes) / (1024 * 1024 * 1024));
  String quotasize=null;
  if (size > 1024) {
    quotasize=(String.valueOf(Long.valueOf(capacityBytes) / (1024)) + ""String_Node_Str"");
  }
 else {
    quotasize=String.valueOf(quotasize) + ""String_Node_Str"";
  }
  s_logger.info(""String_Node_Str"" + quotasize);
  UpdateTsmStorageCmd updateTsmStorageCmd=new UpdateTsmStorageCmd();
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",uuid);
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",quotasize);
  UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=(UpdateTsmStorageCmdResponse)getElastistorRestClient().executeCommand(updateTsmStorageCmd);
  return updateTsmStorageCmdResponse;
}","public static UpdateTsmStorageCmdResponse updateElastistorTsmStorage(String capacityBytes,String uuid) throws Throwable {
  Long size=(Long.parseLong(capacityBytes) / (1024 * 1024 * 1024));
  String quotasize=null;
  if (size > 1024) {
    quotasize=(String.valueOf(Long.valueOf(capacityBytes) / (1024)) + ""String_Node_Str"");
  }
 else {
    quotasize=String.valueOf(quotasize) + ""String_Node_Str"";
  }
  s_logger.info(""String_Node_Str"" + quotasize);
  UpdateTsmStorageCmd updateTsmStorageCmd=new UpdateTsmStorageCmd();
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",uuid);
  updateTsmStorageCmd.putCommandParameter(""String_Node_Str"",quotasize);
  UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=(UpdateTsmStorageCmdResponse)getElastistorRestClient().executeCommand(updateTsmStorageCmd);
  return updateTsmStorageCmdResponse;
}",0.9905548996458088
105258,"public static UpdateTsmCmdResponse updateElastistorTsmIOPS(String capacityIOPs,String uuid) throws Throwable {
  s_logger.info(""String_Node_Str"" + capacityIOPs);
  UpdateTsmCmd updateTsmCmd=new UpdateTsmCmd();
  String throughput=String.valueOf(Long.valueOf(capacityIOPs) * 4);
  updateTsmCmd.putCommandParameter(""String_Node_Str"",uuid);
  updateTsmCmd.putCommandParameter(""String_Node_Str"",capacityIOPs);
  updateTsmCmd.putCommandParameter(""String_Node_Str"",throughput);
  UpdateTsmCmdResponse updateTsmStorageCmdResponse=(UpdateTsmCmdResponse)getElastistorRestClient().executeCommand(updateTsmCmd);
  return updateTsmStorageCmdResponse;
}","public static UpdateTsmCmdResponse updateElastistorTsmIOPS(String capacityIOPs,String uuid) throws Throwable {
  s_logger.info(""String_Node_Str"" + capacityIOPs);
  UpdateTsmCmd updateTsmCmd=new UpdateTsmCmd();
  String throughput=String.valueOf(Long.parseLong(capacityIOPs) * 4);
  updateTsmCmd.putCommandParameter(""String_Node_Str"",uuid);
  updateTsmCmd.putCommandParameter(""String_Node_Str"",capacityIOPs);
  updateTsmCmd.putCommandParameter(""String_Node_Str"",throughput);
  UpdateTsmCmdResponse updateTsmStorageCmdResponse=(UpdateTsmCmdResponse)getElastistorRestClient().executeCommand(updateTsmCmd);
  return updateTsmStorageCmdResponse;
}",0.9875195007800311
105259,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_GUEST_VLAN_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public GuestVlan dedicateGuestVlanRange(DedicateGuestVlanRangeCmd cmd){
  String vlan=cmd.getVlan();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long projectId=cmd.getProjectId();
  int startVlan, endVlan;
  String updatedVlanRange=null;
  long guestVlanMapId=0;
  long guestVlanMapAccountId=0;
  long vlanOwnerId=0;
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (vlanOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
  }
  vlanOwnerId=vlanOwner.getAccountId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
 else   if (!physicalNetwork.getIsolationMethods().isEmpty() && !physicalNetwork.getIsolationMethods().contains(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  String[] vlanRange=vlan.split(""String_Node_Str"");
  if (vlanRange.length != 2) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlan + ""String_Node_Str"");
  }
  try {
    startVlan=Integer.parseInt(vlanRange[0]);
    endVlan=Integer.parseInt(vlanRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<Integer,Integer>> existingRanges=physicalNetwork.getVnet();
  Boolean exists=false;
  if (!existingRanges.isEmpty()) {
    for (int i=0; i < existingRanges.size(); i++) {
      int existingStartVlan=existingRanges.get(i).first();
      int existingEndVlan=existingRanges.get(i).second();
      if (startVlan <= endVlan && startVlan >= existingStartVlan && endVlan <= existingEndVlan) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan);
    }
  }
  for (int i=startVlan; i <= endVlan; i++) {
    List<DataCenterVnetVO> allocatedVlans=_datacneterVnet.listAllocatedVnetsInRange(physicalNetwork.getDataCenterId(),physicalNetwork.getId(),startVlan,endVlan);
    if (allocatedVlans != null && !allocatedVlans.isEmpty()) {
      for (      DataCenterVnetVO allocatedVlan : allocatedVlans) {
        if (allocatedVlan.getAccountId() != vlanOwner.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + allocatedVlan.getVnet() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
  List<AccountGuestVlanMapVO> guestVlanMaps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(physicalNetworkId);
  for (  AccountGuestVlanMapVO guestVlanMap : guestVlanMaps) {
    List<Integer> vlanTokens=getVlanFromRange(guestVlanMap.getGuestVlanRange());
    int dedicatedStartVlan=vlanTokens.get(0).intValue();
    int dedicatedEndVlan=vlanTokens.get(1).intValue();
    if ((startVlan < dedicatedStartVlan & endVlan >= dedicatedStartVlan) || (startVlan >= dedicatedStartVlan & startVlan <= dedicatedEndVlan)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + vlan);
    }
  }
  Collections.sort(guestVlanMaps,new Comparator<AccountGuestVlanMapVO>(){
    @Override public int compare(    AccountGuestVlanMapVO obj1,    AccountGuestVlanMapVO obj2){
      List<Integer> vlanTokens1=getVlanFromRange(obj1.getGuestVlanRange());
      List<Integer> vlanTokens2=getVlanFromRange(obj2.getGuestVlanRange());
      return vlanTokens1.get(0).compareTo(vlanTokens2.get(0));
    }
  }
);
  for (int i=0; i < guestVlanMaps.size(); i++) {
    guestVlanMapId=guestVlanMaps.get(i).getId();
    guestVlanMapAccountId=guestVlanMaps.get(i).getAccountId();
    List<Integer> vlanTokens1=getVlanFromRange(guestVlanMaps.get(i).getGuestVlanRange());
    if (endVlan == (vlanTokens1.get(0).intValue() - 1)) {
      if (guestVlanMapAccountId == vlanOwnerId) {
        updatedVlanRange=startVlan + ""String_Node_Str"" + vlanTokens1.get(1).intValue();
      }
      break;
    }
    if (startVlan == (vlanTokens1.get(1).intValue() + 1) & guestVlanMapAccountId == vlanOwnerId) {
      if (i != (guestVlanMaps.size() - 1)) {
        List<Integer> vlanTokens2=getVlanFromRange(guestVlanMaps.get(i + 1).getGuestVlanRange());
        if (endVlan == (vlanTokens2.get(0).intValue() - 1) & guestVlanMaps.get(i + 1).getAccountId() == vlanOwnerId) {
          _datacneterVnet.releaseDedicatedGuestVlans(guestVlanMaps.get(i + 1).getId());
          _accountGuestVlanMapDao.remove(guestVlanMaps.get(i + 1).getId());
          updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + vlanTokens2.get(1).intValue();
          break;
        }
      }
      updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + endVlan;
      break;
    }
  }
  AccountGuestVlanMapVO accountGuestVlanMapVO;
  if (updatedVlanRange != null) {
    accountGuestVlanMapVO=_accountGuestVlanMapDao.findById(guestVlanMapId);
    accountGuestVlanMapVO.setGuestVlanRange(updatedVlanRange);
    _accountGuestVlanMapDao.update(guestVlanMapId,accountGuestVlanMapVO);
  }
 else {
    accountGuestVlanMapVO=new AccountGuestVlanMapVO(vlanOwner.getAccountId(),physicalNetworkId);
    accountGuestVlanMapVO.setGuestVlanRange(startVlan + ""String_Node_Str"" + endVlan);
    _accountGuestVlanMapDao.persist(accountGuestVlanMapVO);
  }
  List<Integer> finaVlanTokens=getVlanFromRange(accountGuestVlanMapVO.getGuestVlanRange());
  for (int i=finaVlanTokens.get(0).intValue(); i <= finaVlanTokens.get(1).intValue(); i++) {
    List<DataCenterVnetVO> dataCenterVnet=_datacneterVnet.findVnet(physicalNetwork.getDataCenterId(),physicalNetworkId,Integer.toString(i));
    dataCenterVnet.get(0).setAccountGuestVlanMapId(accountGuestVlanMapVO.getId());
    _datacneterVnet.update(dataCenterVnet.get(0).getId(),dataCenterVnet.get(0));
  }
  return accountGuestVlanMapVO;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_GUEST_VLAN_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public GuestVlan dedicateGuestVlanRange(DedicateGuestVlanRangeCmd cmd){
  String vlan=cmd.getVlan();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long projectId=cmd.getProjectId();
  int startVlan, endVlan;
  String updatedVlanRange=null;
  long guestVlanMapId=0;
  long guestVlanMapAccountId=0;
  long vlanOwnerId=0;
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (vlanOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
  }
  vlanOwnerId=vlanOwner.getAccountId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
 else   if (!physicalNetwork.getIsolationMethods().isEmpty() && !physicalNetwork.getIsolationMethods().contains(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  String[] vlanRange=vlan.split(""String_Node_Str"");
  if (vlanRange.length != 2) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlan + ""String_Node_Str"");
  }
  try {
    startVlan=Integer.parseInt(vlanRange[0]);
    endVlan=Integer.parseInt(vlanRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<Integer,Integer>> existingRanges=physicalNetwork.getVnet();
  Boolean exists=false;
  if (!existingRanges.isEmpty()) {
    for (int i=0; i < existingRanges.size(); i++) {
      int existingStartVlan=existingRanges.get(i).first();
      int existingEndVlan=existingRanges.get(i).second();
      if (startVlan <= endVlan && startVlan >= existingStartVlan && endVlan <= existingEndVlan) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan);
    }
  }
  for (int i=startVlan; i <= endVlan; i++) {
    List<DataCenterVnetVO> allocatedVlans=_datacneterVnet.listAllocatedVnetsInRange(physicalNetwork.getDataCenterId(),physicalNetwork.getId(),startVlan,endVlan);
    if (allocatedVlans != null && !allocatedVlans.isEmpty()) {
      for (      DataCenterVnetVO allocatedVlan : allocatedVlans) {
        if (allocatedVlan.getAccountId() != vlanOwner.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + allocatedVlan.getVnet() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
  List<AccountGuestVlanMapVO> guestVlanMaps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(physicalNetworkId);
  for (  AccountGuestVlanMapVO guestVlanMap : guestVlanMaps) {
    List<Integer> vlanTokens=getVlanFromRange(guestVlanMap.getGuestVlanRange());
    int dedicatedStartVlan=vlanTokens.get(0).intValue();
    int dedicatedEndVlan=vlanTokens.get(1).intValue();
    if ((startVlan < dedicatedStartVlan & endVlan >= dedicatedStartVlan) || (startVlan >= dedicatedStartVlan & startVlan <= dedicatedEndVlan)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + vlan);
    }
  }
  Collections.sort(guestVlanMaps,new Comparator<AccountGuestVlanMapVO>(){
    @Override public int compare(    AccountGuestVlanMapVO obj1,    AccountGuestVlanMapVO obj2){
      List<Integer> vlanTokens1=getVlanFromRange(obj1.getGuestVlanRange());
      List<Integer> vlanTokens2=getVlanFromRange(obj2.getGuestVlanRange());
      return vlanTokens1.get(0).compareTo(vlanTokens2.get(0));
    }
  }
);
  for (int i=0; i < guestVlanMaps.size(); i++) {
    guestVlanMapId=guestVlanMaps.get(i).getId();
    guestVlanMapAccountId=guestVlanMaps.get(i).getAccountId();
    List<Integer> vlanTokens1=getVlanFromRange(guestVlanMaps.get(i).getGuestVlanRange());
    if (endVlan == (vlanTokens1.get(0).intValue() - 1)) {
      if (guestVlanMapAccountId == vlanOwnerId) {
        updatedVlanRange=startVlan + ""String_Node_Str"" + vlanTokens1.get(1).intValue();
      }
      break;
    }
    if (startVlan == (vlanTokens1.get(1).intValue() + 1) & guestVlanMapAccountId == vlanOwnerId) {
      if (i != (guestVlanMaps.size() - 1)) {
        List<Integer> vlanTokens2=getVlanFromRange(guestVlanMaps.get(i + 1).getGuestVlanRange());
        if (endVlan == (vlanTokens2.get(0).intValue() - 1) && guestVlanMaps.get(i + 1).getAccountId() == vlanOwnerId) {
          _datacneterVnet.releaseDedicatedGuestVlans(guestVlanMaps.get(i + 1).getId());
          _accountGuestVlanMapDao.remove(guestVlanMaps.get(i + 1).getId());
          updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + vlanTokens2.get(1).intValue();
          break;
        }
      }
      updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + endVlan;
      break;
    }
  }
  AccountGuestVlanMapVO accountGuestVlanMapVO;
  if (updatedVlanRange != null) {
    accountGuestVlanMapVO=_accountGuestVlanMapDao.findById(guestVlanMapId);
    accountGuestVlanMapVO.setGuestVlanRange(updatedVlanRange);
    _accountGuestVlanMapDao.update(guestVlanMapId,accountGuestVlanMapVO);
  }
 else {
    accountGuestVlanMapVO=new AccountGuestVlanMapVO(vlanOwner.getAccountId(),physicalNetworkId);
    accountGuestVlanMapVO.setGuestVlanRange(startVlan + ""String_Node_Str"" + endVlan);
    _accountGuestVlanMapDao.persist(accountGuestVlanMapVO);
  }
  List<Integer> finaVlanTokens=getVlanFromRange(accountGuestVlanMapVO.getGuestVlanRange());
  for (int i=finaVlanTokens.get(0).intValue(); i <= finaVlanTokens.get(1).intValue(); i++) {
    List<DataCenterVnetVO> dataCenterVnet=_datacneterVnet.findVnet(physicalNetwork.getDataCenterId(),physicalNetworkId,Integer.toString(i));
    dataCenterVnet.get(0).setAccountGuestVlanMapId(accountGuestVlanMapVO.getId());
    _datacneterVnet.update(dataCenterVnet.get(0).getId(),dataCenterVnet.get(0));
  }
  return accountGuestVlanMapVO;
}",0.9999241562381496
105260,"public String getDetail(String name){
}","public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.5954198473282443
105261,"protected void updateComputeHost(final HostVO host,final StartupCommand startup,final Host.Type type) throws AgentAuthnException {
  String zoneToken=startup.getDataCenter();
  if (zoneToken == null) {
    s_logger.warn(""String_Node_Str"");
    throw new AgentAuthnException(""String_Node_Str"");
  }
  DataCenterVO zone=_zoneDao.findByToken(zoneToken);
  if (zone == null) {
    zone=_zoneDao.findByName(zoneToken);
    if (zone == null) {
      try {
        long zoneId=Long.parseLong(zoneToken);
        zone=_zoneDao.findById(zoneId);
        if (zone == null) {
          throw new AgentAuthnException(""String_Node_Str"" + zoneToken);
        }
      }
 catch (      NumberFormatException nfe) {
        throw new AgentAuthnException(""String_Node_Str"" + zoneToken);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  long zoneId=zone.getId();
  ResourceDetail maxHostsInZone=_zoneDetailsDao.findDetail(zoneId,ZoneConfig.MaxHosts.key());
  if (maxHostsInZone != null) {
    long maxHosts=new Long(maxHostsInZone.getValue()).longValue();
    long currentCountOfHosts=_hostDao.countRoutingHostsByDataCenter(zoneId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + currentCountOfHosts + ""String_Node_Str""+ maxHosts);
    }
    if (currentCountOfHosts >= maxHosts) {
      throw new AgentAuthnException(""String_Node_Str"" + zone.getName() + ""String_Node_Str""+ maxHosts+ ""String_Node_Str"");
    }
  }
  HostPodVO pod=null;
  if (startup.getPrivateIpAddress() == null) {
    s_logger.warn(""String_Node_Str"");
    throw new AgentAuthnException(""String_Node_Str"");
  }
  if (startup.getPrivateNetmask() == null) {
    s_logger.warn(""String_Node_Str"");
    throw new AgentAuthnException(""String_Node_Str"");
  }
  if (host.getPodId() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    pod=_podDao.findById(host.getPodId());
    if (!checkCIDR(type,pod,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
      pod=null;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getPodId());
      }
    }
 else {
      updatePodNetmaskIfNeeded(pod,startup.getPrivateNetmask());
    }
  }
  if (pod == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    boolean podFound=false;
    List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zoneId);
    for (    HostPodVO hostPod : podsInZone) {
      if (checkCIDR(type,hostPod,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hostPod;
        updatePodNetmaskIfNeeded(pod,startup.getPrivateNetmask());
        podFound=true;
        break;
      }
    }
    if (!podFound) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      if (startup.getGatewayIpAddress() == null) {
        s_logger.warn(""String_Node_Str"");
        throw new AgentAuthnException(""String_Node_Str"");
      }
      String podName=""String_Node_Str"" + (podsInZone.size() + 1);
      try {
        String gateway=startup.getGatewayIpAddress();
        String cidr=NetUtils.getCidrFromGatewayAndNetmask(gateway,startup.getPrivateNetmask());
        String[] cidrPair=cidr.split(""String_Node_Str"");
        String cidrAddress=cidrPair[0];
        long cidrSize=Long.parseLong(cidrPair[1]);
        String startIp=NetUtils.getIpRangeStartIpFromCidr(cidrAddress,cidrSize);
        String endIp=NetUtils.getIpRangeEndIpFromCidr(cidrAddress,cidrSize);
        pod=_configurationManager.createPod(-1,podName,zoneId,gateway,cidr,startIp,endIp,null,true);
      }
 catch (      Exception e) {
        throw new CloudRuntimeException(""String_Node_Str"" + podName + ""String_Node_Str""+ zoneId,e);
      }
    }
  }
  final StartupRoutingCommand scc=(StartupRoutingCommand)startup;
  ClusterVO cluster=null;
  if (host.getClusterId() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    cluster=_clusterDao.findById(host.getClusterId());
  }
  if (cluster == null) {
    String clusterName=""String_Node_Str"" + startup.getPrivateIpAddress();
    ClusterVO existingCluster=_clusterDao.findBy(clusterName,pod.getId());
    if (existingCluster != null) {
      cluster=existingCluster;
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + clusterName + ""String_Node_Str""+ pod.getId()+ ""String_Node_Str""+ zoneId);
      }
      cluster=new ClusterVO(zoneId,pod.getId(),clusterName);
      cluster.setHypervisorType(scc.getHypervisorType().toString());
      try {
        cluster=_clusterDao.persist(cluster);
      }
 catch (      Exception e) {
        throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ pod.getId()+ ""String_Node_Str""+ zoneId,e);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + zoneId + ""String_Node_Str""+ pod.getId()+ ""String_Node_Str""+ cluster.getId());
  }
  host.setDataCenterId(zone.getId());
  host.setPodId(pod.getId());
  host.setClusterId(cluster.getId());
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setType(type);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setCaps(scc.getCapabilities());
  host.setCpus(scc.getCpus());
  host.setTotalMemory(scc.getMemory());
  host.setSpeed(scc.getSpeed());
  HypervisorType hyType=scc.getHypervisorType();
  host.setHypervisorType(hyType);
  host.setHypervisorVersion(scc.getHypervisorVersion());
}","protected void updateComputeHost(final HostVO host,final StartupCommand startup,final Host.Type type) throws AgentAuthnException {
  String zoneToken=startup.getDataCenter();
  if (zoneToken == null) {
    s_logger.warn(""String_Node_Str"");
    throw new AgentAuthnException(""String_Node_Str"");
  }
  DataCenterVO zone=_zoneDao.findByToken(zoneToken);
  if (zone == null) {
    zone=_zoneDao.findByName(zoneToken);
    if (zone == null) {
      try {
        long zoneId=Long.parseLong(zoneToken);
        zone=_zoneDao.findById(zoneId);
        if (zone == null) {
          throw new AgentAuthnException(""String_Node_Str"" + zoneToken);
        }
      }
 catch (      NumberFormatException nfe) {
        throw new AgentAuthnException(""String_Node_Str"" + zoneToken);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  long zoneId=zone.getId();
  ResourceDetail maxHostsInZone=_zoneDetailsDao.findDetail(zoneId,ZoneConfig.MaxHosts.key());
  if (maxHostsInZone != null) {
    long maxHosts=Long.parseLong(maxHostsInZone.getValue());
    long currentCountOfHosts=_hostDao.countRoutingHostsByDataCenter(zoneId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + currentCountOfHosts + ""String_Node_Str""+ maxHosts);
    }
    if (currentCountOfHosts >= maxHosts) {
      throw new AgentAuthnException(""String_Node_Str"" + zone.getName() + ""String_Node_Str""+ maxHosts+ ""String_Node_Str"");
    }
  }
  HostPodVO pod=null;
  if (startup.getPrivateIpAddress() == null) {
    s_logger.warn(""String_Node_Str"");
    throw new AgentAuthnException(""String_Node_Str"");
  }
  if (startup.getPrivateNetmask() == null) {
    s_logger.warn(""String_Node_Str"");
    throw new AgentAuthnException(""String_Node_Str"");
  }
  if (host.getPodId() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    pod=_podDao.findById(host.getPodId());
    if (!checkCIDR(type,pod,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
      pod=null;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getPodId());
      }
    }
 else {
      updatePodNetmaskIfNeeded(pod,startup.getPrivateNetmask());
    }
  }
  if (pod == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    boolean podFound=false;
    List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zoneId);
    for (    HostPodVO hostPod : podsInZone) {
      if (checkCIDR(type,hostPod,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hostPod;
        updatePodNetmaskIfNeeded(pod,startup.getPrivateNetmask());
        podFound=true;
        break;
      }
    }
    if (!podFound) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      if (startup.getGatewayIpAddress() == null) {
        s_logger.warn(""String_Node_Str"");
        throw new AgentAuthnException(""String_Node_Str"");
      }
      String podName=""String_Node_Str"" + (podsInZone.size() + 1);
      try {
        String gateway=startup.getGatewayIpAddress();
        String cidr=NetUtils.getCidrFromGatewayAndNetmask(gateway,startup.getPrivateNetmask());
        String[] cidrPair=cidr.split(""String_Node_Str"");
        String cidrAddress=cidrPair[0];
        long cidrSize=Long.parseLong(cidrPair[1]);
        String startIp=NetUtils.getIpRangeStartIpFromCidr(cidrAddress,cidrSize);
        String endIp=NetUtils.getIpRangeEndIpFromCidr(cidrAddress,cidrSize);
        pod=_configurationManager.createPod(-1,podName,zoneId,gateway,cidr,startIp,endIp,null,true);
      }
 catch (      Exception e) {
        throw new CloudRuntimeException(""String_Node_Str"" + podName + ""String_Node_Str""+ zoneId,e);
      }
    }
  }
  final StartupRoutingCommand scc=(StartupRoutingCommand)startup;
  ClusterVO cluster=null;
  if (host.getClusterId() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    cluster=_clusterDao.findById(host.getClusterId());
  }
  if (cluster == null) {
    String clusterName=""String_Node_Str"" + startup.getPrivateIpAddress();
    ClusterVO existingCluster=_clusterDao.findBy(clusterName,pod.getId());
    if (existingCluster != null) {
      cluster=existingCluster;
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + clusterName + ""String_Node_Str""+ pod.getId()+ ""String_Node_Str""+ zoneId);
      }
      cluster=new ClusterVO(zoneId,pod.getId(),clusterName);
      cluster.setHypervisorType(scc.getHypervisorType().toString());
      try {
        cluster=_clusterDao.persist(cluster);
      }
 catch (      Exception e) {
        throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ pod.getId()+ ""String_Node_Str""+ zoneId,e);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + zoneId + ""String_Node_Str""+ pod.getId()+ ""String_Node_Str""+ cluster.getId());
  }
  host.setDataCenterId(zone.getId());
  host.setPodId(pod.getId());
  host.setClusterId(cluster.getId());
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setType(type);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setCaps(scc.getCapabilities());
  host.setCpus(scc.getCpus());
  host.setTotalMemory(scc.getMemory());
  host.setSpeed(scc.getSpeed());
  HypervisorType hyType=scc.getHypervisorType();
  host.setHypervisorType(hyType);
  host.setHypervisorVersion(scc.getHypervisorVersion());
}",0.9978719921427402
105262,"private boolean collectDirectNetworkUsage(final HostVO host){
  s_logger.debug(""String_Node_Str"");
  final long zoneId=host.getDataCenterId();
  final DetailVO lastCollectDetail=_detailsDao.findDetail(host.getId(),""String_Node_Str"");
  if (lastCollectDetail == null) {
    s_logger.warn(""String_Node_Str"" + host.getId());
    return false;
  }
  Date lastCollection=new Date(new Long(lastCollectDetail.getValue()));
  List<IPAddressVO> allocatedIps=listAllocatedDirectIps(zoneId);
  Calendar rightNow=Calendar.getInstance();
  rightNow.add(Calendar.HOUR_OF_DAY,-2);
  final Date now=rightNow.getTime();
  if (lastCollection.after(now)) {
    s_logger.debug(""String_Node_Str"" + lastCollection.toString() + ""String_Node_Str"");
    return false;
  }
  List<UsageEventVO> IpEvents=_eventDao.listDirectIpEvents(lastCollection,now,zoneId);
  Map<String,Date> ipAssigment=new HashMap<String,Date>();
  List<UsageIPAddressVO> IpPartialUsage=new ArrayList<UsageIPAddressVO>();
  List<UsageIPAddressVO> fullDurationIpUsage=new ArrayList<UsageIPAddressVO>();
  for (  UsageEventVO IpEvent : IpEvents) {
    String address=IpEvent.getResourceName();
    if (EventTypes.EVENT_NET_IP_ASSIGN.equals(IpEvent.getType())) {
      ipAssigment.put(address,IpEvent.getCreateDate());
    }
 else     if (EventTypes.EVENT_NET_IP_RELEASE.equals(IpEvent.getType())) {
      if (ipAssigment.containsKey(address)) {
        Date assigned=ipAssigment.get(address);
        ipAssigment.remove(address);
        IpPartialUsage.add(new UsageIPAddressVO(IpEvent.getAccountId(),address,assigned,IpEvent.getCreateDate()));
      }
 else {
        IpPartialUsage.add(new UsageIPAddressVO(IpEvent.getAccountId(),address,lastCollection,IpEvent.getCreateDate()));
      }
    }
  }
  List<String> IpList=new ArrayList<String>();
  for (  IPAddressVO ip : allocatedIps) {
    if (ip.getAllocatedToAccountId() == Account.ACCOUNT_ID_SYSTEM) {
      continue;
    }
    String address=(ip.getAddress()).toString();
    if (ipAssigment.containsKey(address)) {
      IpPartialUsage.add(new UsageIPAddressVO(ip.getAllocatedToAccountId(),address,ipAssigment.get(address),now));
    }
 else {
      fullDurationIpUsage.add(new UsageIPAddressVO(ip.getAllocatedToAccountId(),address,lastCollection,now));
      IpList.add(address);
    }
  }
  final List<UserStatisticsVO> collectedStats=new ArrayList<UserStatisticsVO>();
  if (fullDurationIpUsage.size() > 0) {
    DirectNetworkUsageCommand cmd=new DirectNetworkUsageCommand(IpList,lastCollection,now,_TSinclZones,_TSexclZones);
    DirectNetworkUsageAnswer answer=(DirectNetworkUsageAnswer)_agentMgr.easySend(host.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      String details=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
      String msg=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ details+ ""String_Node_Str"";
      s_logger.error(msg);
      return false;
    }
 else {
      for (      UsageIPAddressVO usageIp : fullDurationIpUsage) {
        String publicIp=usageIp.getAddress();
        long[] bytesSentRcvd=answer.get(publicIp);
        Long bytesSent=bytesSentRcvd[0];
        Long bytesRcvd=bytesSentRcvd[1];
        if (bytesSent == null || bytesRcvd == null) {
          s_logger.debug(""String_Node_Str"" + publicIp);
          continue;
        }
        if (bytesSent == 0L && bytesRcvd == 0L) {
          s_logger.trace(""String_Node_Str"" + publicIp);
          continue;
        }
        UserStatisticsVO stats=new UserStatisticsVO(usageIp.getAccountId(),zoneId,null,null,null,null);
        stats.setCurrentBytesSent(bytesSent);
        stats.setCurrentBytesReceived(bytesRcvd);
        collectedStats.add(stats);
      }
    }
  }
  for (  UsageIPAddressVO usageIp : IpPartialUsage) {
    IpList=new ArrayList<String>();
    IpList.add(usageIp.getAddress());
    DirectNetworkUsageCommand cmd=new DirectNetworkUsageCommand(IpList,usageIp.getAssigned(),usageIp.getReleased(),_TSinclZones,_TSexclZones);
    DirectNetworkUsageAnswer answer=(DirectNetworkUsageAnswer)_agentMgr.easySend(host.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      String details=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
      String msg=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ details+ ""String_Node_Str"";
      s_logger.error(msg);
      return false;
    }
 else {
      String publicIp=usageIp.getAddress();
      long[] bytesSentRcvd=answer.get(publicIp);
      Long bytesSent=bytesSentRcvd[0];
      Long bytesRcvd=bytesSentRcvd[1];
      if (bytesSent == null || bytesRcvd == null) {
        s_logger.debug(""String_Node_Str"" + publicIp);
        continue;
      }
      if (bytesSent == 0L && bytesRcvd == 0L) {
        s_logger.trace(""String_Node_Str"" + publicIp);
        continue;
      }
      UserStatisticsVO stats=new UserStatisticsVO(usageIp.getAccountId(),zoneId,null,null,null,null);
      stats.setCurrentBytesSent(bytesSent);
      stats.setCurrentBytesReceived(bytesRcvd);
      collectedStats.add(stats);
    }
  }
  if (collectedStats.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      UserStatisticsVO stat : collectedStats) {
        UserStatisticsVO stats=_statsDao.lock(stat.getAccountId(),stat.getDataCenterId(),0L,null,host.getId(),""String_Node_Str"");
        if (stats == null) {
          stats=new UserStatisticsVO(stat.getAccountId(),zoneId,null,host.getId(),""String_Node_Str"",0L);
          stats.setCurrentBytesSent(stat.getCurrentBytesSent());
          stats.setCurrentBytesReceived(stat.getCurrentBytesReceived());
          _statsDao.persist(stats);
        }
 else {
          stats.setCurrentBytesSent(stats.getCurrentBytesSent() + stat.getCurrentBytesSent());
          stats.setCurrentBytesReceived(stats.getCurrentBytesReceived() + stat.getCurrentBytesReceived());
          _statsDao.update(stats.getId(),stats);
        }
      }
      lastCollectDetail.setValue(""String_Node_Str"" + now.getTime());
      _detailsDao.update(lastCollectDetail.getId(),lastCollectDetail);
    }
  }
);
  return true;
}","private boolean collectDirectNetworkUsage(final HostVO host){
  s_logger.debug(""String_Node_Str"");
  final long zoneId=host.getDataCenterId();
  final DetailVO lastCollectDetail=_detailsDao.findDetail(host.getId(),""String_Node_Str"");
  if (lastCollectDetail == null) {
    s_logger.warn(""String_Node_Str"" + host.getId());
    return false;
  }
  Date lastCollection=new Date(Long.parseLong(lastCollectDetail.getValue()));
  List<IPAddressVO> allocatedIps=listAllocatedDirectIps(zoneId);
  Calendar rightNow=Calendar.getInstance();
  rightNow.add(Calendar.HOUR_OF_DAY,-2);
  final Date now=rightNow.getTime();
  if (lastCollection.after(now)) {
    s_logger.debug(""String_Node_Str"" + lastCollection.toString() + ""String_Node_Str"");
    return false;
  }
  List<UsageEventVO> IpEvents=_eventDao.listDirectIpEvents(lastCollection,now,zoneId);
  Map<String,Date> ipAssigment=new HashMap<String,Date>();
  List<UsageIPAddressVO> IpPartialUsage=new ArrayList<UsageIPAddressVO>();
  List<UsageIPAddressVO> fullDurationIpUsage=new ArrayList<UsageIPAddressVO>();
  for (  UsageEventVO IpEvent : IpEvents) {
    String address=IpEvent.getResourceName();
    if (EventTypes.EVENT_NET_IP_ASSIGN.equals(IpEvent.getType())) {
      ipAssigment.put(address,IpEvent.getCreateDate());
    }
 else     if (EventTypes.EVENT_NET_IP_RELEASE.equals(IpEvent.getType())) {
      if (ipAssigment.containsKey(address)) {
        Date assigned=ipAssigment.get(address);
        ipAssigment.remove(address);
        IpPartialUsage.add(new UsageIPAddressVO(IpEvent.getAccountId(),address,assigned,IpEvent.getCreateDate()));
      }
 else {
        IpPartialUsage.add(new UsageIPAddressVO(IpEvent.getAccountId(),address,lastCollection,IpEvent.getCreateDate()));
      }
    }
  }
  List<String> IpList=new ArrayList<String>();
  for (  IPAddressVO ip : allocatedIps) {
    if (ip.getAllocatedToAccountId() == Account.ACCOUNT_ID_SYSTEM) {
      continue;
    }
    String address=(ip.getAddress()).toString();
    if (ipAssigment.containsKey(address)) {
      IpPartialUsage.add(new UsageIPAddressVO(ip.getAllocatedToAccountId(),address,ipAssigment.get(address),now));
    }
 else {
      fullDurationIpUsage.add(new UsageIPAddressVO(ip.getAllocatedToAccountId(),address,lastCollection,now));
      IpList.add(address);
    }
  }
  final List<UserStatisticsVO> collectedStats=new ArrayList<UserStatisticsVO>();
  if (fullDurationIpUsage.size() > 0) {
    DirectNetworkUsageCommand cmd=new DirectNetworkUsageCommand(IpList,lastCollection,now,_TSinclZones,_TSexclZones);
    DirectNetworkUsageAnswer answer=(DirectNetworkUsageAnswer)_agentMgr.easySend(host.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      String details=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
      String msg=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ details+ ""String_Node_Str"";
      s_logger.error(msg);
      return false;
    }
 else {
      for (      UsageIPAddressVO usageIp : fullDurationIpUsage) {
        String publicIp=usageIp.getAddress();
        long[] bytesSentRcvd=answer.get(publicIp);
        Long bytesSent=bytesSentRcvd[0];
        Long bytesRcvd=bytesSentRcvd[1];
        if (bytesSent == null || bytesRcvd == null) {
          s_logger.debug(""String_Node_Str"" + publicIp);
          continue;
        }
        if (bytesSent == 0L && bytesRcvd == 0L) {
          s_logger.trace(""String_Node_Str"" + publicIp);
          continue;
        }
        UserStatisticsVO stats=new UserStatisticsVO(usageIp.getAccountId(),zoneId,null,null,null,null);
        stats.setCurrentBytesSent(bytesSent);
        stats.setCurrentBytesReceived(bytesRcvd);
        collectedStats.add(stats);
      }
    }
  }
  for (  UsageIPAddressVO usageIp : IpPartialUsage) {
    IpList=new ArrayList<String>();
    IpList.add(usageIp.getAddress());
    DirectNetworkUsageCommand cmd=new DirectNetworkUsageCommand(IpList,usageIp.getAssigned(),usageIp.getReleased(),_TSinclZones,_TSexclZones);
    DirectNetworkUsageAnswer answer=(DirectNetworkUsageAnswer)_agentMgr.easySend(host.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      String details=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
      String msg=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ details+ ""String_Node_Str"";
      s_logger.error(msg);
      return false;
    }
 else {
      String publicIp=usageIp.getAddress();
      long[] bytesSentRcvd=answer.get(publicIp);
      Long bytesSent=bytesSentRcvd[0];
      Long bytesRcvd=bytesSentRcvd[1];
      if (bytesSent == null || bytesRcvd == null) {
        s_logger.debug(""String_Node_Str"" + publicIp);
        continue;
      }
      if (bytesSent == 0L && bytesRcvd == 0L) {
        s_logger.trace(""String_Node_Str"" + publicIp);
        continue;
      }
      UserStatisticsVO stats=new UserStatisticsVO(usageIp.getAccountId(),zoneId,null,null,null,null);
      stats.setCurrentBytesSent(bytesSent);
      stats.setCurrentBytesReceived(bytesRcvd);
      collectedStats.add(stats);
    }
  }
  if (collectedStats.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      UserStatisticsVO stat : collectedStats) {
        UserStatisticsVO stats=_statsDao.lock(stat.getAccountId(),stat.getDataCenterId(),0L,null,host.getId(),""String_Node_Str"");
        if (stats == null) {
          stats=new UserStatisticsVO(stat.getAccountId(),zoneId,null,host.getId(),""String_Node_Str"",0L);
          stats.setCurrentBytesSent(stat.getCurrentBytesSent());
          stats.setCurrentBytesReceived(stat.getCurrentBytesReceived());
          _statsDao.persist(stats);
        }
 else {
          stats.setCurrentBytesSent(stats.getCurrentBytesSent() + stat.getCurrentBytesSent());
          stats.setCurrentBytesReceived(stats.getCurrentBytesReceived() + stat.getCurrentBytesReceived());
          _statsDao.update(stats.getId(),stats);
        }
      }
      lastCollectDetail.setValue(""String_Node_Str"" + now.getTime());
      _detailsDao.update(lastCollectDetail.getId(),lastCollectDetail);
    }
  }
);
  return true;
}",0.9988749598199936
105263,"private String getPrivateSubnet(String vlan) throws ExecutionException {
  String _interfaceName=genPrivateInterfaceName(Long.valueOf(vlan).longValue());
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"" + _privateInterfaceType + ""String_Node_Str""+ _privateInterface+ ""String_Node_Str""+ _interfaceName+ ""String_Node_Str"");
  String response=request(PaloAltoMethod.GET,params);
  if (validResponse(response) && responseNotEmpty(response)) {
    NodeList response_body;
    Document doc=getDocument(response);
    XPath xpath=XPathFactory.newInstance().newXPath();
    try {
      XPathExpression expr=xpath.compile(""String_Node_Str"");
      response_body=(NodeList)expr.evaluate(doc,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      throw new ExecutionException(e.getCause().getMessage());
    }
    if (response_body.getLength() > 0) {
      return response_body.item(0).getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
    }
  }
  return null;
}","private String getPrivateSubnet(String vlan) throws ExecutionException {
  String _interfaceName=genPrivateInterfaceName(Long.parseLong(vlan));
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"" + _privateInterfaceType + ""String_Node_Str""+ _privateInterface+ ""String_Node_Str""+ _interfaceName+ ""String_Node_Str"");
  String response=request(PaloAltoMethod.GET,params);
  if (validResponse(response) && responseNotEmpty(response)) {
    NodeList response_body;
    Document doc=getDocument(response);
    XPath xpath=XPathFactory.newInstance().newXPath();
    try {
      XPathExpression expr=xpath.compile(""String_Node_Str"");
      response_body=(NodeList)expr.evaluate(doc,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      throw new ExecutionException(e.getCause().getMessage());
    }
    if (response_body.getLength() > 0) {
      return response_body.item(0).getAttributes().getNamedItem(""String_Node_Str"").getTextContent();
    }
  }
  return null;
}",0.987783595113438
105264,"public String getDetail(String name){
}","public String getDetail(String name){
  return details != null ? details.get(name) : null;
}",0.5954198473282443
105265,"protected String getNetworkLabelFromConfig(Connection conn,String name){
  String sql=""String_Node_Str"" + name + ""String_Node_Str"";
  String networkLabel=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=conn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    if (rs.next()) {
      networkLabel=rs.getString(1);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  return networkLabel;
}","protected String getNetworkLabelFromConfig(Connection conn,String name){
  String sql=""String_Node_Str"";
  String networkLabel=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=conn.prepareStatement(sql);
    pstmt.setString(1,name);
    rs=pstmt.executeQuery();
    if (rs.next()) {
      networkLabel=rs.getString(1);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  return networkLabel;
}",0.9603960396039604
105266,"private void setupPhysicalNetworks(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  List<PreparedStatement> pstmt2Close=new ArrayList<PreparedStatement>();
  PreparedStatement pstmtUpdate=null;
  try {
    String xenPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenStorageLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwareGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt2Close.add(pstmt);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long zoneId=rs.getLong(1);
      Long domainId=rs.getLong(2);
      String networkType=rs.getString(3);
      String vnet=rs.getString(4);
      String zoneName=rs.getString(5);
      String removed=rs.getString(6);
      String uuid=UUID.randomUUID().toString();
      String updateUuid=""String_Node_Str"";
      pstmtUpdate=conn.prepareStatement(updateUuid);
      pstmtUpdate.setString(1,uuid);
      pstmtUpdate.setLong(2,zoneId);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      boolean crtPbNtwk=false;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt2Close.add(pstmt);
      pstmt.setLong(1,zoneId);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        crtPbNtwk=true;
      }
      PreparedStatement pstmt2=conn.prepareStatement(""String_Node_Str"");
      pstmt2Close.add(pstmt2);
      pstmt2.setLong(1,zoneId);
      ResultSet rsTags=pstmt2.executeQuery();
      if (rsTags.next()) {
        s_logger.debug(""String_Node_Str"");
        if (vnet != null) {
          PreparedStatement pstmt4=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
          pstmt2Close.add(pstmt4);
          pstmt4.setLong(1,zoneId);
          ResultSet rsVNet=pstmt4.executeQuery();
          if (rsVNet.next()) {
            String message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
            s_logger.error(message);
            throw new CloudRuntimeException(""String_Node_Str"");
          }
          rsVNet.close();
          pstmt4=conn.prepareStatement(""String_Node_Str"");
          pstmt2Close.add(pstmt4);
          pstmt4.setLong(1,zoneId);
          rsVNet=pstmt4.executeQuery();
          while (rsVNet.next()) {
            Long vnet_id=rsVNet.getLong(1);
            String vnetValue=rsVNet.getString(2);
            String reservationId=rsVNet.getString(3);
            PreparedStatement pstmt5=conn.prepareStatement(""String_Node_Str"");
            pstmt2Close.add(pstmt5);
            String uri=""String_Node_Str"" + vnetValue;
            pstmt5.setString(1,uri);
            ResultSet rsNic=pstmt5.executeQuery();
            Long nic_id=rsNic.getLong(1);
            Long instance_id=rsNic.getLong(2);
            if (rsNic.next()) {
              throw new CloudRuntimeException(""String_Node_Str"" + vnetValue + ""String_Node_Str""+ nic_id+ ""String_Node_Str""+ instance_id);
            }
            String freeVnet=""String_Node_Str"";
            pstmtUpdate=conn.prepareStatement(freeVnet);
            pstmtUpdate.setLong(1,vnet_id);
            pstmtUpdate.executeUpdate();
            pstmtUpdate.close();
          }
        }
        boolean isFirstPhysicalNtwk=true;
        do {
          String guestNetworkTag=rsTags.getString(1);
          long physicalNetworkId=addPhysicalNetworkToZone(conn,zoneId,zoneName,networkType,(isFirstPhysicalNtwk) ? vnet : null,domainId);
          if (isFirstPhysicalNtwk) {
            if (crtPbNtwk) {
              addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPublicLabel,kvmPublicLabel,vmwarePublicLabel);
            }
 else {
              s_logger.debug(""String_Node_Str"" + zoneId);
            }
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPrivateLabel,kvmPrivateLabel,vmwarePrivateLabel);
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenStorageLabel,null,null);
          }
          addTrafficType(conn,physicalNetworkId,""String_Node_Str"",guestNetworkTag,kvmGuestLabel,vmwareGuestLabel);
          addDefaultVRProvider(conn,physicalNetworkId,zoneId);
          addDefaultSGProvider(conn,physicalNetworkId,zoneId,networkType,false);
          PreparedStatement pstmt3=conn.prepareStatement(""String_Node_Str"" + guestNetworkTag + ""String_Node_Str"");
          ResultSet rsNet=pstmt3.executeQuery();
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          while (rsNet.next()) {
            Long networkId=rsNet.getLong(1);
            addPhysicalNtwk_To_Ntwk_IP_Vlan(conn,physicalNetworkId,networkId);
          }
          pstmt3.close();
          if (isFirstPhysicalNtwk) {
            s_logger.debug(""String_Node_Str"");
            pstmt3=conn.prepareStatement(""String_Node_Str"" + zoneId);
            ResultSet rsPubNet=pstmt3.executeQuery();
            if (rsPubNet.next()) {
              Long publicNetworkId=rsPubNet.getLong(1);
              addPhysicalNtwk_To_Ntwk_IP_Vlan(conn,physicalNetworkId,publicNetworkId);
            }
            pstmt3.close();
            s_logger.debug(""String_Node_Str"");
            String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
            pstmtUpdate=conn.prepareStatement(updateVnet);
            pstmtUpdate.executeUpdate();
            pstmtUpdate.close();
          }
          isFirstPhysicalNtwk=false;
        }
 while (rsTags.next());
        pstmt2.close();
      }
 else {
        long physicalNetworkId=addPhysicalNetworkToZone(conn,zoneId,zoneName,networkType,vnet,domainId);
        if (crtPbNtwk) {
          addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPublicLabel,kvmPublicLabel,vmwarePublicLabel);
        }
 else {
          s_logger.debug(""String_Node_Str"" + zoneId);
        }
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPrivateLabel,kvmPrivateLabel,vmwarePrivateLabel);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenStorageLabel,null,null);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenGuestLabel,kvmGuestLabel,vmwareGuestLabel);
        addDefaultVRProvider(conn,physicalNetworkId,zoneId);
        addDefaultSGProvider(conn,physicalNetworkId,zoneId,networkType,false);
        s_logger.debug(""String_Node_Str"");
        String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateVnet);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateVLAN=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateVLAN);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateUsrIp=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateUsrIp);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateNet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId+ ""String_Node_Str"";
        pstmtUpdate=conn.prepareStatement(updateNet);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        if (removed != null) {
          pstmtUpdate=conn.prepareStatement(""String_Node_Str"");
          pstmtUpdate.setLong(1,physicalNetworkId);
          pstmtUpdate.executeUpdate();
          pstmtUpdate.close();
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    TransactionLegacy.closePstmts(pstmt2Close);
  }
}","private void setupPhysicalNetworks(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  List<PreparedStatement> pstmt2Close=new ArrayList<PreparedStatement>();
  PreparedStatement pstmtUpdate=null;
  try {
    String xenPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenStorageLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwareGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt2Close.add(pstmt);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long zoneId=rs.getLong(1);
      Long domainId=rs.getLong(2);
      String networkType=rs.getString(3);
      String vnet=rs.getString(4);
      String zoneName=rs.getString(5);
      String removed=rs.getString(6);
      String uuid=UUID.randomUUID().toString();
      String updateUuid=""String_Node_Str"";
      pstmtUpdate=conn.prepareStatement(updateUuid);
      pstmtUpdate.setString(1,uuid);
      pstmtUpdate.setLong(2,zoneId);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      boolean crtPbNtwk=false;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt2Close.add(pstmt);
      pstmt.setLong(1,zoneId);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        crtPbNtwk=true;
      }
      PreparedStatement pstmt2=conn.prepareStatement(""String_Node_Str"");
      pstmt2Close.add(pstmt2);
      pstmt2.setLong(1,zoneId);
      ResultSet rsTags=pstmt2.executeQuery();
      if (rsTags.next()) {
        s_logger.debug(""String_Node_Str"");
        if (vnet != null) {
          PreparedStatement pstmt4=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
          pstmt2Close.add(pstmt4);
          pstmt4.setLong(1,zoneId);
          ResultSet rsVNet=pstmt4.executeQuery();
          if (rsVNet.next()) {
            String message=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
            s_logger.error(message);
            throw new CloudRuntimeException(""String_Node_Str"");
          }
          rsVNet.close();
          pstmt4=conn.prepareStatement(""String_Node_Str"");
          pstmt2Close.add(pstmt4);
          pstmt4.setLong(1,zoneId);
          rsVNet=pstmt4.executeQuery();
          while (rsVNet.next()) {
            Long vnet_id=rsVNet.getLong(1);
            String vnetValue=rsVNet.getString(2);
            String reservationId=rsVNet.getString(3);
            PreparedStatement pstmt5=conn.prepareStatement(""String_Node_Str"");
            pstmt2Close.add(pstmt5);
            String uri=""String_Node_Str"" + vnetValue;
            pstmt5.setString(1,uri);
            ResultSet rsNic=pstmt5.executeQuery();
            Long nic_id=rsNic.getLong(1);
            Long instance_id=rsNic.getLong(2);
            if (rsNic.next()) {
              throw new CloudRuntimeException(""String_Node_Str"" + vnetValue + ""String_Node_Str""+ nic_id+ ""String_Node_Str""+ instance_id);
            }
            String freeVnet=""String_Node_Str"";
            pstmtUpdate=conn.prepareStatement(freeVnet);
            pstmtUpdate.setLong(1,vnet_id);
            pstmtUpdate.executeUpdate();
            pstmtUpdate.close();
          }
        }
        boolean isFirstPhysicalNtwk=true;
        do {
          String guestNetworkTag=rsTags.getString(1);
          long physicalNetworkId=addPhysicalNetworkToZone(conn,zoneId,zoneName,networkType,(isFirstPhysicalNtwk) ? vnet : null,domainId);
          if (isFirstPhysicalNtwk) {
            if (crtPbNtwk) {
              addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPublicLabel,kvmPublicLabel,vmwarePublicLabel);
            }
 else {
              s_logger.debug(""String_Node_Str"" + zoneId);
            }
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPrivateLabel,kvmPrivateLabel,vmwarePrivateLabel);
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenStorageLabel,null,null);
          }
          addTrafficType(conn,physicalNetworkId,""String_Node_Str"",guestNetworkTag,kvmGuestLabel,vmwareGuestLabel);
          addDefaultVRProvider(conn,physicalNetworkId,zoneId);
          addDefaultSGProvider(conn,physicalNetworkId,zoneId,networkType,false);
          PreparedStatement pstmt3=conn.prepareStatement(""String_Node_Str"");
          pstmt3.setString(1,guestNetworkTag);
          ResultSet rsNet=pstmt3.executeQuery();
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          while (rsNet.next()) {
            Long networkId=rsNet.getLong(1);
            addPhysicalNtwk_To_Ntwk_IP_Vlan(conn,physicalNetworkId,networkId);
          }
          pstmt3.close();
          if (isFirstPhysicalNtwk) {
            s_logger.debug(""String_Node_Str"");
            pstmt3=conn.prepareStatement(""String_Node_Str"" + zoneId);
            ResultSet rsPubNet=pstmt3.executeQuery();
            if (rsPubNet.next()) {
              Long publicNetworkId=rsPubNet.getLong(1);
              addPhysicalNtwk_To_Ntwk_IP_Vlan(conn,physicalNetworkId,publicNetworkId);
            }
            pstmt3.close();
            s_logger.debug(""String_Node_Str"");
            String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
            pstmtUpdate=conn.prepareStatement(updateVnet);
            pstmtUpdate.executeUpdate();
            pstmtUpdate.close();
          }
          isFirstPhysicalNtwk=false;
        }
 while (rsTags.next());
        pstmt2.close();
      }
 else {
        long physicalNetworkId=addPhysicalNetworkToZone(conn,zoneId,zoneName,networkType,vnet,domainId);
        if (crtPbNtwk) {
          addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPublicLabel,kvmPublicLabel,vmwarePublicLabel);
        }
 else {
          s_logger.debug(""String_Node_Str"" + zoneId);
        }
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPrivateLabel,kvmPrivateLabel,vmwarePrivateLabel);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenStorageLabel,null,null);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenGuestLabel,kvmGuestLabel,vmwareGuestLabel);
        addDefaultVRProvider(conn,physicalNetworkId,zoneId);
        addDefaultSGProvider(conn,physicalNetworkId,zoneId,networkType,false);
        s_logger.debug(""String_Node_Str"");
        String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateVnet);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateVLAN=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateVLAN);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateUsrIp=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateUsrIp);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateNet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId+ ""String_Node_Str"";
        pstmtUpdate=conn.prepareStatement(updateNet);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        if (removed != null) {
          pstmtUpdate=conn.prepareStatement(""String_Node_Str"");
          pstmtUpdate.setLong(1,physicalNetworkId);
          pstmtUpdate.executeUpdate();
          pstmtUpdate.close();
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    TransactionLegacy.closePstmts(pstmt2Close);
  }
}",0.9968051118210862
105267,"@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  Map<String,String> configs=_configDao.getConfiguration(params);
  _invitationRequired=Boolean.valueOf(configs.get(Config.ProjectInviteRequired.key()));
  String value=configs.get(Config.ProjectInvitationExpirationTime.key());
  _invitationTimeOut=Long.valueOf(value != null ? value : ""String_Node_Str"") * 1000;
  _allowUserToCreateProject=Boolean.valueOf(configs.get(Config.AllowUserToCreateProject.key()));
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailInvite=new EmailInvite(smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return true;
}","@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  Map<String,String> configs=_configDao.getConfiguration(params);
  _invitationRequired=Boolean.valueOf(configs.get(Config.ProjectInviteRequired.key()));
  String value=configs.get(Config.ProjectInvitationExpirationTime.key());
  _invitationTimeOut=Long.parseLong(value != null ? value : ""String_Node_Str"") * 1000;
  _allowUserToCreateProject=Boolean.valueOf(configs.get(Config.AllowUserToCreateProject.key()));
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailInvite=new EmailInvite(smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return true;
}",0.993975903614458
105268,"private void encryptLdapConfigParams(Connection conn){
  PreparedStatement pstmt=null;
  String[][] ldapParams={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  String insertSql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    pstmt=conn.prepareStatement(insertSql);
    for (    String[] ldapParam : ldapParams) {
      String name=ldapParam[0];
      String value=ldapParam[1];
      String desc=ldapParam[2];
      String encryptedValue=DBEncryptionUtil.encrypt(value);
      pstmt.setString(1,name);
      pstmt.setBytes(2,encryptedValue.getBytes(""String_Node_Str""));
      pstmt.setString(3,desc);
      pstmt.executeUpdate();
    }
    pstmt.close();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet resultSet=pstmt.executeQuery();
    String hostname=null;
    String port;
    int portNumber=0;
    if (resultSet.next()) {
      hostname=DBEncryptionUtil.decrypt(resultSet.getString(1));
    }
    pstmt.close();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    resultSet=pstmt.executeQuery();
    if (resultSet.next()) {
      port=DBEncryptionUtil.decrypt(resultSet.getString(1));
      if (StringUtils.isNotBlank(port)) {
        portNumber=Integer.valueOf(port);
      }
    }
    pstmt.close();
    if (StringUtils.isNotBlank(hostname)) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setString(1,hostname);
      if (portNumber != 0) {
        pstmt.setInt(2,portNumber);
      }
 else {
        pstmt.setNull(2,Types.INTEGER);
      }
      pstmt.executeUpdate();
      pstmt.close();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  s_logger.debug(""String_Node_Str"");
}","private void encryptLdapConfigParams(Connection conn){
  PreparedStatement pstmt=null;
  String[][] ldapParams={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  String insertSql=""String_Node_Str"" + ""String_Node_Str"";
  try {
    pstmt=conn.prepareStatement(insertSql);
    for (    String[] ldapParam : ldapParams) {
      String name=ldapParam[0];
      String value=ldapParam[1];
      String desc=ldapParam[2];
      String encryptedValue=DBEncryptionUtil.encrypt(value);
      pstmt.setString(1,name);
      pstmt.setBytes(2,encryptedValue.getBytes(""String_Node_Str""));
      pstmt.setString(3,desc);
      pstmt.executeUpdate();
    }
    pstmt.close();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet resultSet=pstmt.executeQuery();
    String hostname=null;
    String port;
    int portNumber=0;
    if (resultSet.next()) {
      hostname=DBEncryptionUtil.decrypt(resultSet.getString(1));
    }
    pstmt.close();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    resultSet=pstmt.executeQuery();
    if (resultSet.next()) {
      port=DBEncryptionUtil.decrypt(resultSet.getString(1));
      if (StringUtils.isNotBlank(port)) {
        portNumber=Integer.parseInt(port);
      }
    }
    pstmt.close();
    if (StringUtils.isNotBlank(hostname)) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setString(1,hostname);
      if (portNumber != 0) {
        pstmt.setInt(2,portNumber);
      }
 else {
        pstmt.setNull(2,Types.INTEGER);
      }
      pstmt.executeUpdate();
      pstmt.close();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  s_logger.debug(""String_Node_Str"");
}",0.9966836170683177
105269,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_GUEST_VLAN_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public GuestVlan dedicateGuestVlanRange(DedicateGuestVlanRangeCmd cmd){
  String vlan=cmd.getVlan();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long projectId=cmd.getProjectId();
  int startVlan, endVlan;
  String updatedVlanRange=null;
  long guestVlanMapId=0;
  long guestVlanMapAccountId=0;
  long vlanOwnerId=0;
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (vlanOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
  }
  vlanOwnerId=vlanOwner.getAccountId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
 else   if (!physicalNetwork.getIsolationMethods().isEmpty() && !physicalNetwork.getIsolationMethods().contains(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  String[] vlanRange=vlan.split(""String_Node_Str"");
  if (vlanRange.length != 2) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlan + ""String_Node_Str"");
  }
  try {
    startVlan=Integer.parseInt(vlanRange[0]);
    endVlan=Integer.parseInt(vlanRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<Integer,Integer>> existingRanges=physicalNetwork.getVnet();
  Boolean exists=false;
  if (!existingRanges.isEmpty()) {
    for (int i=0; i < existingRanges.size(); i++) {
      int existingStartVlan=existingRanges.get(i).first();
      int existingEndVlan=existingRanges.get(i).second();
      if (startVlan <= endVlan && startVlan >= existingStartVlan && endVlan <= existingEndVlan) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan);
    }
  }
  for (int i=startVlan; i <= endVlan; i++) {
    List<DataCenterVnetVO> allocatedVlans=_datacneterVnet.listAllocatedVnetsInRange(physicalNetwork.getDataCenterId(),physicalNetwork.getId(),startVlan,endVlan);
    if (allocatedVlans != null && !allocatedVlans.isEmpty()) {
      for (      DataCenterVnetVO allocatedVlan : allocatedVlans) {
        if (allocatedVlan.getAccountId() != vlanOwner.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + allocatedVlan.getVnet() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
  List<AccountGuestVlanMapVO> guestVlanMaps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(physicalNetworkId);
  for (  AccountGuestVlanMapVO guestVlanMap : guestVlanMaps) {
    List<Integer> vlanTokens=getVlanFromRange(guestVlanMap.getGuestVlanRange());
    int dedicatedStartVlan=vlanTokens.get(0).intValue();
    int dedicatedEndVlan=vlanTokens.get(1).intValue();
    if ((startVlan < dedicatedStartVlan & endVlan >= dedicatedStartVlan) || (startVlan >= dedicatedStartVlan & startVlan <= dedicatedEndVlan)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + vlan);
    }
  }
  Collections.sort(guestVlanMaps,new Comparator<AccountGuestVlanMapVO>(){
    @Override public int compare(    AccountGuestVlanMapVO obj1,    AccountGuestVlanMapVO obj2){
      List<Integer> vlanTokens1=getVlanFromRange(obj1.getGuestVlanRange());
      List<Integer> vlanTokens2=getVlanFromRange(obj2.getGuestVlanRange());
      return vlanTokens1.get(0).compareTo(vlanTokens2.get(0));
    }
  }
);
  for (int i=0; i < guestVlanMaps.size(); i++) {
    guestVlanMapId=guestVlanMaps.get(i).getId();
    guestVlanMapAccountId=guestVlanMaps.get(i).getAccountId();
    List<Integer> vlanTokens1=getVlanFromRange(guestVlanMaps.get(i).getGuestVlanRange());
    if (endVlan == (vlanTokens1.get(0).intValue() - 1)) {
      if (guestVlanMapAccountId == vlanOwnerId) {
        updatedVlanRange=startVlan + ""String_Node_Str"" + vlanTokens1.get(1).intValue();
      }
      break;
    }
    if (startVlan == (vlanTokens1.get(1).intValue() + 1) & guestVlanMapAccountId == vlanOwnerId) {
      if (i != (guestVlanMaps.size() - 1)) {
        List<Integer> vlanTokens2=getVlanFromRange(guestVlanMaps.get(i + 1).getGuestVlanRange());
        if (endVlan == (vlanTokens2.get(0).intValue() - 1) & guestVlanMaps.get(i + 1).getAccountId() == vlanOwnerId) {
          _datacneterVnet.releaseDedicatedGuestVlans(guestVlanMaps.get(i + 1).getId());
          _accountGuestVlanMapDao.remove(guestVlanMaps.get(i + 1).getId());
          updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + vlanTokens2.get(1).intValue();
          break;
        }
      }
      updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + endVlan;
      break;
    }
  }
  AccountGuestVlanMapVO accountGuestVlanMapVO;
  if (updatedVlanRange != null) {
    accountGuestVlanMapVO=_accountGuestVlanMapDao.findById(guestVlanMapId);
    accountGuestVlanMapVO.setGuestVlanRange(updatedVlanRange);
    _accountGuestVlanMapDao.update(guestVlanMapId,accountGuestVlanMapVO);
  }
 else {
    accountGuestVlanMapVO=new AccountGuestVlanMapVO(vlanOwner.getAccountId(),physicalNetworkId);
    accountGuestVlanMapVO.setGuestVlanRange(startVlan + ""String_Node_Str"" + endVlan);
    _accountGuestVlanMapDao.persist(accountGuestVlanMapVO);
  }
  List<Integer> finaVlanTokens=getVlanFromRange(accountGuestVlanMapVO.getGuestVlanRange());
  for (int i=finaVlanTokens.get(0).intValue(); i <= finaVlanTokens.get(1).intValue(); i++) {
    List<DataCenterVnetVO> dataCenterVnet=_datacneterVnet.findVnet(physicalNetwork.getDataCenterId(),physicalNetworkId,((Integer)i).toString());
    dataCenterVnet.get(0).setAccountGuestVlanMapId(accountGuestVlanMapVO.getId());
    _datacneterVnet.update(dataCenterVnet.get(0).getId(),dataCenterVnet.get(0));
  }
  return accountGuestVlanMapVO;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_GUEST_VLAN_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public GuestVlan dedicateGuestVlanRange(DedicateGuestVlanRangeCmd cmd){
  String vlan=cmd.getVlan();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long projectId=cmd.getProjectId();
  int startVlan, endVlan;
  String updatedVlanRange=null;
  long guestVlanMapId=0;
  long guestVlanMapAccountId=0;
  long vlanOwnerId=0;
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (vlanOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
  }
  vlanOwnerId=vlanOwner.getAccountId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
 else   if (!physicalNetwork.getIsolationMethods().isEmpty() && !physicalNetwork.getIsolationMethods().contains(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  String[] vlanRange=vlan.split(""String_Node_Str"");
  if (vlanRange.length != 2) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlan + ""String_Node_Str"");
  }
  try {
    startVlan=Integer.parseInt(vlanRange[0]);
    endVlan=Integer.parseInt(vlanRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<Integer,Integer>> existingRanges=physicalNetwork.getVnet();
  Boolean exists=false;
  if (!existingRanges.isEmpty()) {
    for (int i=0; i < existingRanges.size(); i++) {
      int existingStartVlan=existingRanges.get(i).first();
      int existingEndVlan=existingRanges.get(i).second();
      if (startVlan <= endVlan && startVlan >= existingStartVlan && endVlan <= existingEndVlan) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan);
    }
  }
  for (int i=startVlan; i <= endVlan; i++) {
    List<DataCenterVnetVO> allocatedVlans=_datacneterVnet.listAllocatedVnetsInRange(physicalNetwork.getDataCenterId(),physicalNetwork.getId(),startVlan,endVlan);
    if (allocatedVlans != null && !allocatedVlans.isEmpty()) {
      for (      DataCenterVnetVO allocatedVlan : allocatedVlans) {
        if (allocatedVlan.getAccountId() != vlanOwner.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + allocatedVlan.getVnet() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
  List<AccountGuestVlanMapVO> guestVlanMaps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(physicalNetworkId);
  for (  AccountGuestVlanMapVO guestVlanMap : guestVlanMaps) {
    List<Integer> vlanTokens=getVlanFromRange(guestVlanMap.getGuestVlanRange());
    int dedicatedStartVlan=vlanTokens.get(0).intValue();
    int dedicatedEndVlan=vlanTokens.get(1).intValue();
    if ((startVlan < dedicatedStartVlan & endVlan >= dedicatedStartVlan) || (startVlan >= dedicatedStartVlan & startVlan <= dedicatedEndVlan)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + vlan);
    }
  }
  Collections.sort(guestVlanMaps,new Comparator<AccountGuestVlanMapVO>(){
    @Override public int compare(    AccountGuestVlanMapVO obj1,    AccountGuestVlanMapVO obj2){
      List<Integer> vlanTokens1=getVlanFromRange(obj1.getGuestVlanRange());
      List<Integer> vlanTokens2=getVlanFromRange(obj2.getGuestVlanRange());
      return vlanTokens1.get(0).compareTo(vlanTokens2.get(0));
    }
  }
);
  for (int i=0; i < guestVlanMaps.size(); i++) {
    guestVlanMapId=guestVlanMaps.get(i).getId();
    guestVlanMapAccountId=guestVlanMaps.get(i).getAccountId();
    List<Integer> vlanTokens1=getVlanFromRange(guestVlanMaps.get(i).getGuestVlanRange());
    if (endVlan == (vlanTokens1.get(0).intValue() - 1)) {
      if (guestVlanMapAccountId == vlanOwnerId) {
        updatedVlanRange=startVlan + ""String_Node_Str"" + vlanTokens1.get(1).intValue();
      }
      break;
    }
    if (startVlan == (vlanTokens1.get(1).intValue() + 1) & guestVlanMapAccountId == vlanOwnerId) {
      if (i != (guestVlanMaps.size() - 1)) {
        List<Integer> vlanTokens2=getVlanFromRange(guestVlanMaps.get(i + 1).getGuestVlanRange());
        if (endVlan == (vlanTokens2.get(0).intValue() - 1) & guestVlanMaps.get(i + 1).getAccountId() == vlanOwnerId) {
          _datacneterVnet.releaseDedicatedGuestVlans(guestVlanMaps.get(i + 1).getId());
          _accountGuestVlanMapDao.remove(guestVlanMaps.get(i + 1).getId());
          updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + vlanTokens2.get(1).intValue();
          break;
        }
      }
      updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + endVlan;
      break;
    }
  }
  AccountGuestVlanMapVO accountGuestVlanMapVO;
  if (updatedVlanRange != null) {
    accountGuestVlanMapVO=_accountGuestVlanMapDao.findById(guestVlanMapId);
    accountGuestVlanMapVO.setGuestVlanRange(updatedVlanRange);
    _accountGuestVlanMapDao.update(guestVlanMapId,accountGuestVlanMapVO);
  }
 else {
    accountGuestVlanMapVO=new AccountGuestVlanMapVO(vlanOwner.getAccountId(),physicalNetworkId);
    accountGuestVlanMapVO.setGuestVlanRange(startVlan + ""String_Node_Str"" + endVlan);
    _accountGuestVlanMapDao.persist(accountGuestVlanMapVO);
  }
  List<Integer> finaVlanTokens=getVlanFromRange(accountGuestVlanMapVO.getGuestVlanRange());
  for (int i=finaVlanTokens.get(0).intValue(); i <= finaVlanTokens.get(1).intValue(); i++) {
    List<DataCenterVnetVO> dataCenterVnet=_datacneterVnet.findVnet(physicalNetwork.getDataCenterId(),physicalNetworkId,Integer.toString(i));
    dataCenterVnet.get(0).setAccountGuestVlanMapId(accountGuestVlanMapVO.getId());
    _datacneterVnet.update(dataCenterVnet.get(0).getId(),dataCenterVnet.get(0));
  }
  return accountGuestVlanMapVO;
}",0.9984834698210494
105270,"public String generateVnetString(List<String> vnetList){
  Collections.sort(vnetList,new Comparator<String>(){
    @Override public int compare(    String s1,    String s2){
      return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));
    }
  }
);
  int i;
  String vnetRange=""String_Node_Str"";
  String startvnet=vnetList.get(0);
  String endvnet=""String_Node_Str"";
  for (i=0; i < vnetList.size() - 1; i++) {
    if (Integer.valueOf(vnetList.get(i + 1)) - Integer.valueOf(vnetList.get(i)) > 1) {
      endvnet=vnetList.get(i);
      vnetRange=vnetRange + startvnet + ""String_Node_Str""+ endvnet+ ""String_Node_Str"";
      startvnet=vnetList.get(i + 1);
    }
  }
  endvnet=vnetList.get(vnetList.size() - 1);
  vnetRange=vnetRange + startvnet + ""String_Node_Str""+ endvnet+ ""String_Node_Str"";
  vnetRange=vnetRange.substring(0,vnetRange.length() - 1);
  return vnetRange;
}","public String generateVnetString(List<String> vnetList){
  Collections.sort(vnetList,new Comparator<String>(){
    @Override public int compare(    String s1,    String s2){
      return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));
    }
  }
);
  int i;
  String vnetRange=""String_Node_Str"";
  String startvnet=vnetList.get(0);
  String endvnet=""String_Node_Str"";
  for (i=0; i < vnetList.size() - 1; i++) {
    if (Integer.parseInt(vnetList.get(i + 1)) - Integer.parseInt(vnetList.get(i)) > 1) {
      endvnet=vnetList.get(i);
      vnetRange=vnetRange + startvnet + ""String_Node_Str""+ endvnet+ ""String_Node_Str"";
      startvnet=vnetList.get(i + 1);
    }
  }
  endvnet=vnetList.get(vnetList.size() - 1);
  vnetRange=vnetRange + startvnet + ""String_Node_Str""+ endvnet+ ""String_Node_Str"";
  vnetRange=vnetRange.substring(0,vnetRange.length() - 1);
  return vnetRange;
}",0.9828767123287672
105271,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_CREATE,eventDescription=""String_Node_Str"") public Network createGuestNetwork(CreateNetworkCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, ResourceAllocationException {
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=null;
  if (cmd instanceof CreateNetworkCmdByAdmin) {
    vlanId=((CreateNetworkCmdByAdmin)cmd).getVlan();
  }
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Account caller=CallContext.current().getCallingAccount();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  Long vpcId=cmd.getVpcId();
  String startIPv6=cmd.getStartIpv6();
  String endIPv6=cmd.getEndIpv6();
  String ip6Gateway=cmd.getIp6Gateway();
  String ip6Cidr=cmd.getIp6Cidr();
  Boolean displayNetwork=cmd.getDisplayNetwork();
  Long aclId=cmd.getAclId();
  String isolatedPvlan=cmd.getIsolatedPvlan();
  NetworkOfferingVO ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  if (ntwkOff == null || ntwkOff.isSystemOnly()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    if (ntwkOff != null) {
      ex.addProxyObject(ntwkOff.getUuid(),""String_Node_Str"");
    }
    throw ex;
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  if (displayNetwork == null) {
    displayNetwork=true;
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
    ex.addProxyObject(zone.getUuid(),""String_Node_Str"");
    throw ex;
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Account + ""String_Node_Str""+ Network.GuestType.Isolated);
      }
    }
 else     if (ntwkOff.getGuestType() == GuestType.Shared) {
      if (!(aclType == ACLType.Domain || aclType == ACLType.Account)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Domain + ""String_Node_Str""+ ACLType.Account+ ""String_Node_Str""+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (ntwkOff.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (ntwkOff.getGuestType() == GuestType.Shared && !_accountMgr.isAdmin(caller.getId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared);
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getId())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (ntwkOff.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str""+ ACLType.Domain);
    }
    if (domainId != null) {
      if (ntwkOff.getTrafficType() != TrafficType.Guest || ntwkOff.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  boolean ipv4=true, ipv6=false;
  if (startIP != null) {
    ipv4=true;
  }
  if (startIPv6 != null) {
    ipv6=true;
  }
  if (gateway != null) {
    try {
      InetAddress gatewayAddress=InetAddress.getByName(gateway);
      if (gatewayAddress instanceof Inet6Address) {
        ipv6=true;
      }
 else {
        ipv4=true;
      }
    }
 catch (    UnknownHostException e) {
      s_logger.error(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String cidr=null;
  if (ipv4) {
    if (startIP != null) {
      if (!NetUtils.isValidIp(startIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (endIP == null) {
        endIP=startIP;
      }
 else       if (!NetUtils.isValidIp(endIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (startIP != null && endIP != null) {
      if (!(gateway != null && netmask != null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (gateway != null && netmask != null) {
      if (!NetUtils.isValidIp(gateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!NetUtils.isValidNetmask(netmask)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
    }
  }
  if (ipv6) {
    if (endIPv6 == null) {
      endIPv6=startIPv6;
    }
    _networkModel.checkIp6Parameters(startIPv6,endIPv6,ip6Gateway,ip6Cidr);
    if (zone.getNetworkType() != NetworkType.Advanced || ntwkOff.getGuestType() != Network.GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (isolatedPvlan != null && (zone.getNetworkType() != NetworkType.Advanced || ntwkOff.getGuestType() != Network.GuestType.Shared)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (isolatedPvlan != null && ipv6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isNormalUser(caller.getId()) && (ntwkOff.getTrafficType() != TrafficType.Guest || ntwkOff.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getId()) && (ntwkOff.getSpecifyVlan() || vlanId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (ipv4) {
    if (!_accountMgr.isRootAdmin(caller.getId()) && cidr != null) {
      String[] cidrPair=cidr.split(""String_Node_Str"");
      int cidrSize=Integer.valueOf(cidrPair[1]);
      if (cidrSize < _cidrLimit) {
        throw new InvalidParameterValueException(""String_Node_Str"" + _cidrLimit);
      }
    }
  }
  Collection<String> ntwkProviders=_networkMgr.finalizeServicesAndProvidersForNetwork(ntwkOff,physicalNetworkId).values();
  if (ipv6 && providersConfiguredForExternalNetworking(ntwkProviders)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (isolatedPvlan != null && providersConfiguredForExternalNetworking(ntwkProviders)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && providersConfiguredForExternalNetworking(ntwkProviders)) {
    if (ntwkOff.getGuestType() == GuestType.Shared && (zone.getNetworkType() == NetworkType.Advanced) && isSharedNetworkOfferingWithServices(networkOfferingId)) {
      checkSharedNetworkCidrOverlap(zoneId,pNtwk.getId(),cidr);
    }
 else {
      if (vpcId == null)       throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((ntwkOff.getGuestType() == Network.GuestType.Shared) || (ntwkOff.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))));
  if (!createVlan) {
    if (ipv6) {
      createVlan=true;
    }
  }
  if (createVlan && !ntwkOff.getSpecifyIpRanges()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ntwkOff.getUuid(),""String_Node_Str"");
    throw ex;
  }
  Network network=commitNetwork(networkOfferingId,gateway,startIP,endIP,netmask,networkDomain,vlanId,name,displayText,caller,physicalNetworkId,zoneId,domainId,isDomainSpecific,subdomainAccess,vpcId,startIPv6,endIPv6,ip6Gateway,ip6Cidr,displayNetwork,aclId,isolatedPvlan,ntwkOff,pNtwk,aclType,owner,cidr,createVlan);
  if (ntwkOff.getIsPersistent()) {
    try {
      if (network.getState() == Network.State.Setup) {
        s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        return network;
      }
      DeployDestination dest=new DeployDestination(zone,null,null,null);
      UserVO callerUser=_userDao.findById(CallContext.current().getCallingUserId());
      Journal journal=new Journal.LogJournal(""String_Node_Str"" + network,s_logger);
      ReservationContext context=new ReservationContextImpl(UUID.randomUUID().toString(),journal,callerUser,caller);
      s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
      Pair<? extends NetworkGuru,? extends Network> implementedNetwork=_networkMgr.implementNetwork(network.getId(),dest,context);
      if (implementedNetwork == null || implementedNetwork.first() == null) {
        s_logger.warn(""String_Node_Str"" + network);
      }
      network=implementedNetwork.second();
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
      CloudRuntimeException e=new CloudRuntimeException(""String_Node_Str"");
      e.addProxyObject(network.getUuid(),""String_Node_Str"");
      throw e;
    }
  }
  return network;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_CREATE,eventDescription=""String_Node_Str"") public Network createGuestNetwork(CreateNetworkCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, ResourceAllocationException {
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=null;
  if (cmd instanceof CreateNetworkCmdByAdmin) {
    vlanId=((CreateNetworkCmdByAdmin)cmd).getVlan();
  }
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Account caller=CallContext.current().getCallingAccount();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  Long vpcId=cmd.getVpcId();
  String startIPv6=cmd.getStartIpv6();
  String endIPv6=cmd.getEndIpv6();
  String ip6Gateway=cmd.getIp6Gateway();
  String ip6Cidr=cmd.getIp6Cidr();
  Boolean displayNetwork=cmd.getDisplayNetwork();
  Long aclId=cmd.getAclId();
  String isolatedPvlan=cmd.getIsolatedPvlan();
  NetworkOfferingVO ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  if (ntwkOff == null || ntwkOff.isSystemOnly()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    if (ntwkOff != null) {
      ex.addProxyObject(ntwkOff.getUuid(),""String_Node_Str"");
    }
    throw ex;
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  if (displayNetwork == null) {
    displayNetwork=true;
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    PermissionDeniedException ex=new PermissionDeniedException(""String_Node_Str"");
    ex.addProxyObject(zone.getUuid(),""String_Node_Str"");
    throw ex;
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Account + ""String_Node_Str""+ Network.GuestType.Isolated);
      }
    }
 else     if (ntwkOff.getGuestType() == GuestType.Shared) {
      if (!(aclType == ACLType.Domain || aclType == ACLType.Account)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Domain + ""String_Node_Str""+ ACLType.Account+ ""String_Node_Str""+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (ntwkOff.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (ntwkOff.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (ntwkOff.getGuestType() == GuestType.Shared && !_accountMgr.isAdmin(caller.getId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared);
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getId())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (ntwkOff.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str""+ ACLType.Domain);
    }
    if (domainId != null) {
      if (ntwkOff.getTrafficType() != TrafficType.Guest || ntwkOff.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  boolean ipv4=true, ipv6=false;
  if (startIP != null) {
    ipv4=true;
  }
  if (startIPv6 != null) {
    ipv6=true;
  }
  if (gateway != null) {
    try {
      InetAddress gatewayAddress=InetAddress.getByName(gateway);
      if (gatewayAddress instanceof Inet6Address) {
        ipv6=true;
      }
 else {
        ipv4=true;
      }
    }
 catch (    UnknownHostException e) {
      s_logger.error(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String cidr=null;
  if (ipv4) {
    if (startIP != null) {
      if (!NetUtils.isValidIp(startIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (endIP == null) {
        endIP=startIP;
      }
 else       if (!NetUtils.isValidIp(endIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (startIP != null && endIP != null) {
      if (!(gateway != null && netmask != null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (gateway != null && netmask != null) {
      if (!NetUtils.isValidIp(gateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!NetUtils.isValidNetmask(netmask)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
    }
  }
  if (ipv6) {
    if (endIPv6 == null) {
      endIPv6=startIPv6;
    }
    _networkModel.checkIp6Parameters(startIPv6,endIPv6,ip6Gateway,ip6Cidr);
    if (zone.getNetworkType() != NetworkType.Advanced || ntwkOff.getGuestType() != Network.GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (isolatedPvlan != null && (zone.getNetworkType() != NetworkType.Advanced || ntwkOff.getGuestType() != Network.GuestType.Shared)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (isolatedPvlan != null && ipv6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isNormalUser(caller.getId()) && (ntwkOff.getTrafficType() != TrafficType.Guest || ntwkOff.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getId()) && (ntwkOff.getSpecifyVlan() || vlanId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (ipv4) {
    if (!_accountMgr.isRootAdmin(caller.getId()) && cidr != null) {
      String[] cidrPair=cidr.split(""String_Node_Str"");
      int cidrSize=Integer.parseInt(cidrPair[1]);
      if (cidrSize < _cidrLimit) {
        throw new InvalidParameterValueException(""String_Node_Str"" + _cidrLimit);
      }
    }
  }
  Collection<String> ntwkProviders=_networkMgr.finalizeServicesAndProvidersForNetwork(ntwkOff,physicalNetworkId).values();
  if (ipv6 && providersConfiguredForExternalNetworking(ntwkProviders)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (isolatedPvlan != null && providersConfiguredForExternalNetworking(ntwkProviders)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && providersConfiguredForExternalNetworking(ntwkProviders)) {
    if (ntwkOff.getGuestType() == GuestType.Shared && (zone.getNetworkType() == NetworkType.Advanced) && isSharedNetworkOfferingWithServices(networkOfferingId)) {
      checkSharedNetworkCidrOverlap(zoneId,pNtwk.getId(),cidr);
    }
 else {
      if (vpcId == null)       throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((ntwkOff.getGuestType() == Network.GuestType.Shared) || (ntwkOff.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(ntwkOff.getId(),Service.SourceNat))));
  if (!createVlan) {
    if (ipv6) {
      createVlan=true;
    }
  }
  if (createVlan && !ntwkOff.getSpecifyIpRanges()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(ntwkOff.getUuid(),""String_Node_Str"");
    throw ex;
  }
  Network network=commitNetwork(networkOfferingId,gateway,startIP,endIP,netmask,networkDomain,vlanId,name,displayText,caller,physicalNetworkId,zoneId,domainId,isDomainSpecific,subdomainAccess,vpcId,startIPv6,endIPv6,ip6Gateway,ip6Cidr,displayNetwork,aclId,isolatedPvlan,ntwkOff,pNtwk,aclType,owner,cidr,createVlan);
  if (ntwkOff.getIsPersistent()) {
    try {
      if (network.getState() == Network.State.Setup) {
        s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        return network;
      }
      DeployDestination dest=new DeployDestination(zone,null,null,null);
      UserVO callerUser=_userDao.findById(CallContext.current().getCallingUserId());
      Journal journal=new Journal.LogJournal(""String_Node_Str"" + network,s_logger);
      ReservationContext context=new ReservationContextImpl(UUID.randomUUID().toString(),journal,callerUser,caller);
      s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
      Pair<? extends NetworkGuru,? extends Network> implementedNetwork=_networkMgr.implementNetwork(network.getId(),dest,context);
      if (implementedNetwork == null || implementedNetwork.first() == null) {
        s_logger.warn(""String_Node_Str"" + network);
      }
      network=implementedNetwork.second();
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
      CloudRuntimeException e=new CloudRuntimeException(""String_Node_Str"");
      e.addProxyObject(network.getUuid(),""String_Node_Str"");
      throw e;
    }
  }
  return network;
}",0.9993122105552752
105272,"public static int runSimpleBashScriptForExitValue(String command,int timeout){
  Script s=new Script(""String_Node_Str"",timeout);
  s.add(""String_Node_Str"");
  s.add(command);
  String result=s.execute(null);
  if (result == null || result.trim().isEmpty())   return -1;
 else {
    try {
      return Integer.valueOf(result.trim());
    }
 catch (    NumberFormatException e) {
      return -1;
    }
  }
}","public static int runSimpleBashScriptForExitValue(String command,int timeout){
  Script s=new Script(""String_Node_Str"",timeout);
  s.add(""String_Node_Str"");
  s.add(command);
  String result=s.execute(null);
  if (result == null || result.trim().isEmpty())   return -1;
 else {
    try {
      return Integer.parseInt(result.trim());
    }
 catch (    NumberFormatException e) {
      return -1;
    }
  }
}",0.981549815498155
105273,"@Override public void processConnect(Host host,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long hostId=host.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  String dataCenter=startup.getDataCenter();
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + startup.getPrivateIpAddress() + ""String_Node_Str""+ dataCenter);
  }
  dcId=dc.getId();
  HypervisorType hypervisorType=startup.getHypervisorType();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hypervisorType);
  }
  List<PhysicalNetworkSetupInfo> networkInfoList=new ArrayList<PhysicalNetworkSetupInfo>();
  List<PhysicalNetworkVO> physicalNtwkList=_physicalNetworkDao.listByZone(dcId);
  for (  PhysicalNetworkVO pNtwk : physicalNtwkList) {
    String publicName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Public,hypervisorType);
    String privateName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Management,hypervisorType);
    String guestName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Guest,hypervisorType);
    String storageName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Storage,hypervisorType);
    PhysicalNetworkSetupInfo info=new PhysicalNetworkSetupInfo();
    info.setPhysicalNetworkId(pNtwk.getId());
    info.setGuestNetworkName(guestName);
    info.setPrivateNetworkName(privateName);
    info.setPublicNetworkName(publicName);
    info.setStorageNetworkName(storageName);
    PhysicalNetworkTrafficTypeVO mgmtTraffic=_pNTrafficTypeDao.findBy(pNtwk.getId(),TrafficType.Management);
    if (mgmtTraffic != null) {
      String vlan=mgmtTraffic.getVlan();
      info.setMgmtVlan(vlan);
    }
    networkInfoList.add(info);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  CheckNetworkCommand nwCmd=new CheckNetworkCommand(networkInfoList);
  CheckNetworkAnswer answer=(CheckNetworkAnswer)_agentMgr.easySend(hostId,nwCmd);
  if (answer == null) {
    s_logger.warn(""String_Node_Str"" + host.getId());
    throw new ConnectionException(true,""String_Node_Str"" + host.getId());
  }
  if (!answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ ((answer != null) ? answer.getDetails() : ""String_Node_Str""));
    String msg=""String_Node_Str"" + answer.getDetails();
    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,host.getPodId(),msg,msg);
    throw new ConnectionException(true,msg);
  }
 else {
    if (answer.needReconnect()) {
      throw new ConnectionException(false,""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return;
  }
}","@Override public void processConnect(Host host,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long hostId=host.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  String dataCenter=startup.getDataCenter();
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + startup.getPrivateIpAddress() + ""String_Node_Str""+ dataCenter);
  }
  dcId=dc.getId();
  HypervisorType hypervisorType=startup.getHypervisorType();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hypervisorType);
  }
  List<PhysicalNetworkSetupInfo> networkInfoList=new ArrayList<PhysicalNetworkSetupInfo>();
  List<PhysicalNetworkVO> physicalNtwkList=_physicalNetworkDao.listByZone(dcId);
  for (  PhysicalNetworkVO pNtwk : physicalNtwkList) {
    String publicName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Public,hypervisorType);
    String privateName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Management,hypervisorType);
    String guestName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Guest,hypervisorType);
    String storageName=_pNTrafficTypeDao.getNetworkTag(pNtwk.getId(),TrafficType.Storage,hypervisorType);
    PhysicalNetworkSetupInfo info=new PhysicalNetworkSetupInfo();
    info.setPhysicalNetworkId(pNtwk.getId());
    info.setGuestNetworkName(guestName);
    info.setPrivateNetworkName(privateName);
    info.setPublicNetworkName(publicName);
    info.setStorageNetworkName(storageName);
    PhysicalNetworkTrafficTypeVO mgmtTraffic=_pNTrafficTypeDao.findBy(pNtwk.getId(),TrafficType.Management);
    if (mgmtTraffic != null) {
      String vlan=mgmtTraffic.getVlan();
      info.setMgmtVlan(vlan);
    }
    networkInfoList.add(info);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  CheckNetworkCommand nwCmd=new CheckNetworkCommand(networkInfoList);
  CheckNetworkAnswer answer=(CheckNetworkAnswer)_agentMgr.easySend(hostId,nwCmd);
  if (answer == null) {
    s_logger.warn(""String_Node_Str"" + host.getId());
    throw new ConnectionException(true,""String_Node_Str"" + host.getId());
  }
  if (!answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ answer.getDetails());
    String msg=""String_Node_Str"" + answer.getDetails();
    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,host.getPodId(),msg,msg);
    throw new ConnectionException(true,msg);
  }
 else {
    if (answer.needReconnect()) {
      throw new ConnectionException(false,""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return;
  }
}",0.9931288754818166
105274,"public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.error(""String_Node_Str"" + publicIp);
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        String privateIp=(String)rule[3];
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
 else {
          long instanceId=rs.getLong(1);
          s_logger.debug(""String_Node_Str"" + instanceId);
          s_logger.trace(""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setInt(2,ipAddressId);
          pstmt.setInt(3,Integer.valueOf(sourcePort.trim()));
          pstmt.setInt(4,Integer.valueOf(sourcePort.trim()));
          pstmt.setString(5,protocol);
          pstmt.setLong(6,accountId);
          pstmt.setLong(7,domainId);
          pstmt.setLong(8,networkId);
          pstmt.setString(9,UUID.randomUUID().toString());
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
          rs.close();
          pstmt.close();
          String privatePort=(String)rule[4];
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setLong(2,instanceId);
          pstmt.setString(3,privateIp);
          pstmt.setInt(4,Integer.valueOf(privatePort.trim()));
          pstmt.setInt(5,Integer.valueOf(privatePort.trim()));
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.error(""String_Node_Str"" + publicIp);
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        String privateIp=(String)rule[3];
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
 else {
          long instanceId=rs.getLong(1);
          s_logger.debug(""String_Node_Str"" + instanceId);
          s_logger.trace(""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setInt(2,ipAddressId);
          pstmt.setInt(3,Integer.parseInt(sourcePort.trim()));
          pstmt.setInt(4,Integer.parseInt(sourcePort.trim()));
          pstmt.setString(5,protocol);
          pstmt.setLong(6,accountId);
          pstmt.setLong(7,domainId);
          pstmt.setLong(8,networkId);
          pstmt.setString(9,UUID.randomUUID().toString());
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
          rs.close();
          pstmt.close();
          String privatePort=(String)rule[4];
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setLong(2,instanceId);
          pstmt.setString(3,privateIp);
          pstmt.setInt(4,Integer.valueOf(privatePort.trim()));
          pstmt.setInt(5,Integer.valueOf(privatePort.trim()));
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9951346091469347
105275,"public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.parseInt(sourcePort));
        pstmt.setInt(4,Integer.parseInt(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9958971553610504
105276,"@Override public ResourceLimitResponse createResourceLimitResponse(ResourceLimit limit){
  ResourceLimitResponse resourceLimitResponse=new ResourceLimitResponse();
  if (limit.getResourceOwnerType() == ResourceOwnerType.Domain) {
    populateDomain(resourceLimitResponse,limit.getOwnerId());
  }
 else   if (limit.getResourceOwnerType() == ResourceOwnerType.Account) {
    Account accountTemp=ApiDBUtils.findAccountById(limit.getOwnerId());
    populateAccount(resourceLimitResponse,limit.getOwnerId());
    populateDomain(resourceLimitResponse,accountTemp.getDomainId());
  }
  resourceLimitResponse.setResourceType(Integer.valueOf(limit.getType().getOrdinal()).toString());
  if ((limit.getType() == ResourceType.primary_storage || limit.getType() == ResourceType.secondary_storage) && limit.getMax() >= 0) {
    resourceLimitResponse.setMax((long)Math.ceil((double)limit.getMax() / ResourceType.bytesToGiB));
  }
 else {
    resourceLimitResponse.setMax(limit.getMax());
  }
  resourceLimitResponse.setObjectName(""String_Node_Str"");
  return resourceLimitResponse;
}","@Override public ResourceLimitResponse createResourceLimitResponse(ResourceLimit limit){
  ResourceLimitResponse resourceLimitResponse=new ResourceLimitResponse();
  if (limit.getResourceOwnerType() == ResourceOwnerType.Domain) {
    populateDomain(resourceLimitResponse,limit.getOwnerId());
  }
 else   if (limit.getResourceOwnerType() == ResourceOwnerType.Account) {
    Account accountTemp=ApiDBUtils.findAccountById(limit.getOwnerId());
    populateAccount(resourceLimitResponse,limit.getOwnerId());
    populateDomain(resourceLimitResponse,accountTemp.getDomainId());
  }
  resourceLimitResponse.setResourceType(Integer.toString(limit.getType().getOrdinal()));
  if ((limit.getType() == ResourceType.primary_storage || limit.getType() == ResourceType.secondary_storage) && limit.getMax() >= 0) {
    resourceLimitResponse.setMax((long)Math.ceil((double)limit.getMax() / ResourceType.bytesToGiB));
  }
 else {
    resourceLimitResponse.setMax(limit.getMax());
  }
  resourceLimitResponse.setObjectName(""String_Node_Str"");
  return resourceLimitResponse;
}",0.9689849624060152
105277,"@Override public ResourceCountResponse createResourceCountResponse(ResourceCount resourceCount){
  ResourceCountResponse resourceCountResponse=new ResourceCountResponse();
  if (resourceCount.getResourceOwnerType() == ResourceOwnerType.Account) {
    Account accountTemp=ApiDBUtils.findAccountById(resourceCount.getOwnerId());
    if (accountTemp != null) {
      populateAccount(resourceCountResponse,accountTemp.getId());
      populateDomain(resourceCountResponse,accountTemp.getDomainId());
    }
  }
 else   if (resourceCount.getResourceOwnerType() == ResourceOwnerType.Domain) {
    populateDomain(resourceCountResponse,resourceCount.getOwnerId());
  }
  resourceCountResponse.setResourceType(Integer.valueOf(resourceCount.getType().getOrdinal()).toString());
  resourceCountResponse.setResourceCount(resourceCount.getCount());
  resourceCountResponse.setObjectName(""String_Node_Str"");
  return resourceCountResponse;
}","@Override public ResourceCountResponse createResourceCountResponse(ResourceCount resourceCount){
  ResourceCountResponse resourceCountResponse=new ResourceCountResponse();
  if (resourceCount.getResourceOwnerType() == ResourceOwnerType.Account) {
    Account accountTemp=ApiDBUtils.findAccountById(resourceCount.getOwnerId());
    if (accountTemp != null) {
      populateAccount(resourceCountResponse,accountTemp.getId());
      populateDomain(resourceCountResponse,accountTemp.getDomainId());
    }
  }
 else   if (resourceCount.getResourceOwnerType() == ResourceOwnerType.Domain) {
    populateDomain(resourceCountResponse,resourceCount.getOwnerId());
  }
  resourceCountResponse.setResourceType(Integer.toString(resourceCount.getType().getOrdinal()));
  resourceCountResponse.setResourceCount(resourceCount.getCount());
  resourceCountResponse.setObjectName(""String_Node_Str"");
  return resourceCountResponse;
}",0.9858695652173912
105278,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _uuid=(String)params.get(""String_Node_Str"");
  try {
    _memCapacity=Long.parseLong((String)params.get(ApiConstants.MEMORY)) * 1024L * 1024L;
    _cpuCapacity=Long.parseLong((String)params.get(ApiConstants.CPU_SPEED));
    _cpuNum=Long.parseLong((String)params.get(ApiConstants.CPU_NUMBER));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format(""String_Node_Str"" + ""String_Node_Str"",params.get(ApiConstants.CPU_NUMBER),params.get(ApiConstants.MEMORY),params.get(ApiConstants.CPU_SPEED)));
  }
  _zone=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  hostId=(Long)params.get(""String_Node_Str"");
  _ip=(String)params.get(ApiConstants.PRIVATE_IP);
  _mac=(String)params.get(ApiConstants.HOST_MAC);
  _username=(String)params.get(ApiConstants.USERNAME);
  _password=(String)params.get(ApiConstants.PASSWORD);
  _vmName=(String)params.get(""String_Node_Str"");
  String echoScAgent=(String)params.get(BaremetalManager.EchoSecurityGroupAgent);
  vmDao=(VMInstanceDao)params.get(""String_Node_Str"");
  configDao=(ConfigurationDao)params.get(""String_Node_Str"");
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_cluster == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.equalsIgnoreCase(""String_Node_Str"")) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.split(""String_Node_Str"").length != 6) {
    throw new ConfigurationException(""String_Node_Str"" + _mac + ""String_Node_Str"");
  }
  if (_uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (echoScAgent != null) {
    _isEchoScAgent=Boolean.valueOf(echoScAgent);
  }
  String ipmiIface=""String_Node_Str"";
  try {
    ipmiIface=configDao.getValue(Config.BaremetalIpmiLanInterface.key());
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    ipmiRetryTimes=Integer.valueOf(configDao.getValue(Config.BaremetalIpmiRetryTimes.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    provisionDoneNotificationOn=Boolean.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()));
    isProvisionDoneNotificationTimeout=Integer.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationTimeout.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  String injectScript=""String_Node_Str"";
  String scriptPath=Script.findScript(""String_Node_Str"",injectScript);
  if (scriptPath == null) {
    throw new ConfigurationException(""String_Node_Str"" + scriptPath);
  }
  String pythonPath=""String_Node_Str"";
  _pingCommand=new Script2(pythonPath,s_logger);
  _pingCommand.add(scriptPath);
  _pingCommand.add(""String_Node_Str"");
  _pingCommand.add(""String_Node_Str"" + ipmiIface);
  _pingCommand.add(""String_Node_Str"" + _ip);
  _pingCommand.add(""String_Node_Str"" + _username);
  _pingCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand=new Script2(pythonPath,s_logger);
  _setPxeBootCommand.add(scriptPath);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setPxeBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setPxeBootCommand.add(""String_Node_Str"" + _ip);
  _setPxeBootCommand.add(""String_Node_Str"" + _username);
  _setPxeBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand=new Script2(pythonPath,s_logger);
  _setDiskBootCommand.add(scriptPath);
  _setDiskBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setDiskBootCommand.add(""String_Node_Str"" + _ip);
  _setDiskBootCommand.add(""String_Node_Str"" + _username);
  _setDiskBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setDiskBootCommand.add(""String_Node_Str"");
  _rebootCommand=new Script2(pythonPath,s_logger);
  _rebootCommand.add(scriptPath);
  _rebootCommand.add(""String_Node_Str"");
  _rebootCommand.add(""String_Node_Str"" + ipmiIface);
  _rebootCommand.add(""String_Node_Str"" + _ip);
  _rebootCommand.add(""String_Node_Str"" + _username);
  _rebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _getStatusCommand=new Script2(pythonPath,s_logger);
  _getStatusCommand.add(scriptPath);
  _getStatusCommand.add(""String_Node_Str"");
  _getStatusCommand.add(""String_Node_Str"" + ipmiIface);
  _getStatusCommand.add(""String_Node_Str"" + _ip);
  _getStatusCommand.add(""String_Node_Str"" + _username);
  _getStatusCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand=new Script2(pythonPath,s_logger);
  _powerOnCommand.add(scriptPath);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOnCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOnCommand.add(""String_Node_Str"" + _ip);
  _powerOnCommand.add(""String_Node_Str"" + _username);
  _powerOnCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOffCommand=new Script2(pythonPath,s_logger);
  _powerOffCommand.add(scriptPath);
  _powerOffCommand.add(""String_Node_Str"");
  _powerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOffCommand.add(""String_Node_Str"" + _ip);
  _powerOffCommand.add(""String_Node_Str"" + _username);
  _powerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand=new Script2(pythonPath,s_logger);
  _forcePowerOffCommand.add(scriptPath);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _forcePowerOffCommand.add(""String_Node_Str"" + _ip);
  _forcePowerOffCommand.add(""String_Node_Str"" + _username);
  _forcePowerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _bootOrRebootCommand=new Script2(pythonPath,s_logger);
  _bootOrRebootCommand.add(scriptPath);
  _bootOrRebootCommand.add(""String_Node_Str"");
  _bootOrRebootCommand.add(""String_Node_Str"" + ipmiIface);
  _bootOrRebootCommand.add(""String_Node_Str"" + _ip);
  _bootOrRebootCommand.add(""String_Node_Str"" + _username);
  _bootOrRebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _uuid=(String)params.get(""String_Node_Str"");
  try {
    _memCapacity=Long.parseLong((String)params.get(ApiConstants.MEMORY)) * 1024L * 1024L;
    _cpuCapacity=Long.parseLong((String)params.get(ApiConstants.CPU_SPEED));
    _cpuNum=Long.parseLong((String)params.get(ApiConstants.CPU_NUMBER));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(String.format(""String_Node_Str"" + ""String_Node_Str"",params.get(ApiConstants.CPU_NUMBER),params.get(ApiConstants.MEMORY),params.get(ApiConstants.CPU_SPEED)));
  }
  _zone=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  hostId=(Long)params.get(""String_Node_Str"");
  _ip=(String)params.get(ApiConstants.PRIVATE_IP);
  _mac=(String)params.get(ApiConstants.HOST_MAC);
  _username=(String)params.get(ApiConstants.USERNAME);
  _password=(String)params.get(ApiConstants.PASSWORD);
  _vmName=(String)params.get(""String_Node_Str"");
  String echoScAgent=(String)params.get(BaremetalManager.EchoSecurityGroupAgent);
  vmDao=(VMInstanceDao)params.get(""String_Node_Str"");
  configDao=(ConfigurationDao)params.get(""String_Node_Str"");
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_cluster == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.equalsIgnoreCase(""String_Node_Str"")) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_mac.split(""String_Node_Str"").length != 6) {
    throw new ConfigurationException(""String_Node_Str"" + _mac + ""String_Node_Str"");
  }
  if (_uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (echoScAgent != null) {
    _isEchoScAgent=Boolean.valueOf(echoScAgent);
  }
  String ipmiIface=""String_Node_Str"";
  try {
    ipmiIface=configDao.getValue(Config.BaremetalIpmiLanInterface.key());
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    ipmiRetryTimes=Integer.parseInt(configDao.getValue(Config.BaremetalIpmiRetryTimes.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  try {
    provisionDoneNotificationOn=Boolean.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationEnabled.key()));
    isProvisionDoneNotificationTimeout=Integer.valueOf(configDao.getValue(Config.BaremetalProvisionDoneNotificationTimeout.key()));
  }
 catch (  Exception e) {
    s_logger.debug(e.getMessage(),e);
  }
  String injectScript=""String_Node_Str"";
  String scriptPath=Script.findScript(""String_Node_Str"",injectScript);
  if (scriptPath == null) {
    throw new ConfigurationException(""String_Node_Str"" + scriptPath);
  }
  String pythonPath=""String_Node_Str"";
  _pingCommand=new Script2(pythonPath,s_logger);
  _pingCommand.add(scriptPath);
  _pingCommand.add(""String_Node_Str"");
  _pingCommand.add(""String_Node_Str"" + ipmiIface);
  _pingCommand.add(""String_Node_Str"" + _ip);
  _pingCommand.add(""String_Node_Str"" + _username);
  _pingCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand=new Script2(pythonPath,s_logger);
  _setPxeBootCommand.add(scriptPath);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setPxeBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setPxeBootCommand.add(""String_Node_Str"" + _ip);
  _setPxeBootCommand.add(""String_Node_Str"" + _username);
  _setPxeBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setPxeBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand=new Script2(pythonPath,s_logger);
  _setDiskBootCommand.add(scriptPath);
  _setDiskBootCommand.add(""String_Node_Str"");
  _setDiskBootCommand.add(""String_Node_Str"" + ipmiIface);
  _setDiskBootCommand.add(""String_Node_Str"" + _ip);
  _setDiskBootCommand.add(""String_Node_Str"" + _username);
  _setDiskBootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _setDiskBootCommand.add(""String_Node_Str"");
  _rebootCommand=new Script2(pythonPath,s_logger);
  _rebootCommand.add(scriptPath);
  _rebootCommand.add(""String_Node_Str"");
  _rebootCommand.add(""String_Node_Str"" + ipmiIface);
  _rebootCommand.add(""String_Node_Str"" + _ip);
  _rebootCommand.add(""String_Node_Str"" + _username);
  _rebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _getStatusCommand=new Script2(pythonPath,s_logger);
  _getStatusCommand.add(scriptPath);
  _getStatusCommand.add(""String_Node_Str"");
  _getStatusCommand.add(""String_Node_Str"" + ipmiIface);
  _getStatusCommand.add(""String_Node_Str"" + _ip);
  _getStatusCommand.add(""String_Node_Str"" + _username);
  _getStatusCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand=new Script2(pythonPath,s_logger);
  _powerOnCommand.add(scriptPath);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOnCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOnCommand.add(""String_Node_Str"" + _ip);
  _powerOnCommand.add(""String_Node_Str"" + _username);
  _powerOnCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOnCommand.add(""String_Node_Str"");
  _powerOffCommand=new Script2(pythonPath,s_logger);
  _powerOffCommand.add(scriptPath);
  _powerOffCommand.add(""String_Node_Str"");
  _powerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _powerOffCommand.add(""String_Node_Str"" + _ip);
  _powerOffCommand.add(""String_Node_Str"" + _username);
  _powerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _powerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand=new Script2(pythonPath,s_logger);
  _forcePowerOffCommand.add(scriptPath);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _forcePowerOffCommand.add(""String_Node_Str"" + ipmiIface);
  _forcePowerOffCommand.add(""String_Node_Str"" + _ip);
  _forcePowerOffCommand.add(""String_Node_Str"" + _username);
  _forcePowerOffCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  _forcePowerOffCommand.add(""String_Node_Str"");
  _bootOrRebootCommand=new Script2(pythonPath,s_logger);
  _bootOrRebootCommand.add(scriptPath);
  _bootOrRebootCommand.add(""String_Node_Str"");
  _bootOrRebootCommand.add(""String_Node_Str"" + ipmiIface);
  _bootOrRebootCommand.add(""String_Node_Str"" + _ip);
  _bootOrRebootCommand.add(""String_Node_Str"" + _username);
  _bootOrRebootCommand.add(""String_Node_Str"" + _password,ParamType.PASSWORD);
  return true;
}",0.998846774813562
105279,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void setFieldValue(final Field field,final BaseCmd cmdObj,final Object paramObj,final Parameter annotation) throws IllegalArgumentException, ParseException {
  try {
    field.setAccessible(true);
    final CommandType fieldType=annotation.type();
switch (fieldType) {
case BOOLEAN:
      field.set(cmdObj,Boolean.valueOf(paramObj.toString()));
    break;
case DATE:
  if (cmdObj instanceof ListEventsCmd || cmdObj instanceof DeleteEventsCmd || cmdObj instanceof ArchiveEventsCmd|| cmdObj instanceof ArchiveAlertsCmd|| cmdObj instanceof DeleteAlertsCmd|| cmdObj instanceof GetUsageRecordsCmd) {
    final boolean isObjInNewDateFormat=isObjInNewDateFormat(paramObj.toString());
    if (isObjInNewDateFormat) {
      final DateFormat newFormat=BaseCmd.NEW_INPUT_FORMAT;
synchronized (newFormat) {
        field.set(cmdObj,newFormat.parse(paramObj.toString()));
      }
    }
 else {
      final DateFormat format=BaseCmd.INPUT_FORMAT;
synchronized (format) {
        Date date=format.parse(paramObj.toString());
        if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,0,0,0);
        }
 else         if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,23,59,59);
        }
        field.set(cmdObj,date);
      }
    }
  }
 else {
    final DateFormat format=BaseCmd.INPUT_FORMAT;
synchronized (format) {
      format.setLenient(false);
      field.set(cmdObj,format.parse(paramObj.toString()));
    }
  }
break;
case FLOAT:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Float.valueOf(paramObj.toString()));
}
break;
case INTEGER:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Integer.valueOf(paramObj.toString()));
}
break;
case LIST:
final List listParam=new ArrayList();
final StringTokenizer st=new StringTokenizer(paramObj.toString(),""String_Node_Str"");
while (st.hasMoreTokens()) {
final String token=st.nextToken();
final CommandType listType=annotation.collectionType();
switch (listType) {
case INTEGER:
listParam.add(Integer.valueOf(token));
break;
case UUID:
if (token.isEmpty()) break;
final Long internalId=translateUuidToInternalId(token,annotation);
listParam.add(internalId);
break;
case LONG:
{
listParam.add(Long.valueOf(token));
}
break;
case SHORT:
listParam.add(Short.valueOf(token));
break;
case STRING:
listParam.add(token);
break;
}
}
field.set(cmdObj,listParam);
break;
case UUID:
final Long internalId=translateUuidToInternalId(paramObj.toString(),annotation);
field.set(cmdObj,internalId);
break;
case LONG:
field.set(cmdObj,Long.valueOf(paramObj.toString()));
break;
case SHORT:
field.set(cmdObj,Short.valueOf(paramObj.toString()));
break;
case STRING:
if ((paramObj != null)) {
if (paramObj.toString().length() > annotation.length()) {
s_logger.error(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
throw new InvalidParameterValueException(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
}
 else {
field.set(cmdObj,paramObj.toString());
}
}
break;
case TZDATE:
field.set(cmdObj,DateUtil.parseTZDateString(paramObj.toString()));
break;
case MAP:
default :
field.set(cmdObj,paramObj);
break;
}
}
 catch (final IllegalAccessException ex) {
s_logger.error(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void setFieldValue(final Field field,final BaseCmd cmdObj,final Object paramObj,final Parameter annotation) throws IllegalArgumentException, ParseException {
  try {
    field.setAccessible(true);
    final CommandType fieldType=annotation.type();
switch (fieldType) {
case BOOLEAN:
      field.set(cmdObj,Boolean.valueOf(paramObj.toString()));
    break;
case DATE:
  if (cmdObj instanceof ListEventsCmd || cmdObj instanceof DeleteEventsCmd || cmdObj instanceof ArchiveEventsCmd|| cmdObj instanceof ArchiveAlertsCmd|| cmdObj instanceof DeleteAlertsCmd|| cmdObj instanceof GetUsageRecordsCmd) {
    final boolean isObjInNewDateFormat=isObjInNewDateFormat(paramObj.toString());
    if (isObjInNewDateFormat) {
      final DateFormat newFormat=newInputFormat;
synchronized (newFormat) {
        field.set(cmdObj,newFormat.parse(paramObj.toString()));
      }
    }
 else {
      final DateFormat format=inputFormat;
synchronized (format) {
        Date date=format.parse(paramObj.toString());
        if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,0,0,0);
        }
 else         if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,23,59,59);
        }
        field.set(cmdObj,date);
      }
    }
  }
 else {
    final DateFormat format=inputFormat;
synchronized (format) {
      format.setLenient(false);
      field.set(cmdObj,format.parse(paramObj.toString()));
    }
  }
break;
case FLOAT:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Float.valueOf(paramObj.toString()));
}
break;
case INTEGER:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Integer.valueOf(paramObj.toString()));
}
break;
case LIST:
final List listParam=new ArrayList();
final StringTokenizer st=new StringTokenizer(paramObj.toString(),""String_Node_Str"");
while (st.hasMoreTokens()) {
final String token=st.nextToken();
final CommandType listType=annotation.collectionType();
switch (listType) {
case INTEGER:
listParam.add(Integer.valueOf(token));
break;
case UUID:
if (token.isEmpty()) break;
final Long internalId=translateUuidToInternalId(token,annotation);
listParam.add(internalId);
break;
case LONG:
{
listParam.add(Long.valueOf(token));
}
break;
case SHORT:
listParam.add(Short.valueOf(token));
break;
case STRING:
listParam.add(token);
break;
}
}
field.set(cmdObj,listParam);
break;
case UUID:
final Long internalId=translateUuidToInternalId(paramObj.toString(),annotation);
field.set(cmdObj,internalId);
break;
case LONG:
field.set(cmdObj,Long.valueOf(paramObj.toString()));
break;
case SHORT:
field.set(cmdObj,Short.valueOf(paramObj.toString()));
break;
case STRING:
if ((paramObj != null)) {
if (paramObj.toString().length() > annotation.length()) {
s_logger.error(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
throw new InvalidParameterValueException(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
}
 else {
field.set(cmdObj,paramObj.toString());
}
}
break;
case TZDATE:
field.set(cmdObj,DateUtil.parseTZDateString(paramObj.toString()));
break;
case MAP:
default :
field.set(cmdObj,paramObj);
break;
}
}
 catch (final IllegalAccessException ex) {
s_logger.error(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}",0.987053194483535
105280,"public void dispatch(final BaseCmd cmd,final Map<String,String> params,final boolean execute) throws Exception {
  standardDispatchChain.dispatch(new DispatchTask(cmd,params));
  final CallContext ctx=CallContext.current();
  ctx.setEventDisplayEnabled(cmd.isDisplay());
  if (cmd instanceof BaseAsyncCmd) {
    final BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmd;
    final String startEventId=params.get(ApiConstants.CTX_START_EVENT_ID);
    ctx.setStartEventId(Long.valueOf(startEventId));
    if (asyncCmd.getJob() != null && asyncCmd.getSyncObjId() != null && asyncCmd.getSyncObjType() != null) {
      Long queueSizeLimit=null;
      if (asyncCmd.getSyncObjType() != null && asyncCmd.getSyncObjType().equalsIgnoreCase(BaseAsyncCmd.snapshotHostSyncObject)) {
        queueSizeLimit=_createSnapshotQueueSizeLimit;
      }
 else {
        queueSizeLimit=1L;
      }
      if (queueSizeLimit != null) {
        if (!execute) {
          _asyncMgr.syncAsyncJobExecution((AsyncJob)asyncCmd.getJob(),asyncCmd.getSyncObjType(),asyncCmd.getSyncObjId().longValue(),queueSizeLimit);
          return;
        }
      }
 else {
        s_logger.trace(""String_Node_Str"");
      }
    }
  }
  if (cmd instanceof BaseAsyncCustomIdCmd) {
    ((BaseAsyncCustomIdCmd)cmd).checkUuid();
  }
 else   if (cmd instanceof BaseCustomIdCmd) {
    ((BaseCustomIdCmd)cmd).checkUuid();
  }
  cmd.execute();
}","public void dispatch(final BaseCmd cmd,final Map<String,String> params,final boolean execute) throws Exception {
  standardDispatchChain.dispatch(new DispatchTask(cmd,params));
  final CallContext ctx=CallContext.current();
  ctx.setEventDisplayEnabled(cmd.isDisplay());
  if (cmd instanceof BaseAsyncCmd) {
    final BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmd;
    final String startEventId=params.get(ApiConstants.CTX_START_EVENT_ID);
    ctx.setStartEventId(Long.parseLong(startEventId));
    if (asyncCmd.getJob() != null && asyncCmd.getSyncObjId() != null && asyncCmd.getSyncObjType() != null) {
      Long queueSizeLimit=null;
      if (asyncCmd.getSyncObjType() != null && asyncCmd.getSyncObjType().equalsIgnoreCase(BaseAsyncCmd.snapshotHostSyncObject)) {
        queueSizeLimit=_createSnapshotQueueSizeLimit;
      }
 else {
        queueSizeLimit=1L;
      }
      if (queueSizeLimit != null) {
        if (!execute) {
          _asyncMgr.syncAsyncJobExecution((AsyncJob)asyncCmd.getJob(),asyncCmd.getSyncObjType(),asyncCmd.getSyncObjId().longValue(),queueSizeLimit);
          return;
        }
      }
 else {
        s_logger.trace(""String_Node_Str"");
      }
    }
  }
  if (cmd instanceof BaseAsyncCustomIdCmd) {
    ((BaseAsyncCustomIdCmd)cmd).checkUuid();
  }
 else   if (cmd instanceof BaseCustomIdCmd) {
    ((BaseCustomIdCmd)cmd).checkUuid();
  }
  cmd.execute();
}",0.9942028985507246
105281,"protected AgentAttache getAttache(final Long hostId) throws AgentUnavailableException {
}","protected AgentAttache getAttache(final Long hostId) throws AgentUnavailableException {
  if (hostId == null) {
    return null;
  }
  AgentAttache agent=findAttache(hostId);
  if (agent == null) {
    s_logger.debug(""String_Node_Str"" + hostId);
    throw new AgentUnavailableException(""String_Node_Str"",hostId);
  }
  return agent;
}",0.4208037825059101
105282,"public long[] getNetworkStats(final Connection conn,final String privateIP){
  final String result=networkUsage(conn,privateIP,""String_Node_Str"",null);
  final long[] stats=new long[2];
  if (result != null) {
    final String[] splitResult=result.split(""String_Node_Str"");
    int i=0;
    while (i < splitResult.length - 1) {
      stats[0]+=new Long(splitResult[i++]).longValue();
      stats[1]+=new Long(splitResult[i++]).longValue();
    }
  }
  return stats;
}","public long[] getNetworkStats(final Connection conn,final String privateIP){
  final String result=networkUsage(conn,privateIP,""String_Node_Str"",null);
  final long[] stats=new long[2];
  if (result != null) {
    final String[] splitResult=result.split(""String_Node_Str"");
    int i=0;
    while (i < splitResult.length - 1) {
      stats[0]+=Long.parseLong(splitResult[i++]);
      stats[1]+=Long.parseLong(splitResult[i++]);
    }
  }
  return stats;
}",0.9067245119305856
105283,"/** 
 * @param cmd
 * @return
 */
private ExecutionResult prepareNetworkElementCommand(final SetupGuestNetworkCommand cmd){
  final Connection conn=getConnection();
  final NicTO nic=cmd.getNic();
  final String domrName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  try {
    final Set<VM> vms=VM.getByNameLabel(conn,domrName);
    if (vms == null || vms.isEmpty()) {
      return new ExecutionResult(false,""String_Node_Str"" + domrName);
    }
    final VM vm=vms.iterator().next();
    final String mac=nic.getMac();
    VIF domrVif=null;
    for (    final VIF vif : vm.getVIFs(conn)) {
      final String lmac=vif.getMAC(conn);
      if (lmac.equals(mac)) {
        domrVif=vif;
      }
    }
    if (domrVif == null) {
      return new ExecutionResult(false,""String_Node_Str"" + mac + ""String_Node_Str""+ domrName);
    }
    nic.setDeviceId(Integer.valueOf(domrVif.getDevice(conn)));
  }
 catch (  final Exception e) {
    final String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    return new ExecutionResult(false,msg);
  }
  return new ExecutionResult(true,null);
}","/** 
 * @param cmd
 * @return
 */
private ExecutionResult prepareNetworkElementCommand(final SetupGuestNetworkCommand cmd){
  final Connection conn=getConnection();
  final NicTO nic=cmd.getNic();
  final String domrName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  try {
    final Set<VM> vms=VM.getByNameLabel(conn,domrName);
    if (vms == null || vms.isEmpty()) {
      return new ExecutionResult(false,""String_Node_Str"" + domrName);
    }
    final VM vm=vms.iterator().next();
    final String mac=nic.getMac();
    VIF domrVif=null;
    for (    final VIF vif : vm.getVIFs(conn)) {
      final String lmac=vif.getMAC(conn);
      if (lmac.equals(mac)) {
        domrVif=vif;
      }
    }
    if (domrVif == null) {
      return new ExecutionResult(false,""String_Node_Str"" + mac + ""String_Node_Str""+ domrName);
    }
    nic.setDeviceId(Integer.parseInt(domrVif.getDevice(conn)));
  }
 catch (  final Exception e) {
    final String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    return new ExecutionResult(false,msg);
  }
  return new ExecutionResult(true,null);
}",0.9932157394843962
105284,"@Override public ManagementServerHostVO getPeer(String mgmtServerId){
  return _mshostDao.findByMsid(Long.valueOf(mgmtServerId));
}","@Override public ManagementServerHostVO getPeer(String mgmtServerId){
  return _mshostDao.findByMsid(Long.parseLong(mgmtServerId));
}",0.9545454545454546
105285,"@Override public void updateStoragePool(StoragePool storagePool,Map<String,String> details){
  String capacityBytes=details.get(PrimaryDataStoreLifeCycle.CAPACITY_BYTES);
  String capacityIops=details.get(PrimaryDataStoreLifeCycle.CAPACITY_IOPS);
  StoragePoolVO storagePoolVO=_storagePoolDao.findById(storagePool.getId());
  try {
    if (capacityBytes != null) {
      long usedBytes=_capacityMgr.getUsedBytes(storagePoolVO);
      if (Long.valueOf(capacityBytes) < usedBytes) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=ElastistorUtil.updateElastistorTsmStorage(capacityBytes,storagePool.getUuid());
      if (updateTsmStorageCmdResponse.getStorage().getId() != null) {
        _storagePoolDao.updateCapacityBytes(storagePool.getId(),Long.valueOf(capacityBytes));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmStorageCmdResponse.toString());
      }
    }
    if (capacityIops != null) {
      long usedIops=_capacityMgr.getUsedIops(storagePoolVO);
      if (Long.valueOf(capacityIops) < usedIops) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmCmdResponse updateTsmCmdResponse=ElastistorUtil.updateElastistorTsmIOPS(capacityIops,storagePool.getUuid());
      if (updateTsmCmdResponse.getTsm(0).getUuid() != null) {
        _storagePoolDao.updateCapacityIops(storagePool.getId(),Long.valueOf(capacityIops));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmCmdResponse.toString());
      }
    }
  }
 catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e);
  }
}","@Override public void updateStoragePool(StoragePool storagePool,Map<String,String> details){
  String capacityBytes=details.get(PrimaryDataStoreLifeCycle.CAPACITY_BYTES);
  String capacityIops=details.get(PrimaryDataStoreLifeCycle.CAPACITY_IOPS);
  StoragePoolVO storagePoolVO=_storagePoolDao.findById(storagePool.getId());
  try {
    if (capacityBytes != null) {
      long usedBytes=_capacityMgr.getUsedBytes(storagePoolVO);
      if (Long.parseLong(capacityBytes) < usedBytes) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmStorageCmdResponse updateTsmStorageCmdResponse=ElastistorUtil.updateElastistorTsmStorage(capacityBytes,storagePool.getUuid());
      if (updateTsmStorageCmdResponse.getStorage().getId() != null) {
        _storagePoolDao.updateCapacityBytes(storagePool.getId(),Long.valueOf(capacityBytes));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmStorageCmdResponse.toString());
      }
    }
    if (capacityIops != null) {
      long usedIops=_capacityMgr.getUsedIops(storagePoolVO);
      if (Long.valueOf(capacityIops) < usedIops) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      UpdateTsmCmdResponse updateTsmCmdResponse=ElastistorUtil.updateElastistorTsmIOPS(capacityIops,storagePool.getUuid());
      if (updateTsmCmdResponse.getTsm(0).getUuid() != null) {
        _storagePoolDao.updateCapacityIops(storagePool.getId(),Long.valueOf(capacityIops));
        s_logger.info(""String_Node_Str"");
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + updateTsmCmdResponse.toString());
      }
    }
  }
 catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e);
  }
}",0.567734682405846
105286,"@Override public boolean start(){
  try {
    syncBladeInterval=Integer.valueOf(configDao.getValue(Config.UCSSyncBladeInterval.key()));
  }
 catch (  NumberFormatException e) {
    syncBladeInterval=600;
  }
  syncBladesExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  syncBladesExecutor.scheduleAtFixedRate(new SyncBladesThread(),syncBladeInterval,syncBladeInterval,TimeUnit.SECONDS);
  return true;
}","@Override public boolean start(){
  try {
    syncBladeInterval=Integer.parseInt(configDao.getValue(Config.UCSSyncBladeInterval.key()));
  }
 catch (  NumberFormatException e) {
    syncBladeInterval=600;
  }
  syncBladesExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  syncBladesExecutor.scheduleAtFixedRate(new SyncBladesThread(),syncBladeInterval,syncBladeInterval,TimeUnit.SECONDS);
  return true;
}",0.9830890642615558
105287,"private String getConfigurationParameter(Connection conn,String category,String paramName){
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"" + category + ""String_Node_Str""+ paramName+ ""String_Node_Str"")){
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        return rs.getString(""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + paramName + ""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + paramName + ""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}","private String getConfigurationParameter(Connection conn,String category,String paramName){
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    pstmt.setString(1,category);
    pstmt.setString(2,paramName);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        return rs.getString(""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + paramName + ""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + paramName + ""String_Node_Str"",e);
  }
  return ""String_Node_Str"";
}",0.9086687306501549
105288,"private void setConfigurationParameter(Connection conn,String category,String paramName,String paramVal){
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"" + paramVal + ""String_Node_Str""+ paramName+ ""String_Node_Str"")){
    s_logger.debug(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramVal+ ""String_Node_Str""+ pstmt);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramVal+ ""String_Node_Str"",e);
  }
}","private void setConfigurationParameter(Connection conn,String category,String paramName,String paramVal){
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    pstmt.setString(1,paramVal);
    pstmt.setString(2,paramName);
    s_logger.debug(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramVal+ ""String_Node_Str""+ pstmt);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramVal+ ""String_Node_Str"",e);
  }
}",0.8895131086142322
105289,"private void upgradeVmwareLabels(Connection conn){
  String newLabel;
  String trafficType=null;
  String trafficTypeVswitchParam;
  String trafficTypeVswitchParamValue;
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    try (ResultSet rsParams=pstmt.executeQuery()){
      while (rsParams.next()) {
        trafficTypeVswitchParam=rsParams.getString(""String_Node_Str"");
        trafficTypeVswitchParamValue=rsParams.getString(""String_Node_Str"");
        if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
        try (PreparedStatement sel_pstmt=conn.prepareStatement(""String_Node_Str"" + trafficType + ""String_Node_Str"")){
          try (ResultSet rsLabel=sel_pstmt.executeQuery()){
            newLabel=getNewLabel(rsLabel,trafficTypeVswitchParamValue);
            try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"" + newLabel + ""String_Node_Str""+ trafficType+ ""String_Node_Str"")){
              s_logger.debug(""String_Node_Str"" + trafficType + ""String_Node_Str""+ pstmt);
              update_pstmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
          }
 catch (          SQLException e) {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void upgradeVmwareLabels(Connection conn){
  String newLabel;
  String trafficType=null;
  String trafficTypeVswitchParam;
  String trafficTypeVswitchParamValue;
  try (PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    try (ResultSet rsParams=pstmt.executeQuery()){
      while (rsParams.next()) {
        trafficTypeVswitchParam=rsParams.getString(""String_Node_Str"");
        trafficTypeVswitchParamValue=rsParams.getString(""String_Node_Str"");
        if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
 else         if (trafficTypeVswitchParam.equals(""String_Node_Str"")) {
          trafficType=""String_Node_Str"";
        }
        try (PreparedStatement sel_pstmt=conn.prepareStatement(""String_Node_Str"")){
          pstmt.setString(1,trafficType);
          try (ResultSet rsLabel=sel_pstmt.executeQuery()){
            newLabel=getNewLabel(rsLabel,trafficTypeVswitchParamValue);
            try (PreparedStatement update_pstmt=conn.prepareStatement(""String_Node_Str"" + newLabel + ""String_Node_Str""+ trafficType+ ""String_Node_Str"")){
              s_logger.debug(""String_Node_Str"" + trafficType + ""String_Node_Str""+ pstmt);
              update_pstmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
          }
 catch (          SQLException e) {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.98468606431853
105290,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  return details;
}",0.1920529801324503
105291,"private void postCreatePrivateTemplate(String installFullPath,long templateId,String templateName,long size,long virtualSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str"")));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateId);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}","private void postCreatePrivateTemplate(String installFullPath,long templateId,String templateName,long size,long virtualSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str""),""String_Node_Str""));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateId);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}",0.9924874791318864
105292,"private void writeMetaOvaForTemplate(String installFullPath,String ovfFilename,String vmdkFilename,String templateName,long diskSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str"" + templateName+ ""String_Node_Str"")));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + ovfFilename);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + vmdkFilename);
    out.newLine();
    out.write(""String_Node_Str"" + diskSize);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}","private void writeMetaOvaForTemplate(String installFullPath,String ovfFilename,String vmdkFilename,String templateName,long diskSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str"" + templateName+ ""String_Node_Str""),""String_Node_Str""));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + ovfFilename);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + vmdkFilename);
    out.newLine();
    out.write(""String_Node_Str"" + diskSize);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}",0.9888059701492538
105293,"public ServerTransportProvider(){
}","public ServerTransportProvider(){
  randomGenerator=new SecureRandom();
  _nextEndpointId=randomGenerator.nextInt();
}",0.457516339869281
105294,"public void parse(byte[] vmsdFileContent) throws IOException {
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmsdFileContent)));
    String line;
    while ((line=in.readLine()) != null) {
      s_logger.info(""String_Node_Str"" + line);
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length == 2) {
        String name=tokens[0].trim();
        String value=tokens[1].trim();
        if (value.charAt(0) == '\""')         value=value.substring(1,value.length() - 1);
        _properties.put(name,value);
      }
    }
  }
  finally {
    if (in != null)     in.close();
  }
}","public void parse(byte[] vmsdFileContent) throws IOException {
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmsdFileContent),""String_Node_Str""));
    String line;
    while ((line=in.readLine()) != null) {
      s_logger.info(""String_Node_Str"" + line);
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length == 2) {
        String name=tokens[0].trim();
        String value=tokens[1].trim();
        if (value.charAt(0) == '\""')         value=value.substring(1,value.length() - 1);
        _properties.put(name,value);
      }
    }
  }
  finally {
    if (in != null)     in.close();
  }
}",0.9864864864864864
105295,"public String[] listDatastoreDirContent(String urlString) throws Exception {
  List<String> fileList=new ArrayList<String>();
  String content=new String(getResourceContent(urlString));
  String marker=""String_Node_Str"";
  int parsePos=-1;
  do {
    parsePos=content.indexOf(marker,parsePos < 0 ? 0 : parsePos);
    if (parsePos > 0) {
      int beginPos=content.lastIndexOf('>',parsePos - 1);
      if (beginPos < 0)       beginPos=0;
      fileList.add((content.substring(beginPos + 1,parsePos)));
      parsePos+=marker.length();
    }
 else {
      break;
    }
  }
 while (parsePos > 0);
  return fileList.toArray(new String[0]);
}","public String[] listDatastoreDirContent(String urlString) throws Exception {
  List<String> fileList=new ArrayList<String>();
  String content=new String(getResourceContent(urlString),""String_Node_Str"");
  String marker=""String_Node_Str"";
  int parsePos=-1;
  do {
    parsePos=content.indexOf(marker,parsePos < 0 ? 0 : parsePos);
    if (parsePos > 0) {
      int beginPos=content.lastIndexOf('>',parsePos - 1);
      if (beginPos < 0)       beginPos=0;
      fileList.add((content.substring(beginPos + 1,parsePos)));
      parsePos+=marker.length();
    }
 else {
      break;
    }
  }
 while (parsePos > 0);
  return fileList.toArray(new String[0]);
}",0.9860681114551084
105296,"@Override public Answer execute(final CreatePrivateTemplateFromVolumeCommand command,final LibvirtComputingResource libvirtComputingResource){
  final String secondaryStorageURL=command.getSecondaryStorageUrl();
  KVMStoragePool secondaryStorage=null;
  KVMStoragePool primary=null;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  try {
    final String templateFolder=command.getAccountId() + File.separator + command.getTemplateId()+ File.separator;
    final String templateInstallFolder=""String_Node_Str"" + templateFolder;
    secondaryStorage=storagePoolMgr.getStoragePoolByURI(secondaryStorageURL);
    try {
      primary=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel());
    }
 catch (    final CloudRuntimeException e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        primary=storagePoolMgr.createStoragePool(command.getPool().getUuid(),command.getPool().getHost(),command.getPool().getPort(),command.getPool().getPath(),command.getPool().getUserInfo(),command.getPool().getType());
      }
 else {
        return new CreatePrivateTemplateAnswer(command,false,e.getMessage());
      }
    }
    final KVMPhysicalDisk disk=primary.getPhysicalDisk(command.getVolumePath());
    final String tmpltPath=secondaryStorage.getLocalPath() + File.separator + templateInstallFolder;
    final StorageLayer storage=libvirtComputingResource.getStorage();
    storage.mkdirs(tmpltPath);
    if (primary.getType() != StoragePoolType.RBD) {
      final String createTmplPath=libvirtComputingResource.createTmplPath();
      final int cmdsTimeout=libvirtComputingResource.getCmdsTimeout();
      final Script scriptCommand=new Script(createTmplPath,cmdsTimeout,s_logger);
      scriptCommand.add(""String_Node_Str"",disk.getPath());
      scriptCommand.add(""String_Node_Str"",tmpltPath);
      scriptCommand.add(""String_Node_Str"",command.getUniqueName() + ""String_Node_Str"");
      final String result=scriptCommand.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new CreatePrivateTemplateAnswer(command,false,result);
      }
    }
 else {
      s_logger.debug(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ command.getUniqueName());
      final QemuImgFile srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(),primary.getSourcePort(),primary.getAuthUserName(),primary.getAuthSecret(),disk.getPath()));
      srcFile.setFormat(PhysicalDiskFormat.RAW);
      final QemuImgFile destFile=new QemuImgFile(tmpltPath + ""String_Node_Str"" + command.getUniqueName()+ ""String_Node_Str"");
      destFile.setFormat(PhysicalDiskFormat.QCOW2);
      final QemuImg q=new QemuImg(0);
      try {
        q.convert(srcFile,destFile);
      }
 catch (      final QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      }
      final File templateProp=new File(tmpltPath + ""String_Node_Str"");
      if (!templateProp.exists()) {
        templateProp.createNewFile();
      }
      String templateContent=""String_Node_Str"" + command.getUniqueName() + ""String_Node_Str""+ System.getProperty(""String_Node_Str"");
      final DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      final Date date=new Date();
      templateContent+=""String_Node_Str"" + dateFormat.format(date) + System.getProperty(""String_Node_Str"");
      try (FileOutputStream templFo=new FileOutputStream(templateProp)){
        templFo.write(templateContent.getBytes());
        templFo.flush();
      }
 catch (      final IOException ex) {
        s_logger.error(""String_Node_Str"" + ex.getMessage());
      }
    }
    final Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,storage);
    final Processor qcow2Processor=new QCOW2Processor();
    qcow2Processor.configure(""String_Node_Str"",params);
    final FormatInfo info=qcow2Processor.process(tmpltPath,null,command.getUniqueName());
    final TemplateLocation loc=new TemplateLocation(storage,tmpltPath);
    loc.create(1,true,command.getUniqueName());
    loc.addFormat(info);
    loc.save();
    return new CreatePrivateTemplateAnswer(command,true,null,templateInstallFolder + command.getUniqueName() + ""String_Node_Str"",info.virtualSize,info.size,command.getUniqueName(),ImageFormat.QCOW2);
  }
 catch (  final InternalErrorException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
catch (  final IOException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
catch (  final ConfigurationException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
catch (  final CloudRuntimeException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
 finally {
    if (secondaryStorage != null) {
      storagePoolMgr.deleteStoragePool(secondaryStorage.getType(),secondaryStorage.getUuid());
    }
  }
}","@Override public Answer execute(final CreatePrivateTemplateFromVolumeCommand command,final LibvirtComputingResource libvirtComputingResource){
  final String secondaryStorageURL=command.getSecondaryStorageUrl();
  KVMStoragePool secondaryStorage=null;
  KVMStoragePool primary=null;
  final KVMStoragePoolManager storagePoolMgr=libvirtComputingResource.getStoragePoolMgr();
  try {
    final String templateFolder=command.getAccountId() + File.separator + command.getTemplateId()+ File.separator;
    final String templateInstallFolder=""String_Node_Str"" + templateFolder;
    secondaryStorage=storagePoolMgr.getStoragePoolByURI(secondaryStorageURL);
    try {
      primary=storagePoolMgr.getStoragePool(command.getPool().getType(),command.getPrimaryStoragePoolNameLabel());
    }
 catch (    final CloudRuntimeException e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        primary=storagePoolMgr.createStoragePool(command.getPool().getUuid(),command.getPool().getHost(),command.getPool().getPort(),command.getPool().getPath(),command.getPool().getUserInfo(),command.getPool().getType());
      }
 else {
        return new CreatePrivateTemplateAnswer(command,false,e.getMessage());
      }
    }
    final KVMPhysicalDisk disk=primary.getPhysicalDisk(command.getVolumePath());
    final String tmpltPath=secondaryStorage.getLocalPath() + File.separator + templateInstallFolder;
    final StorageLayer storage=libvirtComputingResource.getStorage();
    storage.mkdirs(tmpltPath);
    if (primary.getType() != StoragePoolType.RBD) {
      final String createTmplPath=libvirtComputingResource.createTmplPath();
      final int cmdsTimeout=libvirtComputingResource.getCmdsTimeout();
      final Script scriptCommand=new Script(createTmplPath,cmdsTimeout,s_logger);
      scriptCommand.add(""String_Node_Str"",disk.getPath());
      scriptCommand.add(""String_Node_Str"",tmpltPath);
      scriptCommand.add(""String_Node_Str"",command.getUniqueName() + ""String_Node_Str"");
      final String result=scriptCommand.execute();
      if (result != null) {
        s_logger.debug(""String_Node_Str"" + result);
        return new CreatePrivateTemplateAnswer(command,false,result);
      }
    }
 else {
      s_logger.debug(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ command.getUniqueName());
      final QemuImgFile srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(),primary.getSourcePort(),primary.getAuthUserName(),primary.getAuthSecret(),disk.getPath()));
      srcFile.setFormat(PhysicalDiskFormat.RAW);
      final QemuImgFile destFile=new QemuImgFile(tmpltPath + ""String_Node_Str"" + command.getUniqueName()+ ""String_Node_Str"");
      destFile.setFormat(PhysicalDiskFormat.QCOW2);
      final QemuImg q=new QemuImg(0);
      try {
        q.convert(srcFile,destFile);
      }
 catch (      final QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      }
      final File templateProp=new File(tmpltPath + ""String_Node_Str"");
      if (!templateProp.exists()) {
        templateProp.createNewFile();
      }
      String templateContent=""String_Node_Str"" + command.getUniqueName() + ""String_Node_Str""+ System.getProperty(""String_Node_Str"");
      final DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      final Date date=new Date();
      templateContent+=""String_Node_Str"" + dateFormat.format(date) + System.getProperty(""String_Node_Str"");
      try (FileOutputStream templFo=new FileOutputStream(templateProp)){
        templFo.write(templateContent.getBytes(""String_Node_Str""));
        templFo.flush();
      }
 catch (      final IOException ex) {
        s_logger.error(""String_Node_Str"" + ex.getMessage());
      }
    }
    final Map<String,Object> params=new HashMap<String,Object>();
    params.put(StorageLayer.InstanceConfigKey,storage);
    final Processor qcow2Processor=new QCOW2Processor();
    qcow2Processor.configure(""String_Node_Str"",params);
    final FormatInfo info=qcow2Processor.process(tmpltPath,null,command.getUniqueName());
    final TemplateLocation loc=new TemplateLocation(storage,tmpltPath);
    loc.create(1,true,command.getUniqueName());
    loc.addFormat(info);
    loc.save();
    return new CreatePrivateTemplateAnswer(command,true,null,templateInstallFolder + command.getUniqueName() + ""String_Node_Str"",info.virtualSize,info.size,command.getUniqueName(),ImageFormat.QCOW2);
  }
 catch (  final InternalErrorException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
catch (  final IOException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
catch (  final ConfigurationException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
catch (  final CloudRuntimeException e) {
    return new CreatePrivateTemplateAnswer(command,false,e.toString());
  }
 finally {
    if (secondaryStorage != null) {
      storagePoolMgr.deleteStoragePool(secondaryStorage.getType(),secondaryStorage.getUuid());
    }
  }
}",0.9983364321362168
105297,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  return details;
}",0.1920529801324503
105298,"public static byte[] composeDiskInfo(List<Ternary<String,String,String>> diskInfo,int disksInChain,boolean includeBase) throws IOException {
  BufferedWriter out=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    out=new BufferedWriter(new OutputStreamWriter(bos));
    out.write(""String_Node_Str"" + disksInChain);
    out.newLine();
    out.write(""String_Node_Str"" + diskInfo.size());
    out.newLine();
    out.write(""String_Node_Str"" + includeBase);
    out.newLine();
    int seq=disksInChain - 1;
    for (    Ternary<String,String,String> item : diskInfo) {
      out.write(String.format(""String_Node_Str"",seq,item.first()));
      out.newLine();
      out.write(String.format(""String_Node_Str"",seq,item.second()));
      out.newLine();
      if (item.third() != null) {
        out.write(String.format(""String_Node_Str"",seq,item.third()));
        out.newLine();
      }
      seq--;
    }
    out.newLine();
  }
  finally {
    if (out != null)     out.close();
  }
  return bos.toByteArray();
}","public static byte[] composeDiskInfo(List<Ternary<String,String,String>> diskInfo,int disksInChain,boolean includeBase) throws IOException {
  BufferedWriter out=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    out=new BufferedWriter(new OutputStreamWriter(bos,""String_Node_Str""));
    out.write(""String_Node_Str"" + disksInChain);
    out.newLine();
    out.write(""String_Node_Str"" + diskInfo.size());
    out.newLine();
    out.write(""String_Node_Str"" + includeBase);
    out.newLine();
    int seq=disksInChain - 1;
    for (    Ternary<String,String,String> item : diskInfo) {
      out.write(String.format(""String_Node_Str"",seq,item.first()));
      out.newLine();
      out.write(String.format(""String_Node_Str"",seq,item.second()));
      out.newLine();
      if (item.third() != null) {
        out.write(String.format(""String_Node_Str"",seq,item.third()));
        out.newLine();
      }
      seq--;
    }
    out.newLine();
  }
  finally {
    if (out != null)     out.close();
  }
  return bos.toByteArray();
}",0.9913127413127412
105299,"public static byte[] changeVmdkContentBaseInfo(byte[] vmdkContent,String baseFileName,String parentFileName) throws IOException {
  assert(vmdkContent != null);
  BufferedReader in=null;
  BufferedWriter out=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmdkContent)));
    out=new BufferedWriter(new OutputStreamWriter(bos));
    String line;
    while ((line=in.readLine()) != null) {
      line=line.trim();
      if (line.isEmpty()) {
        out.newLine();
        continue;
      }
      if (line.charAt(0) == '#') {
        out.write(line);
        out.newLine();
        continue;
      }
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length == 2) {
        String name=tokens[0].trim();
        String value=tokens[1].trim();
        if (value.charAt(0) == '\""')         value=value.substring(1,value.length() - 1);
        if (parentFileName != null && name.equals(""String_Node_Str"")) {
          out.write(name + ""String_Node_Str"" + parentFileName+ ""String_Node_Str"");
          out.newLine();
        }
 else {
          out.write(line);
          out.newLine();
        }
      }
 else {
        if (line.startsWith(""String_Node_Str"")) {
          if (baseFileName != null) {
            int startPos=line.indexOf('\""');
            int endPos=line.lastIndexOf('\""');
            assert(startPos > 0);
            assert(endPos > 0);
            out.write(line.substring(0,startPos + 1));
            out.write(baseFileName);
            out.write(line.substring(endPos));
            out.newLine();
          }
 else {
            out.write(line);
            out.newLine();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + line);
        }
      }
    }
  }
  finally {
    if (in != null)     in.close();
    if (out != null)     out.close();
  }
  return bos.toByteArray();
}","public static byte[] changeVmdkContentBaseInfo(byte[] vmdkContent,String baseFileName,String parentFileName) throws IOException {
  assert(vmdkContent != null);
  BufferedReader in=null;
  BufferedWriter out=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmdkContent),""String_Node_Str""));
    out=new BufferedWriter(new OutputStreamWriter(bos,""String_Node_Str""));
    String line;
    while ((line=in.readLine()) != null) {
      line=line.trim();
      if (line.isEmpty()) {
        out.newLine();
        continue;
      }
      if (line.charAt(0) == '#') {
        out.write(line);
        out.newLine();
        continue;
      }
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length == 2) {
        String name=tokens[0].trim();
        String value=tokens[1].trim();
        if (value.charAt(0) == '\""')         value=value.substring(1,value.length() - 1);
        if (parentFileName != null && name.equals(""String_Node_Str"")) {
          out.write(name + ""String_Node_Str"" + parentFileName+ ""String_Node_Str"");
          out.newLine();
        }
 else {
          out.write(line);
          out.newLine();
        }
      }
 else {
        if (line.startsWith(""String_Node_Str"")) {
          if (baseFileName != null) {
            int startPos=line.indexOf('\""');
            int endPos=line.lastIndexOf('\""');
            assert(startPos > 0);
            assert(endPos > 0);
            out.write(line.substring(0,startPos + 1));
            out.write(baseFileName);
            out.write(line.substring(endPos));
            out.newLine();
          }
 else {
            out.write(line);
            out.newLine();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + line);
        }
      }
    }
  }
  finally {
    if (in != null)     in.close();
    if (out != null)     out.close();
  }
  return bos.toByteArray();
}",0.9908022483392948
105300,"public void parse(byte[] vmdkFileContent) throws IOException {
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmdkFileContent)));
    String line;
    while ((line=in.readLine()) != null) {
      line=line.trim();
      if (line.isEmpty())       continue;
      if (line.charAt(0) == '#')       continue;
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length == 2) {
        String name=tokens[0].trim();
        String value=tokens[1].trim();
        if (value.charAt(0) == '\""')         value=value.substring(1,value.length() - 1);
        _properties.put(name,value);
      }
 else {
        if (line.startsWith(""String_Node_Str"")) {
          int startPos=line.indexOf('\""');
          int endPos=line.lastIndexOf('\""');
          assert(startPos > 0);
          assert(endPos > 0);
          _baseFileName=line.substring(startPos + 1,endPos);
        }
 else {
          s_logger.warn(""String_Node_Str"" + line);
        }
      }
    }
  }
  finally {
    if (in != null)     in.close();
  }
}","public void parse(byte[] vmdkFileContent) throws IOException {
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmdkFileContent),""String_Node_Str""));
    String line;
    while ((line=in.readLine()) != null) {
      line=line.trim();
      if (line.isEmpty())       continue;
      if (line.charAt(0) == '#')       continue;
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length == 2) {
        String name=tokens[0].trim();
        String value=tokens[1].trim();
        if (value.charAt(0) == '\""')         value=value.substring(1,value.length() - 1);
        _properties.put(name,value);
      }
 else {
        if (line.startsWith(""String_Node_Str"")) {
          int startPos=line.indexOf('\""');
          int endPos=line.lastIndexOf('\""');
          assert(startPos > 0);
          assert(endPos > 0);
          _baseFileName=line.substring(startPos + 1,endPos);
        }
 else {
          s_logger.warn(""String_Node_Str"" + line);
        }
      }
    }
  }
  finally {
    if (in != null)     in.close();
  }
}",0.9917431192660552
105301,"private static String getSecondaryDatastoreUUID(String storeUrl){
  return UUID.nameUUIDFromBytes(storeUrl.getBytes()).toString();
}","private static String getSecondaryDatastoreUUID(String storeUrl){
  String uuid=null;
  try {
    uuid=UUID.nameUUIDFromBytes(storeUrl.getBytes(""String_Node_Str"")).toString();
  }
 catch (  UnsupportedEncodingException e) {
    s_logger.warn(""String_Node_Str"" + storeUrl + ""String_Node_Str"");
  }
  return uuid;
}",0.5617977528089888
105302,"public static String readOvfContent(String ovfFilePath) throws IOException {
  StringBuffer strContent=new StringBuffer();
  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(ovfFilePath)));
  String lineStr;
  while ((lineStr=in.readLine()) != null) {
    strContent.append(lineStr);
  }
  in.close();
  return strContent.toString();
}","public static String readOvfContent(String ovfFilePath) throws IOException {
  StringBuffer strContent=new StringBuffer();
  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(ovfFilePath),""String_Node_Str""));
  String lineStr;
  while ((lineStr=in.readLine()) != null) {
    strContent.append(lineStr);
  }
  in.close();
  return strContent.toString();
}",0.9759358288770054
105303,"private UptimeStats getUptimeAndCpuIdleTime(){
  UptimeStats uptime=new UptimeStats(0d,0d);
  File f=new File(_uptimeFile);
  try (Scanner scanner=new Scanner(f)){
    String[] stats=scanner.useDelimiter(""String_Node_Str"").next().split(""String_Node_Str"");
    uptime=new UptimeStats(Double.parseDouble(stats[0]),Double.parseDouble(stats[1]));
  }
 catch (  FileNotFoundException ex) {
    s_logger.warn(""String_Node_Str"" + _uptimeFile + ""String_Node_Str""+ ex.toString());
  }
  return uptime;
}","private UptimeStats getUptimeAndCpuIdleTime(){
  UptimeStats uptime=new UptimeStats(0d,0d);
  File f=new File(_uptimeFile);
  try (Scanner scanner=new Scanner(f,""String_Node_Str"")){
    String[] stats=scanner.useDelimiter(""String_Node_Str"").next().split(""String_Node_Str"");
    uptime=new UptimeStats(Double.parseDouble(stats[0]),Double.parseDouble(stats[1]));
  }
 catch (  FileNotFoundException ex) {
    s_logger.warn(""String_Node_Str"" + _uptimeFile + ""String_Node_Str""+ ex.toString());
  }
  return uptime;
}",0.9821073558648112
105304,"private void verifyMinAndMaxIops(String minIops,String maxIops){
  if ((minIops != null && maxIops == null) || (minIops == null && maxIops != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMinIops;
  try {
    if (minIops != null) {
      lMinIops=Long.valueOf(minIops);
    }
 else {
      lMinIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMaxIops;
  try {
    if (maxIops != null) {
      lMaxIops=Long.valueOf(maxIops);
    }
 else {
      lMaxIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (lMinIops > lMaxIops) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
}","private void verifyMinAndMaxIops(String minIops,String maxIops){
  if ((minIops != null && maxIops == null) || (minIops == null && maxIops != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMinIops;
  try {
    if (minIops != null) {
      lMinIops=Long.parseLong(minIops);
    }
 else {
      lMinIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long lMaxIops;
  try {
    if (maxIops != null) {
      lMaxIops=Long.valueOf(maxIops);
    }
 else {
      lMaxIops=0;
    }
  }
 catch (  NumberFormatException ex) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (lMinIops > lMaxIops) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
}",0.6328320802005013
105305,"private String sendRequest(String service,String xmlRequest) throws ExecutionException {
  HttpClient client=new HttpClient();
  byte[] response=null;
  PostMethod method=new PostMethod(""String_Node_Str"" + service);
  method.setRequestBody(xmlRequest);
  try {
    org.apache.commons.httpclient.protocol.Protocol myhttps=new org.apache.commons.httpclient.protocol.Protocol(""String_Node_Str"",new EasySSLProtocolSocketFactory(),443);
    client.getHostConfiguration().setHost(_ip,443,myhttps);
    int statusCode=client.executeMethod(method);
    if (statusCode != HttpStatus.SC_OK) {
      throw new Exception(""String_Node_Str"" + statusCode);
    }
    response=method.getResponseBody();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    throw new ExecutionException(e.getMessage());
  }
  System.out.println(new String(response));
  return new String(response);
}","private String sendRequest(String service,String xmlRequest) throws ExecutionException {
  HttpClient client=new HttpClient();
  String response=null;
  PostMethod method=new PostMethod(""String_Node_Str"" + service);
  method.setRequestBody(xmlRequest);
  try {
    org.apache.commons.httpclient.protocol.Protocol myhttps=new org.apache.commons.httpclient.protocol.Protocol(""String_Node_Str"",new EasySSLProtocolSocketFactory(),443);
    client.getHostConfiguration().setHost(_ip,443,myhttps);
    int statusCode=client.executeMethod(method);
    if (statusCode != HttpStatus.SC_OK) {
      throw new Exception(""String_Node_Str"" + statusCode);
    }
    response=method.getResponseBodyAsString();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    throw new ExecutionException(e.getMessage());
  }
  System.out.println(response);
  return response;
}",0.9430523917995444
105306,"public void uploadResourceContent(String urlString,byte[] content) throws Exception {
  HttpURLConnection conn=getHTTPConnection(urlString,""String_Node_Str"");
  OutputStream out=conn.getOutputStream();
  out.write(content);
  out.flush();
  BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream()));
  String line;
  while ((line=in.readLine()) != null) {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + urlString + ""String_Node_Str""+ line);
  }
  out.close();
  in.close();
}","public void uploadResourceContent(String urlString,byte[] content) throws Exception {
  HttpURLConnection conn=getHTTPConnection(urlString,""String_Node_Str"");
  OutputStream out=conn.getOutputStream();
  out.write(content);
  out.flush();
  BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream(),conn.getContentEncoding()));
  String line;
  while ((line=in.readLine()) != null) {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + urlString + ""String_Node_Str""+ line);
  }
  out.close();
  in.close();
}",0.975925925925926
105307,"public void uploadFile(String urlString,File localFile) throws Exception {
  HttpURLConnection conn=getHTTPConnection(urlString,""String_Node_Str"");
  OutputStream out=null;
  InputStream in=null;
  BufferedReader br=null;
  try {
    out=conn.getOutputStream();
    in=new FileInputStream(localFile);
    byte[] buf=new byte[ChunkSize];
    int len=0;
    while ((len=in.read(buf)) > 0) {
      out.write(buf,0,len);
    }
    out.flush();
    br=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line=br.readLine()) != null) {
      if (s_logger.isTraceEnabled())       s_logger.trace(""String_Node_Str"" + urlString + ""String_Node_Str""+ line);
    }
  }
  finally {
    if (in != null)     in.close();
    if (out != null)     out.close();
    if (br != null)     br.close();
  }
}","public void uploadFile(String urlString,File localFile) throws Exception {
  HttpURLConnection conn=getHTTPConnection(urlString,""String_Node_Str"");
  OutputStream out=null;
  InputStream in=null;
  BufferedReader br=null;
  try {
    out=conn.getOutputStream();
    in=new FileInputStream(localFile);
    byte[] buf=new byte[ChunkSize];
    int len=0;
    while ((len=in.read(buf)) > 0) {
      out.write(buf,0,len);
    }
    out.flush();
    br=new BufferedReader(new InputStreamReader(conn.getInputStream(),conn.getContentEncoding()));
    String line;
    while ((line=br.readLine()) != null) {
      if (s_logger.isTraceEnabled())       s_logger.trace(""String_Node_Str"" + urlString + ""String_Node_Str""+ line);
    }
  }
  finally {
    if (in != null)     in.close();
    if (out != null)     out.close();
    if (br != null)     br.close();
  }
}",0.9845053635280095
105308,"public boolean createVmdataFiles(String vmName,List<String[]> vmDataList,String configDriveLabel){
  String isoPath=""String_Node_Str"" + vmName + ""String_Node_Str"";
  String configDriveName=""String_Node_Str"";
  try {
    deleteLocalFolder(""String_Node_Str"" + isoPath);
  }
 catch (  IOException e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
  if (vmDataList != null) {
    for (    String[] item : vmDataList) {
      String dataType=item[0];
      String fileName=item[1];
      String content=item[2];
      if (dataType != null && !dataType.isEmpty()) {
        String folder=isoPath + configDriveName + dataType;
        if (folder != null && !folder.isEmpty()) {
          File dir=new File(folder);
          boolean result=true;
          try {
            if (!dir.exists()) {
              dir.mkdirs();
            }
          }
 catch (          SecurityException ex) {
            s_logger.debug(""String_Node_Str"" + ex.getMessage());
            return false;
          }
          if (result && content != null && !content.isEmpty()) {
            try {
              File file=new File(folder + ""String_Node_Str"" + fileName+ ""String_Node_Str"");
              OutputStreamWriter fw=new OutputStreamWriter(new FileOutputStream(file.getAbsoluteFile()),""String_Node_Str"");
              BufferedWriter bw=new BufferedWriter(fw);
              bw.write(content);
              bw.close();
              s_logger.debug(""String_Node_Str"" + file + ""String_Node_Str""+ folder);
            }
 catch (            IOException ex) {
              s_logger.debug(""String_Node_Str"" + ex.getMessage());
              return false;
            }
          }
        }
      }
    }
    s_logger.debug(""String_Node_Str"" + isoPath);
  }
  String s=null;
  try {
    String cmd=""String_Node_Str"" + configDriveLabel + ""String_Node_Str""+ isoPath+ vmName+ ""String_Node_Str""+ isoPath;
    Process p=Runtime.getRuntime().exec(cmd);
    BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((s=stdInput.readLine()) != null) {
      s_logger.debug(s);
    }
    while ((s=stdError.readLine()) != null) {
      s_logger.debug(s);
    }
    s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ _host.getIp());
  }
 catch (  IOException e) {
    s_logger.debug(e.getMessage());
    return false;
  }
  return true;
}","public boolean createVmdataFiles(String vmName,List<String[]> vmDataList,String configDriveLabel){
  String isoPath=""String_Node_Str"" + vmName + ""String_Node_Str"";
  String configDriveName=""String_Node_Str"";
  try {
    deleteLocalFolder(""String_Node_Str"" + isoPath);
  }
 catch (  IOException e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
  if (vmDataList != null) {
    for (    String[] item : vmDataList) {
      String dataType=item[0];
      String fileName=item[1];
      String content=item[2];
      if (dataType != null && !dataType.isEmpty()) {
        String folder=isoPath + configDriveName + dataType;
        if (folder != null && !folder.isEmpty()) {
          File dir=new File(folder);
          boolean result=true;
          try {
            if (!dir.exists()) {
              dir.mkdirs();
            }
          }
 catch (          SecurityException ex) {
            s_logger.debug(""String_Node_Str"" + ex.getMessage());
            return false;
          }
          if (result && content != null && !content.isEmpty()) {
            try {
              File file=new File(folder + ""String_Node_Str"" + fileName+ ""String_Node_Str"");
              OutputStreamWriter fw=new OutputStreamWriter(new FileOutputStream(file.getAbsoluteFile()),""String_Node_Str"");
              BufferedWriter bw=new BufferedWriter(fw);
              bw.write(content);
              bw.close();
              s_logger.debug(""String_Node_Str"" + file + ""String_Node_Str""+ folder);
            }
 catch (            IOException ex) {
              s_logger.debug(""String_Node_Str"" + ex.getMessage());
              return false;
            }
          }
        }
      }
    }
    s_logger.debug(""String_Node_Str"" + isoPath);
  }
  String s=null;
  try {
    String cmd=""String_Node_Str"" + configDriveLabel + ""String_Node_Str""+ isoPath+ vmName+ ""String_Node_Str""+ isoPath;
    Process p=Runtime.getRuntime().exec(cmd);
    BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream(),Charset.defaultCharset()));
    BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream(),Charset.defaultCharset()));
    while ((s=stdInput.readLine()) != null) {
      s_logger.debug(s);
    }
    while ((s=stdError.readLine()) != null) {
      s_logger.debug(s);
    }
    s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ _host.getIp());
  }
 catch (  IOException e) {
    s_logger.debug(e.getMessage());
    return false;
  }
  return true;
}",0.9904761904761904
105309,"private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    try (FileReader fr=new FileReader(xmlFilePath);BufferedReader br=new BufferedReader(fr)){
      String xml=""String_Node_Str"";
      String line;
      while ((line=br.readLine()) != null) {
        xml+=line.trim();
      }
      return xml;
    }
 catch (    Exception e) {
      s_logger.debug(e);
      return null;
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}","private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    try (InputStreamReader fr=new InputStreamReader(new FileInputStream(xmlFilePath),""String_Node_Str"");BufferedReader br=new BufferedReader(fr)){
      String xml=""String_Node_Str"";
      String line;
      while ((line=br.readLine()) != null) {
        xml+=line.trim();
      }
      return xml;
    }
 catch (    Exception e) {
      s_logger.debug(e);
      return null;
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}",0.9141055949566588
105310,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI url,String username,String password,List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ url.getHost());
  if (podId == null) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  boolean failureInClusterDiscovery=true;
  String vsmIp=""String_Node_Str"";
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.VMware) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
  boolean legacyZone=_vmwareMgr.isLegacyZone(dcId);
  boolean usernameNotProvided=(username == null || username.isEmpty());
  boolean passwordNotProvided=(password == null || password.isEmpty());
  if (!legacyZone) {
    VmwareDatacenterVO vmwareDc=fetchVmwareDatacenterByZone(dcId);
    if (usernameNotProvided || passwordNotProvided) {
      s_logger.info(""String_Node_Str"" + ""String_Node_Str"");
      username=vmwareDc.getUser();
      password=vmwareDc.getPassword();
      clusterDetails.put(""String_Node_Str"",username);
      clusterDetails.put(""String_Node_Str"",password);
      _clusterDetailsDao.persist(clusterId,clusterDetails);
    }
    String updatedInventoryPath=validateCluster(url,vmwareDc);
    try {
      if (!URLDecoder.decode(url.getPath(),""String_Node_Str"").equals(updatedInventoryPath)) {
        clusterDetails.put(""String_Node_Str"",url.getScheme() + ""String_Node_Str"" + url.getHost()+ updatedInventoryPath);
        _clusterDetailsDao.persist(clusterId,clusterDetails);
      }
    }
 catch (    UnsupportedEncodingException e) {
      throw new DiscoveredWithErrorException(""String_Node_Str"" + url.getPath(),e);
    }
  }
 else {
    if (usernameNotProvided) {
      if (passwordNotProvided) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (passwordNotProvided) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(clusterId);
  if (hosts != null && hosts.size() > 0) {
    int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(hosts.get(0).getHypervisorType(),hosts.get(0).getHypervisorVersion());
    if (hosts.size() >= maxHostsPerCluster) {
      String msg=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ hosts.size()+ ""String_Node_Str""+ maxHostsPerCluster;
      s_logger.error(msg);
      throw new DiscoveredWithErrorException(msg);
    }
  }
  String privateTrafficLabel=null;
  String publicTrafficLabel=null;
  String guestTrafficLabel=null;
  Map<String,String> vsmCredentials=null;
  VirtualSwitchType defaultVirtualSwitchType=VirtualSwitchType.StandardVirtualSwitch;
  String paramGuestVswitchType=null;
  String paramGuestVswitchName=null;
  String paramPublicVswitchType=null;
  String paramPublicVswitchName=null;
  VmwareTrafficLabel guestTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Guest);
  VmwareTrafficLabel publicTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Public);
  DataCenterVO zone=_dcDao.findById(dcId);
  NetworkType zoneType=zone.getNetworkType();
  _readGlobalConfigParameters();
  if (useDVS) {
    paramGuestVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_GUEST_TRAFFIC);
    paramGuestVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_GUEST_TRAFFIC);
    paramPublicVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_PUBLIC_TRAFFIC);
    paramPublicVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_PUBLIC_TRAFFIC);
    defaultVirtualSwitchType=getDefaultVirtualSwitchType();
  }
  guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
  guestTrafficLabelObj=getTrafficInfo(TrafficType.Guest,guestTrafficLabel,defaultVirtualSwitchType,paramGuestVswitchType,paramGuestVswitchName,clusterId);
  if (zoneType == NetworkType.Advanced) {
    publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
    publicTrafficLabelObj=getTrafficInfo(TrafficType.Public,publicTrafficLabel,defaultVirtualSwitchType,paramPublicVswitchType,paramPublicVswitchName,clusterId);
    List<? extends PhysicalNetwork> pNetworkListGuestTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Guest);
    List<? extends PhysicalNetwork> pNetworkListPublicTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Public);
    PhysicalNetwork pNetworkPublic=pNetworkListPublicTraffic.get(0);
    if (pNetworkListGuestTraffic.contains(pNetworkPublic)) {
      if (publicTrafficLabelObj.getVirtualSwitchType() != guestTrafficLabelObj.getVirtualSwitchType()) {
        String msg=""String_Node_Str"" + pNetworkPublic + ""String_Node_Str""+ ""String_Node_Str"";
        s_logger.error(msg);
        throw new InvalidParameterValueException(msg);
      }
    }
  }
  privateTrafficLabel=_netmgr.getDefaultManagementTrafficLabel(dcId,HypervisorType.VMware);
  if (privateTrafficLabel != null) {
    s_logger.info(""String_Node_Str"" + privateTrafficLabel);
  }
  Pair<Boolean,Long> vsmInfo=new Pair<Boolean,Long>(false,0L);
  if (nexusDVS && (guestTrafficLabelObj.getVirtualSwitchType() == VirtualSwitchType.NexusDistributedVirtualSwitch) || ((zoneType == NetworkType.Advanced) && (publicTrafficLabelObj.getVirtualSwitchType() == VirtualSwitchType.NexusDistributedVirtualSwitch))) {
    if (zoneType != NetworkType.Basic) {
      publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
      if (publicTrafficLabel != null) {
        s_logger.info(""String_Node_Str"" + publicTrafficLabel);
      }
    }
    guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
    if (guestTrafficLabel != null) {
      s_logger.info(""String_Node_Str"" + guestTrafficLabel);
    }
    boolean clusterHasVsm=_vmwareMgr.hasNexusVSM(clusterId);
    if (!clusterHasVsm) {
      vsmIp=_urlParams.get(""String_Node_Str"");
      String vsmUser=_urlParams.get(""String_Node_Str"");
      String vsmPassword=_urlParams.get(""String_Node_Str"");
      String clusterName=cluster.getName();
      try {
        vsmInfo=_nexusElement.validateAndAddVsm(vsmIp,vsmUser,vsmPassword,clusterId,clusterName);
      }
 catch (      ResourceInUseException ex) {
        DiscoveryException discEx=new DiscoveryException(ex.getLocalizedMessage() + ""String_Node_Str"" + ex.getResourceName());
        throw discEx;
      }
    }
    vsmCredentials=_vmwareMgr.getNexusVSMCredentialsByClusterId(clusterId);
  }
  VmwareContext context=null;
  try {
    context=VmwareContextFactory.create(url.getHost(),username,password);
    if (privateTrafficLabel != null)     context.registerStockObject(""String_Node_Str"",privateTrafficLabel);
    if (nexusDVS) {
      if (vsmCredentials != null) {
        s_logger.info(""String_Node_Str"");
        context.registerStockObject(""String_Node_Str"",vsmCredentials);
      }
    }
    List<ManagedObjectReference> morHosts=_vmwareMgr.addHostToPodCluster(context,dcId,podId,clusterId,URLDecoder.decode(url.getPath(),""String_Node_Str""));
    if (morHosts == null)     s_logger.info(""String_Node_Str"");
    if (privateTrafficLabel != null)     context.uregisterStockObject(""String_Node_Str"");
    if (morHosts == null) {
      s_logger.error(""String_Node_Str"" + URLDecoder.decode(url.getPath(),""String_Node_Str""));
      return null;
    }
    ManagedObjectReference morCluster=null;
    clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    if (clusterDetails.get(""String_Node_Str"") != null) {
      URI uriFromCluster=new URI(UriUtils.encodeURIComponent(clusterDetails.get(""String_Node_Str"")));
      morCluster=context.getHostMorByPath(URLDecoder.decode(uriFromCluster.getPath(),""String_Node_Str""));
      if (morCluster == null || !morCluster.getType().equalsIgnoreCase(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"" + clusterDetails.get(""String_Node_Str""));
        return null;
      }
 else {
        ClusterMO clusterMo=new ClusterMO(context,morCluster);
        ClusterDasConfigInfo dasConfig=clusterMo.getDasConfig();
        if (dasConfig != null && dasConfig.isEnabled() != null && dasConfig.isEnabled().booleanValue()) {
          clusterDetails.put(""String_Node_Str"",""String_Node_Str"");
          _clusterDetailsDao.persist(clusterId,clusterDetails);
        }
      }
    }
    if (!validateDiscoveredHosts(context,morCluster,morHosts)) {
      if (morCluster == null)       s_logger.warn(""String_Node_Str"");
 else       s_logger.warn(""String_Node_Str"");
      return null;
    }
    Map<VmwareResource,Map<String,String>> resources=new HashMap<VmwareResource,Map<String,String>>();
    for (    ManagedObjectReference morHost : morHosts) {
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      HostMO hostMo=new HostMO(context,morHost);
      details.put(""String_Node_Str"",hostMo.getHostName());
      details.put(""String_Node_Str"",username);
      details.put(""String_Node_Str"",password);
      String guid=morHost.getType() + ""String_Node_Str"" + morHost.getValue()+ ""String_Node_Str""+ url.getHost();
      details.put(""String_Node_Str"",guid);
      params.put(""String_Node_Str"",hostMo.getHostName());
      params.put(""String_Node_Str"",username);
      params.put(""String_Node_Str"",password);
      params.put(""String_Node_Str"",Long.toString(dcId));
      params.put(""String_Node_Str"",Long.toString(podId));
      params.put(""String_Node_Str"",Long.toString(clusterId));
      params.put(""String_Node_Str"",guid);
      if (privateTrafficLabel != null) {
        params.put(""String_Node_Str"",privateTrafficLabel);
      }
      params.put(""String_Node_Str"",guestTrafficLabelObj);
      params.put(""String_Node_Str"",publicTrafficLabelObj);
      params.put(""String_Node_Str"",_configDao.getValue(Config.RouterAggregationCommandEachTimeout.toString()));
      VmwareResource resource=new VmwareResource();
      try {
        resource.configure(""String_Node_Str"",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + url.getHost(),""String_Node_Str"" + e.getMessage());
        s_logger.warn(""String_Node_Str"" + url.getHost(),e);
      }
      resource.start();
      resources.put(resource,details);
    }
    cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
    _clusterDao.update(clusterId,cluster);
    failureInClusterDiscovery=false;
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + url.getHost() + ""String_Node_Str""+ e);
    return null;
  }
 finally {
    if (context != null)     context.close();
    if (failureInClusterDiscovery && vsmInfo.first()) {
      try {
        s_logger.debug(""String_Node_Str"" + vsmIp + ""String_Node_Str"");
        _nexusElement.deleteCiscoNexusVSM(vsmInfo.second().longValue());
      }
 catch (      Exception e) {
      }
    }
  }
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI url,String username,String password,List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ url.getHost());
  if (podId == null) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  boolean failureInClusterDiscovery=true;
  String vsmIp=""String_Node_Str"";
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.VMware) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  Map<String,String> clusterDetails=_clusterDetailsDao.findDetails(clusterId);
  boolean legacyZone=_vmwareMgr.isLegacyZone(dcId);
  boolean usernameNotProvided=(username == null || username.isEmpty());
  boolean passwordNotProvided=(password == null || password.isEmpty());
  if (!legacyZone) {
    VmwareDatacenterVO vmwareDc=fetchVmwareDatacenterByZone(dcId);
    if (usernameNotProvided || passwordNotProvided) {
      s_logger.info(""String_Node_Str"" + ""String_Node_Str"");
      username=vmwareDc.getUser();
      password=vmwareDc.getPassword();
      clusterDetails.put(""String_Node_Str"",username);
      clusterDetails.put(""String_Node_Str"",password);
      _clusterDetailsDao.persist(clusterId,clusterDetails);
    }
    String updatedInventoryPath=validateCluster(url,vmwareDc);
    try {
      if (!URLDecoder.decode(url.getPath(),""String_Node_Str"").equals(updatedInventoryPath)) {
        clusterDetails.put(""String_Node_Str"",url.getScheme() + ""String_Node_Str"" + url.getHost()+ updatedInventoryPath);
        _clusterDetailsDao.persist(clusterId,clusterDetails);
      }
    }
 catch (    UnsupportedEncodingException e) {
      throw new DiscoveredWithErrorException(""String_Node_Str"" + url.getPath(),e);
    }
  }
 else {
    if (usernameNotProvided) {
      if (passwordNotProvided) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (passwordNotProvided) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<HostVO> hosts=_resourceMgr.listAllHostsInCluster(clusterId);
  if (hosts != null && hosts.size() > 0) {
    int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(hosts.get(0).getHypervisorType(),hosts.get(0).getHypervisorVersion());
    if (hosts.size() >= maxHostsPerCluster) {
      String msg=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ hosts.size()+ ""String_Node_Str""+ maxHostsPerCluster;
      s_logger.error(msg);
      throw new DiscoveredWithErrorException(msg);
    }
  }
  String privateTrafficLabel=null;
  String publicTrafficLabel=null;
  String guestTrafficLabel=null;
  Map<String,String> vsmCredentials=null;
  VirtualSwitchType defaultVirtualSwitchType=VirtualSwitchType.StandardVirtualSwitch;
  String paramGuestVswitchType=null;
  String paramGuestVswitchName=null;
  String paramPublicVswitchType=null;
  String paramPublicVswitchName=null;
  VmwareTrafficLabel guestTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Guest);
  VmwareTrafficLabel publicTrafficLabelObj=new VmwareTrafficLabel(TrafficType.Public);
  DataCenterVO zone=_dcDao.findById(dcId);
  NetworkType zoneType=zone.getNetworkType();
  _readGlobalConfigParameters();
  if (useDVS) {
    paramGuestVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_GUEST_TRAFFIC);
    paramGuestVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_GUEST_TRAFFIC);
    paramPublicVswitchType=_urlParams.get(ApiConstants.VSWITCH_TYPE_PUBLIC_TRAFFIC);
    paramPublicVswitchName=_urlParams.get(ApiConstants.VSWITCH_NAME_PUBLIC_TRAFFIC);
    defaultVirtualSwitchType=getDefaultVirtualSwitchType();
  }
  guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
  guestTrafficLabelObj=getTrafficInfo(TrafficType.Guest,guestTrafficLabel,defaultVirtualSwitchType,paramGuestVswitchType,paramGuestVswitchName,clusterId);
  if (zoneType == NetworkType.Advanced) {
    publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
    publicTrafficLabelObj=getTrafficInfo(TrafficType.Public,publicTrafficLabel,defaultVirtualSwitchType,paramPublicVswitchType,paramPublicVswitchName,clusterId);
    List<? extends PhysicalNetwork> pNetworkListGuestTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Guest);
    List<? extends PhysicalNetwork> pNetworkListPublicTraffic=_netmgr.getPhysicalNtwksSupportingTrafficType(dcId,TrafficType.Public);
    PhysicalNetwork pNetworkPublic=pNetworkListPublicTraffic.get(0);
    if (pNetworkListGuestTraffic.contains(pNetworkPublic)) {
      if (publicTrafficLabelObj.getVirtualSwitchType() != guestTrafficLabelObj.getVirtualSwitchType()) {
        String msg=""String_Node_Str"" + pNetworkPublic + ""String_Node_Str""+ ""String_Node_Str"";
        s_logger.error(msg);
        throw new InvalidParameterValueException(msg);
      }
    }
  }
  privateTrafficLabel=_netmgr.getDefaultManagementTrafficLabel(dcId,HypervisorType.VMware);
  if (privateTrafficLabel != null) {
    s_logger.info(""String_Node_Str"" + privateTrafficLabel);
  }
  Pair<Boolean,Long> vsmInfo=new Pair<Boolean,Long>(false,0L);
  if (nexusDVS && (guestTrafficLabelObj.getVirtualSwitchType() == VirtualSwitchType.NexusDistributedVirtualSwitch) || ((zoneType == NetworkType.Advanced) && (publicTrafficLabelObj.getVirtualSwitchType() == VirtualSwitchType.NexusDistributedVirtualSwitch))) {
    if (zoneType != NetworkType.Basic) {
      publicTrafficLabel=_netmgr.getDefaultPublicTrafficLabel(dcId,HypervisorType.VMware);
      if (publicTrafficLabel != null) {
        s_logger.info(""String_Node_Str"" + publicTrafficLabel);
      }
    }
    guestTrafficLabel=_netmgr.getDefaultGuestTrafficLabel(dcId,HypervisorType.VMware);
    if (guestTrafficLabel != null) {
      s_logger.info(""String_Node_Str"" + guestTrafficLabel);
    }
    boolean clusterHasVsm=_vmwareMgr.hasNexusVSM(clusterId);
    if (!clusterHasVsm) {
      vsmIp=_urlParams.get(""String_Node_Str"");
      String vsmUser=_urlParams.get(""String_Node_Str"");
      String vsmPassword=_urlParams.get(""String_Node_Str"");
      String clusterName=cluster.getName();
      try {
        vsmInfo=_nexusElement.validateAndAddVsm(vsmIp,vsmUser,vsmPassword,clusterId,clusterName);
      }
 catch (      ResourceInUseException ex) {
        DiscoveryException discEx=new DiscoveryException(ex.getLocalizedMessage() + ""String_Node_Str"" + ex.getResourceName());
        throw discEx;
      }
    }
    vsmCredentials=_vmwareMgr.getNexusVSMCredentialsByClusterId(clusterId);
  }
  VmwareContext context=null;
  try {
    context=VmwareContextFactory.create(url.getHost(),username,password);
    if (privateTrafficLabel != null)     context.registerStockObject(""String_Node_Str"",privateTrafficLabel);
    if (nexusDVS) {
      if (vsmCredentials != null) {
        s_logger.info(""String_Node_Str"");
        context.registerStockObject(""String_Node_Str"",vsmCredentials);
      }
    }
    List<ManagedObjectReference> morHosts=_vmwareMgr.addHostToPodCluster(context,dcId,podId,clusterId,URLDecoder.decode(url.getPath(),""String_Node_Str""));
    if (morHosts == null)     s_logger.info(""String_Node_Str"");
    if (privateTrafficLabel != null)     context.uregisterStockObject(""String_Node_Str"");
    if (morHosts == null) {
      s_logger.error(""String_Node_Str"" + URLDecoder.decode(url.getPath(),""String_Node_Str""));
      return null;
    }
    ManagedObjectReference morCluster=null;
    clusterDetails=_clusterDetailsDao.findDetails(clusterId);
    if (clusterDetails.get(""String_Node_Str"") != null) {
      URI uriFromCluster=new URI(UriUtils.encodeURIComponent(clusterDetails.get(""String_Node_Str"")));
      morCluster=context.getHostMorByPath(URLDecoder.decode(uriFromCluster.getPath(),""String_Node_Str""));
      if (morCluster == null || !morCluster.getType().equalsIgnoreCase(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"" + clusterDetails.get(""String_Node_Str""));
        return null;
      }
 else {
        ClusterMO clusterMo=new ClusterMO(context,morCluster);
        ClusterDasConfigInfo dasConfig=clusterMo.getDasConfig();
        if (dasConfig != null && dasConfig.isEnabled() != null && dasConfig.isEnabled().booleanValue()) {
          clusterDetails.put(""String_Node_Str"",""String_Node_Str"");
          _clusterDetailsDao.persist(clusterId,clusterDetails);
        }
      }
    }
    if (!validateDiscoveredHosts(context,morCluster,morHosts)) {
      if (morCluster == null)       s_logger.warn(""String_Node_Str"");
 else       s_logger.warn(""String_Node_Str"");
      return null;
    }
    Map<VmwareResource,Map<String,String>> resources=new HashMap<VmwareResource,Map<String,String>>();
    for (    ManagedObjectReference morHost : morHosts) {
      Map<String,String> details=new HashMap<String,String>();
      Map<String,Object> params=new HashMap<String,Object>();
      HostMO hostMo=new HostMO(context,morHost);
      details.put(""String_Node_Str"",hostMo.getHostName());
      details.put(""String_Node_Str"",username);
      details.put(""String_Node_Str"",password);
      String guid=morHost.getType() + ""String_Node_Str"" + morHost.getValue()+ ""String_Node_Str""+ url.getHost();
      details.put(""String_Node_Str"",guid);
      params.put(""String_Node_Str"",hostMo.getHostName());
      params.put(""String_Node_Str"",username);
      params.put(""String_Node_Str"",password);
      params.put(""String_Node_Str"",Long.toString(dcId));
      params.put(""String_Node_Str"",Long.toString(podId));
      params.put(""String_Node_Str"",Long.toString(clusterId));
      params.put(""String_Node_Str"",guid);
      if (privateTrafficLabel != null) {
        params.put(""String_Node_Str"",privateTrafficLabel);
      }
      params.put(""String_Node_Str"",guestTrafficLabelObj);
      params.put(""String_Node_Str"",publicTrafficLabelObj);
      params.put(""String_Node_Str"",_configDao.getValue(Config.RouterAggregationCommandEachTimeout.toString()));
      VmwareResource resource=new VmwareResource();
      try {
        resource.configure(""String_Node_Str"",params);
      }
 catch (      ConfigurationException e) {
        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + url.getHost(),""String_Node_Str"" + e.getMessage());
        s_logger.warn(""String_Node_Str"" + url.getHost(),e);
      }
      resource.start();
      resources.put(resource,details);
    }
    try {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes(""String_Node_Str"")).toString());
    }
 catch (    UnsupportedEncodingException e) {
      throw new DiscoveredWithErrorException(""String_Node_Str"" + String.valueOf(clusterId) + ""String_Node_Str"");
    }
    _clusterDao.update(clusterId,cluster);
    failureInClusterDiscovery=false;
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + url.getHost() + ""String_Node_Str""+ e);
    return null;
  }
 finally {
    if (context != null)     context.close();
    if (failureInClusterDiscovery && vsmInfo.first()) {
      try {
        s_logger.debug(""String_Node_Str"" + vsmIp + ""String_Node_Str"");
        _nexusElement.deleteCiscoNexusVSM(vsmInfo.second().longValue());
      }
 catch (      Exception e) {
      }
    }
  }
}",0.9899991303591616
105311,"public boolean createVmdataFiles(String vmName,List<String[]> vmDataList,String configDriveLabel){
  String isoPath=""String_Node_Str"" + vmName + ""String_Node_Str"";
  String configDriveName=""String_Node_Str"";
  try {
    deleteLocalFolder(""String_Node_Str"" + isoPath);
  }
 catch (  IOException e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
  if (vmDataList != null) {
    for (    String[] item : vmDataList) {
      String dataType=item[0];
      String fileName=item[1];
      String content=item[2];
      if (dataType != null && !dataType.isEmpty()) {
        String folder=isoPath + configDriveName + dataType;
        if (folder != null && !folder.isEmpty()) {
          File dir=new File(folder);
          boolean result=true;
          try {
            if (!dir.exists()) {
              dir.mkdirs();
            }
          }
 catch (          SecurityException ex) {
            s_logger.debug(""String_Node_Str"" + ex.getMessage());
            return false;
          }
          if (result && content != null && !content.isEmpty()) {
            try {
              File file=new File(folder + ""String_Node_Str"" + fileName+ ""String_Node_Str"");
              FileWriter fw=new FileWriter(file.getAbsoluteFile());
              BufferedWriter bw=new BufferedWriter(fw);
              bw.write(content);
              bw.close();
              s_logger.debug(""String_Node_Str"" + file + ""String_Node_Str""+ folder);
            }
 catch (            IOException ex) {
              s_logger.debug(""String_Node_Str"" + ex.getMessage());
              return false;
            }
          }
        }
      }
    }
    s_logger.debug(""String_Node_Str"" + isoPath);
  }
  String s=null;
  try {
    String cmd=""String_Node_Str"" + configDriveLabel + ""String_Node_Str""+ isoPath+ vmName+ ""String_Node_Str""+ isoPath;
    Process p=Runtime.getRuntime().exec(cmd);
    BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((s=stdInput.readLine()) != null) {
      s_logger.debug(s);
    }
    while ((s=stdError.readLine()) != null) {
      s_logger.debug(s);
    }
    s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ _host.getIp());
  }
 catch (  IOException e) {
    s_logger.debug(e.getMessage());
    return false;
  }
  return true;
}","public boolean createVmdataFiles(String vmName,List<String[]> vmDataList,String configDriveLabel){
  String isoPath=""String_Node_Str"" + vmName + ""String_Node_Str"";
  String configDriveName=""String_Node_Str"";
  try {
    deleteLocalFolder(""String_Node_Str"" + isoPath);
  }
 catch (  IOException e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + vmName + ""String_Node_Str""+ e.getMessage());
  }
  if (vmDataList != null) {
    for (    String[] item : vmDataList) {
      String dataType=item[0];
      String fileName=item[1];
      String content=item[2];
      if (dataType != null && !dataType.isEmpty()) {
        String folder=isoPath + configDriveName + dataType;
        if (folder != null && !folder.isEmpty()) {
          File dir=new File(folder);
          boolean result=true;
          try {
            if (!dir.exists()) {
              dir.mkdirs();
            }
          }
 catch (          SecurityException ex) {
            s_logger.debug(""String_Node_Str"" + ex.getMessage());
            return false;
          }
          if (result && content != null && !content.isEmpty()) {
            try {
              File file=new File(folder + ""String_Node_Str"" + fileName+ ""String_Node_Str"");
              OutputStreamWriter fw=new OutputStreamWriter(new FileOutputStream(file.getAbsoluteFile()),""String_Node_Str"");
              BufferedWriter bw=new BufferedWriter(fw);
              bw.write(content);
              bw.close();
              s_logger.debug(""String_Node_Str"" + file + ""String_Node_Str""+ folder);
            }
 catch (            IOException ex) {
              s_logger.debug(""String_Node_Str"" + ex.getMessage());
              return false;
            }
          }
        }
      }
    }
    s_logger.debug(""String_Node_Str"" + isoPath);
  }
  String s=null;
  try {
    String cmd=""String_Node_Str"" + configDriveLabel + ""String_Node_Str""+ isoPath+ vmName+ ""String_Node_Str""+ isoPath;
    Process p=Runtime.getRuntime().exec(cmd);
    BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stdError=new BufferedReader(new InputStreamReader(p.getErrorStream()));
    while ((s=stdInput.readLine()) != null) {
      s_logger.debug(s);
    }
    while ((s=stdError.readLine()) != null) {
      s_logger.debug(s);
    }
    s_logger.debug(""String_Node_Str"" + cmd + ""String_Node_Str""+ _host.getIp());
  }
 catch (  IOException e) {
    s_logger.debug(e.getMessage());
    return false;
  }
  return true;
}",0.9852255054432348
105312,"private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    FileReader fr=new FileReader(xmlFilePath);
    BufferedReader br=new BufferedReader(fr);
    String xml=""String_Node_Str"";
    String line;
    while ((line=br.readLine()) != null) {
      xml+=line;
    }
    return xml;
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}","private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    InputStreamReader fr=new InputStreamReader(new FileInputStream(xmlFilePath),""String_Node_Str"");
    BufferedReader br=new BufferedReader(fr);
    String xml=""String_Node_Str"";
    String line;
    while ((line=br.readLine()) != null) {
      xml+=line;
    }
    return xml;
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}",0.8974600188146754
105313,"public void exportVm(String exportDir,String exportName,boolean packToOva,boolean leaveOvaFileOnly) throws Exception {
  ManagedObjectReference morOvf=_context.getServiceContent().getOvfManager();
  VirtualMachineRuntimeInfo runtimeInfo=getRuntimeInfo();
  HostMO hostMo=new HostMO(_context,runtimeInfo.getHost());
  String hostName=hostMo.getHostName();
  String vmName=getVmName();
  DatacenterMO dcMo=new DatacenterMO(_context,hostMo.getHyperHostDatacenter());
  if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {
    String msg=""String_Node_Str"" + vmName + ""String_Node_Str""+ hostName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  ManagedObjectReference morLease=_context.getService().exportVm(getMor());
  if (morLease == null) {
    s_logger.error(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
  HttpNfcLeaseMO leaseMo=new HttpNfcLeaseMO(_context,morLease);
  HttpNfcLeaseState state=leaseMo.waitState(new HttpNfcLeaseState[]{HttpNfcLeaseState.READY,HttpNfcLeaseState.ERROR});
  try {
    if (state == HttpNfcLeaseState.READY) {
      final HttpNfcLeaseMO.ProgressReporter progressReporter=leaseMo.createProgressReporter();
      boolean success=false;
      List<String> fileNames=new ArrayList<String>();
      try {
        HttpNfcLeaseInfo leaseInfo=leaseMo.getLeaseInfo();
        final long totalBytes=leaseInfo.getTotalDiskCapacityInKB() * 1024;
        long totalBytesDownloaded=0;
        List<HttpNfcLeaseDeviceUrl> deviceUrls=leaseInfo.getDeviceUrl();
        s_logger.info(""String_Node_Str"" + System.currentTimeMillis());
        if (deviceUrls != null) {
          OvfFile[] ovfFiles=new OvfFile[deviceUrls.size()];
          for (int i=0; i < deviceUrls.size(); i++) {
            String deviceId=deviceUrls.get(i).getKey();
            String deviceUrlStr=deviceUrls.get(i).getUrl();
            String orgDiskFileName=deviceUrlStr.substring(deviceUrlStr.lastIndexOf(""String_Node_Str"") + 1);
            String diskFileName=String.format(""String_Node_Str"",exportName,i,VmwareHelper.getFileExtension(orgDiskFileName,""String_Node_Str""));
            String diskUrlStr=deviceUrlStr.replace(""String_Node_Str"",hostName);
            diskUrlStr=HypervisorHostHelper.resolveHostNameInUrl(dcMo,diskUrlStr);
            String diskLocalPath=exportDir + File.separator + diskFileName;
            fileNames.add(diskLocalPath);
            if (s_logger.isInfoEnabled()) {
              s_logger.info(""String_Node_Str"" + deviceUrlStr);
            }
            long lengthOfDiskFile=_context.downloadVmdkFile(diskUrlStr,diskLocalPath,totalBytesDownloaded,new ActionDelegate<Long>(){
              @Override public void action(              Long param){
                if (s_logger.isTraceEnabled()) {
                  s_logger.trace(""String_Node_Str"" + param + ""String_Node_Str""+ totalBytes);
                }
                progressReporter.reportProgress((int)(param * 100 / totalBytes));
              }
            }
);
            totalBytesDownloaded+=lengthOfDiskFile;
            OvfFile ovfFile=new OvfFile();
            ovfFile.setPath(diskFileName);
            ovfFile.setDeviceId(deviceId);
            ovfFile.setSize(lengthOfDiskFile);
            ovfFiles[i]=ovfFile;
          }
          OvfCreateDescriptorParams ovfDescParams=new OvfCreateDescriptorParams();
          ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));
          OvfCreateDescriptorResult ovfCreateDescriptorResult=_context.getService().createDescriptor(morOvf,getMor(),ovfDescParams);
          String ovfPath=exportDir + File.separator + exportName+ ""String_Node_Str"";
          fileNames.add(ovfPath);
          FileWriter out=new FileWriter(ovfPath);
          out.write(ovfCreateDescriptorResult.getOvfDescriptor());
          out.close();
          if (packToOva) {
            s_logger.info(""String_Node_Str"");
            Script commandSync=new Script(true,""String_Node_Str"",0,s_logger);
            commandSync.execute();
            Script command=new Script(false,""String_Node_Str"",0,s_logger);
            command.setWorkDir(exportDir);
            command.add(""String_Node_Str"",exportName + ""String_Node_Str"");
            command.add(exportName + ""String_Node_Str"");
            for (            String name : fileNames) {
              command.add((new File(name).getName()));
            }
            s_logger.info(""String_Node_Str"" + command.toString());
            command.execute();
            if ((new File(exportDir + File.separator + exportName+ ""String_Node_Str"")).exists()) {
              success=true;
            }
 else {
              s_logger.error(exportDir + File.separator + exportName+ ""String_Node_Str"");
            }
          }
 else {
            success=true;
          }
        }
        s_logger.info(""String_Node_Str"" + System.currentTimeMillis());
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        progressReporter.close();
        if (leaveOvaFileOnly) {
          for (          String name : fileNames) {
            new File(name).delete();
          }
        }
        if (!success)         throw new Exception(""String_Node_Str"");
      }
    }
  }
  finally {
    leaseMo.updateLeaseProgress(100);
    leaseMo.completeLease();
  }
}","public void exportVm(String exportDir,String exportName,boolean packToOva,boolean leaveOvaFileOnly) throws Exception {
  ManagedObjectReference morOvf=_context.getServiceContent().getOvfManager();
  VirtualMachineRuntimeInfo runtimeInfo=getRuntimeInfo();
  HostMO hostMo=new HostMO(_context,runtimeInfo.getHost());
  String hostName=hostMo.getHostName();
  String vmName=getVmName();
  DatacenterMO dcMo=new DatacenterMO(_context,hostMo.getHyperHostDatacenter());
  if (runtimeInfo.getPowerState() != VirtualMachinePowerState.POWERED_OFF) {
    String msg=""String_Node_Str"" + vmName + ""String_Node_Str""+ hostName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  ManagedObjectReference morLease=_context.getService().exportVm(getMor());
  if (morLease == null) {
    s_logger.error(""String_Node_Str"");
    throw new Exception(""String_Node_Str"");
  }
  HttpNfcLeaseMO leaseMo=new HttpNfcLeaseMO(_context,morLease);
  HttpNfcLeaseState state=leaseMo.waitState(new HttpNfcLeaseState[]{HttpNfcLeaseState.READY,HttpNfcLeaseState.ERROR});
  try {
    if (state == HttpNfcLeaseState.READY) {
      final HttpNfcLeaseMO.ProgressReporter progressReporter=leaseMo.createProgressReporter();
      boolean success=false;
      List<String> fileNames=new ArrayList<String>();
      try {
        HttpNfcLeaseInfo leaseInfo=leaseMo.getLeaseInfo();
        final long totalBytes=leaseInfo.getTotalDiskCapacityInKB() * 1024;
        long totalBytesDownloaded=0;
        List<HttpNfcLeaseDeviceUrl> deviceUrls=leaseInfo.getDeviceUrl();
        s_logger.info(""String_Node_Str"" + System.currentTimeMillis());
        if (deviceUrls != null) {
          OvfFile[] ovfFiles=new OvfFile[deviceUrls.size()];
          for (int i=0; i < deviceUrls.size(); i++) {
            String deviceId=deviceUrls.get(i).getKey();
            String deviceUrlStr=deviceUrls.get(i).getUrl();
            String orgDiskFileName=deviceUrlStr.substring(deviceUrlStr.lastIndexOf(""String_Node_Str"") + 1);
            String diskFileName=String.format(""String_Node_Str"",exportName,i,VmwareHelper.getFileExtension(orgDiskFileName,""String_Node_Str""));
            String diskUrlStr=deviceUrlStr.replace(""String_Node_Str"",hostName);
            diskUrlStr=HypervisorHostHelper.resolveHostNameInUrl(dcMo,diskUrlStr);
            String diskLocalPath=exportDir + File.separator + diskFileName;
            fileNames.add(diskLocalPath);
            if (s_logger.isInfoEnabled()) {
              s_logger.info(""String_Node_Str"" + deviceUrlStr);
            }
            long lengthOfDiskFile=_context.downloadVmdkFile(diskUrlStr,diskLocalPath,totalBytesDownloaded,new ActionDelegate<Long>(){
              @Override public void action(              Long param){
                if (s_logger.isTraceEnabled()) {
                  s_logger.trace(""String_Node_Str"" + param + ""String_Node_Str""+ totalBytes);
                }
                progressReporter.reportProgress((int)(param * 100 / totalBytes));
              }
            }
);
            totalBytesDownloaded+=lengthOfDiskFile;
            OvfFile ovfFile=new OvfFile();
            ovfFile.setPath(diskFileName);
            ovfFile.setDeviceId(deviceId);
            ovfFile.setSize(lengthOfDiskFile);
            ovfFiles[i]=ovfFile;
          }
          OvfCreateDescriptorParams ovfDescParams=new OvfCreateDescriptorParams();
          ovfDescParams.getOvfFiles().addAll(Arrays.asList(ovfFiles));
          OvfCreateDescriptorResult ovfCreateDescriptorResult=_context.getService().createDescriptor(morOvf,getMor(),ovfDescParams);
          String ovfPath=exportDir + File.separator + exportName+ ""String_Node_Str"";
          fileNames.add(ovfPath);
          OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(ovfPath),""String_Node_Str"");
          out.write(ovfCreateDescriptorResult.getOvfDescriptor());
          out.close();
          if (packToOva) {
            s_logger.info(""String_Node_Str"");
            Script commandSync=new Script(true,""String_Node_Str"",0,s_logger);
            commandSync.execute();
            Script command=new Script(false,""String_Node_Str"",0,s_logger);
            command.setWorkDir(exportDir);
            command.add(""String_Node_Str"",exportName + ""String_Node_Str"");
            command.add(exportName + ""String_Node_Str"");
            for (            String name : fileNames) {
              command.add((new File(name).getName()));
            }
            s_logger.info(""String_Node_Str"" + command.toString());
            command.execute();
            if ((new File(exportDir + File.separator + exportName+ ""String_Node_Str"")).exists()) {
              success=true;
            }
 else {
              s_logger.error(exportDir + File.separator + exportName+ ""String_Node_Str"");
            }
          }
 else {
            success=true;
          }
        }
        s_logger.info(""String_Node_Str"" + System.currentTimeMillis());
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        progressReporter.close();
        if (leaveOvaFileOnly) {
          for (          String name : fileNames) {
            new File(name).delete();
          }
        }
        if (!success)         throw new Exception(""String_Node_Str"");
      }
    }
  }
  finally {
    leaseMo.updateLeaseProgress(100);
    leaseMo.completeLease();
  }
}",0.9904637247569184
105314,"@Deprecated public void setSnapshotDirectory(String snapshotDir) throws Exception {
  VirtualMachineFileInfo fileInfo=getFileInfo();
  Pair<DatacenterMO,String> dcInfo=getOwnerDatacenter();
  String vmxUrl=_context.composeDatastoreBrowseUrl(dcInfo.second(),fileInfo.getVmPathName());
  byte[] vmxContent=_context.getResourceContent(vmxUrl);
  BufferedReader in=null;
  BufferedWriter out=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  boolean replaced=false;
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmxContent)));
    out=new BufferedWriter(new OutputStreamWriter(bos));
    String line;
    while ((line=in.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        replaced=true;
        out.write(String.format(""String_Node_Str"",snapshotDir));
        out.newLine();
      }
 else {
        out.write(line);
        out.newLine();
      }
    }
    if (!replaced) {
      out.newLine();
      out.write(String.format(""String_Node_Str"",snapshotDir));
      out.newLine();
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
  _context.uploadResourceContent(vmxUrl,bos.toByteArray());
}","@Deprecated public void setSnapshotDirectory(String snapshotDir) throws Exception {
  VirtualMachineFileInfo fileInfo=getFileInfo();
  Pair<DatacenterMO,String> dcInfo=getOwnerDatacenter();
  String vmxUrl=_context.composeDatastoreBrowseUrl(dcInfo.second(),fileInfo.getVmPathName());
  byte[] vmxContent=_context.getResourceContent(vmxUrl);
  BufferedReader in=null;
  BufferedWriter out=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  boolean replaced=false;
  try {
    in=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(vmxContent),""String_Node_Str""));
    out=new BufferedWriter(new OutputStreamWriter(bos,""String_Node_Str""));
    String line;
    while ((line=in.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        replaced=true;
        out.write(String.format(""String_Node_Str"",snapshotDir));
        out.newLine();
      }
 else {
        out.write(line);
        out.newLine();
      }
    }
    if (!replaced) {
      out.newLine();
      out.write(String.format(""String_Node_Str"",snapshotDir));
      out.newLine();
    }
  }
  finally {
    if (in != null) {
      in.close();
    }
    if (out != null) {
      out.close();
    }
  }
  _context.uploadResourceContent(vmxUrl,bos.toByteArray());
}",0.6845047923322684
105315,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  return details;
}",0.2038664323374341
105316,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  return details;
}",0.2038664323374341
105317,"private Answer executeProxyLoadScan(final Command cmd,final long proxyVmId,final String proxyVmName,final String proxyManagementIp,final int cmdPort){
  String result=null;
  final StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(proxyManagementIp).append(""String_Node_Str"" + cmdPort).append(""String_Node_Str"");
  boolean success=true;
  try {
    final URL url=new URL(sb.toString());
    final URLConnection conn=url.openConnection();
    final InputStream is=conn.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    final StringBuilder sb2=new StringBuilder();
    String line=null;
    try {
      while ((line=reader.readLine()) != null)       sb2.append(line + ""String_Node_Str"");
      result=sb2.toString();
    }
 catch (    final IOException e) {
      success=false;
    }
 finally {
      try {
        is.close();
      }
 catch (      final IOException e) {
        s_logger.warn(""String_Node_Str"" + proxyManagementIp);
        success=false;
      }
    }
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"" + proxyManagementIp);
    success=false;
  }
  return new ConsoleProxyLoadAnswer(cmd,proxyVmId,proxyVmName,success,result);
}","private Answer executeProxyLoadScan(final Command cmd,final long proxyVmId,final String proxyVmName,final String proxyManagementIp,final int cmdPort){
  String result=null;
  final StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(proxyManagementIp).append(""String_Node_Str"" + cmdPort).append(""String_Node_Str"");
  boolean success=true;
  try {
    final URL url=new URL(sb.toString());
    final URLConnection conn=url.openConnection();
    final InputStream is=conn.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
    final StringBuilder sb2=new StringBuilder();
    String line=null;
    try {
      while ((line=reader.readLine()) != null)       sb2.append(line + ""String_Node_Str"");
      result=sb2.toString();
    }
 catch (    final IOException e) {
      success=false;
    }
 finally {
      try {
        is.close();
      }
 catch (      final IOException e) {
        s_logger.warn(""String_Node_Str"" + proxyManagementIp);
        success=false;
      }
    }
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"" + proxyManagementIp);
    success=false;
  }
  return new ConsoleProxyLoadAnswer(cmd,proxyVmId,proxyVmName,success,result);
}",0.992811501597444
105318,"public Answer executeProxyLoadScan(final Command cmd,final long proxyVmId,final String proxyVmName,final String proxyManagementIp,final int cmdPort){
  String result=null;
  final StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(proxyManagementIp).append(""String_Node_Str"" + cmdPort).append(""String_Node_Str"");
  boolean success=true;
  try {
    final URL url=new URL(sb.toString());
    final URLConnection conn=url.openConnection();
    final InputStream is=conn.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
    final StringBuilder sb2=new StringBuilder();
    String line=null;
    try {
      while ((line=reader.readLine()) != null) {
        sb2.append(line + ""String_Node_Str"");
      }
      result=sb2.toString();
    }
 catch (    final IOException e) {
      success=false;
    }
 finally {
      try {
        is.close();
      }
 catch (      final IOException e) {
        s_logger.warn(""String_Node_Str"" + proxyManagementIp);
        success=false;
      }
    }
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"" + proxyManagementIp);
    success=false;
  }
  return new ConsoleProxyLoadAnswer(cmd,proxyVmId,proxyVmName,success,result);
}","public Answer executeProxyLoadScan(final Command cmd,final long proxyVmId,final String proxyVmName,final String proxyManagementIp,final int cmdPort){
  String result=null;
  final StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(proxyManagementIp).append(""String_Node_Str"" + cmdPort).append(""String_Node_Str"");
  boolean success=true;
  try {
    final URL url=new URL(sb.toString());
    final URLConnection conn=url.openConnection();
    final InputStream is=conn.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
    final StringBuilder sb2=new StringBuilder();
    String line=null;
    try {
      while ((line=reader.readLine()) != null) {
        sb2.append(line + ""String_Node_Str"");
      }
      result=sb2.toString();
    }
 catch (    final IOException e) {
      success=false;
    }
 finally {
      try {
        is.close();
      }
 catch (      final IOException e) {
        s_logger.warn(""String_Node_Str"" + proxyManagementIp);
        success=false;
      }
    }
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"" + proxyManagementIp);
    success=false;
  }
  return new ConsoleProxyLoadAnswer(cmd,proxyVmId,proxyVmName,success,result);
}",0.992874109263658
105319,"protected Answer executeProxyLoadScan(final Command cmd,final long proxyVmId,final String proxyVmName,final String proxyManagementIp,final int cmdPort){
  String result=null;
  final StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(proxyManagementIp).append(""String_Node_Str"" + cmdPort).append(""String_Node_Str"");
  boolean success=true;
  try {
    final URL url=new URL(sb.toString());
    final URLConnection conn=url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setReadTimeout(5000);
    final InputStream is=conn.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is,Charset.defaultCharset()));
    final StringBuilder sb2=new StringBuilder();
    String line=null;
    try {
      while ((line=reader.readLine()) != null) {
        sb2.append(line + ""String_Node_Str"");
      }
      result=sb2.toString();
    }
 catch (    final IOException e) {
      success=false;
    }
 finally {
      try {
        is.close();
      }
 catch (      final IOException e) {
        s_logger.warn(""String_Node_Str"" + proxyManagementIp);
        success=false;
      }
    }
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"" + proxyManagementIp);
    success=false;
  }
  return new ConsoleProxyLoadAnswer(cmd,proxyVmId,proxyVmName,success,result);
}","protected Answer executeProxyLoadScan(final Command cmd,final long proxyVmId,final String proxyVmName,final String proxyManagementIp,final int cmdPort){
  String result=null;
  final StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(proxyManagementIp).append(""String_Node_Str"" + cmdPort).append(""String_Node_Str"");
  boolean success=true;
  try {
    final URL url=new URL(sb.toString());
    final URLConnection conn=url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setReadTimeout(5000);
    final InputStream is=conn.getInputStream();
    final BufferedReader reader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
    final StringBuilder sb2=new StringBuilder();
    String line=null;
    try {
      while ((line=reader.readLine()) != null) {
        sb2.append(line + ""String_Node_Str"");
      }
      result=sb2.toString();
    }
 catch (    final IOException e) {
      success=false;
    }
 finally {
      try {
        is.close();
      }
 catch (      final IOException e) {
        s_logger.warn(""String_Node_Str"" + proxyManagementIp);
        success=false;
      }
    }
  }
 catch (  final IOException e) {
    s_logger.warn(""String_Node_Str"" + proxyManagementIp);
    success=false;
  }
  return new ConsoleProxyLoadAnswer(cmd,proxyVmId,proxyVmName,success,result);
}",0.9847413472273912
105320,"public void doHandle(HttpExchange t) throws Exception {
  String path=t.getRequestURI().getPath();
  int i=path.indexOf(""String_Node_Str"",1);
  String cmd=path.substring(i + 1);
  s_logger.info(""String_Node_Str"" + cmd);
  if (cmd.equals(""String_Node_Str"")) {
    ConsoleProxyClientStatsCollector statsCollector=ConsoleProxy.getStatsCollector();
    Headers hds=t.getResponseHeaders();
    hds.set(""String_Node_Str"",""String_Node_Str"");
    t.sendResponseHeaders(200,0);
    OutputStreamWriter os=new OutputStreamWriter(t.getResponseBody());
    statsCollector.getStatsReport(os);
    os.close();
  }
}","public void doHandle(HttpExchange t) throws Exception {
  String path=t.getRequestURI().getPath();
  int i=path.indexOf(""String_Node_Str"",1);
  String cmd=path.substring(i + 1);
  s_logger.info(""String_Node_Str"" + cmd);
  if (cmd.equals(""String_Node_Str"")) {
    ConsoleProxyClientStatsCollector statsCollector=ConsoleProxy.getStatsCollector();
    Headers hds=t.getResponseHeaders();
    hds.set(""String_Node_Str"",""String_Node_Str"");
    t.sendResponseHeaders(200,0);
    OutputStreamWriter os=new OutputStreamWriter(t.getResponseBody(),""String_Node_Str"");
    statsCollector.getStatsReport(os);
    os.close();
  }
}",0.9852216748768472
105321,"private void postCreatePrivateTemplate(String installFullPath,long templateId,String templateName,long size,long virtualSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str"")));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateId);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}","private void postCreatePrivateTemplate(String installFullPath,long templateId,String templateName,long size,long virtualSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str""),""String_Node_Str""));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateId);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + templateName);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + virtualSize);
    out.newLine();
    out.write(""String_Node_Str"" + size);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}",0.9924874791318864
105322,"private void writeMetaOvaForTemplate(String installFullPath,String ovfFilename,String vmdkFilename,String templateName,long diskSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str"" + templateName+ ""String_Node_Str"")));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + ovfFilename);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + vmdkFilename);
    out.newLine();
    out.write(""String_Node_Str"" + diskSize);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}","private void writeMetaOvaForTemplate(String installFullPath,String ovfFilename,String vmdkFilename,String templateName,long diskSize) throws Exception {
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(installFullPath + ""String_Node_Str"" + templateName+ ""String_Node_Str""),""String_Node_Str""));
    out.write(""String_Node_Str"" + templateName + ""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + ovfFilename);
    out.newLine();
    out.write(""String_Node_Str"");
    out.newLine();
    out.write(""String_Node_Str"" + vmdkFilename);
    out.newLine();
    out.write(""String_Node_Str"" + diskSize);
    out.newLine();
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}",0.9888059701492538
105323,"private static String getSecondaryDatastoreUUID(String storeUrl){
  return UUID.nameUUIDFromBytes(storeUrl.getBytes()).toString();
}","private static String getSecondaryDatastoreUUID(String storeUrl){
  String uuid=null;
  try {
    uuid=UUID.nameUUIDFromBytes(storeUrl.getBytes(""String_Node_Str"")).toString();
  }
 catch (  UnsupportedEncodingException e) {
    s_logger.warn(""String_Node_Str"" + storeUrl + ""String_Node_Str"");
  }
  return uuid;
}",0.5617977528089888
105324,"private boolean manageApplication(SecurityPolicyType type,SrxCommand command,Protocol protocol,int startPort,int endPort) throws ExecutionException {
  if (protocol.equals(Protocol.any)) {
    return true;
  }
  String applicationName=genApplicationName(type,protocol,startPort,endPort);
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.APPLICATION_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,""String_Node_Str"",applicationName);
return sendRequestAndCheckResponse(command,xml,""String_Node_Str"",applicationName);
case ADD:
if (manageApplication(type,SrxCommand.CHECK_IF_EXISTS,protocol,startPort,endPort)) {
return true;
}
String icmpOrDestPort;
xml=SrxXml.APPLICATION_ADD.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",applicationName);
xml=replaceXmlValue(xml,""String_Node_Str"",protocol.toString());
if (protocol.toString() == Protocol.icmp.toString()) {
icmpOrDestPort=""String_Node_Str"" + startPort + ""String_Node_Str"";
icmpOrDestPort+=""String_Node_Str"" + endPort + ""String_Node_Str"";
}
 else {
String destPort;
if (startPort == endPort) {
destPort=String.valueOf(startPort);
}
 else {
destPort=startPort + ""String_Node_Str"" + endPort;
}
icmpOrDestPort=""String_Node_Str"" + destPort + ""String_Node_Str"";
}
xml=replaceXmlValue(xml,""String_Node_Str"",icmpOrDestPort);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"" + applicationName);
}
 else {
return true;
}
case DELETE:
if (!manageApplication(type,SrxCommand.CHECK_IF_EXISTS,protocol,startPort,endPort)) {
return true;
}
xml=SrxXml.APPLICATION_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,""String_Node_Str"",applicationName);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"" + applicationName);
}
 else {
return true;
}
default :
s_logger.debug(""String_Node_Str"");
return false;
}
}","private boolean manageApplication(SecurityPolicyType type,SrxCommand command,Protocol protocol,int startPort,int endPort) throws ExecutionException {
  if (protocol.equals(Protocol.any)) {
    return true;
  }
  String applicationName=genApplicationName(type,protocol,startPort,endPort);
  String xml;
switch (command) {
case CHECK_IF_EXISTS:
    xml=SrxXml.APPLICATION_GETONE.getXml();
  xml=setDelete(xml,false);
xml=replaceXmlValue(xml,""String_Node_Str"",applicationName);
return sendRequestAndCheckResponse(command,xml,""String_Node_Str"",applicationName);
case ADD:
if (manageApplication(type,SrxCommand.CHECK_IF_EXISTS,protocol,startPort,endPort)) {
return true;
}
String icmpOrDestPort;
xml=SrxXml.APPLICATION_ADD.getXml();
xml=replaceXmlValue(xml,""String_Node_Str"",applicationName);
xml=replaceXmlValue(xml,""String_Node_Str"",protocol.toString());
if (protocol.toString().equals(Protocol.icmp.toString())) {
icmpOrDestPort=""String_Node_Str"" + startPort + ""String_Node_Str"";
icmpOrDestPort+=""String_Node_Str"" + endPort + ""String_Node_Str"";
}
 else {
String destPort;
if (startPort == endPort) {
destPort=String.valueOf(startPort);
}
 else {
destPort=startPort + ""String_Node_Str"" + endPort;
}
icmpOrDestPort=""String_Node_Str"" + destPort + ""String_Node_Str"";
}
xml=replaceXmlValue(xml,""String_Node_Str"",icmpOrDestPort);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"" + applicationName);
}
 else {
return true;
}
case DELETE:
if (!manageApplication(type,SrxCommand.CHECK_IF_EXISTS,protocol,startPort,endPort)) {
return true;
}
xml=SrxXml.APPLICATION_GETONE.getXml();
xml=setDelete(xml,true);
xml=replaceXmlValue(xml,""String_Node_Str"",applicationName);
if (!sendRequestAndCheckResponse(command,xml)) {
throw new ExecutionException(""String_Node_Str"" + applicationName);
}
 else {
return true;
}
default :
s_logger.debug(""String_Node_Str"");
return false;
}
}",0.985545335085414
105325,"protected NetworkUsageAnswer VPCNetworkUsage(NetworkUsageCommand cmd){
  String privateIp=cmd.getPrivateIP();
  String option=cmd.getOption();
  String publicIp=cmd.getGatewayIP();
  String args=""String_Node_Str"" + publicIp + ""String_Node_Str"";
  if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
    String vpcCIDR=cmd.getVpcCIDR();
    args+=""String_Node_Str"" + vpcCIDR;
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else {
    return new NetworkUsageAnswer(cmd,""String_Node_Str"",0L,0L);
  }
  ExecutionResult callResult=executeInVR(privateIp,""String_Node_Str"",args);
  if (!callResult.isSuccess()) {
    s_logger.error(""String_Node_Str"" + privateIp + ""String_Node_Str""+ callResult.getDetails());
  }
  if (option.equals(""String_Node_Str"") || option.equals(""String_Node_Str"")) {
    String result=callResult.getDetails();
    if (result == null || result.isEmpty()) {
      s_logger.error(""String_Node_Str"");
    }
    long[] stats=new long[2];
    if (result != null) {
      String[] splitResult=result.split(""String_Node_Str"");
      int i=0;
      while (i < splitResult.length - 1) {
        stats[0]+=(new Long(splitResult[i++])).longValue();
        stats[1]+=(new Long(splitResult[i++])).longValue();
      }
      return new NetworkUsageAnswer(cmd,""String_Node_Str"",stats[0],stats[1]);
    }
  }
  return new NetworkUsageAnswer(cmd,""String_Node_Str"",0L,0L);
}","protected NetworkUsageAnswer VPCNetworkUsage(NetworkUsageCommand cmd){
  String privateIp=cmd.getPrivateIP();
  String option=cmd.getOption();
  String publicIp=cmd.getGatewayIP();
  String args=""String_Node_Str"" + publicIp + ""String_Node_Str"";
  if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
    String vpcCIDR=cmd.getVpcCIDR();
    args+=""String_Node_Str"" + vpcCIDR;
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else   if (option.equals(""String_Node_Str"")) {
    args+=""String_Node_Str"";
  }
 else {
    return new NetworkUsageAnswer(cmd,""String_Node_Str"",0L,0L);
  }
  ExecutionResult callResult=executeInVR(privateIp,""String_Node_Str"",args);
  if (!callResult.isSuccess()) {
    s_logger.error(""String_Node_Str"" + privateIp + ""String_Node_Str""+ callResult.getDetails());
  }
  if (option.equals(""String_Node_Str"") || option.equals(""String_Node_Str"")) {
    String result=callResult.getDetails();
    if (result == null || result.isEmpty()) {
      s_logger.error(""String_Node_Str"");
    }
    long[] stats=new long[2];
    if (result != null) {
      String[] splitResult=result.split(""String_Node_Str"");
      int i=0;
      while (i < splitResult.length - 1) {
        stats[0]+=Long.parseLong(splitResult[i++]);
        stats[1]+=Long.parseLong(splitResult[i++]);
      }
      return new NetworkUsageAnswer(cmd,""String_Node_Str"",stats[0],stats[1]);
    }
  }
  return new NetworkUsageAnswer(cmd,""String_Node_Str"",0L,0L);
}",0.9831730769230768
105326,"private long[] getNetworkStats(String privateIP){
  String result=networkUsage(privateIP,""String_Node_Str"",null);
  long[] stats=new long[2];
  if (result != null) {
    try {
      String[] splitResult=result.split(""String_Node_Str"");
      int i=0;
      while (i < splitResult.length - 1) {
        stats[0]+=(new Long(splitResult[i++])).longValue();
        stats[1]+=(new Long(splitResult[i++])).longValue();
      }
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + e.toString(),e);
    }
  }
  return stats;
}","private long[] getNetworkStats(String privateIP){
  String result=networkUsage(privateIP,""String_Node_Str"",null);
  long[] stats=new long[2];
  if (result != null) {
    try {
      String[] splitResult=result.split(""String_Node_Str"");
      int i=0;
      while (i < splitResult.length - 1) {
        stats[0]+=Long.parseLong(splitResult[i++]);
        stats[1]+=Long.parseLong(splitResult[i++]);
      }
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"" + e.toString(),e);
    }
  }
  return stats;
}",0.911487758945386
105327,"private void deleteVirtualServerAndDefaultPool(String virtualServerName) throws ExecutionException {
  try {
    if (virtualServerExists(virtualServerName)) {
      List<String> poolMembers=getMembers(virtualServerName);
      for (      String poolMember : poolMembers) {
        String[] destIpAndPort=getIpAndPort(poolMember);
        deletePoolMember(virtualServerName,destIpAndPort[0],Integer.valueOf(destIpAndPort[1]));
      }
      s_logger.debug(""String_Node_Str"" + virtualServerName);
      _virtualServerApi.delete_virtual_server(genStringArray(virtualServerName));
      if (getStrippedVirtualServers().contains(virtualServerName)) {
        throw new ExecutionException(""String_Node_Str"" + virtualServerName);
      }
      deletePool(virtualServerName);
    }
  }
 catch (  RemoteException e) {
    throw new ExecutionException(e.getMessage());
  }
}","private void deleteVirtualServerAndDefaultPool(String virtualServerName) throws ExecutionException {
  try {
    if (virtualServerExists(virtualServerName)) {
      List<String> poolMembers=getMembers(virtualServerName);
      for (      String poolMember : poolMembers) {
        String[] destIpAndPort=getIpAndPort(poolMember);
        deletePoolMember(virtualServerName,destIpAndPort[0],Integer.parseInt(destIpAndPort[1]));
      }
      s_logger.debug(""String_Node_Str"" + virtualServerName);
      _virtualServerApi.delete_virtual_server(genStringArray(virtualServerName));
      if (getStrippedVirtualServers().contains(virtualServerName)) {
        throw new ExecutionException(""String_Node_Str"" + virtualServerName);
      }
      deletePool(virtualServerName);
    }
  }
 catch (  RemoteException e) {
    throw new ExecutionException(e.getMessage());
  }
}",0.9913244650086755
105328,"private void deleteInactivePoolMembers(String virtualServerName,List<String> activePoolMembers) throws ExecutionException {
  List<String> allPoolMembers=getMembers(virtualServerName);
  for (  String member : allPoolMembers) {
    if (!activePoolMembers.contains(member)) {
      String[] ipAndPort=member.split(""String_Node_Str"");
      deletePoolMember(virtualServerName,ipAndPort[0],Integer.valueOf(ipAndPort[1]));
    }
  }
}","private void deleteInactivePoolMembers(String virtualServerName,List<String> activePoolMembers) throws ExecutionException {
  List<String> allPoolMembers=getMembers(virtualServerName);
  for (  String member : allPoolMembers) {
    if (!activePoolMembers.contains(member)) {
      String[] ipAndPort=member.split(""String_Node_Str"");
      deletePoolMember(virtualServerName,ipAndPort[0],Integer.parseInt(ipAndPort[1]));
    }
  }
}",0.9825783972125436
105329,"private String getVolumePathInDatastore(DatastoreMO dsMo,String volumeFileName) throws Exception {
}","private String getVolumePathInDatastore(DatastoreMO dsMo,String volumeFileName) throws Exception {
  String datastoreVolumePath=dsMo.searchFileInSubFolders(volumeFileName,true);
  if (datastoreVolumePath == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volumeFileName + ""String_Node_Str""+ dsMo.getName());
  }
  return datastoreVolumePath;
}",0.4357298474945534
105330,"private String generatePassword() throws ServerApiException {
  try {
    final SecureRandom randomGen=SecureRandom.getInstance(""String_Node_Str"");
    final byte bytes[]=new byte[20];
    randomGen.nextBytes(bytes);
    return Base64.encode(bytes).toString();
  }
 catch (  final NoSuchAlgorithmException e) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","private String generatePassword() throws ServerApiException {
  try {
    final SecureRandom randomGen=SecureRandom.getInstance(""String_Node_Str"");
    final byte bytes[]=new byte[20];
    randomGen.nextBytes(bytes);
    return new String(Base64.encode(bytes),""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException|UnsupportedEncodingException e) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9114832535885168
105331,"private String generatePassword() throws ServerApiException {
  try {
    final SecureRandom randomGen=SecureRandom.getInstance(""String_Node_Str"");
    final byte bytes[]=new byte[20];
    randomGen.nextBytes(bytes);
    String encodedPassword=new String(Base64.encode(bytes));
    return encodedPassword;
  }
 catch (  final NoSuchAlgorithmException e) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","private String generatePassword() throws ServerApiException {
  try {
    final SecureRandom randomGen=SecureRandom.getInstance(""String_Node_Str"");
    final byte bytes[]=new byte[20];
    randomGen.nextBytes(bytes);
    return new String(Base64.encode(bytes),""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException|UnsupportedEncodingException e) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.8740068104426788
105332,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_UPLOAD,eventDescription=""String_Node_Str"",async=true) public GetUploadParamsResponse uploadVolume(final GetUploadParamsForVolumeCmd cmd) throws ResourceAllocationException, MalformedURLException {
  Account caller=CallContext.current().getCallingAccount();
  long ownerId=cmd.getEntityOwnerId();
  final Account owner=_entityMgr.findById(Account.class,ownerId);
  final Long zoneId=cmd.getZoneId();
  final String volumeName=cmd.getName();
  String format=cmd.getFormat();
  final Long diskOfferingId=cmd.getDiskOfferingId();
  String imageStoreUuid=cmd.getImageStoreUuid();
  final DataStore store=_tmpltMgr.getImageStore(imageStoreUuid,zoneId);
  validateVolume(caller,ownerId,zoneId,volumeName,null,format,diskOfferingId);
  return Transaction.execute(new TransactionCallbackWithException<GetUploadParamsResponse,MalformedURLException>(){
    @Override public GetUploadParamsResponse doInTransaction(    TransactionStatus status) throws MalformedURLException {
      VolumeVO volume=persistVolume(owner,zoneId,volumeName,null,cmd.getFormat(),diskOfferingId,Volume.State.NotUploaded);
      VolumeInfo vol=volFactory.getVolume(volume.getId());
      RegisterVolumePayload payload=new RegisterVolumePayload(null,cmd.getChecksum(),cmd.getFormat());
      vol.addPayload(payload);
      Pair<EndPoint,DataObject> pair=volService.registerVolumeForPostUpload(vol,store);
      EndPoint ep=pair.first();
      DataObject dataObject=pair.second();
      GetUploadParamsResponse response=new GetUploadParamsResponse();
      String ssvmUrlDomain=_configDao.getValue(Config.SecStorageSecureCopyCert.key());
      String url=ImageStoreUtil.generatePostUploadUrl(ssvmUrlDomain,ep.getPublicAddr(),vol.getUuid());
      response.setPostURL(new URL(url));
      VolumeDataStoreVO volumeStore=_volumeStoreDao.findByVolume(vol.getId());
      if (volumeStore != null) {
        volumeStore.setExtractUrl(url);
        _volumeStoreDao.persist(volumeStore);
      }
      response.setId(UUID.fromString(vol.getUuid()));
      int timeout=ImageStoreUploadMonitorImpl.getUploadOperationTimeout();
      DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
      String expires=currentDateTime.plusMinutes(timeout).toString();
      response.setTimeout(expires);
      String key=_configDao.getValue(Config.SSVMPSK.key());
      TemplateOrVolumePostUploadCommand command=new TemplateOrVolumePostUploadCommand(vol.getId(),vol.getUuid(),volumeStore.getInstallPath(),cmd.getChecksum(),vol.getType().toString(),vol.getName(),vol.getFormat().toString(),dataObject.getDataStore().getUri(),dataObject.getDataStore().getRole().toString());
      command.setLocalPath(volumeStore.getLocalDownloadPath());
      command.setMaxUploadSize(_configDao.getValue(Config.MaxUploadVolumeSize.key()));
      command.setDefaultMaxAccountSecondaryStorage(_configDao.getValue(Config.DefaultMaxAccountSecondaryStorage.key()));
      command.setAccountId(vol.getAccountId());
      Gson gson=new GsonBuilder().create();
      String metadata=EncryptionUtil.encodeData(gson.toJson(command),key);
      response.setMetadata(metadata);
      response.setSignature(EncryptionUtil.generateSignature(metadata + url + expires,key));
      return response;
    }
  }
);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_UPLOAD,eventDescription=""String_Node_Str"",async=true) public GetUploadParamsResponse uploadVolume(final GetUploadParamsForVolumeCmd cmd) throws ResourceAllocationException, MalformedURLException {
}",0.1442307692307692
105333,"public static String generateSignature(String data,String key){
  try {
    final Mac mac=Mac.getInstance(""String_Node_Str"");
    final SecretKeySpec keySpec=new SecretKeySpec(key.getBytes(""String_Node_Str""),""String_Node_Str"");
    mac.init(keySpec);
    mac.update(data.getBytes(Charset.defaultCharset()));
    final byte[] encryptedBytes=mac.doFinal();
    return Base64.encodeBase64String(encryptedBytes);
  }
 catch (  NoSuchAlgorithmException|InvalidKeyException|UnsupportedEncodingException e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public static String generateSignature(String data,String key){
  try {
    final Mac mac=Mac.getInstance(""String_Node_Str"");
    final SecretKeySpec keySpec=new SecretKeySpec(key.getBytes(""String_Node_Str""),""String_Node_Str"");
    mac.init(keySpec);
    mac.update(data.getBytes(""String_Node_Str""));
    final byte[] encryptedBytes=mac.doFinal();
    return Base64.encodeBase64String(encryptedBytes);
  }
 catch (  NoSuchAlgorithmException|InvalidKeyException|UnsupportedEncodingException e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.9668016194331984
105334,"@Override public void channelRead0(ChannelHandlerContext ctx,HttpObject msg) throws Exception {
  if (msg instanceof HttpRequest) {
    HttpRequest request=this.request=(HttpRequest)msg;
    responseContent.setLength(0);
    if (request.getMethod().equals(HttpMethod.POST)) {
      URI uri=new URI(request.getUri());
      String signature=null;
      String expires=null;
      String metadata=null;
      String hostname=null;
      long contentLength=0;
      for (      Entry<String,String> entry : request.headers()) {
switch (entry.getKey()) {
case HEADER_SIGNATURE:
          signature=entry.getValue();
        break;
case HEADER_METADATA:
      metadata=entry.getValue();
    break;
case HEADER_EXPIRES:
  expires=entry.getValue();
break;
case HEADER_HOST:
hostname=entry.getValue();
break;
case HttpHeaders.Names.CONTENT_LENGTH:
contentLength=Long.valueOf(entry.getValue());
break;
}
}
logger.info(""String_Node_Str"" + signature);
logger.info(""String_Node_Str"" + metadata);
logger.info(""String_Node_Str"" + expires);
logger.info(""String_Node_Str"" + hostname);
logger.info(""String_Node_Str"" + contentLength);
QueryStringDecoder decoderQuery=new QueryStringDecoder(uri);
Map<String,List<String>> uriAttributes=decoderQuery.parameters();
uuid=uriAttributes.get(""String_Node_Str"").get(0);
logger.info(""String_Node_Str"" + uuid);
UploadEntity uploadEntity=null;
try {
storageResource.validatePostUploadRequest(signature,metadata,expires,hostname,contentLength,uuid);
uploadEntity=storageResource.createUploadEntity(uuid,metadata,contentLength);
}
 catch (InvalidParameterValueException ex) {
logger.error(""String_Node_Str"",ex);
responseContent.append(ex.getMessage());
writeResponse(ctx.channel(),HttpResponseStatus.BAD_REQUEST);
requestProcessed=true;
return;
}
if (uploadEntity == null) {
logger.error(""String_Node_Str"");
responseContent.append(""String_Node_Str"");
writeResponse(ctx.channel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
requestProcessed=true;
return;
}
DiskFileUpload.baseDirectory=uploadEntity.getInstallPathPrefix();
logger.info(""String_Node_Str"" + DiskFileUpload.baseDirectory);
try {
decoder=new HttpPostRequestDecoder(factory,request);
}
 catch (ErrorDataDecoderException|IncompatibleDataDecoderException e) {
logger.error(""String_Node_Str"",e);
responseContent.append(e.getMessage());
writeResponse(ctx.channel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
requestProcessed=true;
return;
}
}
 else {
logger.warn(""String_Node_Str"");
responseContent.append(""String_Node_Str"");
writeResponse(ctx.channel(),HttpResponseStatus.BAD_REQUEST);
requestProcessed=true;
return;
}
}
if (decoder != null) {
if (msg instanceof HttpContent) {
HttpContent chunk=(HttpContent)msg;
try {
decoder.offer(chunk);
}
 catch (ErrorDataDecoderException e) {
logger.error(""String_Node_Str"",e);
responseContent.append(e.getMessage());
writeResponse(ctx.channel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
requestProcessed=true;
return;
}
if (chunk instanceof LastHttpContent) {
writeResponse(ctx.channel(),readFileUploadData());
reset();
}
}
}
}","@Override public void channelRead0(ChannelHandlerContext ctx,HttpObject msg) throws Exception {
  if (msg instanceof HttpRequest) {
    HttpRequest request=this.request=(HttpRequest)msg;
    responseContent.setLength(0);
    if (request.getMethod().equals(HttpMethod.POST)) {
      URI uri=new URI(request.getUri());
      String signature=null;
      String expires=null;
      String metadata=null;
      String hostname=null;
      long contentLength=0;
      for (      Entry<String,String> entry : request.headers()) {
switch (entry.getKey()) {
case HEADER_SIGNATURE:
          signature=entry.getValue();
        break;
case HEADER_METADATA:
      metadata=entry.getValue();
    break;
case HEADER_EXPIRES:
  expires=entry.getValue();
break;
case HEADER_HOST:
hostname=entry.getValue();
break;
case HttpHeaders.Names.CONTENT_LENGTH:
contentLength=Long.parseLong(entry.getValue());
break;
}
}
logger.info(""String_Node_Str"" + signature);
logger.info(""String_Node_Str"" + metadata);
logger.info(""String_Node_Str"" + expires);
logger.info(""String_Node_Str"" + hostname);
logger.info(""String_Node_Str"" + contentLength);
QueryStringDecoder decoderQuery=new QueryStringDecoder(uri);
Map<String,List<String>> uriAttributes=decoderQuery.parameters();
uuid=uriAttributes.get(""String_Node_Str"").get(0);
logger.info(""String_Node_Str"" + uuid);
UploadEntity uploadEntity=null;
try {
storageResource.validatePostUploadRequest(signature,metadata,expires,hostname,contentLength,uuid);
uploadEntity=storageResource.createUploadEntity(uuid,metadata,contentLength);
}
 catch (InvalidParameterValueException ex) {
logger.error(""String_Node_Str"",ex);
responseContent.append(ex.getMessage());
writeResponse(ctx.channel(),HttpResponseStatus.BAD_REQUEST);
requestProcessed=true;
return;
}
if (uploadEntity == null) {
logger.error(""String_Node_Str"");
responseContent.append(""String_Node_Str"");
writeResponse(ctx.channel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
requestProcessed=true;
return;
}
DiskFileUpload.baseDirectory=uploadEntity.getInstallPathPrefix();
logger.info(""String_Node_Str"" + DiskFileUpload.baseDirectory);
try {
decoder=new HttpPostRequestDecoder(factory,request);
}
 catch (ErrorDataDecoderException|IncompatibleDataDecoderException e) {
logger.error(""String_Node_Str"",e);
responseContent.append(e.getMessage());
writeResponse(ctx.channel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
requestProcessed=true;
return;
}
}
 else {
logger.warn(""String_Node_Str"");
responseContent.append(""String_Node_Str"");
writeResponse(ctx.channel(),HttpResponseStatus.BAD_REQUEST);
requestProcessed=true;
return;
}
}
if (decoder != null) {
if (msg instanceof HttpContent) {
HttpContent chunk=(HttpContent)msg;
try {
decoder.offer(chunk);
}
 catch (ErrorDataDecoderException e) {
logger.error(""String_Node_Str"",e);
responseContent.append(e.getMessage());
writeResponse(ctx.channel(),HttpResponseStatus.INTERNAL_SERVER_ERROR);
requestProcessed=true;
return;
}
if (chunk instanceof LastHttpContent) {
writeResponse(ctx.channel(),readFileUploadData());
reset();
}
}
}
}",0.9973718791064388
105335,"public UploadEntity createUploadEntity(String uuid,String metadata,long contentLength){
  TemplateOrVolumePostUploadCommand cmd=getTemplateOrVolumePostUploadCmd(metadata);
  UploadEntity uploadEntity=null;
  if (cmd == null) {
    String errorMessage=""String_Node_Str"";
    updateStateMapWithError(uuid,errorMessage);
    throw new InvalidParameterValueException(errorMessage);
  }
 else {
    uuid=cmd.getEntityUUID();
    if (isOneTimePostUrlUsed(cmd)) {
      uploadEntity=uploadEntityStateMap.get(uuid);
      StringBuilder errorMessage=new StringBuilder(""String_Node_Str"");
      if (uploadEntity != null) {
        errorMessage.append(""String_Node_Str"").append(uploadEntity.getUploadState()).append(""String_Node_Str"");
      }
      throw new InvalidParameterValueException(errorMessage.toString());
    }
    int maxSizeInGB=Integer.valueOf(cmd.getMaxUploadSize());
    int contentLengthInGB=getSizeInGB(contentLength);
    if (contentLengthInGB > maxSizeInGB) {
      String errorMessage=""String_Node_Str"" + contentLengthInGB + ""String_Node_Str""+ maxSizeInGB+ ""String_Node_Str"";
      updateStateMapWithError(uuid,errorMessage);
      throw new InvalidParameterValueException(errorMessage);
    }
    checkSecondaryStorageResourceLimit(cmd,contentLengthInGB);
    try {
      String absolutePath=cmd.getAbsolutePath();
      uploadEntity=new UploadEntity(uuid,cmd.getEntityId(),UploadEntity.Status.IN_PROGRESS,cmd.getName(),absolutePath);
      uploadEntity.setMetaDataPopulated(true);
      uploadEntity.setResourceType(UploadEntity.ResourceType.valueOf(cmd.getType()));
      uploadEntity.setFormat(Storage.ImageFormat.valueOf(cmd.getImageFormat()));
      uploadEntity.setTemplatePath(absolutePath);
      String dataStoreUrl=cmd.getDataTo();
      String installPathPrefix=this.getRootDir(dataStoreUrl) + File.separator + absolutePath;
      uploadEntity.setInstallPathPrefix(installPathPrefix);
      uploadEntity.setHvm(cmd.getRequiresHvm());
      uploadEntity.setChksum(cmd.getChecksum());
      uploadEntity.setMaxSizeInGB(maxSizeInGB);
      uploadEntity.setDescription(cmd.getDescription());
      uploadEntity.setContentLength(contentLength);
      if (!_storage.exists(installPathPrefix)) {
        _storage.mkdir(installPathPrefix);
      }
      uploadEntityStateMap.put(uuid,uploadEntity);
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
      updateStateMapWithError(uuid,e.getMessage());
    }
  }
  return uploadEntity;
}","public UploadEntity createUploadEntity(String uuid,String metadata,long contentLength){
  TemplateOrVolumePostUploadCommand cmd=getTemplateOrVolumePostUploadCmd(metadata);
  UploadEntity uploadEntity=null;
  if (cmd == null) {
    String errorMessage=""String_Node_Str"";
    updateStateMapWithError(uuid,errorMessage);
    throw new InvalidParameterValueException(errorMessage);
  }
 else {
    uuid=cmd.getEntityUUID();
    if (isOneTimePostUrlUsed(cmd)) {
      uploadEntity=uploadEntityStateMap.get(uuid);
      StringBuilder errorMessage=new StringBuilder(""String_Node_Str"");
      if (uploadEntity != null) {
        errorMessage.append(""String_Node_Str"").append(uploadEntity.getUploadState()).append(""String_Node_Str"");
      }
      throw new InvalidParameterValueException(errorMessage.toString());
    }
    int maxSizeInGB=Integer.parseInt(cmd.getMaxUploadSize());
    int contentLengthInGB=getSizeInGB(contentLength);
    if (contentLengthInGB > maxSizeInGB) {
      String errorMessage=""String_Node_Str"" + contentLengthInGB + ""String_Node_Str""+ maxSizeInGB+ ""String_Node_Str"";
      updateStateMapWithError(uuid,errorMessage);
      throw new InvalidParameterValueException(errorMessage);
    }
    checkSecondaryStorageResourceLimit(cmd,contentLengthInGB);
    try {
      String absolutePath=cmd.getAbsolutePath();
      uploadEntity=new UploadEntity(uuid,cmd.getEntityId(),UploadEntity.Status.IN_PROGRESS,cmd.getName(),absolutePath);
      uploadEntity.setMetaDataPopulated(true);
      uploadEntity.setResourceType(UploadEntity.ResourceType.valueOf(cmd.getType()));
      uploadEntity.setFormat(Storage.ImageFormat.valueOf(cmd.getImageFormat()));
      uploadEntity.setTemplatePath(absolutePath);
      String dataStoreUrl=cmd.getDataTo();
      String installPathPrefix=this.getRootDir(dataStoreUrl) + File.separator + absolutePath;
      uploadEntity.setInstallPathPrefix(installPathPrefix);
      uploadEntity.setHvm(cmd.getRequiresHvm());
      uploadEntity.setChksum(cmd.getChecksum());
      uploadEntity.setMaxSizeInGB(maxSizeInGB);
      uploadEntity.setDescription(cmd.getDescription());
      uploadEntity.setContentLength(contentLength);
      if (!_storage.exists(installPathPrefix)) {
        _storage.mkdir(installPathPrefix);
      }
      uploadEntityStateMap.put(uuid,uploadEntity);
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
      updateStateMapWithError(uuid,e.getMessage());
    }
  }
  return uploadEntity;
}",0.9969715324046032
105336,"public String postUpload(String uuid,String filename){
  UploadEntity uploadEntity=uploadEntityStateMap.get(uuid);
  int installTimeoutPerGig=180 * 60 * 1000;
  String resourcePath=uploadEntity.getInstallPathPrefix();
  String finalResourcePath=uploadEntity.getTmpltPath();
  UploadEntity.ResourceType resourceType=uploadEntity.getResourceType();
  String fileSavedTempLocation=uploadEntity.getInstallPathPrefix() + ""String_Node_Str"" + filename;
  String uploadedFileExtension=FilenameUtils.getExtension(filename);
  String userSelectedFormat=uploadEntity.getFormat().toString();
  if (uploadedFileExtension.equals(""String_Node_Str"") || uploadedFileExtension.equals(""String_Node_Str"") || uploadedFileExtension.equals(""String_Node_Str"")) {
    userSelectedFormat+=""String_Node_Str"" + uploadedFileExtension;
  }
  String formatError=ImageStoreUtil.checkTemplateFormat(fileSavedTempLocation,userSelectedFormat);
  if (StringUtils.isNotBlank(formatError)) {
    String errorString=""String_Node_Str"" + userSelectedFormat + ""String_Node_Str""+ formatError;
    s_logger.error(errorString);
    return errorString;
  }
  int imgSizeGigs=getSizeInGB(_storage.getSize(fileSavedTempLocation));
  int maxSize=uploadEntity.getMaxSizeInGB();
  if (imgSizeGigs > maxSize) {
    String errorMessage=""String_Node_Str"" + imgSizeGigs + ""String_Node_Str""+ maxSize+ ""String_Node_Str"";
    s_logger.error(errorMessage);
    return errorMessage;
  }
  imgSizeGigs++;
  long timeout=(long)imgSizeGigs * installTimeoutPerGig;
  Script scr=new Script(getScriptLocation(resourceType),timeout,s_logger);
  scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
  scr.add(""String_Node_Str"",Long.toString(UploadEntity.s_maxTemplateSize));
  if (uploadEntity.getDescription() != null && uploadEntity.getDescription().length() > 1) {
    scr.add(""String_Node_Str"",uploadEntity.getDescription());
  }
  if (uploadEntity.isHvm()) {
    scr.add(""String_Node_Str"");
  }
  String checkSum=uploadEntity.getChksum();
  if (StringUtils.isNotBlank(checkSum)) {
    scr.add(""String_Node_Str"",checkSum);
  }
  String extension=uploadEntity.getFormat().getFileExtension();
  String templateName=""String_Node_Str"";
  if (extension.equals(""String_Node_Str"")) {
    templateName=uploadEntity.getUuid().trim().replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    templateName=java.util.UUID.nameUUIDFromBytes((uploadEntity.getFilename() + System.currentTimeMillis()).getBytes()).toString();
  }
  String templateFilename=templateName + ""String_Node_Str"" + extension;
  uploadEntity.setTemplatePath(finalResourcePath + ""String_Node_Str"" + templateFilename);
  scr.add(""String_Node_Str"",templateFilename);
  scr.add(""String_Node_Str"",resourcePath);
  scr.add(""String_Node_Str"",fileSavedTempLocation);
  if (uploadEntity.getChksum() != null && uploadEntity.getChksum().length() > 1) {
    scr.add(""String_Node_Str"",uploadEntity.getChksum());
  }
  scr.add(""String_Node_Str"");
  String result;
  result=scr.execute();
  if (result != null) {
    return result;
  }
  File downloadedTemplate=new File(resourcePath + ""String_Node_Str"" + templateFilename);
  _storage.setWorldReadableAndWriteable(downloadedTemplate);
  String propertiesFile=resourcePath;
  if (resourceType == UploadEntity.ResourceType.TEMPLATE) {
    propertiesFile+=""String_Node_Str"";
  }
 else {
    propertiesFile+=""String_Node_Str"";
  }
  File templateProperties=new File(propertiesFile);
  _storage.setWorldReadableAndWriteable(templateProperties);
  TemplateLocation loc=new TemplateLocation(_storage,resourcePath);
  try {
    loc.create(uploadEntity.getEntityId(),true,uploadEntity.getFilename());
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"" + resourcePath,e);
    loc.purge();
    return ""String_Node_Str"" + e.getMessage();
  }
  Map<String,Processor> processors=_dlMgr.getProcessors();
  for (  Processor processor : processors.values()) {
    FormatInfo info=null;
    try {
      info=processor.process(resourcePath,null,templateName);
    }
 catch (    InternalErrorException e) {
      s_logger.error(""String_Node_Str"",e);
      return e.toString();
    }
    if (info != null) {
      loc.addFormat(info);
      uploadEntity.setVirtualSize(info.virtualSize);
      uploadEntity.setPhysicalSize(info.size);
      break;
    }
  }
  if (!loc.save()) {
    s_logger.warn(""String_Node_Str"");
    loc.purge();
  }
  uploadEntity.setStatus(UploadEntity.Status.COMPLETED);
  uploadEntityStateMap.put(uploadEntity.getUuid(),uploadEntity);
  return null;
}","public String postUpload(String uuid,String filename){
  UploadEntity uploadEntity=uploadEntityStateMap.get(uuid);
  int installTimeoutPerGig=180 * 60 * 1000;
  String resourcePath=uploadEntity.getInstallPathPrefix();
  String finalResourcePath=uploadEntity.getTmpltPath();
  UploadEntity.ResourceType resourceType=uploadEntity.getResourceType();
  String fileSavedTempLocation=uploadEntity.getInstallPathPrefix() + ""String_Node_Str"" + filename;
  String uploadedFileExtension=FilenameUtils.getExtension(filename);
  String userSelectedFormat=uploadEntity.getFormat().toString();
  if (uploadedFileExtension.equals(""String_Node_Str"") || uploadedFileExtension.equals(""String_Node_Str"") || uploadedFileExtension.equals(""String_Node_Str"")) {
    userSelectedFormat+=""String_Node_Str"" + uploadedFileExtension;
  }
  String formatError=ImageStoreUtil.checkTemplateFormat(fileSavedTempLocation,userSelectedFormat);
  if (StringUtils.isNotBlank(formatError)) {
    String errorString=""String_Node_Str"" + userSelectedFormat + ""String_Node_Str""+ formatError;
    s_logger.error(errorString);
    return errorString;
  }
  int imgSizeGigs=getSizeInGB(_storage.getSize(fileSavedTempLocation));
  int maxSize=uploadEntity.getMaxSizeInGB();
  if (imgSizeGigs > maxSize) {
    String errorMessage=""String_Node_Str"" + imgSizeGigs + ""String_Node_Str""+ maxSize+ ""String_Node_Str"";
    s_logger.error(errorMessage);
    return errorMessage;
  }
  imgSizeGigs++;
  long timeout=(long)imgSizeGigs * installTimeoutPerGig;
  Script scr=new Script(getScriptLocation(resourceType),timeout,s_logger);
  scr.add(""String_Node_Str"",Integer.toString(imgSizeGigs));
  scr.add(""String_Node_Str"",Long.toString(UploadEntity.s_maxTemplateSize));
  if (uploadEntity.getDescription() != null && uploadEntity.getDescription().length() > 1) {
    scr.add(""String_Node_Str"",uploadEntity.getDescription());
  }
  if (uploadEntity.isHvm()) {
    scr.add(""String_Node_Str"");
  }
  String checkSum=uploadEntity.getChksum();
  if (StringUtils.isNotBlank(checkSum)) {
    scr.add(""String_Node_Str"",checkSum);
  }
  String extension=uploadEntity.getFormat().getFileExtension();
  String templateName=""String_Node_Str"";
  if (extension.equals(""String_Node_Str"")) {
    templateName=uploadEntity.getUuid().trim().replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      templateName=UUID.nameUUIDFromBytes((uploadEntity.getFilename() + System.currentTimeMillis()).getBytes(""String_Node_Str"")).toString();
    }
 catch (    UnsupportedEncodingException e) {
      templateName=uploadEntity.getUuid().trim().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String templateFilename=templateName + ""String_Node_Str"" + extension;
  uploadEntity.setTemplatePath(finalResourcePath + ""String_Node_Str"" + templateFilename);
  scr.add(""String_Node_Str"",templateFilename);
  scr.add(""String_Node_Str"",resourcePath);
  scr.add(""String_Node_Str"",fileSavedTempLocation);
  if (uploadEntity.getChksum() != null && uploadEntity.getChksum().length() > 1) {
    scr.add(""String_Node_Str"",uploadEntity.getChksum());
  }
  scr.add(""String_Node_Str"");
  String result;
  result=scr.execute();
  if (result != null) {
    return result;
  }
  File downloadedTemplate=new File(resourcePath + ""String_Node_Str"" + templateFilename);
  _storage.setWorldReadableAndWriteable(downloadedTemplate);
  String propertiesFile=resourcePath;
  if (resourceType == UploadEntity.ResourceType.TEMPLATE) {
    propertiesFile+=""String_Node_Str"";
  }
 else {
    propertiesFile+=""String_Node_Str"";
  }
  File templateProperties=new File(propertiesFile);
  _storage.setWorldReadableAndWriteable(templateProperties);
  TemplateLocation loc=new TemplateLocation(_storage,resourcePath);
  try {
    loc.create(uploadEntity.getEntityId(),true,uploadEntity.getFilename());
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"" + resourcePath,e);
    loc.purge();
    return ""String_Node_Str"" + e.getMessage();
  }
  Map<String,Processor> processors=_dlMgr.getProcessors();
  for (  Processor processor : processors.values()) {
    FormatInfo info=null;
    try {
      info=processor.process(resourcePath,null,templateName);
    }
 catch (    InternalErrorException e) {
      s_logger.error(""String_Node_Str"",e);
      return e.toString();
    }
    if (info != null) {
      loc.addFormat(info);
      uploadEntity.setVirtualSize(info.virtualSize);
      uploadEntity.setPhysicalSize(info.size);
      break;
    }
  }
  if (!loc.save()) {
    s_logger.warn(""String_Node_Str"");
    loc.purge();
  }
  uploadEntity.setStatus(UploadEntity.Status.COMPLETED);
  uploadEntityStateMap.put(uploadEntity.getUuid(),uploadEntity);
  return null;
}",0.9760713508810094
105337,"public static String generateSignature(String data,String key){
  try {
    final Mac mac=Mac.getInstance(""String_Node_Str"");
    final SecretKeySpec keySpec=new SecretKeySpec(key.getBytes(),""String_Node_Str"");
    mac.init(keySpec);
    mac.update(data.getBytes());
    final byte[] encryptedBytes=mac.doFinal();
    return Base64.encodeBase64String(encryptedBytes);
  }
 catch (  NoSuchAlgorithmException|InvalidKeyException e) {
    s_logger.error(""String_Node_Str"",e);
    return null;
  }
}","public static String generateSignature(String data,String key){
  try {
    final Mac mac=Mac.getInstance(""String_Node_Str"");
    final SecretKeySpec keySpec=new SecretKeySpec(key.getBytes(""String_Node_Str""),""String_Node_Str"");
    mac.init(keySpec);
    mac.update(data.getBytes());
    final byte[] encryptedBytes=mac.doFinal();
    return Base64.encodeBase64String(encryptedBytes);
  }
 catch (  NoSuchAlgorithmException|InvalidKeyException|UnsupportedEncodingException e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.8754578754578755
105338,"protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if (!requestLogged) {
            String requestMsg=request.toString();
            if (requestMsg != null) {
              s_logger.debug(""String_Node_Str"" + requestMsg);
            }
            requestLogged=true;
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ReadyCommand && ((ReadyCommand)cmd).getDetails() != null) {
          s_logger.debug(""String_Node_Str"" + ((ReadyCommand)cmd).getDetails());
          System.exit(1);
          return;
        }
 else         if (cmd instanceof MaintainCommand) {
          s_logger.debug(""String_Node_Str"");
          cancelTasks();
          _reconnectAllowed=false;
          answer=new MaintainAnswer((MaintainCommand)cmd);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          if (cmd instanceof ReadyCommand) {
            processReadyCommand(cmd);
          }
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      String responseMsg=response.toString();
      if (responseMsg != null) {
        s_logger.debug(response.toString());
      }
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}","protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if (!requestLogged) {
            String requestMsg=request.toString();
            if (requestMsg != null) {
              s_logger.debug(""String_Node_Str"" + requestMsg);
            }
            requestLogged=true;
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,(long)watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ReadyCommand && ((ReadyCommand)cmd).getDetails() != null) {
          s_logger.debug(""String_Node_Str"" + ((ReadyCommand)cmd).getDetails());
          System.exit(1);
          return;
        }
 else         if (cmd instanceof MaintainCommand) {
          s_logger.debug(""String_Node_Str"");
          cancelTasks();
          _reconnectAllowed=false;
          answer=new MaintainAnswer((MaintainCommand)cmd);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          if (cmd instanceof ReadyCommand) {
            processReadyCommand(cmd);
          }
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      String responseMsg=response.toString();
      if (responseMsg != null) {
        s_logger.debug(response.toString());
      }
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}",0.999177406087195
105339,"public void processStartupAnswer(Answer answer,Response response,Link link){
  boolean cancelled=false;
synchronized (this) {
    if (_startup != null) {
      _startup.cancel();
      _startup=null;
    }
 else {
      cancelled=true;
    }
  }
  final StartupAnswer startup=(StartupAnswer)answer;
  if (!startup.getResult()) {
    s_logger.error(""String_Node_Str"" + answer.getDetails());
    System.exit(1);
  }
  if (cancelled) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  s_logger.info(""String_Node_Str"" + startup.getHostId());
  setId(startup.getHostId());
  _pingInterval=startup.getPingInterval() * 1000;
  setLastPingResponseTime();
  scheduleWatch(link,response,_pingInterval,_pingInterval);
  _ugentTaskPool.setKeepAliveTime(2 * _pingInterval,TimeUnit.MILLISECONDS);
  s_logger.info(""String_Node_Str"" + getId());
}","public void processStartupAnswer(Answer answer,Response response,Link link){
  boolean cancelled=false;
synchronized (this) {
    if (_startup != null) {
      _startup.cancel();
      _startup=null;
    }
 else {
      cancelled=true;
    }
  }
  final StartupAnswer startup=(StartupAnswer)answer;
  if (!startup.getResult()) {
    s_logger.error(""String_Node_Str"" + answer.getDetails());
    System.exit(1);
  }
  if (cancelled) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  s_logger.info(""String_Node_Str"" + startup.getHostId());
  setId(startup.getHostId());
  _pingInterval=(long)startup.getPingInterval() * 1000;
  setLastPingResponseTime();
  scheduleWatch(link,response,_pingInterval,_pingInterval);
  _ugentTaskPool.setKeepAliveTime(2 * _pingInterval,TimeUnit.MILLISECONDS);
  s_logger.info(""String_Node_Str"" + getId());
}",0.9964285714285714
105340,"private VirtualMachineGuru getVmGuru(VirtualMachine vm){
  return _vmGurus.get(vm.getType());
}","private VirtualMachineGuru getVmGuru(VirtualMachine vm){
  if (vm != null)   return _vmGurus.get(vm.getType());
  return null;
}",0.852017937219731
105341,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> configs=_configDao.getConfiguration(null,params);
  String globalStorageOverprovisioningFactor=configs.get(""String_Node_Str"");
  _storageOverprovisioningFactor=new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor,2.0f));
  _extraBytesPerVolume=0;
  _rand=new Random(System.currentTimeMillis());
  _dontMatter=Boolean.parseBoolean(configs.get(""String_Node_Str""));
  String allocationAlgorithm=configs.get(""String_Node_Str"");
  if (allocationAlgorithm != null) {
    _allocationAlgorithm=allocationAlgorithm;
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  if (_configDao != null) {
    Map<String,String> configs=_configDao.getConfiguration(null,params);
    String globalStorageOverprovisioningFactor=configs.get(""String_Node_Str"");
    _storageOverprovisioningFactor=new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor,2.0f));
    _extraBytesPerVolume=0;
    _rand=new Random(System.currentTimeMillis());
    _dontMatter=Boolean.parseBoolean(configs.get(""String_Node_Str""));
    String allocationAlgorithm=configs.get(""String_Node_Str"");
    if (allocationAlgorithm != null) {
      _allocationAlgorithm=allocationAlgorithm;
    }
    return true;
  }
  return false;
}",0.935309973045822
105342,"@Override public void completeCall(Object returnObject){
  assert(_sourceAddress != null);
  assert(_targetAddress != null);
  RpcCallResponsePdu pdu=new RpcCallResponsePdu();
  pdu.setCommand(_requestPdu.getCommand());
  pdu.setRequestTag(_requestPdu.getRequestTag());
  pdu.setRequestStartTick(_requestPdu.getRequestStartTick());
  pdu.setRequestStartTick(RpcCallResponsePdu.RESULT_SUCCESSFUL);
  if (returnObject != null) {
    assert(_rpcProvider.getMessageSerializer() != null);
    pdu.setSerializedResult(_rpcProvider.getMessageSerializer().serializeTo(returnObject.getClass(),returnObject));
  }
  _rpcProvider.sendRpcPdu(_targetAddress,_sourceAddress,_rpcProvider.getMessageSerializer().serializeTo(RpcCallResponsePdu.class,pdu));
}","@Override public void completeCall(Object returnObject){
  assert(_sourceAddress != null);
  assert(_targetAddress != null);
  RpcCallResponsePdu pdu=new RpcCallResponsePdu();
  pdu.setCommand(_requestPdu.getCommand());
  pdu.setRequestTag(_requestPdu.getRequestTag());
  pdu.setRequestStartTick(_requestPdu.getRequestStartTick());
  pdu.setRequestStartTick(RpcCallResponsePdu.RESULT_SUCCESSFUL);
  if (returnObject != null) {
    assert(_rpcProvider.getMessageSerializer() != null);
    pdu.setSerializedResult(_rpcProvider.getMessageSerializer().serializeTo(returnObject.getClass(),returnObject));
  }
  _rpcProvider.sendRpcPdu(_sourceAddress,_targetAddress,_rpcProvider.getMessageSerializer().serializeTo(RpcCallResponsePdu.class,pdu));
}",0.9838056680161944
105343,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.randomUUID().toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.randomUUID().toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}",0.9997557202182232
105344,"private void postDiskConfigBeforeStart(VirtualMachineMO vmMo,VirtualMachineTO vmSpec,DiskTO[] sortedDisks,int ideControllerKey,int scsiControllerKey,Map<String,String> iqnToPath,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  VirtualMachineDiskInfoBuilder diskInfoBuilder=vmMo.getDiskInfoBuilder();
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO)     continue;
    VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
    VirtualMachineDiskInfo diskInfo=getMatchingExistingDisk(diskInfoBuilder,vol,hyperHost,context);
    assert(diskInfo != null);
    String[] diskChain=diskInfo.getDiskChain();
    assert(diskChain.length > 0);
    Map<String,String> details=vol.getDetails();
    boolean managed=false;
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    }
    DatastoreFile file=new DatastoreFile(diskChain[0]);
    if (managed) {
      DatastoreFile originalFile=new DatastoreFile(volumeTO.getPath());
      if (!file.getFileBaseName().equalsIgnoreCase(originalFile.getFileBaseName())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ diskChain[0]);
      }
    }
 else {
      if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ file.getFileBaseName());
      }
    }
    VolumeObjectTO volInSpec=getVolumeInSpec(vmSpec,volumeTO);
    if (managed) {
      String datastoreVolumePath=diskChain[0];
      iqnToPath.put(details.get(DiskTO.IQN),datastoreVolumePath);
      vol.setPath(datastoreVolumePath);
      volumeTO.setPath(datastoreVolumePath);
      volInSpec.setPath(datastoreVolumePath);
    }
 else {
      volInSpec.setPath(file.getFileBaseName());
    }
    volInSpec.setChainInfo(_gson.toJson(diskInfo));
  }
}","private void postDiskConfigBeforeStart(VirtualMachineMO vmMo,VirtualMachineTO vmSpec,DiskTO[] sortedDisks,int ideControllerKey,int scsiControllerKey,Map<String,String> iqnToPath,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  VirtualMachineDiskInfoBuilder diskInfoBuilder=vmMo.getDiskInfoBuilder();
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO)     continue;
    VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
    VirtualMachineDiskInfo diskInfo=getMatchingExistingDisk(diskInfoBuilder,vol,hyperHost,context);
    assert(diskInfo != null);
    String[] diskChain=diskInfo.getDiskChain();
    assert(diskChain.length > 0);
    Map<String,String> details=vol.getDetails();
    boolean managed=false;
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    }
    DatastoreFile file=new DatastoreFile(diskChain[0]);
    if (managed) {
      DatastoreFile originalFile=new DatastoreFile(volumeTO.getPath());
      if (!file.getFileBaseName().equalsIgnoreCase(originalFile.getFileBaseName())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ diskChain[0]);
      }
    }
 else {
      if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ file.getFileBaseName());
      }
    }
    VolumeObjectTO volInSpec=getVolumeInSpec(vmSpec,volumeTO);
    if (volInSpec != null) {
      if (managed) {
        String datastoreVolumePath=diskChain[0];
        iqnToPath.put(details.get(DiskTO.IQN),datastoreVolumePath);
        vol.setPath(datastoreVolumePath);
        volumeTO.setPath(datastoreVolumePath);
        volInSpec.setPath(datastoreVolumePath);
      }
 else {
        volInSpec.setPath(file.getFileBaseName());
      }
      volInSpec.setChainInfo(_gson.toJson(diskInfo));
    }
  }
}",0.9830923793187945
105345,"@Override public Answer createTemplateFromSnapshot(CopyCommand cmd){
  SnapshotObjectTO snapshot=(SnapshotObjectTO)cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)cmd.getDestTO();
  DataStoreTO imageStore=template.getDataStore();
  String details;
  String uniqeName=UUID.randomUUID().toString();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    if (!(imageStore instanceof NfsTO)) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    NfsTO nfsSvr=(NfsTO)imageStore;
    Ternary<String,Long,Long> result=createTemplateFromSnapshot(template.getPath(),uniqeName,nfsSvr.getUrl(),snapshot.getPath(),template.getId(),cmd.getWait() * 1000);
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(result.first());
    newTemplate.setPhysicalSize(result.second());
    newTemplate.setSize(result.third());
    newTemplate.setFormat(ImageFormat.OVA);
    newTemplate.setName(uniqeName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    return new CopyCmdAnswer(details);
  }
}","@Override public Answer createTemplateFromSnapshot(CopyCommand cmd){
  SnapshotObjectTO snapshot=(SnapshotObjectTO)cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)cmd.getDestTO();
  DataStoreTO imageStore=template.getDataStore();
  String details;
  String uniqeName=UUID.randomUUID().toString();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    if (!(imageStore instanceof NfsTO)) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    NfsTO nfsSvr=(NfsTO)imageStore;
    Ternary<String,Long,Long> result=createTemplateFromSnapshot(template.getPath(),uniqeName,nfsSvr.getUrl(),snapshot.getPath(),template.getId(),(long)cmd.getWait() * 1000);
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(result.first());
    newTemplate.setPhysicalSize(result.second());
    newTemplate.setSize(result.third());
    newTemplate.setFormat(ImageFormat.OVA);
    newTemplate.setName(uniqeName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    return new CopyCmdAnswer(details);
  }
}",0.9976544175136826
105346,"@Override public Answer copyVolumeFromImageCacheToPrimary(CopyCommand cmd){
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    NfsTO srcStore=(NfsTO)srcVolume.getDataStore();
    DataStoreTO destStore=destVolume.getDataStore();
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String uuid=destStore.getUuid();
    ManagedObjectReference morDatastore=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,uuid);
    if (morDatastore == null) {
      URI uri=new URI(destStore.getUrl());
      morDatastore=hyperHost.mountDatastore(false,uri.getHost(),0,uri.getPath(),destStore.getUuid().replace(""String_Node_Str"",""String_Node_Str""));
      if (morDatastore == null) {
        throw new Exception(""String_Node_Str"" + uri.getHost() + ""String_Node_Str""+ uri.getPath());
      }
    }
    Pair<String,String> result=copyVolumeFromSecStorage(hyperHost,srcVolume.getPath(),new DatastoreMO(context,morDatastore),srcStore.getUrl(),cmd.getWait() * 1000);
    deleteVolumeDirOnSecondaryStorage(result.first(),srcStore.getUrl());
    VolumeObjectTO newVolume=new VolumeObjectTO();
    newVolume.setPath(result.second());
    return new CopyCmdAnswer(newVolume);
  }
 catch (  Throwable t) {
    if (t instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"";
    s_logger.error(msg,t);
    return new CopyCmdAnswer(""String_Node_Str"" + VmwareHelper.getExceptionMessage(t));
  }
}","@Override public Answer copyVolumeFromImageCacheToPrimary(CopyCommand cmd){
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    NfsTO srcStore=(NfsTO)srcVolume.getDataStore();
    DataStoreTO destStore=destVolume.getDataStore();
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String uuid=destStore.getUuid();
    ManagedObjectReference morDatastore=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,uuid);
    if (morDatastore == null) {
      URI uri=new URI(destStore.getUrl());
      morDatastore=hyperHost.mountDatastore(false,uri.getHost(),0,uri.getPath(),destStore.getUuid().replace(""String_Node_Str"",""String_Node_Str""));
      if (morDatastore == null) {
        throw new Exception(""String_Node_Str"" + uri.getHost() + ""String_Node_Str""+ uri.getPath());
      }
    }
    Pair<String,String> result=copyVolumeFromSecStorage(hyperHost,srcVolume.getPath(),new DatastoreMO(context,morDatastore),srcStore.getUrl(),(long)cmd.getWait() * 1000);
    deleteVolumeDirOnSecondaryStorage(result.first(),srcStore.getUrl());
    VolumeObjectTO newVolume=new VolumeObjectTO();
    newVolume.setPath(result.second());
    return new CopyCmdAnswer(newVolume);
  }
 catch (  Throwable t) {
    if (t instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"";
    s_logger.error(msg,t);
    return new CopyCmdAnswer(""String_Node_Str"" + VmwareHelper.getExceptionMessage(t));
  }
}",0.998149290561382
105347,"@Override public Answer createVolumeFromSnapshot(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataTO destData=cmd.getDestTO();
  DataStoreTO pool=destData.getDataStore();
  DataStoreTO imageStore=srcData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String primaryStorageNameLabel=pool.getUuid();
  String secondaryStorageUrl=nfsImageStore.getUrl();
  String backedUpSnapshotUuid=snapshot.getPath();
  int index=backedUpSnapshotUuid.lastIndexOf(File.separator);
  String backupPath=backedUpSnapshotUuid.substring(0,index);
  backedUpSnapshotUuid=backedUpSnapshotUuid.substring(index + 1);
  String details=null;
  String newVolumeName=VmwareHelper.getVCenterSafeUuid();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    ManagedObjectReference morPrimaryDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,primaryStorageNameLabel);
    if (morPrimaryDs == null) {
      String msg=""String_Node_Str"" + primaryStorageNameLabel;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
    DatastoreMO primaryDsMo=new DatastoreMO(hyperHost.getContext(),morPrimaryDs);
    restoreVolumeFromSecStorage(hyperHost,primaryDsMo,newVolumeName,secondaryStorageUrl,backupPath,backedUpSnapshotUuid,cmd.getWait() * 1000);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(newVolumeName);
    return new CopyCmdAnswer(newVol);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
  }
  return new CopyCmdAnswer(details);
}","@Override public Answer createVolumeFromSnapshot(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataTO destData=cmd.getDestTO();
  DataStoreTO pool=destData.getDataStore();
  DataStoreTO imageStore=srcData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String primaryStorageNameLabel=pool.getUuid();
  String secondaryStorageUrl=nfsImageStore.getUrl();
  String backedUpSnapshotUuid=snapshot.getPath();
  int index=backedUpSnapshotUuid.lastIndexOf(File.separator);
  String backupPath=backedUpSnapshotUuid.substring(0,index);
  backedUpSnapshotUuid=backedUpSnapshotUuid.substring(index + 1);
  String details=null;
  String newVolumeName=VmwareHelper.getVCenterSafeUuid();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    ManagedObjectReference morPrimaryDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,primaryStorageNameLabel);
    if (morPrimaryDs == null) {
      String msg=""String_Node_Str"" + primaryStorageNameLabel;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
    DatastoreMO primaryDsMo=new DatastoreMO(hyperHost.getContext(),morPrimaryDs);
    restoreVolumeFromSecStorage(hyperHost,primaryDsMo,newVolumeName,secondaryStorageUrl,backupPath,backedUpSnapshotUuid,(long)cmd.getWait() * 1000);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(newVolumeName);
    return new CopyCmdAnswer(newVol);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
  }
  return new CopyCmdAnswer(details);
}",0.9986559139784946
105348,"protected VDI cloudVDIcopy(Connection conn,VDI vdi,SR sr,int wait) throws Exception {
  Task task=null;
  if (wait == 0) {
    wait=2 * 60 * 60;
  }
  try {
    task=vdi.copyAsync(conn,sr);
    waitForTask(conn,task,1000,wait * 1000);
    checkForSuccess(conn,task);
    VDI dvdi=Types.toVDI(task,conn);
    return dvdi;
  }
  finally {
    if (task != null) {
      try {
        task.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + task.toString() + ""String_Node_Str""+ _host.uuid+ ""String_Node_Str""+ e.toString());
      }
    }
  }
}","protected VDI cloudVDIcopy(Connection conn,VDI vdi,SR sr,int wait) throws Exception {
  Task task=null;
  if (wait == 0) {
    wait=2 * 60 * 60;
  }
  try {
    task=vdi.copyAsync(conn,sr);
    waitForTask(conn,task,1000,(long)wait * 1000);
    checkForSuccess(conn,task);
    VDI dvdi=Types.toVDI(task,conn);
    return dvdi;
  }
  finally {
    if (task != null) {
      try {
        task.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + task.toString() + ""String_Node_Str""+ _host.uuid+ ""String_Node_Str""+ e.toString());
      }
    }
  }
}",0.9948805460750854
105349,"@Override public boolean configure(final String name,final Map<String,Object> xmlParams) throws ConfigurationException {
  _serverId=_msServer.getId();
  Map<String,String> params=new HashMap<String,String>();
  params=_configDao.getConfiguration(Long.toHexString(_serverId),xmlParams);
  String value=params.get(Config.HAWorkers.key());
  final int count=NumbersUtil.parseInt(value,1);
  _workers=new WorkerThread[count];
  for (int i=0; i < _workers.length; i++) {
    _workers[i]=new WorkerThread(""String_Node_Str"" + i);
  }
  value=params.get(""String_Node_Str"");
  _forceHA=Boolean.parseBoolean(value);
  value=params.get(""String_Node_Str"");
  _timeToSleep=NumbersUtil.parseInt(value,60) * 1000;
  value=params.get(""String_Node_Str"");
  _maxRetries=NumbersUtil.parseInt(value,5);
  value=params.get(""String_Node_Str"");
  _timeBetweenFailures=NumbersUtil.parseLong(value,3600) * 1000;
  value=params.get(""String_Node_Str"");
  _timeBetweenCleanups=NumbersUtil.parseLong(value,3600 * 24);
  value=params.get(""String_Node_Str"");
  _stopRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _restartRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _investigateRetryInterval=NumbersUtil.parseInt(value,1 * 60);
  value=params.get(""String_Node_Str"");
  _migrateRetryInterval=NumbersUtil.parseInt(value,2 * 60);
  _instance=params.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  _haTag=params.get(""String_Node_Str"");
  _haDao.releaseWorkItems(_serverId);
  _stopped=true;
  _executor=Executors.newScheduledThreadPool(count,new NamedThreadFactory(""String_Node_Str""));
  return true;
}","@Override public boolean configure(final String name,final Map<String,Object> xmlParams) throws ConfigurationException {
  _serverId=_msServer.getId();
  Map<String,String> params=new HashMap<String,String>();
  params=_configDao.getConfiguration(Long.toHexString(_serverId),xmlParams);
  String value=params.get(Config.HAWorkers.key());
  final int count=NumbersUtil.parseInt(value,1);
  _workers=new WorkerThread[count];
  for (int i=0; i < _workers.length; i++) {
    _workers[i]=new WorkerThread(""String_Node_Str"" + i);
  }
  value=params.get(""String_Node_Str"");
  _forceHA=Boolean.parseBoolean(value);
  value=params.get(""String_Node_Str"");
  _timeToSleep=(long)NumbersUtil.parseInt(value,60) * 1000;
  value=params.get(""String_Node_Str"");
  _maxRetries=NumbersUtil.parseInt(value,5);
  value=params.get(""String_Node_Str"");
  _timeBetweenFailures=NumbersUtil.parseLong(value,3600) * 1000;
  value=params.get(""String_Node_Str"");
  _timeBetweenCleanups=NumbersUtil.parseLong(value,3600 * 24);
  value=params.get(""String_Node_Str"");
  _stopRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _restartRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _investigateRetryInterval=NumbersUtil.parseInt(value,1 * 60);
  value=params.get(""String_Node_Str"");
  _migrateRetryInterval=NumbersUtil.parseInt(value,2 * 60);
  _instance=params.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  _haTag=params.get(""String_Node_Str"");
  _haDao.releaseWorkItems(_serverId);
  _stopped=true;
  _executor=Executors.newScheduledThreadPool(count,new NamedThreadFactory(""String_Node_Str""));
  return true;
}",0.9982404692082112
105350,"public static void setBasicVmConfig(VirtualMachineConfigSpec vmConfig,int cpuCount,int cpuSpeedMHz,int cpuReservedMhz,int memoryMB,int memoryReserveMB,String guestOsIdentifier,boolean limitCpuUse){
  vmConfig.setMemoryMB((long)memoryMB);
  vmConfig.setNumCPUs(cpuCount);
  ResourceAllocationInfo cpuInfo=new ResourceAllocationInfo();
  if (limitCpuUse) {
    cpuInfo.setLimit((long)(cpuSpeedMHz * cpuCount));
  }
 else {
    cpuInfo.setLimit(-1L);
  }
  cpuInfo.setReservation((long)cpuReservedMhz);
  vmConfig.setCpuAllocation(cpuInfo);
  if (cpuSpeedMHz != cpuReservedMhz) {
    vmConfig.setCpuHotAddEnabled(true);
  }
  if (memoryMB != memoryReserveMB) {
    vmConfig.setMemoryHotAddEnabled(true);
  }
  ResourceAllocationInfo memInfo=new ResourceAllocationInfo();
  memInfo.setLimit((long)memoryMB);
  memInfo.setReservation((long)memoryReserveMB);
  vmConfig.setMemoryAllocation(memInfo);
  vmConfig.setGuestId(guestOsIdentifier);
}","public static void setBasicVmConfig(VirtualMachineConfigSpec vmConfig,int cpuCount,int cpuSpeedMHz,int cpuReservedMhz,int memoryMB,int memoryReserveMB,String guestOsIdentifier,boolean limitCpuUse){
  vmConfig.setMemoryMB((long)memoryMB);
  vmConfig.setNumCPUs(cpuCount);
  ResourceAllocationInfo cpuInfo=new ResourceAllocationInfo();
  if (limitCpuUse) {
    cpuInfo.setLimit(((long)cpuSpeedMHz * cpuCount));
  }
 else {
    cpuInfo.setLimit(-1L);
  }
  cpuInfo.setReservation((long)cpuReservedMhz);
  vmConfig.setCpuAllocation(cpuInfo);
  if (cpuSpeedMHz != cpuReservedMhz) {
    vmConfig.setCpuHotAddEnabled(true);
  }
  if (memoryMB != memoryReserveMB) {
    vmConfig.setMemoryHotAddEnabled(true);
  }
  ResourceAllocationInfo memInfo=new ResourceAllocationInfo();
  memInfo.setLimit((long)memoryMB);
  memInfo.setReservation((long)memoryReserveMB);
  vmConfig.setMemoryAllocation(memInfo);
  vmConfig.setGuestId(guestOsIdentifier);
}",0.9935965848452508
105351,"private boolean validateVolume(Account caller,long ownerId,Long zoneId,String volumeName,String url,String format,Long diskOfferingId) throws ResourceAllocationException {
  Account volumeOwner=_accountMgr.getActiveAccountById(ownerId);
  _accountMgr.checkAccess(caller,null,true,volumeOwner);
  _resourceLimitMgr.checkResourceLimit(volumeOwner,ResourceType.volume);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  if (url != null) {
    if (url.toLowerCase().contains(""String_Node_Str"")) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    UriUtils.validateUrl(format,url);
    _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage,UriUtils.getRemoteSize(url));
  }
 else {
    _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage);
  }
  ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
  if (imgfmt == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
  }
  if (diskOfferingId != null) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(volumeOwner,diskOffering);
    }
  }
  return false;
}","private boolean validateVolume(Account caller,long ownerId,Long zoneId,String volumeName,String url,String format,Long diskOfferingId) throws ResourceAllocationException {
  Account volumeOwner=_accountMgr.getActiveAccountById(ownerId);
  _accountMgr.checkAccess(caller,null,true,volumeOwner);
  _resourceLimitMgr.checkResourceLimit(volumeOwner,ResourceType.volume);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  if (url != null) {
    if (url.toLowerCase().contains(""String_Node_Str"")) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    UriUtils.validateUrl(format,url);
    _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage,UriUtils.getRemoteSize(url));
  }
 else {
    _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(ownerId),ResourceType.secondary_storage);
  }
  try {
    ImageFormat.valueOf(format.toUpperCase());
  }
 catch (  IllegalArgumentException e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage());
    throw new IllegalArgumentException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
  }
  if (diskOfferingId != null) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || diskOffering.getRemoved() != null || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(volumeOwner,diskOffering);
    }
  }
  return false;
}",0.964438839848676
105352,"public BcfAnswer(Command command,Exception e){
  super(command,e);
  this.hash=""String_Node_Str"";
}","public BcfAnswer(final Command command,final Exception e){
  super(command,e);
  this.hash=""String_Node_Str"";
}",0.9428571428571428
105353,"public void setTopology(TopologyData topology){
  this.topology=topology;
}","public void setTopology(final TopologyData topology){
  this.topology=topology;
}",0.9615384615384616
105354,"public CacheBcfTopologyCommand(TopologyData topology){
  this.topology=topology;
}","public CacheBcfTopologyCommand(final TopologyData topology){
  this._topology=topology;
}",0.95906432748538
105355,"public TopologyData getTopology(){
  return topology;
}","public TopologyData getTopology(){
  return _topology;
}",0.990990990990991
105356,"public CreateBcfAttachmentCommand(String tenantId,String tenantName,String networkId,String portId,String nicId,Integer vlan,String ipv4,String mac){
  this._tenantId=tenantId;
  this._tenantName=tenantName;
  this._networkId=networkId;
  this._portId=portId;
  this._nicId=nicId;
  this._vlan=vlan;
  this._ipv4=ipv4;
  this._mac=mac;
}","public CreateBcfAttachmentCommand(final String tenantId,final String tenantName,final String networkId,final String portId,final String nicId,final Integer vlan,final String ipv4,final String mac){
  this._tenantId=tenantId;
  this._tenantName=tenantName;
  this._networkId=networkId;
  this._portId=portId;
  this._nicId=nicId;
  this._vlan=vlan;
  this._ipv4=ipv4;
  this._mac=mac;
}",0.778393351800554
105357,"public CreateBcfRouterCommand(String tenantId){
  this._tenantId=tenantId;
}","public CreateBcfRouterCommand(final String tenantId){
  this._tenantId=tenantId;
}",0.9620253164556962
105358,"public CreateBcfRouterInterfaceCommand(String tenantId,String networkId,String cidr,String gateway,String networkName){
  this._tenantId=tenantId;
  this._networkId=networkId;
  this._networkName=networkName;
  this._cidr=cidr;
  this._gateway=gateway;
}","public CreateBcfRouterInterfaceCommand(final String tenantId,final String networkId,final String cidr,final String gateway,final String networkName){
  this._tenantId=tenantId;
  this._networkId=networkId;
  this._networkName=networkName;
  this._cidr=cidr;
  this._gateway=gateway;
}",0.7769516728624535
105359,"public CreateBcfSegmentCommand(String tenantId,String tenantName,String networkId,String networkName,Integer vlan){
  this._tenantId=tenantId;
  this._tenantName=tenantName;
  this._networkId=networkId;
  this._networkName=networkName;
  this._vlan=vlan;
}","public CreateBcfSegmentCommand(final String tenantId,final String tenantName,final String networkId,final String networkName,final Integer vlan){
  this._tenantId=tenantId;
  this._tenantName=tenantName;
  this._networkId=networkId;
  this._networkName=networkName;
  this._vlan=vlan;
}",0.6863468634686347
105360,"public CreateBcfStaticNatCommand(String tenantId,String networkId,String privateIp,String publicIp,String mac){
  this._tenantId=tenantId;
  this._networkId=networkId;
  this._privateIp=privateIp;
  this._publicIp=publicIp;
  this._mac=mac;
}","public CreateBcfStaticNatCommand(final String tenantId,final String networkId,final String privateIp,final String publicIp,final String mac){
  this._tenantId=tenantId;
  this._networkId=networkId;
  this._privateIp=privateIp;
  this._publicIp=publicIp;
  this._mac=mac;
}",0.8171206225680934
105361,"public DeleteBcfAttachmentCommand(String tenantId,String networkId,String attachmentId){
  this._tenantId=tenantId;
  this._networkId=networkId;
  this._attachmentId=attachmentId;
}","public DeleteBcfAttachmentCommand(final String tenantId,final String networkId,final String attachmentId){
  this._tenantId=tenantId;
  this._networkId=networkId;
  this._attachmentId=attachmentId;
}",0.9526315789473684
105362,"public DeleteBcfSegmentCommand(String tenantUuid,String networkUuid){
  this._tenantUuid=tenantUuid;
  this._networkUuid=networkUuid;
}","public DeleteBcfSegmentCommand(final String tenantUuid,final String networkUuid){
  this._tenantUuid=tenantUuid;
  this._networkUuid=networkUuid;
}",0.9574468085106383
105363,"public DeleteBcfStaticNatCommand(String tenantId,String publicIp){
  this._tenantId=tenantId;
  this._publicIp=publicIp;
  this._floatingIpId=publicIp.replace(""String_Node_Str"",""String_Node_Str"");
}","public DeleteBcfStaticNatCommand(final String tenantId,final String publicIp){
  this._tenantId=tenantId;
  this._publicIp=publicIp;
  this._floatingIpId=publicIp.replace(""String_Node_Str"",""String_Node_Str"");
}",0.9705882352941176
105364,"public GetControllerDataAnswer(Command command,Exception e){
  super(command,e);
  this.ipAddress=null;
  this.isMaster=false;
}","public GetControllerDataAnswer(final Command command,final Exception e){
  super(command,e);
  this._ipAddress=null;
  this._isMaster=false;
}",0.9481481481481482
105365,"public String getIpAddress(){
  return ipAddress;
}","public String getIpAddress(){
  return _ipAddress;
}",0.9902912621359224
105366,"public boolean isMaster(){
  return isMaster;
}","public boolean isMaster(){
  return _isMaster;
}",0.9894736842105264
105367,"public void setSlave(HostVO slave){
  this.slave=slave;
}","public void setSlave(final HostVO slave){
  this.slave=slave;
}",0.95
105368,"public void setMaster(HostVO master){
  this.master=master;
}","public void setMaster(final HostVO master){
  this.master=master;
}",0.953125
105369,"public boolean isRouterIncluded(){
  return routerIncluded;
}","public boolean isRouterIncluded(){
  return _routerIncluded;
}",0.991869918699187
105370,"public boolean isNetworkIncluded(){
  return networkIncluded;
}","public boolean isNetworkIncluded(){
  return _networkIncluded;
}",0.9921259842519684
105371,"public SyncBcfTopologyCommand(boolean networkIncluded,boolean routerIncluded){
  this.networkIncluded=networkIncluded;
  this.routerIncluded=routerIncluded;
}","public SyncBcfTopologyCommand(final boolean networkIncluded,final boolean routerIncluded){
  this._networkIncluded=networkIncluded;
  this._routerIncluded=routerIncluded;
}",0.9575757575757576
105372,"/** 
 * Returns if the vm is still alive.
 * @param vm to work on.
 */
public Boolean isVmAlive(VirtualMachine vm,Host host);","/** 
 * Returns if the vm is still alive.
 * @param vm to work on.
 */
public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM ;",0.9253731343283582
105373,"@Override public Boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host){
  Status status=isAgentAlive(host);
  if (status == null) {
    return null;
  }
  return status == Status.Up ? true : null;
}","@Override public boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host) throws UnknownVM {
  Status status=isAgentAlive(host);
  if (status == null) {
    throw new UnknownVM();
  }
  return status == Status.Up ? true : null;
}",0.8807339449541285
105374,"@Override public Boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host){
  Status status=isAgentAlive(host);
  if (status == null) {
    return null;
  }
  return status == Status.Up ? true : null;
}","@Override public boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host) throws UnknownVM {
  Status status=isAgentAlive(host);
  if (status == null) {
    throw new UnknownVM();
  }
  if (status == Status.Up) {
    return true;
  }
 else {
    throw new UnknownVM();
  }
}",0.6652806652806653
105375,"@Override public Boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host){
  LOGGER.debug(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ host.getName());
  if (host.getHypervisorType() != Hypervisor.HypervisorType.Ovm3) {
    return null;
  }
  Status status=isAgentAlive(host);
  if (status == null) {
    return false;
  }
  return status == Status.Up ? true : false;
}","@Override public boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host) throws UnknownVM {
  LOGGER.debug(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ host.getName());
  if (host.getHypervisorType() != Hypervisor.HypervisorType.Ovm3) {
    throw new UnknownVM();
  }
  Status status=isAgentAlive(host);
  if (status == null) {
    return false;
  }
  return status == Status.Up ? true : false;
}",0.9348370927318296
105376,"@Override public Boolean isVmAlive(VirtualMachine vm,Host host){
  CheckVirtualMachineCommand cmd=new CheckVirtualMachineCommand(vm.getInstanceName());
  try {
    Answer answer=_agentMgr.send(vm.getHostId(),cmd);
    if (!answer.getResult()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
      return null;
    }
    CheckVirtualMachineAnswer cvmAnswer=(CheckVirtualMachineAnswer)answer;
    s_logger.debug(""String_Node_Str"" + cvmAnswer.getState().toString());
    return cvmAnswer.getState() == PowerState.PowerOn;
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    return null;
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    return null;
  }
}","@Override public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM {
  CheckVirtualMachineCommand cmd=new CheckVirtualMachineCommand(vm.getInstanceName());
  try {
    Answer answer=_agentMgr.send(vm.getHostId(),cmd);
    if (!answer.getResult()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
      throw new UnknownVM();
    }
    CheckVirtualMachineAnswer cvmAnswer=(CheckVirtualMachineAnswer)answer;
    s_logger.debug(""String_Node_Str"" + cvmAnswer.getState().toString());
    return cvmAnswer.getState() == PowerState.PowerOn;
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    throw new UnknownVM();
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    throw new UnknownVM();
  }
}",0.9329479768786128
105377,"@Override public Boolean isVmAlive(VirtualMachine vm,Host host){
  if (vm.getHypervisorType() == HypervisorType.VMware)   return true;
  return null;
}","@Override public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM {
  if (vm.getHypervisorType() == HypervisorType.VMware)   return true;
  throw new UnknownVM();
}",0.8606060606060606
105378,"@Override public Boolean isVmAlive(VirtualMachine vm,Host host){
  CheckVirtualMachineCommand cmd=new CheckVirtualMachineCommand(vm.getInstanceName());
  try {
    CheckVirtualMachineAnswer answer=(CheckVirtualMachineAnswer)_agentMgr.send(vm.getHostId(),cmd);
    if (!answer.getResult()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
      return null;
    }
    s_logger.debug(""String_Node_Str"" + answer.getState().toString());
    return answer.getState() == PowerState.PowerOn;
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    return null;
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    return null;
  }
}","@Override public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM {
  CheckVirtualMachineCommand cmd=new CheckVirtualMachineCommand(vm.getInstanceName());
  try {
    CheckVirtualMachineAnswer answer=(CheckVirtualMachineAnswer)_agentMgr.send(vm.getHostId(),cmd);
    if (!answer.getResult()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
      throw new UnknownVM();
    }
    s_logger.debug(""String_Node_Str"" + answer.getState().toString());
    return answer.getState() == PowerState.PowerOn;
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    throw new UnknownVM();
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + vm.toString() + ""String_Node_Str""+ e.getMessage());
    throw new UnknownVM();
  }
}",0.9301204819277108
105379,"@Override public Boolean isVmAlive(VirtualMachine vm,Host host){
  if (!vm.getType().isUsedBySystem()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  if (vm.getHostId() == null) {
    s_logger.debug(""String_Node_Str"" + vm);
    return null;
  }
  HostVO vmHost=_hostDao.findById(vm.getHostId());
  if (vmHost == null) {
    s_logger.debug(""String_Node_Str"" + vm.getHostId());
    return null;
  }
  List<? extends Nic> nics=_networkMgr.getNicsForTraffic(vm.getId(),TrafficType.Management);
  if (nics.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
    }
    return null;
  }
  for (  Nic nic : nics) {
    if (nic.getIp4Address() == null) {
      continue;
    }
    List<Long> otherHosts=findHostByPod(vmHost.getPodId(),vm.getHostId());
    for (    Long otherHost : otherHosts) {
      Status vmState=testIpAddress(otherHost,nic.getIp4Address());
      if (vmState == null) {
        continue;
      }
      if (vmState == Status.Up) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm.getPrivateIpAddress() + ""String_Node_Str"");
        }
        return Boolean.TRUE;
      }
 else       if (vmState == Status.Down) {
        Status vmHostState=testIpAddress(otherHost,vmHost.getPrivateIpAddress());
        if ((vmHostState != null) && (vmHostState == Status.Up)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vmHost.getPrivateIpAddress() + ""String_Node_Str"");
          }
          return Boolean.FALSE;
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  return null;
}","@Override public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM {
  if (!vm.getType().isUsedBySystem()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  if (vm.getHostId() == null) {
    s_logger.debug(""String_Node_Str"" + vm);
    throw new UnknownVM();
  }
  HostVO vmHost=_hostDao.findById(vm.getHostId());
  if (vmHost == null) {
    s_logger.debug(""String_Node_Str"" + vm.getHostId());
    throw new UnknownVM();
  }
  List<? extends Nic> nics=_networkMgr.getNicsForTraffic(vm.getId(),TrafficType.Management);
  if (nics.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
    }
    throw new UnknownVM();
  }
  for (  Nic nic : nics) {
    if (nic.getIp4Address() == null) {
      continue;
    }
    List<Long> otherHosts=findHostByPod(vmHost.getPodId(),vm.getHostId());
    for (    Long otherHost : otherHosts) {
      Status vmState=testIpAddress(otherHost,nic.getIp4Address());
      if (vmState == null) {
        continue;
      }
      if (vmState == Status.Up) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm.getPrivateIpAddress() + ""String_Node_Str"");
        }
        return Boolean.TRUE;
      }
 else       if (vmState == Status.Down) {
        Status vmHostState=testIpAddress(otherHost,vmHost.getPrivateIpAddress());
        if ((vmHostState != null) && (vmHostState == Status.Up)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vmHost.getPrivateIpAddress() + ""String_Node_Str"");
          }
          return Boolean.FALSE;
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  throw new UnknownVM();
}",0.960406634563938
105380,"@Override public Boolean isVmAlive(VirtualMachine vm,Host host){
  if (vm.getType() != VirtualMachine.Type.User) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
    }
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  UserVmVO userVm=_userVmDao.findById(vm.getId());
  List<? extends Nic> nics=_networkMgr.getNicsForTraffic(userVm.getId(),TrafficType.Guest);
  for (  Nic nic : nics) {
    if (nic.getIp4Address() == null) {
      continue;
    }
    List<VirtualRouter> routers=_vnaMgr.getRoutersForNetwork(nic.getNetworkId());
    if (routers == null || routers.isEmpty()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + nic.getNetworkId() + ""String_Node_Str""+ vm);
      }
      continue;
    }
    Boolean result=null;
    for (    VirtualRouter router : routers) {
      result=testUserVM(vm,nic,router);
      if (result != null) {
        break;
      }
    }
    if (result == null) {
      continue;
    }
    return result;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return null;
}","@Override public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM {
  if (vm.getType() != VirtualMachine.Type.User) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
    }
    throw new UnknownVM();
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
  }
  UserVmVO userVm=_userVmDao.findById(vm.getId());
  List<? extends Nic> nics=_networkMgr.getNicsForTraffic(userVm.getId(),TrafficType.Guest);
  for (  Nic nic : nics) {
    if (nic.getIp4Address() == null) {
      continue;
    }
    List<VirtualRouter> routers=_vnaMgr.getRoutersForNetwork(nic.getNetworkId());
    if (routers == null || routers.isEmpty()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + nic.getNetworkId() + ""String_Node_Str""+ vm);
      }
      continue;
    }
    Boolean result=null;
    for (    VirtualRouter router : routers) {
      result=testUserVM(vm,nic,router);
      if (result != null) {
        break;
      }
    }
    if (result == null) {
      continue;
    }
    return result;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  throw new UnknownVM();
}",0.965686274509804
105381,"@Override public Boolean isVmAlive(VirtualMachine vm,Host host){
  Status status=isAgentAlive(host);
  if (status == null) {
    return null;
  }
  return status == Status.Up ? true : null;
}","@Override public boolean isVmAlive(VirtualMachine vm,Host host) throws UnknownVM {
  Status status=isAgentAlive(host);
  if (status == null) {
    throw new UnknownVM();
  }
  if (status == Status.Up) {
    return true;
  }
 else {
    throw new UnknownVM();
  }
}",0.6461538461538462
105382,"@Override public List<ConfigItem> generateConfig(final NetworkElementCommand cmd){
  final SetNetworkACLCommand command=(SetNetworkACLCommand)cmd;
  final String privateGw=cmd.getAccessDetail(NetworkElementCommand.VPC_PRIVATE_GATEWAY);
  final String[][] rules=command.generateFwRules();
  final String[] aclRules=rules[0];
  final NicTO nic=command.getNic();
  final String dev=""String_Node_Str"" + nic.getDeviceId();
  final String netmask=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  final List<AclRule> ingressRules=new ArrayList<AclRule>();
  final List<AclRule> egressRules=new ArrayList<AclRule>();
  for (int i=0; i < aclRules.length; i++) {
    AclRule aclRule;
    final String[] ruleParts=aclRules[i].split(""String_Node_Str"");
switch (ruleParts[1].toLowerCase()) {
case ""String_Node_Str"":
      aclRule=new IcmpAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
    break;
case ""String_Node_Str"":
  aclRule=new TcpAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
break;
case ""String_Node_Str"":
aclRule=new UdpAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
break;
case ""String_Node_Str"":
aclRule=new AllAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]));
break;
default :
aclRule=new ProtocolAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[1]));
}
if (""String_Node_Str"".equals(ruleParts[0])) {
ingressRules.add(aclRule);
}
 else {
egressRules.add(aclRule);
}
}
final NetworkACL networkACL=new NetworkACL(dev,nic.getMac(),privateGw != null,nic.getIp(),netmask,ingressRules.toArray(new AclRule[ingressRules.size()]),egressRules.toArray(new AclRule[egressRules.size()]));
return generateConfigItems(networkACL);
}","@Override public List<ConfigItem> generateConfig(final NetworkElementCommand cmd){
  final SetNetworkACLCommand command=(SetNetworkACLCommand)cmd;
  final String privateGw=cmd.getAccessDetail(NetworkElementCommand.VPC_PRIVATE_GATEWAY);
  final String[][] rules=command.generateFwRules();
  final String[] aclRules=rules[0];
  final NicTO nic=command.getNic();
  final String dev=""String_Node_Str"" + nic.getDeviceId();
  final String netmask=Long.toString(NetUtils.getCidrSize(nic.getNetmask()));
  final List<AclRule> ingressRules=new ArrayList<AclRule>();
  final List<AclRule> egressRules=new ArrayList<AclRule>();
  for (int i=0; i < aclRules.length; i++) {
    AclRule aclRule;
    final String[] ruleParts=aclRules[i].split(""String_Node_Str"");
switch (ruleParts[1].toLowerCase()) {
case ""String_Node_Str"":
      aclRule=new IcmpAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
    break;
case ""String_Node_Str"":
  aclRule=new TcpAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
break;
case ""String_Node_Str"":
aclRule=new UdpAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]),Integer.parseInt(ruleParts[2]),Integer.parseInt(ruleParts[3]));
break;
case ""String_Node_Str"":
aclRule=new AllAclRule(ruleParts[4],""String_Node_Str"".equals(ruleParts[5]));
break;
default :
try {
aclRule=new ProtocolAclRule(ruleParts[5],false,Integer.parseInt(ruleParts[1]));
}
 catch (final Exception e) {
s_logger.warn(""String_Node_Str"" + ruleParts.length + ""String_Node_Str"");
continue;
}
}
if (""String_Node_Str"".equals(ruleParts[0])) {
ingressRules.add(aclRule);
}
 else {
egressRules.add(aclRule);
}
}
final NetworkACL networkACL=new NetworkACL(dev,nic.getMac(),privateGw != null,nic.getIp(),netmask,ingressRules.toArray(new AclRule[ingressRules.size()]),egressRules.toArray(new AclRule[egressRules.size()]));
return generateConfigItems(networkACL);
}",0.9571685047448064
105383,"public boolean isRedundant(){
  return this.guestNetwork.isRedundant();
}","public boolean isRedundant(){
  return guestNetwork.isRedundant();
}",0.9645390070921984
105384,"public Long getServiceOfferingId(){
  return this.serviceOfferingId;
}","public Long getServiceOfferingId(){
  return serviceOfferingId;
}",0.9629629629629628
105385,"protected int getNumberOfRoutersToDeploy(){
  if (routers.size() >= 5) {
    logger.error(""String_Node_Str"");
  }
  int routersExpected=1;
  if (this.isRedundant()) {
    routersExpected=2;
  }
  return routersExpected < routers.size() ? 0 : routersExpected - routers.size();
}","protected int getNumberOfRoutersToDeploy(){
  if (routers.size() >= 5) {
    logger.error(""String_Node_Str"");
  }
  int routersExpected=1;
  if (isRedundant()) {
    routersExpected=2;
  }
  return routersExpected < routers.size() ? 0 : routersExpected - routers.size();
}",0.9908925318761383
105386,"/** 
 * Executes preparation and deployment of the routers. After this method ends,   {@link this#routers} should have all of the deployed routers readyfor start, and no more.
 * @throws ConcurrentOperationException
 * @throws InsufficientCapacityException
 * @throws ResourceUnavailableException
 */
protected void executeDeployment() throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  this.setupPriorityOfRedundantRouter();
  if (this.getNumberOfRoutersToDeploy() > 0 && this.prepareDeployment()) {
    this.findVirtualProvider();
    this.findServiceOfferingId();
    this.findSourceNatIP();
    this.deployAllVirtualRouters();
  }
}","/** 
 * Executes preparation and deployment of the routers. After this method ends,   {@link this#routers} should have all of the deployed routers readyfor start, and no more.
 * @throws ConcurrentOperationException
 * @throws InsufficientCapacityException
 * @throws ResourceUnavailableException
 */
protected void executeDeployment() throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  setupPriorityOfRedundantRouter();
  if (getNumberOfRoutersToDeploy() > 0 && prepareDeployment()) {
    findVirtualProvider();
    findServiceOfferingId();
    findSourceNatIP();
    deployAllVirtualRouters();
  }
}",0.9738219895287958
105387,"@DB protected void findOrDeployVirtualRouter() throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  try {
    lock();
    checkPreconditions();
    final List<DeployDestination> destinations=findDestinations();
    for (    final DeployDestination destination : destinations) {
      dest=destination;
      generateDeploymentPlan();
      executeDeployment();
    }
  }
  finally {
    unlock();
  }
}","@DB protected void findOrDeployVirtualRouter() throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  try {
    lock();
    checkPreconditions();
    final List<DeployDestination> destinations=findDestinations();
    for (    final DeployDestination destination : destinations) {
      dest=destination;
      planDeploymentRouters();
      generateDeploymentPlan();
      executeDeployment();
    }
  }
  finally {
    unlock();
  }
}",0.966702470461869
105388,"protected void findServiceOfferingId(){
  Long networkOfferingId=networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
  if (networkOfferingId != null) {
    this.serviceOfferingId=networkOfferingId;
  }
}","protected void findServiceOfferingId(){
  Long networkOfferingId=networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
  if (networkOfferingId != null) {
    serviceOfferingId=networkOfferingId;
  }
}",0.9894736842105264
105389,"/** 
 * Only for redundant deployment and if any routers needed reset, we shall reset all routers priorities
 */
protected void setupPriorityOfRedundantRouter(){
  if (this.isRedundant() && this.routersNeedReset()) {
    for (    final DomainRouterVO router : this.routers) {
      router.setPriority(0);
      router.setIsPriorityBumpUp(false);
      routerDao.update(router.getId(),router);
    }
  }
}","/** 
 * Only for redundant deployment and if any routers needed reset, we shall reset all routers priorities
 */
protected void setupPriorityOfRedundantRouter(){
  if (isRedundant() && routersNeedReset()) {
    for (    final DomainRouterVO router : routers) {
      router.setPriority(0);
      router.setIsPriorityBumpUp(false);
      routerDao.update(router.getId(),router);
    }
  }
}",0.9810844892812106
105390,"/** 
 * It executes last pending tasks to prepare the deployment and checks the deployment can proceed. If it can't it return false
 * @return if the deployment can proceed
 */
protected boolean prepareDeployment(){
  setupAccountOwner();
  isPublicNetwork=networkModel.isProviderSupportServiceInNetwork(guestNetwork.getId(),Service.SourceNat,Provider.VirtualRouter);
  boolean canProceed=true;
  if (this.isRedundant() && !this.isPublicNetwork) {
    logger.error(""String_Node_Str"");
    routers=new ArrayList<DomainRouterVO>();
    canProceed=false;
  }
  return canProceed;
}","/** 
 * It executes last pending tasks to prepare the deployment and checks the deployment can proceed. If it can't it return false
 * @return if the deployment can proceed
 */
protected boolean prepareDeployment(){
  setupAccountOwner();
  isPublicNetwork=networkModel.isProviderSupportServiceInNetwork(guestNetwork.getId(),Service.SourceNat,Provider.VirtualRouter);
  boolean canProceed=true;
  if (isRedundant() && !isPublicNetwork) {
    logger.error(""String_Node_Str"");
    routers=new ArrayList<DomainRouterVO>();
    canProceed=false;
  }
  return canProceed;
}",0.9912739965095986
105391,"@Override public SetStaticRouteAnswer setStaticRoute(SetStaticRouteCommand cmd){
  String[] results=new String[cmd.getStaticRoutes().length];
  String[][] rules=cmd.generateSRouteRules();
  StringBuilder sb=new StringBuilder();
  String[] srRules=rules[0];
  for (int i=0; i < srRules.length; i++) {
    sb.append(srRules[i]).append(',');
  }
  return new SetStaticRouteAnswer(cmd,true,results);
}","@Override public SetStaticRouteAnswer setStaticRoute(SetStaticRouteCommand cmd){
  String[] results=new String[cmd.getStaticRoutes().length];
  String[] rules=cmd.generateSRouteRules();
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < rules.length; i++) {
    sb.append(rules[i]).append(',');
  }
  return new SetStaticRouteAnswer(cmd,true,results);
}",0.9486166007905138
105392,"@DB protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers){
  for (  final DomainRouterVO router : routers) {
    final List<Site2SiteVpnConnectionVO> conns=_s2sVpnMgr.getConnectionsForRouter(router);
    if (conns == null || conns.isEmpty()) {
      continue;
    }
    if (router.getState() != State.Running) {
      for (      final Site2SiteVpnConnectionVO conn : conns) {
        if (conn.getState() != Site2SiteVpnConnection.State.Error) {
          conn.setState(Site2SiteVpnConnection.State.Disconnected);
          _s2sVpnConnectionDao.persist(conn);
        }
      }
      continue;
    }
    final List<String> ipList=new ArrayList<String>();
    for (    final Site2SiteVpnConnectionVO conn : conns) {
      if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {
        continue;
      }
      final Site2SiteCustomerGateway gw=_s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());
      ipList.add(gw.getGatewayIp());
    }
    final String privateIP=router.getPrivateIpAddress();
    final HostVO host=_hostDao.findById(router.getHostId());
    if (host == null || host.getState() != Status.Up) {
      continue;
    }
 else     if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {
      continue;
    }
 else     if (privateIP != null) {
      final CheckS2SVpnConnectionsCommand command=new CheckS2SVpnConnectionsCommand(ipList);
      command.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
      command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      command.setWait(30);
      final Answer origAnswer=_agentMgr.easySend(router.getHostId(),command);
      CheckS2SVpnConnectionsAnswer answer=null;
      if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {
        answer=(CheckS2SVpnConnectionsAnswer)origAnswer;
      }
 else {
        s_logger.warn(""String_Node_Str"" + router.getHostName() + ""String_Node_Str"");
        continue;
      }
      if (!answer.getResult()) {
        s_logger.warn(""String_Node_Str"" + router.getHostName() + ""String_Node_Str"");
        continue;
      }
      for (      final Site2SiteVpnConnectionVO conn : conns) {
        final Site2SiteVpnConnectionVO lock=_s2sVpnConnectionDao.acquireInLockTable(conn.getId());
        if (lock == null) {
          throw new CloudRuntimeException(""String_Node_Str"" + lock);
        }
        try {
          if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {
            continue;
          }
          final Site2SiteVpnConnection.State oldState=conn.getState();
          final Site2SiteCustomerGateway gw=_s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());
          if (answer.isConnected(gw.getGatewayIp())) {
            conn.setState(Site2SiteVpnConnection.State.Connected);
          }
 else {
            conn.setState(Site2SiteVpnConnection.State.Disconnected);
          }
          _s2sVpnConnectionDao.persist(conn);
          if (oldState != conn.getState()) {
            final String title=""String_Node_Str"" + gw.getName() + ""String_Node_Str""+ oldState+ ""String_Node_Str""+ conn.getState();
            final String context=""String_Node_Str"" + gw.getName() + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ router.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ oldState+ ""String_Node_Str""+ conn.getState();
            s_logger.info(context);
            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER,router.getDataCenterId(),router.getPodIdToDeployIn(),title,context);
          }
        }
  finally {
          _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());
        }
      }
    }
  }
}","@DB protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers){
  for (  final DomainRouterVO router : routers) {
    final List<Site2SiteVpnConnectionVO> conns=_s2sVpnMgr.getConnectionsForRouter(router);
    if (conns == null || conns.isEmpty()) {
      continue;
    }
    if (router.getState() != State.Running) {
      for (      final Site2SiteVpnConnectionVO conn : conns) {
        if (conn.getState() != Site2SiteVpnConnection.State.Error) {
          conn.setState(Site2SiteVpnConnection.State.Disconnected);
          _s2sVpnConnectionDao.persist(conn);
        }
      }
      continue;
    }
    final List<String> ipList=new ArrayList<String>();
    for (    final Site2SiteVpnConnectionVO conn : conns) {
      if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {
        continue;
      }
      final Site2SiteCustomerGateway gw=_s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());
      ipList.add(gw.getGatewayIp());
    }
    final String privateIP=router.getPrivateIpAddress();
    final HostVO host=_hostDao.findById(router.getHostId());
    if (host == null || host.getState() != Status.Up) {
      continue;
    }
 else     if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {
      continue;
    }
 else     if (privateIP != null) {
      final CheckS2SVpnConnectionsCommand command=new CheckS2SVpnConnectionsCommand(ipList);
      command.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
      command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      command.setWait(30);
      final Answer origAnswer=_agentMgr.easySend(router.getHostId(),command);
      CheckS2SVpnConnectionsAnswer answer=null;
      if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {
        answer=(CheckS2SVpnConnectionsAnswer)origAnswer;
      }
 else {
        s_logger.warn(""String_Node_Str"" + router.getHostName() + ""String_Node_Str"");
        continue;
      }
      if (!answer.getResult()) {
        s_logger.warn(""String_Node_Str"" + router.getHostName() + ""String_Node_Str"");
        continue;
      }
      for (      final Site2SiteVpnConnectionVO conn : conns) {
        final Site2SiteVpnConnectionVO lock=_s2sVpnConnectionDao.acquireInLockTable(conn.getId());
        if (lock == null) {
          throw new CloudRuntimeException(""String_Node_Str"" + conn.getId());
        }
        try {
          if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {
            continue;
          }
          final Site2SiteVpnConnection.State oldState=conn.getState();
          final Site2SiteCustomerGateway gw=_s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());
          if (answer.isConnected(gw.getGatewayIp())) {
            conn.setState(Site2SiteVpnConnection.State.Connected);
          }
 else {
            conn.setState(Site2SiteVpnConnection.State.Disconnected);
          }
          _s2sVpnConnectionDao.persist(conn);
          if (oldState != conn.getState()) {
            final String title=""String_Node_Str"" + gw.getName() + ""String_Node_Str""+ oldState+ ""String_Node_Str""+ conn.getState();
            final String context=""String_Node_Str"" + gw.getName() + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ router.getId()+ ""String_Node_Str""+ ""String_Node_Str""+ oldState+ ""String_Node_Str""+ conn.getState();
            s_logger.info(context);
            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER,router.getDataCenterId(),router.getPodIdToDeployIn(),title,context);
          }
        }
  finally {
          _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());
        }
      }
    }
  }
}",0.9979236958214378
105393,"@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  TemplateObjectTO template=new TemplateObjectTO();
  template.setPath(UUID.randomUUID().toString());
  template.setFormat(Storage.ImageFormat.RAW);
  return new CopyCmdAnswer(template);
}","@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  TemplateObjectTO template=new TemplateObjectTO();
  template.setPath(UUID.randomUUID().toString());
  template.setSize(new Long(100));
  template.setFormat(Storage.ImageFormat.RAW);
  return new CopyCmdAnswer(template);
}",0.9367088607594936
105394,"@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,null,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      if (dsMo != null) {
        String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
        newTemplate.setPath(path);
      }
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}","@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,null,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      if (dsMo != null) {
        String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
        newTemplate.setPath(path);
      }
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    newTemplate.setSize(new Long(0));
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}",0.9964989865487378
105395,"private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing objectListing;
  do {
    objectListing=client.listObjects(listObjectsRequest);
    if (objectListing != null)     objects.addAll(objectListing.getObjectSummaries());
    listObjectsRequest.setMarker(objectListing.getNextMarker());
  }
 while (objectListing.isTruncated());
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}","private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing ol=client.listObjects(listObjectsRequest);
  while (ol != null && ol.isTruncated()) {
    objects.addAll(ol.getObjectSummaries());
    listObjectsRequest.setMarker(ol.getNextMarker());
    ol=client.listObjects(listObjectsRequest);
  }
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}",0.6460176991150443
105396,"private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing objectListing;
  do {
    objectListing=client.listObjects(listObjectsRequest);
    if (objectListing != null)     objects.addAll(objectListing.getObjectSummaries());
    listObjectsRequest.setMarker(objectListing.getNextMarker());
  }
 while (objectListing.isTruncated());
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}","private static List<S3ObjectSummary> listDirectory(final String bucketName,final String directory,final AmazonS3 client){
  List<S3ObjectSummary> objects=new ArrayList<S3ObjectSummary>();
  ListObjectsRequest listObjectsRequest=new ListObjectsRequest().withBucketName(bucketName).withPrefix(directory + SEPARATOR);
  ObjectListing ol=client.listObjects(listObjectsRequest);
  while (ol != null && ol.isTruncated()) {
    objects.addAll(ol.getObjectSummaries());
    listObjectsRequest.setMarker(ol.getNextMarker());
    ol=client.listObjects(listObjectsRequest);
  }
  if (objects.isEmpty()) {
    return emptyList();
  }
  return unmodifiableList(objects);
}",0.6460176991150443
105397,"private static String encode(byte[] input){
  return new String(Base64.encode(input));
}","private static String encode(byte[] input) throws UnsupportedEncodingException {
  return new String(Base64.encode(input),""String_Node_Str"");
}",0.7619047619047619
105398,"private static String encode(byte[] input){
  return new String(Base64.encode(input));
}","private static String encode(byte[] input) throws UnsupportedEncodingException {
  return new String(Base64.encode(input),""String_Node_Str"");
}",0.7619047619047619
105399,"private String getResizeScriptType(KVMStoragePool pool,KVMPhysicalDisk vol){
  StoragePoolType poolType=pool.getType();
  PhysicalDiskFormat volFormat=vol.getFormat();
  if (pool.getType() == StoragePoolType.CLVM && volFormat == PhysicalDiskFormat.RAW) {
    return ""String_Node_Str"";
  }
 else   if ((poolType == StoragePoolType.NetworkFilesystem || poolType == StoragePoolType.SharedMountPoint || poolType == StoragePoolType.Filesystem || poolType == StoragePoolType.Gluster) && volFormat == PhysicalDiskFormat.QCOW2) {
    return ""String_Node_Str"";
  }
  return null;
}","private String getResizeScriptType(KVMStoragePool pool,KVMPhysicalDisk vol){
  StoragePoolType poolType=pool.getType();
  PhysicalDiskFormat volFormat=vol.getFormat();
  if (pool.getType() == StoragePoolType.CLVM && volFormat == PhysicalDiskFormat.RAW) {
    return ""String_Node_Str"";
  }
 else   if ((poolType == StoragePoolType.NetworkFilesystem || poolType == StoragePoolType.SharedMountPoint || poolType == StoragePoolType.Filesystem || poolType == StoragePoolType.Gluster) && volFormat == PhysicalDiskFormat.QCOW2) {
    return ""String_Node_Str"";
  }
  throw new CloudRuntimeException(""String_Node_Str"" + pool.getType());
}",0.9383333333333334
105400,"private String getResizeScriptType(KVMStoragePool pool,KVMPhysicalDisk vol){
  StoragePoolType poolType=pool.getType();
  PhysicalDiskFormat volFormat=vol.getFormat();
  if (pool.getType() == StoragePoolType.CLVM && volFormat == PhysicalDiskFormat.RAW) {
    return ""String_Node_Str"";
  }
 else   if ((poolType == StoragePoolType.NetworkFilesystem || poolType == StoragePoolType.SharedMountPoint || poolType == StoragePoolType.Filesystem || poolType == StoragePoolType.Gluster) && volFormat == PhysicalDiskFormat.QCOW2) {
    return ""String_Node_Str"";
  }
  return null;
}","private String getResizeScriptType(KVMStoragePool pool,KVMPhysicalDisk vol){
  StoragePoolType poolType=pool.getType();
  PhysicalDiskFormat volFormat=vol.getFormat();
  if (pool.getType() == StoragePoolType.CLVM && volFormat == PhysicalDiskFormat.RAW) {
    return ""String_Node_Str"";
  }
 else   if ((poolType == StoragePoolType.NetworkFilesystem || poolType == StoragePoolType.SharedMountPoint || poolType == StoragePoolType.Filesystem || poolType == StoragePoolType.Gluster) && volFormat == PhysicalDiskFormat.QCOW2) {
    return ""String_Node_Str"";
  }
  throw new CloudRuntimeException(""String_Node_Str"" + pool.getType());
}",0.9383333333333334
105401,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_VOLUME_UPLOAD,eventDescription=""String_Node_Str"",async=true) public GetUploadParamsResponse uploadVolume(GetUploadParamsForVolumeCmd cmd) throws ResourceAllocationException, MalformedURLException {
  Account caller=CallContext.current().getCallingAccount();
  long ownerId=cmd.getEntityOwnerId();
  Account owner=_entityMgr.findById(Account.class,ownerId);
  Long zoneId=cmd.getZoneId();
  String volumeName=cmd.getName();
  String format=cmd.getFormat();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String imageStoreUuid=cmd.getImageStoreUuid();
  DataStore store=_tmpltMgr.getImageStore(imageStoreUuid,zoneId);
  validateVolume(caller,ownerId,zoneId,volumeName,null,format,diskOfferingId);
  VolumeVO volume=persistVolume(owner,zoneId,volumeName,null,cmd.getFormat(),diskOfferingId,Volume.State.NotUploaded);
  VolumeInfo vol=volFactory.getVolume(volume.getId());
  RegisterVolumePayload payload=new RegisterVolumePayload(null,cmd.getChecksum(),cmd.getFormat());
  vol.addPayload(payload);
  Pair<EndPoint,DataObject> pair=volService.registerVolumeForPostUpload(vol,store);
  EndPoint ep=pair.first();
  DataObject dataObject=pair.second();
  GetUploadParamsResponse response=new GetUploadParamsResponse();
  String ssvmUrlDomain=_configDao.getValue(Config.SecStorageSecureCopyCert.key());
  String url=ImageStoreUtil.generatePostUploadUrl(ssvmUrlDomain,ep.getPublicAddr(),vol.getUuid());
  response.setPostURL(new URL(url));
  VolumeDataStoreVO volumeStore=_volumeStoreDao.findByVolume(volume.getId());
  if (volumeStore != null) {
    volumeStore.setExtractUrl(url);
    _volumeStoreDao.persist(volumeStore);
  }
  response.setId(UUID.fromString(vol.getUuid()));
  int timeout=ImageStoreUploadMonitorImpl.getUploadOperationTimeout();
  DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
  String expires=currentDateTime.plusMinutes(timeout).toString();
  response.setTimeout(expires);
  String key=_configDao.getValue(Config.SSVMPSK.key());
  TemplateOrVolumePostUploadCommand command=new TemplateOrVolumePostUploadCommand(vol.getId(),vol.getUuid(),volumeStore.getInstallPath(),volumeStore.getChecksum(),vol.getType().toString(),vol.getName(),vol.getFormat().toString(),dataObject.getDataStore().getUri(),dataObject.getDataStore().getRole().toString());
  command.setLocalPath(volumeStore.getLocalDownloadPath());
  Gson gson=new GsonBuilder().create();
  String jsonPayload=gson.toJson(command);
  response.setMetadata(EncryptionUtil.encodeData(jsonPayload,key));
  response.setSignature(EncryptionUtil.generateSignature(jsonPayload + url + expires,key));
  return response;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_VOLUME_UPLOAD,eventDescription=""String_Node_Str"",async=true) public GetUploadParamsResponse uploadVolume(GetUploadParamsForVolumeCmd cmd) throws ResourceAllocationException, MalformedURLException {
  Account caller=CallContext.current().getCallingAccount();
  long ownerId=cmd.getEntityOwnerId();
  Account owner=_entityMgr.findById(Account.class,ownerId);
  Long zoneId=cmd.getZoneId();
  String volumeName=cmd.getName();
  String format=cmd.getFormat();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String imageStoreUuid=cmd.getImageStoreUuid();
  DataStore store=_tmpltMgr.getImageStore(imageStoreUuid,zoneId);
  validateVolume(caller,ownerId,zoneId,volumeName,null,format,diskOfferingId);
  VolumeVO volume=persistVolume(owner,zoneId,volumeName,null,cmd.getFormat(),diskOfferingId,Volume.State.NotUploaded);
  VolumeInfo vol=volFactory.getVolume(volume.getId());
  RegisterVolumePayload payload=new RegisterVolumePayload(null,cmd.getChecksum(),cmd.getFormat());
  vol.addPayload(payload);
  Pair<EndPoint,DataObject> pair=volService.registerVolumeForPostUpload(vol,store);
  EndPoint ep=pair.first();
  DataObject dataObject=pair.second();
  GetUploadParamsResponse response=new GetUploadParamsResponse();
  String ssvmUrlDomain=_configDao.getValue(Config.SecStorageSecureCopyCert.key());
  String url=ImageStoreUtil.generatePostUploadUrl(ssvmUrlDomain,ep.getPublicAddr(),vol.getUuid());
  response.setPostURL(new URL(url));
  VolumeDataStoreVO volumeStore=_volumeStoreDao.findByVolume(volume.getId());
  if (volumeStore != null) {
    volumeStore.setExtractUrl(url);
    _volumeStoreDao.persist(volumeStore);
  }
  response.setId(UUID.fromString(vol.getUuid()));
  int timeout=ImageStoreUploadMonitorImpl.getUploadOperationTimeout();
  DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
  String expires=currentDateTime.plusMinutes(timeout).toString();
  response.setTimeout(expires);
  String key=_configDao.getValue(Config.SSVMPSK.key());
  TemplateOrVolumePostUploadCommand command=new TemplateOrVolumePostUploadCommand(vol.getId(),vol.getUuid(),volumeStore.getInstallPath(),volumeStore.getChecksum(),vol.getType().toString(),vol.getName(),vol.getFormat().toString(),dataObject.getDataStore().getUri(),dataObject.getDataStore().getRole().toString());
  command.setLocalPath(volumeStore.getLocalDownloadPath());
  Gson gson=new GsonBuilder().create();
  String metadata=EncryptionUtil.encodeData(gson.toJson(command),key);
  response.setMetadata(metadata);
  response.setSignature(EncryptionUtil.generateSignature(metadata + url + expires,key));
  return response;
}",0.9532462615937914
105402,"@Override @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"") public GetUploadParamsResponse registerTemplateForPostUpload(GetUploadParamsForTemplateCmd cmd) throws ResourceAllocationException, MalformedURLException {
  TemplateAdapter adapter=getAdapter(HypervisorType.getType(cmd.getHypervisor()));
  TemplateProfile profile=adapter.prepare(cmd);
  List<TemplateOrVolumePostUploadCommand> payload=adapter.createTemplateForPostUpload(profile);
  if (CollectionUtils.isNotEmpty(payload)) {
    GetUploadParamsResponse response=new GetUploadParamsResponse();
    TemplateOrVolumePostUploadCommand firstCommand=payload.get(0);
    String ssvmUrlDomain=_configDao.getValue(Config.SecStorageSecureCopyCert.key());
    String url=ImageStoreUtil.generatePostUploadUrl(ssvmUrlDomain,firstCommand.getRemoteEndPoint(),firstCommand.getEntityUUID());
    response.setPostURL(new URL(url));
    TemplateDataStoreVO templateStore=_tmplStoreDao.findByTemplate(firstCommand.getEntityId(),DataStoreRole.getRole(firstCommand.getDataToRole()));
    if (templateStore != null) {
      templateStore.setExtractUrl(url);
      _tmplStoreDao.persist(templateStore);
    }
    response.setId(UUID.fromString(firstCommand.getEntityUUID()));
    int timeout=ImageStoreUploadMonitorImpl.getUploadOperationTimeout();
    DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
    String expires=currentDateTime.plusMinutes(timeout).toString();
    response.setTimeout(expires);
    String key=_configDao.getValue(Config.SSVMPSK.key());
    Gson gson=new GsonBuilder().create();
    String jsonPayload=gson.toJson(firstCommand);
    response.setMetadata(EncryptionUtil.encodeData(jsonPayload,key));
    response.setSignature(EncryptionUtil.generateSignature(jsonPayload + url + expires,key));
    return response;
  }
 else {
    return null;
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"") public GetUploadParamsResponse registerTemplateForPostUpload(GetUploadParamsForTemplateCmd cmd) throws ResourceAllocationException, MalformedURLException {
  TemplateAdapter adapter=getAdapter(HypervisorType.getType(cmd.getHypervisor()));
  TemplateProfile profile=adapter.prepare(cmd);
  List<TemplateOrVolumePostUploadCommand> payload=adapter.createTemplateForPostUpload(profile);
  if (CollectionUtils.isNotEmpty(payload)) {
    GetUploadParamsResponse response=new GetUploadParamsResponse();
    TemplateOrVolumePostUploadCommand firstCommand=payload.get(0);
    String ssvmUrlDomain=_configDao.getValue(Config.SecStorageSecureCopyCert.key());
    String url=ImageStoreUtil.generatePostUploadUrl(ssvmUrlDomain,firstCommand.getRemoteEndPoint(),firstCommand.getEntityUUID());
    response.setPostURL(new URL(url));
    TemplateDataStoreVO templateStore=_tmplStoreDao.findByTemplate(firstCommand.getEntityId(),DataStoreRole.getRole(firstCommand.getDataToRole()));
    if (templateStore != null) {
      templateStore.setExtractUrl(url);
      _tmplStoreDao.persist(templateStore);
    }
    response.setId(UUID.fromString(firstCommand.getEntityUUID()));
    int timeout=ImageStoreUploadMonitorImpl.getUploadOperationTimeout();
    DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
    String expires=currentDateTime.plusMinutes(timeout).toString();
    response.setTimeout(expires);
    String key=_configDao.getValue(Config.SSVMPSK.key());
    Gson gson=new GsonBuilder().create();
    String metadata=EncryptionUtil.encodeData(gson.toJson(firstCommand),key);
    response.setMetadata(metadata);
    response.setSignature(EncryptionUtil.generateSignature(metadata + url + expires,key));
    return response;
  }
 else {
    return null;
  }
}",0.9561238223418572
105403,"@Override public Integer getSourcePortStart(){
  if (publicStartPort != null) {
    return publicStartPort.intValue();
  }
  return null;
}","@Override public Integer getSourcePortStart(){
  if (publicStartPort != null) {
    return publicStartPort;
  }
  return null;
}",0.9588014981273408
105404,"@Override public Integer getSourcePortEnd(){
  if (publicEndPort == null) {
    if (publicStartPort != null) {
      return publicStartPort.intValue();
    }
  }
 else {
    return publicEndPort.intValue();
  }
  return null;
}","@Override public Integer getSourcePortEnd(){
  if (publicEndPort == null) {
    if (publicStartPort != null) {
      return publicStartPort;
    }
  }
 else {
    return publicEndPort;
  }
  return null;
}",0.949074074074074
105405,"@Override public Long getSyncObjId(){
  return _firewallService.getFirewallRule(id).getNetworkId();
}","@Override public Long getSyncObjId(){
  FirewallRule fw=_firewallService.getFirewallRule(id);
  if (fw != null)   return fw.getNetworkId();
  return null;
}",0.7626459143968871
105406,"@Override @Before public void setUp(){
  addIpToVmNicCmd=new AddIpToVmNicCmd(){
  }
;
  removeIpFromVmNicCmd=new RemoveIpFromVmNicCmd();
}","@Override @Before public void setUp(){
}",0.449438202247191
105407,"@Test public void testRemoveIpFromVmNicSuccess() throws ResourceAllocationException, ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  NetworkService networkService=Mockito.mock(NetworkService.class);
  RemoveIpFromVmNicCmd removeIpFromNic=Mockito.mock(RemoveIpFromVmNicCmd.class);
  Mockito.when(networkService.releaseSecondaryIpFromNic(Matchers.anyInt())).thenReturn(true);
  removeIpFromNic._networkService=networkService;
  successResponseGenerator=Mockito.mock(SuccessResponse.class);
  removeIpFromNic.execute();
}","@Test public void testRemoveIpFromVmNicSuccess() throws ResourceAllocationException, ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  NetworkService networkService=Mockito.mock(NetworkService.class);
  RemoveIpFromVmNicCmd removeIpFromNic=Mockito.mock(RemoveIpFromVmNicCmd.class);
  Mockito.when(networkService.releaseSecondaryIpFromNic(Matchers.anyInt())).thenReturn(true);
  removeIpFromNic._networkService=networkService;
  removeIpFromNic.execute();
}",0.9398496240601504
105408,"@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
      newTemplate.setPath(path);
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}","@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      if (dsMo != null) {
        String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
        newTemplate.setPath(path);
      }
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}",0.9964710252600296
105409,"private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    FileReader fr=new FileReader(xmlFilePath);
    BufferedReader br=new BufferedReader(fr);
    String xml=""String_Node_Str"";
    String line;
    while ((line=br.readLine()) != null) {
      xml+=line.trim();
    }
    return xml;
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}","private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    try (FileReader fr=new FileReader(xmlFilePath);BufferedReader br=new BufferedReader(fr)){
      String xml=""String_Node_Str"";
      String line;
      while ((line=br.readLine()) != null) {
        xml+=line.trim();
      }
      return xml;
    }
 catch (    Exception e) {
      s_logger.debug(e);
      return null;
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}",0.8339285714285715
105410,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handle(final HttpRequest request,final HttpResponse response,final HttpContext context) throws HttpException, IOException {
  final StringBuilder sb=new StringBuilder();
  final HttpServerConnection connObj=(HttpServerConnection)context.getAttribute(""String_Node_Str"");
  if (connObj instanceof SocketHttpServerConnection) {
    final InetAddress remoteAddr=((SocketHttpServerConnection)connObj).getRemoteAddress();
    sb.append(remoteAddr.toString() + ""String_Node_Str"");
  }
  sb.append(StringUtils.cleanString(request.getRequestLine().toString()));
  try {
    List<NameValuePair> paramList=null;
    try {
      paramList=URLEncodedUtils.parse(new URI(request.getRequestLine().getUri()),HttpUtils.UTF_8);
    }
 catch (    final URISyntaxException e) {
      s_logger.error(""String_Node_Str"",e);
    }
    final Map parameterMap=new HashMap<String,String[]>();
    String responseType=HttpUtils.RESPONSE_TYPE_XML;
    for (    final NameValuePair param : paramList) {
      if (param.getName().equalsIgnoreCase(""String_Node_Str"")) {
        responseType=param.getValue();
        continue;
      }
      parameterMap.put(param.getName(),new String[]{param.getValue()});
    }
    parameterMap.put(""String_Node_Str"",new String[]{request.getRequestLine().getMethod()});
    if (!(responseType.equals(HttpUtils.RESPONSE_TYPE_JSON) || responseType.equals(HttpUtils.RESPONSE_TYPE_XML))) {
      responseType=HttpUtils.RESPONSE_TYPE_XML;
    }
    try {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
      sb.insert(0,""String_Node_Str"" + User.UID_SYSTEM + ""String_Node_Str""+ Account.ACCOUNT_ID_SYSTEM+ ""String_Node_Str""+ null+ ""String_Node_Str"");
      final String responseText=handleRequest(parameterMap,responseType,sb);
      sb.append(""String_Node_Str"" + ((responseText == null) ? 0 : responseText.length()));
      writeResponse(response,responseText,HttpStatus.SC_OK,responseType,null);
    }
 catch (    final ServerApiException se) {
      final String responseText=getSerializedApiError(se,parameterMap,responseType);
      writeResponse(response,responseText,se.getErrorCode().getHttpCode(),responseType,se.getDescription());
      sb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
    }
catch (    final RuntimeException e) {
      s_logger.error(""String_Node_Str"",e);
      throw e;
    }
  }
  finally {
    s_accessLogger.info(sb.toString());
    CallContext.unregister();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handle(final HttpRequest request,final HttpResponse response,final HttpContext context) throws HttpException, IOException {
  final StringBuilder sb=new StringBuilder();
  final HttpServerConnection connObj=(HttpServerConnection)context.getAttribute(""String_Node_Str"");
  if (connObj instanceof SocketHttpServerConnection) {
    final InetAddress remoteAddr=((SocketHttpServerConnection)connObj).getRemoteAddress();
    sb.append(remoteAddr.toString() + ""String_Node_Str"");
  }
  sb.append(StringUtils.cleanString(request.getRequestLine().toString()));
  try {
    List<NameValuePair> paramList=null;
    try {
      paramList=URLEncodedUtils.parse(new URI(request.getRequestLine().getUri()),HttpUtils.UTF_8);
    }
 catch (    final URISyntaxException e) {
      s_logger.error(""String_Node_Str"",e);
    }
    final Map parameterMap=new HashMap<String,String[]>();
    String responseType=HttpUtils.RESPONSE_TYPE_XML;
    if (paramList != null) {
      for (      final NameValuePair param : paramList) {
        if (param.getName().equalsIgnoreCase(""String_Node_Str"")) {
          responseType=param.getValue();
          continue;
        }
        parameterMap.put(param.getName(),new String[]{param.getValue()});
      }
    }
    parameterMap.put(""String_Node_Str"",new String[]{request.getRequestLine().getMethod()});
    if (!(responseType.equals(HttpUtils.RESPONSE_TYPE_JSON) || responseType.equals(HttpUtils.RESPONSE_TYPE_XML))) {
      responseType=HttpUtils.RESPONSE_TYPE_XML;
    }
    try {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
      sb.insert(0,""String_Node_Str"" + User.UID_SYSTEM + ""String_Node_Str""+ Account.ACCOUNT_ID_SYSTEM+ ""String_Node_Str""+ null+ ""String_Node_Str"");
      final String responseText=handleRequest(parameterMap,responseType,sb);
      sb.append(""String_Node_Str"" + ((responseText == null) ? 0 : responseText.length()));
      writeResponse(response,responseText,HttpStatus.SC_OK,responseType,null);
    }
 catch (    final ServerApiException se) {
      final String responseText=getSerializedApiError(se,parameterMap,responseType);
      writeResponse(response,responseText,se.getErrorCode().getHttpCode(),responseType,se.getDescription());
      sb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
    }
catch (    final RuntimeException e) {
      s_logger.error(""String_Node_Str"",e);
      throw e;
    }
  }
  finally {
    s_accessLogger.info(sb.toString());
    CallContext.unregister();
  }
}",0.9738321380112424
105411,"@Override public void scheduleRestartForVmsOnHost(final HostVO host,boolean investigate){
  if (host.getType() != Host.Type.Routing) {
    return;
  }
  if (host.getHypervisorType() == HypervisorType.VMware || host.getHypervisorType() == HypervisorType.Hyperv) {
    s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    return;
  }
  s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName());
  final List<VMInstanceVO> vms=_instanceDao.listByHostId(host.getId());
  final DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
  StringBuilder sb=null;
  if ((vms != null) && !vms.isEmpty()) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    VMInstanceVO vm=vms.get(0);
    if (vm.isHaEnabled()) {
      sb.append(""String_Node_Str"" + vm);
    }
    for (int i=1; i < vms.size(); i++) {
      vm=vms.get(i);
      if (vm.isHaEnabled()) {
        sb.append(""String_Node_Str"" + vm.getHostName());
      }
    }
  }
  HostPodVO podVO=_podDao.findById(host.getPodId());
  String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str""+ ((sb != null) ? sb.toString() : ""String_Node_Str""));
  for (  VMInstanceVO vm : vms) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getInstanceName());
    }
    vm=_instanceDao.findByUuid(vm.getUuid());
    Long hostId=vm.getHostId();
    if (hostId != null && !hostId.equals(host.getId())) {
      s_logger.debug(""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ hostId+ ""String_Node_Str"");
      continue;
    }
    scheduleRestart(vm,investigate);
  }
}","@Override public void scheduleRestartForVmsOnHost(final HostVO host,boolean investigate){
  if (host.getType() != Host.Type.Routing) {
    return;
  }
  if (host.getHypervisorType() == HypervisorType.VMware || host.getHypervisorType() == HypervisorType.Hyperv) {
    s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    return;
  }
  s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName());
  final List<VMInstanceVO> vms=_instanceDao.listByHostId(host.getId());
  final DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
  StringBuilder sb=null;
  if ((vms != null) && !vms.isEmpty()) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    VMInstanceVO vm=vms.get(0);
    if (vm.isHaEnabled()) {
      sb.append(""String_Node_Str"" + vm);
    }
    for (int i=1; i < vms.size(); i++) {
      vm=vms.get(i);
      if (vm.isHaEnabled()) {
        sb.append(""String_Node_Str"" + vm.getHostName());
      }
    }
  }
  HostPodVO podVO=_podDao.findById(host.getPodId());
  String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str""+ ((sb != null) ? sb.toString() : ""String_Node_Str""));
  if (vms != null) {
    for (    VMInstanceVO vm : vms) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getInstanceName());
      }
      vm=_instanceDao.findByUuid(vm.getUuid());
      Long hostId=vm.getHostId();
      if (hostId != null && !hostId.equals(host.getId())) {
        s_logger.debug(""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ hostId+ ""String_Node_Str"");
        continue;
      }
      scheduleRestart(vm,investigate);
    }
  }
}",0.9849987287058224
105412,"protected HostVO createHostVO(StartupCommand[] cmds,ServerResource resource,Map<String,String> details,List<String> hostTags,ResourceStateAdapter.Event stateEvent){
  StartupCommand startup=cmds[0];
  HostVO host=findHostByGuid(startup.getGuid());
  boolean isNew=false;
  if (host == null) {
    host=findHostByGuid(startup.getGuidWithoutResource());
  }
  if (host == null) {
    host=new HostVO(startup.getGuid());
    isNew=true;
  }
  String dataCenter=startup.getDataCenter();
  String pod=startup.getPod();
  String cluster=startup.getCluster();
  if (pod != null && dataCenter != null && pod.equalsIgnoreCase(""String_Node_Str"") && dataCenter.equalsIgnoreCase(""String_Node_Str"")) {
    List<HostPodVO> pods=_podDao.listAllIncludingRemoved();
    for (    HostPodVO hpv : pods) {
      if (checkCIDR(hpv,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hpv.getName();
        dataCenter=_dcDao.findById(hpv.getDataCenterId()).getName();
        break;
      }
    }
  }
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + dataCenter + ""String_Node_Str"");
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + startup.getPrivateIpAddress() + ""String_Node_Str""+ dataCenter);
  }
  dcId=dc.getId();
  HostPodVO p=_podDao.findByName(pod,dcId);
  if (p == null) {
    try {
      final long podId=Long.parseLong(pod);
      p=_podDao.findById(podId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + pod + ""String_Node_Str"");
    }
  }
  Long podId=(p == null ? null : p.getId());
  Long clusterId=null;
  if (cluster != null) {
    try {
      clusterId=Long.valueOf(cluster);
    }
 catch (    NumberFormatException e) {
      ClusterVO c=_clusterDao.findBy(cluster,podId);
      if (c == null) {
        c=new ClusterVO(dcId,podId,cluster);
        c=_clusterDao.persist(c);
      }
      clusterId=c.getId();
    }
  }
  if (startup instanceof StartupRoutingCommand) {
    StartupRoutingCommand ssCmd=((StartupRoutingCommand)startup);
    List<String> implicitHostTags=ssCmd.getHostTags();
    if (!implicitHostTags.isEmpty()) {
      if (hostTags == null) {
        hostTags=_hostTagsDao.gethostTags(host.getId());
      }
      if (hostTags != null) {
        implicitHostTags.removeAll(hostTags);
        hostTags.addAll(implicitHostTags);
      }
 else {
        hostTags=implicitHostTags;
      }
    }
  }
  host.setDataCenterId(dc.getId());
  host.setPodId(podId);
  host.setClusterId(clusterId);
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setManagementServerId(_nodeId);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setHostTags(hostTags);
  host.setDetails(details);
  if (startup.getStorageIpAddressDeux() != null) {
    host.setStorageIpAddressDeux(startup.getStorageIpAddressDeux());
    host.setStorageMacAddressDeux(startup.getStorageMacAddressDeux());
    host.setStorageNetmaskDeux(startup.getStorageNetmaskDeux());
  }
  if (resource != null) {
    host.setResource(resource.getClass().getName());
  }
  host=(HostVO)dispatchToStateAdapters(stateEvent,true,host,cmds,resource,details,hostTags);
  if (host == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (isNew) {
    host=_hostDao.persist(host);
  }
 else {
    _hostDao.update(host.getId(),host);
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.InternalCreated,_nodeId);
    _agentMgr.agentStatusTransitTo(host,Status.Event.AgentConnected,_nodeId);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    _agentMgr.agentStatusTransitTo(host,Status.Event.Error,_nodeId);
    try {
      resourceStateTransitTo(host,ResourceState.Event.Error,_nodeId);
    }
 catch (    NoTransitionException e1) {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    }
  }
  return host;
}","protected HostVO createHostVO(StartupCommand[] cmds,ServerResource resource,Map<String,String> details,List<String> hostTags,ResourceStateAdapter.Event stateEvent){
  StartupCommand startup=cmds[0];
  HostVO host=findHostByGuid(startup.getGuid());
  boolean isNew=false;
  if (host == null) {
    host=findHostByGuid(startup.getGuidWithoutResource());
  }
  if (host == null) {
    host=new HostVO(startup.getGuid());
    isNew=true;
  }
  String dataCenter=startup.getDataCenter();
  String pod=startup.getPod();
  String cluster=startup.getCluster();
  if (pod != null && dataCenter != null && pod.equalsIgnoreCase(""String_Node_Str"") && dataCenter.equalsIgnoreCase(""String_Node_Str"")) {
    List<HostPodVO> pods=_podDao.listAllIncludingRemoved();
    for (    HostPodVO hpv : pods) {
      if (checkCIDR(hpv,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hpv.getName();
        dataCenter=_dcDao.findById(hpv.getDataCenterId()).getName();
        break;
      }
    }
  }
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + dataCenter + ""String_Node_Str"");
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + startup.getPrivateIpAddress() + ""String_Node_Str""+ dataCenter);
  }
  dcId=dc.getId();
  HostPodVO p=_podDao.findByName(pod,dcId);
  if (p == null) {
    try {
      final long podId=Long.parseLong(pod);
      p=_podDao.findById(podId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + pod + ""String_Node_Str"");
    }
  }
  Long podId=(p == null ? null : p.getId());
  Long clusterId=null;
  if (cluster != null) {
    try {
      clusterId=Long.valueOf(cluster);
    }
 catch (    NumberFormatException e) {
      if (podId != null) {
        ClusterVO c=_clusterDao.findBy(cluster,podId.longValue());
        if (c == null) {
          c=new ClusterVO(dcId,podId.longValue(),cluster);
          c=_clusterDao.persist(c);
        }
        clusterId=c.getId();
      }
    }
  }
  if (startup instanceof StartupRoutingCommand) {
    StartupRoutingCommand ssCmd=((StartupRoutingCommand)startup);
    List<String> implicitHostTags=ssCmd.getHostTags();
    if (!implicitHostTags.isEmpty()) {
      if (hostTags == null) {
        hostTags=_hostTagsDao.gethostTags(host.getId());
      }
      if (hostTags != null) {
        implicitHostTags.removeAll(hostTags);
        hostTags.addAll(implicitHostTags);
      }
 else {
        hostTags=implicitHostTags;
      }
    }
  }
  host.setDataCenterId(dc.getId());
  host.setPodId(podId);
  host.setClusterId(clusterId);
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setManagementServerId(_nodeId);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setHostTags(hostTags);
  host.setDetails(details);
  if (startup.getStorageIpAddressDeux() != null) {
    host.setStorageIpAddressDeux(startup.getStorageIpAddressDeux());
    host.setStorageMacAddressDeux(startup.getStorageMacAddressDeux());
    host.setStorageNetmaskDeux(startup.getStorageNetmaskDeux());
  }
  if (resource != null) {
    host.setResource(resource.getClass().getName());
  }
  host=(HostVO)dispatchToStateAdapters(stateEvent,true,host,cmds,resource,details,hostTags);
  if (host == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (isNew) {
    host=_hostDao.persist(host);
  }
 else {
    _hostDao.update(host.getId(),host);
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.InternalCreated,_nodeId);
    _agentMgr.agentStatusTransitTo(host,Status.Event.AgentConnected,_nodeId);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    _agentMgr.agentStatusTransitTo(host,Status.Event.Error,_nodeId);
    try {
      resourceStateTransitTo(host,ResourceState.Event.Error,_nodeId);
    }
 catch (    NoTransitionException e1) {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    }
  }
  return host;
}",0.987636056218958
105413,"public static BigInteger countIp6InRange(String ip6Range){
  if (ip6Range == null) {
    return null;
  }
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  String endIp=ips[0];
  if (ips.length > 1) {
    endIp=ips[1];
  }
  IPv6Address start, end;
  try {
    start=IPv6Address.fromString(startIp);
    end=IPv6Address.fromString(endIp);
  }
 catch (  IllegalArgumentException ex) {
    return null;
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger endInt=convertIPv6AddressToBigInteger(end);
  if (endInt != null) {
    if (startInt.compareTo(endInt) > 0) {
      return null;
    }
  }
  return endInt.subtract(startInt).add(BigInteger.ONE);
}","public static BigInteger countIp6InRange(String ip6Range){
  if (ip6Range == null) {
    return null;
  }
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  String endIp=ips[0];
  if (ips.length > 1) {
    endIp=ips[1];
  }
  IPv6Address start, end;
  try {
    start=IPv6Address.fromString(startIp);
    end=IPv6Address.fromString(endIp);
  }
 catch (  IllegalArgumentException ex) {
    return null;
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger endInt=convertIPv6AddressToBigInteger(end);
  if (endInt != null) {
    if (startInt != null) {
      if (startInt.compareTo(endInt) > 0) {
        return null;
      }
    }
    return endInt.subtract(startInt).add(BigInteger.ONE);
  }
  return null;
}",0.9431895961670088
105414,"private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"")+ ""String_Node_Str"");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          if (bytesSent == null || bytesRcvd == null) {
            s_logger.debug(""String_Node_Str"" + publicIp);
          }
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
      in.close();
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}","private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"")+ ""String_Node_Str"");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
      in.close();
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}",0.9625890736342044
105415,"@Override public void processConnect(Host agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + agent.getId());
  _syncMgr.resetHostSyncState(agent.getId());
  if (forRebalance) {
    s_logger.debug(""String_Node_Str"" + this + ""String_Node_Str"");
    return;
  }
  if (forRebalance) {
    s_logger.debug(""String_Node_Str"" + this + ""String_Node_Str"");
    return;
  }
  Long clusterId=agent.getClusterId();
  long agentId=agent.getId();
  if (agent.getHypervisorType() == HypervisorType.XenServer) {
    ClusterVMMetaDataSyncCommand syncVMMetaDataCmd=new ClusterVMMetaDataSyncCommand(ClusterVMMetaDataSyncInterval.value(),clusterId);
    try {
      long seq_no=_agentMgr.send(agentId,new Commands(syncVMMetaDataCmd),this);
      s_logger.debug(""String_Node_Str"" + seq_no);
    }
 catch (    AgentUnavailableException e) {
      s_logger.fatal(""String_Node_Str"" + clusterId + ""String_Node_Str"",e);
    }
  }
}","@Override public void processConnect(Host agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + agent.getId());
  _syncMgr.resetHostSyncState(agent.getId());
  if (forRebalance) {
    s_logger.debug(""String_Node_Str"" + this + ""String_Node_Str"");
    return;
  }
  Long clusterId=agent.getClusterId();
  long agentId=agent.getId();
  if (agent.getHypervisorType() == HypervisorType.XenServer) {
    ClusterVMMetaDataSyncCommand syncVMMetaDataCmd=new ClusterVMMetaDataSyncCommand(ClusterVMMetaDataSyncInterval.value(),clusterId);
    try {
      long seq_no=_agentMgr.send(agentId,new Commands(syncVMMetaDataCmd),this);
      s_logger.debug(""String_Node_Str"" + seq_no);
    }
 catch (    AgentUnavailableException e) {
      s_logger.fatal(""String_Node_Str"" + clusterId + ""String_Node_Str"",e);
    }
  }
}",0.9486166007905138
105416,"@Override public Answer createVolume(CreateObjectCommand cmd){
  VolumeObjectTO volume=(VolumeObjectTO)cmd.getData();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  long disksize;
  try {
    primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    disksize=volume.getSize();
    PhysicalDiskFormat format;
    if (volume.getFormat() == null) {
      format=primaryPool.getDefaultFormat();
    }
 else {
      format=PhysicalDiskFormat.valueOf(volume.getFormat().toString().toUpperCase());
    }
    vol=primaryPool.createPhysicalDisk(volume.getUuid(),format,volume.getProvisioningType(),disksize);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(vol.getName());
    newVol.setSize(volume.getSize());
    newVol.setFormat(ImageFormat.valueOf(format.toString().toUpperCase()));
    return new CreateObjectAnswer(newVol);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    return new CreateObjectAnswer(e.toString());
  }
}","@Override public Answer createVolume(CreateObjectCommand cmd){
  VolumeObjectTO volume=(VolumeObjectTO)cmd.getData();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  long disksize;
  try {
    primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    disksize=volume.getSize();
    PhysicalDiskFormat format;
    if (volume.getFormat() == null) {
      format=primaryPool.getDefaultFormat();
    }
 else {
      format=PhysicalDiskFormat.valueOf(volume.getFormat().toString().toUpperCase());
    }
    vol=primaryPool.createPhysicalDisk(volume.getUuid(),format,volume.getProvisioningType(),disksize);
    VolumeObjectTO newVol=new VolumeObjectTO();
    if (vol != null) {
      newVol.setPath(vol.getName());
    }
    newVol.setSize(volume.getSize());
    newVol.setFormat(ImageFormat.valueOf(format.toString().toUpperCase()));
    return new CreateObjectAnswer(newVol);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    return new CreateObjectAnswer(e.toString());
  }
}",0.9860924181247196
105417,"/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size,KVMStoragePool destPool,int timeout){
  s_logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ destPool.getUuid()+ ""String_Node_Str""+ destPool.getType().toString()+ ""String_Node_Str""+ size);
  KVMPhysicalDisk disk=null;
  if (destPool.getType() == StoragePoolType.RBD) {
    disk=createDiskFromTemplateOnRBD(template,name,format,provisioningType,size,destPool,timeout);
  }
 else {
    try {
      String newUuid=name;
      disk=destPool.createPhysicalDisk(newUuid,format,provisioningType,template.getVirtualSize());
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImg qemu=new QemuImg(timeout);
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),format);
        if (size > template.getVirtualSize()) {
          destFile.setSize(size);
        }
 else {
          destFile.setSize(template.getVirtualSize());
        }
        Map<String,String> options=new HashMap<String,String>();
        options.put(""String_Node_Str"",QemuImg.PreallocationType.getPreallocationType(provisioningType).toString());
switch (provisioningType) {
case THIN:
          QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.create(destFile,backingFile,options);
      break;
case SPARSE:
case FAT:
    QemuImgFile srcFile=new QemuImgFile(template.getPath(),template.getFormat());
  qemu.convert(srcFile,destFile,options);
break;
}
}
 else if (format == PhysicalDiskFormat.RAW) {
QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
if (size > template.getVirtualSize()) {
destFile.setSize(size);
}
 else {
destFile.setSize(template.getVirtualSize());
}
QemuImg qemu=new QemuImg(timeout);
Map<String,String> options=new HashMap<String,String>();
qemu.convert(sourceFile,destFile,options);
}
}
 catch (QemuImgException e) {
s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
}
}
if (disk == null) {
throw new CloudRuntimeException(""String_Node_Str"" + template.getName());
}
return disk;
}","/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size,KVMStoragePool destPool,int timeout){
  s_logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ destPool.getUuid()+ ""String_Node_Str""+ destPool.getType().toString()+ ""String_Node_Str""+ size);
  KVMPhysicalDisk disk=null;
  if (destPool.getType() == StoragePoolType.RBD) {
    disk=createDiskFromTemplateOnRBD(template,name,format,provisioningType,size,destPool,timeout);
  }
 else {
    try {
      String newUuid=name;
      disk=destPool.createPhysicalDisk(newUuid,format,provisioningType,template.getVirtualSize());
      if (disk == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + template.getName());
      }
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImg qemu=new QemuImg(timeout);
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),format);
        if (size > template.getVirtualSize()) {
          destFile.setSize(size);
        }
 else {
          destFile.setSize(template.getVirtualSize());
        }
        Map<String,String> options=new HashMap<String,String>();
        options.put(""String_Node_Str"",QemuImg.PreallocationType.getPreallocationType(provisioningType).toString());
switch (provisioningType) {
case THIN:
          QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.create(destFile,backingFile,options);
      break;
case SPARSE:
case FAT:
    QemuImgFile srcFile=new QemuImgFile(template.getPath(),template.getFormat());
  qemu.convert(srcFile,destFile,options);
break;
}
}
 else if (format == PhysicalDiskFormat.RAW) {
QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
if (size > template.getVirtualSize()) {
destFile.setSize(size);
}
 else {
destFile.setSize(template.getVirtualSize());
}
QemuImg qemu=new QemuImg(timeout);
Map<String,String> options=new HashMap<String,String>();
qemu.convert(sourceFile,destFile,options);
}
}
 catch (QemuImgException e) {
s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
}
}
return disk;
}",0.9665711556829036
105418,"@Override @DB public Pair<Boolean,Long> validateAndAddVsm(final String vsmIp,final String vsmUser,final String vsmPassword,final long clusterId,String clusterName) throws ResourceInUseException {
  CiscoNexusVSMDeviceVO vsm=null;
  boolean vsmAdded=false;
  Long vsmId=0L;
  if (vsmIp != null && vsmUser != null && vsmPassword != null) {
    NetconfHelper netconfClient;
    try {
      netconfClient=new NetconfHelper(vsmIp,vsmUser,vsmPassword);
      netconfClient.disconnect();
    }
 catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"" + vsmUser + ""String_Node_Str""+ vsmIp;
      s_logger.error(msg);
      _clusterDao.remove(clusterId);
      throw new CloudRuntimeException(msg);
    }
    vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
    if (vsm != null) {
      List<ClusterVSMMapVO> clusterList=_clusterVSMDao.listByVSMId(vsm.getId());
      if (clusterList != null && !clusterList.isEmpty()) {
        s_logger.error(""String_Node_Str"");
        ResourceInUseException ex=new ResourceInUseException(""String_Node_Str"");
        ClusterVO cluster=_clusterDao.findById(clusterList.get(0).getClusterId());
        ex.addProxyObject(cluster.getUuid());
        _clusterDao.remove(clusterId);
        throw ex;
      }
    }
    vsm=Transaction.execute(new TransactionCallback<CiscoNexusVSMDeviceVO>(){
      @Override public CiscoNexusVSMDeviceVO doInTransaction(      TransactionStatus status){
        CiscoNexusVSMDeviceVO vsm=null;
        if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
          vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
          vsm=_vsmDao.persist(vsm);
        }
        vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
        if (vsm != null) {
          ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
          _clusterVSMDao.persist(connectorObj);
        }
        return vsm;
      }
    }
);
  }
 else {
    String msg;
    msg=""String_Node_Str"" + Config.VmwareUseNexusVSwitch.toString() + ""String_Node_Str"";
    if (vsmIp == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmUser == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmPassword == null) {
      if (vsmUser != null) {
        msg+=""String_Node_Str"" + vsmUser + ""String_Node_Str"";
      }
 else {
        msg+=""String_Node_Str"";
      }
    }
    s_logger.error(msg);
    _clusterDao.remove(clusterId);
    throw new CloudRuntimeException(msg);
  }
  if (vsm != null) {
    vsmAdded=true;
    vsmId=vsm.getId();
  }
  return new Pair<Boolean,Long>(vsmAdded,vsmId);
}","@Override @DB public Pair<Boolean,Long> validateAndAddVsm(final String vsmIp,final String vsmUser,final String vsmPassword,final long clusterId,String clusterName) throws ResourceInUseException {
  CiscoNexusVSMDeviceVO vsm=null;
  boolean vsmAdded=false;
  Long vsmId=0L;
  if (vsmIp != null && vsmUser != null && vsmPassword != null) {
    NetconfHelper netconfClient;
    try {
      netconfClient=new NetconfHelper(vsmIp,vsmUser,vsmPassword);
      netconfClient.disconnect();
    }
 catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"" + vsmUser + ""String_Node_Str""+ vsmIp;
      s_logger.error(msg);
      _clusterDao.remove(clusterId);
      throw new CloudRuntimeException(msg);
    }
    vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
    if (vsm != null) {
      List<ClusterVSMMapVO> clusterList=_clusterVSMDao.listByVSMId(vsm.getId());
      if (clusterList != null && !clusterList.isEmpty()) {
        s_logger.error(""String_Node_Str"");
        ResourceInUseException ex=new ResourceInUseException(""String_Node_Str"");
        ClusterVO cluster=_clusterDao.findById(clusterList.get(0).getClusterId());
        ex.addProxyObject(cluster.getUuid());
        _clusterDao.remove(clusterId);
        throw ex;
      }
    }
    vsm=Transaction.execute(new TransactionCallback<CiscoNexusVSMDeviceVO>(){
      @Override public CiscoNexusVSMDeviceVO doInTransaction(      TransactionStatus status){
        CiscoNexusVSMDeviceVO vsm=null;
        if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
          vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
          _vsmDao.persist(vsm);
        }
        vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
        if (vsm != null) {
          ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
          _clusterVSMDao.persist(connectorObj);
        }
        return vsm;
      }
    }
);
  }
 else {
    String msg;
    msg=""String_Node_Str"" + Config.VmwareUseNexusVSwitch.toString() + ""String_Node_Str"";
    if (vsmIp == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmUser == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmPassword == null) {
      if (vsmUser != null) {
        msg+=""String_Node_Str"" + vsmUser + ""String_Node_Str"";
      }
 else {
        msg+=""String_Node_Str"";
      }
    }
    s_logger.error(msg);
    _clusterDao.remove(clusterId);
    throw new CloudRuntimeException(msg);
  }
  if (vsm != null) {
    vsmAdded=true;
    vsmId=vsm.getId();
  }
  return new Pair<Boolean,Long>(vsmAdded,vsmId);
}",0.9992066640222134
105419,"@Override public CiscoNexusVSMDeviceVO doInTransaction(TransactionStatus status){
  CiscoNexusVSMDeviceVO vsm=null;
  if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
    vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
    vsm=_vsmDao.persist(vsm);
  }
  vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
  if (vsm != null) {
    ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
    _clusterVSMDao.persist(connectorObj);
  }
  return vsm;
}","@Override public CiscoNexusVSMDeviceVO doInTransaction(TransactionStatus status){
  CiscoNexusVSMDeviceVO vsm=null;
  if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
    vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
    _vsmDao.persist(vsm);
  }
  vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
  if (vsm != null) {
    ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
    _clusterVSMDao.persist(connectorObj);
  }
  return vsm;
}",0.9956427015250544
105420,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_CREATE,eventDescription=""String_Node_Str"",async=true) public Snapshot createSnapshot(Long volumeId,Long policyId,Long snapshotId,Account snapshotOwner){
  VolumeInfo volume=volFactory.getVolume(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean backedUp=false;
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,true,volume);
  SnapshotInfo snapshot=snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Primary);
  try {
    postCreateSnapshot(volumeId,snapshot.getId(),policyId);
    SnapshotVO freshSnapshot=_snapshotDao.findById(snapshot.getId());
    if ((freshSnapshot != null) && backedUp) {
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize(),snapshot.getClass().getName(),snapshot.getUuid());
    }
    _resourceLimitMgr.incrementResourceCount(snapshotOwner.getId(),ResourceType.snapshot);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return snapshot;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_CREATE,eventDescription=""String_Node_Str"",async=true) public Snapshot createSnapshot(Long volumeId,Long policyId,Long snapshotId,Account snapshotOwner){
  VolumeInfo volume=volFactory.getVolume(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,true,volume);
  SnapshotInfo snapshot=snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Primary);
  if (snapshot != null) {
    s_logger.debug(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    postCreateSnapshot(volumeId,snapshot.getId(),policyId);
    SnapshotVO freshSnapshot=_snapshotDao.findById(snapshot.getId());
    if (freshSnapshot != null) {
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize(),snapshot.getClass().getName(),snapshot.getUuid());
    }
    _resourceLimitMgr.incrementResourceCount(snapshotOwner.getId(),ResourceType.snapshot);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return snapshot;
}",0.9405405405405406
105421,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachineTemplate createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  Long userId=CallContext.current().getCallingUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  final long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  VMTemplateVO privateTemplate=null;
  final Long accountId=CallContext.current().getCallingAccountId();
  SnapshotVO snapshot=null;
  VolumeVO volume=null;
  try {
    TemplateInfo tmplInfo=_tmplFactory.getTemplate(templateId,DataStoreRole.Image);
    long zoneId=0;
    if (snapshotId != null) {
      snapshot=_snapshotDao.findById(snapshotId);
      zoneId=snapshot.getDataCenterId();
    }
 else     if (volumeId != null) {
      volume=_volumeDao.findById(volumeId);
      zoneId=volume.getDataCenterId();
    }
    DataStore store=_dataStoreMgr.getImageStore(zoneId);
    if (store == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
    }
    AsyncCallFuture<TemplateApiResult> future=null;
    if (snapshotId != null) {
      SnapshotInfo snapInfo=_snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Image);
      DataStore snapStore=snapInfo.getDataStore();
      if (snapStore != null) {
        store=snapStore;
      }
      future=_tmpltSvr.createTemplateFromSnapshotAsync(snapInfo,tmplInfo,store);
    }
 else     if (volumeId != null) {
      VolumeInfo volInfo=_volFactory.getVolume(volumeId);
      future=_tmpltSvr.createTemplateFromVolumeAsync(volInfo,tmplInfo,store);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    CommandResult result=null;
    try {
      result=future.get();
      if (result.isFailed()) {
        privateTemplate=null;
        s_logger.debug(""String_Node_Str"" + result.getResult());
        throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
      }
      if (_dataStoreMgr.isRegionStore(store)) {
        _tmpltSvr.associateTemplateToZone(templateId,null);
      }
 else {
        VMTemplateZoneVO templateZone=new VMTemplateZoneVO(zoneId,templateId,new Date());
        _tmpltZoneDao.persist(templateZone);
      }
      privateTemplate=_tmpltDao.findById(templateId);
      TemplateDataStoreVO srcTmpltStore=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_TEMPLATE_CREATE,privateTemplate.getAccountId(),zoneId,privateTemplate.getId(),privateTemplate.getName(),null,privateTemplate.getSourceTemplateId(),srcTmpltStore.getPhysicalSize(),privateTemplate.getSize());
      _usageEventDao.persist(usageEvent);
    }
 catch (    InterruptedException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  finally {
    if (privateTemplate == null) {
      final VolumeVO volumeFinal=volume;
      final SnapshotVO snapshotFinal=snapshot;
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _tmplStoreDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltZoneDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltDao.expunge(templateId);
          if (accountId != null) {
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.template);
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.secondary_storage,new Long(volumeFinal != null ? volumeFinal.getSize() : snapshotFinal.getSize()));
          }
        }
      }
);
    }
  }
  if (privateTemplate != null) {
    return privateTemplate;
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachineTemplate createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  final long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  VMTemplateVO privateTemplate=null;
  final Long accountId=CallContext.current().getCallingAccountId();
  SnapshotVO snapshot=null;
  VolumeVO volume=null;
  try {
    TemplateInfo tmplInfo=_tmplFactory.getTemplate(templateId,DataStoreRole.Image);
    long zoneId=0;
    if (snapshotId != null) {
      snapshot=_snapshotDao.findById(snapshotId);
      zoneId=snapshot.getDataCenterId();
    }
 else     if (volumeId != null) {
      volume=_volumeDao.findById(volumeId);
      zoneId=volume.getDataCenterId();
    }
    DataStore store=_dataStoreMgr.getImageStore(zoneId);
    if (store == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
    }
    AsyncCallFuture<TemplateApiResult> future=null;
    if (snapshotId != null) {
      SnapshotInfo snapInfo=_snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Image);
      DataStore snapStore=snapInfo.getDataStore();
      if (snapStore != null) {
        store=snapStore;
      }
      future=_tmpltSvr.createTemplateFromSnapshotAsync(snapInfo,tmplInfo,store);
    }
 else     if (volumeId != null) {
      VolumeInfo volInfo=_volFactory.getVolume(volumeId);
      future=_tmpltSvr.createTemplateFromVolumeAsync(volInfo,tmplInfo,store);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    CommandResult result=null;
    try {
      result=future.get();
      if (result.isFailed()) {
        privateTemplate=null;
        s_logger.debug(""String_Node_Str"" + result.getResult());
        throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
      }
      if (_dataStoreMgr.isRegionStore(store)) {
        _tmpltSvr.associateTemplateToZone(templateId,null);
      }
 else {
        VMTemplateZoneVO templateZone=new VMTemplateZoneVO(zoneId,templateId,new Date());
        _tmpltZoneDao.persist(templateZone);
      }
      privateTemplate=_tmpltDao.findById(templateId);
      TemplateDataStoreVO srcTmpltStore=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_TEMPLATE_CREATE,privateTemplate.getAccountId(),zoneId,privateTemplate.getId(),privateTemplate.getName(),null,privateTemplate.getSourceTemplateId(),srcTmpltStore.getPhysicalSize(),privateTemplate.getSize());
      _usageEventDao.persist(usageEvent);
    }
 catch (    InterruptedException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  finally {
    if (privateTemplate == null) {
      final VolumeVO volumeFinal=volume;
      final SnapshotVO snapshotFinal=snapshot;
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _tmplStoreDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltZoneDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltDao.expunge(templateId);
          if (accountId != null) {
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.template);
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.secondary_storage,new Long(volumeFinal != null ? volumeFinal.getSize() : snapshotFinal.getSize()));
          }
        }
      }
);
    }
  }
  if (privateTemplate != null) {
    return privateTemplate;
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9858906525573192
105422,"@Override public boolean upgradeVirtualMachine(Long vmId,Long newServiceOfferingId,Map<String,String> customParameters) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  VMInstanceVO vmInstance=_vmInstanceDao.findById(vmId);
  if (vmInstance != null) {
    List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
    if (vmSnapshots.size() > 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (vmInstance.getState().equals(State.Stopped)) {
    upgradeStoppedVirtualMachine(vmId,newServiceOfferingId,customParameters);
    return true;
  }
  if (vmInstance.getState().equals(State.Running)) {
    return upgradeRunningVirtualMachine(vmId,newServiceOfferingId,customParameters);
  }
  return false;
}","@Override public boolean upgradeVirtualMachine(Long vmId,Long newServiceOfferingId,Map<String,String> customParameters) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  VMInstanceVO vmInstance=_vmInstanceDao.findById(vmId);
  if (vmInstance != null) {
    List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
    if (vmSnapshots.size() > 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (vmInstance.getState().equals(State.Stopped)) {
      upgradeStoppedVirtualMachine(vmId,newServiceOfferingId,customParameters);
      return true;
    }
    if (vmInstance.getState().equals(State.Running)) {
      return upgradeRunningVirtualMachine(vmId,newServiceOfferingId,customParameters);
    }
  }
  return false;
}",0.8106151990349819
105423,"/** 
 * Build URL for api call using region end_point Parameters are sorted and signed using secret_key
 * @param apiParams
 * @param region
 * @return
 */
private static String buildUrl(String apiParams,Region region){
  String apiKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  if (apiKey == null || secretKey == null) {
    return region.getEndPoint() + ""String_Node_Str"" + apiParams;
  }
  String encodedApiKey;
  try {
    encodedApiKey=URLEncoder.encode(apiKey,""String_Node_Str"");
    List<String> sortedParams=new ArrayList<String>();
    sortedParams.add(""String_Node_Str"" + encodedApiKey.toLowerCase());
    StringTokenizer st=new StringTokenizer(apiParams,""String_Node_Str"");
    String url=null;
    boolean first=true;
    while (st.hasMoreTokens()) {
      String paramValue=st.nextToken();
      String param=paramValue.substring(0,paramValue.indexOf(""String_Node_Str""));
      String value=paramValue.substring(paramValue.indexOf(""String_Node_Str"") + 1,paramValue.length());
      if (first) {
        url=param + ""String_Node_Str"" + value;
        first=false;
      }
 else {
        url=url + ""String_Node_Str"" + param+ ""String_Node_Str""+ value;
      }
      sortedParams.add(param.toLowerCase() + ""String_Node_Str"" + value.toLowerCase());
    }
    Collections.sort(sortedParams);
    String sortedUrl=null;
    first=true;
    for (    String param : sortedParams) {
      if (first) {
        sortedUrl=param;
        first=false;
      }
 else {
        sortedUrl=sortedUrl + ""String_Node_Str"" + param;
      }
    }
    String encodedSignature=signRequest(sortedUrl,secretKey);
    String finalUrl=region.getEndPoint() + ""String_Node_Str"" + apiParams+ ""String_Node_Str""+ apiKey+ ""String_Node_Str""+ encodedSignature;
    return finalUrl;
  }
 catch (  UnsupportedEncodingException e) {
    s_logger.error(e.getMessage());
    return null;
  }
}","/** 
 * Build URL for api call using region end_point Parameters are sorted and signed using secret_key
 * @param apiParams
 * @param region
 * @return
 */
private static String buildUrl(String apiParams,Region region){
  String apiKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  String encodedApiKey;
  try {
    encodedApiKey=URLEncoder.encode(apiKey,""String_Node_Str"");
    List<String> sortedParams=new ArrayList<String>();
    sortedParams.add(""String_Node_Str"" + encodedApiKey.toLowerCase());
    StringTokenizer st=new StringTokenizer(apiParams,""String_Node_Str"");
    String url=null;
    boolean first=true;
    while (st.hasMoreTokens()) {
      String paramValue=st.nextToken();
      String param=paramValue.substring(0,paramValue.indexOf(""String_Node_Str""));
      String value=paramValue.substring(paramValue.indexOf(""String_Node_Str"") + 1,paramValue.length());
      if (first) {
        url=param + ""String_Node_Str"" + value;
        first=false;
      }
 else {
        url=url + ""String_Node_Str"" + param+ ""String_Node_Str""+ value;
      }
      sortedParams.add(param.toLowerCase() + ""String_Node_Str"" + value.toLowerCase());
    }
    Collections.sort(sortedParams);
    String sortedUrl=null;
    first=true;
    for (    String param : sortedParams) {
      if (first) {
        sortedUrl=param;
        first=false;
      }
 else {
        sortedUrl=sortedUrl + ""String_Node_Str"" + param;
      }
    }
    String encodedSignature=signRequest(sortedUrl,secretKey);
    String finalUrl=region.getEndPoint() + ""String_Node_Str"" + apiParams+ ""String_Node_Str""+ apiKey+ ""String_Node_Str""+ encodedSignature;
    return finalUrl;
  }
 catch (  UnsupportedEncodingException e) {
    s_logger.error(e.getMessage());
    return null;
  }
}",0.9687671232876712
105424,"@Override public boolean destroySecStorageVm(long vmId){
  SecondaryStorageVmVO ssvm=_secStorageVmDao.findById(vmId);
  try {
    _itMgr.expunge(ssvm.getUuid());
    _secStorageVmDao.remove(ssvm.getId());
    HostVO host=_hostDao.findByTypeNameAndZoneId(ssvm.getDataCenterId(),ssvm.getHostName(),Host.Type.SecondaryStorageVM);
    if (host != null) {
      s_logger.debug(""String_Node_Str"" + vmId);
      _hostDao.remove(host.getId());
    }
    _tmplStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
    _volumeStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ssvm,e);
    return false;
  }
}","@Override public boolean destroySecStorageVm(long vmId){
  SecondaryStorageVmVO ssvm=_secStorageVmDao.findById(vmId);
  try {
    _itMgr.expunge(ssvm.getUuid());
    _secStorageVmDao.remove(ssvm.getId());
    HostVO host=_hostDao.findByTypeNameAndZoneId(ssvm.getDataCenterId(),ssvm.getHostName(),Host.Type.SecondaryStorageVM);
    if (host != null) {
      s_logger.debug(""String_Node_Str"" + vmId);
      _hostDao.remove(host.getId());
      _tmplStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
      _volumeStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
      return true;
    }
    return false;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ssvm,e);
    return false;
  }
}",0.9639389736477116
105425,"@DB protected ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig) throws InsufficientCapacityException {
  boolean retry=true;
  boolean tryLbProvisioning=false;
  ExternalLoadBalancerDeviceVO lbDevice=null;
  long physicalNetworkId=guestConfig.getPhysicalNetworkId();
  NetworkOfferingVO offering=_networkOfferingDao.findById(guestConfig.getNetworkOfferingId());
  String provider=_ntwkSrvcProviderDao.getProviderForServiceInNetwork(guestConfig.getId(),Service.Lb);
  while (retry) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          final boolean dedicatedLB=offering.getDedicatedLB();
          try {
            lbDevice=Transaction.execute(new TransactionCallbackWithException<ExternalLoadBalancerDeviceVO,InsufficientCapacityException>(){
              @Override public ExternalLoadBalancerDeviceVO doInTransaction(              TransactionStatus status) throws InsufficientCapacityException {
                ExternalLoadBalancerDeviceVO lbDevice=findSuitableLoadBalancerForNetwork(guestConfig,dedicatedLB);
                long lbDeviceId=lbDevice.getId();
                NetworkExternalLoadBalancerVO networkLB=new NetworkExternalLoadBalancerVO(guestConfig.getId(),lbDeviceId);
                _networkExternalLBDao.persist(networkLB);
                lbDevice.setAllocationState(dedicatedLB ? LBDeviceAllocationState.Dedicated : LBDeviceAllocationState.Shared);
                _externalLoadBalancerDeviceDao.update(lbDeviceId,lbDevice);
                return lbDevice;
              }
            }
);
            tryLbProvisioning=false;
            retry=false;
          }
 catch (          InsufficientCapacityException exception) {
            if (tryLbProvisioning) {
              retry=false;
              s_logger.warn(""String_Node_Str"");
              throw exception;
            }
 else {
              tryLbProvisioning=true;
            }
          }
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
    if (tryLbProvisioning) {
      List<ExternalLoadBalancerDeviceVO> providerLbDevices=_externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId,provider,LBDeviceAllocationState.Provider);
      if ((providerLbDevices != null) && (!providerLbDevices.isEmpty())) {
        for (        ExternalLoadBalancerDeviceVO lbProviderDevice : providerLbDevices) {
          if (lbProviderDevice.getState() == LBDeviceState.Enabled) {
            DataCenterIpAddressVO dcPrivateIp=_dcDao.allocatePrivateIpAddress(guestConfig.getDataCenterId(),lbProviderDevice.getUuid());
            if (dcPrivateIp == null) {
              throw new InsufficientNetworkCapacityException(""String_Node_Str"" + guestConfig.getDataCenterId() + ""String_Node_Str"",DataCenter.class,guestConfig.getDataCenterId());
            }
            Pod pod=_podDao.findById(dcPrivateIp.getPodId());
            String lbIP=dcPrivateIp.getIpAddress();
            String netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
            String gateway=pod.getGateway();
            CreateLoadBalancerApplianceCommand lbProvisionCmd=new CreateLoadBalancerApplianceCommand(lbIP,netmask,gateway);
            CreateLoadBalancerApplianceAnswer createLbAnswer=null;
            try {
              createLbAnswer=(CreateLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbProvisionCmd);
              if (createLbAnswer == null || !createLbAnswer.getResult()) {
                s_logger.error(""String_Node_Str"" + lbProviderDevice.getId());
                continue;
              }
            }
 catch (            Exception agentException) {
              s_logger.error(""String_Node_Str"" + lbProviderDevice.getId() + ""String_Node_Str""+ agentException.getMessage());
              continue;
            }
            String username=createLbAnswer.getUsername();
            String password=createLbAnswer.getPassword();
            String publicIf=createLbAnswer.getPublicInterface();
            String privateIf=createLbAnswer.getPrivateInterface();
            String dedicatedLb=offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"";
            String capacity=Long.toString(lbProviderDevice.getCapacity());
            PublicIp publicIp=_ipAddrMgr.assignPublicIpAddress(guestConfig.getDataCenterId(),null,_accountMgr.getSystemAccount(),VlanType.VirtualNetwork,null,null,false);
            String publicIPNetmask=publicIp.getVlanNetmask();
            String publicIPgateway=publicIp.getVlanGateway();
            String publicIPVlanTag=publicIp.getVlanTag();
            String publicIP=publicIp.getAddress().toString();
            String url=""String_Node_Str"" + lbIP + ""String_Node_Str""+ publicIf+ ""String_Node_Str""+ privateIf+ ""String_Node_Str""+ dedicatedLb+ ""String_Node_Str""+ ""String_Node_Str""+ publicIP+ ""String_Node_Str""+ publicIPNetmask+ ""String_Node_Str""+ capacity+ ""String_Node_Str""+ publicIPVlanTag+ ""String_Node_Str""+ publicIPgateway;
            ExternalLoadBalancerDeviceVO lbAppliance=null;
            try {
              lbAppliance=addExternalLoadBalancer(physicalNetworkId,url,username,password,createLbAnswer.getDeviceName(),createLbAnswer.getServerResource(),false,false,null,null);
            }
 catch (            Exception e) {
              s_logger.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
            }
            if (lbAppliance != null) {
              ExternalLoadBalancerDeviceVO managedLb=_externalLoadBalancerDeviceDao.findById(lbAppliance.getId());
              managedLb.setIsManagedDevice(true);
              managedLb.setParentHostId(lbProviderDevice.getHostId());
              _externalLoadBalancerDeviceDao.update(lbAppliance.getId(),managedLb);
            }
 else {
              DestroyLoadBalancerApplianceCommand lbDeleteCmd=new DestroyLoadBalancerApplianceCommand(lbIP);
              DestroyLoadBalancerApplianceAnswer answer=null;
              try {
                answer=(DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbDeleteCmd);
                if (answer == null || !answer.getResult()) {
                  s_logger.warn(""String_Node_Str"");
                }
 else {
                  _dcDao.releasePrivateIpAddress(lbIP,guestConfig.getDataCenterId(),null);
                  _ipAddrMgr.disassociatePublicIpAddress(publicIp.getId(),_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount());
                }
              }
 catch (              Exception e) {
                s_logger.warn(""String_Node_Str"" + guestConfig.getId() + ""String_Node_Str""+ e.getMessage());
              }
            }
          }
        }
      }
    }
  }
  return lbDevice;
}","@DB protected ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig) throws InsufficientCapacityException {
  boolean retry=true;
  boolean tryLbProvisioning=false;
  ExternalLoadBalancerDeviceVO lbDevice=null;
  long physicalNetworkId=guestConfig.getPhysicalNetworkId();
  NetworkOfferingVO offering=_networkOfferingDao.findById(guestConfig.getNetworkOfferingId());
  String provider=_ntwkSrvcProviderDao.getProviderForServiceInNetwork(guestConfig.getId(),Service.Lb);
  while (retry) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          final boolean dedicatedLB=offering.getDedicatedLB();
          try {
            lbDevice=Transaction.execute(new TransactionCallbackWithException<ExternalLoadBalancerDeviceVO,InsufficientCapacityException>(){
              @Override public ExternalLoadBalancerDeviceVO doInTransaction(              TransactionStatus status) throws InsufficientCapacityException {
                ExternalLoadBalancerDeviceVO lbDevice=findSuitableLoadBalancerForNetwork(guestConfig,dedicatedLB);
                long lbDeviceId=lbDevice.getId();
                NetworkExternalLoadBalancerVO networkLB=new NetworkExternalLoadBalancerVO(guestConfig.getId(),lbDeviceId);
                _networkExternalLBDao.persist(networkLB);
                lbDevice.setAllocationState(dedicatedLB ? LBDeviceAllocationState.Dedicated : LBDeviceAllocationState.Shared);
                _externalLoadBalancerDeviceDao.update(lbDeviceId,lbDevice);
                return lbDevice;
              }
            }
);
            tryLbProvisioning=false;
            retry=false;
          }
 catch (          InsufficientCapacityException exception) {
            if (tryLbProvisioning) {
              retry=false;
              s_logger.warn(""String_Node_Str"");
              throw exception;
            }
 else {
              tryLbProvisioning=true;
            }
          }
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
    if (tryLbProvisioning) {
      List<ExternalLoadBalancerDeviceVO> providerLbDevices=_externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId,provider,LBDeviceAllocationState.Provider);
      if ((providerLbDevices != null) && (!providerLbDevices.isEmpty())) {
        for (        ExternalLoadBalancerDeviceVO lbProviderDevice : providerLbDevices) {
          if (lbProviderDevice.getState() == LBDeviceState.Enabled) {
            DataCenterIpAddressVO dcPrivateIp=_dcDao.allocatePrivateIpAddress(guestConfig.getDataCenterId(),lbProviderDevice.getUuid());
            if (dcPrivateIp == null) {
              throw new InsufficientNetworkCapacityException(""String_Node_Str"" + guestConfig.getDataCenterId() + ""String_Node_Str"",DataCenter.class,guestConfig.getDataCenterId());
            }
            Pod pod=_podDao.findById(dcPrivateIp.getPodId());
            String lbIP=dcPrivateIp.getIpAddress();
            String netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
            String gateway=pod.getGateway();
            CreateLoadBalancerApplianceCommand lbProvisionCmd=new CreateLoadBalancerApplianceCommand(lbIP,netmask,gateway);
            CreateLoadBalancerApplianceAnswer createLbAnswer=null;
            try {
              createLbAnswer=(CreateLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbProvisionCmd);
              if (createLbAnswer == null || !createLbAnswer.getResult()) {
                s_logger.error(""String_Node_Str"" + lbProviderDevice.getId());
                continue;
              }
            }
 catch (            Exception agentException) {
              s_logger.error(""String_Node_Str"" + lbProviderDevice.getId() + ""String_Node_Str""+ agentException.getMessage());
              continue;
            }
            String username=createLbAnswer.getUsername();
            String password=createLbAnswer.getPassword();
            String publicIf=createLbAnswer.getPublicInterface();
            String privateIf=createLbAnswer.getPrivateInterface();
            String dedicatedLb=offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"";
            String capacity=Long.toString(lbProviderDevice.getCapacity());
            PublicIp publicIp=_ipAddrMgr.assignPublicIpAddress(guestConfig.getDataCenterId(),null,_accountMgr.getSystemAccount(),VlanType.VirtualNetwork,null,null,false);
            String publicIPNetmask=publicIp.getVlanNetmask();
            String publicIPgateway=publicIp.getVlanGateway();
            String publicIP=publicIp.getAddress().toString();
            String publicIPVlanTag=""String_Node_Str"";
            try {
              publicIPVlanTag=BroadcastDomainType.getValue(publicIp.getVlanTag());
            }
 catch (            URISyntaxException e) {
              s_logger.error(""String_Node_Str"" + e.getMessage());
            }
            String url=""String_Node_Str"" + lbIP + ""String_Node_Str""+ publicIf+ ""String_Node_Str""+ privateIf+ ""String_Node_Str""+ dedicatedLb+ ""String_Node_Str""+ ""String_Node_Str""+ publicIP+ ""String_Node_Str""+ publicIPNetmask+ ""String_Node_Str""+ capacity+ ""String_Node_Str""+ publicIPVlanTag+ ""String_Node_Str""+ publicIPgateway;
            ExternalLoadBalancerDeviceVO lbAppliance=null;
            try {
              lbAppliance=addExternalLoadBalancer(physicalNetworkId,url,username,password,createLbAnswer.getDeviceName(),createLbAnswer.getServerResource(),false,false,null,null);
            }
 catch (            Exception e) {
              s_logger.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
            }
            if (lbAppliance != null) {
              ExternalLoadBalancerDeviceVO managedLb=_externalLoadBalancerDeviceDao.findById(lbAppliance.getId());
              managedLb.setIsManagedDevice(true);
              managedLb.setParentHostId(lbProviderDevice.getHostId());
              _externalLoadBalancerDeviceDao.update(lbAppliance.getId(),managedLb);
            }
 else {
              DestroyLoadBalancerApplianceCommand lbDeleteCmd=new DestroyLoadBalancerApplianceCommand(lbIP);
              DestroyLoadBalancerApplianceAnswer answer=null;
              try {
                answer=(DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbDeleteCmd);
                if (answer == null || !answer.getResult()) {
                  s_logger.warn(""String_Node_Str"");
                }
 else {
                  _dcDao.releasePrivateIpAddress(lbIP,guestConfig.getDataCenterId(),null);
                  _ipAddrMgr.disassociatePublicIpAddress(publicIp.getId(),_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount());
                }
              }
 catch (              Exception e) {
                s_logger.warn(""String_Node_Str"" + guestConfig.getId() + ""String_Node_Str""+ e.getMessage());
              }
            }
          }
        }
      }
    }
  }
  return lbDevice;
}",0.9676679331851744
105426,"private void startNioServerForPostUpload(){
  int port=8210;
  HttpProcessor httpproc=HttpProcessorBuilder.create().add(new ResponseDate()).add(new ResponseServer(""String_Node_Str"")).add(new ResponseContent()).add(new ResponseConnControl()).build();
  UriHttpAsyncRequestHandlerMapper reqistry=new UriHttpAsyncRequestHandlerMapper();
  reqistry.register(""String_Node_Str"",new PostUploadRequestHandler());
  HttpAsyncService protocolHandler=new HttpAsyncService(httpproc,reqistry){
    @Override public void connected(    final NHttpServerConnection conn){
      s_logger.info(conn + ""String_Node_Str"");
      super.connected(conn);
    }
    @Override public void closed(    final NHttpServerConnection conn){
      s_logger.info(conn + ""String_Node_Str"");
      super.closed(conn);
    }
  }
;
  NHttpConnectionFactory<DefaultNHttpServerConnection> connFactory;
  connFactory=new DefaultNHttpServerConnectionFactory(ConnectionConfig.DEFAULT);
  IOEventDispatch ioEventDispatch=new DefaultHttpServerIODispatch(protocolHandler,connFactory);
  IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(15).setSoTimeout(3000).setConnectTimeout(3000).build();
  try {
    ListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
    ioReactor.listen(new InetSocketAddress(port));
    ioReactor.execute(ioEventDispatch);
  }
 catch (  InterruptedIOException ex) {
    s_logger.info(""String_Node_Str"");
  }
catch (  IOException e) {
    s_logger.info(""String_Node_Str"" + e.getMessage());
  }
  s_logger.info(""String_Node_Str"");
}","private void startNioServerForPostUpload() throws IOException {
  final int port=8210;
  HttpProcessor httpproc=HttpProcessorBuilder.create().add(new ResponseDate()).add(new ResponseServer(""String_Node_Str"")).add(new ResponseContent()).add(new ResponseConnControl()).build();
  UriHttpAsyncRequestHandlerMapper reqistry=new UriHttpAsyncRequestHandlerMapper();
  reqistry.register(""String_Node_Str"",new PostUploadRequestHandler());
  HttpAsyncService protocolHandler=new HttpAsyncService(httpproc,reqistry){
    @Override public void connected(    final NHttpServerConnection conn){
      s_logger.info(conn + ""String_Node_Str"");
      super.connected(conn);
    }
    @Override public void closed(    final NHttpServerConnection conn){
      s_logger.info(conn + ""String_Node_Str"");
      super.closed(conn);
    }
  }
;
  NHttpConnectionFactory<DefaultNHttpServerConnection> connFactory;
  connFactory=new DefaultNHttpServerConnectionFactory(ConnectionConfig.DEFAULT);
  final IOEventDispatch ioEventDispatch=new DefaultHttpServerIODispatch(protocolHandler,connFactory);
  IOReactorConfig config=IOReactorConfig.custom().setIoThreadCount(15).setSoTimeout(3000).setConnectTimeout(3000).build();
  final ListeningIOReactor ioReactor=new DefaultListeningIOReactor(config);
  new Thread(){
    @Override public void run(){
      ioReactor.listen(new InetSocketAddress(port));
      try {
        ioReactor.execute(ioEventDispatch);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"" + port);
      }
      s_logger.info(""String_Node_Str"" + port + ""String_Node_Str"");
    }
  }
.start();
  s_logger.info(""String_Node_Str"" + port);
}",0.8903426791277259
105427,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_VOLUME_UPLOAD,eventDescription=""String_Node_Str"",async=true) public GetUploadParamsResponse uploadVolume(GetUploadParamsForVolumeCmd cmd) throws ResourceAllocationException, MalformedURLException {
  Account caller=CallContext.current().getCallingAccount();
  long ownerId=cmd.getEntityOwnerId();
  Account owner=_entityMgr.findById(Account.class,ownerId);
  Long zoneId=cmd.getZoneId();
  String volumeName=cmd.getName();
  String format=cmd.getFormat();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String imageStoreUuid=cmd.getImageStoreUuid();
  DataStore store=_tmpltMgr.getImageStore(imageStoreUuid,zoneId);
  validateVolume(caller,ownerId,zoneId,volumeName,null,format,diskOfferingId);
  VolumeVO volume=persistVolume(owner,zoneId,volumeName,null,cmd.getFormat(),diskOfferingId);
  VolumeInfo vol=volFactory.getVolume(volume.getId());
  RegisterVolumePayload payload=new RegisterVolumePayload(null,cmd.getChecksum(),cmd.getFormat());
  vol.addPayload(payload);
  EndPoint ep=volService.registerVolumeForPostUpload(vol,store);
  TemplateOrVolumePostUploadCommand command=new TemplateOrVolumePostUploadCommand(vol,ep);
  GetUploadParamsResponse response=new GetUploadParamsResponse();
  String url=""String_Node_Str"" + command.getEndPoint().getPublicAddr() + ""String_Node_Str""+ command.getDataObject().getUuid();
  response.setPostURL(new URL(url));
  response.setId(UUID.fromString(command.getDataObject().getUuid()));
  DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
  currentDateTime.plusHours(1);
  String expires=currentDateTime.toString();
  response.setTimeout(expires);
  String key=_configDao.getValue(Config.SSVMPSK.key());
  Gson gson=new GsonBuilder().setExclusionStrategies(new ExclusionStrategy(){
    @Override public boolean shouldSkipField(    FieldAttributes f){
      return f.getDeclaredType().getClass().isInstance(Logger.class);
    }
    @Override public boolean shouldSkipClass(    Class<?> clazz){
      return false;
    }
  }
).create();
  String jsonPayload=gson.toJson(command);
  response.setMetadata(EncryptionUtil.encodeData(jsonPayload,key));
  response.setSignature(EncryptionUtil.generateSignature(jsonPayload + url + expires,key));
  return response;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_VOLUME_UPLOAD,eventDescription=""String_Node_Str"",async=true) public GetUploadParamsResponse uploadVolume(GetUploadParamsForVolumeCmd cmd) throws ResourceAllocationException, MalformedURLException {
  Account caller=CallContext.current().getCallingAccount();
  long ownerId=cmd.getEntityOwnerId();
  Account owner=_entityMgr.findById(Account.class,ownerId);
  Long zoneId=cmd.getZoneId();
  String volumeName=cmd.getName();
  String format=cmd.getFormat();
  Long diskOfferingId=cmd.getDiskOfferingId();
  String imageStoreUuid=cmd.getImageStoreUuid();
  DataStore store=_tmpltMgr.getImageStore(imageStoreUuid,zoneId);
  validateVolume(caller,ownerId,zoneId,volumeName,null,format,diskOfferingId);
  VolumeVO volume=persistVolume(owner,zoneId,volumeName,null,cmd.getFormat(),diskOfferingId);
  VolumeInfo vol=volFactory.getVolume(volume.getId());
  RegisterVolumePayload payload=new RegisterVolumePayload(null,cmd.getChecksum(),cmd.getFormat());
  vol.addPayload(payload);
  EndPoint ep=volService.registerVolumeForPostUpload(vol,store);
  TemplateOrVolumePostUploadCommand command=new TemplateOrVolumePostUploadCommand(vol,ep);
  GetUploadParamsResponse response=new GetUploadParamsResponse();
  String url=""String_Node_Str"" + command.getEndPoint().getPublicAddr() + ""String_Node_Str""+ command.getDataObject().getUuid();
  response.setPostURL(new URL(url));
  response.setId(UUID.fromString(command.getDataObject().getUuid()));
  DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
  currentDateTime.plusHours(1);
  String expires=currentDateTime.toString();
  response.setTimeout(expires);
  String key=_configDao.getValue(Config.SSVMPSK.key());
  Gson gson=new GsonBuilder().registerTypeAdapter(TemplateOrVolumePostUploadCommand.class,new TemplateOrVolumePostUploadCommandTypeAdapter()).create();
  String jsonPayload=gson.toJson(command);
  response.setMetadata(EncryptionUtil.encodeData(jsonPayload,key));
  response.setSignature(EncryptionUtil.generateSignature(jsonPayload + url + expires,key));
  return response;
}",0.801658604008293
105428,"@Override @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"") public GetUploadParamsResponse registerTemplateForPostUpload(GetUploadParamsForTemplateCmd cmd) throws ResourceAllocationException, MalformedURLException {
  TemplateAdapter adapter=getAdapter(HypervisorType.getType(cmd.getHypervisor()));
  TemplateProfile profile=adapter.prepare(cmd);
  List<TemplateOrVolumePostUploadCommand> payload=adapter.createTemplateForPostUpload(profile);
  if (CollectionUtils.isNotEmpty(payload)) {
    GetUploadParamsResponse response=new GetUploadParamsResponse();
    TemplateOrVolumePostUploadCommand firstCommand=payload.get(0);
    String url=""String_Node_Str"" + firstCommand.getEndPoint().getPublicAddr() + ""String_Node_Str""+ firstCommand.getDataObject().getUuid();
    response.setPostURL(new URL(url));
    response.setId(UUID.fromString(firstCommand.getDataObject().getUuid()));
    DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
    currentDateTime.plusHours(1);
    String expires=currentDateTime.toString();
    response.setTimeout(expires);
    String key=_configDao.getValue(Config.SSVMPSK.key());
    Gson gson=new GsonBuilder().setExclusionStrategies(new ExclusionStrategy(){
      @Override public boolean shouldSkipField(      FieldAttributes f){
        return f.getDeclaredType().getClass().isInstance(Logger.class);
      }
      @Override public boolean shouldSkipClass(      Class<?> clazz){
        return false;
      }
    }
).create();
    String jsonPayload=gson.toJson(payload);
    response.setMetadata(EncryptionUtil.encodeData(jsonPayload,key));
    response.setSignature(EncryptionUtil.generateSignature(jsonPayload + url + expires,key));
    return response;
  }
 else {
    return null;
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"") public GetUploadParamsResponse registerTemplateForPostUpload(GetUploadParamsForTemplateCmd cmd) throws ResourceAllocationException, MalformedURLException {
  TemplateAdapter adapter=getAdapter(HypervisorType.getType(cmd.getHypervisor()));
  TemplateProfile profile=adapter.prepare(cmd);
  List<TemplateOrVolumePostUploadCommand> payload=adapter.createTemplateForPostUpload(profile);
  if (CollectionUtils.isNotEmpty(payload)) {
    GetUploadParamsResponse response=new GetUploadParamsResponse();
    TemplateOrVolumePostUploadCommand firstCommand=payload.get(0);
    String url=""String_Node_Str"" + firstCommand.getEndPoint().getPublicAddr() + ""String_Node_Str""+ firstCommand.getDataObject().getUuid();
    response.setPostURL(new URL(url));
    response.setId(UUID.fromString(firstCommand.getDataObject().getUuid()));
    DateTime currentDateTime=new DateTime(DateTimeZone.UTC);
    currentDateTime.plusHours(1);
    String expires=currentDateTime.toString();
    response.setTimeout(expires);
    String key=_configDao.getValue(Config.SSVMPSK.key());
    Gson gson=new GsonBuilder().registerTypeAdapter(TemplateOrVolumePostUploadCommand.class,new TemplateOrVolumePostUploadCommandTypeAdapter()).create();
    String jsonPayload=gson.toJson(payload);
    response.setMetadata(EncryptionUtil.encodeData(jsonPayload,key));
    response.setSignature(EncryptionUtil.generateSignature(jsonPayload + url + expires,key));
    return response;
  }
 else {
    return null;
  }
}",0.8787788087398982
105429,"@Override @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_MODIFY,eventDescription=""String_Node_Str"",async=true) public PortForwardingRule updatePortForwardingRule(long id,Integer privatePort,Long virtualMachineId,Ip vmGuestIp,String customId,Boolean forDisplay){
  Account caller=CallContext.current().getCallingAccount();
  PortForwardingRuleVO rule=_portForwardingDao.findById(id);
  if (rule == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  _accountMgr.checkAccess(caller,null,true,rule);
  if (customId != null) {
    rule.setUuid(customId);
  }
  if (forDisplay != null) {
    rule.setDisplay(forDisplay);
  }
  if (rule.getSourcePortStart() != rule.getSourcePortEnd() && privatePort != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + rule.getSourcePortStart() + ""String_Node_Str""+ rule.getSourcePortEnd());
  }
  if (virtualMachineId == null && vmGuestIp != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Ip dstIp=rule.getDestinationIpAddress();
  if (virtualMachineId != null) {
    Nic guestNic=_networkModel.getNicInNetwork(virtualMachineId,rule.getNetworkId());
    if (guestNic == null || guestNic.getIp4Address() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      dstIp=new Ip(guestNic.getIp4Address());
    }
    if (vmGuestIp != null) {
      if (!dstIp.equals(vmGuestIp)) {
        NicSecondaryIp secondaryIp=_nicSecondaryDao.findByIp4AddressAndNicId(vmGuestIp.toString(),guestNic.getId());
        if (secondaryIp == null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
        dstIp=vmGuestIp;
      }
    }
  }
  List<PortForwardingRuleVO> rules=new ArrayList<PortForwardingRuleVO>();
  rule.setState(State.Revoke);
  _portForwardingDao.update(id,rule);
  rules.add(rule);
  try {
    if (!_firewallMgr.applyRules(rules,true,false)) {
      throw new CloudRuntimeException(""String_Node_Str"" + id);
    }
  }
 catch (  ResourceUnavailableException ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + id + ""String_Node_Str"",ex);
  }
  rule=_portForwardingDao.findById(id);
  rule.setState(State.Add);
  if (privatePort != null) {
    rule.setDestinationPortStart(privatePort.intValue());
    rule.setDestinationPortEnd(privatePort.intValue());
  }
  if (virtualMachineId != null) {
    rule.setVirtualMachineId(virtualMachineId);
    rule.setDestinationIpAddress(dstIp);
  }
  _portForwardingDao.update(id,rule);
  if (!applyPortForwardingRules(rule.getSourceIpAddressId(),false,caller)) {
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _portForwardingDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_MODIFY,eventDescription=""String_Node_Str"",async=true) public PortForwardingRule updatePortForwardingRule(long id,Integer privatePort,Long virtualMachineId,Ip vmGuestIp,String customId,Boolean forDisplay){
  Account caller=CallContext.current().getCallingAccount();
  PortForwardingRuleVO rule=_portForwardingDao.findById(id);
  if (rule == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  _accountMgr.checkAccess(caller,null,true,rule);
  if (customId != null) {
    rule.setUuid(customId);
  }
  if (forDisplay != null) {
    rule.setDisplay(forDisplay);
  }
  if (!rule.getSourcePortStart().equals(rule.getSourcePortEnd()) && privatePort != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + rule.getSourcePortStart() + ""String_Node_Str""+ rule.getSourcePortEnd());
  }
  if (virtualMachineId == null && vmGuestIp != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Ip dstIp=rule.getDestinationIpAddress();
  if (virtualMachineId != null) {
    Nic guestNic=_networkModel.getNicInNetwork(virtualMachineId,rule.getNetworkId());
    if (guestNic == null || guestNic.getIp4Address() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      dstIp=new Ip(guestNic.getIp4Address());
    }
    if (vmGuestIp != null) {
      if (!dstIp.equals(vmGuestIp)) {
        NicSecondaryIp secondaryIp=_nicSecondaryDao.findByIp4AddressAndNicId(vmGuestIp.toString(),guestNic.getId());
        if (secondaryIp == null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
        dstIp=vmGuestIp;
      }
    }
  }
  List<PortForwardingRuleVO> rules=new ArrayList<PortForwardingRuleVO>();
  rule.setState(State.Revoke);
  _portForwardingDao.update(id,rule);
  rules.add(rule);
  try {
    if (!_firewallMgr.applyRules(rules,true,false)) {
      throw new CloudRuntimeException(""String_Node_Str"" + id);
    }
  }
 catch (  ResourceUnavailableException ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + id + ""String_Node_Str"",ex);
  }
  rule=_portForwardingDao.findById(id);
  rule.setState(State.Add);
  if (privatePort != null) {
    rule.setDestinationPortStart(privatePort.intValue());
    rule.setDestinationPortEnd(privatePort.intValue());
  }
  if (virtualMachineId != null) {
    rule.setVirtualMachineId(virtualMachineId);
    rule.setDestinationIpAddress(dstIp);
  }
  _portForwardingDao.update(id,rule);
  if (!applyPortForwardingRules(rule.getSourceIpAddressId(),false,caller)) {
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _portForwardingDao.findById(id);
}",0.9974131559497412
105430,"@Override @ActionEvent(eventType=EventTypes.EVENT_REGISTER_SSH_KEYPAIR,eventDescription=""String_Node_Str"",async=true) public SSHKeyPair registerSSHKeyPair(RegisterSSHKeyPairCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),cmd.getDomainId(),cmd.getProjectId());
  SSHKeyPairVO s=_sshKeyPairDao.findByName(owner.getAccountId(),owner.getDomainId(),cmd.getName());
  if (s != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getName() + ""String_Node_Str"");
  }
  String name=cmd.getName();
  String key=cmd.getPublicKey();
  try {
    if (key != null) {
      key=URLDecoder.decode(key,""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
 finally {
  }
  String publicKey=SSHKeysHelper.getPublicKeyFromKeyMaterial(key);
  if (publicKey == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String fingerprint=SSHKeysHelper.getPublicKeyFingerprint(publicKey);
  return createAndSaveSSHKeyPair(name,fingerprint,publicKey,null,owner);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_REGISTER_SSH_KEYPAIR,eventDescription=""String_Node_Str"",async=true) public SSHKeyPair registerSSHKeyPair(RegisterSSHKeyPairCmd cmd){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),cmd.getDomainId(),cmd.getProjectId());
  SSHKeyPairVO s=_sshKeyPairDao.findByName(owner.getAccountId(),owner.getDomainId(),cmd.getName());
  if (s != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getName() + ""String_Node_Str"");
  }
  String name=cmd.getName();
  String key=cmd.getPublicKey();
  try {
    key=URLDecoder.decode(key,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String publicKey=SSHKeysHelper.getPublicKeyFromKeyMaterial(key);
  if (publicKey == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String fingerprint=SSHKeysHelper.getPublicKeyFingerprint(publicKey);
  return createAndSaveSSHKeyPair(name,fingerprint,publicKey,null,owner);
}",0.9786839666357738
105431,"private VirtualMachineDiskInfo getMatchingExistingDisk(VirtualMachineDiskInfoBuilder diskInfoBuilder,DiskTO vol,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  if (diskInfoBuilder != null) {
    VolumeObjectTO volume=(VolumeObjectTO)vol.getData();
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,volume.getDataStore().getUuid());
    DatastoreMO dsMo=new DatastoreMO(context,morDs);
    String dsName=dsMo.getName();
    Map<String,String> details=vol.getDetails();
    boolean isManaged=details != null && Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    VirtualMachineDiskInfo diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(isManaged ? new DatastoreFile(volume.getPath()).getFileBaseName() : volume.getPath(),dsName);
    if (diskInfo != null) {
      s_logger.info(""String_Node_Str"" + volume.getPath());
      return diskInfo;
    }
 else {
      String chainInfo=volume.getChainInfo();
      if (chainInfo != null) {
        VirtualMachineDiskInfo infoInChain=_gson.fromJson(chainInfo,VirtualMachineDiskInfo.class);
        if (infoInChain != null) {
          String[] disks=infoInChain.getDiskChain();
          if (disks.length > 0) {
            for (            String diskPath : disks) {
              DatastoreFile file=new DatastoreFile(diskPath);
              diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(file.getFileBaseName(),dsName);
              if (diskInfo != null) {
                s_logger.info(""String_Node_Str"" + diskPath);
                return diskInfo;
              }
            }
          }
          if (diskInfo == null) {
            diskInfo=diskInfoBuilder.getDiskInfoByDeviceBusName(infoInChain.getDiskDeviceBusName());
            if (diskInfo != null) {
              s_logger.info(""String_Node_Str"" + infoInChain.getDiskDeviceBusName());
              return diskInfo;
            }
          }
        }
      }
    }
  }
  return null;
}","private VirtualMachineDiskInfo getMatchingExistingDisk(VirtualMachineDiskInfoBuilder diskInfoBuilder,DiskTO vol,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  if (diskInfoBuilder != null) {
    VolumeObjectTO volume=(VolumeObjectTO)vol.getData();
    String dsName=null;
    String diskBackingFileBaseName=null;
    Map<String,String> details=vol.getDetails();
    boolean isManaged=details != null && Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    if (isManaged) {
      String iScsiName=details.get(DiskTO.IQN);
      dsName=VmwareResource.getDatastoreName(iScsiName);
      diskBackingFileBaseName=new DatastoreFile(volume.getPath()).getFileBaseName();
    }
 else {
      ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,volume.getDataStore().getUuid());
      DatastoreMO dsMo=new DatastoreMO(context,morDs);
      dsName=dsMo.getName();
      diskBackingFileBaseName=volume.getPath();
    }
    VirtualMachineDiskInfo diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(diskBackingFileBaseName,dsName);
    if (diskInfo != null) {
      s_logger.info(""String_Node_Str"" + volume.getPath());
      return diskInfo;
    }
 else {
      String chainInfo=volume.getChainInfo();
      if (chainInfo != null) {
        VirtualMachineDiskInfo infoInChain=_gson.fromJson(chainInfo,VirtualMachineDiskInfo.class);
        if (infoInChain != null) {
          String[] disks=infoInChain.getDiskChain();
          if (disks.length > 0) {
            for (            String diskPath : disks) {
              DatastoreFile file=new DatastoreFile(diskPath);
              diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(file.getFileBaseName(),dsName);
              if (diskInfo != null) {
                s_logger.info(""String_Node_Str"" + diskPath);
                return diskInfo;
              }
            }
          }
          if (diskInfo == null) {
            diskInfo=diskInfoBuilder.getDiskInfoByDeviceBusName(infoInChain.getDiskDeviceBusName());
            if (diskInfo != null) {
              s_logger.info(""String_Node_Str"" + infoInChain.getDiskDeviceBusName());
              return diskInfo;
            }
          }
        }
      }
    }
  }
  return null;
}",0.824438202247191
105432,"private VirtualMachineDiskInfo getMatchingExistingDisk(VirtualMachineDiskInfoBuilder diskInfoBuilder,DiskTO vol,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  if (diskInfoBuilder != null) {
    VolumeObjectTO volume=(VolumeObjectTO)vol.getData();
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,volume.getDataStore().getUuid());
    DatastoreMO dsMo=new DatastoreMO(context,morDs);
    String dsName=dsMo.getName();
    Map<String,String> details=vol.getDetails();
    boolean isManaged=details != null && Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    VirtualMachineDiskInfo diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(isManaged ? new DatastoreFile(volume.getPath()).getFileBaseName() : volume.getPath(),dsName);
    if (diskInfo != null) {
      s_logger.info(""String_Node_Str"" + volume.getPath());
      return diskInfo;
    }
 else {
      String chainInfo=volume.getChainInfo();
      if (chainInfo != null) {
        VirtualMachineDiskInfo infoInChain=_gson.fromJson(chainInfo,VirtualMachineDiskInfo.class);
        if (infoInChain != null) {
          String[] disks=infoInChain.getDiskChain();
          if (disks.length > 0) {
            for (            String diskPath : disks) {
              DatastoreFile file=new DatastoreFile(diskPath);
              diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(file.getFileBaseName(),dsName);
              if (diskInfo != null) {
                s_logger.info(""String_Node_Str"" + diskPath);
                return diskInfo;
              }
            }
          }
          if (diskInfo == null) {
            diskInfo=diskInfoBuilder.getDiskInfoByDeviceBusName(infoInChain.getDiskDeviceBusName());
            if (diskInfo != null) {
              s_logger.info(""String_Node_Str"" + infoInChain.getDiskDeviceBusName());
              return diskInfo;
            }
          }
        }
      }
    }
  }
  return null;
}","private VirtualMachineDiskInfo getMatchingExistingDisk(VirtualMachineDiskInfoBuilder diskInfoBuilder,DiskTO vol,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  if (diskInfoBuilder != null) {
    VolumeObjectTO volume=(VolumeObjectTO)vol.getData();
    String dsName=null;
    String diskBackingFileBaseName=null;
    Map<String,String> details=vol.getDetails();
    boolean isManaged=details != null && Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    if (isManaged) {
      String iScsiName=details.get(DiskTO.IQN);
      dsName=VmwareResource.getDatastoreName(iScsiName);
      diskBackingFileBaseName=new DatastoreFile(volume.getPath()).getFileBaseName();
    }
 else {
      ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,volume.getDataStore().getUuid());
      DatastoreMO dsMo=new DatastoreMO(context,morDs);
      dsName=dsMo.getName();
      diskBackingFileBaseName=volume.getPath();
    }
    VirtualMachineDiskInfo diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(diskBackingFileBaseName,dsName);
    if (diskInfo != null) {
      s_logger.info(""String_Node_Str"" + volume.getPath());
      return diskInfo;
    }
 else {
      String chainInfo=volume.getChainInfo();
      if (chainInfo != null) {
        VirtualMachineDiskInfo infoInChain=_gson.fromJson(chainInfo,VirtualMachineDiskInfo.class);
        if (infoInChain != null) {
          String[] disks=infoInChain.getDiskChain();
          if (disks.length > 0) {
            for (            String diskPath : disks) {
              DatastoreFile file=new DatastoreFile(diskPath);
              diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(file.getFileBaseName(),dsName);
              if (diskInfo != null) {
                s_logger.info(""String_Node_Str"" + diskPath);
                return diskInfo;
              }
            }
          }
          if (diskInfo == null) {
            diskInfo=diskInfoBuilder.getDiskInfoByDeviceBusName(infoInChain.getDiskDeviceBusName());
            if (diskInfo != null) {
              s_logger.info(""String_Node_Str"" + infoInChain.getDiskDeviceBusName());
              return diskInfo;
            }
          }
        }
      }
    }
  }
  return null;
}",0.824438202247191
105433,"protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<DiskTO>(){
    @Override public int compare(    DiskTO arg0,    DiskTO arg1){
      return arg0.getDiskSeq() > arg1.getDiskSeq() ? 1 : -1;
    }
  }
);
  for (  DiskTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    DataTO data=volume.getData();
    if (volume.getType() == Volume.Type.ISO && data.getPath() != null) {
      NfsTO nfsStore=(NfsTO)data.getDataStore();
      String volPath=nfsStore.getUrl() + File.separator + data.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
      pool=physicalDisk.getPool();
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=null;
    Map<String,String> params=vmSpec.getDetails();
    if (params != null && params.get(""String_Node_Str"") != null && !params.get(""String_Node_Str"").isEmpty()) {
      String rootDiskController=params.get(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"" + rootDiskController);
      for (      DiskDef.diskBus bus : DiskDef.diskBus.values()) {
        if (bus.toString().equalsIgnoreCase(rootDiskController)) {
          s_logger.debug(""String_Node_Str"" + rootDiskController);
          diskBusType=bus;
          break;
        }
      }
    }
    if (diskBusType == null) {
      diskBusType=getGuestDiskModel(vmSpec.getPlatformEmulator());
    }
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=volume.getDiskSeq().intValue();
      if (pool.getType() == StoragePoolType.RBD) {
        disk.defNetworkBasedDisk(physicalDisk.getPath().replace(""String_Node_Str"",""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),pool.getAuthUserName(),pool.getUuid(),devId,diskBusType,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (pool.getType() == StoragePoolType.Gluster) {
        String mountpoint=pool.getLocalPath();
        String path=physicalDisk.getPath();
        String glusterVolume=pool.getSourceDir().replace(""String_Node_Str"",""String_Node_Str"");
        disk.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),null,null,devId,diskBusType,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (pool.getType() == StoragePoolType.CLVM || physicalDisk.getFormat() == PhysicalDiskFormat.RAW) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    if (data instanceof VolumeObjectTO) {
      VolumeObjectTO volumeObjectTO=(VolumeObjectTO)data;
      if ((volumeObjectTO.getBytesReadRate() != null) && (volumeObjectTO.getBytesReadRate() > 0))       disk.setBytesReadRate(volumeObjectTO.getBytesReadRate());
      if ((volumeObjectTO.getBytesWriteRate() != null) && (volumeObjectTO.getBytesWriteRate() > 0))       disk.setBytesWriteRate(volumeObjectTO.getBytesWriteRate());
      if ((volumeObjectTO.getIopsReadRate() != null) && (volumeObjectTO.getIopsReadRate() > 0))       disk.setIopsReadRate(volumeObjectTO.getIopsReadRate());
      if ((volumeObjectTO.getIopsWriteRate() != null) && (volumeObjectTO.getIopsWriteRate() > 0))       disk.setIopsWriteRate(volumeObjectTO.getIopsWriteRate());
      if (volumeObjectTO.getCacheMode() != null)       disk.setCacheMode(DiskDef.diskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString()));
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
  }
  if (HypervisorType.LXC.toString().toLowerCase().equals(vm.getHvsType())) {
    for (    DiskTO volume : disks) {
      DataTO data=volume.getData();
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      if (volume.getType() == Volume.Type.ROOT) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        FilesystemDef rootFs=new FilesystemDef(physicalDisk.getPath(),""String_Node_Str"");
        vm.getDevices().addDevice(rootFs);
      }
 else       if (volume.getType() == Volume.Type.DATADISK) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        KVMStoragePool pool=physicalDisk.getPool();
        if (StoragePoolType.RBD.equals(pool.getType())) {
          int devId=volume.getDiskSeq().intValue();
          String device=mapRbdDevice(physicalDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            DiskDef diskdef=new DiskDef();
            diskdef.defBlockBasedDisk(device,devId,DiskDef.diskBus.VIRTIO);
            diskdef.setQemuDriver(false);
            vm.getDevices().addDevice(diskdef);
          }
        }
      }
    }
  }
}","protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<DiskTO>(){
    @Override public int compare(    DiskTO arg0,    DiskTO arg1){
      return arg0.getDiskSeq() > arg1.getDiskSeq() ? 1 : -1;
    }
  }
);
  for (  DiskTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    DataTO data=volume.getData();
    if (volume.getType() == Volume.Type.ISO && data.getPath() != null) {
      NfsTO nfsStore=(NfsTO)data.getDataStore();
      String volPath=nfsStore.getUrl() + File.separator + data.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
      pool=physicalDisk.getPool();
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=null;
    Map<String,String> params=vmSpec.getDetails();
    if (params != null && params.get(""String_Node_Str"") != null && !params.get(""String_Node_Str"").isEmpty()) {
      String rootDiskController=params.get(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"" + rootDiskController);
      for (      DiskDef.diskBus bus : DiskDef.diskBus.values()) {
        if (bus.toString().equalsIgnoreCase(rootDiskController)) {
          s_logger.debug(""String_Node_Str"" + rootDiskController);
          diskBusType=bus;
          break;
        }
      }
    }
    if (diskBusType == null) {
      diskBusType=getGuestDiskModel(vmSpec.getPlatformEmulator());
    }
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=volume.getDiskSeq().intValue();
      if (pool.getType() == StoragePoolType.RBD) {
        disk.defNetworkBasedDisk(physicalDisk.getPath().replace(""String_Node_Str"",""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),pool.getAuthUserName(),pool.getUuid(),devId,diskBusType,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (pool.getType() == StoragePoolType.Gluster) {
        String mountpoint=pool.getLocalPath();
        String path=physicalDisk.getPath();
        String glusterVolume=pool.getSourceDir().replace(""String_Node_Str"",""String_Node_Str"");
        disk.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),null,null,devId,diskBusType,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (pool.getType() == StoragePoolType.CLVM || physicalDisk.getFormat() == PhysicalDiskFormat.RAW) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    if (data instanceof VolumeObjectTO) {
      VolumeObjectTO volumeObjectTO=(VolumeObjectTO)data;
      if ((volumeObjectTO.getBytesReadRate() != null) && (volumeObjectTO.getBytesReadRate() > 0))       disk.setBytesReadRate(volumeObjectTO.getBytesReadRate());
      if ((volumeObjectTO.getBytesWriteRate() != null) && (volumeObjectTO.getBytesWriteRate() > 0))       disk.setBytesWriteRate(volumeObjectTO.getBytesWriteRate());
      if ((volumeObjectTO.getIopsReadRate() != null) && (volumeObjectTO.getIopsReadRate() > 0))       disk.setIopsReadRate(volumeObjectTO.getIopsReadRate());
      if ((volumeObjectTO.getIopsWriteRate() != null) && (volumeObjectTO.getIopsWriteRate() > 0))       disk.setIopsWriteRate(volumeObjectTO.getIopsWriteRate());
      if (volumeObjectTO.getCacheMode() != null)       disk.setCacheMode(DiskDef.diskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString().toUpperCase()));
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
  }
  if (HypervisorType.LXC.toString().toLowerCase().equals(vm.getHvsType())) {
    for (    DiskTO volume : disks) {
      DataTO data=volume.getData();
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      if (volume.getType() == Volume.Type.ROOT) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        FilesystemDef rootFs=new FilesystemDef(physicalDisk.getPath(),""String_Node_Str"");
        vm.getDevices().addDevice(rootFs);
      }
 else       if (volume.getType() == Volume.Type.DATADISK) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        KVMStoragePool pool=physicalDisk.getPool();
        if (StoragePoolType.RBD.equals(pool.getType())) {
          int devId=volume.getDiskSeq().intValue();
          String device=mapRbdDevice(physicalDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            DiskDef diskdef=new DiskDef();
            diskdef.defBlockBasedDisk(device,devId,DiskDef.diskBus.VIRTIO);
            diskdef.setQemuDriver(false);
            vm.getDevices().addDevice(diskdef);
          }
        }
      }
    }
  }
}",0.9988486842105264
105434,"protected synchronized String attachOrDetachDisk(Connect conn,boolean attach,String vmName,KVMPhysicalDisk attachingDisk,int devId,Long bytesReadRate,Long bytesWriteRate,Long iopsReadRate,Long iopsWriteRate,String cacheMode) throws LibvirtException, InternalErrorException {
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      for (      DiskDef disk : disks) {
        String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
      }
    }
 else {
      diskdef=new DiskDef();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.diskBus.VIRTIO,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.diskBus.VIRTIO,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO);
      }
      if ((bytesReadRate != null) && (bytesReadRate > 0))       diskdef.setBytesReadRate(bytesReadRate);
      if ((bytesWriteRate != null) && (bytesWriteRate > 0))       diskdef.setBytesWriteRate(bytesWriteRate);
      if ((iopsReadRate != null) && (iopsReadRate > 0))       diskdef.setIopsReadRate(iopsReadRate);
      if ((iopsWriteRate != null) && (iopsWriteRate > 0))       diskdef.setIopsWriteRate(iopsWriteRate);
      if (cacheMode != null) {
        diskdef.setCacheMode(DiskDef.diskCacheMode.valueOf(cacheMode));
      }
    }
    String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}","protected synchronized String attachOrDetachDisk(Connect conn,boolean attach,String vmName,KVMPhysicalDisk attachingDisk,int devId,Long bytesReadRate,Long bytesWriteRate,Long iopsReadRate,Long iopsWriteRate,String cacheMode) throws LibvirtException, InternalErrorException {
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      for (      DiskDef disk : disks) {
        String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
      }
    }
 else {
      diskdef=new DiskDef();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.diskBus.VIRTIO,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.diskBus.VIRTIO,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO);
      }
      if ((bytesReadRate != null) && (bytesReadRate > 0))       diskdef.setBytesReadRate(bytesReadRate);
      if ((bytesWriteRate != null) && (bytesWriteRate > 0))       diskdef.setBytesWriteRate(bytesWriteRate);
      if ((iopsReadRate != null) && (iopsReadRate > 0))       diskdef.setIopsReadRate(iopsReadRate);
      if ((iopsWriteRate != null) && (iopsWriteRate > 0))       diskdef.setIopsWriteRate(iopsWriteRate);
      if (cacheMode != null) {
        diskdef.setCacheMode(DiskDef.diskCacheMode.valueOf(cacheMode.toUpperCase()));
      }
    }
    String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}",0.9974150664697192
105435,"protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<DiskTO>(){
    @Override public int compare(    DiskTO arg0,    DiskTO arg1){
      return arg0.getDiskSeq() > arg1.getDiskSeq() ? 1 : -1;
    }
  }
);
  for (  DiskTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    DataTO data=volume.getData();
    if (volume.getType() == Volume.Type.ISO && data.getPath() != null) {
      NfsTO nfsStore=(NfsTO)data.getDataStore();
      String volPath=nfsStore.getUrl() + File.separator + data.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
      pool=physicalDisk.getPool();
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=null;
    Map<String,String> params=vmSpec.getDetails();
    if (params != null && params.get(""String_Node_Str"") != null && !params.get(""String_Node_Str"").isEmpty()) {
      String rootDiskController=params.get(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"" + rootDiskController);
      for (      DiskDef.diskBus bus : DiskDef.diskBus.values()) {
        if (bus.toString().equalsIgnoreCase(rootDiskController)) {
          s_logger.debug(""String_Node_Str"" + rootDiskController);
          diskBusType=bus;
          break;
        }
      }
    }
    if (diskBusType == null) {
      diskBusType=getGuestDiskModel(vmSpec.getPlatformEmulator());
    }
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=volume.getDiskSeq().intValue();
      if (pool.getType() == StoragePoolType.RBD) {
        disk.defNetworkBasedDisk(physicalDisk.getPath().replace(""String_Node_Str"",""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),pool.getAuthUserName(),pool.getUuid(),devId,diskBusType,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (pool.getType() == StoragePoolType.Gluster) {
        String mountpoint=pool.getLocalPath();
        String path=physicalDisk.getPath();
        String glusterVolume=pool.getSourceDir().replace(""String_Node_Str"",""String_Node_Str"");
        disk.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),null,null,devId,diskBusType,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (pool.getType() == StoragePoolType.CLVM || physicalDisk.getFormat() == PhysicalDiskFormat.RAW) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    if (data instanceof VolumeObjectTO) {
      VolumeObjectTO volumeObjectTO=(VolumeObjectTO)data;
      if ((volumeObjectTO.getBytesReadRate() != null) && (volumeObjectTO.getBytesReadRate() > 0))       disk.setBytesReadRate(volumeObjectTO.getBytesReadRate());
      if ((volumeObjectTO.getBytesWriteRate() != null) && (volumeObjectTO.getBytesWriteRate() > 0))       disk.setBytesWriteRate(volumeObjectTO.getBytesWriteRate());
      if ((volumeObjectTO.getIopsReadRate() != null) && (volumeObjectTO.getIopsReadRate() > 0))       disk.setIopsReadRate(volumeObjectTO.getIopsReadRate());
      if ((volumeObjectTO.getIopsWriteRate() != null) && (volumeObjectTO.getIopsWriteRate() > 0))       disk.setIopsWriteRate(volumeObjectTO.getIopsWriteRate());
      if (volumeObjectTO.getCacheMode() != null)       disk.setCacheMode(DiskDef.diskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString()));
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
  }
  if (HypervisorType.LXC.toString().toLowerCase().equals(vm.getHvsType())) {
    for (    DiskTO volume : disks) {
      DataTO data=volume.getData();
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      if (volume.getType() == Volume.Type.ROOT) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        FilesystemDef rootFs=new FilesystemDef(physicalDisk.getPath(),""String_Node_Str"");
        vm.getDevices().addDevice(rootFs);
      }
 else       if (volume.getType() == Volume.Type.DATADISK) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        KVMStoragePool pool=physicalDisk.getPool();
        if (StoragePoolType.RBD.equals(pool.getType())) {
          int devId=volume.getDiskSeq().intValue();
          String device=mapRbdDevice(physicalDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            DiskDef diskdef=new DiskDef();
            diskdef.defBlockBasedDisk(device,devId,DiskDef.diskBus.VIRTIO);
            diskdef.setQemuDriver(false);
            vm.getDevices().addDevice(diskdef);
          }
        }
      }
    }
  }
}","protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<DiskTO>(){
    @Override public int compare(    DiskTO arg0,    DiskTO arg1){
      return arg0.getDiskSeq() > arg1.getDiskSeq() ? 1 : -1;
    }
  }
);
  for (  DiskTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    DataTO data=volume.getData();
    if (volume.getType() == Volume.Type.ISO && data.getPath() != null) {
      NfsTO nfsStore=(NfsTO)data.getDataStore();
      String volPath=nfsStore.getUrl() + File.separator + data.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
      pool=physicalDisk.getPool();
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=null;
    Map<String,String> params=vmSpec.getDetails();
    if (params != null && params.get(""String_Node_Str"") != null && !params.get(""String_Node_Str"").isEmpty()) {
      String rootDiskController=params.get(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"" + rootDiskController);
      for (      DiskDef.diskBus bus : DiskDef.diskBus.values()) {
        if (bus.toString().equalsIgnoreCase(rootDiskController)) {
          s_logger.debug(""String_Node_Str"" + rootDiskController);
          diskBusType=bus;
          break;
        }
      }
    }
    if (diskBusType == null) {
      diskBusType=getGuestDiskModel(vmSpec.getPlatformEmulator());
    }
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=volume.getDiskSeq().intValue();
      if (pool.getType() == StoragePoolType.RBD) {
        disk.defNetworkBasedDisk(physicalDisk.getPath().replace(""String_Node_Str"",""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),pool.getAuthUserName(),pool.getUuid(),devId,diskBusType,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (pool.getType() == StoragePoolType.Gluster) {
        String mountpoint=pool.getLocalPath();
        String path=physicalDisk.getPath();
        String glusterVolume=pool.getSourceDir().replace(""String_Node_Str"",""String_Node_Str"");
        disk.defNetworkBasedDisk(glusterVolume + path.replace(mountpoint,""String_Node_Str""),pool.getSourceHost(),pool.getSourcePort(),null,null,devId,diskBusType,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (pool.getType() == StoragePoolType.CLVM || physicalDisk.getFormat() == PhysicalDiskFormat.RAW) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    if (data instanceof VolumeObjectTO) {
      VolumeObjectTO volumeObjectTO=(VolumeObjectTO)data;
      if ((volumeObjectTO.getBytesReadRate() != null) && (volumeObjectTO.getBytesReadRate() > 0))       disk.setBytesReadRate(volumeObjectTO.getBytesReadRate());
      if ((volumeObjectTO.getBytesWriteRate() != null) && (volumeObjectTO.getBytesWriteRate() > 0))       disk.setBytesWriteRate(volumeObjectTO.getBytesWriteRate());
      if ((volumeObjectTO.getIopsReadRate() != null) && (volumeObjectTO.getIopsReadRate() > 0))       disk.setIopsReadRate(volumeObjectTO.getIopsReadRate());
      if ((volumeObjectTO.getIopsWriteRate() != null) && (volumeObjectTO.getIopsWriteRate() > 0))       disk.setIopsWriteRate(volumeObjectTO.getIopsWriteRate());
      if (volumeObjectTO.getCacheMode() != null)       disk.setCacheMode(DiskDef.diskCacheMode.valueOf(volumeObjectTO.getCacheMode().toString().toUpperCase()));
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
  }
  if (HypervisorType.LXC.toString().toLowerCase().equals(vm.getHvsType())) {
    for (    DiskTO volume : disks) {
      DataTO data=volume.getData();
      PrimaryDataStoreTO store=(PrimaryDataStoreTO)data.getDataStore();
      if (volume.getType() == Volume.Type.ROOT) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        FilesystemDef rootFs=new FilesystemDef(physicalDisk.getPath(),""String_Node_Str"");
        vm.getDevices().addDevice(rootFs);
      }
 else       if (volume.getType() == Volume.Type.DATADISK) {
        KVMPhysicalDisk physicalDisk=_storagePoolMgr.getPhysicalDisk(store.getPoolType(),store.getUuid(),data.getPath());
        KVMStoragePool pool=physicalDisk.getPool();
        if (StoragePoolType.RBD.equals(pool.getType())) {
          int devId=volume.getDiskSeq().intValue();
          String device=mapRbdDevice(physicalDisk);
          if (device != null) {
            s_logger.debug(""String_Node_Str"" + device);
            DiskDef diskdef=new DiskDef();
            diskdef.defBlockBasedDisk(device,devId,DiskDef.diskBus.VIRTIO);
            diskdef.setQemuDriver(false);
            vm.getDevices().addDevice(diskdef);
          }
        }
      }
    }
  }
}",0.9988486842105264
105436,"protected synchronized String attachOrDetachDisk(Connect conn,boolean attach,String vmName,KVMPhysicalDisk attachingDisk,int devId,Long bytesReadRate,Long bytesWriteRate,Long iopsReadRate,Long iopsWriteRate,String cacheMode) throws LibvirtException, InternalErrorException {
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      for (      DiskDef disk : disks) {
        String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
      }
    }
 else {
      diskdef=new DiskDef();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.diskBus.VIRTIO,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.diskBus.VIRTIO,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO);
      }
      if ((bytesReadRate != null) && (bytesReadRate > 0))       diskdef.setBytesReadRate(bytesReadRate);
      if ((bytesWriteRate != null) && (bytesWriteRate > 0))       diskdef.setBytesWriteRate(bytesWriteRate);
      if ((iopsReadRate != null) && (iopsReadRate > 0))       diskdef.setIopsReadRate(iopsReadRate);
      if ((iopsWriteRate != null) && (iopsWriteRate > 0))       diskdef.setIopsWriteRate(iopsWriteRate);
      if (cacheMode != null) {
        diskdef.setCacheMode(DiskDef.diskCacheMode.valueOf(cacheMode));
      }
    }
    String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}","protected synchronized String attachOrDetachDisk(Connect conn,boolean attach,String vmName,KVMPhysicalDisk attachingDisk,int devId,Long bytesReadRate,Long bytesWriteRate,Long iopsReadRate,Long iopsWriteRate,String cacheMode) throws LibvirtException, InternalErrorException {
  List<DiskDef> disks=null;
  Domain dm=null;
  DiskDef diskdef=null;
  KVMStoragePool attachingPool=attachingDisk.getPool();
  try {
    if (!attach) {
      dm=conn.domainLookupByName(vmName);
      LibvirtDomainXMLParser parser=new LibvirtDomainXMLParser();
      String xml=dm.getXMLDesc(0);
      parser.parseDomainXML(xml);
      disks=parser.getDisks();
      for (      DiskDef disk : disks) {
        String file=disk.getDiskPath();
        if (file != null && file.equalsIgnoreCase(attachingDisk.getPath())) {
          diskdef=disk;
          break;
        }
      }
      if (diskdef == null) {
        throw new InternalErrorException(""String_Node_Str"" + attachingDisk.getPath() + ""String_Node_Str"");
      }
    }
 else {
      diskdef=new DiskDef();
      if (attachingPool.getType() == StoragePoolType.RBD) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),attachingPool.getAuthUserName(),attachingPool.getUuid(),devId,DiskDef.diskBus.VIRTIO,diskProtocol.RBD,DiskDef.diskFmtType.RAW);
      }
 else       if (attachingPool.getType() == StoragePoolType.Gluster) {
        diskdef.defNetworkBasedDisk(attachingDisk.getPath(),attachingPool.getSourceHost(),attachingPool.getSourcePort(),null,null,devId,DiskDef.diskBus.VIRTIO,diskProtocol.GLUSTER,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.QCOW2) {
        diskdef.defFileBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
      }
 else       if (attachingDisk.getFormat() == PhysicalDiskFormat.RAW) {
        diskdef.defBlockBasedDisk(attachingDisk.getPath(),devId,DiskDef.diskBus.VIRTIO);
      }
      if ((bytesReadRate != null) && (bytesReadRate > 0))       diskdef.setBytesReadRate(bytesReadRate);
      if ((bytesWriteRate != null) && (bytesWriteRate > 0))       diskdef.setBytesWriteRate(bytesWriteRate);
      if ((iopsReadRate != null) && (iopsReadRate > 0))       diskdef.setIopsReadRate(iopsReadRate);
      if ((iopsWriteRate != null) && (iopsWriteRate > 0))       diskdef.setIopsWriteRate(iopsWriteRate);
      if (cacheMode != null) {
        diskdef.setCacheMode(DiskDef.diskCacheMode.valueOf(cacheMode.toUpperCase()));
      }
    }
    String xml=diskdef.toString();
    return attachOrDetachDevice(conn,attach,vmName,xml);
  }
  finally {
    if (dm != null) {
      dm.free();
    }
  }
}",0.9974150664697192
105437,"public void onProxyAlert(Object sender,ConsoleProxyAlertEventArgs args){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"");
  DataCenterVO dc=_dcDao.findById(args.getZoneId());
  ConsoleProxyVO proxy=args.getProxy();
  if (proxy == null && args.getProxyId() != 0)   proxy=_consoleProxyDao.findById(args.getProxyId());
switch (args.getType()) {
case ConsoleProxyAlertEventArgs.PROXY_CREATED:
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ proxy.getPrivateIpAddress());
  break;
case ConsoleProxyAlertEventArgs.PROXY_UP:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ proxy.getPrivateIpAddress());
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_DOWN:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_REBOOTED:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_CREATE_FAILURE:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName());
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),null,""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ args.getMessage(),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_START_FAILURE:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress())+ ""String_Node_Str""+ args.getMessage(),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_FIREWALL_ALERT:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_STORAGE_ALERT:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ proxy.getPrivateIpAddress()+ ""String_Node_Str""+ args.getMessage());
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_STORAGE_MISC,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ args.getMessage(),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
}
}","public void onProxyAlert(Object sender,ConsoleProxyAlertEventArgs args){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"");
  DataCenterVO dc=_dcDao.findById(args.getZoneId());
  ConsoleProxyVO proxy=args.getProxy();
  if (proxy == null && args.getProxyId() != 0)   proxy=_consoleProxyDao.findById(args.getProxyId());
  if (proxy == null && args.getType() != ConsoleProxyAlertEventArgs.PROXY_CREATE_FAILURE) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
switch (args.getType()) {
case ConsoleProxyAlertEventArgs.PROXY_CREATED:
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ proxy.getPrivateIpAddress());
  break;
case ConsoleProxyAlertEventArgs.PROXY_UP:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ proxy.getPrivateIpAddress());
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_DOWN:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_REBOOTED:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_CREATE_FAILURE:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName());
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),null,""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ args.getMessage(),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_START_FAILURE:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress())+ ""String_Node_Str""+ args.getMessage(),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_FIREWALL_ALERT:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()));
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ (proxy.getPrivateIpAddress() == null ? ""String_Node_Str"" : proxy.getPrivateIpAddress()),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
case ConsoleProxyAlertEventArgs.PROXY_STORAGE_ALERT:
if (s_logger.isDebugEnabled()) s_logger.debug(""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str""+ proxy.getPublicIpAddress()+ ""String_Node_Str""+ proxy.getPrivateIpAddress()+ ""String_Node_Str""+ args.getMessage());
_alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_STORAGE_MISC,args.getZoneId(),proxy.getPodIdToDeployIn(),""String_Node_Str"" + dc.getName() + ""String_Node_Str""+ args.getMessage(),""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
break;
}
}",0.9855348306052532
105438,"@Override public Integer getSourcePortStart(){
  if (publicStartPort != null) {
    return publicStartPort.intValue();
  }
  return null;
}","@Override public Integer getSourcePortStart(){
  if (publicStartPort != null) {
    return publicStartPort;
  }
  return null;
}",0.9588014981273408
105439,"@Override public Integer getSourcePortEnd(){
  if (publicEndPort == null) {
    if (publicStartPort != null) {
      return publicStartPort.intValue();
    }
  }
 else {
    return publicEndPort.intValue();
  }
  return null;
}","@Override public Integer getSourcePortEnd(){
  if (publicEndPort == null) {
    if (publicStartPort != null) {
      return publicStartPort;
    }
  }
 else {
    return publicEndPort;
  }
  return null;
}",0.949074074074074
105440,"@Override public Long getSyncObjId(){
  return _firewallService.getFirewallRule(id).getNetworkId();
}","@Override public Long getSyncObjId(){
  FirewallRule fw=_firewallService.getFirewallRule(id);
  if (fw != null)   return fw.getNetworkId();
  return null;
}",0.7626459143968871
105441,"@Override @Before public void setUp(){
  addIpToVmNicCmd=new AddIpToVmNicCmd(){
  }
;
  removeIpFromVmNicCmd=new RemoveIpFromVmNicCmd();
}","@Override @Before public void setUp(){
}",0.449438202247191
105442,"@Test public void testRemoveIpFromVmNicSuccess() throws ResourceAllocationException, ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  NetworkService networkService=Mockito.mock(NetworkService.class);
  RemoveIpFromVmNicCmd removeIpFromNic=Mockito.mock(RemoveIpFromVmNicCmd.class);
  Mockito.when(networkService.releaseSecondaryIpFromNic(Matchers.anyInt())).thenReturn(true);
  removeIpFromNic._networkService=networkService;
  successResponseGenerator=Mockito.mock(SuccessResponse.class);
  removeIpFromNic.execute();
}","@Test public void testRemoveIpFromVmNicSuccess() throws ResourceAllocationException, ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  NetworkService networkService=Mockito.mock(NetworkService.class);
  RemoveIpFromVmNicCmd removeIpFromNic=Mockito.mock(RemoveIpFromVmNicCmd.class);
  Mockito.when(networkService.releaseSecondaryIpFromNic(Matchers.anyInt())).thenReturn(true);
  removeIpFromNic._networkService=networkService;
  removeIpFromNic.execute();
}",0.9398496240601504
105443,"@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
      newTemplate.setPath(path);
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}","@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      if (dsMo != null) {
        String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
        newTemplate.setPath(path);
      }
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}",0.9964710252600296
105444,"private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    FileReader fr=new FileReader(xmlFilePath);
    BufferedReader br=new BufferedReader(fr);
    String xml=""String_Node_Str"";
    String line;
    while ((line=br.readLine()) != null) {
      xml+=line.trim();
    }
    return xml;
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}","private String getXml(String filename){
  try {
    String xmlFilePath=Script.findScript(scriptsDir,filename);
    if (xmlFilePath == null) {
      throw new Exception(""String_Node_Str"" + filename);
    }
    try (FileReader fr=new FileReader(xmlFilePath);BufferedReader br=new BufferedReader(fr)){
      String xml=""String_Node_Str"";
      String line;
      while ((line=br.readLine()) != null) {
        xml+=line.trim();
      }
      return xml;
    }
 catch (    Exception e) {
      s_logger.debug(e);
      return null;
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    return null;
  }
}",0.8339285714285715
105445,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handle(final HttpRequest request,final HttpResponse response,final HttpContext context) throws HttpException, IOException {
  final StringBuilder sb=new StringBuilder();
  final HttpServerConnection connObj=(HttpServerConnection)context.getAttribute(""String_Node_Str"");
  if (connObj instanceof SocketHttpServerConnection) {
    final InetAddress remoteAddr=((SocketHttpServerConnection)connObj).getRemoteAddress();
    sb.append(remoteAddr.toString() + ""String_Node_Str"");
  }
  sb.append(StringUtils.cleanString(request.getRequestLine().toString()));
  try {
    List<NameValuePair> paramList=null;
    try {
      paramList=URLEncodedUtils.parse(new URI(request.getRequestLine().getUri()),HttpUtils.UTF_8);
    }
 catch (    final URISyntaxException e) {
      s_logger.error(""String_Node_Str"",e);
    }
    final Map parameterMap=new HashMap<String,String[]>();
    String responseType=HttpUtils.RESPONSE_TYPE_XML;
    for (    final NameValuePair param : paramList) {
      if (param.getName().equalsIgnoreCase(""String_Node_Str"")) {
        responseType=param.getValue();
        continue;
      }
      parameterMap.put(param.getName(),new String[]{param.getValue()});
    }
    parameterMap.put(""String_Node_Str"",new String[]{request.getRequestLine().getMethod()});
    if (!(responseType.equals(HttpUtils.RESPONSE_TYPE_JSON) || responseType.equals(HttpUtils.RESPONSE_TYPE_XML))) {
      responseType=HttpUtils.RESPONSE_TYPE_XML;
    }
    try {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
      sb.insert(0,""String_Node_Str"" + User.UID_SYSTEM + ""String_Node_Str""+ Account.ACCOUNT_ID_SYSTEM+ ""String_Node_Str""+ null+ ""String_Node_Str"");
      final String responseText=handleRequest(parameterMap,responseType,sb);
      sb.append(""String_Node_Str"" + ((responseText == null) ? 0 : responseText.length()));
      writeResponse(response,responseText,HttpStatus.SC_OK,responseType,null);
    }
 catch (    final ServerApiException se) {
      final String responseText=getSerializedApiError(se,parameterMap,responseType);
      writeResponse(response,responseText,se.getErrorCode().getHttpCode(),responseType,se.getDescription());
      sb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
    }
catch (    final RuntimeException e) {
      s_logger.error(""String_Node_Str"",e);
      throw e;
    }
  }
  finally {
    s_accessLogger.info(sb.toString());
    CallContext.unregister();
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handle(final HttpRequest request,final HttpResponse response,final HttpContext context) throws HttpException, IOException {
  final StringBuilder sb=new StringBuilder();
  final HttpServerConnection connObj=(HttpServerConnection)context.getAttribute(""String_Node_Str"");
  if (connObj instanceof SocketHttpServerConnection) {
    final InetAddress remoteAddr=((SocketHttpServerConnection)connObj).getRemoteAddress();
    sb.append(remoteAddr.toString() + ""String_Node_Str"");
  }
  sb.append(StringUtils.cleanString(request.getRequestLine().toString()));
  try {
    List<NameValuePair> paramList=null;
    try {
      paramList=URLEncodedUtils.parse(new URI(request.getRequestLine().getUri()),HttpUtils.UTF_8);
    }
 catch (    final URISyntaxException e) {
      s_logger.error(""String_Node_Str"",e);
    }
    final Map parameterMap=new HashMap<String,String[]>();
    String responseType=HttpUtils.RESPONSE_TYPE_XML;
    if (paramList != null) {
      for (      final NameValuePair param : paramList) {
        if (param.getName().equalsIgnoreCase(""String_Node_Str"")) {
          responseType=param.getValue();
          continue;
        }
        parameterMap.put(param.getName(),new String[]{param.getValue()});
      }
    }
    parameterMap.put(""String_Node_Str"",new String[]{request.getRequestLine().getMethod()});
    if (!(responseType.equals(HttpUtils.RESPONSE_TYPE_JSON) || responseType.equals(HttpUtils.RESPONSE_TYPE_XML))) {
      responseType=HttpUtils.RESPONSE_TYPE_XML;
    }
    try {
      CallContext.register(_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
      sb.insert(0,""String_Node_Str"" + User.UID_SYSTEM + ""String_Node_Str""+ Account.ACCOUNT_ID_SYSTEM+ ""String_Node_Str""+ null+ ""String_Node_Str"");
      final String responseText=handleRequest(parameterMap,responseType,sb);
      sb.append(""String_Node_Str"" + ((responseText == null) ? 0 : responseText.length()));
      writeResponse(response,responseText,HttpStatus.SC_OK,responseType,null);
    }
 catch (    final ServerApiException se) {
      final String responseText=getSerializedApiError(se,parameterMap,responseType);
      writeResponse(response,responseText,se.getErrorCode().getHttpCode(),responseType,se.getDescription());
      sb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
    }
catch (    final RuntimeException e) {
      s_logger.error(""String_Node_Str"",e);
      throw e;
    }
  }
  finally {
    s_accessLogger.info(sb.toString());
    CallContext.unregister();
  }
}",0.9738321380112424
105446,"@Override public void scheduleRestartForVmsOnHost(final HostVO host,boolean investigate){
  if (host.getType() != Host.Type.Routing) {
    return;
  }
  if (host.getHypervisorType() == HypervisorType.VMware || host.getHypervisorType() == HypervisorType.Hyperv) {
    s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    return;
  }
  s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName());
  final List<VMInstanceVO> vms=_instanceDao.listByHostId(host.getId());
  final DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
  StringBuilder sb=null;
  if ((vms != null) && !vms.isEmpty()) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    VMInstanceVO vm=vms.get(0);
    if (vm.isHaEnabled()) {
      sb.append(""String_Node_Str"" + vm);
    }
    for (int i=1; i < vms.size(); i++) {
      vm=vms.get(i);
      if (vm.isHaEnabled()) {
        sb.append(""String_Node_Str"" + vm.getHostName());
      }
    }
  }
  HostPodVO podVO=_podDao.findById(host.getPodId());
  String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str""+ ((sb != null) ? sb.toString() : ""String_Node_Str""));
  for (  VMInstanceVO vm : vms) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getInstanceName());
    }
    vm=_instanceDao.findByUuid(vm.getUuid());
    Long hostId=vm.getHostId();
    if (hostId != null && !hostId.equals(host.getId())) {
      s_logger.debug(""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ hostId+ ""String_Node_Str"");
      continue;
    }
    scheduleRestart(vm,investigate);
  }
}","@Override public void scheduleRestartForVmsOnHost(final HostVO host,boolean investigate){
  if (host.getType() != Host.Type.Routing) {
    return;
  }
  if (host.getHypervisorType() == HypervisorType.VMware || host.getHypervisorType() == HypervisorType.Hyperv) {
    s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    return;
  }
  s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName());
  final List<VMInstanceVO> vms=_instanceDao.listByHostId(host.getId());
  final DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
  StringBuilder sb=null;
  if ((vms != null) && !vms.isEmpty()) {
    sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    VMInstanceVO vm=vms.get(0);
    if (vm.isHaEnabled()) {
      sb.append(""String_Node_Str"" + vm);
    }
    for (int i=1; i < vms.size(); i++) {
      vm=vms.get(i);
      if (vm.isHaEnabled()) {
        sb.append(""String_Node_Str"" + vm.getHostName());
      }
    }
  }
  HostPodVO podVO=_podDao.findById(host.getPodId());
  String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str""+ ((sb != null) ? sb.toString() : ""String_Node_Str""));
  if (vms != null) {
    for (    VMInstanceVO vm : vms) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getInstanceName());
      }
      vm=_instanceDao.findByUuid(vm.getUuid());
      Long hostId=vm.getHostId();
      if (hostId != null && !hostId.equals(host.getId())) {
        s_logger.debug(""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ hostId+ ""String_Node_Str"");
        continue;
      }
      scheduleRestart(vm,investigate);
    }
  }
}",0.9849987287058224
105447,"protected HostVO createHostVO(StartupCommand[] cmds,ServerResource resource,Map<String,String> details,List<String> hostTags,ResourceStateAdapter.Event stateEvent){
  StartupCommand startup=cmds[0];
  HostVO host=findHostByGuid(startup.getGuid());
  boolean isNew=false;
  if (host == null) {
    host=findHostByGuid(startup.getGuidWithoutResource());
  }
  if (host == null) {
    host=new HostVO(startup.getGuid());
    isNew=true;
  }
  String dataCenter=startup.getDataCenter();
  String pod=startup.getPod();
  String cluster=startup.getCluster();
  if (pod != null && dataCenter != null && pod.equalsIgnoreCase(""String_Node_Str"") && dataCenter.equalsIgnoreCase(""String_Node_Str"")) {
    List<HostPodVO> pods=_podDao.listAllIncludingRemoved();
    for (    HostPodVO hpv : pods) {
      if (checkCIDR(hpv,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hpv.getName();
        dataCenter=_dcDao.findById(hpv.getDataCenterId()).getName();
        break;
      }
    }
  }
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + dataCenter + ""String_Node_Str"");
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + startup.getPrivateIpAddress() + ""String_Node_Str""+ dataCenter);
  }
  dcId=dc.getId();
  HostPodVO p=_podDao.findByName(pod,dcId);
  if (p == null) {
    try {
      final long podId=Long.parseLong(pod);
      p=_podDao.findById(podId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + pod + ""String_Node_Str"");
    }
  }
  Long podId=(p == null ? null : p.getId());
  Long clusterId=null;
  if (cluster != null) {
    try {
      clusterId=Long.valueOf(cluster);
    }
 catch (    NumberFormatException e) {
      ClusterVO c=_clusterDao.findBy(cluster,podId);
      if (c == null) {
        c=new ClusterVO(dcId,podId,cluster);
        c=_clusterDao.persist(c);
      }
      clusterId=c.getId();
    }
  }
  if (startup instanceof StartupRoutingCommand) {
    StartupRoutingCommand ssCmd=((StartupRoutingCommand)startup);
    List<String> implicitHostTags=ssCmd.getHostTags();
    if (!implicitHostTags.isEmpty()) {
      if (hostTags == null) {
        hostTags=_hostTagsDao.gethostTags(host.getId());
      }
      if (hostTags != null) {
        implicitHostTags.removeAll(hostTags);
        hostTags.addAll(implicitHostTags);
      }
 else {
        hostTags=implicitHostTags;
      }
    }
  }
  host.setDataCenterId(dc.getId());
  host.setPodId(podId);
  host.setClusterId(clusterId);
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setManagementServerId(_nodeId);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setHostTags(hostTags);
  host.setDetails(details);
  if (startup.getStorageIpAddressDeux() != null) {
    host.setStorageIpAddressDeux(startup.getStorageIpAddressDeux());
    host.setStorageMacAddressDeux(startup.getStorageMacAddressDeux());
    host.setStorageNetmaskDeux(startup.getStorageNetmaskDeux());
  }
  if (resource != null) {
    host.setResource(resource.getClass().getName());
  }
  host=(HostVO)dispatchToStateAdapters(stateEvent,true,host,cmds,resource,details,hostTags);
  if (host == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (isNew) {
    host=_hostDao.persist(host);
  }
 else {
    _hostDao.update(host.getId(),host);
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.InternalCreated,_nodeId);
    _agentMgr.agentStatusTransitTo(host,Status.Event.AgentConnected,_nodeId);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    _agentMgr.agentStatusTransitTo(host,Status.Event.Error,_nodeId);
    try {
      resourceStateTransitTo(host,ResourceState.Event.Error,_nodeId);
    }
 catch (    NoTransitionException e1) {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    }
  }
  return host;
}","protected HostVO createHostVO(StartupCommand[] cmds,ServerResource resource,Map<String,String> details,List<String> hostTags,ResourceStateAdapter.Event stateEvent){
  StartupCommand startup=cmds[0];
  HostVO host=findHostByGuid(startup.getGuid());
  boolean isNew=false;
  if (host == null) {
    host=findHostByGuid(startup.getGuidWithoutResource());
  }
  if (host == null) {
    host=new HostVO(startup.getGuid());
    isNew=true;
  }
  String dataCenter=startup.getDataCenter();
  String pod=startup.getPod();
  String cluster=startup.getCluster();
  if (pod != null && dataCenter != null && pod.equalsIgnoreCase(""String_Node_Str"") && dataCenter.equalsIgnoreCase(""String_Node_Str"")) {
    List<HostPodVO> pods=_podDao.listAllIncludingRemoved();
    for (    HostPodVO hpv : pods) {
      if (checkCIDR(hpv,startup.getPrivateIpAddress(),startup.getPrivateNetmask())) {
        pod=hpv.getName();
        dataCenter=_dcDao.findById(hpv.getDataCenterId()).getName();
        break;
      }
    }
  }
  long dcId=-1;
  DataCenterVO dc=_dcDao.findByName(dataCenter);
  if (dc == null) {
    try {
      dcId=Long.parseLong(dataCenter);
      dc=_dcDao.findById(dcId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + dataCenter + ""String_Node_Str"");
    }
  }
  if (dc == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + startup.getPrivateIpAddress() + ""String_Node_Str""+ dataCenter);
  }
  dcId=dc.getId();
  HostPodVO p=_podDao.findByName(pod,dcId);
  if (p == null) {
    try {
      final long podId=Long.parseLong(pod);
      p=_podDao.findById(podId);
    }
 catch (    final NumberFormatException e) {
      s_logger.debug(""String_Node_Str"" + pod + ""String_Node_Str"");
    }
  }
  Long podId=(p == null ? null : p.getId());
  Long clusterId=null;
  if (cluster != null) {
    try {
      clusterId=Long.valueOf(cluster);
    }
 catch (    NumberFormatException e) {
      if (podId != null) {
        ClusterVO c=_clusterDao.findBy(cluster,podId.longValue());
        if (c == null) {
          c=new ClusterVO(dcId,podId.longValue(),cluster);
          c=_clusterDao.persist(c);
        }
        clusterId=c.getId();
      }
    }
  }
  if (startup instanceof StartupRoutingCommand) {
    StartupRoutingCommand ssCmd=((StartupRoutingCommand)startup);
    List<String> implicitHostTags=ssCmd.getHostTags();
    if (!implicitHostTags.isEmpty()) {
      if (hostTags == null) {
        hostTags=_hostTagsDao.gethostTags(host.getId());
      }
      if (hostTags != null) {
        implicitHostTags.removeAll(hostTags);
        hostTags.addAll(implicitHostTags);
      }
 else {
        hostTags=implicitHostTags;
      }
    }
  }
  host.setDataCenterId(dc.getId());
  host.setPodId(podId);
  host.setClusterId(clusterId);
  host.setPrivateIpAddress(startup.getPrivateIpAddress());
  host.setPrivateNetmask(startup.getPrivateNetmask());
  host.setPrivateMacAddress(startup.getPrivateMacAddress());
  host.setPublicIpAddress(startup.getPublicIpAddress());
  host.setPublicMacAddress(startup.getPublicMacAddress());
  host.setPublicNetmask(startup.getPublicNetmask());
  host.setStorageIpAddress(startup.getStorageIpAddress());
  host.setStorageMacAddress(startup.getStorageMacAddress());
  host.setStorageNetmask(startup.getStorageNetmask());
  host.setVersion(startup.getVersion());
  host.setName(startup.getName());
  host.setManagementServerId(_nodeId);
  host.setStorageUrl(startup.getIqn());
  host.setLastPinged(System.currentTimeMillis() >> 10);
  host.setHostTags(hostTags);
  host.setDetails(details);
  if (startup.getStorageIpAddressDeux() != null) {
    host.setStorageIpAddressDeux(startup.getStorageIpAddressDeux());
    host.setStorageMacAddressDeux(startup.getStorageMacAddressDeux());
    host.setStorageNetmaskDeux(startup.getStorageNetmaskDeux());
  }
  if (resource != null) {
    host.setResource(resource.getClass().getName());
  }
  host=(HostVO)dispatchToStateAdapters(stateEvent,true,host,cmds,resource,details,hostTags);
  if (host == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (isNew) {
    host=_hostDao.persist(host);
  }
 else {
    _hostDao.update(host.getId(),host);
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.InternalCreated,_nodeId);
    _agentMgr.agentStatusTransitTo(host,Status.Event.AgentConnected,_nodeId);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    _agentMgr.agentStatusTransitTo(host,Status.Event.Error,_nodeId);
    try {
      resourceStateTransitTo(host,ResourceState.Event.Error,_nodeId);
    }
 catch (    NoTransitionException e1) {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    }
  }
  return host;
}",0.987636056218958
105448,"public static BigInteger countIp6InRange(String ip6Range){
  if (ip6Range == null) {
    return null;
  }
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  String endIp=ips[0];
  if (ips.length > 1) {
    endIp=ips[1];
  }
  IPv6Address start, end;
  try {
    start=IPv6Address.fromString(startIp);
    end=IPv6Address.fromString(endIp);
  }
 catch (  IllegalArgumentException ex) {
    return null;
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger endInt=convertIPv6AddressToBigInteger(end);
  if (endInt != null) {
    if (startInt.compareTo(endInt) > 0) {
      return null;
    }
  }
  return endInt.subtract(startInt).add(BigInteger.ONE);
}","public static BigInteger countIp6InRange(String ip6Range){
  if (ip6Range == null) {
    return null;
  }
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  String endIp=ips[0];
  if (ips.length > 1) {
    endIp=ips[1];
  }
  IPv6Address start, end;
  try {
    start=IPv6Address.fromString(startIp);
    end=IPv6Address.fromString(endIp);
  }
 catch (  IllegalArgumentException ex) {
    return null;
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger endInt=convertIPv6AddressToBigInteger(end);
  if (endInt != null) {
    if (startInt != null) {
      if (startInt.compareTo(endInt) > 0) {
        return null;
      }
    }
    return endInt.subtract(startInt).add(BigInteger.ONE);
  }
  return null;
}",0.9431895961670088
105449,"protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}","protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  if (vmTO.getOs().contains(""String_Node_Str"") && hostOsVersion != null && ((hostOsVersion.first() == 6 && hostOsVersion.second() >= 5) || (hostOsVersion.first() >= 7))) {
    LibvirtVMDef.HyperVEnlightenmentFeatureDef hyv=new LibvirtVMDef.HyperVEnlightenmentFeatureDef();
    hyv.setRelaxed(true);
    features.addHyperVFeature(hyv);
  }
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}",0.9546609602781864
105450,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}",0.9993498577813896
105451,"private boolean updateLDAP(){
  LdapConfigurationResponse response=_ldapManager.addConfiguration(hostname,port);
  ConfigurationVO cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getSearchBase());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getBindDN());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getBindPassword());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getTrustStore());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getTrustStorePassword());
  return true;
}","private boolean updateLDAP(){
  _ldapManager.addConfiguration(hostname,port);
  ConfigurationVO cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getSearchBase());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getBindDN());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getBindPassword());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getTrustStore());
  cvo=_configDao.findByName(""String_Node_Str"");
  _configDao.update(cvo.getName(),cvo.getCategory(),getTrustStorePassword());
  return true;
}",0.9758120248790602
105452,"private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"")+ ""String_Node_Str"");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          if (bytesSent == null || bytesRcvd == null) {
            s_logger.debug(""String_Node_Str"" + publicIp);
          }
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
      in.close();
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}","private DirectNetworkUsageAnswer getPublicIpBytesSentAndReceived(DirectNetworkUsageCommand cmd) throws ExecutionException {
  DirectNetworkUsageAnswer answer=new DirectNetworkUsageAnswer(cmd);
  try {
    URL trafficSentinel;
    if (_inclZones == null) {
      _inclZones=cmd.getIncludeZones();
    }
    if (_exclZones == null) {
      _exclZones=cmd.getExcludeZones();
    }
    try {
      trafficSentinel=new URL(_url + ""String_Node_Str"" + URLEncoder.encode(getScript(cmd.getPublicIps(),cmd.getStart(),cmd.getEnd()),""String_Node_Str"")+ ""String_Node_Str"");
      BufferedReader in=new BufferedReader(new InputStreamReader(trafficSentinel.openStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(inputLine,""String_Node_Str"");
        if (st.countTokens() == 3) {
          String publicIp=st.nextToken();
          Long bytesSent=new Long(st.nextToken());
          Long bytesRcvd=new Long(st.nextToken());
          long[] bytesSentAndReceived=new long[2];
          bytesSentAndReceived[0]=bytesSent;
          bytesSentAndReceived[1]=bytesRcvd;
          answer.put(publicIp,bytesSentAndReceived);
        }
      }
      in.close();
    }
 catch (    MalformedURLException e1) {
      s_logger.info(""String_Node_Str"",e1);
      throw new ExecutionException(e1.getMessage());
    }
catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new ExecutionException(e.getMessage());
    }
  }
 catch (  Exception e) {
    s_logger.debug(e);
    throw new ExecutionException(e.getMessage());
  }
  return answer;
}",0.9625890736342044
105453,"@Override public void processConnect(Host agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + agent.getId());
  _syncMgr.resetHostSyncState(agent.getId());
  if (forRebalance) {
    s_logger.debug(""String_Node_Str"" + this + ""String_Node_Str"");
    return;
  }
  if (forRebalance) {
    s_logger.debug(""String_Node_Str"" + this + ""String_Node_Str"");
    return;
  }
  Long clusterId=agent.getClusterId();
  long agentId=agent.getId();
  if (agent.getHypervisorType() == HypervisorType.XenServer) {
    ClusterVMMetaDataSyncCommand syncVMMetaDataCmd=new ClusterVMMetaDataSyncCommand(ClusterVMMetaDataSyncInterval.value(),clusterId);
    try {
      long seq_no=_agentMgr.send(agentId,new Commands(syncVMMetaDataCmd),this);
      s_logger.debug(""String_Node_Str"" + seq_no);
    }
 catch (    AgentUnavailableException e) {
      s_logger.fatal(""String_Node_Str"" + clusterId + ""String_Node_Str"",e);
    }
  }
}","@Override public void processConnect(Host agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + agent.getId());
  _syncMgr.resetHostSyncState(agent.getId());
  if (forRebalance) {
    s_logger.debug(""String_Node_Str"" + this + ""String_Node_Str"");
    return;
  }
  Long clusterId=agent.getClusterId();
  long agentId=agent.getId();
  if (agent.getHypervisorType() == HypervisorType.XenServer) {
    ClusterVMMetaDataSyncCommand syncVMMetaDataCmd=new ClusterVMMetaDataSyncCommand(ClusterVMMetaDataSyncInterval.value(),clusterId);
    try {
      long seq_no=_agentMgr.send(agentId,new Commands(syncVMMetaDataCmd),this);
      s_logger.debug(""String_Node_Str"" + seq_no);
    }
 catch (    AgentUnavailableException e) {
      s_logger.fatal(""String_Node_Str"" + clusterId + ""String_Node_Str"",e);
    }
  }
}",0.9486166007905138
105454,"@Override public StrategyPriority canHandle(Snapshot snapshot,SnapshotOperation op){
  if (SnapshotOperation.REVERT.equals(op)) {
    return StrategyPriority.CANT_HANDLE;
  }
  long volumeId=snapshot.getVolumeId();
  VolumeVO volumeVO=_volumeDao.findById(volumeId);
  long storagePoolId=volumeVO.getPoolId();
  DataStore dataStore=_dataStoreMgr.getDataStore(storagePoolId,DataStoreRole.Primary);
  Map<String,String> mapCapabilities=dataStore.getDriver().getCapabilities();
  String value=mapCapabilities.get(DataStoreCapabilities.STORAGE_SYSTEM_SNAPSHOT.toString());
  Boolean supportsStorageSystemSnapshots=new Boolean(value);
  if (supportsStorageSystemSnapshots) {
    return StrategyPriority.HIGHEST;
  }
  return StrategyPriority.CANT_HANDLE;
}","@Override public StrategyPriority canHandle(Snapshot snapshot,SnapshotOperation op){
  if (SnapshotOperation.REVERT.equals(op)) {
    return StrategyPriority.CANT_HANDLE;
  }
  long volumeId=snapshot.getVolumeId();
  VolumeVO volumeVO=_volumeDao.findById(volumeId);
  long storagePoolId=volumeVO.getPoolId();
  DataStore dataStore=_dataStoreMgr.getDataStore(storagePoolId,DataStoreRole.Primary);
  Map<String,String> mapCapabilities=dataStore.getDriver().getCapabilities();
  if (mapCapabilities != null) {
    String value=mapCapabilities.get(DataStoreCapabilities.STORAGE_SYSTEM_SNAPSHOT.toString());
    Boolean supportsStorageSystemSnapshots=new Boolean(value);
    if (supportsStorageSystemSnapshots) {
      return StrategyPriority.HIGHEST;
    }
  }
  return StrategyPriority.CANT_HANDLE;
}",0.9696186166774402
105455,"@Override public Answer createVolume(CreateObjectCommand cmd){
  VolumeObjectTO volume=(VolumeObjectTO)cmd.getData();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  long disksize;
  try {
    primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    disksize=volume.getSize();
    PhysicalDiskFormat format;
    if (volume.getFormat() == null) {
      format=primaryPool.getDefaultFormat();
    }
 else {
      format=PhysicalDiskFormat.valueOf(volume.getFormat().toString().toUpperCase());
    }
    vol=primaryPool.createPhysicalDisk(volume.getUuid(),format,volume.getProvisioningType(),disksize);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(vol.getName());
    newVol.setSize(volume.getSize());
    newVol.setFormat(ImageFormat.valueOf(format.toString().toUpperCase()));
    return new CreateObjectAnswer(newVol);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    return new CreateObjectAnswer(e.toString());
  }
}","@Override public Answer createVolume(CreateObjectCommand cmd){
  VolumeObjectTO volume=(VolumeObjectTO)cmd.getData();
  PrimaryDataStoreTO primaryStore=(PrimaryDataStoreTO)volume.getDataStore();
  KVMStoragePool primaryPool=null;
  KVMPhysicalDisk vol=null;
  long disksize;
  try {
    primaryPool=storagePoolMgr.getStoragePool(primaryStore.getPoolType(),primaryStore.getUuid());
    disksize=volume.getSize();
    PhysicalDiskFormat format;
    if (volume.getFormat() == null) {
      format=primaryPool.getDefaultFormat();
    }
 else {
      format=PhysicalDiskFormat.valueOf(volume.getFormat().toString().toUpperCase());
    }
    vol=primaryPool.createPhysicalDisk(volume.getUuid(),format,volume.getProvisioningType(),disksize);
    VolumeObjectTO newVol=new VolumeObjectTO();
    if (vol != null) {
      newVol.setPath(vol.getName());
    }
    newVol.setSize(volume.getSize());
    newVol.setFormat(ImageFormat.valueOf(format.toString().toUpperCase()));
    return new CreateObjectAnswer(newVol);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    return new CreateObjectAnswer(e.toString());
  }
}",0.9860924181247196
105456,"/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size,KVMStoragePool destPool,int timeout){
  s_logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ destPool.getUuid()+ ""String_Node_Str""+ destPool.getType().toString()+ ""String_Node_Str""+ size);
  KVMPhysicalDisk disk=null;
  if (destPool.getType() == StoragePoolType.RBD) {
    disk=createDiskFromTemplateOnRBD(template,name,format,provisioningType,size,destPool,timeout);
  }
 else {
    try {
      String newUuid=name;
      disk=destPool.createPhysicalDisk(newUuid,format,provisioningType,template.getVirtualSize());
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImg qemu=new QemuImg(timeout);
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),format);
        if (size > template.getVirtualSize()) {
          destFile.setSize(size);
        }
 else {
          destFile.setSize(template.getVirtualSize());
        }
        Map<String,String> options=new HashMap<String,String>();
        options.put(""String_Node_Str"",QemuImg.PreallocationType.getPreallocationType(provisioningType).toString());
switch (provisioningType) {
case THIN:
          QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.create(destFile,backingFile,options);
      break;
case SPARSE:
case FAT:
    QemuImgFile srcFile=new QemuImgFile(template.getPath(),template.getFormat());
  qemu.convert(srcFile,destFile,options);
break;
}
}
 else if (format == PhysicalDiskFormat.RAW) {
QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
if (size > template.getVirtualSize()) {
destFile.setSize(size);
}
 else {
destFile.setSize(template.getVirtualSize());
}
QemuImg qemu=new QemuImg(timeout);
Map<String,String> options=new HashMap<String,String>();
qemu.convert(sourceFile,destFile,options);
}
}
 catch (QemuImgException e) {
s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
}
}
if (disk == null) {
throw new CloudRuntimeException(""String_Node_Str"" + template.getName());
}
return disk;
}","/** 
 * This function copies a physical disk from Secondary Storage to Primary Storage or from Primary to Primary Storage The first time a template is deployed in Primary Storage it will be copied from Secondary to Primary. If it has been created on Primary Storage, it will be copied on the Primary Storage
 */
@Override public KVMPhysicalDisk createDiskFromTemplate(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size,KVMStoragePool destPool,int timeout){
  s_logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ destPool.getUuid()+ ""String_Node_Str""+ destPool.getType().toString()+ ""String_Node_Str""+ size);
  KVMPhysicalDisk disk=null;
  if (destPool.getType() == StoragePoolType.RBD) {
    disk=createDiskFromTemplateOnRBD(template,name,format,provisioningType,size,destPool,timeout);
  }
 else {
    try {
      String newUuid=name;
      disk=destPool.createPhysicalDisk(newUuid,format,provisioningType,template.getVirtualSize());
      if (disk == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + template.getName());
      }
      if (template.getFormat() == PhysicalDiskFormat.TAR) {
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (template.getFormat() == PhysicalDiskFormat.DIR) {
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath());
        Script.runSimpleBashScript(""String_Node_Str"" + template.getPath() + ""String_Node_Str""+ disk.getPath(),timeout);
      }
 else       if (format == PhysicalDiskFormat.QCOW2) {
        QemuImg qemu=new QemuImg(timeout);
        QemuImgFile destFile=new QemuImgFile(disk.getPath(),format);
        if (size > template.getVirtualSize()) {
          destFile.setSize(size);
        }
 else {
          destFile.setSize(template.getVirtualSize());
        }
        Map<String,String> options=new HashMap<String,String>();
        options.put(""String_Node_Str"",QemuImg.PreallocationType.getPreallocationType(provisioningType).toString());
switch (provisioningType) {
case THIN:
          QemuImgFile backingFile=new QemuImgFile(template.getPath(),template.getFormat());
        qemu.create(destFile,backingFile,options);
      break;
case SPARSE:
case FAT:
    QemuImgFile srcFile=new QemuImgFile(template.getPath(),template.getFormat());
  qemu.convert(srcFile,destFile,options);
break;
}
}
 else if (format == PhysicalDiskFormat.RAW) {
QemuImgFile sourceFile=new QemuImgFile(template.getPath(),template.getFormat());
QemuImgFile destFile=new QemuImgFile(disk.getPath(),PhysicalDiskFormat.RAW);
if (size > template.getVirtualSize()) {
destFile.setSize(size);
}
 else {
destFile.setSize(template.getVirtualSize());
}
QemuImg qemu=new QemuImg(timeout);
Map<String,String> options=new HashMap<String,String>();
qemu.convert(sourceFile,destFile,options);
}
}
 catch (QemuImgException e) {
s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
}
}
return disk;
}",0.9665711556829036
105457,"@Override public KVMPhysicalDisk getPhysicalDisk(String volumeUuid,KVMStoragePool pool){
  Connect conn;
  StoragePool virtPool=null;
  try {
    conn=LibvirtConnection.getConnection();
    virtPool=conn.storagePoolLookupByName(""String_Node_Str"" + volumeUuid);
  }
 catch (  LibvirtException e1) {
    throw new CloudRuntimeException(e1.toString());
  }
  LibvirtStorageVolumeDef.volFormat libvirtformat=null;
  String volPath=null;
  String volName=null;
  long volAllocation=0;
  long volCapacity=0;
  StorageVol vol=getVolume(virtPool,volumeUuid);
  try {
    if (vol == null) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.QCOW2;
      StoragePoolInfo poolinfo=virtPool.getInfo();
      volCapacity=poolinfo.available;
      LibvirtStorageVolumeDef volDef=new LibvirtStorageVolumeDef(volumeUuid,volCapacity,libvirtformat,null,null);
      s_logger.debug(volDef.toString());
      vol=virtPool.storageVolCreateXML(volDef.toString(),0);
      volPath=vol.getPath();
      volName=vol.getName();
      volAllocation=vol.getInfo().allocation;
      volCapacity=vol.getInfo().capacity;
    }
    KVMPhysicalDisk disk=new KVMPhysicalDisk(vol.getPath(),volumeUuid,pool);
    disk.setFormat(PhysicalDiskFormat.QCOW2);
    disk.setSize(vol.getInfo().allocation);
    disk.setVirtualSize(vol.getInfo().capacity);
    return disk;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}","@Override public KVMPhysicalDisk getPhysicalDisk(String volumeUuid,KVMStoragePool pool){
  Connect conn;
  StoragePool virtPool=null;
  try {
    conn=LibvirtConnection.getConnection();
    virtPool=conn.storagePoolLookupByName(""String_Node_Str"" + volumeUuid);
  }
 catch (  LibvirtException e1) {
    throw new CloudRuntimeException(e1.toString());
  }
  LibvirtStorageVolumeDef.volFormat libvirtformat=null;
  long volCapacity=0;
  StorageVol vol=getVolume(virtPool,volumeUuid);
  try {
    if (vol == null) {
      libvirtformat=LibvirtStorageVolumeDef.volFormat.QCOW2;
      StoragePoolInfo poolinfo=virtPool.getInfo();
      volCapacity=poolinfo.available;
      LibvirtStorageVolumeDef volDef=new LibvirtStorageVolumeDef(volumeUuid,volCapacity,libvirtformat,null,null);
      s_logger.debug(volDef.toString());
      vol=virtPool.storageVolCreateXML(volDef.toString(),0);
    }
    KVMPhysicalDisk disk=new KVMPhysicalDisk(vol.getPath(),volumeUuid,pool);
    disk.setFormat(PhysicalDiskFormat.QCOW2);
    disk.setSize(vol.getInfo().allocation);
    disk.setVirtualSize(vol.getInfo().capacity);
    return disk;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}",0.917995444191344
105458,"@Override public boolean connectPhysicalDisk(String volumeUuid,KVMStoragePool pool,Map<String,String> details){
  StoragePool sp=null;
  Connect conn=null;
  String targetPath=null;
  LibvirtStoragePoolDef spd=null;
  try {
    conn=LibvirtConnection.getConnection();
    targetPath=""String_Node_Str"" + volumeUuid;
    spd=new LibvirtStoragePoolDef(poolType.NETFS,volumeUuid,details.get(DiskTO.UUID),pool.getSourceHost(),details.get(DiskTO.MOUNT_POINT),targetPath);
    _storageLayer.mkdir(targetPath);
    s_logger.debug(spd.toString());
    sp=conn.storagePoolCreateXML(spd.toString(),0);
    if (sp == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeUuid);
    }
    try {
      if (sp.isActive() == 0) {
        sp.create(0);
      }
      LibvirtStoragePool storagePool=(LibvirtStoragePool)getStoragePool(pool.getUuid());
      storagePool.setPool(sp);
      return true;
    }
 catch (    LibvirtException e) {
      String error=e.toString();
      if (error.contains(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ error);
      }
 else {
        throw new CloudRuntimeException(error);
      }
    }
  }
 catch (  LibvirtException e) {
    s_logger.error(e.toString());
    if (e.toString().contains(""String_Node_Str"")) {
      s_logger.error(""String_Node_Str"" + targetPath);
      String result=Script.runSimpleBashScript(""String_Node_Str"" + targetPath);
      if (result == null) {
        s_logger.error(""String_Node_Str"" + targetPath);
        try {
          sp=conn.storagePoolCreateXML(spd.toString(),0);
          s_logger.error(""String_Node_Str"");
          return true;
        }
 catch (        LibvirtException l) {
          s_logger.error(""String_Node_Str"" + l);
        }
      }
 else {
        s_logger.error(""String_Node_Str"");
      }
    }
 else {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
      throw new CloudRuntimeException(e.toString());
    }
    return false;
  }
}","@Override public boolean connectPhysicalDisk(String volumeUuid,KVMStoragePool pool,Map<String,String> details){
  StoragePool sp=null;
  Connect conn=null;
  String targetPath=null;
  LibvirtStoragePoolDef spd=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (conn == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    targetPath=""String_Node_Str"" + volumeUuid;
    spd=new LibvirtStoragePoolDef(poolType.NETFS,volumeUuid,details.get(DiskTO.UUID),pool.getSourceHost(),details.get(DiskTO.MOUNT_POINT),targetPath);
    _storageLayer.mkdir(targetPath);
    s_logger.debug(spd.toString());
    sp=conn.storagePoolCreateXML(spd.toString(),0);
    if (sp == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeUuid);
    }
    try {
      if (sp.isActive() == 0) {
        sp.create(0);
      }
      LibvirtStoragePool storagePool=(LibvirtStoragePool)getStoragePool(pool.getUuid());
      storagePool.setPool(sp);
      return true;
    }
 catch (    LibvirtException e) {
      String error=e.toString();
      if (error.contains(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ error);
      }
 else {
        throw new CloudRuntimeException(error);
      }
    }
  }
 catch (  LibvirtException e) {
    s_logger.error(e.toString());
    if (e.toString().contains(""String_Node_Str"")) {
      s_logger.error(""String_Node_Str"" + targetPath);
      String result=Script.runSimpleBashScript(""String_Node_Str"" + targetPath);
      if (result == null) {
        s_logger.error(""String_Node_Str"" + targetPath);
        try {
          conn.storagePoolCreateXML(spd.toString(),0);
          s_logger.error(""String_Node_Str"");
          return true;
        }
 catch (        LibvirtException l) {
          s_logger.error(""String_Node_Str"" + l);
        }
      }
 else {
        s_logger.error(""String_Node_Str"");
      }
    }
 else {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      e.printStackTrace();
      throw new CloudRuntimeException(e.toString());
    }
    return false;
  }
}",0.9781617470602352
105459,"@Override @DB public Pair<Boolean,Long> validateAndAddVsm(final String vsmIp,final String vsmUser,final String vsmPassword,final long clusterId,String clusterName) throws ResourceInUseException {
  CiscoNexusVSMDeviceVO vsm=null;
  boolean vsmAdded=false;
  Long vsmId=0L;
  if (vsmIp != null && vsmUser != null && vsmPassword != null) {
    NetconfHelper netconfClient;
    try {
      netconfClient=new NetconfHelper(vsmIp,vsmUser,vsmPassword);
      netconfClient.disconnect();
    }
 catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"" + vsmUser + ""String_Node_Str""+ vsmIp;
      s_logger.error(msg);
      _clusterDao.remove(clusterId);
      throw new CloudRuntimeException(msg);
    }
    vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
    if (vsm != null) {
      List<ClusterVSMMapVO> clusterList=_clusterVSMDao.listByVSMId(vsm.getId());
      if (clusterList != null && !clusterList.isEmpty()) {
        s_logger.error(""String_Node_Str"");
        ResourceInUseException ex=new ResourceInUseException(""String_Node_Str"");
        ClusterVO cluster=_clusterDao.findById(clusterList.get(0).getClusterId());
        ex.addProxyObject(cluster.getUuid());
        _clusterDao.remove(clusterId);
        throw ex;
      }
    }
    vsm=Transaction.execute(new TransactionCallback<CiscoNexusVSMDeviceVO>(){
      @Override public CiscoNexusVSMDeviceVO doInTransaction(      TransactionStatus status){
        CiscoNexusVSMDeviceVO vsm=null;
        if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
          vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
          vsm=_vsmDao.persist(vsm);
        }
        vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
        if (vsm != null) {
          ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
          _clusterVSMDao.persist(connectorObj);
        }
        return vsm;
      }
    }
);
  }
 else {
    String msg;
    msg=""String_Node_Str"" + Config.VmwareUseNexusVSwitch.toString() + ""String_Node_Str"";
    if (vsmIp == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmUser == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmPassword == null) {
      if (vsmUser != null) {
        msg+=""String_Node_Str"" + vsmUser + ""String_Node_Str"";
      }
 else {
        msg+=""String_Node_Str"";
      }
    }
    s_logger.error(msg);
    _clusterDao.remove(clusterId);
    throw new CloudRuntimeException(msg);
  }
  if (vsm != null) {
    vsmAdded=true;
    vsmId=vsm.getId();
  }
  return new Pair<Boolean,Long>(vsmAdded,vsmId);
}","@Override @DB public Pair<Boolean,Long> validateAndAddVsm(final String vsmIp,final String vsmUser,final String vsmPassword,final long clusterId,String clusterName) throws ResourceInUseException {
  CiscoNexusVSMDeviceVO vsm=null;
  boolean vsmAdded=false;
  Long vsmId=0L;
  if (vsmIp != null && vsmUser != null && vsmPassword != null) {
    NetconfHelper netconfClient;
    try {
      netconfClient=new NetconfHelper(vsmIp,vsmUser,vsmPassword);
      netconfClient.disconnect();
    }
 catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"" + vsmUser + ""String_Node_Str""+ vsmIp;
      s_logger.error(msg);
      _clusterDao.remove(clusterId);
      throw new CloudRuntimeException(msg);
    }
    vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
    if (vsm != null) {
      List<ClusterVSMMapVO> clusterList=_clusterVSMDao.listByVSMId(vsm.getId());
      if (clusterList != null && !clusterList.isEmpty()) {
        s_logger.error(""String_Node_Str"");
        ResourceInUseException ex=new ResourceInUseException(""String_Node_Str"");
        ClusterVO cluster=_clusterDao.findById(clusterList.get(0).getClusterId());
        ex.addProxyObject(cluster.getUuid());
        _clusterDao.remove(clusterId);
        throw ex;
      }
    }
    vsm=Transaction.execute(new TransactionCallback<CiscoNexusVSMDeviceVO>(){
      @Override public CiscoNexusVSMDeviceVO doInTransaction(      TransactionStatus status){
        CiscoNexusVSMDeviceVO vsm=null;
        if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
          vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
          _vsmDao.persist(vsm);
        }
        vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
        if (vsm != null) {
          ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
          _clusterVSMDao.persist(connectorObj);
        }
        return vsm;
      }
    }
);
  }
 else {
    String msg;
    msg=""String_Node_Str"" + Config.VmwareUseNexusVSwitch.toString() + ""String_Node_Str"";
    if (vsmIp == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmUser == null) {
      msg+=""String_Node_Str"";
    }
    if (vsmPassword == null) {
      if (vsmUser != null) {
        msg+=""String_Node_Str"" + vsmUser + ""String_Node_Str"";
      }
 else {
        msg+=""String_Node_Str"";
      }
    }
    s_logger.error(msg);
    _clusterDao.remove(clusterId);
    throw new CloudRuntimeException(msg);
  }
  if (vsm != null) {
    vsmAdded=true;
    vsmId=vsm.getId();
  }
  return new Pair<Boolean,Long>(vsmAdded,vsmId);
}",0.9992066640222134
105460,"@Override public CiscoNexusVSMDeviceVO doInTransaction(TransactionStatus status){
  CiscoNexusVSMDeviceVO vsm=null;
  if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
    vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
    vsm=_vsmDao.persist(vsm);
  }
  vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
  if (vsm != null) {
    ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
    _clusterVSMDao.persist(connectorObj);
  }
  return vsm;
}","@Override public CiscoNexusVSMDeviceVO doInTransaction(TransactionStatus status){
  CiscoNexusVSMDeviceVO vsm=null;
  if (_vsmDao.getVSMbyIpaddress(vsmIp) == null) {
    vsm=new CiscoNexusVSMDeviceVO(vsmIp,vsmUser,vsmPassword);
    _vsmDao.persist(vsm);
  }
  vsm=_vsmDao.getVSMbyIpaddress(vsmIp);
  if (vsm != null) {
    ClusterVSMMapVO connectorObj=new ClusterVSMMapVO(clusterId,vsm.getId());
    _clusterVSMDao.persist(connectorObj);
  }
  return vsm;
}",0.9956427015250544
105461,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_CREATE,eventDescription=""String_Node_Str"",async=true) public Snapshot createSnapshot(Long volumeId,Long policyId,Long snapshotId,Account snapshotOwner){
  VolumeInfo volume=volFactory.getVolume(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean backedUp=false;
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,true,volume);
  SnapshotInfo snapshot=snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Primary);
  try {
    postCreateSnapshot(volumeId,snapshot.getId(),policyId);
    SnapshotVO freshSnapshot=_snapshotDao.findById(snapshot.getId());
    if ((freshSnapshot != null) && backedUp) {
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize(),snapshot.getClass().getName(),snapshot.getUuid());
    }
    _resourceLimitMgr.incrementResourceCount(snapshotOwner.getId(),ResourceType.snapshot);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return snapshot;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_CREATE,eventDescription=""String_Node_Str"",async=true) public Snapshot createSnapshot(Long volumeId,Long policyId,Long snapshotId,Account snapshotOwner){
  VolumeInfo volume=volFactory.getVolume(volumeId);
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(CallContext.current().getCallingAccount(),null,true,volume);
  SnapshotInfo snapshot=snapshotFactory.getSnapshot(snapshotId,DataStoreRole.Primary);
  if (snapshot != null) {
    s_logger.debug(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    postCreateSnapshot(volumeId,snapshot.getId(),policyId);
    SnapshotVO freshSnapshot=_snapshotDao.findById(snapshot.getId());
    if (freshSnapshot != null) {
      UsageEventUtils.publishUsageEvent(EventTypes.EVENT_SNAPSHOT_CREATE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,volume.getSize(),snapshot.getClass().getName(),snapshot.getUuid());
    }
    _resourceLimitMgr.incrementResourceCount(snapshotOwner.getId(),ResourceType.snapshot);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return snapshot;
}",0.9405405405405406
105462,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachineTemplate createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  Long userId=CallContext.current().getCallingUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  final long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  VMTemplateVO privateTemplate=null;
  final Long accountId=CallContext.current().getCallingAccountId();
  SnapshotVO snapshot=null;
  VolumeVO volume=null;
  try {
    TemplateInfo tmplInfo=_tmplFactory.getTemplate(templateId,DataStoreRole.Image);
    long zoneId=0;
    if (snapshotId != null) {
      snapshot=_snapshotDao.findById(snapshotId);
      zoneId=snapshot.getDataCenterId();
    }
 else     if (volumeId != null) {
      volume=_volumeDao.findById(volumeId);
      zoneId=volume.getDataCenterId();
    }
    DataStore store=_dataStoreMgr.getImageStore(zoneId);
    if (store == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
    }
    AsyncCallFuture<TemplateApiResult> future=null;
    if (snapshotId != null) {
      DataStoreRole dataStoreRole=getDataStoreRole(snapshot);
      SnapshotInfo snapInfo=_snapshotFactory.getSnapshot(snapshotId,dataStoreRole);
      if (dataStoreRole == DataStoreRole.Image) {
        DataStore snapStore=snapInfo.getDataStore();
        if (snapStore != null) {
          store=snapStore;
        }
      }
      future=_tmpltSvr.createTemplateFromSnapshotAsync(snapInfo,tmplInfo,store);
    }
 else     if (volumeId != null) {
      VolumeInfo volInfo=_volFactory.getVolume(volumeId);
      future=_tmpltSvr.createTemplateFromVolumeAsync(volInfo,tmplInfo,store);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    CommandResult result=null;
    try {
      result=future.get();
      if (result.isFailed()) {
        privateTemplate=null;
        s_logger.debug(""String_Node_Str"" + result.getResult());
        throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
      }
      if (_dataStoreMgr.isRegionStore(store)) {
        _tmpltSvr.associateTemplateToZone(templateId,null);
      }
 else {
        VMTemplateZoneVO templateZone=new VMTemplateZoneVO(zoneId,templateId,new Date());
        _tmpltZoneDao.persist(templateZone);
      }
      privateTemplate=_tmpltDao.findById(templateId);
      TemplateDataStoreVO srcTmpltStore=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_TEMPLATE_CREATE,privateTemplate.getAccountId(),zoneId,privateTemplate.getId(),privateTemplate.getName(),null,privateTemplate.getSourceTemplateId(),srcTmpltStore.getPhysicalSize(),privateTemplate.getSize());
      _usageEventDao.persist(usageEvent);
    }
 catch (    InterruptedException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  finally {
    if (privateTemplate == null) {
      final VolumeVO volumeFinal=volume;
      final SnapshotVO snapshotFinal=snapshot;
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _tmplStoreDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltZoneDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltDao.expunge(templateId);
          if (accountId != null) {
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.template);
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.secondary_storage,new Long(volumeFinal != null ? volumeFinal.getSize() : snapshotFinal.getSize()));
          }
        }
      }
);
    }
  }
  if (privateTemplate != null) {
    return privateTemplate;
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachineTemplate createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  final long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  VMTemplateVO privateTemplate=null;
  final Long accountId=CallContext.current().getCallingAccountId();
  SnapshotVO snapshot=null;
  VolumeVO volume=null;
  try {
    TemplateInfo tmplInfo=_tmplFactory.getTemplate(templateId,DataStoreRole.Image);
    long zoneId=0;
    if (snapshotId != null) {
      snapshot=_snapshotDao.findById(snapshotId);
      zoneId=snapshot.getDataCenterId();
    }
 else     if (volumeId != null) {
      volume=_volumeDao.findById(volumeId);
      zoneId=volume.getDataCenterId();
    }
    DataStore store=_dataStoreMgr.getImageStore(zoneId);
    if (store == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
    }
    AsyncCallFuture<TemplateApiResult> future=null;
    if (snapshotId != null) {
      DataStoreRole dataStoreRole=getDataStoreRole(snapshot);
      SnapshotInfo snapInfo=_snapshotFactory.getSnapshot(snapshotId,dataStoreRole);
      if (dataStoreRole == DataStoreRole.Image) {
        DataStore snapStore=snapInfo.getDataStore();
        if (snapStore != null) {
          store=snapStore;
        }
      }
      future=_tmpltSvr.createTemplateFromSnapshotAsync(snapInfo,tmplInfo,store);
    }
 else     if (volumeId != null) {
      VolumeInfo volInfo=_volFactory.getVolume(volumeId);
      future=_tmpltSvr.createTemplateFromVolumeAsync(volInfo,tmplInfo,store);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    CommandResult result=null;
    try {
      result=future.get();
      if (result.isFailed()) {
        privateTemplate=null;
        s_logger.debug(""String_Node_Str"" + result.getResult());
        throw new CloudRuntimeException(""String_Node_Str"" + result.getResult());
      }
      if (_dataStoreMgr.isRegionStore(store)) {
        _tmpltSvr.associateTemplateToZone(templateId,null);
      }
 else {
        VMTemplateZoneVO templateZone=new VMTemplateZoneVO(zoneId,templateId,new Date());
        _tmpltZoneDao.persist(templateZone);
      }
      privateTemplate=_tmpltDao.findById(templateId);
      TemplateDataStoreVO srcTmpltStore=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_TEMPLATE_CREATE,privateTemplate.getAccountId(),zoneId,privateTemplate.getId(),privateTemplate.getName(),null,privateTemplate.getSourceTemplateId(),srcTmpltStore.getPhysicalSize(),privateTemplate.getSize());
      _usageEventDao.persist(usageEvent);
    }
 catch (    InterruptedException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    ExecutionException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  finally {
    if (privateTemplate == null) {
      final VolumeVO volumeFinal=volume;
      final SnapshotVO snapshotFinal=snapshot;
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          _tmplStoreDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltZoneDao.deletePrimaryRecordsForTemplate(templateId);
          _tmpltDao.expunge(templateId);
          if (accountId != null) {
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.template);
            _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.secondary_storage,new Long(volumeFinal != null ? volumeFinal.getSize() : snapshotFinal.getSize()));
          }
        }
      }
);
    }
  }
  if (privateTemplate != null) {
    return privateTemplate;
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9863114153018822
105463,"@Override public boolean upgradeVirtualMachine(Long vmId,Long newServiceOfferingId,Map<String,String> customParameters) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  VMInstanceVO vmInstance=_vmInstanceDao.findById(vmId);
  if (vmInstance != null) {
    List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
    if (vmSnapshots.size() > 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (vmInstance.getState().equals(State.Stopped)) {
    upgradeStoppedVirtualMachine(vmId,newServiceOfferingId,customParameters);
    return true;
  }
  if (vmInstance.getState().equals(State.Running)) {
    return upgradeRunningVirtualMachine(vmId,newServiceOfferingId,customParameters);
  }
  return false;
}","@Override public boolean upgradeVirtualMachine(Long vmId,Long newServiceOfferingId,Map<String,String> customParameters) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  VMInstanceVO vmInstance=_vmInstanceDao.findById(vmId);
  if (vmInstance != null) {
    List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
    if (vmSnapshots.size() > 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (vmInstance.getState().equals(State.Stopped)) {
      upgradeStoppedVirtualMachine(vmId,newServiceOfferingId,customParameters);
      return true;
    }
    if (vmInstance.getState().equals(State.Running)) {
      return upgradeRunningVirtualMachine(vmId,newServiceOfferingId,customParameters);
    }
  }
  return false;
}",0.8106151990349819
105464,"/** 
 * Build URL for api call using region end_point Parameters are sorted and signed using secret_key
 * @param apiParams
 * @param region
 * @return
 */
private static String buildUrl(String apiParams,Region region){
  String apiKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  if (apiKey == null || secretKey == null) {
    return region.getEndPoint() + ""String_Node_Str"" + apiParams;
  }
  String encodedApiKey;
  try {
    encodedApiKey=URLEncoder.encode(apiKey,""String_Node_Str"");
    List<String> sortedParams=new ArrayList<String>();
    sortedParams.add(""String_Node_Str"" + encodedApiKey.toLowerCase());
    StringTokenizer st=new StringTokenizer(apiParams,""String_Node_Str"");
    String url=null;
    boolean first=true;
    while (st.hasMoreTokens()) {
      String paramValue=st.nextToken();
      String param=paramValue.substring(0,paramValue.indexOf(""String_Node_Str""));
      String value=paramValue.substring(paramValue.indexOf(""String_Node_Str"") + 1,paramValue.length());
      if (first) {
        url=param + ""String_Node_Str"" + value;
        first=false;
      }
 else {
        url=url + ""String_Node_Str"" + param+ ""String_Node_Str""+ value;
      }
      sortedParams.add(param.toLowerCase() + ""String_Node_Str"" + value.toLowerCase());
    }
    Collections.sort(sortedParams);
    String sortedUrl=null;
    first=true;
    for (    String param : sortedParams) {
      if (first) {
        sortedUrl=param;
        first=false;
      }
 else {
        sortedUrl=sortedUrl + ""String_Node_Str"" + param;
      }
    }
    String encodedSignature=signRequest(sortedUrl,secretKey);
    String finalUrl=region.getEndPoint() + ""String_Node_Str"" + apiParams+ ""String_Node_Str""+ apiKey+ ""String_Node_Str""+ encodedSignature;
    return finalUrl;
  }
 catch (  UnsupportedEncodingException e) {
    s_logger.error(e.getMessage());
    return null;
  }
}","/** 
 * Build URL for api call using region end_point Parameters are sorted and signed using secret_key
 * @param apiParams
 * @param region
 * @return
 */
private static String buildUrl(String apiParams,Region region){
  String apiKey=""String_Node_Str"";
  String secretKey=""String_Node_Str"";
  String encodedApiKey;
  try {
    encodedApiKey=URLEncoder.encode(apiKey,""String_Node_Str"");
    List<String> sortedParams=new ArrayList<String>();
    sortedParams.add(""String_Node_Str"" + encodedApiKey.toLowerCase());
    StringTokenizer st=new StringTokenizer(apiParams,""String_Node_Str"");
    String url=null;
    boolean first=true;
    while (st.hasMoreTokens()) {
      String paramValue=st.nextToken();
      String param=paramValue.substring(0,paramValue.indexOf(""String_Node_Str""));
      String value=paramValue.substring(paramValue.indexOf(""String_Node_Str"") + 1,paramValue.length());
      if (first) {
        url=param + ""String_Node_Str"" + value;
        first=false;
      }
 else {
        url=url + ""String_Node_Str"" + param+ ""String_Node_Str""+ value;
      }
      sortedParams.add(param.toLowerCase() + ""String_Node_Str"" + value.toLowerCase());
    }
    Collections.sort(sortedParams);
    String sortedUrl=null;
    first=true;
    for (    String param : sortedParams) {
      if (first) {
        sortedUrl=param;
        first=false;
      }
 else {
        sortedUrl=sortedUrl + ""String_Node_Str"" + param;
      }
    }
    String encodedSignature=signRequest(sortedUrl,secretKey);
    String finalUrl=region.getEndPoint() + ""String_Node_Str"" + apiParams+ ""String_Node_Str""+ apiKey+ ""String_Node_Str""+ encodedSignature;
    return finalUrl;
  }
 catch (  UnsupportedEncodingException e) {
    s_logger.error(e.getMessage());
    return null;
  }
}",0.9687671232876712
105465,"@Override public boolean destroySecStorageVm(long vmId){
  SecondaryStorageVmVO ssvm=_secStorageVmDao.findById(vmId);
  try {
    _itMgr.expunge(ssvm.getUuid());
    _secStorageVmDao.remove(ssvm.getId());
    HostVO host=_hostDao.findByTypeNameAndZoneId(ssvm.getDataCenterId(),ssvm.getHostName(),Host.Type.SecondaryStorageVM);
    if (host != null) {
      s_logger.debug(""String_Node_Str"" + vmId);
      _hostDao.remove(host.getId());
    }
    _tmplStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
    _volumeStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ssvm,e);
    return false;
  }
}","@Override public boolean destroySecStorageVm(long vmId){
  SecondaryStorageVmVO ssvm=_secStorageVmDao.findById(vmId);
  try {
    _itMgr.expunge(ssvm.getUuid());
    _secStorageVmDao.remove(ssvm.getId());
    HostVO host=_hostDao.findByTypeNameAndZoneId(ssvm.getDataCenterId(),ssvm.getHostName(),Host.Type.SecondaryStorageVM);
    if (host != null) {
      s_logger.debug(""String_Node_Str"" + vmId);
      _hostDao.remove(host.getId());
      _tmplStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
      _volumeStoreDao.expireDnldUrlsForZone(host.getDataCenterId());
      return true;
    }
    return false;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ssvm,e);
    return false;
  }
}",0.9639389736477116
105466,"static Set<Class<?>> getFromJARFile(String jar,String packageName) throws IOException, ClassNotFoundException {
  Set<Class<?>> classes=new HashSet<Class<?>>();
  JarInputStream jarFile=new JarInputStream(new FileInputStream(jar));
  JarEntry jarEntry;
  do {
    jarEntry=jarFile.getNextJarEntry();
    if (jarEntry != null) {
      String className=jarEntry.getName();
      if (className.endsWith(""String_Node_Str"")) {
        className=stripFilenameExtension(className);
        if (className.startsWith(packageName)) {
          try {
            Class<?> clz=Class.forName(className.replace('/','.'));
            classes.add(clz);
          }
 catch (          ClassNotFoundException e) {
          }
catch (          NoClassDefFoundError e) {
          }
        }
      }
      IOUtils.closeQuietly(jarFile);
    }
  }
 while (jarEntry != null);
  IOUtils.closeQuietly(jarFile);
  return classes;
}","static Set<Class<?>> getFromJARFile(String jar,String packageName) throws IOException, ClassNotFoundException {
  Set<Class<?>> classes=new HashSet<Class<?>>();
  JarInputStream jarFile=new JarInputStream(new FileInputStream(jar));
  JarEntry jarEntry;
  do {
    jarEntry=jarFile.getNextJarEntry();
    if (jarEntry != null) {
      String className=jarEntry.getName();
      if (className.endsWith(""String_Node_Str"")) {
        className=stripFilenameExtension(className);
        if (className.startsWith(packageName)) {
          try {
            Class<?> clz=Class.forName(className.replace('/','.'));
            classes.add(clz);
          }
 catch (          ClassNotFoundException|NoClassDefFoundError e) {
            s_logger.warn(""String_Node_Str"",e);
          }
        }
      }
    }
  }
 while (jarEntry != null);
  IOUtils.closeQuietly(jarFile);
  return classes;
}",0.8319374651032942
105467,"protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  if (vmTO.getOs().contains(""String_Node_Str"") && hostOsVersion != null && ((hostOsVersion.first() == 6 && hostOsVersion.second() >= 5) || (hostOsVersion.first() >= 7))) {
    LibvirtVMDef.HyperVEnlightenmentFeatureDef hyv=new LibvirtVMDef.HyperVEnlightenmentFeatureDef();
    hyv.setRelaxed(true);
    features.addHyperVFeature(hyv);
  }
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}","protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}",0.9546609602781864
105468,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}",0.9993501746405652
105469,"protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  if (vmTO.getOs().contains(""String_Node_Str"") && hostOsVersion != null && ((hostOsVersion.first() == 6 && hostOsVersion.second() >= 5) || (hostOsVersion.first() >= 7))) {
    LibvirtVMDef.HyperVEnlightenmentFeatureDef hyv=new LibvirtVMDef.HyperVEnlightenmentFeatureDef();
    hyv.setRelaxed(true);
    features.addHyperVFeature(hyv);
  }
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}","protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}",0.9546609602781864
105470,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}",0.9993501746405652
105471,"protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}","protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  if (vmTO.getOs().contains(""String_Node_Str"") && hostOsVersion != null && ((hostOsVersion.first() == 6 && hostOsVersion.second() >= 5) || (hostOsVersion.first() >= 7))) {
    LibvirtVMDef.HyperVEnlightenmentFeatureDef hyv=new LibvirtVMDef.HyperVEnlightenmentFeatureDef();
    hyv.setRelaxed(true);
    features.addHyperVFeature(hyv);
  }
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}",0.9546609602781864
105472,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}",0.9993498577813896
105473,"protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}","protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  if (vmTO.getOs().contains(""String_Node_Str"") && hostOsVersion != null && ((hostOsVersion.first() == 6 && hostOsVersion.second() >= 5) || (hostOsVersion.first() >= 7))) {
    LibvirtVMDef.HyperVEnlightenmentFeatureDef hyv=new LibvirtVMDef.HyperVEnlightenmentFeatureDef();
    hyv.setRelaxed(true);
    features.addHyperVFeature(hyv);
  }
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}",0.9546609602781864
105474,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}",0.9993501746405652
105475,"protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  if (vmTO.getOs().contains(""String_Node_Str"") && hostOsVersion != null && ((hostOsVersion.first() == 6 && hostOsVersion.second() >= 5) || (hostOsVersion.first() >= 7))) {
    LibvirtVMDef.HyperVEnlightenmentFeatureDef hyv=new LibvirtVMDef.HyperVEnlightenmentFeatureDef();
    hyv.setRelaxed(true);
    features.addHyperVFeature(hyv);
  }
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}","protected LibvirtVMDef createVMFromSpec(VirtualMachineTO vmTO){
  LibvirtVMDef vm=new LibvirtVMDef();
  vm.setDomainName(vmTO.getName());
  String uuid=vmTO.getUuid();
  uuid=getUuid(uuid);
  vm.setDomUUID(uuid);
  vm.setDomDescription(vmTO.getOs());
  vm.setPlatformEmulator(vmTO.getPlatformEmulator());
  GuestDef guest=new GuestDef();
  if (HypervisorType.LXC == _hypervisorType && VirtualMachine.Type.User == vmTO.getType()) {
    guest.setGuestType(GuestDef.guestType.LXC);
    vm.setHvsType(HypervisorType.LXC.toString().toLowerCase());
  }
 else {
    guest.setGuestType(GuestDef.guestType.KVM);
    vm.setHvsType(HypervisorType.KVM.toString().toLowerCase());
    vm.setLibvirtVersion(_hypervisorLibvirtVersion);
    vm.setQemuVersion(_hypervisorQemuVersion);
  }
  guest.setGuestArch(vmTO.getArch());
  guest.setMachineType(""String_Node_Str"");
  guest.setBootOrder(GuestDef.bootOrder.CDROM);
  guest.setBootOrder(GuestDef.bootOrder.HARDISK);
  vm.addComp(guest);
  GuestResourceDef grd=new GuestResourceDef();
  if (vmTO.getMinRam() != vmTO.getMaxRam() && !_noMemBalloon) {
    grd.setMemBalloning(true);
    grd.setCurrentMem(vmTO.getMinRam() / 1024);
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
 else {
    grd.setMemorySize(vmTO.getMaxRam() / 1024);
  }
  int vcpus=vmTO.getCpus();
  grd.setVcpuNum(vcpus);
  vm.addComp(grd);
  CpuModeDef cmd=new CpuModeDef();
  cmd.setMode(_guestCpuMode);
  cmd.setModel(_guestCpuModel);
  if (vcpus % 6 == 0) {
    int sockets=vcpus / 6;
    cmd.setTopology(6,sockets);
  }
 else   if (vcpus % 4 == 0) {
    int sockets=vcpus / 4;
    cmd.setTopology(4,sockets);
  }
  vm.addComp(cmd);
  if (_hypervisorLibvirtVersion >= 9000) {
    CpuTuneDef ctd=new CpuTuneDef();
    if (vmTO.getMinSpeed() != null) {
      ctd.setShares(vmTO.getCpus() * vmTO.getMinSpeed());
    }
 else {
      ctd.setShares(vmTO.getCpus() * vmTO.getSpeed());
    }
    vm.addComp(ctd);
  }
  FeaturesDef features=new FeaturesDef();
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  features.addFeatures(""String_Node_Str"");
  vm.addComp(features);
  TermPolicy term=new TermPolicy();
  term.setCrashPolicy(""String_Node_Str"");
  term.setPowerOffPolicy(""String_Node_Str"");
  term.setRebootPolicy(""String_Node_Str"");
  vm.addComp(term);
  ClockDef clock=new ClockDef();
  if (vmTO.getOs().startsWith(""String_Node_Str"")) {
    clock.setClockOffset(ClockDef.ClockOffset.LOCALTIME);
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null);
  }
 else   if (vmTO.getType() != VirtualMachine.Type.User || isGuestPVEnabled(vmTO.getOs())) {
    clock.setTimer(""String_Node_Str"",""String_Node_Str"",null,_noKvmClock);
  }
  vm.addComp(clock);
  DevicesDef devices=new DevicesDef();
  devices.setEmulatorPath(_hypervisorPath);
  devices.setGuestType(guest.getGuestType());
  SerialDef serial=new SerialDef(""String_Node_Str"",null,(short)0);
  devices.addDevice(serial);
  if (vmTO.getType() != VirtualMachine.Type.User) {
    VirtioSerialDef vserial=new VirtioSerialDef(vmTO.getName(),null);
    devices.addDevice(vserial);
  }
  VideoDef videoCard=new VideoDef(_videoHw,_videoRam);
  devices.addDevice(videoCard);
  ConsoleDef console=new ConsoleDef(""String_Node_Str"",null,null,(short)0);
  devices.addDevice(console);
  String passwd=vmTO.getVncPassword();
  GraphicDef grap=new GraphicDef(""String_Node_Str"",(short)0,true,vmTO.getVncAddr(),passwd,null);
  devices.addDevice(grap);
  InputDef input=new InputDef(""String_Node_Str"",""String_Node_Str"");
  devices.addDevice(input);
  vm.addComp(devices);
  return vm;
}",0.9546609602781864
105476,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
getOsVersion();
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}",0.9993498577813896
105477,"protected void migrate(VMInstanceVO vm,long srcHostId,DeployDestination dest) throws ResourceUnavailableException, ConcurrentOperationException {
  s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest);
  long dstHostId=dest.getHost().getId();
  Host fromHost=_hostDao.findById(srcHostId);
  if (fromHost == null) {
    s_logger.info(""String_Node_Str"" + srcHostId);
    throw new CloudRuntimeException(""String_Node_Str"" + srcHostId);
  }
  if (fromHost.getClusterId().longValue() != dest.getCluster().getId()) {
    List<VolumeVO> volumes=_volsDao.findCreatedByInstance(vm.getId());
    for (    VolumeVO volume : volumes) {
      if (!(_storagePoolDao.findById(volume.getPoolId())).getScope().equals(ScopeType.ZONE)) {
        s_logger.info(""String_Node_Str"" + dest.getHost().getId());
        throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost().getId());
      }
    }
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState().toString());
  }
  AlertManager.AlertType alertType=AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;
  if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;
  }
 else   if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;
  }
  VirtualMachineProfile vmSrc=new VirtualMachineProfileImpl(vm);
  for (  NicProfile nic : _networkMgr.getNicProfiles(vm)) {
    vmSrc.addNic(nic);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm,null,_offeringDao.findById(vm.getId(),vm.getServiceOfferingId()),null,null);
  _networkMgr.prepareNicForMigration(profile,dest);
  volumeMgr.prepareForMigration(profile,dest);
  VirtualMachineTO to=toVmTO(profile);
  PrepareForMigrationCommand pfmc=new PrepareForMigrationCommand(to);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Migrating,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(dstHostId);
  work=_workDao.persist(work);
  Answer pfma=null;
  try {
    pfma=_agentMgr.send(dstHostId,pfmc);
    if (pfma == null || !pfma.getResult()) {
      String msg=""String_Node_Str"" + pfma.getDetails();
      pfma=null;
      throw new AgentUnavailableException(msg,dstHostId);
    }
  }
 catch (  OperationTimedoutException e1) {
    throw new AgentUnavailableException(""String_Node_Str"",dstHostId);
  }
 finally {
    if (pfma == null) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
  }
  vm.setLastHostId(srcHostId);
  try {
    if (vm == null || vm.getHostId() == null || vm.getHostId() != srcHostId || !changeState(vm,Event.MigrationRequested,dstHostId,work,Step.Migrating)) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      s_logger.info(""String_Node_Str"" + vm);
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e1) {
    _networkMgr.rollbackNicForMigration(vmSrc,profile);
    s_logger.info(""String_Node_Str"" + e1.getMessage());
    throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
  }
  boolean migrated=false;
  try {
    boolean isWindows=_guestOsCategoryDao.findById(_guestOsDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(""String_Node_Str"");
    MigrateCommand mc=new MigrateCommand(vm.getInstanceName(),dest.getHost().getPrivateIpAddress(),isWindows,to,getExecuteInSequence(vm.getHypervisorType()));
    mc.setHostGuid(dest.getHost().getGuid());
    try {
      Answer ma=_agentMgr.send(vm.getLastHostId(),mc);
      if (ma == null || !ma.getResult()) {
        throw new CloudRuntimeException(""String_Node_Str"" + ma.getDetails());
      }
    }
 catch (    OperationTimedoutException e) {
      if (e.isActive()) {
        s_logger.warn(""String_Node_Str"" + vm);
        _haMgr.scheduleRestart(vm,true);
      }
      throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
    }
    try {
      if (!changeState(vm,VirtualMachine.Event.OperationSucceeded,dstHostId,work,Step.Started)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
    }
 catch (    NoTransitionException e1) {
      throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
    }
    try {
      if (!checkVmOnHost(vm,dstHostId)) {
        s_logger.error(""String_Node_Str"" + vm);
        try {
          _agentMgr.send(srcHostId,new Commands(cleanup(vm)),null);
        }
 catch (        AgentUnavailableException e) {
          s_logger.error(""String_Node_Str"" + srcHostId);
        }
        cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.AgentReportStopped,true);
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
    }
 catch (    OperationTimedoutException e) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ dstHostId,e);
    }
    migrated=true;
  }
  finally {
    if (!migrated) {
      s_logger.info(""String_Node_Str"" + vm);
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      _alertMgr.sendAlert(alertType,fromHost.getDataCenterId(),fromHost.getPodId(),""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ fromHost.getName()+ ""String_Node_Str""+ dest.getDataCenter().getName()+ ""String_Node_Str""+ dest.getPod().getName(),""String_Node_Str"");
      try {
        _agentMgr.send(dstHostId,new Commands(cleanup(vm)),null);
      }
 catch (      AgentUnavailableException ae) {
        s_logger.info(""String_Node_Str"");
      }
      try {
        stateTransitTo(vm,Event.OperationFailed,srcHostId);
      }
 catch (      NoTransitionException e) {
        s_logger.warn(e.getMessage());
      }
    }
 else {
      _networkMgr.commitNicForMigration(vmSrc,profile);
    }
    work.setStep(Step.Done);
    _workDao.update(work.getId(),work);
  }
}","protected void migrate(VMInstanceVO vm,long srcHostId,DeployDestination dest) throws ResourceUnavailableException, ConcurrentOperationException {
  s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest);
  long dstHostId=dest.getHost().getId();
  Host fromHost=_hostDao.findById(srcHostId);
  if (fromHost == null) {
    s_logger.info(""String_Node_Str"" + srcHostId);
    throw new CloudRuntimeException(""String_Node_Str"" + srcHostId);
  }
  if (fromHost.getClusterId().longValue() != dest.getCluster().getId()) {
    List<VolumeVO> volumes=_volsDao.findCreatedByInstance(vm.getId());
    for (    VolumeVO volume : volumes) {
      if (!(_storagePoolDao.findById(volume.getPoolId())).getScope().equals(ScopeType.ZONE)) {
        s_logger.info(""String_Node_Str"" + dest.getHost().getId());
        throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost().getId());
      }
    }
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState().toString());
  }
  AlertManager.AlertType alertType=AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;
  if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;
  }
 else   if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;
  }
  VirtualMachineProfile vmSrc=new VirtualMachineProfileImpl(vm);
  for (  NicProfile nic : _networkMgr.getNicProfiles(vm)) {
    vmSrc.addNic(nic);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm,null,_offeringDao.findById(vm.getId(),vm.getServiceOfferingId()),null,null);
  _networkMgr.prepareNicForMigration(profile,dest);
  volumeMgr.prepareForMigration(profile,dest);
  VirtualMachineTO to=toVmTO(profile);
  PrepareForMigrationCommand pfmc=new PrepareForMigrationCommand(to);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Migrating,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(dstHostId);
  work=_workDao.persist(work);
  Answer pfma=null;
  try {
    pfma=_agentMgr.send(dstHostId,pfmc);
    if (pfma == null || !pfma.getResult()) {
      String details=(pfma != null) ? pfma.getDetails() : ""String_Node_Str"";
      String msg=""String_Node_Str"" + details;
      pfma=null;
      throw new AgentUnavailableException(msg,dstHostId);
    }
  }
 catch (  OperationTimedoutException e1) {
    throw new AgentUnavailableException(""String_Node_Str"",dstHostId);
  }
 finally {
    if (pfma == null) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
  }
  vm.setLastHostId(srcHostId);
  try {
    if (vm == null || vm.getHostId() == null || vm.getHostId() != srcHostId || !changeState(vm,Event.MigrationRequested,dstHostId,work,Step.Migrating)) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      s_logger.info(""String_Node_Str"" + vm);
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e1) {
    _networkMgr.rollbackNicForMigration(vmSrc,profile);
    s_logger.info(""String_Node_Str"" + e1.getMessage());
    throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
  }
  boolean migrated=false;
  try {
    boolean isWindows=_guestOsCategoryDao.findById(_guestOsDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(""String_Node_Str"");
    MigrateCommand mc=new MigrateCommand(vm.getInstanceName(),dest.getHost().getPrivateIpAddress(),isWindows,to,getExecuteInSequence(vm.getHypervisorType()));
    mc.setHostGuid(dest.getHost().getGuid());
    try {
      Answer ma=_agentMgr.send(vm.getLastHostId(),mc);
      if (ma == null || !ma.getResult()) {
        String details=(ma != null) ? ma.getDetails() : ""String_Node_Str"";
        throw new CloudRuntimeException(""String_Node_Str"" + details);
      }
    }
 catch (    OperationTimedoutException e) {
      if (e.isActive()) {
        s_logger.warn(""String_Node_Str"" + vm);
        _haMgr.scheduleRestart(vm,true);
      }
      throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
    }
    try {
      if (!changeState(vm,VirtualMachine.Event.OperationSucceeded,dstHostId,work,Step.Started)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
    }
 catch (    NoTransitionException e1) {
      throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
    }
    try {
      if (!checkVmOnHost(vm,dstHostId)) {
        s_logger.error(""String_Node_Str"" + vm);
        try {
          _agentMgr.send(srcHostId,new Commands(cleanup(vm)),null);
        }
 catch (        AgentUnavailableException e) {
          s_logger.error(""String_Node_Str"" + srcHostId);
        }
        cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.AgentReportStopped,true);
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
    }
 catch (    OperationTimedoutException e) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ dstHostId,e);
    }
    migrated=true;
  }
  finally {
    if (!migrated) {
      s_logger.info(""String_Node_Str"" + vm);
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      _alertMgr.sendAlert(alertType,fromHost.getDataCenterId(),fromHost.getPodId(),""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ fromHost.getName()+ ""String_Node_Str""+ dest.getDataCenter().getName()+ ""String_Node_Str""+ dest.getPod().getName(),""String_Node_Str"");
      try {
        _agentMgr.send(dstHostId,new Commands(cleanup(vm)),null);
      }
 catch (      AgentUnavailableException ae) {
        s_logger.info(""String_Node_Str"");
      }
      try {
        stateTransitTo(vm,Event.OperationFailed,srcHostId);
      }
 catch (      NoTransitionException e) {
        s_logger.warn(e.getMessage());
      }
    }
 else {
      _networkMgr.commitNicForMigration(vmSrc,profile);
    }
    work.setStep(Step.Done);
    _workDao.update(work.getId(),work);
  }
}",0.9836643177450352
105478,"protected void migrate(VMInstanceVO vm,long srcHostId,DeployDestination dest) throws ResourceUnavailableException, ConcurrentOperationException {
  s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest);
  long dstHostId=dest.getHost().getId();
  Host fromHost=_hostDao.findById(srcHostId);
  if (fromHost == null) {
    s_logger.info(""String_Node_Str"" + srcHostId);
    throw new CloudRuntimeException(""String_Node_Str"" + srcHostId);
  }
  if (fromHost.getClusterId().longValue() != dest.getCluster().getId()) {
    List<VolumeVO> volumes=_volsDao.findCreatedByInstance(vm.getId());
    for (    VolumeVO volume : volumes) {
      if (!(_storagePoolDao.findById(volume.getPoolId())).getScope().equals(ScopeType.ZONE)) {
        s_logger.info(""String_Node_Str"" + dest.getHost().getId());
        throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost().getId());
      }
    }
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState().toString());
  }
  AlertManager.AlertType alertType=AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;
  if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;
  }
 else   if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;
  }
  VirtualMachineProfile vmSrc=new VirtualMachineProfileImpl(vm);
  for (  NicProfile nic : _networkMgr.getNicProfiles(vm)) {
    vmSrc.addNic(nic);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm,null,_offeringDao.findById(vm.getId(),vm.getServiceOfferingId()),null,null);
  _networkMgr.prepareNicForMigration(profile,dest);
  volumeMgr.prepareForMigration(profile,dest);
  VirtualMachineTO to=toVmTO(profile);
  PrepareForMigrationCommand pfmc=new PrepareForMigrationCommand(to);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Migrating,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(dstHostId);
  work=_workDao.persist(work);
  Answer pfma=null;
  try {
    pfma=_agentMgr.send(dstHostId,pfmc);
    if (pfma == null || !pfma.getResult()) {
      String msg=""String_Node_Str"" + pfma.getDetails();
      pfma=null;
      throw new AgentUnavailableException(msg,dstHostId);
    }
  }
 catch (  OperationTimedoutException e1) {
    throw new AgentUnavailableException(""String_Node_Str"",dstHostId);
  }
 finally {
    if (pfma == null) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
  }
  vm.setLastHostId(srcHostId);
  try {
    if (vm == null || vm.getHostId() == null || vm.getHostId() != srcHostId || !changeState(vm,Event.MigrationRequested,dstHostId,work,Step.Migrating)) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      s_logger.info(""String_Node_Str"" + vm);
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e1) {
    _networkMgr.rollbackNicForMigration(vmSrc,profile);
    s_logger.info(""String_Node_Str"" + e1.getMessage());
    throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
  }
  boolean migrated=false;
  try {
    boolean isWindows=_guestOsCategoryDao.findById(_guestOsDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(""String_Node_Str"");
    MigrateCommand mc=new MigrateCommand(vm.getInstanceName(),dest.getHost().getPrivateIpAddress(),isWindows,to,getExecuteInSequence(vm.getHypervisorType()));
    mc.setHostGuid(dest.getHost().getGuid());
    try {
      Answer ma=_agentMgr.send(vm.getLastHostId(),mc);
      if (ma == null || !ma.getResult()) {
        throw new CloudRuntimeException(""String_Node_Str"" + ma.getDetails());
      }
    }
 catch (    OperationTimedoutException e) {
      if (e.isActive()) {
        s_logger.warn(""String_Node_Str"" + vm);
        _haMgr.scheduleRestart(vm,true);
      }
      throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
    }
    try {
      if (!changeState(vm,VirtualMachine.Event.OperationSucceeded,dstHostId,work,Step.Started)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
    }
 catch (    NoTransitionException e1) {
      throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
    }
    try {
      if (!checkVmOnHost(vm,dstHostId)) {
        s_logger.error(""String_Node_Str"" + vm);
        try {
          _agentMgr.send(srcHostId,new Commands(cleanup(vm)),null);
        }
 catch (        AgentUnavailableException e) {
          s_logger.error(""String_Node_Str"" + srcHostId);
        }
        cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.AgentReportStopped,true);
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
    }
 catch (    OperationTimedoutException e) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ dstHostId,e);
    }
    migrated=true;
  }
  finally {
    if (!migrated) {
      s_logger.info(""String_Node_Str"" + vm);
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      _alertMgr.sendAlert(alertType,fromHost.getDataCenterId(),fromHost.getPodId(),""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ fromHost.getName()+ ""String_Node_Str""+ dest.getDataCenter().getName()+ ""String_Node_Str""+ dest.getPod().getName(),""String_Node_Str"");
      try {
        _agentMgr.send(dstHostId,new Commands(cleanup(vm)),null);
      }
 catch (      AgentUnavailableException ae) {
        s_logger.info(""String_Node_Str"");
      }
      try {
        stateTransitTo(vm,Event.OperationFailed,srcHostId);
      }
 catch (      NoTransitionException e) {
        s_logger.warn(e.getMessage());
      }
    }
 else {
      _networkMgr.commitNicForMigration(vmSrc,profile);
    }
    work.setStep(Step.Done);
    _workDao.update(work.getId(),work);
  }
}","protected void migrate(VMInstanceVO vm,long srcHostId,DeployDestination dest) throws ResourceUnavailableException, ConcurrentOperationException {
  s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest);
  long dstHostId=dest.getHost().getId();
  Host fromHost=_hostDao.findById(srcHostId);
  if (fromHost == null) {
    s_logger.info(""String_Node_Str"" + srcHostId);
    throw new CloudRuntimeException(""String_Node_Str"" + srcHostId);
  }
  if (fromHost.getClusterId().longValue() != dest.getCluster().getId()) {
    List<VolumeVO> volumes=_volsDao.findCreatedByInstance(vm.getId());
    for (    VolumeVO volume : volumes) {
      if (!(_storagePoolDao.findById(volume.getPoolId())).getScope().equals(ScopeType.ZONE)) {
        s_logger.info(""String_Node_Str"" + dest.getHost().getId());
        throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost().getId());
      }
    }
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState().toString());
  }
  AlertManager.AlertType alertType=AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;
  if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;
  }
 else   if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
    alertType=AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;
  }
  VirtualMachineProfile vmSrc=new VirtualMachineProfileImpl(vm);
  for (  NicProfile nic : _networkMgr.getNicProfiles(vm)) {
    vmSrc.addNic(nic);
  }
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm,null,_offeringDao.findById(vm.getId(),vm.getServiceOfferingId()),null,null);
  _networkMgr.prepareNicForMigration(profile,dest);
  volumeMgr.prepareForMigration(profile,dest);
  VirtualMachineTO to=toVmTO(profile);
  PrepareForMigrationCommand pfmc=new PrepareForMigrationCommand(to);
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Migrating,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(dstHostId);
  work=_workDao.persist(work);
  Answer pfma=null;
  try {
    pfma=_agentMgr.send(dstHostId,pfmc);
    if (pfma == null || !pfma.getResult()) {
      String details=(pfma != null) ? pfma.getDetails() : ""String_Node_Str"";
      String msg=""String_Node_Str"" + details;
      pfma=null;
      throw new AgentUnavailableException(msg,dstHostId);
    }
  }
 catch (  OperationTimedoutException e1) {
    throw new AgentUnavailableException(""String_Node_Str"",dstHostId);
  }
 finally {
    if (pfma == null) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
  }
  vm.setLastHostId(srcHostId);
  try {
    if (vm == null || vm.getHostId() == null || vm.getHostId() != srcHostId || !changeState(vm,Event.MigrationRequested,dstHostId,work,Step.Migrating)) {
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      s_logger.info(""String_Node_Str"" + vm);
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e1) {
    _networkMgr.rollbackNicForMigration(vmSrc,profile);
    s_logger.info(""String_Node_Str"" + e1.getMessage());
    throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
  }
  boolean migrated=false;
  try {
    boolean isWindows=_guestOsCategoryDao.findById(_guestOsDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(""String_Node_Str"");
    MigrateCommand mc=new MigrateCommand(vm.getInstanceName(),dest.getHost().getPrivateIpAddress(),isWindows,to,getExecuteInSequence(vm.getHypervisorType()));
    mc.setHostGuid(dest.getHost().getGuid());
    try {
      Answer ma=_agentMgr.send(vm.getLastHostId(),mc);
      if (ma == null || !ma.getResult()) {
        String details=(ma != null) ? ma.getDetails() : ""String_Node_Str"";
        throw new CloudRuntimeException(""String_Node_Str"" + details);
      }
    }
 catch (    OperationTimedoutException e) {
      if (e.isActive()) {
        s_logger.warn(""String_Node_Str"" + vm);
        _haMgr.scheduleRestart(vm,true);
      }
      throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
    }
    try {
      if (!changeState(vm,VirtualMachine.Event.OperationSucceeded,dstHostId,work,Step.Started)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
    }
 catch (    NoTransitionException e1) {
      throw new ConcurrentOperationException(""String_Node_Str"" + e1.getMessage());
    }
    try {
      if (!checkVmOnHost(vm,dstHostId)) {
        s_logger.error(""String_Node_Str"" + vm);
        try {
          _agentMgr.send(srcHostId,new Commands(cleanup(vm)),null);
        }
 catch (        AgentUnavailableException e) {
          s_logger.error(""String_Node_Str"" + srcHostId);
        }
        cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.AgentReportStopped,true);
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
    }
 catch (    OperationTimedoutException e) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ dstHostId,e);
    }
    migrated=true;
  }
  finally {
    if (!migrated) {
      s_logger.info(""String_Node_Str"" + vm);
      _networkMgr.rollbackNicForMigration(vmSrc,profile);
      _alertMgr.sendAlert(alertType,fromHost.getDataCenterId(),fromHost.getPodId(),""String_Node_Str"" + vm.getInstanceName() + ""String_Node_Str""+ fromHost.getName()+ ""String_Node_Str""+ dest.getDataCenter().getName()+ ""String_Node_Str""+ dest.getPod().getName(),""String_Node_Str"");
      try {
        _agentMgr.send(dstHostId,new Commands(cleanup(vm)),null);
      }
 catch (      AgentUnavailableException ae) {
        s_logger.info(""String_Node_Str"");
      }
      try {
        stateTransitTo(vm,Event.OperationFailed,srcHostId);
      }
 catch (      NoTransitionException e) {
        s_logger.warn(e.getMessage());
      }
    }
 else {
      _networkMgr.commitNicForMigration(vmSrc,profile);
    }
    work.setStep(Step.Done);
    _workDao.update(work.getId(),work);
  }
}",0.9836643177450352
105479,"@DB protected ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig) throws InsufficientCapacityException {
  boolean retry=true;
  boolean tryLbProvisioning=false;
  ExternalLoadBalancerDeviceVO lbDevice=null;
  long physicalNetworkId=guestConfig.getPhysicalNetworkId();
  NetworkOfferingVO offering=_networkOfferingDao.findById(guestConfig.getNetworkOfferingId());
  String provider=_ntwkSrvcProviderDao.getProviderForServiceInNetwork(guestConfig.getId(),Service.Lb);
  while (retry) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          final boolean dedicatedLB=offering.getDedicatedLB();
          try {
            lbDevice=Transaction.execute(new TransactionCallbackWithException<ExternalLoadBalancerDeviceVO,InsufficientCapacityException>(){
              @Override public ExternalLoadBalancerDeviceVO doInTransaction(              TransactionStatus status) throws InsufficientCapacityException {
                ExternalLoadBalancerDeviceVO lbDevice=findSuitableLoadBalancerForNetwork(guestConfig,dedicatedLB);
                long lbDeviceId=lbDevice.getId();
                NetworkExternalLoadBalancerVO networkLB=new NetworkExternalLoadBalancerVO(guestConfig.getId(),lbDeviceId);
                _networkExternalLBDao.persist(networkLB);
                lbDevice.setAllocationState(dedicatedLB ? LBDeviceAllocationState.Dedicated : LBDeviceAllocationState.Shared);
                _externalLoadBalancerDeviceDao.update(lbDeviceId,lbDevice);
                return lbDevice;
              }
            }
);
            tryLbProvisioning=false;
            retry=false;
          }
 catch (          InsufficientCapacityException exception) {
            if (tryLbProvisioning) {
              retry=false;
              s_logger.warn(""String_Node_Str"");
              throw exception;
            }
 else {
              tryLbProvisioning=true;
            }
          }
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
    if (tryLbProvisioning) {
      List<ExternalLoadBalancerDeviceVO> providerLbDevices=_externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId,provider,LBDeviceAllocationState.Provider);
      if ((providerLbDevices != null) && (!providerLbDevices.isEmpty())) {
        for (        ExternalLoadBalancerDeviceVO lbProviderDevice : providerLbDevices) {
          if (lbProviderDevice.getState() == LBDeviceState.Enabled) {
            DataCenterIpAddressVO dcPrivateIp=_dcDao.allocatePrivateIpAddress(guestConfig.getDataCenterId(),lbProviderDevice.getUuid());
            if (dcPrivateIp == null) {
              throw new InsufficientNetworkCapacityException(""String_Node_Str"" + guestConfig.getDataCenterId() + ""String_Node_Str"",DataCenter.class,guestConfig.getDataCenterId());
            }
            Pod pod=_podDao.findById(dcPrivateIp.getPodId());
            String lbIP=dcPrivateIp.getIpAddress();
            String netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
            String gateway=pod.getGateway();
            CreateLoadBalancerApplianceCommand lbProvisionCmd=new CreateLoadBalancerApplianceCommand(lbIP,netmask,gateway);
            CreateLoadBalancerApplianceAnswer createLbAnswer=null;
            try {
              createLbAnswer=(CreateLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbProvisionCmd);
              if (createLbAnswer == null || !createLbAnswer.getResult()) {
                s_logger.error(""String_Node_Str"" + lbProviderDevice.getId());
                continue;
              }
            }
 catch (            Exception agentException) {
              s_logger.error(""String_Node_Str"" + lbProviderDevice.getId() + ""String_Node_Str""+ agentException.getMessage());
              continue;
            }
            String username=createLbAnswer.getUsername();
            String password=createLbAnswer.getPassword();
            String publicIf=createLbAnswer.getPublicInterface();
            String privateIf=createLbAnswer.getPrivateInterface();
            String dedicatedLb=offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"";
            String capacity=Long.toString(lbProviderDevice.getCapacity());
            PublicIp publicIp=_ipAddrMgr.assignPublicIpAddress(guestConfig.getDataCenterId(),null,_accountMgr.getSystemAccount(),VlanType.VirtualNetwork,null,null,false);
            String publicIPNetmask=publicIp.getVlanNetmask();
            String publicIPgateway=publicIp.getVlanGateway();
            String publicIPVlanTag=publicIp.getVlanTag();
            String publicIP=publicIp.getAddress().toString();
            String url=""String_Node_Str"" + lbIP + ""String_Node_Str""+ publicIf+ ""String_Node_Str""+ privateIf+ ""String_Node_Str""+ dedicatedLb+ ""String_Node_Str""+ ""String_Node_Str""+ publicIP+ ""String_Node_Str""+ publicIPNetmask+ ""String_Node_Str""+ capacity+ ""String_Node_Str""+ publicIPVlanTag+ ""String_Node_Str""+ publicIPgateway;
            ExternalLoadBalancerDeviceVO lbAppliance=null;
            try {
              lbAppliance=addExternalLoadBalancer(physicalNetworkId,url,username,password,createLbAnswer.getDeviceName(),createLbAnswer.getServerResource(),false,false,null,null);
            }
 catch (            Exception e) {
              s_logger.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
            }
            if (lbAppliance != null) {
              ExternalLoadBalancerDeviceVO managedLb=_externalLoadBalancerDeviceDao.findById(lbAppliance.getId());
              managedLb.setIsManagedDevice(true);
              managedLb.setParentHostId(lbProviderDevice.getHostId());
              _externalLoadBalancerDeviceDao.update(lbAppliance.getId(),managedLb);
            }
 else {
              DestroyLoadBalancerApplianceCommand lbDeleteCmd=new DestroyLoadBalancerApplianceCommand(lbIP);
              DestroyLoadBalancerApplianceAnswer answer=null;
              try {
                answer=(DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbDeleteCmd);
                if (answer == null || !answer.getResult()) {
                  s_logger.warn(""String_Node_Str"");
                }
 else {
                  _dcDao.releasePrivateIpAddress(lbIP,guestConfig.getDataCenterId(),null);
                  _ipAddrMgr.disassociatePublicIpAddress(publicIp.getId(),_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount());
                }
              }
 catch (              Exception e) {
                s_logger.warn(""String_Node_Str"" + guestConfig.getId() + ""String_Node_Str""+ e.getMessage());
              }
            }
          }
        }
      }
    }
  }
  return lbDevice;
}","@DB protected ExternalLoadBalancerDeviceVO allocateLoadBalancerForNetwork(final Network guestConfig) throws InsufficientCapacityException {
  boolean retry=true;
  boolean tryLbProvisioning=false;
  ExternalLoadBalancerDeviceVO lbDevice=null;
  long physicalNetworkId=guestConfig.getPhysicalNetworkId();
  NetworkOfferingVO offering=_networkOfferingDao.findById(guestConfig.getNetworkOfferingId());
  String provider=_ntwkSrvcProviderDao.getProviderForServiceInNetwork(guestConfig.getId(),Service.Lb);
  while (retry) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          final boolean dedicatedLB=offering.getDedicatedLB();
          try {
            lbDevice=Transaction.execute(new TransactionCallbackWithException<ExternalLoadBalancerDeviceVO,InsufficientCapacityException>(){
              @Override public ExternalLoadBalancerDeviceVO doInTransaction(              TransactionStatus status) throws InsufficientCapacityException {
                ExternalLoadBalancerDeviceVO lbDevice=findSuitableLoadBalancerForNetwork(guestConfig,dedicatedLB);
                long lbDeviceId=lbDevice.getId();
                NetworkExternalLoadBalancerVO networkLB=new NetworkExternalLoadBalancerVO(guestConfig.getId(),lbDeviceId);
                _networkExternalLBDao.persist(networkLB);
                lbDevice.setAllocationState(dedicatedLB ? LBDeviceAllocationState.Dedicated : LBDeviceAllocationState.Shared);
                _externalLoadBalancerDeviceDao.update(lbDeviceId,lbDevice);
                return lbDevice;
              }
            }
);
            tryLbProvisioning=false;
            retry=false;
          }
 catch (          InsufficientCapacityException exception) {
            if (tryLbProvisioning) {
              retry=false;
              s_logger.warn(""String_Node_Str"");
              throw exception;
            }
 else {
              tryLbProvisioning=true;
            }
          }
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
    if (tryLbProvisioning) {
      List<ExternalLoadBalancerDeviceVO> providerLbDevices=_externalLoadBalancerDeviceDao.listByProviderAndDeviceAllocationState(physicalNetworkId,provider,LBDeviceAllocationState.Provider);
      if ((providerLbDevices != null) && (!providerLbDevices.isEmpty())) {
        for (        ExternalLoadBalancerDeviceVO lbProviderDevice : providerLbDevices) {
          if (lbProviderDevice.getState() == LBDeviceState.Enabled) {
            DataCenterIpAddressVO dcPrivateIp=_dcDao.allocatePrivateIpAddress(guestConfig.getDataCenterId(),lbProviderDevice.getUuid());
            if (dcPrivateIp == null) {
              throw new InsufficientNetworkCapacityException(""String_Node_Str"" + guestConfig.getDataCenterId() + ""String_Node_Str"",DataCenter.class,guestConfig.getDataCenterId());
            }
            Pod pod=_podDao.findById(dcPrivateIp.getPodId());
            String lbIP=dcPrivateIp.getIpAddress();
            String netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
            String gateway=pod.getGateway();
            CreateLoadBalancerApplianceCommand lbProvisionCmd=new CreateLoadBalancerApplianceCommand(lbIP,netmask,gateway);
            CreateLoadBalancerApplianceAnswer createLbAnswer=null;
            try {
              createLbAnswer=(CreateLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbProvisionCmd);
              if (createLbAnswer == null || !createLbAnswer.getResult()) {
                s_logger.error(""String_Node_Str"" + lbProviderDevice.getId());
                continue;
              }
            }
 catch (            Exception agentException) {
              s_logger.error(""String_Node_Str"" + lbProviderDevice.getId() + ""String_Node_Str""+ agentException.getMessage());
              continue;
            }
            String username=createLbAnswer.getUsername();
            String password=createLbAnswer.getPassword();
            String publicIf=createLbAnswer.getPublicInterface();
            String privateIf=createLbAnswer.getPrivateInterface();
            String dedicatedLb=offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"";
            String capacity=Long.toString(lbProviderDevice.getCapacity());
            PublicIp publicIp=_ipAddrMgr.assignPublicIpAddress(guestConfig.getDataCenterId(),null,_accountMgr.getSystemAccount(),VlanType.VirtualNetwork,null,null,false);
            String publicIPNetmask=publicIp.getVlanNetmask();
            String publicIPgateway=publicIp.getVlanGateway();
            String publicIP=publicIp.getAddress().toString();
            String publicIPVlanTag=""String_Node_Str"";
            try {
              publicIPVlanTag=BroadcastDomainType.getValue(publicIp.getVlanTag());
            }
 catch (            URISyntaxException e) {
              s_logger.error(""String_Node_Str"" + e.getMessage());
            }
            String url=""String_Node_Str"" + lbIP + ""String_Node_Str""+ publicIf+ ""String_Node_Str""+ privateIf+ ""String_Node_Str""+ dedicatedLb+ ""String_Node_Str""+ ""String_Node_Str""+ publicIP+ ""String_Node_Str""+ publicIPNetmask+ ""String_Node_Str""+ capacity+ ""String_Node_Str""+ publicIPVlanTag+ ""String_Node_Str""+ publicIPgateway;
            ExternalLoadBalancerDeviceVO lbAppliance=null;
            try {
              lbAppliance=addExternalLoadBalancer(physicalNetworkId,url,username,password,createLbAnswer.getDeviceName(),createLbAnswer.getServerResource(),false,false,null,null);
            }
 catch (            Exception e) {
              s_logger.error(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
            }
            if (lbAppliance != null) {
              ExternalLoadBalancerDeviceVO managedLb=_externalLoadBalancerDeviceDao.findById(lbAppliance.getId());
              managedLb.setIsManagedDevice(true);
              managedLb.setParentHostId(lbProviderDevice.getHostId());
              _externalLoadBalancerDeviceDao.update(lbAppliance.getId(),managedLb);
            }
 else {
              DestroyLoadBalancerApplianceCommand lbDeleteCmd=new DestroyLoadBalancerApplianceCommand(lbIP);
              DestroyLoadBalancerApplianceAnswer answer=null;
              try {
                answer=(DestroyLoadBalancerApplianceAnswer)_agentMgr.easySend(lbProviderDevice.getHostId(),lbDeleteCmd);
                if (answer == null || !answer.getResult()) {
                  s_logger.warn(""String_Node_Str"");
                }
 else {
                  _dcDao.releasePrivateIpAddress(lbIP,guestConfig.getDataCenterId(),null);
                  _ipAddrMgr.disassociatePublicIpAddress(publicIp.getId(),_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount());
                }
              }
 catch (              Exception e) {
                s_logger.warn(""String_Node_Str"" + guestConfig.getId() + ""String_Node_Str""+ e.getMessage());
              }
            }
          }
        }
      }
    }
  }
  return lbDevice;
}",0.9676679331851744
105480,"protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if (!requestLogged) {
            String requestMsg=request.toString();
            if (requestMsg != null) {
              s_logger.debug(""String_Node_Str"" + requestMsg);
            }
            requestLogged=true;
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ReadyCommand && ((ReadyCommand)cmd).getDetails() != null) {
          s_logger.debug(""String_Node_Str"" + ((ReadyCommand)cmd).getDetails());
          System.exit(1);
          return;
        }
 else         if (cmd instanceof MaintainCommand) {
          s_logger.debug(""String_Node_Str"");
          cancelTasks();
          _reconnectAllowed=false;
          answer=new MaintainAnswer((MaintainCommand)cmd);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          if (cmd instanceof ReadyCommand) {
            processReadyCommand(cmd);
          }
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      String responseMsg=response.toString();
      if (responseMsg != null) {
        s_logger.debug(response.toString());
      }
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}","protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if (!requestLogged) {
            String requestMsg=request.toString();
            if (requestMsg != null) {
              s_logger.debug(""String_Node_Str"" + requestMsg);
            }
            requestLogged=true;
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,(long)watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof ReadyCommand && ((ReadyCommand)cmd).getDetails() != null) {
          s_logger.debug(""String_Node_Str"" + ((ReadyCommand)cmd).getDetails());
          System.exit(1);
          return;
        }
 else         if (cmd instanceof MaintainCommand) {
          s_logger.debug(""String_Node_Str"");
          cancelTasks();
          _reconnectAllowed=false;
          answer=new MaintainAnswer((MaintainCommand)cmd);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          if (cmd instanceof ReadyCommand) {
            processReadyCommand(cmd);
          }
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      String responseMsg=response.toString();
      if (responseMsg != null) {
        s_logger.debug(response.toString());
      }
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}",0.999177406087195
105481,"public void processStartupAnswer(Answer answer,Response response,Link link){
  boolean cancelled=false;
synchronized (this) {
    if (_startup != null) {
      _startup.cancel();
      _startup=null;
    }
 else {
      cancelled=true;
    }
  }
  final StartupAnswer startup=(StartupAnswer)answer;
  if (!startup.getResult()) {
    s_logger.error(""String_Node_Str"" + answer.getDetails());
    System.exit(1);
  }
  if (cancelled) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  s_logger.info(""String_Node_Str"" + startup.getHostId());
  setId(startup.getHostId());
  _pingInterval=startup.getPingInterval() * 1000;
  setLastPingResponseTime();
  scheduleWatch(link,response,_pingInterval,_pingInterval);
  _ugentTaskPool.setKeepAliveTime(2 * _pingInterval,TimeUnit.MILLISECONDS);
  s_logger.info(""String_Node_Str"" + getId());
}","public void processStartupAnswer(Answer answer,Response response,Link link){
  boolean cancelled=false;
synchronized (this) {
    if (_startup != null) {
      _startup.cancel();
      _startup=null;
    }
 else {
      cancelled=true;
    }
  }
  final StartupAnswer startup=(StartupAnswer)answer;
  if (!startup.getResult()) {
    s_logger.error(""String_Node_Str"" + answer.getDetails());
    System.exit(1);
  }
  if (cancelled) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  s_logger.info(""String_Node_Str"" + startup.getHostId());
  setId(startup.getHostId());
  _pingInterval=(long)startup.getPingInterval() * 1000;
  setLastPingResponseTime();
  scheduleWatch(link,response,_pingInterval,_pingInterval);
  _ugentTaskPool.setKeepAliveTime(2 * _pingInterval,TimeUnit.MILLISECONDS);
  s_logger.info(""String_Node_Str"" + getId());
}",0.9964285714285714
105482,"private VirtualMachineGuru getVmGuru(VirtualMachine vm){
  return _vmGurus.get(vm.getType());
}","private VirtualMachineGuru getVmGuru(VirtualMachine vm){
  if (vm != null)   return _vmGurus.get(vm.getType());
  return null;
}",0.852017937219731
105483,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> configs=_configDao.getConfiguration(null,params);
  String globalStorageOverprovisioningFactor=configs.get(""String_Node_Str"");
  _storageOverprovisioningFactor=new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor,2.0f));
  _extraBytesPerVolume=0;
  _rand=new Random(System.currentTimeMillis());
  _dontMatter=Boolean.parseBoolean(configs.get(""String_Node_Str""));
  String allocationAlgorithm=configs.get(""String_Node_Str"");
  if (allocationAlgorithm != null) {
    _allocationAlgorithm=allocationAlgorithm;
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  if (_configDao != null) {
    Map<String,String> configs=_configDao.getConfiguration(null,params);
    String globalStorageOverprovisioningFactor=configs.get(""String_Node_Str"");
    _storageOverprovisioningFactor=new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor,2.0f));
    _extraBytesPerVolume=0;
    _rand=new Random(System.currentTimeMillis());
    _dontMatter=Boolean.parseBoolean(configs.get(""String_Node_Str""));
    String allocationAlgorithm=configs.get(""String_Node_Str"");
    if (allocationAlgorithm != null) {
      _allocationAlgorithm=allocationAlgorithm;
    }
    return true;
  }
  return false;
}",0.935309973045822
105484,"@Override public void completeCall(Object returnObject){
  assert(_sourceAddress != null);
  assert(_targetAddress != null);
  RpcCallResponsePdu pdu=new RpcCallResponsePdu();
  pdu.setCommand(_requestPdu.getCommand());
  pdu.setRequestTag(_requestPdu.getRequestTag());
  pdu.setRequestStartTick(_requestPdu.getRequestStartTick());
  pdu.setRequestStartTick(RpcCallResponsePdu.RESULT_SUCCESSFUL);
  if (returnObject != null) {
    assert(_rpcProvider.getMessageSerializer() != null);
    pdu.setSerializedResult(_rpcProvider.getMessageSerializer().serializeTo(returnObject.getClass(),returnObject));
  }
  _rpcProvider.sendRpcPdu(_targetAddress,_sourceAddress,_rpcProvider.getMessageSerializer().serializeTo(RpcCallResponsePdu.class,pdu));
}","@Override public void completeCall(Object returnObject){
  assert(_sourceAddress != null);
  assert(_targetAddress != null);
  RpcCallResponsePdu pdu=new RpcCallResponsePdu();
  pdu.setCommand(_requestPdu.getCommand());
  pdu.setRequestTag(_requestPdu.getRequestTag());
  pdu.setRequestStartTick(_requestPdu.getRequestStartTick());
  pdu.setRequestStartTick(RpcCallResponsePdu.RESULT_SUCCESSFUL);
  if (returnObject != null) {
    assert(_rpcProvider.getMessageSerializer() != null);
    pdu.setSerializedResult(_rpcProvider.getMessageSerializer().serializeTo(returnObject.getClass(),returnObject));
  }
  _rpcProvider.sendRpcPdu(_sourceAddress,_targetAddress,_rpcProvider.getMessageSerializer().serializeTo(RpcCallResponsePdu.class,pdu));
}",0.9838056680161944
105485,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean success=super.configure(name,params);
  if (!success) {
    return false;
  }
  _storage=new JavaStorageLayer();
  _storage.configure(""String_Node_Str"",params);
  String domrScriptsDir=(String)params.get(""String_Node_Str"");
  if (domrScriptsDir == null) {
    domrScriptsDir=getDefaultDomrScriptsDir();
  }
  String kvmScriptsDir=(String)params.get(""String_Node_Str"");
  if (kvmScriptsDir == null) {
    kvmScriptsDir=getDefaultKvmScriptsDir();
  }
  String networkScriptsDir=(String)params.get(""String_Node_Str"");
  if (networkScriptsDir == null) {
    networkScriptsDir=getDefaultNetworkScriptsDir();
  }
  String storageScriptsDir=(String)params.get(""String_Node_Str"");
  if (storageScriptsDir == null) {
    storageScriptsDir=getDefaultStorageScriptsDir();
  }
  String bridgeType=(String)params.get(""String_Node_Str"");
  if (bridgeType == null) {
    _bridgeType=BridgeType.NATIVE;
  }
 else {
    _bridgeType=BridgeType.valueOf(bridgeType.toUpperCase());
  }
  params.put(""String_Node_Str"",domrScriptsDir);
  _virtRouterResource=new VirtualRoutingResource(this);
  success=_virtRouterResource.configure(name,params);
  if (!success) {
    return false;
  }
  _host=(String)params.get(""String_Node_Str"");
  if (_host == null) {
    _host=""String_Node_Str"";
  }
  _dcId=(String)params.get(""String_Node_Str"");
  if (_dcId == null) {
    _dcId=""String_Node_Str"";
  }
  _pod=(String)params.get(""String_Node_Str"");
  if (_pod == null) {
    _pod=""String_Node_Str"";
  }
  _clusterId=(String)params.get(""String_Node_Str"");
  _modifyVlanPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_modifyVlanPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _versionstringpath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_versionstringpath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _patchViaSocketPath=Script.findScript(kvmScriptsDir + ""String_Node_Str"",""String_Node_Str"");
  if (_patchViaSocketPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _heartBeatPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_heartBeatPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createvmPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createvmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _manageSnapshotPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_manageSnapshotPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _resizeVolumePath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_resizeVolumePath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _createTmplPath=Script.findScript(storageScriptsDir,""String_Node_Str"");
  if (_createTmplPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _securityGroupPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_securityGroupPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsTunnelPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsTunnelPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _routerProxyPath=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (_routerProxyPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanDhcpHostPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanDhcpHostPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _ovsPvlanVmPath=Script.findScript(networkScriptsDir,""String_Node_Str"");
  if (_ovsPvlanVmPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  String value=(String)params.get(""String_Node_Str"");
  boolean isDeveloper=Boolean.parseBoolean(value);
  if (isDeveloper) {
    params.putAll(getDeveloperProperties());
  }
  _pool=(String)params.get(""String_Node_Str"");
  if (_pool == null) {
    _pool=""String_Node_Str"";
  }
  String instance=(String)params.get(""String_Node_Str"");
  _hypervisorType=HypervisorType.getType((String)params.get(""String_Node_Str""));
  if (_hypervisorType == HypervisorType.None) {
    _hypervisorType=HypervisorType.KVM;
  }
  if (HypervisorType.LXC.equals(getHypervisorType())) {
    _setupCgroupPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
    if (_setupCgroupPath == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    if (!checkCgroups()) {
      throw new ConfigurationException(""String_Node_Str"");
    }
  }
  _hypervisorURI=(String)params.get(""String_Node_Str"");
  if (_hypervisorURI == null) {
    _hypervisorURI=LibvirtConnection.getHypervisorURI(_hypervisorType.toString());
  }
  _networkDirectSourceMode=(String)params.get(""String_Node_Str"");
  _networkDirectDevice=(String)params.get(""String_Node_Str"");
  String startMac=(String)params.get(""String_Node_Str"");
  if (startMac == null) {
    startMac=""String_Node_Str"";
  }
  String startIp=(String)params.get(""String_Node_Str"");
  if (startIp == null) {
    startIp=""String_Node_Str"";
  }
  _pingTestPath=Script.findScript(kvmScriptsDir,""String_Node_Str"");
  if (_pingTestPath == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _linkLocalBridgeName=(String)params.get(""String_Node_Str"");
  if (_linkLocalBridgeName == null) {
    if (isDeveloper) {
      _linkLocalBridgeName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _linkLocalBridgeName=""String_Node_Str"";
    }
  }
  _publicBridgeName=(String)params.get(""String_Node_Str"");
  if (_publicBridgeName == null) {
    _publicBridgeName=""String_Node_Str"";
  }
  _privBridgeName=(String)params.get(""String_Node_Str"");
  if (_privBridgeName == null) {
    _privBridgeName=""String_Node_Str"";
  }
  _guestBridgeName=(String)params.get(""String_Node_Str"");
  if (_guestBridgeName == null) {
    _guestBridgeName=_privBridgeName;
  }
  _privNwName=(String)params.get(""String_Node_Str"");
  if (_privNwName == null) {
    if (isDeveloper) {
      _privNwName=""String_Node_Str"" + instance + ""String_Node_Str"";
    }
 else {
      _privNwName=""String_Node_Str"";
    }
  }
  _localStoragePath=(String)params.get(""String_Node_Str"");
  if (_localStoragePath == null) {
    _localStoragePath=""String_Node_Str"";
  }
  File storagePath=new File(_localStoragePath);
  _localStoragePath=storagePath.getAbsolutePath();
  _localStorageUUID=(String)params.get(""String_Node_Str"");
  if (_localStorageUUID == null) {
    _localStorageUUID=UUID.nameUUIDFromBytes(_localStoragePath.getBytes()).toString();
  }
  value=(String)params.get(""String_Node_Str"");
  _timeout=NumbersUtil.parseInt(value,30 * 60) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _stopTimeout=NumbersUtil.parseInt(value,120) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _cmdsTimeout=NumbersUtil.parseInt(value,7200) * 1000;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noMemBalloon=true;
  }
  _videoHw=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  _videoRam=NumbersUtil.parseInt(value,0);
  value=(String)params.get(""String_Node_Str"");
  _dom0MinMem=NumbersUtil.parseInt(value,0) * 1024 * 1024;
  value=(String)params.get(""String_Node_Str"");
  if (Boolean.parseBoolean(value)) {
    _noKvmClock=true;
  }
 else   if (HypervisorType.LXC.equals(_hypervisorType) && (value == null)) {
    _noKvmClock=true;
  }
  LibvirtConnection.initialize(_hypervisorURI);
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
    if (_bridgeType == BridgeType.OPENVSWITCH) {
      if (conn.getLibVirVersion() < (10 * 1000 + 0)) {
        throw new ConfigurationException(""String_Node_Str"" + conn.getLibVirVersion() + ""String_Node_Str"");
      }
    }
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.getMessage());
  }
  if (HypervisorType.KVM == _hypervisorType) {
    if (!IsHVMEnabled(conn)) {
      throw new ConfigurationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  _hypervisorPath=getHypervisorPath(conn);
  try {
    _hvVersion=conn.getVersion();
    _hvVersion=(_hvVersion % 1000000) / 1000;
    _hypervisorLibvirtVersion=conn.getLibVirVersion();
    _hypervisorQemuVersion=conn.getVersion();
  }
 catch (  LibvirtException e) {
    s_logger.trace(""String_Node_Str"",e);
  }
  _guestCpuMode=(String)params.get(""String_Node_Str"");
  if (_guestCpuMode != null) {
    _guestCpuModel=(String)params.get(""String_Node_Str"");
    if (_hypervisorLibvirtVersion < (9 * 1000 + 10)) {
      s_logger.warn(""String_Node_Str"" + prettyVersion(_hypervisorLibvirtVersion) + ""String_Node_Str"");
      _guestCpuMode=""String_Node_Str"";
      _guestCpuModel=""String_Node_Str"";
    }
    params.put(""String_Node_Str"",_guestCpuMode);
    params.put(""String_Node_Str"",_guestCpuModel);
  }
  String[] info=NetUtils.getNetworkParams(_privateNic);
  _monitor=new KVMHAMonitor(null,info[0],_heartBeatPath);
  Thread ha=new Thread(_monitor);
  ha.start();
  _storagePoolMgr=new KVMStoragePoolManager(_storage,_monitor);
  _sysvmISOPath=(String)params.get(""String_Node_Str"");
  if (_sysvmISOPath == null) {
    String[] isoPaths={""String_Node_Str""};
    for (    String isoPath : isoPaths) {
      if (_storage.exists(isoPath)) {
        _sysvmISOPath=isoPath;
        break;
      }
    }
    if (_sysvmISOPath == null) {
      s_logger.debug(""String_Node_Str"");
    }
  }
switch (_bridgeType) {
case OPENVSWITCH:
    getOvsPifs();
  break;
case NATIVE:
default :
getPifs();
break;
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
if (_pifs.get(""String_Node_Str"") == null) {
s_logger.debug(""String_Node_Str"");
throw new ConfigurationException(""String_Node_Str"");
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ _privBridgeName+ ""String_Node_Str""+ _pifs.get(""String_Node_Str"")+ ""String_Node_Str""+ _publicBridgeName);
_canBridgeFirewall=can_bridge_firewall(_pifs.get(""String_Node_Str""));
_localGateway=Script.runSimpleBashScript(""String_Node_Str"");
if (_localGateway == null) {
s_logger.debug(""String_Node_Str"");
}
_mountPoint=(String)params.get(""String_Node_Str"");
if (_mountPoint == null) {
_mountPoint=""String_Node_Str"";
}
value=(String)params.get(""String_Node_Str"");
_migrateDowntime=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migratePauseAfter=NumbersUtil.parseInt(value,-1);
value=(String)params.get(""String_Node_Str"");
_migrateSpeed=NumbersUtil.parseInt(value,-1);
if (_migrateSpeed == -1) {
_migrateSpeed=0;
String speed=Script.runSimpleBashScript(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str"");
if (speed != null) {
String[] tokens=speed.split(""String_Node_Str"");
if (tokens.length == 2) {
try {
  _migrateSpeed=Integer.parseInt(tokens[0]);
}
 catch (NumberFormatException e) {
  s_logger.trace(""String_Node_Str"",e);
}
s_logger.debug(""String_Node_Str"" + _pifs.get(""String_Node_Str"") + ""String_Node_Str""+ String.valueOf(_migrateSpeed));
}
}
params.put(""String_Node_Str"",String.valueOf(_migrateSpeed));
}
Map<String,String> bridges=new HashMap<String,String>();
bridges.put(""String_Node_Str"",_linkLocalBridgeName);
bridges.put(""String_Node_Str"",_publicBridgeName);
bridges.put(""String_Node_Str"",_privBridgeName);
bridges.put(""String_Node_Str"",_guestBridgeName);
params.put(""String_Node_Str"",bridges);
params.put(""String_Node_Str"",_pifs);
params.put(""String_Node_Str"",this);
params.put(""String_Node_Str"",_hypervisorLibvirtVersion);
configureVifDrivers(params);
KVMStorageProcessor storageProcessor=new KVMStorageProcessor(_storagePoolMgr,this);
storageProcessor.configure(name,params);
storageHandler=new StorageSubsystemCommandHandlerBase(storageProcessor);
String unameKernelVersion=Script.runSimpleBashScript(""String_Node_Str"");
String[] kernelVersions=unameKernelVersion.split(""String_Node_Str"");
_kernelVersion=Integer.parseInt(kernelVersions[0]) * 1000 * 1000 + (long)Integer.parseInt(kernelVersions[1]) * 1000 + Integer.parseInt(kernelVersions[2]);
return true;
}",0.9997560975609756
105486,"private void postDiskConfigBeforeStart(VirtualMachineMO vmMo,VirtualMachineTO vmSpec,DiskTO[] sortedDisks,int ideControllerKey,int scsiControllerKey,Map<String,String> iqnToPath,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  VirtualMachineDiskInfoBuilder diskInfoBuilder=vmMo.getDiskInfoBuilder();
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO)     continue;
    VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
    VirtualMachineDiskInfo diskInfo=getMatchingExistingDisk(diskInfoBuilder,vol,hyperHost,context);
    assert(diskInfo != null);
    String[] diskChain=diskInfo.getDiskChain();
    assert(diskChain.length > 0);
    Map<String,String> details=vol.getDetails();
    boolean managed=false;
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    }
    DatastoreFile file=new DatastoreFile(diskChain[0]);
    if (managed) {
      DatastoreFile originalFile=new DatastoreFile(volumeTO.getPath());
      if (!file.getFileBaseName().equalsIgnoreCase(originalFile.getFileBaseName())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ diskChain[0]);
      }
    }
 else {
      if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ file.getFileBaseName());
      }
    }
    VolumeObjectTO volInSpec=getVolumeInSpec(vmSpec,volumeTO);
    if (managed) {
      String datastoreVolumePath=diskChain[0];
      iqnToPath.put(details.get(DiskTO.IQN),datastoreVolumePath);
      vol.setPath(datastoreVolumePath);
      volumeTO.setPath(datastoreVolumePath);
      volInSpec.setPath(datastoreVolumePath);
    }
 else {
      volInSpec.setPath(file.getFileBaseName());
    }
    volInSpec.setChainInfo(_gson.toJson(diskInfo));
  }
}","private void postDiskConfigBeforeStart(VirtualMachineMO vmMo,VirtualMachineTO vmSpec,DiskTO[] sortedDisks,int ideControllerKey,int scsiControllerKey,Map<String,String> iqnToPath,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  VirtualMachineDiskInfoBuilder diskInfoBuilder=vmMo.getDiskInfoBuilder();
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO)     continue;
    VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
    VirtualMachineDiskInfo diskInfo=getMatchingExistingDisk(diskInfoBuilder,vol,hyperHost,context);
    assert(diskInfo != null);
    String[] diskChain=diskInfo.getDiskChain();
    assert(diskChain.length > 0);
    Map<String,String> details=vol.getDetails();
    boolean managed=false;
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    }
    DatastoreFile file=new DatastoreFile(diskChain[0]);
    if (managed) {
      DatastoreFile originalFile=new DatastoreFile(volumeTO.getPath());
      if (!file.getFileBaseName().equalsIgnoreCase(originalFile.getFileBaseName())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ diskChain[0]);
      }
    }
 else {
      if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ file.getFileBaseName());
      }
    }
    VolumeObjectTO volInSpec=getVolumeInSpec(vmSpec,volumeTO);
    if (volInSpec != null) {
      if (managed) {
        String datastoreVolumePath=diskChain[0];
        iqnToPath.put(details.get(DiskTO.IQN),datastoreVolumePath);
        vol.setPath(datastoreVolumePath);
        volumeTO.setPath(datastoreVolumePath);
        volInSpec.setPath(datastoreVolumePath);
      }
 else {
        volInSpec.setPath(file.getFileBaseName());
      }
      volInSpec.setChainInfo(_gson.toJson(diskInfo));
    }
  }
}",0.9830923793187945
105487,"@Override public Answer createTemplateFromSnapshot(CopyCommand cmd){
  SnapshotObjectTO snapshot=(SnapshotObjectTO)cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)cmd.getDestTO();
  DataStoreTO imageStore=template.getDataStore();
  String details;
  String uniqeName=UUID.randomUUID().toString();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    if (!(imageStore instanceof NfsTO)) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    NfsTO nfsSvr=(NfsTO)imageStore;
    Ternary<String,Long,Long> result=createTemplateFromSnapshot(template.getPath(),uniqeName,nfsSvr.getUrl(),snapshot.getPath(),template.getId(),cmd.getWait() * 1000);
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(result.first());
    newTemplate.setPhysicalSize(result.second());
    newTemplate.setSize(result.third());
    newTemplate.setFormat(ImageFormat.OVA);
    newTemplate.setName(uniqeName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    return new CopyCmdAnswer(details);
  }
}","@Override public Answer createTemplateFromSnapshot(CopyCommand cmd){
  SnapshotObjectTO snapshot=(SnapshotObjectTO)cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)cmd.getDestTO();
  DataStoreTO imageStore=template.getDataStore();
  String details;
  String uniqeName=UUID.randomUUID().toString();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    if (!(imageStore instanceof NfsTO)) {
      return new CopyCmdAnswer(""String_Node_Str"");
    }
    NfsTO nfsSvr=(NfsTO)imageStore;
    Ternary<String,Long,Long> result=createTemplateFromSnapshot(template.getPath(),uniqeName,nfsSvr.getUrl(),snapshot.getPath(),template.getId(),(long)cmd.getWait() * 1000);
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    newTemplate.setPath(result.first());
    newTemplate.setPhysicalSize(result.second());
    newTemplate.setSize(result.third());
    newTemplate.setFormat(ImageFormat.OVA);
    newTemplate.setName(uniqeName);
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    return new CopyCmdAnswer(details);
  }
}",0.9976544175136826
105488,"@Override public Answer copyVolumeFromImageCacheToPrimary(CopyCommand cmd){
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    NfsTO srcStore=(NfsTO)srcVolume.getDataStore();
    DataStoreTO destStore=destVolume.getDataStore();
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String uuid=destStore.getUuid();
    ManagedObjectReference morDatastore=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,uuid);
    if (morDatastore == null) {
      URI uri=new URI(destStore.getUrl());
      morDatastore=hyperHost.mountDatastore(false,uri.getHost(),0,uri.getPath(),destStore.getUuid().replace(""String_Node_Str"",""String_Node_Str""));
      if (morDatastore == null) {
        throw new Exception(""String_Node_Str"" + uri.getHost() + ""String_Node_Str""+ uri.getPath());
      }
    }
    Pair<String,String> result=copyVolumeFromSecStorage(hyperHost,srcVolume.getPath(),new DatastoreMO(context,morDatastore),srcStore.getUrl(),cmd.getWait() * 1000);
    deleteVolumeDirOnSecondaryStorage(result.first(),srcStore.getUrl());
    VolumeObjectTO newVolume=new VolumeObjectTO();
    newVolume.setPath(result.second());
    return new CopyCmdAnswer(newVolume);
  }
 catch (  Throwable t) {
    if (t instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"";
    s_logger.error(msg,t);
    return new CopyCmdAnswer(""String_Node_Str"" + VmwareHelper.getExceptionMessage(t));
  }
}","@Override public Answer copyVolumeFromImageCacheToPrimary(CopyCommand cmd){
  VolumeObjectTO srcVolume=(VolumeObjectTO)cmd.getSrcTO();
  VolumeObjectTO destVolume=(VolumeObjectTO)cmd.getDestTO();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    NfsTO srcStore=(NfsTO)srcVolume.getDataStore();
    DataStoreTO destStore=destVolume.getDataStore();
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String uuid=destStore.getUuid();
    ManagedObjectReference morDatastore=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,uuid);
    if (morDatastore == null) {
      URI uri=new URI(destStore.getUrl());
      morDatastore=hyperHost.mountDatastore(false,uri.getHost(),0,uri.getPath(),destStore.getUuid().replace(""String_Node_Str"",""String_Node_Str""));
      if (morDatastore == null) {
        throw new Exception(""String_Node_Str"" + uri.getHost() + ""String_Node_Str""+ uri.getPath());
      }
    }
    Pair<String,String> result=copyVolumeFromSecStorage(hyperHost,srcVolume.getPath(),new DatastoreMO(context,morDatastore),srcStore.getUrl(),(long)cmd.getWait() * 1000);
    deleteVolumeDirOnSecondaryStorage(result.first(),srcStore.getUrl());
    VolumeObjectTO newVolume=new VolumeObjectTO();
    newVolume.setPath(result.second());
    return new CopyCmdAnswer(newVolume);
  }
 catch (  Throwable t) {
    if (t instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"";
    s_logger.error(msg,t);
    return new CopyCmdAnswer(""String_Node_Str"" + VmwareHelper.getExceptionMessage(t));
  }
}",0.998149290561382
105489,"@Override public Answer createVolumeFromSnapshot(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataTO destData=cmd.getDestTO();
  DataStoreTO pool=destData.getDataStore();
  DataStoreTO imageStore=srcData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String primaryStorageNameLabel=pool.getUuid();
  String secondaryStorageUrl=nfsImageStore.getUrl();
  String backedUpSnapshotUuid=snapshot.getPath();
  int index=backedUpSnapshotUuid.lastIndexOf(File.separator);
  String backupPath=backedUpSnapshotUuid.substring(0,index);
  backedUpSnapshotUuid=backedUpSnapshotUuid.substring(index + 1);
  String details=null;
  String newVolumeName=VmwareHelper.getVCenterSafeUuid();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    ManagedObjectReference morPrimaryDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,primaryStorageNameLabel);
    if (morPrimaryDs == null) {
      String msg=""String_Node_Str"" + primaryStorageNameLabel;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
    DatastoreMO primaryDsMo=new DatastoreMO(hyperHost.getContext(),morPrimaryDs);
    restoreVolumeFromSecStorage(hyperHost,primaryDsMo,newVolumeName,secondaryStorageUrl,backupPath,backedUpSnapshotUuid,cmd.getWait() * 1000);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(newVolumeName);
    return new CopyCmdAnswer(newVol);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
  }
  return new CopyCmdAnswer(details);
}","@Override public Answer createVolumeFromSnapshot(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  SnapshotObjectTO snapshot=(SnapshotObjectTO)srcData;
  DataTO destData=cmd.getDestTO();
  DataStoreTO pool=destData.getDataStore();
  DataStoreTO imageStore=srcData.getDataStore();
  if (!(imageStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)imageStore;
  String primaryStorageNameLabel=pool.getUuid();
  String secondaryStorageUrl=nfsImageStore.getUrl();
  String backedUpSnapshotUuid=snapshot.getPath();
  int index=backedUpSnapshotUuid.lastIndexOf(File.separator);
  String backupPath=backedUpSnapshotUuid.substring(0,index);
  backedUpSnapshotUuid=backedUpSnapshotUuid.substring(index + 1);
  String details=null;
  String newVolumeName=VmwareHelper.getVCenterSafeUuid();
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    ManagedObjectReference morPrimaryDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,primaryStorageNameLabel);
    if (morPrimaryDs == null) {
      String msg=""String_Node_Str"" + primaryStorageNameLabel;
      s_logger.error(msg);
      throw new Exception(msg);
    }
    if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (backedUpSnapshotUuid.endsWith(""String_Node_Str"")) {
      backedUpSnapshotUuid=backedUpSnapshotUuid.replace(""String_Node_Str"",""String_Node_Str"");
    }
    DatastoreMO primaryDsMo=new DatastoreMO(hyperHost.getContext(),morPrimaryDs);
    restoreVolumeFromSecStorage(hyperHost,primaryDsMo,newVolumeName,secondaryStorageUrl,backupPath,backedUpSnapshotUuid,(long)cmd.getWait() * 1000);
    VolumeObjectTO newVol=new VolumeObjectTO();
    newVol.setPath(newVolumeName);
    return new CopyCmdAnswer(newVol);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    s_logger.error(""String_Node_Str"",e);
    details=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
  }
  return new CopyCmdAnswer(details);
}",0.9986559139784946
105490,"protected VDI cloudVDIcopy(Connection conn,VDI vdi,SR sr,int wait) throws Exception {
  Task task=null;
  if (wait == 0) {
    wait=2 * 60 * 60;
  }
  try {
    task=vdi.copyAsync(conn,sr);
    waitForTask(conn,task,1000,wait * 1000);
    checkForSuccess(conn,task);
    VDI dvdi=Types.toVDI(task,conn);
    return dvdi;
  }
  finally {
    if (task != null) {
      try {
        task.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + task.toString() + ""String_Node_Str""+ _host.uuid+ ""String_Node_Str""+ e.toString());
      }
    }
  }
}","protected VDI cloudVDIcopy(Connection conn,VDI vdi,SR sr,int wait) throws Exception {
  Task task=null;
  if (wait == 0) {
    wait=2 * 60 * 60;
  }
  try {
    task=vdi.copyAsync(conn,sr);
    waitForTask(conn,task,1000,(long)wait * 1000);
    checkForSuccess(conn,task);
    VDI dvdi=Types.toVDI(task,conn);
    return dvdi;
  }
  finally {
    if (task != null) {
      try {
        task.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + task.toString() + ""String_Node_Str""+ _host.uuid+ ""String_Node_Str""+ e.toString());
      }
    }
  }
}",0.9948805460750854
105491,"@Override public boolean configure(final String name,final Map<String,Object> xmlParams) throws ConfigurationException {
  _serverId=_msServer.getId();
  Map<String,String> params=new HashMap<String,String>();
  params=_configDao.getConfiguration(Long.toHexString(_serverId),xmlParams);
  String value=params.get(Config.HAWorkers.key());
  final int count=NumbersUtil.parseInt(value,1);
  _workers=new WorkerThread[count];
  for (int i=0; i < _workers.length; i++) {
    _workers[i]=new WorkerThread(""String_Node_Str"" + i);
  }
  value=params.get(""String_Node_Str"");
  _forceHA=Boolean.parseBoolean(value);
  value=params.get(""String_Node_Str"");
  _timeToSleep=NumbersUtil.parseInt(value,60) * 1000;
  value=params.get(""String_Node_Str"");
  _maxRetries=NumbersUtil.parseInt(value,5);
  value=params.get(""String_Node_Str"");
  _timeBetweenFailures=NumbersUtil.parseLong(value,3600) * 1000;
  value=params.get(""String_Node_Str"");
  _timeBetweenCleanups=NumbersUtil.parseLong(value,3600 * 24);
  value=params.get(""String_Node_Str"");
  _stopRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _restartRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _investigateRetryInterval=NumbersUtil.parseInt(value,1 * 60);
  value=params.get(""String_Node_Str"");
  _migrateRetryInterval=NumbersUtil.parseInt(value,2 * 60);
  _instance=params.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  _haTag=params.get(""String_Node_Str"");
  _haDao.releaseWorkItems(_serverId);
  _stopped=true;
  _executor=Executors.newScheduledThreadPool(count,new NamedThreadFactory(""String_Node_Str""));
  return true;
}","@Override public boolean configure(final String name,final Map<String,Object> xmlParams) throws ConfigurationException {
  _serverId=_msServer.getId();
  Map<String,String> params=new HashMap<String,String>();
  params=_configDao.getConfiguration(Long.toHexString(_serverId),xmlParams);
  String value=params.get(Config.HAWorkers.key());
  final int count=NumbersUtil.parseInt(value,1);
  _workers=new WorkerThread[count];
  for (int i=0; i < _workers.length; i++) {
    _workers[i]=new WorkerThread(""String_Node_Str"" + i);
  }
  value=params.get(""String_Node_Str"");
  _forceHA=Boolean.parseBoolean(value);
  value=params.get(""String_Node_Str"");
  _timeToSleep=(long)NumbersUtil.parseInt(value,60) * 1000;
  value=params.get(""String_Node_Str"");
  _maxRetries=NumbersUtil.parseInt(value,5);
  value=params.get(""String_Node_Str"");
  _timeBetweenFailures=NumbersUtil.parseLong(value,3600) * 1000;
  value=params.get(""String_Node_Str"");
  _timeBetweenCleanups=NumbersUtil.parseLong(value,3600 * 24);
  value=params.get(""String_Node_Str"");
  _stopRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _restartRetryInterval=NumbersUtil.parseInt(value,10 * 60);
  value=params.get(""String_Node_Str"");
  _investigateRetryInterval=NumbersUtil.parseInt(value,1 * 60);
  value=params.get(""String_Node_Str"");
  _migrateRetryInterval=NumbersUtil.parseInt(value,2 * 60);
  _instance=params.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  _haTag=params.get(""String_Node_Str"");
  _haDao.releaseWorkItems(_serverId);
  _stopped=true;
  _executor=Executors.newScheduledThreadPool(count,new NamedThreadFactory(""String_Node_Str""));
  return true;
}",0.9982404692082112
105492,"public static void setBasicVmConfig(VirtualMachineConfigSpec vmConfig,int cpuCount,int cpuSpeedMHz,int cpuReservedMhz,int memoryMB,int memoryReserveMB,String guestOsIdentifier,boolean limitCpuUse){
  vmConfig.setMemoryMB((long)memoryMB);
  vmConfig.setNumCPUs(cpuCount);
  ResourceAllocationInfo cpuInfo=new ResourceAllocationInfo();
  if (limitCpuUse) {
    cpuInfo.setLimit((long)(cpuSpeedMHz * cpuCount));
  }
 else {
    cpuInfo.setLimit(-1L);
  }
  cpuInfo.setReservation((long)cpuReservedMhz);
  vmConfig.setCpuAllocation(cpuInfo);
  if (cpuSpeedMHz != cpuReservedMhz) {
    vmConfig.setCpuHotAddEnabled(true);
  }
  if (memoryMB != memoryReserveMB) {
    vmConfig.setMemoryHotAddEnabled(true);
  }
  ResourceAllocationInfo memInfo=new ResourceAllocationInfo();
  memInfo.setLimit((long)memoryMB);
  memInfo.setReservation((long)memoryReserveMB);
  vmConfig.setMemoryAllocation(memInfo);
  vmConfig.setGuestId(guestOsIdentifier);
}","public static void setBasicVmConfig(VirtualMachineConfigSpec vmConfig,int cpuCount,int cpuSpeedMHz,int cpuReservedMhz,int memoryMB,int memoryReserveMB,String guestOsIdentifier,boolean limitCpuUse){
  vmConfig.setMemoryMB((long)memoryMB);
  vmConfig.setNumCPUs(cpuCount);
  ResourceAllocationInfo cpuInfo=new ResourceAllocationInfo();
  if (limitCpuUse) {
    cpuInfo.setLimit(((long)cpuSpeedMHz * cpuCount));
  }
 else {
    cpuInfo.setLimit(-1L);
  }
  cpuInfo.setReservation((long)cpuReservedMhz);
  vmConfig.setCpuAllocation(cpuInfo);
  if (cpuSpeedMHz != cpuReservedMhz) {
    vmConfig.setCpuHotAddEnabled(true);
  }
  if (memoryMB != memoryReserveMB) {
    vmConfig.setMemoryHotAddEnabled(true);
  }
  ResourceAllocationInfo memInfo=new ResourceAllocationInfo();
  memInfo.setLimit((long)memoryMB);
  memInfo.setReservation((long)memoryReserveMB);
  vmConfig.setMemoryAllocation(memInfo);
  vmConfig.setGuestId(guestOsIdentifier);
}",0.9935965848452508
105493,"@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setCluster(_cluster);
  cmd.setPoolSync(false);
  Pool pool;
  try {
    pool=Pool.getByUuid(conn,_host.pool);
    Pool.Record poolr=pool.getRecord(conn);
    Host.Record hostr=poolr.master.getRecord(conn);
  }
 catch (  Throwable e) {
    s_logger.warn(""String_Node_Str"");
  }
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}","@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setCluster(_cluster);
  cmd.setPoolSync(false);
  try {
    Pool pool=Pool.getByUuid(conn,_host.pool);
    Pool.Record poolr=pool.getRecord(conn);
    poolr.master.getRecord(conn);
  }
 catch (  Throwable e) {
    s_logger.warn(""String_Node_Str"");
  }
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}",0.9705882352941176
105494,"@Override public Pair<List<? extends NetworkOffering>,Integer> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,null,null);
  Account caller=CallContext.current().getCallingAccount();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  String tags=cmd.getTags();
  Boolean isTagged=cmd.isTagged();
  Boolean forVpc=cmd.getForVpc();
  if (zoneId != null) {
    zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  Network network=null;
  if (networkId != null) {
    network=_networkModel.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkModel.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (tags != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags);
  }
  if (isTagged != null) {
    if (isTagged) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NNULL);
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
    }
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  List<String> pNtwkTags=new ArrayList<String>();
  boolean checkForTags=false;
  if (zone != null) {
    List<PhysicalNetworkVO> pNtwks=_physicalNetworkDao.listByZoneAndTrafficType(zoneId,TrafficType.Guest);
    if (pNtwks.size() > 1) {
      checkForTags=true;
      for (      PhysicalNetworkVO pNtwk : pNtwks) {
        List<String> pNtwkTag=pNtwk.getTags();
        if (pNtwkTag == null || pNtwkTag.isEmpty()) {
          throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
        }
        pNtwkTags.addAll(pNtwkTag);
      }
    }
  }
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (checkForTags) {
        if (!pNtwkTags.contains(offering.getTags())) {
          continue;
        }
      }
      if (listBySupportedServices) {
        addOffering=addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkModel.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkModel.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkModel.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (forVpc != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == forVpc.booleanValue());
      }
 else       if (network != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == (network.getVpcId() != null));
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(supportedOfferings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(supportedOfferings,supportedOfferings.size());
  }
 else {
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(offerings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(offerings,offerings.size());
  }
}","@Override public Pair<List<? extends NetworkOffering>,Integer> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? Boolean.TRUE : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,null,null);
  Account caller=CallContext.current().getCallingAccount();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  String tags=cmd.getTags();
  Boolean isTagged=cmd.isTagged();
  Boolean forVpc=cmd.getForVpc();
  if (zoneId != null) {
    zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  Network network=null;
  if (networkId != null) {
    network=_networkModel.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkModel.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (tags != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags);
  }
  if (isTagged != null) {
    if (isTagged) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NNULL);
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
    }
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  List<String> pNtwkTags=new ArrayList<String>();
  boolean checkForTags=false;
  if (zone != null) {
    List<PhysicalNetworkVO> pNtwks=_physicalNetworkDao.listByZoneAndTrafficType(zoneId,TrafficType.Guest);
    if (pNtwks.size() > 1) {
      checkForTags=true;
      for (      PhysicalNetworkVO pNtwk : pNtwks) {
        List<String> pNtwkTag=pNtwk.getTags();
        if (pNtwkTag == null || pNtwkTag.isEmpty()) {
          throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
        }
        pNtwkTags.addAll(pNtwkTag);
      }
    }
  }
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (checkForTags) {
        if (!pNtwkTags.contains(offering.getTags())) {
          continue;
        }
      }
      if (listBySupportedServices) {
        addOffering=addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkModel.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkModel.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkModel.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (forVpc != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == forVpc.booleanValue());
      }
 else       if (network != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == (network.getVpcId() != null));
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(supportedOfferings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(supportedOfferings,supportedOfferings.size());
  }
 else {
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(offerings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(offerings,offerings.size());
  }
}",0.9990113692535838
105495,"void validateSourceNatServiceCapablities(Map<Capability,String> sourceNatServiceCapabilityMap){
  if (sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
    if (sourceNatServiceCapabilityMap.keySet().size() > 2) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
    }
    for (    Capability capability : sourceNatServiceCapabilityMap.keySet()) {
      String value=sourceNatServiceCapabilityMap.get(capability);
      if (capability == Capability.SupportedSourceNatTypes) {
        boolean perAccount=value.contains(""String_Node_Str"");
        boolean perZone=value.contains(""String_Node_Str"");
        if ((perAccount && perZone) || (!perAccount && !perZone)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName());
        }
      }
 else       if (capability == Capability.RedundantRouter) {
        boolean enabled=value.contains(""String_Node_Str"");
        boolean disabled=value.contains(""String_Node_Str"");
        if (!enabled && !disabled) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.RedundantRouter.getName());
        }
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
      }
    }
  }
}","void validateSourceNatServiceCapablities(Map<Capability,String> sourceNatServiceCapabilityMap){
  if (sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
    if (sourceNatServiceCapabilityMap.keySet().size() > 2) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
    }
    for (    Map.Entry<Capability,String> srcNatPair : sourceNatServiceCapabilityMap.entrySet()) {
      Capability capability=srcNatPair.getKey();
      String value=srcNatPair.getValue();
      if (capability == Capability.SupportedSourceNatTypes) {
        boolean perAccount=value.contains(""String_Node_Str"");
        boolean perZone=value.contains(""String_Node_Str"");
        if ((perAccount && perZone) || (!perAccount && !perZone)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName());
        }
      }
 else       if (capability == Capability.RedundantRouter) {
        boolean enabled=value.contains(""String_Node_Str"");
        boolean disabled=value.contains(""String_Node_Str"");
        if (!enabled && !disabled) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.RedundantRouter.getName());
        }
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
      }
    }
  }
}",0.93488824101069
105496,"String createSyslogMessage(){
  StringBuilder message=new StringBuilder();
  message.append(severityOfAlert(alertType)).append(MESSAGE_DELIMITER_STRING);
  InetAddress ip;
  try {
    ip=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    ip=null;
  }
  if (ip != null) {
    message.append(ip.getHostName()).append(MESSAGE_DELIMITER_STRING);
  }
 else {
    message.append(""String_Node_Str"" + MESSAGE_DELIMITER_STRING);
  }
  if (alertType >= 0) {
    message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(alertsMap.get(alertType)).append(MESSAGE_DELIMITER_STRING);
    if (dataCenterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(dataCenterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (podId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(podId).append(MESSAGE_DELIMITER_STRING);
    }
    if (clusterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(clusterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (sysMessage != null) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(sysMessage);
    }
 else {
      errorHandler.error(""String_Node_Str"");
    }
  }
 else {
    errorHandler.error(""String_Node_Str"");
  }
  return message.toString();
}","String createSyslogMessage(){
  StringBuilder message=new StringBuilder();
  message.append(severityOfAlert(alertType)).append(MESSAGE_DELIMITER_STRING);
  InetAddress ip;
  try {
    ip=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    ip=null;
  }
  if (ip != null) {
    message.append(ip.getHostName()).append(MESSAGE_DELIMITER_STRING);
  }
 else {
    message.append(""String_Node_Str"" + MESSAGE_DELIMITER_STRING);
  }
  if (alertType >= 0) {
    message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(alertsMap.containsKey(alertType) ? alertsMap.get(alertType) : ""String_Node_Str"").append(MESSAGE_DELIMITER_STRING);
    if (dataCenterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(dataCenterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (podId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(podId).append(MESSAGE_DELIMITER_STRING);
    }
    if (clusterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(clusterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (sysMessage != null) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(sysMessage);
    }
 else {
      errorHandler.error(""String_Node_Str"");
    }
  }
 else {
    errorHandler.error(""String_Node_Str"");
  }
  return message.toString();
}",0.972644376899696
105497,"@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setCluster(_cluster);
  cmd.setPoolSync(false);
  Pool pool;
  try {
    pool=Pool.getByUuid(conn,_host.pool);
    Pool.Record poolr=pool.getRecord(conn);
    Host.Record hostr=poolr.master.getRecord(conn);
  }
 catch (  Throwable e) {
    s_logger.warn(""String_Node_Str"");
  }
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}","@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setCluster(_cluster);
  cmd.setPoolSync(false);
  try {
    Pool pool=Pool.getByUuid(conn,_host.pool);
    Pool.Record poolr=pool.getRecord(conn);
    poolr.master.getRecord(conn);
  }
 catch (  Throwable e) {
    s_logger.warn(""String_Node_Str"");
  }
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}",0.9705882352941176
105498,"@Override public Pair<List<? extends NetworkOffering>,Integer> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,null,null);
  Account caller=CallContext.current().getCallingAccount();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  String tags=cmd.getTags();
  Boolean isTagged=cmd.isTagged();
  Boolean forVpc=cmd.getForVpc();
  if (zoneId != null) {
    zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  Network network=null;
  if (networkId != null) {
    network=_networkModel.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkModel.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (tags != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags);
  }
  if (isTagged != null) {
    if (isTagged) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NNULL);
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
    }
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  List<String> pNtwkTags=new ArrayList<String>();
  boolean checkForTags=false;
  if (zone != null) {
    List<PhysicalNetworkVO> pNtwks=_physicalNetworkDao.listByZoneAndTrafficType(zoneId,TrafficType.Guest);
    if (pNtwks.size() > 1) {
      checkForTags=true;
      for (      PhysicalNetworkVO pNtwk : pNtwks) {
        List<String> pNtwkTag=pNtwk.getTags();
        if (pNtwkTag == null || pNtwkTag.isEmpty()) {
          throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
        }
        pNtwkTags.addAll(pNtwkTag);
      }
    }
  }
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (checkForTags) {
        if (!pNtwkTags.contains(offering.getTags())) {
          continue;
        }
      }
      if (listBySupportedServices) {
        addOffering=addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkModel.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkModel.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkModel.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (forVpc != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == forVpc.booleanValue());
      }
 else       if (network != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == (network.getVpcId() != null));
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(supportedOfferings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(supportedOfferings,supportedOfferings.size());
  }
 else {
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(offerings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(offerings,offerings.size());
  }
}","@Override public Pair<List<? extends NetworkOffering>,Integer> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? Boolean.TRUE : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,null,null);
  Account caller=CallContext.current().getCallingAccount();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  String tags=cmd.getTags();
  Boolean isTagged=cmd.isTagged();
  Boolean forVpc=cmd.getForVpc();
  if (zoneId != null) {
    zone=_entityMgr.findById(DataCenter.class,zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  Network network=null;
  if (networkId != null) {
    network=_networkModel.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkModel.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new Pair<List<? extends NetworkOffering>,Integer>(new ArrayList<NetworkOffering>(),0);
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (tags != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags);
  }
  if (isTagged != null) {
    if (isTagged) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NNULL);
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
    }
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  List<String> pNtwkTags=new ArrayList<String>();
  boolean checkForTags=false;
  if (zone != null) {
    List<PhysicalNetworkVO> pNtwks=_physicalNetworkDao.listByZoneAndTrafficType(zoneId,TrafficType.Guest);
    if (pNtwks.size() > 1) {
      checkForTags=true;
      for (      PhysicalNetworkVO pNtwk : pNtwks) {
        List<String> pNtwkTag=pNtwk.getTags();
        if (pNtwkTag == null || pNtwkTag.isEmpty()) {
          throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
        }
        pNtwkTags.addAll(pNtwkTag);
      }
    }
  }
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled || forVpc != null || network != null);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (checkForTags) {
        if (!pNtwkTags.contains(offering.getTags())) {
          continue;
        }
      }
      if (listBySupportedServices) {
        addOffering=addOffering && _networkModel.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkModel.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkModel.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkModel.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (forVpc != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == forVpc.booleanValue());
      }
 else       if (network != null) {
        addOffering=addOffering && (isOfferingForVpc(offering) == (network.getVpcId() != null));
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(supportedOfferings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(supportedOfferings,supportedOfferings.size());
  }
 else {
    List<? extends NetworkOffering> wPagination=StringUtils.applyPagination(offerings,cmd.getStartIndex(),cmd.getPageSizeVal());
    if (wPagination != null) {
      Pair<List<? extends NetworkOffering>,Integer> listWPagination=new Pair<List<? extends NetworkOffering>,Integer>(wPagination,offerings.size());
      return listWPagination;
    }
    return new Pair<List<? extends NetworkOffering>,Integer>(offerings,offerings.size());
  }
}",0.9990113692535838
105499,"void validateSourceNatServiceCapablities(Map<Capability,String> sourceNatServiceCapabilityMap){
  if (sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
    if (sourceNatServiceCapabilityMap.keySet().size() > 2) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
    }
    for (    Capability capability : sourceNatServiceCapabilityMap.keySet()) {
      String value=sourceNatServiceCapabilityMap.get(capability);
      if (capability == Capability.SupportedSourceNatTypes) {
        boolean perAccount=value.contains(""String_Node_Str"");
        boolean perZone=value.contains(""String_Node_Str"");
        if ((perAccount && perZone) || (!perAccount && !perZone)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName());
        }
      }
 else       if (capability == Capability.RedundantRouter) {
        boolean enabled=value.contains(""String_Node_Str"");
        boolean disabled=value.contains(""String_Node_Str"");
        if (!enabled && !disabled) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.RedundantRouter.getName());
        }
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
      }
    }
  }
}","void validateSourceNatServiceCapablities(Map<Capability,String> sourceNatServiceCapabilityMap){
  if (sourceNatServiceCapabilityMap != null && !sourceNatServiceCapabilityMap.isEmpty()) {
    if (sourceNatServiceCapabilityMap.keySet().size() > 2) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
    }
    for (    Map.Entry<Capability,String> srcNatPair : sourceNatServiceCapabilityMap.entrySet()) {
      Capability capability=srcNatPair.getKey();
      String value=srcNatPair.getValue();
      if (capability == Capability.SupportedSourceNatTypes) {
        boolean perAccount=value.contains(""String_Node_Str"");
        boolean perZone=value.contains(""String_Node_Str"");
        if ((perAccount && perZone) || (!perAccount && !perZone)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName());
        }
      }
 else       if (capability == Capability.RedundantRouter) {
        boolean enabled=value.contains(""String_Node_Str"");
        boolean disabled=value.contains(""String_Node_Str"");
        if (!enabled && !disabled) {
          throw new InvalidParameterValueException(""String_Node_Str"" + Capability.RedundantRouter.getName());
        }
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + Capability.SupportedSourceNatTypes.getName() + ""String_Node_Str""+ Capability.RedundantRouter+ ""String_Node_Str"");
      }
    }
  }
}",0.93488824101069
105500,"@Override public KVMStoragePool getStoragePool(String uuid,boolean refreshInfo){
  s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
  StoragePool storage=null;
  try {
    Connect conn=LibvirtConnection.getConnection();
    storage=conn.storagePoolLookupByUUIDString(uuid);
    if (storage.getInfo().state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
      storage.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,storage);
    if (spd == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + uuid);
    }
    StoragePoolType type=null;
    if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.NETFS) {
      type=StoragePoolType.NetworkFilesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.DIR) {
      type=StoragePoolType.Filesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.RBD) {
      type=StoragePoolType.RBD;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.LOGICAL) {
      type=StoragePoolType.CLVM;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.GLUSTERFS) {
      type=StoragePoolType.Gluster;
    }
    LibvirtStoragePool pool=new LibvirtStoragePool(uuid,storage.getName(),type,this,storage);
    if (pool.getType() != StoragePoolType.RBD)     pool.setLocalPath(spd.getTargetPath());
 else     pool.setLocalPath(""String_Node_Str"");
    if (pool.getType() == StoragePoolType.RBD || pool.getType() == StoragePoolType.Gluster) {
      pool.setSourceHost(spd.getSourceHost());
      pool.setSourcePort(spd.getSourcePort());
      pool.setSourceDir(spd.getSourceDir());
      String authUsername=spd.getAuthUserName();
      if (authUsername != null) {
        Secret secret=conn.secretLookupByUUIDString(spd.getSecretUUID());
        String secretValue=new String(Base64.encodeBase64(secret.getByteValue()));
        pool.setAuthUsername(authUsername);
        pool.setAuthSecret(secretValue);
      }
    }
    if (refreshInfo) {
      pool.refresh();
    }
    pool.setCapacity(storage.getInfo().capacity);
    pool.setUsed(storage.getInfo().allocation);
    pool.setAvailable(storage.getInfo().available);
    return pool;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
    throw new CloudRuntimeException(e.toString(),e);
  }
}","@Override public KVMStoragePool getStoragePool(String uuid,boolean refreshInfo){
  s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
  StoragePool storage=null;
  try {
    Connect conn=LibvirtConnection.getConnection();
    storage=conn.storagePoolLookupByUUIDString(uuid);
    if (storage.getInfo().state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
      storage.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,storage);
    if (spd == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + uuid);
    }
    StoragePoolType type=null;
    if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.NETFS) {
      type=StoragePoolType.NetworkFilesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.DIR) {
      type=StoragePoolType.Filesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.RBD) {
      type=StoragePoolType.RBD;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.LOGICAL) {
      type=StoragePoolType.CLVM;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.GLUSTERFS) {
      type=StoragePoolType.Gluster;
    }
    LibvirtStoragePool pool=new LibvirtStoragePool(uuid,storage.getName(),type,this,storage);
    if (pool.getType() != StoragePoolType.RBD)     pool.setLocalPath(spd.getTargetPath());
 else     pool.setLocalPath(""String_Node_Str"");
    if (pool.getType() == StoragePoolType.RBD || pool.getType() == StoragePoolType.Gluster) {
      pool.setSourceHost(spd.getSourceHost());
      pool.setSourcePort(spd.getSourcePort());
      pool.setSourceDir(spd.getSourceDir());
      String authUsername=spd.getAuthUserName();
      if (authUsername != null) {
        Secret secret=conn.secretLookupByUUIDString(spd.getSecretUUID());
        String secretValue=new String(Base64.encodeBase64(secret.getByteValue()),Charset.defaultCharset());
        pool.setAuthUsername(authUsername);
        pool.setAuthSecret(secretValue);
      }
    }
    if (refreshInfo) {
      pool.refresh();
    }
    pool.setCapacity(storage.getInfo().capacity);
    pool.setUsed(storage.getInfo().allocation);
    pool.setAvailable(storage.getInfo().available);
    return pool;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
    throw new CloudRuntimeException(e.toString(),e);
  }
}",0.9948696901292838
105501,"private List<VolumeTask> getTasks(List<VolumeVO> vols,Map<Volume,StoragePool> destVols,VirtualMachineProfile vm) throws StorageUnavailableException {
  boolean recreate=RecreatableSystemVmEnabled.value();
  List<VolumeTask> tasks=new ArrayList<VolumeTask>();
  for (  VolumeVO vol : vols) {
    StoragePoolVO assignedPool=null;
    if (destVols != null) {
      StoragePool pool=destVols.get(vol);
      if (pool != null) {
        assignedPool=_storagePoolDao.findById(pool.getId());
      }
    }
    if (assignedPool == null && recreate) {
      assignedPool=_storagePoolDao.findById(vol.getPoolId());
    }
    if (assignedPool != null || recreate) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated || state == Volume.State.Creating) {
        VolumeTask task=new VolumeTask(VolumeTaskType.RECREATE,vol,null);
        tasks.add(task);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
          }
          VolumeTask task=new VolumeTask(VolumeTaskType.RECREATE,vol,null);
          tasks.add(task);
        }
 else {
          if (assignedPool.getId() != vol.getPoolId()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + assignedPool + ""String_Node_Str""+ vol);
            }
            DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,vol.getDiskOfferingId());
            if (diskOffering.getUseLocalStorage()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
              }
              throw new CloudRuntimeException(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
            }
 else {
              Boolean isHAOperation=(Boolean)vm.getParameter(VirtualMachineProfile.Param.HaOperation);
              Boolean storageMigrationEnabled=true;
              if (isHAOperation != null && isHAOperation) {
                storageMigrationEnabled=StorageHAMigrationEnabled.value();
              }
 else {
                storageMigrationEnabled=StorageMigrationEnabled.value();
              }
              if (storageMigrationEnabled) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
                }
                VolumeTask task=new VolumeTask(VolumeTaskType.MIGRATE,vol,assignedPool);
                tasks.add(task);
              }
 else {
                throw new CloudRuntimeException(""String_Node_Str"");
              }
            }
          }
 else {
            StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
            VolumeTask task=new VolumeTask(VolumeTaskType.NOP,vol,pool);
            tasks.add(task);
          }
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ vol.getPoolId()+ ""String_Node_Str"");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      VolumeTask task=new VolumeTask(VolumeTaskType.NOP,vol,pool);
      tasks.add(task);
    }
  }
  return tasks;
}","private List<VolumeTask> getTasks(List<VolumeVO> vols,Map<Volume,StoragePool> destVols,VirtualMachineProfile vm) throws StorageUnavailableException {
  boolean recreate=RecreatableSystemVmEnabled.value();
  List<VolumeTask> tasks=new ArrayList<VolumeTask>();
  for (  VolumeVO vol : vols) {
    StoragePoolVO assignedPool=null;
    if (destVols != null) {
      StoragePool pool=destVols.get(vol);
      if (pool != null) {
        assignedPool=_storagePoolDao.findById(pool.getId());
      }
    }
    if (assignedPool == null && recreate) {
      assignedPool=_storagePoolDao.findById(vol.getPoolId());
    }
    if (assignedPool != null) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated || state == Volume.State.Creating) {
        VolumeTask task=new VolumeTask(VolumeTaskType.RECREATE,vol,null);
        tasks.add(task);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
          }
          VolumeTask task=new VolumeTask(VolumeTaskType.RECREATE,vol,null);
          tasks.add(task);
        }
 else {
          if (assignedPool.getId() != vol.getPoolId()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + assignedPool + ""String_Node_Str""+ vol);
            }
            DiskOffering diskOffering=_entityMgr.findById(DiskOffering.class,vol.getDiskOfferingId());
            if (diskOffering.getUseLocalStorage()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
              }
              throw new CloudRuntimeException(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
            }
 else {
              Boolean isHAOperation=(Boolean)vm.getParameter(VirtualMachineProfile.Param.HaOperation);
              Boolean storageMigrationEnabled=true;
              if (isHAOperation != null && isHAOperation) {
                storageMigrationEnabled=StorageHAMigrationEnabled.value();
              }
 else {
                storageMigrationEnabled=StorageMigrationEnabled.value();
              }
              if (storageMigrationEnabled) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
                }
                VolumeTask task=new VolumeTask(VolumeTaskType.MIGRATE,vol,assignedPool);
                tasks.add(task);
              }
 else {
                throw new CloudRuntimeException(""String_Node_Str"");
              }
            }
          }
 else {
            StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
            VolumeTask task=new VolumeTask(VolumeTaskType.NOP,vol,pool);
            tasks.add(task);
          }
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ vol.getPoolId()+ ""String_Node_Str"");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      VolumeTask task=new VolumeTask(VolumeTaskType.NOP,vol,pool);
      tasks.add(task);
    }
  }
  return tasks;
}",0.9982718894009216
105502,"@Override public KVMStoragePool getStoragePool(String uuid,boolean refreshInfo){
  s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
  StoragePool storage=null;
  try {
    Connect conn=LibvirtConnection.getConnection();
    storage=conn.storagePoolLookupByUUIDString(uuid);
    if (storage.getInfo().state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
      storage.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,storage);
    StoragePoolType type=null;
    if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.NETFS) {
      type=StoragePoolType.NetworkFilesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.DIR) {
      type=StoragePoolType.Filesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.RBD) {
      type=StoragePoolType.RBD;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.LOGICAL) {
      type=StoragePoolType.CLVM;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.GLUSTERFS) {
      type=StoragePoolType.Gluster;
    }
    LibvirtStoragePool pool=new LibvirtStoragePool(uuid,storage.getName(),type,this,storage);
    if (pool.getType() != StoragePoolType.RBD)     pool.setLocalPath(spd.getTargetPath());
 else     pool.setLocalPath(""String_Node_Str"");
    if (pool.getType() == StoragePoolType.RBD || pool.getType() == StoragePoolType.Gluster) {
      pool.setSourceHost(spd.getSourceHost());
      pool.setSourcePort(spd.getSourcePort());
      pool.setSourceDir(spd.getSourceDir());
      String authUsername=spd.getAuthUserName();
      if (authUsername != null) {
        Secret secret=conn.secretLookupByUUIDString(spd.getSecretUUID());
        String secretValue=new String(Base64.encodeBase64(secret.getByteValue()));
        pool.setAuthUsername(authUsername);
        pool.setAuthSecret(secretValue);
      }
    }
    if (refreshInfo) {
      pool.refresh();
    }
    pool.setCapacity(storage.getInfo().capacity);
    pool.setUsed(storage.getInfo().allocation);
    pool.setAvailable(storage.getInfo().available);
    return pool;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
    throw new CloudRuntimeException(e.toString(),e);
  }
}","@Override public KVMStoragePool getStoragePool(String uuid,boolean refreshInfo){
  s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
  StoragePool storage=null;
  try {
    Connect conn=LibvirtConnection.getConnection();
    storage=conn.storagePoolLookupByUUIDString(uuid);
    if (storage.getInfo().state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
      storage.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,storage);
    if (spd == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + uuid);
    }
    StoragePoolType type=null;
    if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.NETFS) {
      type=StoragePoolType.NetworkFilesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.DIR) {
      type=StoragePoolType.Filesystem;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.RBD) {
      type=StoragePoolType.RBD;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.LOGICAL) {
      type=StoragePoolType.CLVM;
    }
 else     if (spd.getPoolType() == LibvirtStoragePoolDef.poolType.GLUSTERFS) {
      type=StoragePoolType.Gluster;
    }
    LibvirtStoragePool pool=new LibvirtStoragePool(uuid,storage.getName(),type,this,storage);
    if (pool.getType() != StoragePoolType.RBD)     pool.setLocalPath(spd.getTargetPath());
 else     pool.setLocalPath(""String_Node_Str"");
    if (pool.getType() == StoragePoolType.RBD || pool.getType() == StoragePoolType.Gluster) {
      pool.setSourceHost(spd.getSourceHost());
      pool.setSourcePort(spd.getSourcePort());
      pool.setSourceDir(spd.getSourceDir());
      String authUsername=spd.getAuthUserName();
      if (authUsername != null) {
        Secret secret=conn.secretLookupByUUIDString(spd.getSecretUUID());
        String secretValue=new String(Base64.encodeBase64(secret.getByteValue()));
        pool.setAuthUsername(authUsername);
        pool.setAuthSecret(secretValue);
      }
    }
    if (refreshInfo) {
      pool.refresh();
    }
    pool.setCapacity(storage.getInfo().capacity);
    pool.setUsed(storage.getInfo().allocation);
    pool.setAvailable(storage.getInfo().available);
    return pool;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + uuid + ""String_Node_Str"");
    throw new CloudRuntimeException(e.toString(),e);
  }
}",0.9802271771140092
105503,"private KVMPhysicalDisk createPhysicalDiskOnRBD(String name,KVMStoragePool pool,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size){
  String volPath=null;
  try {
    s_logger.info(""String_Node_Str"" + pool.getSourceDir() + ""String_Node_Str""+ name+ ""String_Node_Str""+ size);
    Rados r=new Rados(pool.getAuthUserName());
    r.confSet(""String_Node_Str"",pool.getSourceHost() + ""String_Node_Str"" + pool.getSourcePort());
    r.confSet(""String_Node_Str"",pool.getAuthSecret());
    r.confSet(""String_Node_Str"",""String_Node_Str"");
    r.connect();
    s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
    IoCTX io=r.ioCtxCreate(pool.getSourceDir());
    Rbd rbd=new Rbd(io);
    rbd.create(name,size,this.rbdFeatures,this.rbdOrder);
    r.ioCtxDestroy(io);
  }
 catch (  RadosException e) {
    throw new CloudRuntimeException(e.toString());
  }
catch (  RbdException e) {
    throw new CloudRuntimeException(e.toString());
  }
  volPath=pool.getSourceDir() + ""String_Node_Str"" + name;
  KVMPhysicalDisk disk=new KVMPhysicalDisk(volPath,name,pool);
  disk.setFormat(PhysicalDiskFormat.RAW);
  disk.setSize(size);
  disk.setVirtualSize(size);
  return disk;
}","private KVMPhysicalDisk createPhysicalDiskOnRBD(String name,KVMStoragePool pool,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size){
  String volPath=null;
  try {
    s_logger.info(""String_Node_Str"" + pool.getSourceDir() + ""String_Node_Str""+ name+ ""String_Node_Str""+ size);
    Rados r=new Rados(pool.getAuthUserName());
    r.confSet(""String_Node_Str"",pool.getSourceHost() + ""String_Node_Str"" + pool.getSourcePort());
    r.confSet(""String_Node_Str"",pool.getAuthSecret());
    r.confSet(""String_Node_Str"",""String_Node_Str"");
    r.connect();
    s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
    IoCTX io=r.ioCtxCreate(pool.getSourceDir());
    Rbd rbd=new Rbd(io);
    rbd.create(name,size,rbdFeatures,rbdOrder);
    r.ioCtxDestroy(io);
  }
 catch (  RadosException e) {
    throw new CloudRuntimeException(e.toString());
  }
catch (  RbdException e) {
    throw new CloudRuntimeException(e.toString());
  }
  volPath=pool.getSourceDir() + ""String_Node_Str"" + name;
  KVMPhysicalDisk disk=new KVMPhysicalDisk(volPath,name,pool);
  disk.setFormat(PhysicalDiskFormat.RAW);
  disk.setSize(size);
  disk.setVirtualSize(size);
  return disk;
}",0.9958088851634534
105504,"/** 
 * This copies a volume from Primary Storage to Secondary Storage In theory it could also do it the other way around, but the current implementation in ManagementServerImpl shows that the destPool is always a Secondary Storage Pool
 */
@Override public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  s_logger.debug(""String_Node_Str"" + disk.getSize() + ""String_Node_Str""+ disk.getVirtualSize()+ ""String_Node_Str""+ disk.getFormat());
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,Storage.ProvisioningType.THIN,disk.getVirtualSize());
    }
 else {
      if (srcPool.getType() != StoragePoolType.RBD) {
        newDisk=destPool.createPhysicalDisk(name,Storage.ProvisioningType.THIN,disk.getVirtualSize());
      }
 else {
        newDisk=destPool.createPhysicalDisk(name,Storage.ProvisioningType.THIN,disk.getVirtualSize());
      }
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR && destFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath);
    }
 else     if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String(""String_Node_Str""));
        if (sourceFormat.equals(destFormat) && backingFile == null && sourcePath.endsWith(""String_Node_Str"")) {
          String result=Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
          if (result != null) {
            throw new CloudRuntimeException(""String_Node_Str"" + result);
          }
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug(""String_Node_Str"");
    String sourceFile;
    boolean useTmpFile=false;
    try {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      String rbdDestFile=KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),destPool.getSourceDir() + ""String_Node_Str"" + name);
      destFile=new QemuImgFile(rbdDestFile,destFormat);
      s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str""+ name);
      qemu.convert(srcFile,destFile);
      s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str""+ name);
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
      r.confSet(""String_Node_Str"",destPool.getAuthSecret());
      r.confSet(""String_Node_Str"",""String_Node_Str"");
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      RbdImage image=rbd.open(name);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ name);
  }
  return newDisk;
}","/** 
 * This copies a volume from Primary Storage to Secondary Storage In theory it could also do it the other way around, but the current implementation in ManagementServerImpl shows that the destPool is always a Secondary Storage Pool
 */
@Override public KVMPhysicalDisk copyPhysicalDisk(KVMPhysicalDisk disk,String name,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=disk.getPool();
  PhysicalDiskFormat sourceFormat=disk.getFormat();
  String sourcePath=disk.getPath();
  KVMPhysicalDisk newDisk;
  s_logger.debug(""String_Node_Str"" + disk.getSize() + ""String_Node_Str""+ disk.getVirtualSize()+ ""String_Node_Str""+ disk.getFormat());
  if (destPool.getType() != StoragePoolType.RBD) {
    if (disk.getFormat() == PhysicalDiskFormat.TAR) {
      newDisk=destPool.createPhysicalDisk(name,PhysicalDiskFormat.DIR,Storage.ProvisioningType.THIN,disk.getVirtualSize());
    }
 else {
      if (srcPool.getType() != StoragePoolType.RBD) {
        newDisk=destPool.createPhysicalDisk(name,Storage.ProvisioningType.THIN,disk.getVirtualSize());
      }
 else {
        newDisk=destPool.createPhysicalDisk(name,Storage.ProvisioningType.THIN,disk.getVirtualSize());
      }
    }
  }
 else {
    newDisk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + name,name,destPool);
    newDisk.setFormat(PhysicalDiskFormat.RAW);
    newDisk.setSize(disk.getVirtualSize());
    newDisk.setVirtualSize(disk.getSize());
  }
  String destPath=newDisk.getPath();
  PhysicalDiskFormat destFormat=newDisk.getFormat();
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile=null;
  QemuImgFile destFile=null;
  if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() != StoragePoolType.RBD)) {
    if (sourceFormat == PhysicalDiskFormat.TAR && destFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath);
    }
 else     if (sourceFormat == PhysicalDiskFormat.TAR) {
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else     if (sourceFormat == PhysicalDiskFormat.DIR) {
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + destPath);
      Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
    }
 else {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      try {
        Map<String,String> info=qemu.info(srcFile);
        String backingFile=info.get(new String(""String_Node_Str""));
        if (sourceFormat.equals(destFormat) && backingFile == null && sourcePath.endsWith(""String_Node_Str"")) {
          String result=Script.runSimpleBashScript(""String_Node_Str"" + sourcePath + ""String_Node_Str""+ destPath,timeout);
          if (result != null) {
            throw new CloudRuntimeException(""String_Node_Str"" + result);
          }
        }
 else {
          destFile=new QemuImgFile(destPath,destFormat);
          try {
            qemu.convert(srcFile,destFile);
          }
 catch (          QemuImgException e) {
            s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
            newDisk=null;
          }
        }
      }
 catch (      QemuImgException e) {
        s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ e.getMessage());
        newDisk=null;
      }
    }
  }
 else   if ((srcPool.getType() != StoragePoolType.RBD) && (destPool.getType() == StoragePoolType.RBD)) {
    s_logger.debug(""String_Node_Str"");
    try {
      srcFile=new QemuImgFile(sourcePath,sourceFormat);
      String rbdDestFile=KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),destPool.getSourceDir() + ""String_Node_Str"" + name);
      destFile=new QemuImgFile(rbdDestFile,destFormat);
      s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str""+ name);
      qemu.convert(srcFile,destFile);
      s_logger.debug(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destPool.getSourceDir()+ ""String_Node_Str""+ name);
      Rados r=new Rados(destPool.getAuthUserName());
      r.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
      r.confSet(""String_Node_Str"",destPool.getAuthSecret());
      r.confSet(""String_Node_Str"",""String_Node_Str"");
      r.connect();
      s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
      IoCTX io=r.ioCtxCreate(destPool.getSourceDir());
      Rbd rbd=new Rbd(io);
      RbdImage image=rbd.open(name);
      rbd.close(image);
      r.ioCtxDestroy(io);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getReturnValue() + ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
 else {
    srcFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(srcPool.getSourceHost(),srcPool.getSourcePort(),srcPool.getAuthUserName(),srcPool.getAuthSecret(),sourcePath));
    srcFile.setFormat(sourceFormat);
    destFile=new QemuImgFile(destPath);
    destFile.setFormat(destFormat);
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + srcFile.getFileName() + ""String_Node_Str""+ destFile.getFileName()+ ""String_Node_Str""+ e.getMessage());
      newDisk=null;
    }
  }
  if (newDisk == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ name);
  }
  return newDisk;
}",0.9956295868722684
105505,"private KVMPhysicalDisk createDiskFromTemplateOnRBD(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=template.getPool();
  KVMPhysicalDisk disk=null;
  String newUuid=name;
  format=PhysicalDiskFormat.RAW;
  disk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + newUuid,newUuid,destPool);
  disk.setFormat(format);
  if (size > template.getVirtualSize()) {
    disk.setSize(size);
    disk.setVirtualSize(size);
  }
 else {
    disk.setSize(template.getVirtualSize());
    disk.setVirtualSize(disk.getSize());
  }
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile;
  QemuImgFile destFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),disk.getPath()));
  destFile.setFormat(format);
  if (srcPool.getType() != StoragePoolType.RBD) {
    srcFile=new QemuImgFile(template.getPath(),template.getFormat());
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    try {
      if ((srcPool.getSourceHost().equals(destPool.getSourceHost())) && (srcPool.getSourceDir().equals(destPool.getSourceDir()))) {
        s_logger.debug(""String_Node_Str"");
        Rados r=new Rados(srcPool.getAuthUserName());
        r.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
        r.confSet(""String_Node_Str"",srcPool.getAuthSecret());
        r.confSet(""String_Node_Str"",""String_Node_Str"");
        r.connect();
        s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
        IoCTX io=r.ioCtxCreate(srcPool.getSourceDir());
        Rbd rbd=new Rbd(io);
        RbdImage srcImage=rbd.open(template.getName());
        if (srcImage.isOldFormat()) {
          s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ disk.getVirtualSize()+ ""String_Node_Str"");
          rbd.create(disk.getName(),disk.getVirtualSize(),rbdFeatures,rbdOrder);
          RbdImage destImage=rbd.open(disk.getName());
          s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
          rbd.copy(srcImage,destImage);
          s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
          rbd.close(destImage);
        }
 else {
          s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ this.rbdTemplateSnapName);
          s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ rbdTemplateSnapName+ ""String_Node_Str"");
          List<RbdSnapInfo> snaps=srcImage.snapList();
          s_logger.debug(""String_Node_Str"" + snaps.size() + ""String_Node_Str""+ srcPool.getSourceDir()+ ""String_Node_Str""+ template.getName());
          boolean snapFound=false;
          for (          RbdSnapInfo snap : snaps) {
            if (rbdTemplateSnapName.equals(snap.name)) {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ rbdTemplateSnapName+ ""String_Node_Str"");
              snapFound=true;
              break;
            }
          }
          if (!snapFound) {
            s_logger.debug(""String_Node_Str"" + rbdTemplateSnapName + ""String_Node_Str""+ name);
            srcImage.snapCreate(rbdTemplateSnapName);
            s_logger.debug(""String_Node_Str"" + rbdTemplateSnapName + ""String_Node_Str""+ name);
            srcImage.snapProtect(rbdTemplateSnapName);
          }
          rbd.clone(template.getName(),this.rbdTemplateSnapName,io,disk.getName(),this.rbdFeatures,this.rbdOrder);
          s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ this.rbdTemplateSnapName+ ""String_Node_Str""+ disk.getName());
        }
        rbd.close(srcImage);
        r.ioCtxDestroy(io);
      }
 else {
        s_logger.debug(""String_Node_Str"");
        Rados rSrc=new Rados(srcPool.getAuthUserName());
        rSrc.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
        rSrc.confSet(""String_Node_Str"",srcPool.getAuthSecret());
        rSrc.confSet(""String_Node_Str"",""String_Node_Str"");
        rSrc.connect();
        s_logger.debug(""String_Node_Str"" + rSrc.confGet(""String_Node_Str""));
        Rados rDest=new Rados(destPool.getAuthUserName());
        rDest.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
        rDest.confSet(""String_Node_Str"",destPool.getAuthSecret());
        rDest.confSet(""String_Node_Str"",""String_Node_Str"");
        rDest.connect();
        s_logger.debug(""String_Node_Str"" + rDest.confGet(""String_Node_Str""));
        IoCTX sIO=rSrc.ioCtxCreate(srcPool.getSourceDir());
        Rbd sRbd=new Rbd(sIO);
        IoCTX dIO=rDest.ioCtxCreate(destPool.getSourceDir());
        Rbd dRbd=new Rbd(dIO);
        s_logger.debug(""String_Node_Str"" + disk.getName() + ""String_Node_Str""+ rDest.confGet(""String_Node_Str"")+ ""String_Node_Str""+ destPool.getSourceDir());
        dRbd.create(disk.getName(),disk.getVirtualSize(),rbdFeatures,rbdOrder);
        RbdImage srcImage=sRbd.open(template.getName());
        RbdImage destImage=dRbd.open(disk.getName());
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rSrc.confGet(""String_Node_Str"")+ ""String_Node_Str""+ disk.getName()+ ""String_Node_Str""+ rDest.confGet(""String_Node_Str""));
        sRbd.copy(srcImage,destImage);
        sRbd.close(srcImage);
        dRbd.close(destImage);
        rSrc.ioCtxDestroy(sIO);
        rDest.ioCtxDestroy(dIO);
      }
    }
 catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      disk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      disk=null;
    }
  }
  return disk;
}","private KVMPhysicalDisk createDiskFromTemplateOnRBD(KVMPhysicalDisk template,String name,PhysicalDiskFormat format,Storage.ProvisioningType provisioningType,long size,KVMStoragePool destPool,int timeout){
  KVMStoragePool srcPool=template.getPool();
  KVMPhysicalDisk disk=null;
  String newUuid=name;
  format=PhysicalDiskFormat.RAW;
  disk=new KVMPhysicalDisk(destPool.getSourceDir() + ""String_Node_Str"" + newUuid,newUuid,destPool);
  disk.setFormat(format);
  if (size > template.getVirtualSize()) {
    disk.setSize(size);
    disk.setVirtualSize(size);
  }
 else {
    disk.setSize(template.getVirtualSize());
    disk.setVirtualSize(disk.getSize());
  }
  QemuImg qemu=new QemuImg(timeout);
  QemuImgFile srcFile;
  QemuImgFile destFile=new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(destPool.getSourceHost(),destPool.getSourcePort(),destPool.getAuthUserName(),destPool.getAuthSecret(),disk.getPath()));
  destFile.setFormat(format);
  if (srcPool.getType() != StoragePoolType.RBD) {
    srcFile=new QemuImgFile(template.getPath(),template.getFormat());
    try {
      qemu.convert(srcFile,destFile);
    }
 catch (    QemuImgException e) {
      s_logger.error(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ e.getMessage());
    }
  }
 else {
    try {
      if ((srcPool.getSourceHost().equals(destPool.getSourceHost())) && (srcPool.getSourceDir().equals(destPool.getSourceDir()))) {
        s_logger.debug(""String_Node_Str"");
        Rados r=new Rados(srcPool.getAuthUserName());
        r.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
        r.confSet(""String_Node_Str"",srcPool.getAuthSecret());
        r.confSet(""String_Node_Str"",""String_Node_Str"");
        r.connect();
        s_logger.debug(""String_Node_Str"" + r.confGet(""String_Node_Str""));
        IoCTX io=r.ioCtxCreate(srcPool.getSourceDir());
        Rbd rbd=new Rbd(io);
        RbdImage srcImage=rbd.open(template.getName());
        if (srcImage.isOldFormat()) {
          s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ disk.getVirtualSize()+ ""String_Node_Str"");
          rbd.create(disk.getName(),disk.getVirtualSize(),rbdFeatures,rbdOrder);
          RbdImage destImage=rbd.open(disk.getName());
          s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
          rbd.copy(srcImage,destImage);
          s_logger.debug(""String_Node_Str"" + srcImage.getName() + ""String_Node_Str""+ destImage.getName()+ ""String_Node_Str""+ srcPool.getSourceDir());
          rbd.close(destImage);
        }
 else {
          s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ rbdTemplateSnapName);
          s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ rbdTemplateSnapName+ ""String_Node_Str"");
          List<RbdSnapInfo> snaps=srcImage.snapList();
          s_logger.debug(""String_Node_Str"" + snaps.size() + ""String_Node_Str""+ srcPool.getSourceDir()+ ""String_Node_Str""+ template.getName());
          boolean snapFound=false;
          for (          RbdSnapInfo snap : snaps) {
            if (rbdTemplateSnapName.equals(snap.name)) {
              s_logger.debug(""String_Node_Str"" + srcPool.getSourceDir() + ""String_Node_Str""+ template.getName()+ ""String_Node_Str""+ rbdTemplateSnapName+ ""String_Node_Str"");
              snapFound=true;
              break;
            }
          }
          if (!snapFound) {
            s_logger.debug(""String_Node_Str"" + rbdTemplateSnapName + ""String_Node_Str""+ name);
            srcImage.snapCreate(rbdTemplateSnapName);
            s_logger.debug(""String_Node_Str"" + rbdTemplateSnapName + ""String_Node_Str""+ name);
            srcImage.snapProtect(rbdTemplateSnapName);
          }
          rbd.clone(template.getName(),rbdTemplateSnapName,io,disk.getName(),rbdFeatures,rbdOrder);
          s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rbdTemplateSnapName+ ""String_Node_Str""+ disk.getName());
        }
        rbd.close(srcImage);
        r.ioCtxDestroy(io);
      }
 else {
        s_logger.debug(""String_Node_Str"");
        Rados rSrc=new Rados(srcPool.getAuthUserName());
        rSrc.confSet(""String_Node_Str"",srcPool.getSourceHost() + ""String_Node_Str"" + srcPool.getSourcePort());
        rSrc.confSet(""String_Node_Str"",srcPool.getAuthSecret());
        rSrc.confSet(""String_Node_Str"",""String_Node_Str"");
        rSrc.connect();
        s_logger.debug(""String_Node_Str"" + rSrc.confGet(""String_Node_Str""));
        Rados rDest=new Rados(destPool.getAuthUserName());
        rDest.confSet(""String_Node_Str"",destPool.getSourceHost() + ""String_Node_Str"" + destPool.getSourcePort());
        rDest.confSet(""String_Node_Str"",destPool.getAuthSecret());
        rDest.confSet(""String_Node_Str"",""String_Node_Str"");
        rDest.connect();
        s_logger.debug(""String_Node_Str"" + rDest.confGet(""String_Node_Str""));
        IoCTX sIO=rSrc.ioCtxCreate(srcPool.getSourceDir());
        Rbd sRbd=new Rbd(sIO);
        IoCTX dIO=rDest.ioCtxCreate(destPool.getSourceDir());
        Rbd dRbd=new Rbd(dIO);
        s_logger.debug(""String_Node_Str"" + disk.getName() + ""String_Node_Str""+ rDest.confGet(""String_Node_Str"")+ ""String_Node_Str""+ destPool.getSourceDir());
        dRbd.create(disk.getName(),disk.getVirtualSize(),rbdFeatures,rbdOrder);
        RbdImage srcImage=sRbd.open(template.getName());
        RbdImage destImage=dRbd.open(disk.getName());
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ rSrc.confGet(""String_Node_Str"")+ ""String_Node_Str""+ disk.getName()+ ""String_Node_Str""+ rDest.confGet(""String_Node_Str""));
        sRbd.copy(srcImage,destImage);
        sRbd.close(srcImage);
        dRbd.close(destImage);
        rSrc.ioCtxDestroy(sIO);
        rDest.ioCtxDestroy(dIO);
      }
    }
 catch (    RadosException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      disk=null;
    }
catch (    RbdException e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      disk=null;
    }
  }
  return disk;
}",0.9980112958396308
105506,"@Override public void addSystemVMTemplatesToSecondary(DataStore store){
  long storeId=store.getId();
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  for (  VMTemplateVO tmplt : rtngTmplts) {
    TemplateDataStoreVO tmpltStore=_vmTemplateStoreDao.findByStoreTemplate(storeId,tmplt.getId());
    if (tmpltStore == null) {
      tmpltStore=new TemplateDataStoreVO(storeId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,TemplateConstants.DEFAULT_SYSTEM_VM_TEMPLATE_PATH + tmplt.getId() + File.separator,tmplt.getUrl());
      tmpltStore.setSize(0L);
      tmpltStore.setPhysicalSize(0);
      tmpltStore.setDataStoreRole(store.getRole());
      _vmTemplateStoreDao.persist(tmpltStore);
    }
  }
}","@Override public void addSystemVMTemplatesToSecondary(DataStore store){
  long storeId=store.getId();
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  for (  VMTemplateVO tmplt : rtngTmplts) {
    TemplateDataStoreVO tmpltStore=_vmTemplateStoreDao.findByStoreTemplate(storeId,tmplt.getId());
    if (tmpltStore == null) {
      tmpltStore=new TemplateDataStoreVO(storeId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,TemplateConstants.DEFAULT_SYSTEM_VM_TEMPLATE_PATH + tmplt.getId() + '/',tmplt.getUrl());
      tmpltStore.setSize(0L);
      tmpltStore.setPhysicalSize(0);
      tmpltStore.setDataStoreRole(store.getRole());
      _vmTemplateStoreDao.persist(tmpltStore);
    }
  }
}",0.9883641341546886
105507,"String createSyslogMessage(){
  StringBuilder message=new StringBuilder();
  message.append(severityOfAlert(alertType)).append(MESSAGE_DELIMITER_STRING);
  InetAddress ip;
  try {
    ip=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    ip=null;
  }
  if (ip != null) {
    message.append(ip.getHostName()).append(MESSAGE_DELIMITER_STRING);
  }
 else {
    message.append(""String_Node_Str"" + MESSAGE_DELIMITER_STRING);
  }
  if (alertType >= 0) {
    message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(alertsMap.get(alertType)).append(MESSAGE_DELIMITER_STRING);
    if (dataCenterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(dataCenterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (podId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(podId).append(MESSAGE_DELIMITER_STRING);
    }
    if (clusterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(clusterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (sysMessage != null) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(sysMessage);
    }
 else {
      errorHandler.error(""String_Node_Str"");
    }
  }
 else {
    errorHandler.error(""String_Node_Str"");
  }
  return message.toString();
}","String createSyslogMessage(){
  StringBuilder message=new StringBuilder();
  message.append(severityOfAlert(alertType)).append(MESSAGE_DELIMITER_STRING);
  InetAddress ip;
  try {
    ip=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    ip=null;
  }
  if (ip != null) {
    message.append(ip.getHostName()).append(MESSAGE_DELIMITER_STRING);
  }
 else {
    message.append(""String_Node_Str"" + MESSAGE_DELIMITER_STRING);
  }
  if (alertType >= 0) {
    message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(alertsMap.containsKey(alertType) ? alertsMap.get(alertType) : ""String_Node_Str"").append(MESSAGE_DELIMITER_STRING);
    if (dataCenterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(dataCenterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (podId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(podId).append(MESSAGE_DELIMITER_STRING);
    }
    if (clusterId != 0) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(clusterId).append(MESSAGE_DELIMITER_STRING);
    }
    if (sysMessage != null) {
      message.append(""String_Node_Str"").append(_keyValueDelimiter).append(""String_Node_Str"").append(sysMessage);
    }
 else {
      errorHandler.error(""String_Node_Str"");
    }
  }
 else {
    errorHandler.error(""String_Node_Str"");
  }
  return message.toString();
}",0.972644376899696
105508,"public String mapRbdDevice(KVMPhysicalDisk disk){
  KVMStoragePool pool=disk.getPool();
  String[] splitPoolImage=disk.getPath().split(""String_Node_Str"");
  String device=Script.runSimpleBashScript(""String_Node_Str"" + splitPoolImage[0] + ""String_Node_Str""+ splitPoolImage[1]+ ""String_Node_Str"");
  if (device == null) {
    String mapRbd=Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ pool.getAuthUserName());
    device=Script.runSimpleBashScript(""String_Node_Str"" + splitPoolImage[0] + ""String_Node_Str""+ splitPoolImage[1]+ ""String_Node_Str"");
  }
  return device;
}","public String mapRbdDevice(KVMPhysicalDisk disk){
  KVMStoragePool pool=disk.getPool();
  String[] splitPoolImage=disk.getPath().split(""String_Node_Str"");
  String device=Script.runSimpleBashScript(""String_Node_Str"" + splitPoolImage[0] + ""String_Node_Str""+ splitPoolImage[1]+ ""String_Node_Str"");
  if (device == null) {
    Script.runSimpleBashScript(""String_Node_Str"" + disk.getPath() + ""String_Node_Str""+ pool.getAuthUserName());
    device=Script.runSimpleBashScript(""String_Node_Str"" + splitPoolImage[0] + ""String_Node_Str""+ splitPoolImage[1]+ ""String_Node_Str"");
  }
  return device;
}",0.9882747068676716
105509,"@Override @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"",create=true) public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd,Account templateOwner) throws ResourceAllocationException {
  Long userId=CallContext.current().getCallingUserId();
  Account caller=CallContext.current().getCallingAccount();
  boolean isAdmin=(_accountMgr.isAdmin(caller.getId()));
  _accountMgr.checkAccess(caller,null,true,templateOwner);
  String name=cmd.getTemplateName();
  if ((name == null) || (name.length() > 32)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getTemplateTag() != null) {
    if (!_accountService.isRootAdmin(caller.getId())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
  }
  Integer bits=cmd.getBits();
  Boolean requiresHvm=cmd.getRequiresHvm();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  int bitsValue=((bits == null) ? 64 : bits.intValue());
  boolean requiresHvmValue=((requiresHvm == null) ? true : requiresHvm.booleanValue());
  boolean passwordEnabledValue=((passwordEnabled == null) ? false : passwordEnabled.booleanValue());
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  boolean isDynamicScalingEnabled=cmd.isDynamicallyScalable();
  boolean allowPublicUserTemplates=AllowPublicUserTemplates.valueIn(templateOwner.getId());
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new PermissionDeniedException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  Long volumeId=cmd.getVolumeId();
  Long snapshotId=cmd.getSnapshotId();
  if ((volumeId == null) && (snapshotId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((volumeId != null) && (snapshotId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ snapshotId+ ""String_Node_Str"");
  }
  HypervisorType hyperType;
  VolumeVO volume=null;
  SnapshotVO snapshot=null;
  VMTemplateVO privateTemplate=null;
  if (volumeId != null) {
    volume=_volumeDao.findById(volumeId);
    if (volume == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
    }
    _accountMgr.checkAccess(caller,null,true,volume);
    if (!_volumeMgr.volumeInactive(volume)) {
      String msg=""String_Node_Str"" + volume.getName() + ""String_Node_Str"";
      if (s_logger.isInfoEnabled()) {
        s_logger.info(msg);
      }
      throw new CloudRuntimeException(msg);
    }
    hyperType=_volumeDao.getHypervisorType(volumeId);
  }
 else {
    snapshot=_snapshotDao.findById(snapshotId);
    if (snapshot == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
    }
    volume=_volumeDao.findById(snapshot.getVolumeId());
    _accountMgr.checkAccess(caller,null,true,snapshot);
    if (snapshot.getState() != Snapshot.State.BackedUp) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ Snapshot.State.BackedUp+ ""String_Node_Str"");
    }
    hyperType=snapshot.getHypervisorType();
  }
  _resourceLimitMgr.checkResourceLimit(templateOwner,ResourceType.template);
  _resourceLimitMgr.checkResourceLimit(templateOwner,ResourceType.secondary_storage,new Long(volume != null ? volume.getSize() : snapshot.getSize()).longValue());
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  Long guestOSId=cmd.getOsTypeId();
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  if (guestOS == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + guestOSId + ""String_Node_Str"");
  }
  Long nextTemplateId=_tmpltDao.getNextInSequence(Long.class,""String_Node_Str"");
  String description=cmd.getDisplayText();
  boolean isExtractable=false;
  Long sourceTemplateId=null;
  if (volume != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
    isExtractable=template != null && template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM;
    if (template != null) {
      sourceTemplateId=template.getId();
    }
 else     if (volume.getVolumeType() == Volume.Type.ROOT) {
      UserVm userVm=ApiDBUtils.findUserVmById(volume.getInstanceId());
      sourceTemplateId=userVm.getIsoId();
    }
  }
  String templateTag=cmd.getTemplateTag();
  if (templateTag != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateTag);
    }
  }
  privateTemplate=new VMTemplateVO(nextTemplateId,name,ImageFormat.RAW,isPublic,featured,isExtractable,TemplateType.USER,null,requiresHvmValue,bitsValue,templateOwner.getId(),null,description,passwordEnabledValue,guestOS.getId(),true,hyperType,templateTag,cmd.getDetails(),false,isDynamicScalingEnabled);
  if (sourceTemplateId != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + sourceTemplateId);
    }
  }
  privateTemplate.setSourceTemplateId(sourceTemplateId);
  VMTemplateVO template=_tmpltDao.persist(privateTemplate);
  if (template != null) {
    Map<String,String> details=new HashMap<String,String>();
    if (volume != null) {
      Long vmId=volume.getInstanceId();
      if (vmId != null) {
        UserVmVO userVm=_userVmDao.findById(vmId);
        if (userVm != null) {
          _userVmDao.loadDetails(userVm);
          details.putAll(userVm.getDetails());
        }
      }
    }
    if (cmd.getDetails() != null) {
      details.remove(""String_Node_Str"");
      details.putAll(cmd.getDetails());
    }
    if (!details.isEmpty()) {
      privateTemplate.setDetails(details);
      _tmpltDao.saveDetails(privateTemplate);
    }
    _resourceLimitMgr.incrementResourceCount(templateOwner.getId(),ResourceType.template);
    _resourceLimitMgr.incrementResourceCount(templateOwner.getId(),ResourceType.secondary_storage,new Long(volume != null ? volume.getSize() : snapshot.getSize()));
  }
  if (template != null) {
    return template;
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_TEMPLATE_CREATE,eventDescription=""String_Node_Str"",create=true) public VMTemplateVO createPrivateTemplateRecord(CreateTemplateCmd cmd,Account templateOwner) throws ResourceAllocationException {
  Account caller=CallContext.current().getCallingAccount();
  boolean isAdmin=(_accountMgr.isAdmin(caller.getId()));
  _accountMgr.checkAccess(caller,null,true,templateOwner);
  String name=cmd.getTemplateName();
  if ((name == null) || (name.length() > 32)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getTemplateTag() != null) {
    if (!_accountService.isRootAdmin(caller.getId())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
  }
  Integer bits=cmd.getBits();
  Boolean requiresHvm=cmd.getRequiresHvm();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  int bitsValue=((bits == null) ? 64 : bits.intValue());
  boolean requiresHvmValue=((requiresHvm == null) ? true : requiresHvm.booleanValue());
  boolean passwordEnabledValue=((passwordEnabled == null) ? false : passwordEnabled.booleanValue());
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  boolean isDynamicScalingEnabled=cmd.isDynamicallyScalable();
  boolean allowPublicUserTemplates=AllowPublicUserTemplates.valueIn(templateOwner.getId());
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new PermissionDeniedException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  Long volumeId=cmd.getVolumeId();
  Long snapshotId=cmd.getSnapshotId();
  if ((volumeId == null) && (snapshotId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((volumeId != null) && (snapshotId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ snapshotId+ ""String_Node_Str"");
  }
  HypervisorType hyperType;
  VolumeVO volume=null;
  SnapshotVO snapshot=null;
  VMTemplateVO privateTemplate=null;
  if (volumeId != null) {
    volume=_volumeDao.findById(volumeId);
    if (volume == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
    }
    _accountMgr.checkAccess(caller,null,true,volume);
    if (!_volumeMgr.volumeInactive(volume)) {
      String msg=""String_Node_Str"" + volume.getName() + ""String_Node_Str"";
      if (s_logger.isInfoEnabled()) {
        s_logger.info(msg);
      }
      throw new CloudRuntimeException(msg);
    }
    hyperType=_volumeDao.getHypervisorType(volumeId);
  }
 else {
    snapshot=_snapshotDao.findById(snapshotId);
    if (snapshot == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
    }
    volume=_volumeDao.findById(snapshot.getVolumeId());
    _accountMgr.checkAccess(caller,null,true,snapshot);
    if (snapshot.getState() != Snapshot.State.BackedUp) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ Snapshot.State.BackedUp+ ""String_Node_Str"");
    }
    hyperType=snapshot.getHypervisorType();
  }
  _resourceLimitMgr.checkResourceLimit(templateOwner,ResourceType.template);
  _resourceLimitMgr.checkResourceLimit(templateOwner,ResourceType.secondary_storage,new Long(volume != null ? volume.getSize() : snapshot.getSize()).longValue());
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  Long guestOSId=cmd.getOsTypeId();
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  if (guestOS == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + guestOSId + ""String_Node_Str"");
  }
  Long nextTemplateId=_tmpltDao.getNextInSequence(Long.class,""String_Node_Str"");
  String description=cmd.getDisplayText();
  boolean isExtractable=false;
  Long sourceTemplateId=null;
  if (volume != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
    isExtractable=template != null && template.isExtractable() && template.getTemplateType() != Storage.TemplateType.SYSTEM;
    if (template != null) {
      sourceTemplateId=template.getId();
    }
 else     if (volume.getVolumeType() == Volume.Type.ROOT) {
      UserVm userVm=ApiDBUtils.findUserVmById(volume.getInstanceId());
      sourceTemplateId=userVm.getIsoId();
    }
  }
  String templateTag=cmd.getTemplateTag();
  if (templateTag != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateTag);
    }
  }
  privateTemplate=new VMTemplateVO(nextTemplateId,name,ImageFormat.RAW,isPublic,featured,isExtractable,TemplateType.USER,null,requiresHvmValue,bitsValue,templateOwner.getId(),null,description,passwordEnabledValue,guestOS.getId(),true,hyperType,templateTag,cmd.getDetails(),false,isDynamicScalingEnabled);
  if (sourceTemplateId != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + sourceTemplateId);
    }
  }
  privateTemplate.setSourceTemplateId(sourceTemplateId);
  VMTemplateVO template=_tmpltDao.persist(privateTemplate);
  if (template != null) {
    Map<String,String> details=new HashMap<String,String>();
    if (volume != null) {
      Long vmId=volume.getInstanceId();
      if (vmId != null) {
        UserVmVO userVm=_userVmDao.findById(vmId);
        if (userVm != null) {
          _userVmDao.loadDetails(userVm);
          details.putAll(userVm.getDetails());
        }
      }
    }
    if (cmd.getDetails() != null) {
      details.remove(""String_Node_Str"");
      details.putAll(cmd.getDetails());
    }
    if (!details.isEmpty()) {
      privateTemplate.setDetails(details);
      _tmpltDao.saveDetails(privateTemplate);
    }
    _resourceLimitMgr.incrementResourceCount(templateOwner.getId(),ResourceType.template);
    _resourceLimitMgr.incrementResourceCount(templateOwner.getId(),ResourceType.secondary_storage,new Long(volume != null ? volume.getSize() : snapshot.getSize()));
  }
  if (template != null) {
    return template;
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}",0.9953917050691244
105510,"@Override @DB public boolean copy(long userId,VMTemplateVO template,DataStore srcSecStore,DataCenterVO dstZone) throws StorageUnavailableException, ResourceAllocationException {
  long tmpltId=template.getId();
  long dstZoneId=dstZone.getId();
  List<DataStore> dstSecStores=_dataStoreMgr.getImageStoresByScope(new ZoneScope(dstZoneId));
  if (dstSecStores == null || dstSecStores.isEmpty()) {
    throw new StorageUnavailableException(""String_Node_Str"",DataCenter.class,dstZone.getId());
  }
  AccountVO account=_accountDao.findById(template.getAccountId());
  TemplateDataStoreVO srcTmpltStore=_tmplStoreDao.findByStoreTemplate(srcSecStore.getId(),tmpltId);
  _resourceLimitMgr.checkResourceLimit(account,ResourceType.template);
  _resourceLimitMgr.checkResourceLimit(account,ResourceType.secondary_storage,new Long(srcTmpltStore.getSize()).longValue());
  String copyEventType;
  String createEventType;
  if (template.getFormat().equals(ImageFormat.ISO)) {
    copyEventType=EventTypes.EVENT_ISO_COPY;
    createEventType=EventTypes.EVENT_ISO_CREATE;
  }
 else {
    copyEventType=EventTypes.EVENT_TEMPLATE_COPY;
    createEventType=EventTypes.EVENT_TEMPLATE_CREATE;
  }
  TemplateInfo srcTemplate=_tmplFactory.getTemplate(template.getId(),srcSecStore);
  for (  DataStore dstSecStore : dstSecStores) {
    TemplateDataStoreVO dstTmpltStore=_tmplStoreDao.findByStoreTemplate(dstSecStore.getId(),tmpltId);
    if (dstTmpltStore != null && dstTmpltStore.getDownloadState() == Status.DOWNLOADED) {
      return true;
    }
    if (dstTmpltStore != null && dstTmpltStore.getDownloadState() != Status.DOWNLOAD_IN_PROGRESS) {
      _tmplStoreDao.removeByTemplateStore(tmpltId,dstSecStore.getId());
    }
    AsyncCallFuture<TemplateApiResult> future=_tmpltSvr.copyTemplate(srcTemplate,dstSecStore);
    try {
      TemplateApiResult result=future.get();
      if (result.isFailed()) {
        s_logger.debug(""String_Node_Str"" + dstSecStore.getName() + ""String_Node_Str""+ result.getResult());
        continue;
      }
      _tmpltDao.addTemplateToZone(template,dstZoneId);
      if (account.getId() != Account.ACCOUNT_ID_SYSTEM) {
        UsageEventUtils.publishUsageEvent(copyEventType,account.getId(),dstZoneId,tmpltId,null,null,null,srcTmpltStore.getPhysicalSize(),srcTmpltStore.getSize(),template.getClass().getName(),template.getUuid());
      }
      return true;
    }
 catch (    Exception ex) {
      s_logger.debug(""String_Node_Str"" + dstSecStore.getName() + ""String_Node_Str"");
    }
  }
  return false;
}","@Override @DB public boolean copy(long userId,VMTemplateVO template,DataStore srcSecStore,DataCenterVO dstZone) throws StorageUnavailableException, ResourceAllocationException {
  long tmpltId=template.getId();
  long dstZoneId=dstZone.getId();
  List<DataStore> dstSecStores=_dataStoreMgr.getImageStoresByScope(new ZoneScope(dstZoneId));
  if (dstSecStores == null || dstSecStores.isEmpty()) {
    throw new StorageUnavailableException(""String_Node_Str"",DataCenter.class,dstZone.getId());
  }
  AccountVO account=_accountDao.findById(template.getAccountId());
  TemplateDataStoreVO srcTmpltStore=_tmplStoreDao.findByStoreTemplate(srcSecStore.getId(),tmpltId);
  _resourceLimitMgr.checkResourceLimit(account,ResourceType.template);
  _resourceLimitMgr.checkResourceLimit(account,ResourceType.secondary_storage,new Long(srcTmpltStore.getSize()).longValue());
  String copyEventType;
  if (template.getFormat().equals(ImageFormat.ISO)) {
    copyEventType=EventTypes.EVENT_ISO_COPY;
  }
 else {
    copyEventType=EventTypes.EVENT_TEMPLATE_COPY;
  }
  TemplateInfo srcTemplate=_tmplFactory.getTemplate(template.getId(),srcSecStore);
  for (  DataStore dstSecStore : dstSecStores) {
    TemplateDataStoreVO dstTmpltStore=_tmplStoreDao.findByStoreTemplate(dstSecStore.getId(),tmpltId);
    if (dstTmpltStore != null && dstTmpltStore.getDownloadState() == Status.DOWNLOADED) {
      return true;
    }
    if (dstTmpltStore != null && dstTmpltStore.getDownloadState() != Status.DOWNLOAD_IN_PROGRESS) {
      _tmplStoreDao.removeByTemplateStore(tmpltId,dstSecStore.getId());
    }
    AsyncCallFuture<TemplateApiResult> future=_tmpltSvr.copyTemplate(srcTemplate,dstSecStore);
    try {
      TemplateApiResult result=future.get();
      if (result.isFailed()) {
        s_logger.debug(""String_Node_Str"" + dstSecStore.getName() + ""String_Node_Str""+ result.getResult());
        continue;
      }
      _tmpltDao.addTemplateToZone(template,dstZoneId);
      if (account.getId() != Account.ACCOUNT_ID_SYSTEM) {
        UsageEventUtils.publishUsageEvent(copyEventType,account.getId(),dstZoneId,tmpltId,null,null,null,srcTmpltStore.getPhysicalSize(),srcTmpltStore.getSize(),template.getClass().getName(),template.getUuid());
      }
      return true;
    }
 catch (    Exception ex) {
      s_logger.debug(""String_Node_Str"" + dstSecStore.getName() + ""String_Node_Str"");
    }
  }
  return false;
}",0.9736788410528464
105511,"/** 
 * Multipart upload is a complex operation with all the options defined by Amazon.   Part of the functionality is provided by the query done against the database.  The CommonPrefixes functionality is done the same way as done in the listBucketContents function (i.e., by iterating though the list to decide which output element each key is placed).
 * @param request
 * @param response
 * @throws IOException
 */
public void executeListMultipartUploads(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String bucketName=(String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY);
  String delimiter=request.getParameter(""String_Node_Str"");
  String keyMarker=request.getParameter(""String_Node_Str"");
  String prefix=request.getParameter(""String_Node_Str"");
  int maxUploads=1000;
  int nextUploadId=0;
  String nextKey=null;
  boolean isTruncated=false;
  S3MultipartUpload[] uploads=null;
  S3MultipartUpload onePart=null;
  String temp=request.getParameter(""String_Node_Str"");
  if (null != temp) {
    maxUploads=Integer.parseInt(temp);
    if (maxUploads > 1000 || maxUploads < 0)     maxUploads=1000;
  }
  String uploadIdMarker=request.getParameter(""String_Node_Str"");
  if (null == keyMarker)   uploadIdMarker=null;
  SBucketVO bucket=bucketDao.getByName(bucketName);
  if (bucket == null) {
    logger.error(""String_Node_Str"" + bucketName + ""String_Node_Str"");
    response.setStatus(404);
    return;
  }
  S3PolicyContext context=new S3PolicyContext(PolicyActions.ListBucketMultipartUploads,bucketName);
  context.setEvalParam(ConditionKeys.Prefix,prefix);
  context.setEvalParam(ConditionKeys.Delimiter,delimiter);
  S3Engine.verifyAccess(context,""String_Node_Str"",bucket.getId(),SAcl.PERMISSION_READ);
  try {
    MultipartLoadDao uploadDao=new MultipartLoadDao();
    OrderedPair<S3MultipartUpload[],Boolean> result=uploadDao.getInitiatedUploads(bucketName,maxUploads,prefix,keyMarker,uploadIdMarker);
    uploads=result.getFirst();
    isTruncated=result.getSecond().booleanValue();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
    response.setStatus(500);
  }
  StringBuffer xml=new StringBuffer();
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(bucketName).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append((null == keyMarker ? ""String_Node_Str"" : keyMarker)).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append((null == uploadIdMarker ? ""String_Node_Str"" : uploadIdMarker)).append(""String_Node_Str"");
  StringBuffer partsList=new StringBuffer();
  for (int i=0; i < uploads.length; i++) {
    onePart=uploads[i];
    if (null == onePart)     break;
    if (delimiter != null && !delimiter.isEmpty()) {
      if (StringHelper.substringInBetween(onePart.getKey(),prefix,delimiter) != null)       continue;
    }
    nextKey=onePart.getKey();
    nextUploadId=onePart.getId();
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(nextKey).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(nextUploadId).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(onePart.getAccessKey()).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(onePart.getAccessKey()).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(DatatypeConverter.printDateTime(onePart.getLastModified())).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
  }
  for (int i=0; i < uploads.length; i++) {
    onePart=uploads[i];
    if (null == onePart)     break;
    if (delimiter != null && !delimiter.isEmpty()) {
      String subName=StringHelper.substringInBetween(onePart.getKey(),prefix,delimiter);
      if (subName != null) {
        partsList.append(""String_Node_Str"");
        partsList.append(""String_Node_Str"");
        if (prefix != null && prefix.length() > 0)         partsList.append(prefix + delimiter + subName);
 else         partsList.append(subName);
        partsList.append(""String_Node_Str"");
        partsList.append(""String_Node_Str"");
      }
    }
  }
  xml.append(""String_Node_Str"").append((null == nextKey ? ""String_Node_Str"" : nextKey)).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append((0 == nextUploadId ? ""String_Node_Str"" : nextUploadId)).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(maxUploads).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(isTruncated).append(""String_Node_Str"");
  xml.append(partsList.toString());
  xml.append(""String_Node_Str"");
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  S3RestServlet.endResponse(response,xml.toString());
}","/** 
 * Multipart upload is a complex operation with all the options defined by Amazon.   Part of the functionality is provided by the query done against the database.  The CommonPrefixes functionality is done the same way as done in the listBucketContents function (i.e., by iterating though the list to decide which output element each key is placed).
 * @param request
 * @param response
 * @throws IOException
 */
public void executeListMultipartUploads(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String bucketName=(String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY);
  String delimiter=request.getParameter(""String_Node_Str"");
  String keyMarker=request.getParameter(""String_Node_Str"");
  String prefix=request.getParameter(""String_Node_Str"");
  int maxUploads=1000;
  int nextUploadId=0;
  String nextKey=null;
  boolean isTruncated=false;
  S3MultipartUpload[] uploads=null;
  S3MultipartUpload onePart=null;
  String temp=request.getParameter(""String_Node_Str"");
  if (null != temp) {
    maxUploads=Integer.parseInt(temp);
    if (maxUploads > 1000 || maxUploads < 0)     maxUploads=1000;
  }
  String uploadIdMarker=request.getParameter(""String_Node_Str"");
  if (null == keyMarker)   uploadIdMarker=null;
  SBucketVO bucket=bucketDao.getByName(bucketName);
  if (bucket == null) {
    logger.error(""String_Node_Str"" + bucketName + ""String_Node_Str"");
    response.setStatus(404);
    return;
  }
  S3PolicyContext context=new S3PolicyContext(PolicyActions.ListBucketMultipartUploads,bucketName);
  context.setEvalParam(ConditionKeys.Prefix,prefix);
  context.setEvalParam(ConditionKeys.Delimiter,delimiter);
  S3Engine.verifyAccess(context,""String_Node_Str"",bucket.getId(),SAcl.PERMISSION_READ);
  try {
    MultipartLoadDao uploadDao=new MultipartLoadDao();
    OrderedPair<S3MultipartUpload[],Boolean> result=uploadDao.getInitiatedUploads(bucketName,maxUploads,prefix,keyMarker,uploadIdMarker);
    uploads=result.getFirst();
    isTruncated=result.getSecond().booleanValue();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
    response.setStatus(500);
  }
  StringBuffer xml=new StringBuffer();
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(bucketName).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append((null == keyMarker ? ""String_Node_Str"" : StringEscapeUtils.escapeHtml(keyMarker))).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append((null == uploadIdMarker ? ""String_Node_Str"" : uploadIdMarker)).append(""String_Node_Str"");
  StringBuffer partsList=new StringBuffer();
  for (int i=0; i < uploads.length; i++) {
    onePart=uploads[i];
    if (null == onePart)     break;
    if (delimiter != null && !delimiter.isEmpty()) {
      if (StringHelper.substringInBetween(onePart.getKey(),prefix,delimiter) != null)       continue;
    }
    nextKey=onePart.getKey();
    nextUploadId=onePart.getId();
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(nextKey).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(nextUploadId).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(onePart.getAccessKey()).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(onePart.getAccessKey()).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
    partsList.append(""String_Node_Str"").append(DatatypeConverter.printDateTime(onePart.getLastModified())).append(""String_Node_Str"");
    partsList.append(""String_Node_Str"");
  }
  for (int i=0; i < uploads.length; i++) {
    onePart=uploads[i];
    if (null == onePart)     break;
    if (delimiter != null && !delimiter.isEmpty()) {
      String subName=StringHelper.substringInBetween(onePart.getKey(),prefix,delimiter);
      if (subName != null) {
        partsList.append(""String_Node_Str"");
        partsList.append(""String_Node_Str"");
        if (prefix != null && prefix.length() > 0)         partsList.append(StringEscapeUtils.escapeHtml(prefix) + StringEscapeUtils.escapeHtml(delimiter) + StringEscapeUtils.escapeHtml(subName));
 else         partsList.append(StringEscapeUtils.escapeHtml(subName));
        partsList.append(""String_Node_Str"");
        partsList.append(""String_Node_Str"");
      }
    }
  }
  xml.append(""String_Node_Str"").append((null == nextKey ? ""String_Node_Str"" : nextKey)).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append((0 == nextUploadId ? ""String_Node_Str"" : nextUploadId)).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(maxUploads).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(isTruncated).append(""String_Node_Str"");
  xml.append(partsList.toString());
  xml.append(""String_Node_Str"");
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  S3RestServlet.endResponse(response,xml.toString());
}",0.9835745013687917
105512,"public void executeGetBucket(HttpServletRequest request,HttpServletResponse response) throws IOException, XMLStreamException {
  S3ListBucketRequest engineRequest=new S3ListBucketRequest();
  engineRequest.setBucketName((String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY));
  engineRequest.setDelimiter(request.getParameter(""String_Node_Str""));
  engineRequest.setMarker(request.getParameter(""String_Node_Str""));
  engineRequest.setPrefix(request.getParameter(""String_Node_Str""));
  int maxKeys=Converter.toInt(request.getParameter(""String_Node_Str""),1000);
  engineRequest.setMaxKeys(maxKeys);
  try {
    S3ListBucketResponse engineResponse=ServiceProvider.getInstance().getS3Engine().listBucketContents(engineRequest,false);
    ListBucketResponse oneBucket=S3SerializableServiceImplementation.toListBucketResponse(engineResponse);
    OutputStream outputStream=response.getOutputStream();
    response.setStatus(200);
    response.setContentType(""String_Node_Str"");
    MTOMAwareResultStreamWriter resultWriter=new MTOMAwareResultStreamWriter(""String_Node_Str"",outputStream);
    resultWriter.startWrite();
    resultWriter.writeout(oneBucket);
    resultWriter.stopWrite();
  }
 catch (  NoSuchObjectException nsoe) {
    response.setStatus(404);
    response.setContentType(""String_Node_Str"");
    StringBuffer xmlError=new StringBuffer();
    xmlError.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append((String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY)).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    S3RestServlet.endResponse(response,xmlError.toString());
  }
}","public void executeGetBucket(HttpServletRequest request,HttpServletResponse response) throws IOException, XMLStreamException {
  S3ListBucketRequest engineRequest=new S3ListBucketRequest();
  engineRequest.setBucketName((String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY));
  engineRequest.setDelimiter(request.getParameter(""String_Node_Str""));
  engineRequest.setMarker(request.getParameter(""String_Node_Str""));
  engineRequest.setPrefix(request.getParameter(""String_Node_Str""));
  int maxKeys=Converter.toInt(request.getParameter(""String_Node_Str""),1000);
  engineRequest.setMaxKeys(maxKeys);
  try {
    S3ListBucketResponse engineResponse=ServiceProvider.getInstance().getS3Engine().listBucketContents(engineRequest,false);
    ListBucketResponse oneBucket=S3SerializableServiceImplementation.toListBucketResponse(engineResponse);
    OutputStream outputStream=response.getOutputStream();
    response.setStatus(200);
    response.setContentType(""String_Node_Str"");
    MTOMAwareResultStreamWriter resultWriter=new MTOMAwareResultStreamWriter(""String_Node_Str"",outputStream);
    resultWriter.startWrite();
    resultWriter.writeout(oneBucket);
    resultWriter.stopWrite();
  }
 catch (  NoSuchObjectException nsoe) {
    response.setStatus(404);
    response.setContentType(""String_Node_Str"");
    StringBuffer xmlError=new StringBuffer();
    xmlError.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(StringEscapeUtils.escapeHtml((String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY))).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    S3RestServlet.endResponse(response,xmlError.toString());
  }
}",0.991150442477876
105513,"public void executeGetAllBuckets(HttpServletRequest request,HttpServletResponse response) throws IOException, XMLStreamException {
  Calendar cal=Calendar.getInstance();
  cal.set(1970,1,1);
  S3ListAllMyBucketsRequest engineRequest=new S3ListAllMyBucketsRequest();
  engineRequest.setAccessKey(UserContext.current().getAccessKey());
  engineRequest.setRequestTimestamp(cal);
  engineRequest.setSignature(""String_Node_Str"");
  S3ListAllMyBucketsResponse engineResponse=ServiceProvider.getInstance().getS3Engine().handleRequest(engineRequest);
  ListAllMyBucketsResponse allBuckets=S3SerializableServiceImplementation.toListAllMyBucketsResponse(engineResponse);
  OutputStream outputStream=response.getOutputStream();
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  StringBuffer xml=new StringBuffer();
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(engineResponse.getOwner().getID()).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.getOwner().getDisplayName()).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  for (  S3ListAllMyBucketsEntry entry : engineResponse.getBuckets()) {
    xml.append(""String_Node_Str"").append(""String_Node_Str"").append(entry.getName()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sdf.format(entry.getCreationDate().getTime())).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
  }
  xml.append(""String_Node_Str"").append(""String_Node_Str"");
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  S3RestServlet.endResponse(response,xml.toString());
}","public void executeGetAllBuckets(HttpServletRequest request,HttpServletResponse response) throws IOException, XMLStreamException {
  Calendar cal=Calendar.getInstance();
  cal.set(1970,1,1);
  S3ListAllMyBucketsRequest engineRequest=new S3ListAllMyBucketsRequest();
  engineRequest.setAccessKey(UserContext.current().getAccessKey());
  engineRequest.setRequestTimestamp(cal);
  engineRequest.setSignature(""String_Node_Str"");
  S3ListAllMyBucketsResponse engineResponse=ServiceProvider.getInstance().getS3Engine().handleRequest(engineRequest);
  S3SerializableServiceImplementation.toListAllMyBucketsResponse(engineResponse);
  response.getOutputStream();
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  StringBuffer xml=new StringBuffer();
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(engineResponse.getOwner().getID()).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.getOwner().getDisplayName()).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  for (  S3ListAllMyBucketsEntry entry : engineResponse.getBuckets()) {
    xml.append(""String_Node_Str"").append(""String_Node_Str"").append(entry.getName()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(sdf.format(entry.getCreationDate().getTime())).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
  }
  xml.append(""String_Node_Str"").append(""String_Node_Str"");
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  S3RestServlet.endResponse(response,xml.toString());
}",0.4170040485829959
105514,"public void executeGetBucketObjectVersions(HttpServletRequest request,HttpServletResponse response) throws IOException {
  S3ListBucketRequest engineRequest=new S3ListBucketRequest();
  String keyMarker=request.getParameter(""String_Node_Str"");
  String versionIdMarker=request.getParameter(""String_Node_Str"");
  engineRequest.setBucketName((String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY));
  engineRequest.setDelimiter(request.getParameter(""String_Node_Str""));
  engineRequest.setMarker(keyMarker);
  engineRequest.setPrefix(request.getParameter(""String_Node_Str""));
  engineRequest.setVersionIdMarker(versionIdMarker);
  int maxKeys=Converter.toInt(request.getParameter(""String_Node_Str""),1000);
  engineRequest.setMaxKeys(maxKeys);
  S3ListBucketResponse engineResponse=ServiceProvider.getInstance().getS3Engine().listBucketContents(engineRequest,true);
  StringBuffer xml=new StringBuffer();
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.getBucketName()).append(""String_Node_Str"");
  if (null == keyMarker)   xml.append(""String_Node_Str"");
 else   xml.append(""String_Node_Str"").append(keyMarker).append(""String_Node_Str"");
  if (null == versionIdMarker)   xml.append(""String_Node_Str"");
 else   xml.append(""String_Node_Str"").append(keyMarker).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.getMaxKeys()).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.isTruncated()).append(""String_Node_Str"");
  S3ListBucketObjectEntry[] versions=engineResponse.getContents();
  for (int i=0; null != versions && i < versions.length; i++) {
    S3CanonicalUser owner=versions[i].getOwner();
    boolean isDeletionMarker=versions[i].getIsDeletionMarker();
    String displayName=owner.getDisplayName();
    String id=owner.getID();
    if (isDeletionMarker) {
      xml.append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getKey()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getVersion()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getIsLatest()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(DatatypeConverter.printDateTime(versions[i].getLastModified())).append(""String_Node_Str"");
    }
 else {
      xml.append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getKey()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getVersion()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getIsLatest()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(DatatypeConverter.printDateTime(versions[i].getLastModified())).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getETag()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getSize()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getStorageClass()).append(""String_Node_Str"");
    }
    xml.append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
    if (null == displayName)     xml.append(""String_Node_Str"");
 else     xml.append(""String_Node_Str"").append(owner.getDisplayName()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
    if (isDeletionMarker)     xml.append(""String_Node_Str"");
 else     xml.append(""String_Node_Str"");
  }
  xml.append(""String_Node_Str"");
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  S3RestServlet.endResponse(response,xml.toString());
}","public void executeGetBucketObjectVersions(HttpServletRequest request,HttpServletResponse response) throws IOException {
  S3ListBucketRequest engineRequest=new S3ListBucketRequest();
  String keyMarker=request.getParameter(""String_Node_Str"");
  String versionIdMarker=request.getParameter(""String_Node_Str"");
  engineRequest.setBucketName((String)request.getAttribute(S3Constants.BUCKET_ATTR_KEY));
  engineRequest.setDelimiter(request.getParameter(""String_Node_Str""));
  engineRequest.setMarker(keyMarker);
  engineRequest.setPrefix(request.getParameter(""String_Node_Str""));
  engineRequest.setVersionIdMarker(versionIdMarker);
  int maxKeys=Converter.toInt(request.getParameter(""String_Node_Str""),1000);
  engineRequest.setMaxKeys(maxKeys);
  S3ListBucketResponse engineResponse=ServiceProvider.getInstance().getS3Engine().listBucketContents(engineRequest,true);
  StringBuffer xml=new StringBuffer();
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.getBucketName()).append(""String_Node_Str"");
  if (null == keyMarker)   xml.append(""String_Node_Str"");
 else   xml.append(""String_Node_Str"").append(keyMarker).append(""String_Node_Str"");
  if (null == versionIdMarker)   xml.append(""String_Node_Str"");
 else   xml.append(""String_Node_Str"").append(StringEscapeUtils.escapeHtml(keyMarker)).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.getMaxKeys()).append(""String_Node_Str"");
  xml.append(""String_Node_Str"").append(engineResponse.isTruncated()).append(""String_Node_Str"");
  S3ListBucketObjectEntry[] versions=engineResponse.getContents();
  for (int i=0; null != versions && i < versions.length; i++) {
    S3CanonicalUser owner=versions[i].getOwner();
    boolean isDeletionMarker=versions[i].getIsDeletionMarker();
    String displayName=owner.getDisplayName();
    String id=owner.getID();
    if (isDeletionMarker) {
      xml.append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getKey()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getVersion()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getIsLatest()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(DatatypeConverter.printDateTime(versions[i].getLastModified())).append(""String_Node_Str"");
    }
 else {
      xml.append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getKey()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getVersion()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getIsLatest()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(DatatypeConverter.printDateTime(versions[i].getLastModified())).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getETag()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getSize()).append(""String_Node_Str"");
      xml.append(""String_Node_Str"").append(versions[i].getStorageClass()).append(""String_Node_Str"");
    }
    xml.append(""String_Node_Str"");
    xml.append(""String_Node_Str"").append(id).append(""String_Node_Str"");
    if (null == displayName)     xml.append(""String_Node_Str"");
 else     xml.append(""String_Node_Str"").append(owner.getDisplayName()).append(""String_Node_Str"");
    xml.append(""String_Node_Str"");
    if (isDeletionMarker)     xml.append(""String_Node_Str"");
 else     xml.append(""String_Node_Str"");
  }
  xml.append(""String_Node_Str"");
  response.setStatus(200);
  response.setContentType(""String_Node_Str"");
  S3RestServlet.endResponse(response,xml.toString());
}",0.9959481361426256
105515,"@Override public String handleTimeout(long updateMs){
  if (s_logger.isTraceEnabled()) {
    getDownloadListener().log(""String_Node_Str"" + updateMs + ""String_Node_Str""+ getName(),Level.TRACE);
  }
  String newState=this.getName();
  if (updateMs > 5 * DownloadListener.STATUS_POLL_INTERVAL) {
    newState=Status.DOWNLOAD_ERROR.toString();
    getDownloadListener().log(""String_Node_Str"" + getName(),Level.DEBUG);
  }
 else   if (updateMs > 3 * DownloadListener.STATUS_POLL_INTERVAL) {
    getDownloadListener().cancelStatusTask();
    getDownloadListener().scheduleImmediateStatusCheck(RequestType.GET_STATUS);
    getDownloadListener().scheduleTimeoutTask(3 * DownloadListener.STATUS_POLL_INTERVAL);
    getDownloadListener().log(getName() + ""String_Node_Str"",Level.DEBUG);
  }
 else {
    getDownloadListener().scheduleTimeoutTask(3 * DownloadListener.STATUS_POLL_INTERVAL);
  }
  return newState;
}","@Override public String handleTimeout(long updateMs){
  if (s_logger.isTraceEnabled()) {
    getDownloadListener().log(""String_Node_Str"" + updateMs + ""String_Node_Str""+ getName(),Level.TRACE);
  }
  String newState=getName();
  if (updateMs > 5 * DownloadListener.STATUS_POLL_INTERVAL) {
    newState=Status.DOWNLOAD_ERROR.toString();
    getDownloadListener().log(""String_Node_Str"" + getName(),Level.DEBUG);
  }
 else   if (updateMs > 3 * DownloadListener.STATUS_POLL_INTERVAL) {
    getDownloadListener().cancelStatusTask();
    getDownloadListener().scheduleImmediateStatusCheck(RequestType.GET_STATUS);
    getDownloadListener().scheduleTimeoutTask(3 * DownloadListener.STATUS_POLL_INTERVAL);
    getDownloadListener().log(getName() + ""String_Node_Str"",Level.DEBUG);
  }
 else {
    getDownloadListener().scheduleTimeoutTask(3 * DownloadListener.STATUS_POLL_INTERVAL);
  }
  return newState;
}",0.9972206781545304
105516,"@Override public void onEntry(String prevState,DownloadEvent event,Object evtObj){
  if (s_logger.isTraceEnabled()) {
    getDownloadListener().log(""String_Node_Str"" + prevState + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ event,Level.TRACE);
  }
  if (event == DownloadEvent.DOWNLOAD_ANSWER) {
    getDownloadListener().callback((DownloadAnswer)evtObj);
    getDownloadListener().setLastUpdated();
  }
}","@Override public void onEntry(String prevState,DownloadEvent event,Object evtObj){
  super.onEntry(prevState,event,evtObj);
  if (event == DownloadEvent.DOWNLOAD_ANSWER) {
    getDownloadListener().setLastUpdated();
  }
}",0.5483359746434231
105517,"@Override public String handleTimeout(long updateMs){
  if (s_logger.isTraceEnabled()) {
    getUploadListener().log(""String_Node_Str"" + updateMs + ""String_Node_Str""+ getName(),Level.TRACE);
  }
  String newState=this.getName();
  if (updateMs > 5 * UploadListener.STATUS_POLL_INTERVAL) {
    newState=Status.UPLOAD_ERROR.toString();
    getUploadListener().log(""String_Node_Str"" + getName(),Level.DEBUG);
  }
 else   if (updateMs > 3 * UploadListener.STATUS_POLL_INTERVAL) {
    getUploadListener().cancelStatusTask();
    getUploadListener().scheduleImmediateStatusCheck(RequestType.GET_STATUS);
    getUploadListener().scheduleTimeoutTask(3 * UploadListener.STATUS_POLL_INTERVAL);
    getUploadListener().log(getName() + ""String_Node_Str"",Level.DEBUG);
  }
 else {
    getUploadListener().scheduleTimeoutTask(3 * UploadListener.STATUS_POLL_INTERVAL);
  }
  return newState;
}","@Override public String handleTimeout(long updateMs){
  if (s_logger.isTraceEnabled()) {
    getUploadListener().log(""String_Node_Str"" + updateMs + ""String_Node_Str""+ getName(),Level.TRACE);
  }
  String newState=getName();
  if (updateMs > 5 * UploadListener.STATUS_POLL_INTERVAL) {
    newState=Status.UPLOAD_ERROR.toString();
    getUploadListener().log(""String_Node_Str"" + getName(),Level.DEBUG);
  }
 else   if (updateMs > 3 * UploadListener.STATUS_POLL_INTERVAL) {
    getUploadListener().cancelStatusTask();
    getUploadListener().scheduleImmediateStatusCheck(RequestType.GET_STATUS);
    getUploadListener().scheduleTimeoutTask(3 * UploadListener.STATUS_POLL_INTERVAL);
    getUploadListener().log(getName() + ""String_Node_Str"",Level.DEBUG);
  }
 else {
    getUploadListener().scheduleTimeoutTask(3 * UploadListener.STATUS_POLL_INTERVAL);
  }
  return newState;
}",0.9971444888635066
105518,"@Override public void onEntry(String prevState,UploadEvent event,Object evtObj){
  if (s_logger.isTraceEnabled()) {
    getUploadListener().log(""String_Node_Str"" + prevState + ""String_Node_Str""+ getName()+ ""String_Node_Str""+ event,Level.TRACE);
  }
  if (event == UploadEvent.UPLOAD_ANSWER) {
    getUploadListener().updateDatabase((UploadAnswer)evtObj);
    getUploadListener().setLastUpdated();
  }
}","@Override public void onEntry(String prevState,UploadEvent event,Object evtObj){
  super.onEntry(prevState,event,evtObj);
  if (event == UploadEvent.UPLOAD_ANSWER) {
    getUploadListener().setLastUpdated();
  }
}",0.5365853658536586
105519,"private void postDiskConfigBeforeStart(VirtualMachineMO vmMo,VirtualMachineTO vmSpec,DiskTO[] sortedDisks,int ideControllerKey,int scsiControllerKey,Map<String,String> iqnToPath) throws Exception {
  VirtualMachineDiskInfoBuilder diskInfoBuilder=vmMo.getDiskInfoBuilder();
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO)     continue;
    VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
    VirtualMachineDiskInfo diskInfo=getMatchingExistingDisk(diskInfoBuilder,vol);
    assert(diskInfo != null);
    String[] diskChain=diskInfo.getDiskChain();
    assert(diskChain.length > 0);
    Map<String,String> details=vol.getDetails();
    boolean managed=false;
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    }
    DatastoreFile file=new DatastoreFile(diskChain[0]);
    if (managed) {
      DatastoreFile originalFile=new DatastoreFile(volumeTO.getPath());
      if (!file.getFileBaseName().equalsIgnoreCase(originalFile.getFileBaseName())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ diskChain[0]);
      }
    }
 else {
      if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ file.getFileBaseName());
      }
    }
    VolumeObjectTO volInSpec=getVolumeInSpec(vmSpec,volumeTO);
    if (managed) {
      String datastoreVolumePath=diskChain[0];
      iqnToPath.put(details.get(DiskTO.IQN),datastoreVolumePath);
      vol.setPath(datastoreVolumePath);
      volumeTO.setPath(datastoreVolumePath);
      volInSpec.setPath(datastoreVolumePath);
    }
 else {
      volInSpec.setPath(file.getFileBaseName());
    }
    volInSpec.setChainInfo(_gson.toJson(diskInfo));
  }
}","private void postDiskConfigBeforeStart(VirtualMachineMO vmMo,VirtualMachineTO vmSpec,DiskTO[] sortedDisks,int ideControllerKey,int scsiControllerKey,Map<String,String> iqnToPath,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  VirtualMachineDiskInfoBuilder diskInfoBuilder=vmMo.getDiskInfoBuilder();
  for (  DiskTO vol : sortedDisks) {
    if (vol.getType() == Volume.Type.ISO)     continue;
    VolumeObjectTO volumeTO=(VolumeObjectTO)vol.getData();
    VirtualMachineDiskInfo diskInfo=getMatchingExistingDisk(diskInfoBuilder,vol,hyperHost,context);
    assert(diskInfo != null);
    String[] diskChain=diskInfo.getDiskChain();
    assert(diskChain.length > 0);
    Map<String,String> details=vol.getDetails();
    boolean managed=false;
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    }
    DatastoreFile file=new DatastoreFile(diskChain[0]);
    if (managed) {
      DatastoreFile originalFile=new DatastoreFile(volumeTO.getPath());
      if (!file.getFileBaseName().equalsIgnoreCase(originalFile.getFileBaseName())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ diskChain[0]);
      }
    }
 else {
      if (!file.getFileBaseName().equalsIgnoreCase(volumeTO.getPath())) {
        if (s_logger.isInfoEnabled())         s_logger.info(""String_Node_Str"" + volumeTO.getId() + ""String_Node_Str""+ volumeTO.getPath()+ ""String_Node_Str""+ file.getFileBaseName());
      }
    }
    VolumeObjectTO volInSpec=getVolumeInSpec(vmSpec,volumeTO);
    if (managed) {
      String datastoreVolumePath=diskChain[0];
      iqnToPath.put(details.get(DiskTO.IQN),datastoreVolumePath);
      vol.setPath(datastoreVolumePath);
      volumeTO.setPath(datastoreVolumePath);
      volInSpec.setPath(datastoreVolumePath);
    }
 else {
      volInSpec.setPath(file.getFileBaseName());
    }
    volInSpec.setChainInfo(_gson.toJson(diskInfo));
  }
}",0.98204804045512
105520,"private VirtualMachineDiskInfo getMatchingExistingDisk(VirtualMachineDiskInfoBuilder diskInfoBuilder,DiskTO vol){
  if (diskInfoBuilder != null) {
    VolumeObjectTO volume=(VolumeObjectTO)vol.getData();
    String dsName=volume.getDataStore().getUuid().replace(""String_Node_Str"",""String_Node_Str"");
    Map<String,String> details=vol.getDetails();
    boolean isManaged=details != null && Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    VirtualMachineDiskInfo diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(isManaged ? new DatastoreFile(volume.getPath()).getFileBaseName() : volume.getPath(),dsName);
    if (diskInfo != null) {
      s_logger.info(""String_Node_Str"" + volume.getPath());
      return diskInfo;
    }
 else {
      String chainInfo=volume.getChainInfo();
      if (chainInfo != null) {
        VirtualMachineDiskInfo infoInChain=_gson.fromJson(chainInfo,VirtualMachineDiskInfo.class);
        if (infoInChain != null) {
          String[] disks=infoInChain.getDiskChain();
          if (disks.length > 0) {
            for (            String diskPath : disks) {
              DatastoreFile file=new DatastoreFile(diskPath);
              diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(file.getFileBaseName(),dsName);
              if (diskInfo != null) {
                s_logger.info(""String_Node_Str"" + diskPath);
                return diskInfo;
              }
            }
          }
          if (diskInfo == null) {
            diskInfo=diskInfoBuilder.getDiskInfoByDeviceBusName(infoInChain.getDiskDeviceBusName());
            if (diskInfo != null) {
              s_logger.info(""String_Node_Str"" + infoInChain.getDiskDeviceBusName());
              return diskInfo;
            }
          }
        }
      }
    }
  }
  return null;
}","private VirtualMachineDiskInfo getMatchingExistingDisk(VirtualMachineDiskInfoBuilder diskInfoBuilder,DiskTO vol,VmwareHypervisorHost hyperHost,VmwareContext context) throws Exception {
  if (diskInfoBuilder != null) {
    VolumeObjectTO volume=(VolumeObjectTO)vol.getData();
    ManagedObjectReference morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,volume.getDataStore().getUuid());
    DatastoreMO dsMo=new DatastoreMO(context,morDs);
    String dsName=dsMo.getName();
    Map<String,String> details=vol.getDetails();
    boolean isManaged=details != null && Boolean.parseBoolean(details.get(DiskTO.MANAGED));
    VirtualMachineDiskInfo diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(isManaged ? new DatastoreFile(volume.getPath()).getFileBaseName() : volume.getPath(),dsName);
    if (diskInfo != null) {
      s_logger.info(""String_Node_Str"" + volume.getPath());
      return diskInfo;
    }
 else {
      String chainInfo=volume.getChainInfo();
      if (chainInfo != null) {
        VirtualMachineDiskInfo infoInChain=_gson.fromJson(chainInfo,VirtualMachineDiskInfo.class);
        if (infoInChain != null) {
          String[] disks=infoInChain.getDiskChain();
          if (disks.length > 0) {
            for (            String diskPath : disks) {
              DatastoreFile file=new DatastoreFile(diskPath);
              diskInfo=diskInfoBuilder.getDiskInfoByBackingFileBaseName(file.getFileBaseName(),dsName);
              if (diskInfo != null) {
                s_logger.info(""String_Node_Str"" + diskPath);
                return diskInfo;
              }
            }
          }
          if (diskInfo == null) {
            diskInfo=diskInfoBuilder.getDiskInfoByDeviceBusName(infoInChain.getDiskDeviceBusName());
            if (diskInfo != null) {
              s_logger.info(""String_Node_Str"" + infoInChain.getDiskDeviceBusName());
              return diskInfo;
            }
          }
        }
      }
    }
  }
  return null;
}",0.907651715039578
105521,"@Override protected void init() throws IOException {
  _selector=Selector.open();
  Task task=null;
  try (SocketChannel sch=SocketChannel.open()){
    sch.configureBlocking(true);
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    if (_bindAddress != null) {
      s_logger.info(""String_Node_Str"" + _bindAddress);
      InetSocketAddress bindAddr=new InetSocketAddress(_bindAddress,0);
      sch.socket().bind(bindAddr);
    }
    InetSocketAddress peerAddr=new InetSocketAddress(_host,_port);
    sch.connect(peerAddr);
    SSLEngine sslEngine=null;
    sch.configureBlocking(true);
    SSLContext sslContext=Link.initSSLContext(true);
    sslEngine=sslContext.createSSLEngine(_host,_port);
    sslEngine.setUseClientMode(true);
    Link.doHandshake(sch,sslEngine,true);
    s_logger.info(""String_Node_Str"");
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    sch.configureBlocking(false);
    Link link=new Link(peerAddr,this);
    link.setSSLEngine(sslEngine);
    SelectionKey key=sch.register(_selector,SelectionKey.OP_READ);
    link.setKey(key);
    key.attach(link);
    task=_factory.create(Task.Type.CONNECT,link,null);
  }
 catch (  GeneralSecurityException e) {
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    _selector.close();
  }
  _executor.execute(task);
}","@Override protected void init() throws IOException {
  _selector=Selector.open();
  Task task=null;
  try {
    _clientConnection=SocketChannel.open();
    _clientConnection.configureBlocking(true);
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    if (_bindAddress != null) {
      s_logger.info(""String_Node_Str"" + _bindAddress);
      InetSocketAddress bindAddr=new InetSocketAddress(_bindAddress,0);
      _clientConnection.socket().bind(bindAddr);
    }
    InetSocketAddress peerAddr=new InetSocketAddress(_host,_port);
    _clientConnection.connect(peerAddr);
    SSLEngine sslEngine=null;
    _clientConnection.configureBlocking(true);
    SSLContext sslContext=Link.initSSLContext(true);
    sslEngine=sslContext.createSSLEngine(_host,_port);
    sslEngine.setUseClientMode(true);
    Link.doHandshake(_clientConnection,sslEngine,true);
    s_logger.info(""String_Node_Str"");
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    _clientConnection.configureBlocking(false);
    Link link=new Link(peerAddr,this);
    link.setSSLEngine(sslEngine);
    SelectionKey key=_clientConnection.register(_selector,SelectionKey.OP_READ);
    link.setKey(key);
    key.attach(link);
    task=_factory.create(Task.Type.CONNECT,link,null);
  }
 catch (  GeneralSecurityException e) {
    _selector.close();
    throw new IOException(""String_Node_Str"",e);
  }
catch (  IOException e) {
    _selector.close();
    throw e;
  }
  _executor.execute(task);
}",0.836440379880408
105522,"public InternalErrorException(String message){
  super(message);
}","public InternalErrorException(String message,Throwable cause){
  super(message,cause);
}",0.8571428571428571
105523,"public ManagementServerException(String message){
  super(message);
}","public ManagementServerException(String message,Throwable cause){
  super(message,cause);
}",0.8625
105524,"@Override public FormatInfo process(String templatePath,ImageFormat format,String templateName) throws InternalErrorException {
  if (format != null) {
    s_logger.debug(""String_Node_Str"" + format + ""String_Node_Str"");
    return null;
  }
  String vhdPath=templatePath + File.separator + templateName+ ""String_Node_Str""+ ImageFormat.VHD.getFileExtension();
  if (!_storage.exists(vhdPath)) {
    s_logger.debug(""String_Node_Str"" + vhdPath);
    return null;
  }
  FormatInfo info=new FormatInfo();
  info.format=ImageFormat.VHD;
  info.filename=templateName + ""String_Node_Str"" + ImageFormat.VHD.getFileExtension();
  File vhdFile=_storage.getFile(vhdPath);
  info.size=_storage.getSize(vhdPath);
  FileInputStream strm=null;
  byte[] currentSize=new byte[8];
  byte[] creatorApp=new byte[4];
  try {
    strm=new FileInputStream(vhdFile);
    strm.skip(info.size - vhdFooterSize + vhdFooterCreatorAppOffset);
    strm.read(creatorApp);
    strm.skip(vhdFooterCurrentSizeOffset - vhdFooterCreatorVerOffset);
    strm.read(currentSize);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + vhdPath,e);
    throw new InternalErrorException(""String_Node_Str"" + vhdPath + ""String_Node_Str""+ e);
  }
 finally {
    if (strm != null) {
      try {
        strm.close();
      }
 catch (      IOException e) {
      }
    }
  }
  long templateSize=NumbersUtil.bytesToLong(currentSize);
  info.virtualSize=templateSize;
  return info;
}","@Override public FormatInfo process(String templatePath,ImageFormat format,String templateName) throws InternalErrorException {
  if (format != null) {
    s_logger.debug(""String_Node_Str"" + format + ""String_Node_Str"");
    return null;
  }
  String vhdPath=templatePath + File.separator + templateName+ ""String_Node_Str""+ ImageFormat.VHD.getFileExtension();
  if (!_storage.exists(vhdPath)) {
    s_logger.debug(""String_Node_Str"" + vhdPath);
    return null;
  }
  FormatInfo info=new FormatInfo();
  info.format=ImageFormat.VHD;
  info.filename=templateName + ""String_Node_Str"" + ImageFormat.VHD.getFileExtension();
  File vhdFile=_storage.getFile(vhdPath);
  info.size=_storage.getSize(vhdPath);
  FileInputStream strm=null;
  byte[] currentSize=new byte[8];
  byte[] creatorApp=new byte[4];
  try {
    strm=new FileInputStream(vhdFile);
    long skipped=strm.skip(info.size - vhdFooterSize + vhdFooterCreatorAppOffset);
    if (skipped == -1) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    long read=strm.read(creatorApp);
    if (read == -1) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    skipped=strm.skip(vhdFooterCurrentSizeOffset - vhdFooterCreatorVerOffset);
    if (skipped == -1) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    read=strm.read(currentSize);
    if (read == -1) {
      throw new InternalErrorException(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"" + vhdPath,e);
    throw new InternalErrorException(""String_Node_Str"" + vhdPath + ""String_Node_Str""+ e,e);
  }
 finally {
    if (strm != null) {
      try {
        strm.close();
      }
 catch (      IOException e) {
      }
    }
  }
  long templateSize=NumbersUtil.bytesToLong(currentSize);
  info.virtualSize=templateSize;
  return info;
}",0.7544180377818404
105525,"public static SSLContext initSSLContext(boolean isClient) throws Exception {
  InputStream stream;
  SSLContext sslContext=null;
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
  TrustManagerFactory tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
  KeyStore ks=KeyStore.getInstance(""String_Node_Str"");
  TrustManager[] tms;
  File confFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
  if (null != confFile && !isClient) {
    final Properties dbProps=DbProperties.getDbProperties();
    char[] passphrase=dbProps.getProperty(""String_Node_Str"").toCharArray();
    String confPath=confFile.getParent();
    String keystorePath=confPath + keystoreFile;
    if (new File(keystorePath).exists()) {
      stream=new FileInputStream(keystorePath);
    }
 else {
      s_logger.warn(""String_Node_Str"");
      stream=NioConnection.class.getResourceAsStream(""String_Node_Str"");
    }
    ks.load(stream,passphrase);
    stream.close();
    kmf.init(ks,passphrase);
    tmf.init(ks);
    tms=tmf.getTrustManagers();
  }
 else {
    ks.load(null,null);
    kmf.init(ks,null);
    tms=new TrustManager[1];
    tms[0]=new TrustAllManager();
  }
  sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(kmf.getKeyManagers(),tms,null);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  return sslContext;
}","public static SSLContext initSSLContext(boolean isClient) throws GeneralSecurityException, IOException {
  InputStream stream;
  SSLContext sslContext=null;
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
  TrustManagerFactory tmf=TrustManagerFactory.getInstance(""String_Node_Str"");
  KeyStore ks=KeyStore.getInstance(""String_Node_Str"");
  TrustManager[] tms;
  File confFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
  if (null != confFile && !isClient) {
    final Properties dbProps=DbProperties.getDbProperties();
    char[] passphrase=dbProps.getProperty(""String_Node_Str"").toCharArray();
    String confPath=confFile.getParent();
    String keystorePath=confPath + keystoreFile;
    if (new File(keystorePath).exists()) {
      stream=new FileInputStream(keystorePath);
    }
 else {
      s_logger.warn(""String_Node_Str"");
      stream=NioConnection.class.getResourceAsStream(""String_Node_Str"");
    }
    ks.load(stream,passphrase);
    stream.close();
    kmf.init(ks,passphrase);
    tmf.init(ks);
    tms=tmf.getTrustManagers();
  }
 else {
    ks.load(null,null);
    kmf.init(ks,null);
    tms=new TrustManager[1];
    tms[0]=new TrustAllManager();
  }
  sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(kmf.getKeyManagers(),tms,null);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  return sslContext;
}",0.9899425287356322
105526,"@Override protected void init() throws IOException {
  _selector=Selector.open();
  SocketChannel sch=null;
  InetSocketAddress addr=null;
  try {
    sch=SocketChannel.open();
    sch.configureBlocking(true);
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    if (_bindAddress != null) {
      s_logger.info(""String_Node_Str"" + _bindAddress);
      addr=new InetSocketAddress(_bindAddress,0);
      sch.socket().bind(addr);
    }
    addr=new InetSocketAddress(_host,_port);
    sch.connect(addr);
  }
 catch (  IOException e) {
    _selector.close();
    throw e;
  }
  SSLEngine sslEngine=null;
  try {
    sch.configureBlocking(true);
    SSLContext sslContext=Link.initSSLContext(true);
    sslEngine=sslContext.createSSLEngine(_host,_port);
    sslEngine.setUseClientMode(true);
    Link.doHandshake(sch,sslEngine,true);
    s_logger.info(""String_Node_Str"");
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
  }
 catch (  Exception e) {
    _selector.close();
    throw new IOException(""String_Node_Str"" + e);
  }
  Task task=null;
  try {
    sch.configureBlocking(false);
    Link link=new Link(addr,this);
    link.setSSLEngine(sslEngine);
    SelectionKey key=sch.register(_selector,SelectionKey.OP_READ);
    link.setKey(key);
    key.attach(link);
    task=_factory.create(Task.Type.CONNECT,link,null);
  }
 catch (  Exception e) {
    _selector.close();
    throw new IOException(""String_Node_Str"" + e);
  }
  _executor.execute(task);
}","@Override protected void init() throws IOException {
  _selector=Selector.open();
  Task task=null;
  try (SocketChannel sch=SocketChannel.open()){
    sch.configureBlocking(true);
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    if (_bindAddress != null) {
      s_logger.info(""String_Node_Str"" + _bindAddress);
      InetSocketAddress bindAddr=new InetSocketAddress(_bindAddress,0);
      sch.socket().bind(bindAddr);
    }
    InetSocketAddress peerAddr=new InetSocketAddress(_host,_port);
    sch.connect(peerAddr);
    SSLEngine sslEngine=null;
    sch.configureBlocking(true);
    SSLContext sslContext=Link.initSSLContext(true);
    sslEngine=sslContext.createSSLEngine(_host,_port);
    sslEngine.setUseClientMode(true);
    Link.doHandshake(sch,sslEngine,true);
    s_logger.info(""String_Node_Str"");
    s_logger.info(""String_Node_Str"" + _host + ""String_Node_Str""+ _port);
    sch.configureBlocking(false);
    Link link=new Link(peerAddr,this);
    link.setSSLEngine(sslEngine);
    SelectionKey key=sch.register(_selector,SelectionKey.OP_READ);
    link.setKey(key);
    key.attach(link);
    task=_factory.create(Task.Type.CONNECT,link,null);
  }
 catch (  GeneralSecurityException e) {
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    _selector.close();
  }
  _executor.execute(task);
}",0.7911392405063291
105527,"@Override protected void init() throws IOException {
  _selector=SelectorProvider.provider().openSelector();
  ServerSocketChannel ssc=ServerSocketChannel.open();
  ssc.configureBlocking(false);
  _localAddr=new InetSocketAddress(_port);
  ssc.socket().bind(_localAddr);
  ssc.register(_selector,SelectionKey.OP_ACCEPT,null);
  s_logger.info(""String_Node_Str"" + _localAddr.toString());
}","@Override protected void init() throws IOException {
  _selector=SelectorProvider.provider().openSelector();
  _serverSocket=ServerSocketChannel.open();
  _serverSocket.configureBlocking(false);
  _localAddr=new InetSocketAddress(_port);
  _serverSocket.socket().bind(_localAddr);
  _serverSocket.register(_selector,SelectionKey.OP_ACCEPT,null);
  s_logger.info(""String_Node_Str"" + _localAddr.toString());
}",0.8639798488664987
105528,"@Override public final Answer executeRequest(final Command cmd){
  URI agentUri=null;
  Class<? extends Command> clazz=cmd.getClass();
  Answer answer=null;
  try {
    String cmdName=cmd.getClass().getName();
    agentUri=new URI(""String_Node_Str"",null,_agentIp,_port,""String_Node_Str"" + cmdName,null,null);
  }
 catch (  URISyntaxException e) {
    String errMsg=""String_Node_Str"";
    s_logger.error(errMsg,e);
    return null;
  }
  if (cmd instanceof NetworkElementCommand) {
    return _vrResource.executeRequest((NetworkElementCommand)cmd);
  }
  if (clazz == CheckSshCommand.class) {
    answer=execute((CheckSshCommand)cmd);
  }
 else   if (clazz == GetDomRVersionCmd.class) {
    answer=execute((GetDomRVersionCmd)cmd);
  }
 else   if (cmd instanceof NetworkUsageCommand) {
    answer=execute((NetworkUsageCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    answer=execute((IpAssocCommand)cmd);
  }
 else   if (clazz == DnsMasqConfigCommand.class) {
    return execute((DnsMasqConfigCommand)cmd);
  }
 else   if (clazz == CreateIpAliasCommand.class) {
    return execute((CreateIpAliasCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    answer=execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    answer=execute((VmDataCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    answer=execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == SetFirewallRulesCommand.class) {
    answer=execute((SetFirewallRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    answer=execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == DeleteIpAliasCommand.class) {
    return execute((DeleteIpAliasCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    answer=execute((PingTestCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    answer=execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == CheckRouterCommand.class) {
    answer=execute((CheckRouterCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    answer=execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetSourceNatCommand.class) {
    answer=execute((SetSourceNatCommand)cmd);
  }
 else   if (clazz == Site2SiteVpnCfgCommand.class) {
    answer=execute((Site2SiteVpnCfgCommand)cmd);
  }
 else   if (clazz == CheckS2SVpnConnectionsCommand.class) {
    answer=execute((CheckS2SVpnConnectionsCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    answer=execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    answer=execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == SetStaticRouteCommand.class) {
    answer=execute((SetStaticRouteCommand)cmd);
  }
 else   if (clazz == SetMonitorServiceCommand.class) {
    answer=execute((SetMonitorServiceCommand)cmd);
  }
 else   if (clazz == PlugNicCommand.class) {
    answer=execute((PlugNicCommand)cmd);
  }
 else   if (clazz == UnPlugNicCommand.class) {
    answer=execute((UnPlugNicCommand)cmd);
  }
 else   if (clazz == CopyCommand.class) {
    answer=execute((CopyCommand)cmd);
  }
 else {
    if (clazz == StartCommand.class) {
      VirtualMachineTO vmSpec=((StartCommand)cmd).getVirtualMachine();
      if (vmSpec.getType() != VirtualMachine.Type.User) {
        if (s_hypervMgr != null) {
          String secondary=s_hypervMgr.prepareSecondaryStorageStore(Long.parseLong(_zoneId));
          if (secondary != null) {
            ((StartCommand)cmd).setSecondaryStorage(secondary);
          }
        }
 else {
          s_logger.error(""String_Node_Str"");
        }
      }
    }
    String ansStr=postHttpRequest(s_gson.toJson(cmd),agentUri);
    if (ansStr == null) {
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
    Answer[] result=s_gson.fromJson(ansStr,Answer[].class);
    String logResult=cleanPassword(StringEscapeUtils.unescapeJava(result.toString()));
    s_logger.debug(""String_Node_Str"" + logResult);
    if (result.length > 0) {
      return result[0];
    }
  }
  return answer;
}","@Override public final Answer executeRequest(final Command cmd){
  URI agentUri=null;
  Class<? extends Command> clazz=cmd.getClass();
  Answer answer=null;
  try {
    String cmdName=cmd.getClass().getName();
    agentUri=new URI(""String_Node_Str"",null,_agentIp,_port,""String_Node_Str"" + cmdName,null,null);
  }
 catch (  URISyntaxException e) {
    String errMsg=""String_Node_Str"";
    s_logger.error(errMsg,e);
    return null;
  }
  if (cmd instanceof NetworkElementCommand) {
    return _vrResource.executeRequest((NetworkElementCommand)cmd);
  }
  if (clazz == CheckSshCommand.class) {
    answer=execute((CheckSshCommand)cmd);
  }
 else   if (clazz == GetDomRVersionCmd.class) {
    answer=execute((GetDomRVersionCmd)cmd);
  }
 else   if (cmd instanceof NetworkUsageCommand) {
    answer=execute((NetworkUsageCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    answer=execute((IpAssocCommand)cmd);
  }
 else   if (clazz == DnsMasqConfigCommand.class) {
    return execute((DnsMasqConfigCommand)cmd);
  }
 else   if (clazz == CreateIpAliasCommand.class) {
    return execute((CreateIpAliasCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    answer=execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    answer=execute((VmDataCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    answer=execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == SetFirewallRulesCommand.class) {
    answer=execute((SetFirewallRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    answer=execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == DeleteIpAliasCommand.class) {
    return execute((DeleteIpAliasCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    answer=execute((PingTestCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    answer=execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == CheckRouterCommand.class) {
    answer=execute((CheckRouterCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    answer=execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetSourceNatCommand.class) {
    answer=execute((SetSourceNatCommand)cmd);
  }
 else   if (clazz == Site2SiteVpnCfgCommand.class) {
    answer=execute((Site2SiteVpnCfgCommand)cmd);
  }
 else   if (clazz == CheckS2SVpnConnectionsCommand.class) {
    answer=execute((CheckS2SVpnConnectionsCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    answer=execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    answer=execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == SetStaticRouteCommand.class) {
    answer=execute((SetStaticRouteCommand)cmd);
  }
 else   if (clazz == SetMonitorServiceCommand.class) {
    answer=execute((SetMonitorServiceCommand)cmd);
  }
 else   if (clazz == PlugNicCommand.class) {
    answer=execute((PlugNicCommand)cmd);
  }
 else   if (clazz == UnPlugNicCommand.class) {
    answer=execute((UnPlugNicCommand)cmd);
  }
 else   if (clazz == CopyCommand.class) {
    answer=execute((CopyCommand)cmd);
  }
 else {
    if (clazz == StartCommand.class) {
      VirtualMachineTO vmSpec=((StartCommand)cmd).getVirtualMachine();
      if (vmSpec.getType() != VirtualMachine.Type.User) {
        if (s_hypervMgr != null) {
          String secondary=s_hypervMgr.prepareSecondaryStorageStore(Long.parseLong(_zoneId));
          if (secondary != null) {
            ((StartCommand)cmd).setSecondaryStorage(secondary);
          }
        }
 else {
          s_logger.error(""String_Node_Str"");
        }
      }
    }
    String ansStr=postHttpRequest(s_gson.toJson(cmd),agentUri);
    if (ansStr == null) {
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
    Answer[] result=s_gson.fromJson(ansStr,Answer[].class);
    String logResult=cleanPassword(s_gson.toJson(result));
    s_logger.debug(""String_Node_Str"" + logResult);
    if (result.length > 0) {
      return result[0];
    }
  }
  return answer;
}",0.9919335125886092
105529,"public void setRefCnt(Long refCnt){
  if (refCnt > 0) {
    refCnt--;
  }
 else {
    s_logger.warn(""String_Node_Str"");
  }
}","public void setRefCnt(Long refCnt){
  this.refCnt=refCnt;
}",0.5869565217391305
105530,"public void decrRefCnt(){
  refCnt--;
}","public void decrRefCnt(){
  if (refCnt > 0) {
    refCnt--;
  }
 else {
    s_logger.warn(""String_Node_Str"");
  }
}",0.5064935064935064
105531,"private String sendRequest(String service,String xmlRequest) throws ExecutionException {
  org.apache.commons.httpclient.protocol.Protocol myhttps=new org.apache.commons.httpclient.protocol.Protocol(""String_Node_Str"",new EasySSLProtocolSocketFactory(),443);
  HttpClient client=new HttpClient();
  client.getHostConfiguration().setHost(_ip,443,myhttps);
  byte[] response=null;
  PostMethod method=new PostMethod(""String_Node_Str"" + service);
  method.setRequestBody(xmlRequest);
  try {
    int statusCode=client.executeMethod(method);
    if (statusCode != HttpStatus.SC_OK) {
      throw new Exception(""String_Node_Str"" + statusCode);
    }
    response=method.getResponseBody();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    throw new ExecutionException(e.getMessage());
  }
  System.out.println(new String(response));
  return new String(response);
}","private String sendRequest(String service,String xmlRequest) throws ExecutionException {
  org.apache.commons.httpclient.protocol.Protocol myhttps=null;
  HttpClient client=new HttpClient();
  byte[] response=null;
  PostMethod method=new PostMethod(""String_Node_Str"" + service);
  method.setRequestBody(xmlRequest);
  try {
    myhttps=new org.apache.commons.httpclient.protocol.Protocol(""String_Node_Str"",new EasySSLProtocolSocketFactory(),443);
    client.getHostConfiguration().setHost(_ip,443,myhttps);
    int statusCode=client.executeMethod(method);
    if (statusCode != HttpStatus.SC_OK) {
      throw new Exception(""String_Node_Str"" + statusCode);
    }
    response=method.getResponseBody();
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    throw new ExecutionException(e.getMessage());
  }
  System.out.println(new String(response));
  return new String(response);
}",0.7982062780269058
105532,"@Override public void create(){
  if (getSourceCidrList() != null) {
    String guestCidr=_networkService.getNetwork(getNetworkId()).getCidr();
    for (    String cidr : getSourceCidrList()) {
      if (!NetUtils.isValidCIDR(cidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,""String_Node_Str"" + cidr);
      }
      if (cidr.equals(NetUtils.ALL_CIDRS)) {
        continue;
      }
      if (!NetUtils.isNetworkAWithinNetworkB(cidr,guestCidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,cidr + ""String_Node_Str"" + guestCidr);
      }
    }
  }
  if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {
    if (getSourcePortStart() != null && getSourcePortEnd() != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + networkId);
    }
  }
  if (getVpcId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  try {
    FirewallRule result=_firewallService.createEgressFirewallRule(this);
    setEntityId(result.getId());
    setEntityUuid(result.getUuid());
  }
 catch (  NetworkRuleConflictException ex) {
    s_logger.info(""String_Node_Str"" + ex.getMessage());
    s_logger.trace(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,ex.getMessage());
  }
}","@Override public void create(){
  if (getSourceCidrList() != null) {
    String guestCidr=_networkService.getNetwork(getNetworkId()).getCidr();
    for (    String cidr : getSourceCidrList()) {
      if (!NetUtils.isValidCIDR(cidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,""String_Node_Str"" + cidr);
      }
      if (cidr.equals(NetUtils.ALL_CIDRS)) {
        continue;
      }
      if (!NetUtils.isNetworkAWithinNetworkB(cidr,guestCidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,cidr + ""String_Node_Str"" + guestCidr);
      }
    }
  }
  if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {
    if (getSourcePortStart() != null && getSourcePortEnd() != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + networkId);
    }
  }
  if (getVpcId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  try {
    FirewallRule result=_firewallService.createEgressFirewallRule(this);
    if (result != null) {
      setEntityId(result.getId());
      setEntityUuid(result.getUuid());
    }
  }
 catch (  NetworkRuleConflictException ex) {
    s_logger.info(""String_Node_Str"" + ex.getMessage());
    s_logger.trace(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,ex.getMessage());
  }
}",0.9868324798829554
105533,"@Override public void execute(){
  Pair<List<? extends FirewallRule>,Integer> result=_firewallService.listFirewallRules(this);
  ListResponse<FirewallResponse> response=new ListResponse<FirewallResponse>();
  List<FirewallResponse> fwResponses=new ArrayList<FirewallResponse>();
  for (  FirewallRule fwRule : result.first()) {
    FirewallResponse ruleData=_responseGenerator.createFirewallResponse(fwRule);
    ruleData.setObjectName(""String_Node_Str"");
    fwResponses.add(ruleData);
  }
  response.setResponses(fwResponses,result.second());
  response.setResponseName(getCommandName());
  setResponseObject(response);
}","@Override public void execute(){
  Pair<List<? extends FirewallRule>,Integer> result=_firewallService.listFirewallRules(this);
  ListResponse<FirewallResponse> response=new ListResponse<FirewallResponse>();
  List<FirewallResponse> fwResponses=new ArrayList<FirewallResponse>();
  if (result != null) {
    for (    FirewallRule fwRule : result.first()) {
      FirewallResponse ruleData=_responseGenerator.createFirewallResponse(fwRule);
      ruleData.setObjectName(""String_Node_Str"");
      fwResponses.add(ruleData);
    }
    response.setResponses(fwResponses,result.second());
  }
  response.setResponseName(getCommandName());
  setResponseObject(response);
}",0.9596273291925466
105534,"@Override public void execute() throws ResourceUnavailableException, ResourceAllocationException, ConcurrentOperationException, InsufficientCapacityException {
  try {
    List<? extends Nic> results=_networkService.listNics(this);
    ListResponse<NicResponse> response=new ListResponse<NicResponse>();
    List<NicResponse> resList=new ArrayList<NicResponse>(results.size());
    for (    Nic r : results) {
      NicResponse resp=_responseGenerator.createNicResponse(r);
      resp.setObjectName(""String_Node_Str"");
      resList.add(resp);
    }
    response.setResponses(resList);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"");
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,e.getMessage());
  }
}","@Override public void execute() throws ResourceUnavailableException, ResourceAllocationException, ConcurrentOperationException, InsufficientCapacityException {
  try {
    List<? extends Nic> results=_networkService.listNics(this);
    ListResponse<NicResponse> response=new ListResponse<NicResponse>();
    List<NicResponse> resList=null;
    if (results != null) {
      resList=new ArrayList<NicResponse>(results.size());
      for (      Nic r : results) {
        NicResponse resp=_responseGenerator.createNicResponse(r);
        resp.setObjectName(""String_Node_Str"");
        resList.add(resp);
      }
      response.setResponses(resList);
    }
    response.setResponses(resList);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"");
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,e.getMessage());
  }
}",0.9410417859187178
105535,"private void upgradeEgressFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  ResultSet rsId=null;
  ResultSet rsNw=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + pstmt);
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long netId=rs.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      pstmt.setLong(1,netId);
      s_logger.debug(""String_Node_Str"" + pstmt);
      rsNw=pstmt.executeQuery();
      if (rsNw.next()) {
        long accountId=rsNw.getLong(1);
        long domainId=rsNw.getLong(2);
        s_logger.debug(""String_Node_Str"" + netId);
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,UUID.randomUUID().toString());
        pstmt.setLong(2,accountId);
        pstmt.setLong(3,domainId);
        pstmt.setLong(4,netId);
        pstmt.setString(5,UUID.randomUUID().toString());
        s_logger.debug(""String_Node_Str"" + pstmt);
        pstmt.executeUpdate();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,netId);
        rsId=pstmt.executeQuery();
        long firewallRuleId;
        if (rsId.next()) {
          firewallRuleId=rsId.getLong(1);
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,firewallRuleId);
          s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
          pstmt.executeUpdate();
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","private void upgradeEgressFirewallRules(Connection conn){
  try (PreparedStatement updateNwpstmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"")){
    updateNwpstmt.executeUpdate();
    s_logger.debug(""String_Node_Str"" + updateNwpstmt);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try (PreparedStatement vrNwpstmt=conn.prepareStatement(""String_Node_Str"");ResultSet vrNwsRs=vrNwpstmt.executeQuery()){
    while (vrNwsRs.next()) {
      long netId=vrNwsRs.getLong(1);
      try (PreparedStatement NwAcctDomIdpstmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")){
        NwAcctDomIdpstmt.setLong(1,netId);
        try (ResultSet NwAcctDomIdps=NwAcctDomIdpstmt.executeQuery()){
          s_logger.debug(""String_Node_Str"" + NwAcctDomIdpstmt);
          if (NwAcctDomIdps.next()) {
            long accountId=NwAcctDomIdps.getLong(1);
            long domainId=NwAcctDomIdps.getLong(2);
            s_logger.debug(""String_Node_Str"" + netId);
            try (PreparedStatement fwRulespstmt=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"")){
              fwRulespstmt.setString(1,UUID.randomUUID().toString());
              fwRulespstmt.setLong(2,accountId);
              fwRulespstmt.setLong(3,domainId);
              fwRulespstmt.setLong(4,netId);
              fwRulespstmt.setString(5,UUID.randomUUID().toString());
              s_logger.debug(""String_Node_Str"" + fwRulespstmt);
              fwRulespstmt.executeUpdate();
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
            try (PreparedStatement protoAllpstmt=conn.prepareStatement(""String_Node_Str"")){
              protoAllpstmt.setLong(1,netId);
              try (ResultSet protoAllRs=protoAllpstmt.executeQuery()){
                long firewallRuleId;
                if (protoAllRs.next()) {
                  firewallRuleId=protoAllRs.getLong(1);
                  try (PreparedStatement fwCidrsPstmt=conn.prepareStatement(""String_Node_Str"")){
                    fwCidrsPstmt.setLong(1,firewallRuleId);
                    s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ fwCidrsPstmt);
                    fwCidrsPstmt.executeUpdate();
                  }
 catch (                  SQLException e) {
                    throw new CloudRuntimeException(""String_Node_Str"",e);
                  }
                }
              }
 catch (              SQLException e) {
                throw new CloudRuntimeException(""String_Node_Str"",e);
              }
            }
 catch (            SQLException e) {
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.2642701955362433
105536,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_VLAN_IP_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public Vlan dedicatePublicIpRange(DedicatePublicIpRangeCmd cmd) throws ResourceAllocationException {
  Long vlanDbId=cmd.getId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long projectId=cmd.getProjectId();
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
    if (vlanOwner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
    }
 else     if (vlanOwner.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanDbId);
  }
  List<AccountVlanMapVO> maps=_accountVlanMapDao.listAccountVlanMapsByVlan(vlanDbId);
  if (maps != null && !maps.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Long zoneId=vlan.getDataCenterId();
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced);
  }
  int accountPublicIpRange=_publicIpAddressDao.countIPs(zoneId,vlanDbId,false);
  _resourceLimitMgr.checkResourceLimit(vlanOwner,ResourceType.public_ip,accountPublicIpRange);
  List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlanDbId);
  for (  IPAddressVO ip : ips) {
    Long allocatedToAccountId=ip.getAllocatedToAccountId();
    if (allocatedToAccountId != null) {
      Account accountAllocatedTo=_accountMgr.getActiveAccountById(allocatedToAccountId);
      if (!accountAllocatedTo.getAccountName().equalsIgnoreCase(accountName))       throw new InvalidParameterValueException(ip.getAddress() + ""String_Node_Str"");
    }
  }
  AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(vlanOwner.getId(),vlan.getId());
  _accountVlanMapDao.persist(accountVlanMapVO);
  for (  IPAddressVO ip : ips) {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_ASSIGN,vlanOwner.getId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlan.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
  }
  _resourceLimitMgr.incrementResourceCount(vlanOwner.getId(),ResourceType.public_ip,new Long(ips.size()));
  return vlan;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_VLAN_IP_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public Vlan dedicatePublicIpRange(DedicatePublicIpRangeCmd cmd) throws ResourceAllocationException {
  Long vlanDbId=cmd.getId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long projectId=cmd.getProjectId();
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (vlanOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
  }
 else   if (vlanOwner.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanDbId);
  }
  List<AccountVlanMapVO> maps=_accountVlanMapDao.listAccountVlanMapsByVlan(vlanDbId);
  if (maps != null && !maps.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Long zoneId=vlan.getDataCenterId();
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced);
  }
  int accountPublicIpRange=_publicIpAddressDao.countIPs(zoneId,vlanDbId,false);
  _resourceLimitMgr.checkResourceLimit(vlanOwner,ResourceType.public_ip,accountPublicIpRange);
  List<IPAddressVO> ips=_publicIpAddressDao.listByVlanId(vlanDbId);
  for (  IPAddressVO ip : ips) {
    Long allocatedToAccountId=ip.getAllocatedToAccountId();
    if (allocatedToAccountId != null) {
      Account accountAllocatedTo=_accountMgr.getActiveAccountById(allocatedToAccountId);
      if (!accountAllocatedTo.getAccountName().equalsIgnoreCase(accountName))       throw new InvalidParameterValueException(ip.getAddress() + ""String_Node_Str"");
    }
  }
  AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(vlanOwner.getId(),vlan.getId());
  _accountVlanMapDao.persist(accountVlanMapVO);
  for (  IPAddressVO ip : ips) {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NET_IP_ASSIGN,vlanOwner.getId(),ip.getDataCenterId(),ip.getId(),ip.getAddress().toString(),ip.isSourceNat(),vlan.getVlanType().toString(),ip.getSystem(),ip.getClass().getName(),ip.getUuid());
  }
  _resourceLimitMgr.incrementResourceCount(vlanOwner.getId(),ResourceType.public_ip,new Long(ips.size()));
  return vlan;
}",0.9973253092611168
105537,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_GUEST_VLAN_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public GuestVlan dedicateGuestVlanRange(DedicateGuestVlanRangeCmd cmd){
  String vlan=cmd.getVlan();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long projectId=cmd.getProjectId();
  int startVlan, endVlan;
  String updatedVlanRange=null;
  long guestVlanMapId=0;
  long guestVlanMapAccountId=0;
  long vlanOwnerId=0;
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
    if (vlanOwner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
    }
  }
  vlanOwnerId=vlanOwner.getAccountId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
 else   if (!physicalNetwork.getIsolationMethods().isEmpty() && !physicalNetwork.getIsolationMethods().contains(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  String[] vlanRange=vlan.split(""String_Node_Str"");
  if (vlanRange.length != 2) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlan + ""String_Node_Str"");
  }
  try {
    startVlan=Integer.parseInt(vlanRange[0]);
    endVlan=Integer.parseInt(vlanRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<Integer,Integer>> existingRanges=physicalNetwork.getVnet();
  Boolean exists=false;
  if (!existingRanges.isEmpty()) {
    for (int i=0; i < existingRanges.size(); i++) {
      int existingStartVlan=existingRanges.get(i).first();
      int existingEndVlan=existingRanges.get(i).second();
      if (startVlan <= endVlan && startVlan >= existingStartVlan && endVlan <= existingEndVlan) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan);
    }
  }
  for (int i=startVlan; i <= endVlan; i++) {
    List<DataCenterVnetVO> allocatedVlans=_datacneterVnet.listAllocatedVnetsInRange(physicalNetwork.getDataCenterId(),physicalNetwork.getId(),startVlan,endVlan);
    if (allocatedVlans != null && !allocatedVlans.isEmpty()) {
      for (      DataCenterVnetVO allocatedVlan : allocatedVlans) {
        if (allocatedVlan.getAccountId() != vlanOwner.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + allocatedVlan.getVnet() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
  List<AccountGuestVlanMapVO> guestVlanMaps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(physicalNetworkId);
  for (  AccountGuestVlanMapVO guestVlanMap : guestVlanMaps) {
    List<Integer> vlanTokens=getVlanFromRange(guestVlanMap.getGuestVlanRange());
    int dedicatedStartVlan=vlanTokens.get(0).intValue();
    int dedicatedEndVlan=vlanTokens.get(1).intValue();
    if ((startVlan < dedicatedStartVlan & endVlan >= dedicatedStartVlan) || (startVlan >= dedicatedStartVlan & startVlan <= dedicatedEndVlan)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + vlan);
    }
  }
  Collections.sort(guestVlanMaps,new Comparator<AccountGuestVlanMapVO>(){
    @Override public int compare(    AccountGuestVlanMapVO obj1,    AccountGuestVlanMapVO obj2){
      List<Integer> vlanTokens1=getVlanFromRange(obj1.getGuestVlanRange());
      List<Integer> vlanTokens2=getVlanFromRange(obj2.getGuestVlanRange());
      return vlanTokens1.get(0).compareTo(vlanTokens2.get(0));
    }
  }
);
  for (int i=0; i < guestVlanMaps.size(); i++) {
    guestVlanMapId=guestVlanMaps.get(i).getId();
    guestVlanMapAccountId=guestVlanMaps.get(i).getAccountId();
    List<Integer> vlanTokens1=getVlanFromRange(guestVlanMaps.get(i).getGuestVlanRange());
    if (endVlan == (vlanTokens1.get(0).intValue() - 1)) {
      if (guestVlanMapAccountId == vlanOwnerId) {
        updatedVlanRange=startVlan + ""String_Node_Str"" + vlanTokens1.get(1).intValue();
      }
      break;
    }
    if (startVlan == (vlanTokens1.get(1).intValue() + 1) & guestVlanMapAccountId == vlanOwnerId) {
      if (i != (guestVlanMaps.size() - 1)) {
        List<Integer> vlanTokens2=getVlanFromRange(guestVlanMaps.get(i + 1).getGuestVlanRange());
        if (endVlan == (vlanTokens2.get(0).intValue() - 1) & guestVlanMaps.get(i + 1).getAccountId() == vlanOwnerId) {
          _datacneterVnet.releaseDedicatedGuestVlans(guestVlanMaps.get(i + 1).getId());
          _accountGuestVlanMapDao.remove(guestVlanMaps.get(i + 1).getId());
          updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + vlanTokens2.get(1).intValue();
          break;
        }
      }
      updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + endVlan;
      break;
    }
  }
  AccountGuestVlanMapVO accountGuestVlanMapVO;
  if (updatedVlanRange != null) {
    accountGuestVlanMapVO=_accountGuestVlanMapDao.findById(guestVlanMapId);
    accountGuestVlanMapVO.setGuestVlanRange(updatedVlanRange);
    _accountGuestVlanMapDao.update(guestVlanMapId,accountGuestVlanMapVO);
  }
 else {
    accountGuestVlanMapVO=new AccountGuestVlanMapVO(vlanOwner.getAccountId(),physicalNetworkId);
    accountGuestVlanMapVO.setGuestVlanRange(startVlan + ""String_Node_Str"" + endVlan);
    _accountGuestVlanMapDao.persist(accountGuestVlanMapVO);
  }
  List<Integer> finaVlanTokens=getVlanFromRange(accountGuestVlanMapVO.getGuestVlanRange());
  for (int i=finaVlanTokens.get(0).intValue(); i <= finaVlanTokens.get(1).intValue(); i++) {
    List<DataCenterVnetVO> dataCenterVnet=_datacneterVnet.findVnet(physicalNetwork.getDataCenterId(),physicalNetworkId,((Integer)i).toString());
    dataCenterVnet.get(0).setAccountGuestVlanMapId(accountGuestVlanMapVO.getId());
    _datacneterVnet.update(dataCenterVnet.get(0).getId(),dataCenterVnet.get(0));
  }
  return accountGuestVlanMapVO;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_GUEST_VLAN_RANGE_DEDICATE,eventDescription=""String_Node_Str"",async=false) public GuestVlan dedicateGuestVlanRange(DedicateGuestVlanRangeCmd cmd){
  String vlan=cmd.getVlan();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long projectId=cmd.getProjectId();
  int startVlan, endVlan;
  String updatedVlanRange=null;
  long guestVlanMapId=0;
  long guestVlanMapAccountId=0;
  long vlanOwnerId=0;
  Account vlanOwner=null;
  if (projectId != null) {
    if (accountName != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    vlanOwner=_accountMgr.getAccount(project.getProjectAccountId());
  }
  if ((accountName != null) && (domainId != null)) {
    vlanOwner=_accountDao.findActiveAccount(accountName,domainId);
  }
  if (vlanOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName);
  }
  vlanOwnerId=vlanOwner.getAccountId();
  PhysicalNetworkVO physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (physicalNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
  }
 else   if (!physicalNetwork.getIsolationMethods().isEmpty() && !physicalNetwork.getIsolationMethods().contains(""String_Node_Str"")) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  String[] vlanRange=vlan.split(""String_Node_Str"");
  if (vlanRange.length != 2) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlan + ""String_Node_Str"");
  }
  try {
    startVlan=Integer.parseInt(vlanRange[0]);
    endVlan=Integer.parseInt(vlanRange[1]);
  }
 catch (  NumberFormatException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<Integer,Integer>> existingRanges=physicalNetwork.getVnet();
  Boolean exists=false;
  if (!existingRanges.isEmpty()) {
    for (int i=0; i < existingRanges.size(); i++) {
      int existingStartVlan=existingRanges.get(i).first();
      int existingEndVlan=existingRanges.get(i).second();
      if (startVlan <= endVlan && startVlan >= existingStartVlan && endVlan <= existingEndVlan) {
        exists=true;
        break;
      }
    }
    if (!exists) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan);
    }
  }
  for (int i=startVlan; i <= endVlan; i++) {
    List<DataCenterVnetVO> allocatedVlans=_datacneterVnet.listAllocatedVnetsInRange(physicalNetwork.getDataCenterId(),physicalNetwork.getId(),startVlan,endVlan);
    if (allocatedVlans != null && !allocatedVlans.isEmpty()) {
      for (      DataCenterVnetVO allocatedVlan : allocatedVlans) {
        if (allocatedVlan.getAccountId() != vlanOwner.getAccountId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + allocatedVlan.getVnet() + ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
  List<AccountGuestVlanMapVO> guestVlanMaps=_accountGuestVlanMapDao.listAccountGuestVlanMapsByPhysicalNetwork(physicalNetworkId);
  for (  AccountGuestVlanMapVO guestVlanMap : guestVlanMaps) {
    List<Integer> vlanTokens=getVlanFromRange(guestVlanMap.getGuestVlanRange());
    int dedicatedStartVlan=vlanTokens.get(0).intValue();
    int dedicatedEndVlan=vlanTokens.get(1).intValue();
    if ((startVlan < dedicatedStartVlan & endVlan >= dedicatedStartVlan) || (startVlan >= dedicatedStartVlan & startVlan <= dedicatedEndVlan)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + vlan);
    }
  }
  Collections.sort(guestVlanMaps,new Comparator<AccountGuestVlanMapVO>(){
    @Override public int compare(    AccountGuestVlanMapVO obj1,    AccountGuestVlanMapVO obj2){
      List<Integer> vlanTokens1=getVlanFromRange(obj1.getGuestVlanRange());
      List<Integer> vlanTokens2=getVlanFromRange(obj2.getGuestVlanRange());
      return vlanTokens1.get(0).compareTo(vlanTokens2.get(0));
    }
  }
);
  for (int i=0; i < guestVlanMaps.size(); i++) {
    guestVlanMapId=guestVlanMaps.get(i).getId();
    guestVlanMapAccountId=guestVlanMaps.get(i).getAccountId();
    List<Integer> vlanTokens1=getVlanFromRange(guestVlanMaps.get(i).getGuestVlanRange());
    if (endVlan == (vlanTokens1.get(0).intValue() - 1)) {
      if (guestVlanMapAccountId == vlanOwnerId) {
        updatedVlanRange=startVlan + ""String_Node_Str"" + vlanTokens1.get(1).intValue();
      }
      break;
    }
    if (startVlan == (vlanTokens1.get(1).intValue() + 1) & guestVlanMapAccountId == vlanOwnerId) {
      if (i != (guestVlanMaps.size() - 1)) {
        List<Integer> vlanTokens2=getVlanFromRange(guestVlanMaps.get(i + 1).getGuestVlanRange());
        if (endVlan == (vlanTokens2.get(0).intValue() - 1) & guestVlanMaps.get(i + 1).getAccountId() == vlanOwnerId) {
          _datacneterVnet.releaseDedicatedGuestVlans(guestVlanMaps.get(i + 1).getId());
          _accountGuestVlanMapDao.remove(guestVlanMaps.get(i + 1).getId());
          updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + vlanTokens2.get(1).intValue();
          break;
        }
      }
      updatedVlanRange=vlanTokens1.get(0).intValue() + ""String_Node_Str"" + endVlan;
      break;
    }
  }
  AccountGuestVlanMapVO accountGuestVlanMapVO;
  if (updatedVlanRange != null) {
    accountGuestVlanMapVO=_accountGuestVlanMapDao.findById(guestVlanMapId);
    accountGuestVlanMapVO.setGuestVlanRange(updatedVlanRange);
    _accountGuestVlanMapDao.update(guestVlanMapId,accountGuestVlanMapVO);
  }
 else {
    accountGuestVlanMapVO=new AccountGuestVlanMapVO(vlanOwner.getAccountId(),physicalNetworkId);
    accountGuestVlanMapVO.setGuestVlanRange(startVlan + ""String_Node_Str"" + endVlan);
    _accountGuestVlanMapDao.persist(accountGuestVlanMapVO);
  }
  List<Integer> finaVlanTokens=getVlanFromRange(accountGuestVlanMapVO.getGuestVlanRange());
  for (int i=finaVlanTokens.get(0).intValue(); i <= finaVlanTokens.get(1).intValue(); i++) {
    List<DataCenterVnetVO> dataCenterVnet=_datacneterVnet.findVnet(physicalNetwork.getDataCenterId(),physicalNetworkId,((Integer)i).toString());
    dataCenterVnet.get(0).setAccountGuestVlanMapId(accountGuestVlanMapVO.getId());
    _datacneterVnet.update(dataCenterVnet.get(0).getId(),dataCenterVnet.get(0));
  }
  return accountGuestVlanMapVO;
}",0.9992423094408244
105538,"@Override public void execute() throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  CallContext.current().setEventDetails(""String_Node_Str"" + id);
  VirtualRouterProvider result=_service.get(0).configure(this);
  if (result != null) {
    VirtualRouterProviderResponse routerResponse=_responseGenerator.createVirtualRouterProviderResponse(result);
    routerResponse.setResponseName(getCommandName());
    this.setResponseObject(routerResponse);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  CallContext.current().setEventDetails(""String_Node_Str"" + id);
  VirtualRouterProvider result=_service.get(0).configure(this);
  if (result != null) {
    VirtualRouterProviderResponse routerResponse=_responseGenerator.createVirtualRouterProviderResponse(result);
    if (routerResponse != null) {
      routerResponse.setResponseName(getCommandName());
      this.setResponseObject(routerResponse);
    }
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9642276422764228
105539,"@Override public void execute(){
  CallContext.current().setEventDetails(""String_Node_Str"" + getEntityId());
  VirtualRouterProvider result=_service.get(0).getCreatedElement(getEntityId());
  if (result != null) {
    VirtualRouterProviderResponse response=_responseGenerator.createVirtualRouterProviderResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  CallContext.current().setEventDetails(""String_Node_Str"" + getEntityId());
  VirtualRouterProvider result=_service.get(0).getCreatedElement(getEntityId());
  if (result != null) {
    VirtualRouterProviderResponse response=_responseGenerator.createVirtualRouterProviderResponse(result);
    if (response != null) {
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
  }
 else {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.9637404580152672
105540,"@Override public void execute(){
  Pair<List<? extends PhysicalNetworkTrafficType>,Integer> trafficTypes=_networkService.listTrafficTypes(getPhysicalNetworkId());
  ListResponse<TrafficTypeResponse> response=new ListResponse<TrafficTypeResponse>();
  List<TrafficTypeResponse> trafficTypesResponses=new ArrayList<TrafficTypeResponse>();
  for (  PhysicalNetworkTrafficType trafficType : trafficTypes.first()) {
    TrafficTypeResponse trafficTypeResponse=_responseGenerator.createTrafficTypeResponse(trafficType);
    trafficTypesResponses.add(trafficTypeResponse);
  }
  response.setResponses(trafficTypesResponses,trafficTypes.second());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Pair<List<? extends PhysicalNetworkTrafficType>,Integer> trafficTypes=_networkService.listTrafficTypes(getPhysicalNetworkId());
  ListResponse<TrafficTypeResponse> response=new ListResponse<TrafficTypeResponse>();
  List<TrafficTypeResponse> trafficTypesResponses=new ArrayList<TrafficTypeResponse>();
  if (trafficTypes != null) {
    for (    PhysicalNetworkTrafficType trafficType : trafficTypes.first()) {
      TrafficTypeResponse trafficTypeResponse=_responseGenerator.createTrafficTypeResponse(trafficType);
      trafficTypesResponses.add(trafficTypeResponse);
    }
    response.setResponses(trafficTypesResponses,trafficTypes.second());
    response.setResponseName(getCommandName());
  }
  this.setResponseObject(response);
}",0.9611780455153948
105541,"@Override public void execute(){
  String[] keys=_accountService.createApiKeyAndSecretKey(this);
  RegisterResponse response=new RegisterResponse();
  response.setApiKey(keys[0]);
  response.setSecretKey(keys[1]);
  response.setObjectName(""String_Node_Str"");
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  String[] keys=_accountService.createApiKeyAndSecretKey(this);
  RegisterResponse response=new RegisterResponse();
  if (keys != null) {
    response.setApiKey(keys[0]);
    response.setSecretKey(keys[1]);
  }
  response.setObjectName(""String_Node_Str"");
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.957983193277311
105542,"public Boolean isForVirtualNetwork(){
  return forVirtualNetwork == null ? true : forVirtualNetwork;
}","public Boolean isForVirtualNetwork(){
  return forVirtualNetwork == null ? Boolean.TRUE : forVirtualNetwork;
}",0.9339622641509434
105543,"public Long getNetworkId(){
  if (vpcId != null) {
    return null;
  }
  if (networkId != null) {
    return networkId;
  }
  Long zoneId=getZoneId();
  if (zoneId == null) {
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,zoneId);
  if (zone.getNetworkType() == NetworkType.Advanced) {
    List<? extends Network> networks=_networkService.getIsolatedNetworksOwnedByAccountInZone(getZoneId(),_accountService.getAccount(getEntityOwnerId()));
    if (networks.size() == 0) {
      String domain=_domainService.getDomain(getDomainId()).getName();
      throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ domain+ ""String_Node_Str""+ zone.getName());
    }
    if (networks.size() < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (networks.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return networks.get(0).getId();
  }
 else {
    Network defaultGuestNetwork=_networkService.getExclusiveGuestNetwork(zoneId);
    if (defaultGuestNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ getDomainId());
    }
 else {
      return defaultGuestNetwork.getId();
    }
  }
}","public Long getNetworkId(){
  if (vpcId != null) {
    return null;
  }
  if (networkId != null) {
    return networkId;
  }
  Long zoneId=getZoneId();
  DataCenter zone=_entityMgr.findById(DataCenter.class,zoneId);
  if (zone.getNetworkType() == NetworkType.Advanced) {
    List<? extends Network> networks=_networkService.getIsolatedNetworksOwnedByAccountInZone(getZoneId(),_accountService.getAccount(getEntityOwnerId()));
    if (networks.size() == 0) {
      String domain=_domainService.getDomain(getDomainId()).getName();
      throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ domain+ ""String_Node_Str""+ zone.getName());
    }
    if (networks.size() < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (networks.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return networks.get(0).getId();
  }
 else {
    Network defaultGuestNetwork=_networkService.getExclusiveGuestNetwork(zoneId);
    if (defaultGuestNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ getDomainId());
    }
 else {
      return defaultGuestNetwork.getId();
    }
  }
}",0.982373678025852
105544,"@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException {
  IpAddress result=_networkService.updateIP(getId(),getCustomId(),getDisplayIp());
  IPAddressResponse ipResponse=_responseGenerator.createIPAddressResponse(ResponseView.Restricted,result);
  ipResponse.setResponseName(getCommandName());
  setResponseObject(ipResponse);
}","@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException, ResourceAllocationException, NetworkRuleConflictException {
  IpAddress result=_networkService.updateIP(getId(),getCustomId(),getDisplayIp());
  if (result != null) {
    IPAddressResponse ipResponse=_responseGenerator.createIPAddressResponse(ResponseView.Restricted,result);
    ipResponse.setResponseName(getCommandName());
    setResponseObject(ipResponse);
  }
}",0.9659318637274548
105545,"@Override @DB public void allocate(final VirtualMachineProfile vm,final LinkedHashMap<? extends Network,List<? extends NicProfile>> networks) throws InsufficientCapacityException, ConcurrentOperationException {
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws InsufficientCapacityException {
      int deviceId=0;
      int size=0;
      for (      Network ntwk : networks.keySet()) {
        List<? extends NicProfile> profiles=networks.get(ntwk);
        if (profiles != null && !profiles.isEmpty()) {
          size=size + profiles.size();
        }
 else {
          size=size + 1;
        }
      }
      boolean[] deviceIds=new boolean[size];
      Arrays.fill(deviceIds,false);
      List<NicProfile> nics=new ArrayList<NicProfile>(size);
      NicProfile defaultNic=null;
      for (      Map.Entry<? extends Network,List<? extends NicProfile>> network : networks.entrySet()) {
        Network config=network.getKey();
        List<? extends NicProfile> requestedProfiles=network.getValue();
        if (requestedProfiles == null) {
          requestedProfiles=new ArrayList<NicProfile>();
        }
        if (requestedProfiles.isEmpty()) {
          requestedProfiles.add(null);
        }
        for (        NicProfile requested : requestedProfiles) {
          Boolean isDefaultNic=false;
          if (vm != null && (requested != null && requested.isDefaultNic())) {
            isDefaultNic=true;
          }
          while (deviceIds[deviceId] && deviceId < deviceIds.length) {
            deviceId++;
          }
          Pair<NicProfile,Integer> vmNicPair=allocateNic(requested,config,isDefaultNic,deviceId,vm);
          NicProfile vmNic=vmNicPair.first();
          if (vmNic == null) {
            continue;
          }
          deviceId=vmNicPair.second();
          int devId=vmNic.getDeviceId();
          if (devId > deviceIds.length) {
            throw new IllegalArgumentException(""String_Node_Str"" + vmNic);
          }
          if (deviceIds[devId]) {
            throw new IllegalArgumentException(""String_Node_Str"" + vmNic);
          }
          deviceIds[devId]=true;
          if (vmNic.isDefaultNic()) {
            if (defaultNic != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + defaultNic + ""String_Node_Str""+ vmNic);
            }
            defaultNic=vmNic;
          }
          nics.add(vmNic);
          vm.addNic(vmNic);
        }
      }
      if (nics.size() != size) {
        s_logger.warn(""String_Node_Str"" + nics.size() + ""String_Node_Str""+ size);
        throw new CloudRuntimeException(""String_Node_Str"" + nics.size() + ""String_Node_Str""+ size);
      }
      if (nics.size() == 1) {
        nics.get(0).setDefaultNic(true);
      }
    }
  }
);
}","@Override @DB public void allocate(final VirtualMachineProfile vm,final LinkedHashMap<? extends Network,List<? extends NicProfile>> networks) throws InsufficientCapacityException, ConcurrentOperationException {
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws InsufficientCapacityException {
      int deviceId=0;
      int size=0;
      for (      Network ntwk : networks.keySet()) {
        List<? extends NicProfile> profiles=networks.get(ntwk);
        if (profiles != null && !profiles.isEmpty()) {
          size=size + profiles.size();
        }
 else {
          size=size + 1;
        }
      }
      boolean[] deviceIds=new boolean[size];
      Arrays.fill(deviceIds,false);
      List<NicProfile> nics=new ArrayList<NicProfile>(size);
      NicProfile defaultNic=null;
      for (      Map.Entry<? extends Network,List<? extends NicProfile>> network : networks.entrySet()) {
        Network config=network.getKey();
        List<? extends NicProfile> requestedProfiles=network.getValue();
        if (requestedProfiles == null) {
          requestedProfiles=new ArrayList<NicProfile>();
        }
        if (requestedProfiles.isEmpty()) {
          requestedProfiles.add(null);
        }
        for (        NicProfile requested : requestedProfiles) {
          Boolean isDefaultNic=false;
          if (vm != null && (requested != null && requested.isDefaultNic())) {
            isDefaultNic=true;
          }
          while (deviceIds[deviceId] && deviceId < deviceIds.length) {
            deviceId++;
          }
          Pair<NicProfile,Integer> vmNicPair=allocateNic(requested,config,isDefaultNic,deviceId,vm);
          NicProfile vmNic=null;
          if (vmNicPair != null) {
            vmNic=vmNicPair.first();
            if (vmNic == null) {
              continue;
            }
            deviceId=vmNicPair.second();
          }
          int devId=vmNic.getDeviceId();
          if (devId > deviceIds.length) {
            throw new IllegalArgumentException(""String_Node_Str"" + vmNic);
          }
          if (deviceIds[devId]) {
            throw new IllegalArgumentException(""String_Node_Str"" + vmNic);
          }
          deviceIds[devId]=true;
          if (vmNic.isDefaultNic()) {
            if (defaultNic != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + defaultNic + ""String_Node_Str""+ vmNic);
            }
            defaultNic=vmNic;
          }
          nics.add(vmNic);
          vm.addNic(vmNic);
        }
      }
      if (nics.size() != size) {
        s_logger.warn(""String_Node_Str"" + nics.size() + ""String_Node_Str""+ size);
        throw new CloudRuntimeException(""String_Node_Str"" + nics.size() + ""String_Node_Str""+ size);
      }
      if (nics.size() == 1) {
        nics.get(0).setDefaultNic(true);
      }
    }
  }
);
}",0.9830508474576272
105546,"@SuppressWarnings(""String_Node_Str"") private synchronized boolean enableAutoScaleConfig(LoadBalancerTO loadBalancerTO,boolean isCleanUp) throws Exception {
  String vmGroupIdentifier=generateAutoScaleVmGroupIdentifier(loadBalancerTO);
  String srcIp=loadBalancerTO.getSrcIp();
  int srcPort=loadBalancerTO.getSrcPort();
  String nsVirtualServerName=generateNSVirtualServerName(srcIp,srcPort);
  String serviceGroupName=generateAutoScaleServiceGroupName(loadBalancerTO);
  String profileName=generateAutoScaleProfileName(vmGroupIdentifier);
  String timerName=generateAutoScaleTimerName(vmGroupIdentifier);
  String scaleDownActionName=generateAutoScaleScaleDownActionName(vmGroupIdentifier);
  String scaleUpActionName=generateAutoScaleScaleUpActionName(vmGroupIdentifier);
  String mtName=generateSnmpMetricTableName(vmGroupIdentifier);
  String monitorName=generateSnmpMonitorName(vmGroupIdentifier);
  AutoScaleVmGroupTO vmGroupTO=loadBalancerTO.getAutoScaleVmGroupTO();
  AutoScaleVmProfileTO profileTO=vmGroupTO.getProfile();
  List<AutoScalePolicyTO> policies=vmGroupTO.getPolicies();
  int interval=vmGroupTO.getInterval();
  profileTO.getCounterParamList();
  String snmpCommunity=null;
  int snmpPort=DEFAULT_SNMP_PORT;
  long cur_prirotiy=1;
  List<Pair<String,String>> paramsList=profileTO.getCounterParamList();
  for (  Pair<String,String> param : paramsList) {
    if (""String_Node_Str"".equalsIgnoreCase(param.first())) {
      snmpCommunity=param.second();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(param.first())) {
      snmpPort=Integer.parseInt(param.second());
    }
  }
  try {
    int minAutoScaleMembers=vmGroupTO.getMinMembers();
    int maxAutoScaleMembers=vmGroupTO.getMaxMembers();
    lbvserver vserver=new lbvserver();
    try {
      vserver.set_name(nsVirtualServerName);
      vserver.set_minautoscalemembers(minAutoScaleMembers);
      vserver.set_maxautoscalemembers(maxAutoScaleMembers);
      lbvserver.update(_netscalerService,vserver);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    String apiKey=profileTO.getAutoScaleUserApiKey();
    String secretKey=profileTO.getAutoScaleUserSecretKey();
    String url=profileTO.getCloudStackApiUrl();
    autoscaleprofile autoscaleProfile=new autoscaleprofile();
    try {
      autoscaleProfile.set_name(profileName);
      autoscaleProfile.set_type(""String_Node_Str"");
      autoscaleProfile.set_apikey(apiKey);
      autoscaleProfile.set_sharedsecret(secretKey);
      autoscaleProfile.set_url(url);
      autoscaleprofile.add(_netscalerService,autoscaleProfile);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    nstimer timer=new nstimer();
    try {
      timer.set_name(timerName);
      timer.set_interval(interval);
      nstimer.add(_netscalerService,timer);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    Integer scaleUpQuietTime=null;
    Integer scaleDownQuietTime=null;
    for (    AutoScalePolicyTO autoScalePolicyTO : policies) {
      if (scaleUpQuietTime == null) {
        if (isScaleUpPolicy(autoScalePolicyTO)) {
          scaleUpQuietTime=autoScalePolicyTO.getQuietTime();
          if (scaleDownQuietTime != null) {
            break;
          }
        }
      }
      if (scaleDownQuietTime == null) {
        if (isScaleDownPolicy(autoScalePolicyTO)) {
          scaleDownQuietTime=autoScalePolicyTO.getQuietTime();
          if (scaleUpQuietTime != null) {
            break;
          }
        }
      }
    }
    com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction scaleUpAction=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction();
    try {
      scaleUpAction.set_name(scaleUpActionName);
      scaleUpAction.set_type(""String_Node_Str"");
      scaleUpAction.set_vserver(nsVirtualServerName);
      scaleUpAction.set_profilename(profileName);
      scaleUpAction.set_quiettime(scaleUpQuietTime);
      String scaleUpParameters=""String_Node_Str"" + ""String_Node_Str"" + ApiConstants.ZONE_ID + ""String_Node_Str""+ profileTO.getZoneId()+ ""String_Node_Str""+ ApiConstants.SERVICE_OFFERING_ID+ ""String_Node_Str""+ profileTO.getServiceOfferingId()+ ""String_Node_Str""+ ApiConstants.TEMPLATE_ID+ ""String_Node_Str""+ profileTO.getTemplateId()+ ""String_Node_Str""+ ApiConstants.DISPLAY_NAME+ ""String_Node_Str""+ profileTO.getVmName()+ ""String_Node_Str""+ ((profileTO.getNetworkId() == null) ? ""String_Node_Str"" : (ApiConstants.NETWORK_IDS + ""String_Node_Str"" + profileTO.getNetworkId()+ ""String_Node_Str""))+ ((profileTO.getOtherDeployParams() == null) ? ""String_Node_Str"" : (profileTO.getOtherDeployParams() + ""String_Node_Str""))+ ""String_Node_Str""+ loadBalancerTO.getUuid();
      scaleUpAction.set_parameters(scaleUpParameters);
      autoscaleaction.add(_netscalerService,scaleUpAction);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction scaleDownAction=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction();
    Integer destroyVmGracePeriod=profileTO.getDestroyVmGraceperiod();
    try {
      scaleDownAction.set_name(scaleDownActionName);
      scaleDownAction.set_type(""String_Node_Str"");
      scaleDownAction.set_vserver(nsVirtualServerName);
      scaleDownAction.set_profilename(profileName);
      scaleDownAction.set_quiettime(scaleDownQuietTime);
      String scaleDownParameters=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ loadBalancerTO.getUuid();
      scaleDownAction.set_parameters(scaleDownParameters);
      scaleDownAction.set_vmdestroygraceperiod(destroyVmGracePeriod);
      autoscaleaction.add(_netscalerService,scaleDownAction);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    String minMemberPolicyName=generateAutoScaleMinPolicyName(vmGroupIdentifier);
    String minMemberPolicyExp=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
    addAutoScalePolicy(timerName,minMemberPolicyName,cur_prirotiy++,minMemberPolicyExp,scaleUpActionName,interval,interval,isCleanUp);
    String maxMemberPolicyName=generateAutoScaleMaxPolicyName(vmGroupIdentifier);
    String maxMemberPolicyExp=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
    addAutoScalePolicy(timerName,maxMemberPolicyName,cur_prirotiy++,maxMemberPolicyExp,scaleDownActionName,interval,interval,isCleanUp);
    HashMap<String,Integer> snmpMetrics=new HashMap<String,Integer>();
    for (    AutoScalePolicyTO autoScalePolicyTO : policies) {
      List<ConditionTO> conditions=autoScalePolicyTO.getConditions();
      String policyExpression=""String_Node_Str"";
      int snmpCounterNumber=0;
      for (      ConditionTO conditionTO : conditions) {
        CounterTO counterTO=conditionTO.getCounter();
        String counterName=counterTO.getName();
        String operator=conditionTO.getRelationalOperator();
        long threshold=conditionTO.getThreshold();
        StringBuilder conditionExpression=new StringBuilder();
        Formatter formatter=new Formatter(conditionExpression,Locale.US);
        if (counterTO.getSource().equals(""String_Node_Str"")) {
          counterName=generateSnmpMetricName(counterName);
          if (snmpMetrics.size() == 0) {
            lbmetrictable metricTable=new lbmetrictable();
            try {
              metricTable.set_metrictable(mtName);
              lbmetrictable.add(_netscalerService,metricTable);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
            lbmonitor monitor=new lbmonitor();
            try {
              monitor.set_monitorname(monitorName);
              monitor.set_type(""String_Node_Str"");
              monitor.set_destport(snmpPort);
              monitor.set_snmpcommunity(snmpCommunity);
              monitor.set_metrictable(mtName);
              monitor.set_interval((int)(interval * 0.8));
              lbmonitor.add(_netscalerService,monitor);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
            servicegroup_lbmonitor_binding servicegroup_monitor_binding=new servicegroup_lbmonitor_binding();
            try {
              servicegroup_monitor_binding.set_servicegroupname(serviceGroupName);
              servicegroup_monitor_binding.set_monitor_name(monitorName);
              servicegroup_monitor_binding.set_passive(true);
              servicegroup_lbmonitor_binding.add(_netscalerService,servicegroup_monitor_binding);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
          }
          boolean newMetric=!snmpMetrics.containsKey(counterName);
          if (newMetric) {
            snmpMetrics.put(counterName,snmpCounterNumber++);
          }
          if (newMetric) {
            String counterOid=counterTO.getValue();
            lbmetrictable_metric_binding metrictable_metric_binding=new lbmetrictable_metric_binding();
            try {
              metrictable_metric_binding.set_metrictable(mtName);
              metrictable_metric_binding.set_metric(counterName);
              metrictable_metric_binding.set_Snmpoid(counterOid);
              lbmetrictable_metric_binding.add(_netscalerService,metrictable_metric_binding);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
            lbmonitor_metric_binding monitor_metric_binding=new lbmonitor_metric_binding();
            ;
            try {
              monitor_metric_binding.set_monitorname(monitorName);
              monitor_metric_binding.set_metric(counterName);
              monitor_metric_binding.set_metricthreshold(Integer.MAX_VALUE);
              lbmonitor_metric_binding.add(_netscalerService,monitor_metric_binding);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
          }
          int counterIndex=snmpMetrics.get(counterName);
          formatter.format(""String_Node_Str"",nsVirtualServerName,counterIndex,operator,threshold);
        }
 else         if (counterTO.getSource().equals(""String_Node_Str"")) {
          formatter.format(""String_Node_Str"",nsVirtualServerName,counterTO.getValue(),operator,threshold);
        }
        if (policyExpression.length() != 0) {
          policyExpression+=""String_Node_Str"";
        }
        policyExpression+=conditionExpression;
      }
      policyExpression=""String_Node_Str"" + policyExpression + ""String_Node_Str"";
      String policyId=Long.toString(autoScalePolicyTO.getId());
      String policyName=generateAutoScalePolicyName(vmGroupIdentifier,policyId);
      String action=null;
      if (isScaleUpPolicy(autoScalePolicyTO)) {
        action=scaleUpActionName;
        String scaleUpCondition=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
        policyExpression=scaleUpCondition + ""String_Node_Str"" + policyExpression;
      }
 else {
        action=scaleDownActionName;
        String scaleDownCondition=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
        policyExpression=scaleDownCondition + ""String_Node_Str"" + policyExpression;
      }
      addAutoScalePolicy(timerName,policyName,cur_prirotiy++,policyExpression,action,autoScalePolicyTO.getDuration(),interval,isCleanUp);
    }
  }
 catch (  Exception ex) {
    if (!isCleanUp) {
      disableAutoScaleConfig(loadBalancerTO,true);
      throw ex;
    }
 else {
      throw ex;
    }
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") private synchronized boolean enableAutoScaleConfig(LoadBalancerTO loadBalancerTO,boolean isCleanUp) throws Exception {
  String vmGroupIdentifier=generateAutoScaleVmGroupIdentifier(loadBalancerTO);
  String srcIp=loadBalancerTO.getSrcIp();
  int srcPort=loadBalancerTO.getSrcPort();
  String nsVirtualServerName=generateNSVirtualServerName(srcIp,srcPort);
  String serviceGroupName=generateAutoScaleServiceGroupName(loadBalancerTO);
  String profileName=generateAutoScaleProfileName(vmGroupIdentifier);
  String timerName=generateAutoScaleTimerName(vmGroupIdentifier);
  String scaleDownActionName=generateAutoScaleScaleDownActionName(vmGroupIdentifier);
  String scaleUpActionName=generateAutoScaleScaleUpActionName(vmGroupIdentifier);
  String mtName=generateSnmpMetricTableName(vmGroupIdentifier);
  String monitorName=generateSnmpMonitorName(vmGroupIdentifier);
  AutoScaleVmGroupTO vmGroupTO=loadBalancerTO.getAutoScaleVmGroupTO();
  AutoScaleVmProfileTO profileTO=vmGroupTO.getProfile();
  List<AutoScalePolicyTO> policies=vmGroupTO.getPolicies();
  int interval=vmGroupTO.getInterval();
  profileTO.getCounterParamList();
  String snmpCommunity=null;
  int snmpPort=DEFAULT_SNMP_PORT;
  long cur_prirotiy=1;
  List<Pair<String,String>> paramsList=profileTO.getCounterParamList();
  for (  Pair<String,String> param : paramsList) {
    if (""String_Node_Str"".equalsIgnoreCase(param.first())) {
      snmpCommunity=param.second();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(param.first())) {
      snmpPort=Integer.parseInt(param.second());
    }
  }
  try {
    int minAutoScaleMembers=vmGroupTO.getMinMembers();
    int maxAutoScaleMembers=vmGroupTO.getMaxMembers();
    lbvserver vserver=new lbvserver();
    try {
      vserver.set_name(nsVirtualServerName);
      vserver.set_minautoscalemembers(minAutoScaleMembers);
      vserver.set_maxautoscalemembers(maxAutoScaleMembers);
      lbvserver.update(_netscalerService,vserver);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    String apiKey=profileTO.getAutoScaleUserApiKey();
    String secretKey=profileTO.getAutoScaleUserSecretKey();
    String url=profileTO.getCloudStackApiUrl();
    autoscaleprofile autoscaleProfile=new autoscaleprofile();
    try {
      autoscaleProfile.set_name(profileName);
      autoscaleProfile.set_type(""String_Node_Str"");
      autoscaleProfile.set_apikey(apiKey);
      autoscaleProfile.set_sharedsecret(secretKey);
      autoscaleProfile.set_url(url);
      autoscaleprofile.add(_netscalerService,autoscaleProfile);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    nstimer timer=new nstimer();
    try {
      timer.set_name(timerName);
      timer.set_interval(interval);
      nstimer.add(_netscalerService,timer);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    Integer scaleUpQuietTime=null;
    Integer scaleDownQuietTime=null;
    for (    AutoScalePolicyTO autoScalePolicyTO : policies) {
      if (scaleUpQuietTime == null) {
        if (isScaleUpPolicy(autoScalePolicyTO)) {
          scaleUpQuietTime=autoScalePolicyTO.getQuietTime();
          if (scaleDownQuietTime != null) {
            break;
          }
        }
      }
      if (scaleDownQuietTime == null) {
        if (isScaleDownPolicy(autoScalePolicyTO)) {
          scaleDownQuietTime=autoScalePolicyTO.getQuietTime();
          if (scaleUpQuietTime != null) {
            break;
          }
        }
      }
    }
    com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction scaleUpAction=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction();
    try {
      scaleUpAction.set_name(scaleUpActionName);
      scaleUpAction.set_type(""String_Node_Str"");
      scaleUpAction.set_vserver(nsVirtualServerName);
      scaleUpAction.set_profilename(profileName);
      if (scaleUpQuietTime != null) {
        scaleUpAction.set_quiettime(scaleUpQuietTime);
      }
      String scaleUpParameters=""String_Node_Str"" + ""String_Node_Str"" + ApiConstants.ZONE_ID + ""String_Node_Str""+ profileTO.getZoneId()+ ""String_Node_Str""+ ApiConstants.SERVICE_OFFERING_ID+ ""String_Node_Str""+ profileTO.getServiceOfferingId()+ ""String_Node_Str""+ ApiConstants.TEMPLATE_ID+ ""String_Node_Str""+ profileTO.getTemplateId()+ ""String_Node_Str""+ ApiConstants.DISPLAY_NAME+ ""String_Node_Str""+ profileTO.getVmName()+ ""String_Node_Str""+ ((profileTO.getNetworkId() == null) ? ""String_Node_Str"" : (ApiConstants.NETWORK_IDS + ""String_Node_Str"" + profileTO.getNetworkId()+ ""String_Node_Str""))+ ((profileTO.getOtherDeployParams() == null) ? ""String_Node_Str"" : (profileTO.getOtherDeployParams() + ""String_Node_Str""))+ ""String_Node_Str""+ loadBalancerTO.getUuid();
      scaleUpAction.set_parameters(scaleUpParameters);
      autoscaleaction.add(_netscalerService,scaleUpAction);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction scaleDownAction=new com.citrix.netscaler.nitro.resource.config.autoscale.autoscaleaction();
    Integer destroyVmGracePeriod=profileTO.getDestroyVmGraceperiod();
    try {
      scaleDownAction.set_name(scaleDownActionName);
      scaleDownAction.set_type(""String_Node_Str"");
      scaleDownAction.set_vserver(nsVirtualServerName);
      scaleDownAction.set_profilename(profileName);
      scaleDownAction.set_quiettime(scaleDownQuietTime);
      String scaleDownParameters=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ loadBalancerTO.getUuid();
      scaleDownAction.set_parameters(scaleDownParameters);
      scaleDownAction.set_vmdestroygraceperiod(destroyVmGracePeriod);
      autoscaleaction.add(_netscalerService,scaleDownAction);
    }
 catch (    Exception e) {
      if (!isCleanUp)       throw e;
    }
    String minMemberPolicyName=generateAutoScaleMinPolicyName(vmGroupIdentifier);
    String minMemberPolicyExp=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
    addAutoScalePolicy(timerName,minMemberPolicyName,cur_prirotiy++,minMemberPolicyExp,scaleUpActionName,interval,interval,isCleanUp);
    String maxMemberPolicyName=generateAutoScaleMaxPolicyName(vmGroupIdentifier);
    String maxMemberPolicyExp=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
    addAutoScalePolicy(timerName,maxMemberPolicyName,cur_prirotiy++,maxMemberPolicyExp,scaleDownActionName,interval,interval,isCleanUp);
    HashMap<String,Integer> snmpMetrics=new HashMap<String,Integer>();
    for (    AutoScalePolicyTO autoScalePolicyTO : policies) {
      List<ConditionTO> conditions=autoScalePolicyTO.getConditions();
      String policyExpression=""String_Node_Str"";
      int snmpCounterNumber=0;
      for (      ConditionTO conditionTO : conditions) {
        CounterTO counterTO=conditionTO.getCounter();
        String counterName=counterTO.getName();
        String operator=conditionTO.getRelationalOperator();
        long threshold=conditionTO.getThreshold();
        StringBuilder conditionExpression=new StringBuilder();
        Formatter formatter=new Formatter(conditionExpression,Locale.US);
        if (counterTO.getSource().equals(""String_Node_Str"")) {
          counterName=generateSnmpMetricName(counterName);
          if (snmpMetrics.size() == 0) {
            lbmetrictable metricTable=new lbmetrictable();
            try {
              metricTable.set_metrictable(mtName);
              lbmetrictable.add(_netscalerService,metricTable);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
            lbmonitor monitor=new lbmonitor();
            try {
              monitor.set_monitorname(monitorName);
              monitor.set_type(""String_Node_Str"");
              monitor.set_destport(snmpPort);
              monitor.set_snmpcommunity(snmpCommunity);
              monitor.set_metrictable(mtName);
              monitor.set_interval((int)(interval * 0.8));
              lbmonitor.add(_netscalerService,monitor);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
            servicegroup_lbmonitor_binding servicegroup_monitor_binding=new servicegroup_lbmonitor_binding();
            try {
              servicegroup_monitor_binding.set_servicegroupname(serviceGroupName);
              servicegroup_monitor_binding.set_monitor_name(monitorName);
              servicegroup_monitor_binding.set_passive(true);
              servicegroup_lbmonitor_binding.add(_netscalerService,servicegroup_monitor_binding);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
          }
          boolean newMetric=!snmpMetrics.containsKey(counterName);
          if (newMetric) {
            snmpMetrics.put(counterName,snmpCounterNumber++);
          }
          if (newMetric) {
            String counterOid=counterTO.getValue();
            lbmetrictable_metric_binding metrictable_metric_binding=new lbmetrictable_metric_binding();
            try {
              metrictable_metric_binding.set_metrictable(mtName);
              metrictable_metric_binding.set_metric(counterName);
              metrictable_metric_binding.set_Snmpoid(counterOid);
              lbmetrictable_metric_binding.add(_netscalerService,metrictable_metric_binding);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
            lbmonitor_metric_binding monitor_metric_binding=new lbmonitor_metric_binding();
            ;
            try {
              monitor_metric_binding.set_monitorname(monitorName);
              monitor_metric_binding.set_metric(counterName);
              monitor_metric_binding.set_metricthreshold(Integer.MAX_VALUE);
              lbmonitor_metric_binding.add(_netscalerService,monitor_metric_binding);
            }
 catch (            Exception e) {
              if (!isCleanUp)               throw e;
            }
          }
          int counterIndex=snmpMetrics.get(counterName);
          formatter.format(""String_Node_Str"",nsVirtualServerName,counterIndex,operator,threshold);
        }
 else         if (counterTO.getSource().equals(""String_Node_Str"")) {
          formatter.format(""String_Node_Str"",nsVirtualServerName,counterTO.getValue(),operator,threshold);
        }
        if (policyExpression.length() != 0) {
          policyExpression+=""String_Node_Str"";
        }
        policyExpression+=conditionExpression;
      }
      policyExpression=""String_Node_Str"" + policyExpression + ""String_Node_Str"";
      String policyId=Long.toString(autoScalePolicyTO.getId());
      String policyName=generateAutoScalePolicyName(vmGroupIdentifier,policyId);
      String action=null;
      if (isScaleUpPolicy(autoScalePolicyTO)) {
        action=scaleUpActionName;
        String scaleUpCondition=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
        policyExpression=scaleUpCondition + ""String_Node_Str"" + policyExpression;
      }
 else {
        action=scaleDownActionName;
        String scaleDownCondition=""String_Node_Str"" + nsVirtualServerName + ""String_Node_Str""+ nsVirtualServerName+ ""String_Node_Str"";
        policyExpression=scaleDownCondition + ""String_Node_Str"" + policyExpression;
      }
      addAutoScalePolicy(timerName,policyName,cur_prirotiy++,policyExpression,action,autoScalePolicyTO.getDuration(),interval,isCleanUp);
    }
  }
 catch (  Exception ex) {
    if (!isCleanUp) {
      disableAutoScaleConfig(loadBalancerTO,true);
      throw ex;
    }
 else {
      throw ex;
    }
  }
  return true;
}",0.9979645492324656
105547,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void setFieldValue(final Field field,final BaseCmd cmdObj,final Object paramObj,final Parameter annotation) throws IllegalArgumentException, ParseException {
  try {
    field.setAccessible(true);
    final CommandType fieldType=annotation.type();
switch (fieldType) {
case BOOLEAN:
      field.set(cmdObj,Boolean.valueOf(paramObj.toString()));
    break;
case DATE:
  if (cmdObj instanceof ListEventsCmd || cmdObj instanceof DeleteEventsCmd || cmdObj instanceof ArchiveEventsCmd|| cmdObj instanceof ArchiveAlertsCmd|| cmdObj instanceof DeleteAlertsCmd) {
    final boolean isObjInNewDateFormat=isObjInNewDateFormat(paramObj.toString());
    if (isObjInNewDateFormat) {
      final DateFormat newFormat=BaseCmd.NEW_INPUT_FORMAT;
synchronized (newFormat) {
        field.set(cmdObj,newFormat.parse(paramObj.toString()));
      }
    }
 else {
      final DateFormat format=BaseCmd.INPUT_FORMAT;
synchronized (format) {
        Date date=format.parse(paramObj.toString());
        if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,0,0,0);
        }
 else         if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,23,59,59);
        }
        field.set(cmdObj,date);
      }
    }
  }
 else {
    final DateFormat format=BaseCmd.INPUT_FORMAT;
synchronized (format) {
      format.setLenient(false);
      field.set(cmdObj,format.parse(paramObj.toString()));
    }
  }
break;
case FLOAT:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Float.valueOf(paramObj.toString()));
}
break;
case INTEGER:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Integer.valueOf(paramObj.toString()));
}
break;
case LIST:
final List listParam=new ArrayList();
final StringTokenizer st=new StringTokenizer(paramObj.toString(),""String_Node_Str"");
while (st.hasMoreTokens()) {
final String token=st.nextToken();
final CommandType listType=annotation.collectionType();
switch (listType) {
case INTEGER:
listParam.add(Integer.valueOf(token));
break;
case UUID:
if (token.isEmpty()) break;
final Long internalId=translateUuidToInternalId(token,annotation);
listParam.add(internalId);
break;
case LONG:
{
listParam.add(Long.valueOf(token));
}
break;
case SHORT:
listParam.add(Short.valueOf(token));
case STRING:
listParam.add(token);
break;
}
}
field.set(cmdObj,listParam);
break;
case UUID:
if (paramObj.toString().isEmpty()) break;
final Long internalId=translateUuidToInternalId(paramObj.toString(),annotation);
field.set(cmdObj,internalId);
break;
case LONG:
field.set(cmdObj,Long.valueOf(paramObj.toString()));
break;
case SHORT:
field.set(cmdObj,Short.valueOf(paramObj.toString()));
break;
case STRING:
if ((paramObj != null) && paramObj.toString().length() > annotation.length()) {
s_logger.error(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
throw new InvalidParameterValueException(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
}
field.set(cmdObj,paramObj.toString());
break;
case TZDATE:
field.set(cmdObj,DateUtil.parseTZDateString(paramObj.toString()));
break;
case MAP:
default :
field.set(cmdObj,paramObj);
break;
}
}
 catch (final IllegalAccessException ex) {
s_logger.error(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void setFieldValue(final Field field,final BaseCmd cmdObj,final Object paramObj,final Parameter annotation) throws IllegalArgumentException, ParseException {
  try {
    field.setAccessible(true);
    final CommandType fieldType=annotation.type();
switch (fieldType) {
case BOOLEAN:
      field.set(cmdObj,Boolean.valueOf(paramObj.toString()));
    break;
case DATE:
  if (cmdObj instanceof ListEventsCmd || cmdObj instanceof DeleteEventsCmd || cmdObj instanceof ArchiveEventsCmd|| cmdObj instanceof ArchiveAlertsCmd|| cmdObj instanceof DeleteAlertsCmd) {
    final boolean isObjInNewDateFormat=isObjInNewDateFormat(paramObj.toString());
    if (isObjInNewDateFormat) {
      final DateFormat newFormat=BaseCmd.NEW_INPUT_FORMAT;
synchronized (newFormat) {
        field.set(cmdObj,newFormat.parse(paramObj.toString()));
      }
    }
 else {
      final DateFormat format=BaseCmd.INPUT_FORMAT;
synchronized (format) {
        Date date=format.parse(paramObj.toString());
        if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,0,0,0);
        }
 else         if (field.getName().equals(""String_Node_Str"")) {
          date=messageDate(date,23,59,59);
        }
        field.set(cmdObj,date);
      }
    }
  }
 else {
    final DateFormat format=BaseCmd.INPUT_FORMAT;
synchronized (format) {
      format.setLenient(false);
      field.set(cmdObj,format.parse(paramObj.toString()));
    }
  }
break;
case FLOAT:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Float.valueOf(paramObj.toString()));
}
break;
case INTEGER:
if (paramObj != null && isNotBlank(paramObj.toString())) {
field.set(cmdObj,Integer.valueOf(paramObj.toString()));
}
break;
case LIST:
final List listParam=new ArrayList();
final StringTokenizer st=new StringTokenizer(paramObj.toString(),""String_Node_Str"");
while (st.hasMoreTokens()) {
final String token=st.nextToken();
final CommandType listType=annotation.collectionType();
switch (listType) {
case INTEGER:
listParam.add(Integer.valueOf(token));
break;
case UUID:
if (token.isEmpty()) break;
final Long internalId=translateUuidToInternalId(token,annotation);
listParam.add(internalId);
break;
case LONG:
{
listParam.add(Long.valueOf(token));
}
break;
case SHORT:
listParam.add(Short.valueOf(token));
case STRING:
listParam.add(token);
break;
}
}
field.set(cmdObj,listParam);
break;
case UUID:
if (paramObj.toString().isEmpty()) break;
final Long internalId=translateUuidToInternalId(paramObj.toString(),annotation);
field.set(cmdObj,internalId);
break;
case LONG:
field.set(cmdObj,Long.valueOf(paramObj.toString()));
break;
case SHORT:
field.set(cmdObj,Short.valueOf(paramObj.toString()));
break;
case STRING:
if ((paramObj != null)) {
if (paramObj.toString().length() > annotation.length()) {
s_logger.error(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
throw new InvalidParameterValueException(""String_Node_Str"" + annotation.length() + ""String_Node_Str""+ field.getName());
}
 else {
field.set(cmdObj,paramObj.toString());
}
}
break;
case TZDATE:
field.set(cmdObj,DateUtil.parseTZDateString(paramObj.toString()));
break;
case MAP:
default :
field.set(cmdObj,paramObj);
break;
}
}
 catch (final IllegalAccessException ex) {
s_logger.error(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
throw new CloudRuntimeException(""String_Node_Str"" + cmdObj.getCommandName() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
}
}",0.9966244725738396
105548,"@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createPublicLoadBalancerRule(String xId,String name,String description,int srcPortStart,int srcPortEnd,int defPortStart,int defPortEnd,Long ipAddrId,String protocol,String algorithm,long networkId,long lbOwnerId,boolean openFirewall,String lbProtocol,Boolean forDisplay) throws NetworkRuleConflictException, InsufficientAddressCapacityException {
  Account lbOwner=_accountMgr.getAccount(lbOwnerId);
  if (srcPortStart != srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipVO=null;
  if (ipAddrId != null) {
    ipVO=_ipAddressDao.findById(ipAddrId);
  }
  Network network=_networkModel.getNetwork(networkId);
  LoadBalancer result=null;
  if (result == null) {
    IpAddress systemIp=null;
    NetworkOffering off=_entityMgr.findById(NetworkOffering.class,network.getNetworkOfferingId());
    if (off.getElasticLb() && ipVO == null && network.getVpcId() == null) {
      systemIp=_ipAddrMgr.assignSystemIp(networkId,lbOwner,true,false);
      ipVO=_ipAddressDao.findById(systemIp.getId());
    }
    if (ipVO == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (ipVO.isOneToOneNat()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipVO.getAddress());
    }
    boolean performedIpAssoc=false;
    try {
      if (ipVO.getAssociatedWithNetworkId() == null) {
        boolean assignToVpcNtwk=network.getVpcId() != null && ipVO.getVpcId() != null && ipVO.getVpcId().longValue() == network.getVpcId();
        if (assignToVpcNtwk) {
          _networkModel.checkIpForService(ipVO,Service.Lb,networkId);
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
          ipVO=_ipAddrMgr.associateIPToGuestNetwork(ipAddrId,networkId,false);
          performedIpAssoc=true;
        }
      }
 else {
        _networkModel.checkIpForService(ipVO,Service.Lb,null);
      }
      if (ipVO.getAssociatedWithNetworkId() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipVO + ""String_Node_Str""+ network);
      }
      result=createPublicLoadBalancer(xId,name,description,srcPortStart,defPortStart,ipVO.getId(),protocol,algorithm,openFirewall,CallContext.current(),lbProtocol,forDisplay);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"",ex);
      if (ex instanceof NetworkRuleConflictException) {
        throw (NetworkRuleConflictException)ex;
      }
      if (ex instanceof InvalidParameterValueException) {
        throw (InvalidParameterValueException)ex;
      }
    }
 finally {
      if (result == null && systemIp != null) {
        s_logger.debug(""String_Node_Str"" + systemIp + ""String_Node_Str"");
        _ipAddrMgr.handleSystemIpRelease(systemIp);
      }
      if (performedIpAssoc) {
        ipVO=_ipAddressDao.findById(ipVO.getId());
        _vpcMgr.unassignIPFromVpcNetwork(ipVO.getId(),networkId);
      }
    }
  }
  if (result == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + name);
  }
  return result;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createPublicLoadBalancerRule(String xId,String name,String description,int srcPortStart,int srcPortEnd,int defPortStart,int defPortEnd,Long ipAddrId,String protocol,String algorithm,long networkId,long lbOwnerId,boolean openFirewall,String lbProtocol,Boolean forDisplay) throws NetworkRuleConflictException, InsufficientAddressCapacityException {
  Account lbOwner=_accountMgr.getAccount(lbOwnerId);
  if (srcPortStart != srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipVO=null;
  if (ipAddrId != null) {
    ipVO=_ipAddressDao.findById(ipAddrId);
  }
  Network network=_networkModel.getNetwork(networkId);
  LoadBalancer result=null;
  if (result == null) {
    IpAddress systemIp=null;
    NetworkOffering off=_entityMgr.findById(NetworkOffering.class,network.getNetworkOfferingId());
    if (off.getElasticLb() && ipVO == null && network.getVpcId() == null) {
      systemIp=_ipAddrMgr.assignSystemIp(networkId,lbOwner,true,false);
      if (systemIp != null) {
        ipVO=_ipAddressDao.findById(systemIp.getId());
      }
    }
    if (ipVO == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (ipVO.isOneToOneNat()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipVO.getAddress());
    }
    boolean performedIpAssoc=false;
    try {
      if (ipVO.getAssociatedWithNetworkId() == null) {
        boolean assignToVpcNtwk=network.getVpcId() != null && ipVO.getVpcId() != null && ipVO.getVpcId().longValue() == network.getVpcId();
        if (assignToVpcNtwk) {
          _networkModel.checkIpForService(ipVO,Service.Lb,networkId);
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
          ipVO=_ipAddrMgr.associateIPToGuestNetwork(ipAddrId,networkId,false);
          performedIpAssoc=true;
        }
      }
 else {
        _networkModel.checkIpForService(ipVO,Service.Lb,null);
      }
      if (ipVO.getAssociatedWithNetworkId() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipVO + ""String_Node_Str""+ network);
      }
      result=createPublicLoadBalancer(xId,name,description,srcPortStart,defPortStart,ipVO.getId(),protocol,algorithm,openFirewall,CallContext.current(),lbProtocol,forDisplay);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"",ex);
      if (ex instanceof NetworkRuleConflictException) {
        throw (NetworkRuleConflictException)ex;
      }
      if (ex instanceof InvalidParameterValueException) {
        throw (InvalidParameterValueException)ex;
      }
    }
 finally {
      if (result == null && systemIp != null) {
        s_logger.debug(""String_Node_Str"" + systemIp + ""String_Node_Str"");
        _ipAddrMgr.handleSystemIpRelease(systemIp);
      }
      if (performedIpAssoc) {
        ipVO=_ipAddressDao.findById(ipVO.getId());
        _vpcMgr.unassignIPFromVpcNetwork(ipVO.getId(),networkId);
      }
    }
  }
  if (result == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + name);
  }
  return result;
}",0.9936868686868688
105549,"private VolumeVO sendAttachVolumeCommand(UserVmVO vm,VolumeVO volumeToAttach,Long deviceId){
  String errorMsg=""String_Node_Str"" + volumeToAttach.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=vm.getState() == State.Running;
  AttachAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  HostVO host=null;
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (hostId != null) {
    host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumeToAttachStoragePool != null && volumeToAttachStoragePool.isManaged()) {
      sendCommand=true;
    }
  }
  DataStore dataStore=volumeToAttachStoragePool != null ? dataStoreMgr.getDataStore(volumeToAttachStoragePool.getId(),DataStoreRole.Primary) : null;
  if (host != null) {
    try {
      volService.connectVolumeToHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
 catch (    Exception e) {
      volService.disconnectVolumeFromHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      throw new CloudRuntimeException(e.getMessage());
    }
  }
  if (sendCommand) {
    if (host.getHypervisorType() == HypervisorType.KVM && volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
      volumeToAttach.setPath(volumeToAttach.get_iScsiName());
      _volsDao.update(volumeToAttach.getId(),volumeToAttach);
    }
    DataTO volTO=volFactory.getVolume(volumeToAttach.getId()).getTO();
    DiskTO disk=new DiskTO(volTO,deviceId,volumeToAttach.getPath(),volumeToAttach.getVolumeType());
    AttachCommand cmd=new AttachCommand(disk,vm.getInstanceName());
    ChapInfo chapInfo=volService.getChapInfo(volFactory.getVolume(volumeToAttach.getId()),dataStore);
    Map<String,String> details=new HashMap<String,String>();
    disk.setDetails(details);
    details.put(DiskTO.MANAGED,String.valueOf(volumeToAttachStoragePool.isManaged()));
    details.put(DiskTO.STORAGE_HOST,volumeToAttachStoragePool.getHostAddress());
    details.put(DiskTO.STORAGE_PORT,String.valueOf(volumeToAttachStoragePool.getPort()));
    details.put(DiskTO.VOLUME_SIZE,String.valueOf(volumeToAttach.getSize()));
    details.put(DiskTO.IQN,volumeToAttach.get_iScsiName());
    details.put(DiskTO.MOUNT_POINT,volumeToAttach.get_iScsiName());
    details.put(DiskTO.PROTOCOL_TYPE,(volumeToAttach.getPoolType() != null) ? volumeToAttach.getPoolType().toString() : null);
    if (chapInfo != null) {
      details.put(DiskTO.CHAP_INITIATOR_USERNAME,chapInfo.getInitiatorUsername());
      details.put(DiskTO.CHAP_INITIATOR_SECRET,chapInfo.getInitiatorSecret());
      details.put(DiskTO.CHAP_TARGET_USERNAME,chapInfo.getTargetUsername());
      details.put(DiskTO.CHAP_TARGET_SECRET,chapInfo.getTargetSecret());
    }
    try {
      answer=(AttachAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      volService.disconnectVolumeFromHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      DiskTO disk=answer.getDisk();
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),disk.getDiskSeq());
      volumeToAttach=_volsDao.findById(volumeToAttach.getId());
      if (volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
        volumeToAttach.setPath(answer.getDisk().getPath());
        _volsDao.update(volumeToAttach.getId(),volumeToAttach);
      }
    }
 else {
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),deviceId);
    }
    VmDiskStatisticsVO diskstats=_vmDiskStatsDao.findBy(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
    if (diskstats == null) {
      diskstats=new VmDiskStatisticsVO(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
      _vmDiskStatsDao.persist(diskstats);
    }
    return _volsDao.findById(volumeToAttach.getId());
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    volService.disconnectVolumeFromHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    throw new CloudRuntimeException(errorMsg);
  }
}","private VolumeVO sendAttachVolumeCommand(UserVmVO vm,VolumeVO volumeToAttach,Long deviceId){
  String errorMsg=""String_Node_Str"" + volumeToAttach.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=vm.getState() == State.Running;
  AttachAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  HostVO host=null;
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (hostId != null) {
    host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.XenServer && volumeToAttachStoragePool != null && volumeToAttachStoragePool.isManaged()) {
      sendCommand=true;
    }
  }
  DataStore dataStore=volumeToAttachStoragePool != null ? dataStoreMgr.getDataStore(volumeToAttachStoragePool.getId(),DataStoreRole.Primary) : null;
  if (host != null) {
    try {
      volService.connectVolumeToHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
 catch (    Exception e) {
      volService.disconnectVolumeFromHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      throw new CloudRuntimeException(e.getMessage());
    }
  }
  if (sendCommand) {
    if (host != null && host.getHypervisorType() == HypervisorType.KVM && volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
      volumeToAttach.setPath(volumeToAttach.get_iScsiName());
      _volsDao.update(volumeToAttach.getId(),volumeToAttach);
    }
    DataTO volTO=volFactory.getVolume(volumeToAttach.getId()).getTO();
    DiskTO disk=new DiskTO(volTO,deviceId,volumeToAttach.getPath(),volumeToAttach.getVolumeType());
    AttachCommand cmd=new AttachCommand(disk,vm.getInstanceName());
    ChapInfo chapInfo=volService.getChapInfo(volFactory.getVolume(volumeToAttach.getId()),dataStore);
    Map<String,String> details=new HashMap<String,String>();
    disk.setDetails(details);
    details.put(DiskTO.MANAGED,String.valueOf(volumeToAttachStoragePool.isManaged()));
    details.put(DiskTO.STORAGE_HOST,volumeToAttachStoragePool.getHostAddress());
    details.put(DiskTO.STORAGE_PORT,String.valueOf(volumeToAttachStoragePool.getPort()));
    details.put(DiskTO.VOLUME_SIZE,String.valueOf(volumeToAttach.getSize()));
    details.put(DiskTO.IQN,volumeToAttach.get_iScsiName());
    details.put(DiskTO.MOUNT_POINT,volumeToAttach.get_iScsiName());
    details.put(DiskTO.PROTOCOL_TYPE,(volumeToAttach.getPoolType() != null) ? volumeToAttach.getPoolType().toString() : null);
    if (chapInfo != null) {
      details.put(DiskTO.CHAP_INITIATOR_USERNAME,chapInfo.getInitiatorUsername());
      details.put(DiskTO.CHAP_INITIATOR_SECRET,chapInfo.getInitiatorSecret());
      details.put(DiskTO.CHAP_TARGET_USERNAME,chapInfo.getTargetUsername());
      details.put(DiskTO.CHAP_TARGET_SECRET,chapInfo.getTargetSecret());
    }
    try {
      answer=(AttachAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      if (host != null) {
        volService.disconnectVolumeFromHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
      }
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      DiskTO disk=answer.getDisk();
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),disk.getDiskSeq());
      volumeToAttach=_volsDao.findById(volumeToAttach.getId());
      if (volumeToAttachStoragePool.isManaged() && volumeToAttach.getPath() == null) {
        volumeToAttach.setPath(answer.getDisk().getPath());
        _volsDao.update(volumeToAttach.getId(),volumeToAttach);
      }
    }
 else {
      _volsDao.attachVolume(volumeToAttach.getId(),vm.getId(),deviceId);
    }
    VmDiskStatisticsVO diskstats=_vmDiskStatsDao.findBy(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
    if (diskstats == null) {
      diskstats=new VmDiskStatisticsVO(vm.getAccountId(),vm.getDataCenterId(),vm.getId(),volumeToAttach.getId());
      _vmDiskStatsDao.persist(diskstats);
    }
    return _volsDao.findById(volumeToAttach.getId());
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    if (host != null) {
      volService.disconnectVolumeFromHost(volFactory.getVolume(volumeToAttach.getId()),host,dataStore);
    }
    throw new CloudRuntimeException(errorMsg);
  }
}",0.9909948542024014
105550,"@Override public void downloadTemplateToStorage(DataObject template,AsyncCompletionCallback<DownloadAnswer> callback){
  long templateId=template.getId();
  DataStore store=template.getDataStore();
  if (isTemplateUpdateable(templateId,store.getId())) {
    if (template != null && template.getUri() != null) {
      initiateTemplateDownload(template,callback);
    }
 else {
      s_logger.info(""String_Node_Str"");
      DownloadAnswer ans=new DownloadAnswer(""String_Node_Str"",Status.UNKNOWN);
      callback.complete(ans);
    }
  }
 else {
    s_logger.info(""String_Node_Str"");
    DownloadAnswer ans=new DownloadAnswer(""String_Node_Str"",Status.UNKNOWN);
    callback.complete(ans);
  }
}","@Override public void downloadTemplateToStorage(DataObject template,AsyncCompletionCallback<DownloadAnswer> callback){
  if (template != null) {
    long templateId=template.getId();
    DataStore store=template.getDataStore();
    if (isTemplateUpdateable(templateId,store.getId())) {
      if (template.getUri() != null) {
        initiateTemplateDownload(template,callback);
      }
 else {
        s_logger.info(""String_Node_Str"");
        DownloadAnswer ans=new DownloadAnswer(""String_Node_Str"",Status.UNKNOWN);
        callback.complete(ans);
      }
    }
 else {
      s_logger.info(""String_Node_Str"");
      DownloadAnswer ans=new DownloadAnswer(""String_Node_Str"",Status.UNKNOWN);
      callback.complete(ans);
    }
  }
}",0.7735583684950773
105551,"public static String getDefaultHostIp(){
  if (SystemUtils.IS_OS_WINDOWS) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    try {
      Process result=Runtime.getRuntime().exec(""String_Node_Str"");
      BufferedReader output=new BufferedReader(new InputStreamReader(result.getInputStream()));
      String line=output.readLine();
      while (line != null) {
        Matcher matcher=pattern.matcher(line);
        if (matcher.find()) {
          return matcher.group(2);
        }
        line=output.readLine();
      }
    }
 catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
    }
    return null;
  }
 else {
    NetworkInterface nic=null;
    String pubNic=getDefaultEthDevice();
    if (pubNic == null) {
      return null;
    }
    try {
      nic=NetworkInterface.getByName(pubNic);
    }
 catch (    final SocketException e) {
      return null;
    }
    String[] info=NetUtils.getNetworkParams(nic);
    return info[0];
  }
}","public static String getDefaultHostIp(){
  if (SystemUtils.IS_OS_WINDOWS) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    try {
      Process result=Runtime.getRuntime().exec(""String_Node_Str"");
      BufferedReader output=new BufferedReader(new InputStreamReader(result.getInputStream()));
      String line=output.readLine();
      while (line != null) {
        Matcher matcher=pattern.matcher(line);
        if (matcher.find()) {
          return matcher.group(2);
        }
        line=output.readLine();
      }
    }
 catch (    IOException e) {
      s_logger.debug(""String_Node_Str"",e);
    }
    return null;
  }
 else {
    NetworkInterface nic=null;
    String pubNic=getDefaultEthDevice();
    if (pubNic == null) {
      return null;
    }
    try {
      nic=NetworkInterface.getByName(pubNic);
    }
 catch (    final SocketException e) {
      return null;
    }
    String[] info=NetUtils.getNetworkParams(nic);
    if (info != null) {
      return info[0];
    }
    return null;
  }
}",0.9753645047762696
105552,"public static boolean isSiteLocalAddress(String ipAddress){
  if (ipAddress == null) {
    return false;
  }
 else {
    InetAddress ip=parseIpAddress(ipAddress);
    return ip.isSiteLocalAddress();
  }
}","public static boolean isSiteLocalAddress(String ipAddress){
  if (ipAddress == null) {
    return false;
  }
 else {
    InetAddress ip=parseIpAddress(ipAddress);
    if (ip != null) {
      return ip.isSiteLocalAddress();
    }
    return false;
  }
}",0.881578947368421
105553,"public static String getIp6FromRange(String ip6Range){
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  IPv6Address start=IPv6Address.fromString(startIp);
  BigInteger gap=countIp6InRange(ip6Range);
  BigInteger next=new BigInteger(gap.bitLength(),s_rand);
  while (next.compareTo(gap) >= 0) {
    next=new BigInteger(gap.bitLength(),s_rand);
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger resultInt=startInt.add(next);
  InetAddress resultAddr;
  try {
    resultAddr=InetAddress.getByAddress(resultInt.toByteArray());
  }
 catch (  UnknownHostException e) {
    return null;
  }
  IPv6Address ip=IPv6Address.fromInetAddress(resultAddr);
  return ip.toString();
}","public static String getIp6FromRange(String ip6Range){
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  IPv6Address start=IPv6Address.fromString(startIp);
  BigInteger gap=countIp6InRange(ip6Range);
  BigInteger next=new BigInteger(gap.bitLength(),s_rand);
  while (next.compareTo(gap) >= 0) {
    next=new BigInteger(gap.bitLength(),s_rand);
  }
  InetAddress resultAddr=null;
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  if (startInt != null) {
    BigInteger resultInt=startInt.add(next);
    try {
      resultAddr=InetAddress.getByAddress(resultInt.toByteArray());
    }
 catch (    UnknownHostException e) {
      return null;
    }
  }
  if (resultAddr != null) {
    IPv6Address ip=IPv6Address.fromInetAddress(resultAddr);
    return ip.toString();
  }
  return null;
}",0.88745148771022
105554,"public static BigInteger countIp6InRange(String ip6Range){
  if (ip6Range == null) {
    return null;
  }
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  String endIp=ips[0];
  if (ips.length > 1) {
    endIp=ips[1];
  }
  IPv6Address start, end;
  try {
    start=IPv6Address.fromString(startIp);
    end=IPv6Address.fromString(endIp);
  }
 catch (  IllegalArgumentException ex) {
    return null;
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger endInt=convertIPv6AddressToBigInteger(end);
  if (startInt.compareTo(endInt) > 0) {
    return null;
  }
  return endInt.subtract(startInt).add(BigInteger.ONE);
}","public static BigInteger countIp6InRange(String ip6Range){
  if (ip6Range == null) {
    return null;
  }
  String[] ips=ip6Range.split(""String_Node_Str"");
  String startIp=ips[0];
  String endIp=ips[0];
  if (ips.length > 1) {
    endIp=ips[1];
  }
  IPv6Address start, end;
  try {
    start=IPv6Address.fromString(startIp);
    end=IPv6Address.fromString(endIp);
  }
 catch (  IllegalArgumentException ex) {
    return null;
  }
  BigInteger startInt=convertIPv6AddressToBigInteger(start);
  BigInteger endInt=convertIPv6AddressToBigInteger(end);
  if (endInt != null) {
    if (startInt.compareTo(endInt) > 0) {
      return null;
    }
  }
  return endInt.subtract(startInt).add(BigInteger.ONE);
}",0.9576642335766424
105555,"@Override public long getResourceId(String resourceId,ResourceObjectType resourceType){
  Class<?> clazz=s_typeMap.get(resourceType);
  Object entity=_entityMgr.findByUuid(clazz,resourceId);
  if (entity != null) {
    return ((InternalIdentity)entity).getId();
  }
  entity=_entityMgr.findById(clazz,resourceId);
  if (entity != null) {
    return ((InternalIdentity)entity).getId();
  }
  throw new InvalidParameterValueException(""String_Node_Str"" + resourceId + ""String_Node_Str""+ resourceType);
}","@Override public long getResourceId(String resourceId,ResourceObjectType resourceType){
  Class<?> clazz=s_typeMap.get(resourceType);
  Object entity=_entityMgr.findByUuid(clazz,resourceId);
  if (entity != null) {
    return ((InternalIdentity)entity).getId();
  }
  if (!StringUtils.isNumeric(resourceId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + resourceId + ""String_Node_Str""+ resourceType);
  }
  entity=_entityMgr.findById(clazz,resourceId);
  if (entity != null) {
    return ((InternalIdentity)entity).getId();
  }
  throw new InvalidParameterValueException(""String_Node_Str"" + resourceId + ""String_Node_Str""+ resourceType);
}",0.8620689655172413
105556,"@Override public String getUuid(String resourceId,ResourceObjectType resourceType){
  Class<?> clazz=s_typeMap.get(resourceType);
  Object entity=_entityMgr.findById(clazz,resourceId);
  if (entity != null && entity instanceof Identity) {
    return ((Identity)entity).getUuid();
  }
  return resourceId;
}","@Override public String getUuid(String resourceId,ResourceObjectType resourceType){
  if (!StringUtils.isNumeric(resourceId)) {
    return resourceId;
  }
  Class<?> clazz=s_typeMap.get(resourceType);
  Object entity=_entityMgr.findById(clazz,resourceId);
  if (entity != null && entity instanceof Identity) {
    return ((Identity)entity).getUuid();
  }
  return resourceId;
}",0.8960468521229868
105557,"protected List<String> getWarnings(){
synchronized (_warnings) {
    final ArrayList<String> results=_warnings;
    _warnings=new ArrayList<String>();
    return results;
  }
}","protected List<String> getWarnings(){
synchronized (_warnings) {
    final List<String> results=new LinkedList<String>(_warnings);
    _warnings.clear();
    return results;
  }
}",0.8507042253521127
105558,"protected List<String> getErrors(){
synchronized (_errors) {
    final ArrayList<String> result=_errors;
    _errors=new ArrayList<String>();
    return result;
  }
}","protected List<String> getErrors(){
synchronized (_errors) {
    final List<String> result=new LinkedList<String>(_errors);
    _errors.clear();
    return result;
  }
}",0.8417910447761194
105559,"protected List<String> getWarnings(){
synchronized (_warnings) {
    final ArrayList<String> results=_warnings;
    _warnings=new ArrayList<String>();
    return results;
  }
}","protected List<String> getWarnings(){
synchronized (_warnings) {
    final List<String> results=new LinkedList<String>(_warnings);
    _warnings.clear();
    return results;
  }
}",0.8507042253521127
105560,"protected List<String> getErrors(){
synchronized (_errors) {
    final ArrayList<String> result=_errors;
    _errors=new ArrayList<String>();
    return result;
  }
}","protected List<String> getErrors(){
synchronized (_errors) {
    final List<String> result=new LinkedList<String>(_errors);
    _errors.clear();
    return result;
  }
}",0.8417910447761194
105561,"private File getSystemVMKeyFile(){
  URL url=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File keyFile=null;
  if (url != null) {
    keyFile=new File(url.getPath());
  }
  if (keyFile == null || !keyFile.exists()) {
    keyFile=new File(""String_Node_Str"");
  }
  assert(keyFile != null);
  if (!keyFile.exists()) {
    s_logger.error(""String_Node_Str"" + keyFile.toString());
  }
  return keyFile;
}","private File getSystemVMKeyFile(){
  URL url=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File keyFile=null;
  if (url != null) {
    keyFile=new File(url.getPath());
  }
  if (keyFile == null || !keyFile.canRead()) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  return keyFile;
}",0.7162162162162162
105562,"@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}","@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountIdIncludingRemoved(account.getId());
    if (project != null) {
      usageRecResponse.setProjectId(project.getUuid());
      usageRecResponse.setProjectName(project.getName());
    }
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}",0.99681509524668
105563,"@Override public String getName(){
  return _name;
}","@Override public synchronized String getName(){
  return _name;
}",0.8888888888888888
105564,"/** 
 * enableVlanNetwork creates a Network object, Vlan object, and thereby a tagged PIF object in Xapi. In XenServer, VLAN is added by - Create a network, which is unique cluster wide. - Find the PIF that you want to create the VLAN on. - Create a VLAN using the network and the PIF.  As a result of this operation, a tagged PIF object is also created. Here is a list of problems with clustered Xapi implementation that we are trying to circumvent. - There can be multiple Networks with the same name-label so searching using name-label is not unique. - There are no other ways to search for Networks other than listing all of them which is not efficient in our implementation because we can have over 4000 VLAN networks. - In a clustered situation, it's possible for both hosts to detect that the Network is missing and both creates it.  This causes a lot of problems as one host may be using one Network and another may be using a different network for their VMs.  This causes problems in migration because the VMs are logically attached to different networks in Xapi's database but in reality, they are attached to the same network. To work around these problems, we do the following. - When creating the VLAN network, we name it as VLAN-UUID of the Network it is created on-VLAN Tag.  Because VLAN tags is unique with one particular network, this is a unique name-label to quickly retrieve the the VLAN network with when we need it again. - When we create the VLAN network, we add a timestamp and a random number as a tag into the network.  Then instead of creating VLAN on that network, we actually retrieve the Network again and this time uses the VLAN network with lowest timestamp or lowest random number as the VLAN network.  This allows VLAN creation to happen on multiple hosts concurrently but even if two VLAN networks were created with the same name, only one of them is used. One cavaet about this approach is that it relies on the timestamp to be relatively accurate among different hosts.
 * @param conn Xapi Connection
 * @param tag VLAN tag
 * @param network network on this host to create the VLAN on.
 * @return VLAN Network created.
 * @throws XenAPIException
 * @throws XmlRpcException
 */
protected Network enableVlanNetwork(Connection conn,long tag,XsLocalNetwork network) throws XenAPIException, XmlRpcException {
  Network vlanNetwork=null;
  String oldName=""String_Node_Str"" + Long.toString(tag);
  String newName=""String_Node_Str"" + network.getNetworkRecord(conn).uuid + ""String_Node_Str""+ tag;
  XsLocalNetwork vlanNic=getNetworkByName(conn,newName);
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldName);
    }
    vlanNic=getNetworkByName(conn,oldName);
    if (vlanNic != null) {
      s_logger.info(""String_Node_Str"" + oldName + ""String_Node_Str""+ newName);
      vlanNic.getNetwork().setNameLabel(conn,newName);
    }
  }
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip);
    }
    Network.Record nwr=new Network.Record();
    nwr.nameLabel=newName;
    nwr.tags=new HashSet<String>();
    nwr.tags.add(generateTimeStamp());
    vlanNetwork=Network.create(conn,nwr);
    vlanNic=getNetworkByName(conn,newName);
    if (vlanNic == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + newName);
    }
  }
  PIF nPif=network.getPif(conn);
  PIF.Record nPifr=network.getPifRecord(conn);
  vlanNetwork=vlanNic.getNetwork();
  if (vlanNic.getPif(conn) != null) {
    return vlanNetwork;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip+ ""String_Node_Str""+ nPifr.device);
  }
  VLAN vlan=VLAN.create(conn,nPif,tag,vlanNetwork);
  VLAN.Record vlanr=vlan.getRecord(conn);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ vlanr.uuid);
  }
  return vlanNetwork;
}","/** 
 * enableVlanNetwork creates a Network object, Vlan object, and thereby a tagged PIF object in Xapi. In XenServer, VLAN is added by - Create a network, which is unique cluster wide. - Find the PIF that you want to create the VLAN on. - Create a VLAN using the network and the PIF.  As a result of this operation, a tagged PIF object is also created. Here is a list of problems with clustered Xapi implementation that we are trying to circumvent. - There can be multiple Networks with the same name-label so searching using name-label is not unique. - There are no other ways to search for Networks other than listing all of them which is not efficient in our implementation because we can have over 4000 VLAN networks. - In a clustered situation, it's possible for both hosts to detect that the Network is missing and both creates it.  This causes a lot of problems as one host may be using one Network and another may be using a different network for their VMs.  This causes problems in migration because the VMs are logically attached to different networks in Xapi's database but in reality, they are attached to the same network. To work around these problems, we do the following. - When creating the VLAN network, we name it as VLAN-UUID of the Network it is created on-VLAN Tag.  Because VLAN tags is unique with one particular network, this is a unique name-label to quickly retrieve the the VLAN network with when we need it again. - When we create the VLAN network, we add a timestamp and a random number as a tag into the network.  Then instead of creating VLAN on that network, we actually retrieve the Network again and this time uses the VLAN network with lowest timestamp or lowest random number as the VLAN network.  This allows VLAN creation to happen on multiple hosts concurrently but even if two VLAN networks were created with the same name, only one of them is used. One cavaet about this approach is that it relies on the timestamp to be relatively accurate among different hosts.
 * @param conn Xapi Connection
 * @param tag VLAN tag
 * @param network network on this host to create the VLAN on.
 * @return VLAN Network created.
 * @throws XenAPIException
 * @throws XmlRpcException
 */
protected Network enableVlanNetwork(Connection conn,long tag,XsLocalNetwork network) throws XenAPIException, XmlRpcException {
  Network vlanNetwork=null;
  String oldName=""String_Node_Str"" + Long.toString(tag);
  String newName=""String_Node_Str"" + network.getNetworkRecord(conn).uuid + ""String_Node_Str""+ tag;
  XsLocalNetwork vlanNic=getNetworkByName(conn,newName);
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldName);
    }
    vlanNic=getNetworkByName(conn,oldName);
    if (vlanNic != null) {
      s_logger.info(""String_Node_Str"" + oldName + ""String_Node_Str""+ newName);
      vlanNic.getNetwork().setNameLabel(conn,newName);
    }
  }
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip);
    }
    Network.Record nwr=new Network.Record();
    nwr.nameLabel=newName;
    nwr.tags=new HashSet<String>();
    nwr.tags.add(generateTimeStamp());
    vlanNetwork=Network.create(conn,nwr);
    vlanNic=getNetworkByName(conn,newName);
    if (vlanNic == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + newName);
    }
  }
  PIF nPif=network.getPif(conn);
  PIF.Record nPifr=network.getPifRecord(conn);
  vlanNetwork=vlanNic.getNetwork();
  if (vlanNic.getPif(conn) != null) {
    return vlanNetwork;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip+ ""String_Node_Str""+ nPifr.device);
  }
  VLAN vlan=VLAN.create(conn,nPif,tag,vlanNetwork);
  if (vlan != null) {
    VLAN.Record vlanr=vlan.getRecord(conn);
    if (vlanr != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ vlanr.uuid);
      }
    }
  }
  return vlanNetwork;
}",0.991119449656035
105565,"@Override public void recalculateCapacity(){
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<HostVO> hosts=_resourceMgr.listAllNotInMaintenanceHostsInOneZone(Host.Type.Routing,null);
    for (    HostVO host : hosts) {
      _capacityMgr.updateCapacityForHost(host);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      long disk=_capacityMgr.getAllocatedPoolCapacity(pool,null);
      if (pool.isShared()) {
        _storageMgr.createCapacityEntry(pool,Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,disk);
      }
 else {
        _storageMgr.createCapacityEntry(pool,Capacity.CAPACITY_TYPE_LOCAL_STORAGE,disk);
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<DataCenterVO> datacenters=_dcDao.listAll();
    for (    DataCenterVO datacenter : datacenters) {
      long dcId=datacenter.getId();
      if (datacenter.getNetworkType() == NetworkType.Advanced) {
        createOrUpdateIpCapacity(dcId,null,Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP,datacenter.getAllocationState());
      }
      createOrUpdateIpCapacity(dcId,null,Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP,datacenter.getAllocationState());
      if (datacenter.getNetworkType() == NetworkType.Advanced) {
        createOrUpdateVlanCapacity(dcId,datacenter.getAllocationState());
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<HostPodVO> pods=_podDao.listAll();
    for (    HostPodVO pod : pods) {
      long podId=pod.getId();
      long dcId=pod.getDataCenterId();
      createOrUpdateIpCapacity(dcId,podId,Capacity.CAPACITY_TYPE_PRIVATE_IP,_configMgr.findPodAllocationState(pod));
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    s_logger.error(""String_Node_Str"",t);
  }
}","@Override public void recalculateCapacity(){
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<HostVO> hosts=_resourceMgr.listAllNotInMaintenanceHostsInOneZone(Host.Type.Routing,null);
    if (hosts != null) {
      for (      HostVO host : hosts) {
        _capacityMgr.updateCapacityForHost(host);
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<StoragePoolVO> storagePools=_storagePoolDao.listAll();
    for (    StoragePoolVO pool : storagePools) {
      long disk=_capacityMgr.getAllocatedPoolCapacity(pool,null);
      if (pool.isShared()) {
        _storageMgr.createCapacityEntry(pool,Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,disk);
      }
 else {
        _storageMgr.createCapacityEntry(pool,Capacity.CAPACITY_TYPE_LOCAL_STORAGE,disk);
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<DataCenterVO> datacenters=_dcDao.listAll();
    for (    DataCenterVO datacenter : datacenters) {
      long dcId=datacenter.getId();
      if (datacenter.getNetworkType() == NetworkType.Advanced) {
        createOrUpdateIpCapacity(dcId,null,Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP,datacenter.getAllocationState());
      }
      createOrUpdateIpCapacity(dcId,null,Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP,datacenter.getAllocationState());
      if (datacenter.getNetworkType() == NetworkType.Advanced) {
        createOrUpdateVlanCapacity(dcId,datacenter.getAllocationState());
      }
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
    List<HostPodVO> pods=_podDao.listAll();
    for (    HostPodVO pod : pods) {
      long podId=pod.getId();
      long dcId=pod.getDataCenterId();
      createOrUpdateIpCapacity(dcId,podId,Capacity.CAPACITY_TYPE_PRIVATE_IP,_configMgr.findPodAllocationState(pod));
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
      s_logger.debug(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    s_logger.error(""String_Node_Str"",t);
  }
}",0.9896680589140472
105566,"@Override @DB public boolean associateIpAddressListToAccount(long userId,final long accountId,final long zoneId,final Long vlanId,final Network guestNetworkFinal) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, ResourceAllocationException {
  final Account owner=_accountMgr.getActiveAccountById(accountId);
  if (guestNetworkFinal != null && guestNetworkFinal.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + guestNetworkFinal + ""String_Node_Str""+ TrafficType.Guest);
  }
  Ternary<Boolean,List<NetworkOfferingVO>,Network> pair=null;
  try {
    pair=Transaction.execute(new TransactionCallbackWithException<Ternary<Boolean,List<NetworkOfferingVO>,Network>,Exception>(){
      @Override public Ternary<Boolean,List<NetworkOfferingVO>,Network> doInTransaction(      TransactionStatus status) throws InsufficientCapacityException, ResourceAllocationException {
        boolean createNetwork=false;
        Network guestNetwork=guestNetworkFinal;
        if (guestNetwork == null) {
          List<? extends Network> networks=getIsolatedNetworksWithSourceNATOwnedByAccountInZone(zoneId,owner);
          if (networks.size() == 0) {
            createNetwork=true;
          }
 else           if (networks.size() == 1) {
            guestNetwork=networks.get(0);
          }
 else {
            throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
          }
        }
        List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (requiredOfferings.size() < 1) {
          throw new CloudRuntimeException(""String_Node_Str"" + Availability.Required + ""String_Node_Str"");
        }
        if (createNetwork) {
          if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
            long physicalNetworkId=_networkModel.findPhysicalNetworkId(zoneId,requiredOfferings.get(0).getTags(),requiredOfferings.get(0).getTrafficType());
            PhysicalNetwork physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
            if (physicalNetwork == null) {
              throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ requiredOfferings.get(0).getTags());
            }
            s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str""+ requiredOfferings.get(0).getId()+ ""String_Node_Str"");
            guestNetwork=_networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",null,null,null,null,owner,null,physicalNetwork,zoneId,ACLType.Account,null,null,null,null,true,null);
            if (guestNetwork == null) {
              s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
              throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
            }
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"" + requiredOfferings.get(0).getId() + ""String_Node_Str""+ NetworkOffering.State.Enabled);
          }
        }
        boolean allocateSourceNat=false;
        List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(guestNetwork.getId(),true);
        if (sourceNat.isEmpty()) {
          allocateSourceNat=true;
        }
        List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
        boolean isSourceNatAllocated=false;
        for (        IPAddressVO addr : ips) {
          if (addr.getState() != State.Allocated) {
            if (!isSourceNatAllocated && allocateSourceNat) {
              addr.setSourceNat(true);
              isSourceNatAllocated=true;
            }
 else {
              addr.setSourceNat(false);
            }
            addr.setAssociatedWithNetworkId(guestNetwork.getId());
            addr.setVpcId(guestNetwork.getVpcId());
            addr.setAllocatedTime(new Date());
            addr.setAllocatedInDomainId(owner.getDomainId());
            addr.setAllocatedToAccountId(owner.getId());
            addr.setSystem(false);
            addr.setState(IpAddress.State.Allocating);
            markPublicIpAsAllocated(addr);
          }
        }
        return new Ternary<Boolean,List<NetworkOfferingVO>,Network>(createNetwork,requiredOfferings,guestNetwork);
      }
    }
);
  }
 catch (  Exception e1) {
    ExceptionUtil.rethrowRuntime(e1);
    ExceptionUtil.rethrow(e1,InsufficientCapacityException.class);
    ExceptionUtil.rethrow(e1,ResourceAllocationException.class);
    throw new IllegalStateException(e1);
  }
  boolean createNetwork=pair.first();
  List<NetworkOfferingVO> requiredOfferings=pair.second();
  Network guestNetwork=pair.third();
  if (createNetwork && requiredOfferings.get(0).getIsPersistent()) {
    DataCenter zone=_dcDao.findById(zoneId);
    DeployDestination dest=new DeployDestination(zone,null,null,null);
    Account callerAccount=CallContext.current().getCallingAccount();
    UserVO callerUser=_userDao.findById(CallContext.current().getCallingUserId());
    Journal journal=new Journal.LogJournal(""String_Node_Str"" + guestNetwork,s_logger);
    ReservationContext context=new ReservationContextImpl(UUID.randomUUID().toString(),journal,callerUser,callerAccount);
    s_logger.debug(""String_Node_Str"" + guestNetwork + ""String_Node_Str"");
    try {
      Pair<? extends NetworkGuru,? extends Network> implementedNetwork=_networkMgr.implementNetwork(guestNetwork.getId(),dest,context);
      if (implementedNetwork == null || implementedNetwork.first() == null) {
        s_logger.warn(""String_Node_Str"" + guestNetwork);
      }
      guestNetwork=implementedNetwork.second();
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + guestNetwork + ""String_Node_Str""+ ""String_Node_Str"",ex);
      CloudRuntimeException e=new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"");
      e.addProxyObject(guestNetwork.getUuid(),""String_Node_Str"");
      throw e;
    }
  }
  return true;
}","@Override @DB public boolean associateIpAddressListToAccount(long userId,final long accountId,final long zoneId,final Long vlanId,final Network guestNetworkFinal) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, ResourceAllocationException {
  final Account owner=_accountMgr.getActiveAccountById(accountId);
  if (guestNetworkFinal != null && guestNetworkFinal.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + guestNetworkFinal + ""String_Node_Str""+ TrafficType.Guest);
  }
  Ternary<Boolean,List<NetworkOfferingVO>,Network> pair=null;
  try {
    pair=Transaction.execute(new TransactionCallbackWithException<Ternary<Boolean,List<NetworkOfferingVO>,Network>,Exception>(){
      @Override public Ternary<Boolean,List<NetworkOfferingVO>,Network> doInTransaction(      TransactionStatus status) throws InsufficientCapacityException, ResourceAllocationException {
        boolean createNetwork=false;
        Network guestNetwork=guestNetworkFinal;
        if (guestNetwork == null) {
          List<? extends Network> networks=getIsolatedNetworksWithSourceNATOwnedByAccountInZone(zoneId,owner);
          if (networks.size() == 0) {
            createNetwork=true;
          }
 else           if (networks.size() == 1) {
            guestNetwork=networks.get(0);
          }
 else {
            throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
          }
        }
        List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (requiredOfferings.size() < 1) {
          throw new CloudRuntimeException(""String_Node_Str"" + Availability.Required + ""String_Node_Str"");
        }
        if (createNetwork) {
          if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
            long physicalNetworkId=_networkModel.findPhysicalNetworkId(zoneId,requiredOfferings.get(0).getTags(),requiredOfferings.get(0).getTrafficType());
            PhysicalNetwork physicalNetwork=_physicalNetworkDao.findById(physicalNetworkId);
            if (physicalNetwork == null) {
              throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ requiredOfferings.get(0).getTags());
            }
            s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str""+ requiredOfferings.get(0).getId()+ ""String_Node_Str"");
            guestNetwork=_networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",null,null,null,null,owner,null,physicalNetwork,zoneId,ACLType.Account,null,null,null,null,true,null);
            if (guestNetwork == null) {
              s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
              throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
            }
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"" + requiredOfferings.get(0).getId() + ""String_Node_Str""+ NetworkOffering.State.Enabled);
          }
        }
        boolean allocateSourceNat=false;
        List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(guestNetwork.getId(),true);
        if (sourceNat.isEmpty()) {
          allocateSourceNat=true;
        }
        List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
        boolean isSourceNatAllocated=false;
        for (        IPAddressVO addr : ips) {
          if (addr.getState() != State.Allocated) {
            if (!isSourceNatAllocated && allocateSourceNat) {
              addr.setSourceNat(true);
              isSourceNatAllocated=true;
            }
 else {
              addr.setSourceNat(false);
            }
            addr.setAssociatedWithNetworkId(guestNetwork.getId());
            addr.setVpcId(guestNetwork.getVpcId());
            addr.setAllocatedTime(new Date());
            addr.setAllocatedInDomainId(owner.getDomainId());
            addr.setAllocatedToAccountId(owner.getId());
            addr.setSystem(false);
            addr.setState(IpAddress.State.Allocating);
            markPublicIpAsAllocated(addr);
          }
        }
        return new Ternary<Boolean,List<NetworkOfferingVO>,Network>(createNetwork,requiredOfferings,guestNetwork);
      }
    }
);
  }
 catch (  Exception e1) {
    ExceptionUtil.rethrowRuntime(e1);
    ExceptionUtil.rethrow(e1,InsufficientCapacityException.class);
    ExceptionUtil.rethrow(e1,ResourceAllocationException.class);
    throw new IllegalStateException(e1);
  }
  boolean createNetwork=pair.first();
  List<NetworkOfferingVO> requiredOfferings=pair.second();
  Network guestNetwork=pair.third();
  if (createNetwork && requiredOfferings.get(0).getIsPersistent()) {
    DataCenter zone=_dcDao.findById(zoneId);
    DeployDestination dest=new DeployDestination(zone,null,null,null);
    Account callerAccount=CallContext.current().getCallingAccount();
    UserVO callerUser=_userDao.findById(CallContext.current().getCallingUserId());
    Journal journal=new Journal.LogJournal(""String_Node_Str"" + guestNetwork,s_logger);
    ReservationContext context=new ReservationContextImpl(UUID.randomUUID().toString(),journal,callerUser,callerAccount);
    s_logger.debug(""String_Node_Str"" + guestNetwork + ""String_Node_Str"");
    try {
      Pair<? extends NetworkGuru,? extends Network> implementedNetwork=_networkMgr.implementNetwork(guestNetwork.getId(),dest,context);
      if (implementedNetwork == null || implementedNetwork.first() == null) {
        s_logger.warn(""String_Node_Str"" + guestNetwork);
      }
      if (implementedNetwork != null) {
        guestNetwork=implementedNetwork.second();
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + guestNetwork + ""String_Node_Str""+ ""String_Node_Str"",ex);
      CloudRuntimeException e=new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"");
      e.addProxyObject(guestNetwork.getUuid(),""String_Node_Str"");
      throw e;
    }
  }
  return true;
}",0.9939690301548492
105567,"public static void setVirtualHost(String virtualHost){
  RabbitMQEventBus.virtualHost=virtualHost;
}","public synchronized static void setVirtualHost(String virtualHost){
  RabbitMQEventBus.virtualHost=virtualHost;
}",0.9389671361502347
105568,"@Override public boolean stop(){
  if (s_connection.isOpen()) {
    for (    String subscriberId : s_subscribers.keySet()) {
      Ternary<String,Channel,EventSubscriber> subscriberDetails=s_subscribers.get(subscriberId);
      Channel channel=subscriberDetails.second();
      String queueName=subscriberId;
      try {
        channel.queueDelete(queueName);
        channel.abort();
      }
 catch (      IOException ioe) {
        s_logger.warn(""String_Node_Str"" + queueName + ""String_Node_Str""+ ioe.getMessage());
      }
    }
  }
  closeConnection();
  return true;
}","@Override public synchronized boolean stop(){
  if (s_connection.isOpen()) {
    for (    String subscriberId : s_subscribers.keySet()) {
      Ternary<String,Channel,EventSubscriber> subscriberDetails=s_subscribers.get(subscriberId);
      Channel channel=subscriberDetails.second();
      String queueName=subscriberId;
      try {
        channel.queueDelete(queueName);
        channel.abort();
      }
 catch (      IOException ioe) {
        s_logger.warn(""String_Node_Str"" + queueName + ""String_Node_Str""+ ioe.getMessage());
      }
    }
  }
  closeConnection();
  return true;
}",0.9888027562446168
105569,"private void shutdownCleanup(){
  s_logger.info(""String_Node_Str"");
  for (  String mountPoint : _storageMounts.values()) {
    s_logger.info(""String_Node_Str"" + mountPoint);
    String result=null;
    Script command=new Script(true,""String_Node_Str"",_timeout,s_logger);
    command.add(mountPoint);
    result=command.execute();
    if (result != null) {
      s_logger.warn(""String_Node_Str"" + mountPoint + ""String_Node_Str""+ result);
    }
    File file=new File(mountPoint);
    if (file.exists()) {
      file.delete();
    }
  }
}","private void shutdownCleanup(){
  s_logger.info(""String_Node_Str"");
synchronized (_storageMounts) {
    for (    String mountPoint : _storageMounts.values()) {
      s_logger.info(""String_Node_Str"" + mountPoint);
      String result=null;
      Script command=new Script(true,""String_Node_Str"",_timeout,s_logger);
      command.add(mountPoint);
      result=command.execute();
      if (result != null) {
        s_logger.warn(""String_Node_Str"" + mountPoint + ""String_Node_Str""+ result);
      }
      File file=new File(mountPoint);
      if (file.exists()) {
        file.delete();
      }
    }
  }
}",0.9035087719298246
105570,"public static int getNextSequenceId(){
  return s_nextSequence++;
}","public synchronized static int getNextSequenceId(){
  return s_nextSequence++;
}",0.91156462585034
105571,"public int getWeek(){
  return _week;
}","public int getWeek(){
synchronized (this) {
    return _week;
  }
}",0.7358490566037735
105572,"public int getDay(){
  return _day;
}","public int getDay(){
synchronized (this) {
    return _day;
  }
}",0.7254901960784313
105573,"public int getYear(){
  return _year;
}","public int getYear(){
synchronized (this) {
    return _year;
  }
}",0.7358490566037735
105574,"public int getMinute(){
  return _minute;
}","public int getMinute(){
synchronized (this) {
    return _minute;
  }
}",0.7543859649122807
105575,"public int getHour(){
  return _hour;
}","public int getHour(){
synchronized (this) {
    return _hour;
  }
}",0.7358490566037735
105576,"public int getMonth(){
  return _month;
}","public int getMonth(){
synchronized (this) {
    return _month;
  }
}",0.7454545454545455
105577,"public void sendStartup(Link link){
  final StartupCommand[] startup=_resource.initialize();
  final Command[] commands=new Command[startup.length];
  for (int i=0; i < startup.length; i++) {
    setupStartupCommand(startup[i]);
    commands[i]=startup[i];
  }
  final Request request=new Request(_id != null ? _id : -1,-1,commands,false,false);
  request.setSequence(getNextSequence());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + request.toString());
  }
synchronized (this) {
    _startup=new StartupTask(link);
    _timer.schedule(_startup,_startupWait);
  }
  try {
    link.send(request.toBytes());
  }
 catch (  final ClosedChannelException e) {
    s_logger.warn(""String_Node_Str"" + request.toString());
  }
}","public void sendStartup(Link link){
  final StartupCommand[] startup=_resource.initialize();
  if (startup != null) {
    final Command[] commands=new Command[startup.length];
    for (int i=0; i < startup.length; i++) {
      setupStartupCommand(startup[i]);
      commands[i]=startup[i];
    }
    final Request request=new Request(_id != null ? _id : -1,-1,commands,false,false);
    request.setSequence(getNextSequence());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + request.toString());
    }
synchronized (this) {
      _startup=new StartupTask(link);
      _timer.schedule(_startup,_startupWait);
    }
    try {
      link.send(request.toBytes());
    }
 catch (    final ClosedChannelException e) {
      s_logger.warn(""String_Node_Str"" + request.toString());
    }
  }
}",0.957078795643818
105578,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _localgw=(String)params.get(""String_Node_Str"");
  _eth1mask=(String)params.get(""String_Node_Str"");
  _eth1ip=(String)params.get(""String_Node_Str"");
  if (_eth1ip != null) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
  String eth2ip=(String)params.get(""String_Node_Str"");
  if (eth2ip != null) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
  super.configure(name,params);
  for (  Map.Entry<String,Object> entry : params.entrySet()) {
    _properties.put(entry.getKey(),entry.getValue());
  }
  String value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equals(""String_Node_Str""))   _proxyPort=443;
 else {
    value=(String)params.get(""String_Node_Str"");
    _proxyPort=NumbersUtil.parseInt(value,80);
  }
  value=(String)params.get(""String_Node_Str"");
  _proxyVmId=NumbersUtil.parseLong(value,0);
  if (_localgw != null) {
    String mgmtHost=(String)params.get(""String_Node_Str"");
    addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,mgmtHost);
    String internalDns1=(String)params.get(""String_Node_Str"");
    if (internalDns1 == null) {
      s_logger.warn(""String_Node_Str"");
    }
 else {
      addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,internalDns1);
    }
    String internalDns2=(String)params.get(""String_Node_Str"");
    if (internalDns2 != null) {
      addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,internalDns2);
    }
  }
  _pubIp=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    disableRpFilter();
  }
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + _proxyVmId);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _localgw=(String)params.get(""String_Node_Str"");
  _eth1mask=(String)params.get(""String_Node_Str"");
  _eth1ip=(String)params.get(""String_Node_Str"");
  if (_eth1ip != null) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
  String eth2ip=(String)params.get(""String_Node_Str"");
  if (eth2ip != null) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
  super.configure(name,params);
  for (  Map.Entry<String,Object> entry : params.entrySet()) {
    _properties.put(entry.getKey(),entry.getValue());
  }
  String value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equals(""String_Node_Str""))   _proxyPort=443;
 else {
    value=(String)params.get(""String_Node_Str"");
    _proxyPort=NumbersUtil.parseInt(value,80);
  }
  value=(String)params.get(""String_Node_Str"");
  _proxyVmId=NumbersUtil.parseLong(value,0);
  if (_localgw != null) {
    String mgmtHost=(String)params.get(""String_Node_Str"");
    if (_eth1ip != null) {
      addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,mgmtHost);
      String internalDns1=(String)params.get(""String_Node_Str"");
      if (internalDns1 == null) {
        s_logger.warn(""String_Node_Str"");
      }
 else {
        addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,internalDns1);
      }
      String internalDns2=(String)params.get(""String_Node_Str"");
      if (internalDns2 != null) {
        addRouteToInternalIpOrCidr(_localgw,_eth1ip,_eth1mask,internalDns2);
      }
    }
  }
  _pubIp=(String)params.get(""String_Node_Str"");
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    disableRpFilter();
  }
  if (s_logger.isInfoEnabled())   s_logger.info(""String_Node_Str"" + _proxyVmId);
  return true;
}",0.9857770881820532
105579,"private void disableRpFilter(){
  try {
    FileWriter fstream=new FileWriter(""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"");
    out.close();
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"");
  }
}","private void disableRpFilter(){
  try (FileWriter fstream=new FileWriter(""String_Node_Str"");BufferedWriter out=new BufferedWriter(fstream)){
    out.write(""String_Node_Str"");
  }
 catch (  IOException e) {
    s_logger.warn(""String_Node_Str"");
  }
}",0.9389312977099236
105580,"@Override public void create(){
  if (getSourceCidrList() != null) {
    for (    String cidr : getSourceCidrList()) {
      if (!NetUtils.isValidCIDR(cidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,""String_Node_Str"" + cidr);
      }
    }
  }
  try {
    FirewallRule result=_firewallService.createIngressFirewallRule(this);
    setEntityId(result.getId());
    setEntityUuid(result.getUuid());
  }
 catch (  NetworkRuleConflictException ex) {
    s_logger.info(""String_Node_Str"" + ex.getMessage());
    s_logger.trace(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,ex.getMessage());
  }
}","@Override public void create(){
  if (getSourceCidrList() != null) {
    for (    String cidr : getSourceCidrList()) {
      if (!NetUtils.isValidCIDR(cidr)) {
        throw new ServerApiException(ApiErrorCode.PARAM_ERROR,""String_Node_Str"" + cidr);
      }
    }
  }
  try {
    FirewallRule result=_firewallService.createIngressFirewallRule(this);
    if (result != null) {
      setEntityId(result.getId());
      setEntityUuid(result.getUuid());
    }
  }
 catch (  NetworkRuleConflictException ex) {
    s_logger.info(""String_Node_Str"" + ex.getMessage());
    s_logger.trace(""String_Node_Str"",ex);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,ex.getMessage());
  }
}",0.973568281938326
105581,"@Override public Integer getSourcePortStart(){
  if (publicStartPort != null) {
    return publicStartPort.intValue();
  }
  return null;
}","@Override public Integer getSourcePortStart(){
  if (publicStartPort != null) {
    return publicStartPort;
  }
  return null;
}",0.9588014981273408
105582,"@Override public Integer getSourcePortEnd(){
  if (publicEndPort == null) {
    if (publicStartPort != null) {
      return publicStartPort.intValue();
    }
  }
 else {
    return publicEndPort.intValue();
  }
  return null;
}","@Override public Integer getSourcePortEnd(){
  if (publicEndPort == null) {
    if (publicStartPort != null) {
      return publicStartPort;
    }
  }
 else {
    return publicEndPort;
  }
  return null;
}",0.949074074074074
105583,"public StaticNatRuleImpl(FirewallRuleVO rule,String dstIp){
  id=rule.getId();
  xid=rule.getXid();
  uuid=rule.getUuid();
  protocol=rule.getProtocol();
  portStart=rule.getSourcePortStart();
  portEnd=rule.getSourcePortEnd();
  state=rule.getState();
  accountId=rule.getAccountId();
  domainId=rule.getDomainId();
  networkId=rule.getNetworkId();
  sourceIpAddressId=rule.getSourceIpAddressId();
  destIpAddress=dstIp;
  forDisplay=rule.isDisplay();
}","public StaticNatRuleImpl(FirewallRuleVO rule,String dstIp){
  id=rule.getId();
  xid=rule.getXid();
  uuid=rule.getUuid();
  protocol=rule.getProtocol();
  portStart=rule.getSourcePortStart().intValue();
  portEnd=rule.getSourcePortEnd().intValue();
  state=rule.getState();
  accountId=rule.getAccountId();
  domainId=rule.getDomainId();
  networkId=rule.getNetworkId();
  sourceIpAddressId=rule.getSourceIpAddressId();
  destIpAddress=dstIp;
  forDisplay=rule.isDisplay();
}",0.9763440860215054
105584,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_REMOTE_ACCESS_VPN_DESTROY,eventDescription=""String_Node_Str"",async=true) public boolean destroyRemoteAccessVpnForIp(long ipId,Account caller) throws ResourceUnavailableException {
  final RemoteAccessVpnVO vpn=_remoteAccessVpnDao.findByPublicIpAddress(ipId);
  if (vpn == null) {
    s_logger.debug(""String_Node_Str"" + ipId);
    return true;
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,true,vpn);
  RemoteAccessVpn.State prevState=vpn.getState();
  vpn.setState(RemoteAccessVpn.State.Removed);
  _remoteAccessVpnDao.update(vpn.getId(),vpn);
  boolean success=false;
  try {
    for (    RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
      if (element.stopVpn(vpn)) {
        success=true;
        break;
      }
    }
  }
 catch (  ResourceUnavailableException ex) {
    vpn.setState(prevState);
    _remoteAccessVpnDao.update(vpn.getId(),vpn);
    s_logger.debug(""String_Node_Str"" + vpn.getId() + ""String_Node_Str""+ RemoteAccessVpn.State.Running);
    success=false;
  }
 finally {
    if (success) {
      final List<? extends FirewallRule> vpnFwRules=_rulesDao.listByIpAndPurpose(ipId,Purpose.Vpn);
      boolean applyFirewall=false;
      final List<FirewallRuleVO> fwRules=new ArrayList<FirewallRuleVO>();
      if (vpnFwRules.size() != 0 && _rulesDao.findByRelatedId(vpnFwRules.get(0).getId()) != null) {
        applyFirewall=true;
      }
      if (applyFirewall) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            for (            FirewallRule vpnFwRule : vpnFwRules) {
              _firewallMgr.revokeRelatedFirewallRule(vpnFwRule.getId(),false);
              fwRules.add(_rulesDao.findByRelatedId(vpnFwRule.getId()));
            }
            s_logger.debug(""String_Node_Str"" + fwRules.size() + ""String_Node_Str"");
          }
        }
);
        s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
        success=_firewallMgr.applyIngressFirewallRules(ipId,caller);
      }
      if (success) {
        try {
          Transaction.execute(new TransactionCallbackNoReturn(){
            @Override public void doInTransactionWithoutResult(            TransactionStatus status){
              _remoteAccessVpnDao.remove(vpn.getId());
              List<VpnUserVO> vpnUsers=_vpnUsersDao.listByAccount(vpn.getAccountId());
              for (              VpnUserVO user : vpnUsers) {
                if (user.getState() != VpnUser.State.Revoke) {
                  UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
                }
              }
              if (vpnFwRules != null) {
                for (                FirewallRule vpnFwRule : vpnFwRules) {
                  _rulesDao.remove(vpnFwRule.getId());
                  s_logger.debug(""String_Node_Str"" + vpnFwRule.getSourceIpAddressId() + ""String_Node_Str""+ vpnFwRule.getSourcePortStart()+ ""String_Node_Str"");
                }
              }
            }
          }
);
        }
 catch (        Exception ex) {
          s_logger.warn(""String_Node_Str"",ex);
        }
      }
    }
  }
  return success;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_REMOTE_ACCESS_VPN_DESTROY,eventDescription=""String_Node_Str"",async=true) public boolean destroyRemoteAccessVpnForIp(long ipId,Account caller) throws ResourceUnavailableException {
  final RemoteAccessVpnVO vpn=_remoteAccessVpnDao.findByPublicIpAddress(ipId);
  if (vpn == null) {
    s_logger.debug(""String_Node_Str"" + ipId);
    return true;
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,true,vpn);
  RemoteAccessVpn.State prevState=vpn.getState();
  vpn.setState(RemoteAccessVpn.State.Removed);
  _remoteAccessVpnDao.update(vpn.getId(),vpn);
  boolean success=false;
  try {
    for (    RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
      if (element.stopVpn(vpn)) {
        success=true;
        break;
      }
    }
  }
 catch (  ResourceUnavailableException ex) {
    vpn.setState(prevState);
    _remoteAccessVpnDao.update(vpn.getId(),vpn);
    s_logger.debug(""String_Node_Str"" + vpn.getId() + ""String_Node_Str""+ RemoteAccessVpn.State.Running);
    success=false;
  }
 finally {
    if (success) {
      final List<? extends FirewallRule> vpnFwRules=_rulesDao.listByIpAndPurpose(ipId,Purpose.Vpn);
      boolean applyFirewall=false;
      final List<FirewallRuleVO> fwRules=new ArrayList<FirewallRuleVO>();
      if (vpnFwRules.size() != 0 && _rulesDao.findByRelatedId(vpnFwRules.get(0).getId()) != null) {
        applyFirewall=true;
      }
      if (applyFirewall) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            for (            FirewallRule vpnFwRule : vpnFwRules) {
              _firewallMgr.revokeRelatedFirewallRule(vpnFwRule.getId(),false);
              fwRules.add(_rulesDao.findByRelatedId(vpnFwRule.getId()));
            }
            s_logger.debug(""String_Node_Str"" + fwRules.size() + ""String_Node_Str"");
          }
        }
);
        s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
        success=_firewallMgr.applyIngressFirewallRules(ipId,caller);
      }
      if (success) {
        try {
          Transaction.execute(new TransactionCallbackNoReturn(){
            @Override public void doInTransactionWithoutResult(            TransactionStatus status){
              _remoteAccessVpnDao.remove(vpn.getId());
              List<VpnUserVO> vpnUsers=_vpnUsersDao.listByAccount(vpn.getAccountId());
              for (              VpnUserVO user : vpnUsers) {
                if (user.getState() != VpnUser.State.Revoke) {
                  UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
                }
              }
              if (vpnFwRules != null) {
                for (                FirewallRule vpnFwRule : vpnFwRules) {
                  _rulesDao.remove(vpnFwRule.getId());
                  s_logger.debug(""String_Node_Str"" + vpnFwRule.getSourceIpAddressId() + ""String_Node_Str""+ vpnFwRule.getSourcePortStart().intValue()+ ""String_Node_Str"");
                }
              }
            }
          }
);
        }
 catch (        Exception ex) {
          s_logger.warn(""String_Node_Str"",ex);
        }
      }
    }
  }
  return success;
}",0.9983510718033278
105585,"public void complete(RpcException e){
  _responseResult=e;
synchronized (_responseLock) {
    _responseDone=true;
    _responseLock.notifyAll();
  }
  if (_callbackListeners.size() > 0) {
    for (    @SuppressWarnings(""String_Node_Str"") RpcCallbackListener listener : _callbackListeners)     listener.onFailure(e);
  }
 else {
    if (_callbackDispatcher != null)     _callbackDispatcher.dispatch(this);
  }
}","public void complete(RpcException e){
synchronized (_responseLock) {
    _responseResult=e;
    _responseDone=true;
    _responseLock.notifyAll();
  }
  if (_callbackListeners.size() > 0) {
    for (    @SuppressWarnings(""String_Node_Str"") RpcCallbackListener listener : _callbackListeners)     listener.onFailure(e);
  }
 else {
    if (_callbackDispatcher != null)     _callbackDispatcher.dispatch(this);
  }
}",0.9221411192214112
105586,"public static ConsoleProxyClientStatsCollector getStatsCollector(){
  return new ConsoleProxyClientStatsCollector(connectionMap);
}","public static ConsoleProxyClientStatsCollector getStatsCollector(){
synchronized (connectionMap) {
    return new ConsoleProxyClientStatsCollector(connectionMap);
  }
}",0.8762541806020067
105587,"protected boolean getHostInfo(Connection conn) throws IllegalArgumentException {
  try {
    Host myself=Host.getByUuid(conn,_host.uuid);
    Set<HostCpu> hcs=null;
    for (int i=0; i < 10; i++) {
      hcs=myself.getHostCPUs(conn);
      _host.cpus=hcs.size();
      if (_host.cpus > 0) {
        break;
      }
      Thread.sleep(5000);
    }
    if (_host.cpus <= 0) {
      throw new CloudRuntimeException(""String_Node_Str"" + _host.ip);
    }
    Map<String,String> cpuInfo=myself.getCpuInfo(conn);
    if (cpuInfo.get(""String_Node_Str"") != null) {
      _host.cpuSockets=Integer.parseInt(cpuInfo.get(""String_Node_Str""));
    }
    for (    final HostCpu hc : hcs) {
      _host.speed=hc.getSpeed(conn).intValue();
      break;
    }
    Host.Record hr=myself.getRecord(conn);
    _host.productVersion=hr.softwareVersion.get(""String_Node_Str"");
    if (_host.productVersion == null) {
      _host.productVersion=hr.softwareVersion.get(""String_Node_Str"");
    }
 else {
      _host.productVersion=_host.productVersion.trim();
    }
    XsLocalNetwork privateNic=getManagementNetwork(conn);
    _privateNetworkName=privateNic.getNetworkRecord(conn).nameLabel;
    _host.privatePif=privateNic.getPifRecord(conn).uuid;
    _host.privateNetwork=privateNic.getNetworkRecord(conn).uuid;
    _host.systemvmisouuid=null;
    XsLocalNetwork guestNic=null;
    if (_guestNetworkName != null && !_guestNetworkName.equals(_privateNetworkName)) {
      guestNic=getNetworkByName(conn,_guestNetworkName);
      if (guestNic == null) {
        s_logger.warn(""String_Node_Str"" + _guestNetworkName);
        throw new IllegalArgumentException(""String_Node_Str"" + _guestNetworkName + ""String_Node_Str""+ _host.ip);
      }
    }
 else {
      guestNic=privateNic;
      _guestNetworkName=_privateNetworkName;
    }
    _host.guestNetwork=guestNic.getNetworkRecord(conn).uuid;
    _host.guestPif=guestNic.getPifRecord(conn).uuid;
    XsLocalNetwork publicNic=null;
    if (_publicNetworkName != null && !_publicNetworkName.equals(_guestNetworkName)) {
      publicNic=getNetworkByName(conn,_publicNetworkName);
      if (publicNic == null) {
        s_logger.warn(""String_Node_Str"" + _publicNetworkName + ""String_Node_Str""+ _host.ip);
        throw new IllegalArgumentException(""String_Node_Str"" + _publicNetworkName + ""String_Node_Str""+ _host.ip);
      }
    }
 else {
      publicNic=guestNic;
      _publicNetworkName=_guestNetworkName;
    }
    _host.publicPif=publicNic.getPifRecord(conn).uuid;
    _host.publicNetwork=publicNic.getNetworkRecord(conn).uuid;
    if (_storageNetworkName1 == null) {
      _storageNetworkName1=_guestNetworkName;
    }
    XsLocalNetwork storageNic1=null;
    storageNic1=getNetworkByName(conn,_storageNetworkName1);
    if (storageNic1 == null) {
      s_logger.warn(""String_Node_Str"" + _storageNetworkName1 + ""String_Node_Str""+ _host.ip);
      throw new IllegalArgumentException(""String_Node_Str"" + _storageNetworkName1 + ""String_Node_Str""+ _host.ip);
    }
 else {
      _host.storageNetwork1=storageNic1.getNetworkRecord(conn).uuid;
      _host.storagePif1=storageNic1.getPifRecord(conn).uuid;
    }
    XsLocalNetwork storageNic2=null;
    if (_storageNetworkName2 != null) {
      storageNic2=getNetworkByName(conn,_storageNetworkName2);
      _host.storageNetwork2=storageNic2.getNetworkRecord(conn).uuid;
      _host.storagePif2=storageNic2.getPifRecord(conn).uuid;
    }
    s_logger.info(""String_Node_Str"" + _privateNetworkName + ""String_Node_Str""+ _host.ip);
    s_logger.info(""String_Node_Str"" + _guestNetworkName + ""String_Node_Str""+ _host.ip);
    s_logger.info(""String_Node_Str"" + _publicNetworkName + ""String_Node_Str""+ _host.ip);
    return true;
  }
 catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"" + _host.ip,e);
    return false;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + _host.ip,e);
    return false;
  }
}","protected boolean getHostInfo(Connection conn) throws IllegalArgumentException {
  try {
    Host myself=Host.getByUuid(conn,_host.uuid);
    Set<HostCpu> hcs=null;
    for (int i=0; i < 10; i++) {
      hcs=myself.getHostCPUs(conn);
      if (hcs != null) {
        _host.cpus=hcs.size();
        if (_host.cpus > 0) {
          break;
        }
      }
      Thread.sleep(5000);
    }
    if (_host.cpus <= 0) {
      throw new CloudRuntimeException(""String_Node_Str"" + _host.ip);
    }
    Map<String,String> cpuInfo=myself.getCpuInfo(conn);
    if (cpuInfo.get(""String_Node_Str"") != null) {
      _host.cpuSockets=Integer.parseInt(cpuInfo.get(""String_Node_Str""));
    }
    for (    final HostCpu hc : hcs) {
      _host.speed=hc.getSpeed(conn).intValue();
      break;
    }
    Host.Record hr=myself.getRecord(conn);
    _host.productVersion=hr.softwareVersion.get(""String_Node_Str"");
    if (_host.productVersion == null) {
      _host.productVersion=hr.softwareVersion.get(""String_Node_Str"");
    }
 else {
      _host.productVersion=_host.productVersion.trim();
    }
    XsLocalNetwork privateNic=getManagementNetwork(conn);
    _privateNetworkName=privateNic.getNetworkRecord(conn).nameLabel;
    _host.privatePif=privateNic.getPifRecord(conn).uuid;
    _host.privateNetwork=privateNic.getNetworkRecord(conn).uuid;
    _host.systemvmisouuid=null;
    XsLocalNetwork guestNic=null;
    if (_guestNetworkName != null && !_guestNetworkName.equals(_privateNetworkName)) {
      guestNic=getNetworkByName(conn,_guestNetworkName);
      if (guestNic == null) {
        s_logger.warn(""String_Node_Str"" + _guestNetworkName);
        throw new IllegalArgumentException(""String_Node_Str"" + _guestNetworkName + ""String_Node_Str""+ _host.ip);
      }
    }
 else {
      guestNic=privateNic;
      _guestNetworkName=_privateNetworkName;
    }
    _host.guestNetwork=guestNic.getNetworkRecord(conn).uuid;
    _host.guestPif=guestNic.getPifRecord(conn).uuid;
    XsLocalNetwork publicNic=null;
    if (_publicNetworkName != null && !_publicNetworkName.equals(_guestNetworkName)) {
      publicNic=getNetworkByName(conn,_publicNetworkName);
      if (publicNic == null) {
        s_logger.warn(""String_Node_Str"" + _publicNetworkName + ""String_Node_Str""+ _host.ip);
        throw new IllegalArgumentException(""String_Node_Str"" + _publicNetworkName + ""String_Node_Str""+ _host.ip);
      }
    }
 else {
      publicNic=guestNic;
      _publicNetworkName=_guestNetworkName;
    }
    _host.publicPif=publicNic.getPifRecord(conn).uuid;
    _host.publicNetwork=publicNic.getNetworkRecord(conn).uuid;
    if (_storageNetworkName1 == null) {
      _storageNetworkName1=_guestNetworkName;
    }
    XsLocalNetwork storageNic1=null;
    storageNic1=getNetworkByName(conn,_storageNetworkName1);
    if (storageNic1 == null) {
      s_logger.warn(""String_Node_Str"" + _storageNetworkName1 + ""String_Node_Str""+ _host.ip);
      throw new IllegalArgumentException(""String_Node_Str"" + _storageNetworkName1 + ""String_Node_Str""+ _host.ip);
    }
 else {
      _host.storageNetwork1=storageNic1.getNetworkRecord(conn).uuid;
      _host.storagePif1=storageNic1.getPifRecord(conn).uuid;
    }
    XsLocalNetwork storageNic2=null;
    if (_storageNetworkName2 != null) {
      storageNic2=getNetworkByName(conn,_storageNetworkName2);
      if (storageNic2 != null) {
        _host.storagePif2=storageNic2.getPifRecord(conn).uuid;
      }
    }
    s_logger.info(""String_Node_Str"" + _privateNetworkName + ""String_Node_Str""+ _host.ip);
    s_logger.info(""String_Node_Str"" + _guestNetworkName + ""String_Node_Str""+ _host.ip);
    s_logger.info(""String_Node_Str"" + _publicNetworkName + ""String_Node_Str""+ _host.ip);
    return true;
  }
 catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"" + _host.ip,e);
    return false;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + _host.ip,e);
    return false;
  }
}",0.9734649403922574
105588,"private long getVMSnapshotChainSize(Connection conn,VolumeObjectTO volumeTo,String vmName) throws BadServerResponse, XenAPIException, XmlRpcException {
  Set<VDI> allvolumeVDIs=VDI.getByNameLabel(conn,volumeTo.getName());
  long size=0;
  for (  VDI vdi : allvolumeVDIs) {
    try {
      if (vdi.getIsASnapshot(conn) && vdi.getSmConfig(conn).get(""String_Node_Str"") != null) {
        String parentUuid=vdi.getSmConfig(conn).get(""String_Node_Str"");
        VDI parentVDI=VDI.getByUuid(conn,parentUuid);
        size=size + vdi.getPhysicalUtilisation(conn);
        if (parentVDI != null)         size=size + parentVDI.getPhysicalUtilisation(conn).longValue();
      }
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
      continue;
    }
  }
  if (volumeTo.getVolumeType() == Volume.Type.ROOT) {
    Map<VM,VM.Record> allVMs=VM.getAllRecords(conn);
    if (allVMs.size() > 0) {
      for (      VM vmr : allVMs.keySet()) {
        try {
          String vName=vmr.getNameLabel(conn);
          if (vName != null && vName.contains(vmName) && vmr.getIsASnapshot(conn)) {
            VDI memoryVDI=vmr.getSuspendVDI(conn);
            size=size + memoryVDI.getParent(conn).getPhysicalUtilisation(conn);
            size=size + memoryVDI.getPhysicalUtilisation(conn);
          }
        }
 catch (        Exception e) {
          s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
          continue;
        }
      }
    }
  }
  return size;
}","private long getVMSnapshotChainSize(Connection conn,VolumeObjectTO volumeTo,String vmName) throws BadServerResponse, XenAPIException, XmlRpcException {
  Set<VDI> allvolumeVDIs=VDI.getByNameLabel(conn,volumeTo.getName());
  long size=0;
  for (  VDI vdi : allvolumeVDIs) {
    try {
      if (vdi.getIsASnapshot(conn) && vdi.getSmConfig(conn).get(""String_Node_Str"") != null) {
        String parentUuid=vdi.getSmConfig(conn).get(""String_Node_Str"");
        VDI parentVDI=VDI.getByUuid(conn,parentUuid);
        size=size + vdi.getPhysicalUtilisation(conn);
        if (parentVDI != null)         size=size + parentVDI.getPhysicalUtilisation(conn).longValue();
      }
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
      continue;
    }
  }
  if (volumeTo.getVolumeType() == Volume.Type.ROOT) {
    Map<VM,VM.Record> allVMs=VM.getAllRecords(conn);
    if (allVMs != null && allVMs.size() > 0) {
      for (      VM vmr : allVMs.keySet()) {
        try {
          String vName=vmr.getNameLabel(conn);
          if (vName != null && vName.contains(vmName) && vmr.getIsASnapshot(conn)) {
            VDI memoryVDI=vmr.getSuspendVDI(conn);
            size=size + memoryVDI.getParent(conn).getPhysicalUtilisation(conn);
            size=size + memoryVDI.getPhysicalUtilisation(conn);
          }
        }
 catch (        Exception e) {
          s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + e.getMessage());
          continue;
        }
      }
    }
  }
  return size;
}",0.9941368078175896
105589,"protected HashMap<String,String> clusterVMMetaDataSync(Connection conn){
  final HashMap<String,String> vmMetaDatum=new HashMap<String,String>();
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      vmMetaDatum.put(record.nameLabel,StringUtils.mapToString(record.platform));
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vmMetaDatum;
}","protected HashMap<String,String> clusterVMMetaDataSync(Connection conn){
  final HashMap<String,String> vmMetaDatum=new HashMap<String,String>();
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    if (vm_map != null) {
      for (      VM.Record record : vm_map.values()) {
        if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
          continue;
        }
        vmMetaDatum.put(record.nameLabel,StringUtils.mapToString(record.platform));
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vmMetaDatum;
}",0.9606413994169096
105590,"/** 
 * enableVlanNetwork creates a Network object, Vlan object, and thereby a tagged PIF object in Xapi. In XenServer, VLAN is added by - Create a network, which is unique cluster wide. - Find the PIF that you want to create the VLAN on. - Create a VLAN using the network and the PIF.  As a result of this operation, a tagged PIF object is also created. Here is a list of problems with clustered Xapi implementation that we are trying to circumvent. - There can be multiple Networks with the same name-label so searching using name-label is not unique. - There are no other ways to search for Networks other than listing all of them which is not efficient in our implementation because we can have over 4000 VLAN networks. - In a clustered situation, it's possible for both hosts to detect that the Network is missing and both creates it.  This causes a lot of problems as one host may be using one Network and another may be using a different network for their VMs.  This causes problems in migration because the VMs are logically attached to different networks in Xapi's database but in reality, they are attached to the same network. To work around these problems, we do the following. - When creating the VLAN network, we name it as VLAN-UUID of the Network it is created on-VLAN Tag.  Because VLAN tags is unique with one particular network, this is a unique name-label to quickly retrieve the the VLAN network with when we need it again. - When we create the VLAN network, we add a timestamp and a random number as a tag into the network.  Then instead of creating VLAN on that network, we actually retrieve the Network again and this time uses the VLAN network with lowest timestamp or lowest random number as the VLAN network.  This allows VLAN creation to happen on multiple hosts concurrently but even if two VLAN networks were created with the same name, only one of them is used. One cavaet about this approach is that it relies on the timestamp to be relatively accurate among different hosts.
 * @param conn Xapi Connection
 * @param tag VLAN tag
 * @param network network on this host to create the VLAN on.
 * @return VLAN Network created.
 * @throws XenAPIException
 * @throws XmlRpcException
 */
protected Network enableVlanNetwork(Connection conn,long tag,XsLocalNetwork network) throws XenAPIException, XmlRpcException {
  Network vlanNetwork=null;
  String oldName=""String_Node_Str"" + Long.toString(tag);
  String newName=""String_Node_Str"" + network.getNetworkRecord(conn).uuid + ""String_Node_Str""+ tag;
  XsLocalNetwork vlanNic=getNetworkByName(conn,newName);
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldName);
    }
    vlanNic=getNetworkByName(conn,oldName);
    if (vlanNic != null) {
      s_logger.info(""String_Node_Str"" + oldName + ""String_Node_Str""+ newName);
      vlanNic.getNetwork().setNameLabel(conn,newName);
    }
  }
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip);
    }
    Network.Record nwr=new Network.Record();
    nwr.nameLabel=newName;
    nwr.tags=new HashSet<String>();
    nwr.tags.add(generateTimeStamp());
    vlanNetwork=Network.create(conn,nwr);
    vlanNic=getNetworkByName(conn,newName);
  }
  PIF nPif=network.getPif(conn);
  PIF.Record nPifr=network.getPifRecord(conn);
  vlanNetwork=vlanNic.getNetwork();
  if (vlanNic.getPif(conn) != null) {
    return vlanNetwork;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip+ ""String_Node_Str""+ nPifr.device);
  }
  VLAN vlan=VLAN.create(conn,nPif,tag,vlanNetwork);
  VLAN.Record vlanr=vlan.getRecord(conn);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ vlanr.uuid);
  }
  return vlanNetwork;
}","/** 
 * enableVlanNetwork creates a Network object, Vlan object, and thereby a tagged PIF object in Xapi. In XenServer, VLAN is added by - Create a network, which is unique cluster wide. - Find the PIF that you want to create the VLAN on. - Create a VLAN using the network and the PIF.  As a result of this operation, a tagged PIF object is also created. Here is a list of problems with clustered Xapi implementation that we are trying to circumvent. - There can be multiple Networks with the same name-label so searching using name-label is not unique. - There are no other ways to search for Networks other than listing all of them which is not efficient in our implementation because we can have over 4000 VLAN networks. - In a clustered situation, it's possible for both hosts to detect that the Network is missing and both creates it.  This causes a lot of problems as one host may be using one Network and another may be using a different network for their VMs.  This causes problems in migration because the VMs are logically attached to different networks in Xapi's database but in reality, they are attached to the same network. To work around these problems, we do the following. - When creating the VLAN network, we name it as VLAN-UUID of the Network it is created on-VLAN Tag.  Because VLAN tags is unique with one particular network, this is a unique name-label to quickly retrieve the the VLAN network with when we need it again. - When we create the VLAN network, we add a timestamp and a random number as a tag into the network.  Then instead of creating VLAN on that network, we actually retrieve the Network again and this time uses the VLAN network with lowest timestamp or lowest random number as the VLAN network.  This allows VLAN creation to happen on multiple hosts concurrently but even if two VLAN networks were created with the same name, only one of them is used. One cavaet about this approach is that it relies on the timestamp to be relatively accurate among different hosts.
 * @param conn Xapi Connection
 * @param tag VLAN tag
 * @param network network on this host to create the VLAN on.
 * @return VLAN Network created.
 * @throws XenAPIException
 * @throws XmlRpcException
 */
protected Network enableVlanNetwork(Connection conn,long tag,XsLocalNetwork network) throws XenAPIException, XmlRpcException {
  Network vlanNetwork=null;
  String oldName=""String_Node_Str"" + Long.toString(tag);
  String newName=""String_Node_Str"" + network.getNetworkRecord(conn).uuid + ""String_Node_Str""+ tag;
  XsLocalNetwork vlanNic=getNetworkByName(conn,newName);
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldName);
    }
    vlanNic=getNetworkByName(conn,oldName);
    if (vlanNic != null) {
      s_logger.info(""String_Node_Str"" + oldName + ""String_Node_Str""+ newName);
      vlanNic.getNetwork().setNameLabel(conn,newName);
    }
  }
  if (vlanNic == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip);
    }
    Network.Record nwr=new Network.Record();
    nwr.nameLabel=newName;
    nwr.tags=new HashSet<String>();
    nwr.tags.add(generateTimeStamp());
    vlanNetwork=Network.create(conn,nwr);
    vlanNic=getNetworkByName(conn,newName);
    if (vlanNic == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + newName);
    }
  }
  PIF nPif=network.getPif(conn);
  PIF.Record nPifr=network.getPifRecord(conn);
  vlanNetwork=vlanNic.getNetwork();
  if (vlanNic.getPif(conn) != null) {
    return vlanNetwork;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ _host.ip+ ""String_Node_Str""+ nPifr.device);
  }
  VLAN vlan=VLAN.create(conn,nPif,tag,vlanNetwork);
  VLAN.Record vlanr=vlan.getRecord(conn);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + tag + ""String_Node_Str""+ vlanr.uuid);
  }
  return vlanNetwork;
}",0.9870893519110316
105591,"protected ExecutionResult prepareNetworkElementCommand(SetNetworkACLCommand cmd){
  Connection conn=getConnection();
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  try {
    VM router=getVM(conn,routerName);
    NicTO nic=cmd.getNic();
    VIF vif=getVifByMac(conn,router,nic.getMac());
    nic.setDeviceId(Integer.valueOf(vif.getDevice(conn)));
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.error(msg,e);
    return new ExecutionResult(false,msg);
  }
  return new ExecutionResult(true,null);
}","protected ExecutionResult prepareNetworkElementCommand(SetNetworkACLCommand cmd){
  Connection conn=getConnection();
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  try {
    VM router=getVM(conn,routerName);
    NicTO nic=cmd.getNic();
    if (nic != null) {
      VIF vif=getVifByMac(conn,router,nic.getMac());
      if (vif == null) {
        String msg=""String_Node_Str"" + nic.getMac() + ""String_Node_Str""+ routerName;
        s_logger.error(msg);
        return new ExecutionResult(false,msg);
      }
      nic.setDeviceId(Integer.valueOf(vif.getDevice(conn)));
    }
 else {
      String msg=""String_Node_Str"" + routerName;
      s_logger.error(msg);
      return new ExecutionResult(false,msg);
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.error(msg,e);
    return new ExecutionResult(false,msg);
  }
  return new ExecutionResult(true,null);
}",0.5611702127659575
105592,"protected SR getLocalLVMSR(Connection conn){
  try {
    Map<SR,SR.Record> map=SR.getAllRecords(conn);
    for (    Map.Entry<SR,SR.Record> entry : map.entrySet()) {
      SR.Record srRec=entry.getValue();
      if (SRType.LVM.equals(srRec.type)) {
        Set<PBD> pbds=srRec.PBDs;
        if (pbds == null) {
          continue;
        }
        for (        PBD pbd : pbds) {
          Host host=pbd.getHost(conn);
          if (!isRefNull(host) && host.getUuid(conn).equals(_host.uuid)) {
            if (!pbd.getCurrentlyAttached(conn)) {
              pbd.plug(conn);
            }
            SR sr=entry.getKey();
            sr.scan(conn);
            return sr;
          }
        }
      }
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.toString();
    s_logger.warn(msg);
  }
catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.getCause();
    s_logger.warn(msg);
  }
  return null;
}","protected SR getLocalLVMSR(Connection conn){
  try {
    Map<SR,SR.Record> map=SR.getAllRecords(conn);
    if (map != null && !map.isEmpty()) {
      for (      Map.Entry<SR,SR.Record> entry : map.entrySet()) {
        SR.Record srRec=entry.getValue();
        if (SRType.LVM.equals(srRec.type)) {
          Set<PBD> pbds=srRec.PBDs;
          if (pbds == null) {
            continue;
          }
          for (          PBD pbd : pbds) {
            Host host=pbd.getHost(conn);
            if (!isRefNull(host) && host.getUuid(conn).equals(_host.uuid)) {
              if (!pbd.getCurrentlyAttached(conn)) {
                pbd.plug(conn);
              }
              SR sr=entry.getKey();
              sr.scan(conn);
              return sr;
            }
          }
        }
      }
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.toString();
    s_logger.warn(msg);
  }
catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.getCause();
    s_logger.warn(msg);
  }
  return null;
}",0.9049729197439684
105593,"protected SR getIscsiSR(Connection conn,String srNameLabel,String target,String path,String chapInitiatorUsername,String chapInitiatorPassword,boolean ignoreIntroduceException){
synchronized (srNameLabel.intern()) {
    Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      if (path.endsWith(""String_Node_Str"")) {
        path=path.substring(0,path.length() - 1);
      }
      String tmp[]=path.split(""String_Node_Str"");
      if (tmp.length != 3) {
        String msg=""String_Node_Str"" + path + ""String_Node_Str"";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      String targetiqn=tmp[1].trim();
      String lunid=tmp[2].trim();
      String scsiid=""String_Node_Str"";
      Set<SR> srs=SR.getByNameLabel(conn,srNameLabel);
      for (      SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (target.equals(dc.get(""String_Node_Str"")) && targetiqn.equals(dc.get(""String_Node_Str"")) && lunid.equals(dc.get(""String_Node_Str""))) {
          throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ srNameLabel+ ""String_Node_Str""+ _host.uuid);
        }
      }
      deviceConfig.put(""String_Node_Str"",target);
      deviceConfig.put(""String_Node_Str"",targetiqn);
      if (StringUtils.isNotBlank(chapInitiatorUsername) && StringUtils.isNotBlank(chapInitiatorPassword)) {
        deviceConfig.put(""String_Node_Str"",chapInitiatorUsername);
        deviceConfig.put(""String_Node_Str"",chapInitiatorPassword);
      }
      Host host=Host.getByUuid(conn,_host.uuid);
      Map<String,String> smConfig=new HashMap<String,String>();
      String type=SRType.LVMOISCSI.toString();
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),srNameLabel,srNameLabel,type,""String_Node_Str"",true,smConfig);
      }
 catch (      XenAPIException e) {
        String errmsg=e.toString();
        if (errmsg.contains(""String_Node_Str"")) {
          String lun[]=errmsg.split(""String_Node_Str"");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            int blunindex=lun[i].indexOf(""String_Node_Str"") + 7;
            int elunindex=lun[i].indexOf(""String_Node_Str"");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              int bscsiindex=lun[i].indexOf(""String_Node_Str"") + 8;
              int escsiindex=lun[i].indexOf(""String_Node_Str"");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            String msg=""String_Node_Str"" + lunid + ""String_Node_Str""+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put(""String_Node_Str"",scsiid);
      String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf(""String_Node_Str"") != -1) {
        pooluuid=result.substring(result.indexOf(""String_Node_Str"") + 6,result.indexOf(""String_Node_Str"")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),srNameLabel,srNameLabel,type,""String_Node_Str"",true,smConfig);
      }
 else {
        try {
          sr=SR.introduce(conn,pooluuid,srNameLabel,srNameLabel,type,""String_Node_Str"",true,smConfig);
        }
 catch (        XenAPIException ex) {
          if (ignoreIntroduceException) {
            return sr;
          }
          throw ex;
        }
        Set<Host> setHosts=Host.getAll(conn);
        for (        Host currentHost : setHosts) {
          PBD.Record rec=new PBD.Record();
          rec.deviceConfig=deviceConfig;
          rec.host=currentHost;
          rec.SR=sr;
          PBD pbd=PBD.create(conn,rec);
          pbd.plug(conn);
        }
      }
      sr.scan(conn);
      return sr;
    }
 catch (    XenAPIException e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    Exception e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}","protected SR getIscsiSR(Connection conn,String srNameLabel,String target,String path,String chapInitiatorUsername,String chapInitiatorPassword,boolean ignoreIntroduceException){
synchronized (srNameLabel.intern()) {
    Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      if (path.endsWith(""String_Node_Str"")) {
        path=path.substring(0,path.length() - 1);
      }
      String tmp[]=path.split(""String_Node_Str"");
      if (tmp.length != 3) {
        String msg=""String_Node_Str"" + path + ""String_Node_Str"";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      String targetiqn=tmp[1].trim();
      String lunid=tmp[2].trim();
      String scsiid=""String_Node_Str"";
      Set<SR> srs=SR.getByNameLabel(conn,srNameLabel);
      for (      SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (target.equals(dc.get(""String_Node_Str"")) && targetiqn.equals(dc.get(""String_Node_Str"")) && lunid.equals(dc.get(""String_Node_Str""))) {
          throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ srNameLabel+ ""String_Node_Str""+ _host.uuid);
        }
      }
      deviceConfig.put(""String_Node_Str"",target);
      deviceConfig.put(""String_Node_Str"",targetiqn);
      if (StringUtils.isNotBlank(chapInitiatorUsername) && StringUtils.isNotBlank(chapInitiatorPassword)) {
        deviceConfig.put(""String_Node_Str"",chapInitiatorUsername);
        deviceConfig.put(""String_Node_Str"",chapInitiatorPassword);
      }
      Host host=Host.getByUuid(conn,_host.uuid);
      Map<String,String> smConfig=new HashMap<String,String>();
      String type=SRType.LVMOISCSI.toString();
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),srNameLabel,srNameLabel,type,""String_Node_Str"",true,smConfig);
      }
 catch (      XenAPIException e) {
        String errmsg=e.toString();
        if (errmsg.contains(""String_Node_Str"")) {
          String lun[]=errmsg.split(""String_Node_Str"");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            int blunindex=lun[i].indexOf(""String_Node_Str"") + 7;
            int elunindex=lun[i].indexOf(""String_Node_Str"");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              int bscsiindex=lun[i].indexOf(""String_Node_Str"") + 8;
              int escsiindex=lun[i].indexOf(""String_Node_Str"");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            String msg=""String_Node_Str"" + lunid + ""String_Node_Str""+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put(""String_Node_Str"",scsiid);
      String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf(""String_Node_Str"") != -1) {
        pooluuid=result.substring(result.indexOf(""String_Node_Str"") + 6,result.indexOf(""String_Node_Str"")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),srNameLabel,srNameLabel,type,""String_Node_Str"",true,smConfig);
      }
 else {
        try {
          sr=SR.introduce(conn,pooluuid,srNameLabel,srNameLabel,type,""String_Node_Str"",true,smConfig);
        }
 catch (        XenAPIException ex) {
          if (ignoreIntroduceException) {
            return sr;
          }
          throw ex;
        }
        Set<Host> setHosts=Host.getAll(conn);
        if (setHosts == null) {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str"";
          s_logger.warn(msg);
          throw new CloudRuntimeException(msg);
        }
        for (        Host currentHost : setHosts) {
          PBD.Record rec=new PBD.Record();
          rec.deviceConfig=deviceConfig;
          rec.host=currentHost;
          rec.SR=sr;
          PBD pbd=PBD.create(conn,rec);
          pbd.plug(conn);
        }
      }
      sr.scan(conn);
      return sr;
    }
 catch (    XenAPIException e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    Exception e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}",0.9817364428210172
105594,"protected boolean cleanupHaltedVms(Connection conn) throws XenAPIException, XmlRpcException {
  Host host=Host.getByUuid(conn,_host.uuid);
  Map<VM,VM.Record> vms=VM.getAllRecords(conn);
  boolean success=true;
  for (  Map.Entry<VM,VM.Record> entry : vms.entrySet()) {
    VM vm=entry.getKey();
    VM.Record vmRec=entry.getValue();
    if (vmRec.isATemplate || vmRec.isControlDomain) {
      continue;
    }
    if (VmPowerState.HALTED.equals(vmRec.powerState) && vmRec.affinity.equals(host) && !isAlienVm(vm,conn)) {
      try {
        vm.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ vmRec.nameLabel+ ""String_Node_Str"",e);
        success=false;
      }
    }
  }
  return success;
}","protected boolean cleanupHaltedVms(Connection conn) throws XenAPIException, XmlRpcException {
  Host host=Host.getByUuid(conn,_host.uuid);
  Map<VM,VM.Record> vms=VM.getAllRecords(conn);
  boolean success=true;
  if (vms != null && !vms.isEmpty()) {
    for (    Map.Entry<VM,VM.Record> entry : vms.entrySet()) {
      VM vm=entry.getKey();
      VM.Record vmRec=entry.getValue();
      if (vmRec.isATemplate || vmRec.isControlDomain) {
        continue;
      }
      if (VmPowerState.HALTED.equals(vmRec.powerState) && vmRec.affinity.equals(host) && !isAlienVm(vm,conn)) {
        try {
          vm.destroy(conn);
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ vmRec.nameLabel+ ""String_Node_Str"",e);
          success=false;
        }
      }
    }
  }
  return success;
}",0.8943188759926696
105595,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  try {
    _dcId=Long.parseLong((String)params.get(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(""String_Node_Str"" + params.get(""String_Node_Str""));
  }
  _host.uuid=(String)params.get(""String_Node_Str"");
  _name=_host.uuid;
  _host.ip=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password.add((String)params.get(""String_Node_Str""));
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _privateNetworkName=(String)params.get(""String_Node_Str"");
  _publicNetworkName=(String)params.get(""String_Node_Str"");
  _guestNetworkName=(String)params.get(""String_Node_Str"");
  _instance=(String)params.get(""String_Node_Str"");
  _securityGroupEnabled=Boolean.parseBoolean((String)params.get(""String_Node_Str""));
  _linkLocalPrivateNetworkName=(String)params.get(""String_Node_Str"");
  if (_linkLocalPrivateNetworkName == null) {
    _linkLocalPrivateNetworkName=""String_Node_Str"";
  }
  _storageNetworkName1=(String)params.get(""String_Node_Str"");
  _storageNetworkName2=(String)params.get(""String_Node_Str"");
  _heartbeatInterval=NumbersUtil.parseInt((String)params.get(""String_Node_Str""),60);
  String value=(String)params.get(""String_Node_Str"");
  _wait=NumbersUtil.parseInt(value,600);
  value=(String)params.get(""String_Node_Str"");
  _migratewait=NumbersUtil.parseInt(value,3600);
  _maxNics=NumbersUtil.parseInt((String)params.get(""String_Node_Str""),7);
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_username == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_password == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  CheckXenHostInfo();
  storageHandler=getStorageHandler();
  _vrResource=new VirtualRoutingResource(this);
  if (!_vrResource.configure(name,params)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  try {
    _dcId=Long.parseLong((String)params.get(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(""String_Node_Str"" + params.get(""String_Node_Str""));
  }
  _host.uuid=(String)params.get(""String_Node_Str"");
  _name=_host.uuid;
  _host.ip=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password.add((String)params.get(""String_Node_Str""));
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _privateNetworkName=(String)params.get(""String_Node_Str"");
  _publicNetworkName=(String)params.get(""String_Node_Str"");
  _guestNetworkName=(String)params.get(""String_Node_Str"");
  _instance=(String)params.get(""String_Node_Str"");
  _securityGroupEnabled=Boolean.parseBoolean((String)params.get(""String_Node_Str""));
  _linkLocalPrivateNetworkName=(String)params.get(""String_Node_Str"");
  if (_linkLocalPrivateNetworkName == null) {
    _linkLocalPrivateNetworkName=""String_Node_Str"";
  }
  _storageNetworkName1=(String)params.get(""String_Node_Str"");
  _storageNetworkName2=(String)params.get(""String_Node_Str"");
  _heartbeatInterval=NumbersUtil.parseInt((String)params.get(""String_Node_Str""),60);
  String value=(String)params.get(""String_Node_Str"");
  _wait=NumbersUtil.parseInt(value,600);
  value=(String)params.get(""String_Node_Str"");
  _migratewait=NumbersUtil.parseInt(value,3600);
  _maxNics=NumbersUtil.parseInt((String)params.get(""String_Node_Str""),7);
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_username == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_password.peek() == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  CheckXenHostInfo();
  storageHandler=getStorageHandler();
  _vrResource=new VirtualRoutingResource(this);
  if (!_vrResource.configure(name,params)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  return true;
}",0.9984665936473164
105596,"protected SR getLocalEXTSR(Connection conn){
  try {
    Map<SR,SR.Record> map=SR.getAllRecords(conn);
    for (    Map.Entry<SR,SR.Record> entry : map.entrySet()) {
      SR.Record srRec=entry.getValue();
      if (SRType.FILE.equals(srRec.type) || SRType.EXT.equals(srRec.type)) {
        Set<PBD> pbds=srRec.PBDs;
        if (pbds == null) {
          continue;
        }
        for (        PBD pbd : pbds) {
          Host host=pbd.getHost(conn);
          if (!isRefNull(host) && host.getUuid(conn).equals(_host.uuid)) {
            if (!pbd.getCurrentlyAttached(conn)) {
              pbd.plug(conn);
            }
            SR sr=entry.getKey();
            sr.scan(conn);
            return sr;
          }
        }
      }
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.toString();
    s_logger.warn(msg);
  }
catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.getCause();
    s_logger.warn(msg);
  }
  return null;
}","protected SR getLocalEXTSR(Connection conn){
  try {
    Map<SR,SR.Record> map=SR.getAllRecords(conn);
    if (map != null && !map.isEmpty()) {
      for (      Map.Entry<SR,SR.Record> entry : map.entrySet()) {
        SR.Record srRec=entry.getValue();
        if (SRType.FILE.equals(srRec.type) || SRType.EXT.equals(srRec.type)) {
          Set<PBD> pbds=srRec.PBDs;
          if (pbds == null) {
            continue;
          }
          for (          PBD pbd : pbds) {
            Host host=pbd.getHost(conn);
            if (!isRefNull(host) && host.getUuid(conn).equals(_host.uuid)) {
              if (!pbd.getCurrentlyAttached(conn)) {
                pbd.plug(conn);
              }
              SR sr=entry.getKey();
              sr.scan(conn);
              return sr;
            }
          }
        }
      }
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.toString();
    s_logger.warn(msg);
  }
catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + _host.uuid + e.getCause();
    s_logger.warn(msg);
  }
  return null;
}",0.9080514530728918
105597,"private Hashtable<String,String> getEnvironment(final String principal,final String password,final String providerUrl,final boolean isSystemContext){
  final String factory=_ldapConfiguration.getFactory();
  final String url=providerUrl == null ? _ldapConfiguration.getProviderUrl() : providerUrl;
  final Hashtable<String,String> environment=new Hashtable<String,String>();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,factory);
  environment.put(Context.PROVIDER_URL,url);
  environment.put(""String_Node_Str"",""String_Node_Str"");
  environment.put(""String_Node_Str"",""String_Node_Str"");
  enableSSL(environment);
  setAuthentication(environment,isSystemContext);
  if (principal != null) {
    environment.put(Context.SECURITY_PRINCIPAL,principal);
  }
  if (password != null) {
    environment.put(Context.SECURITY_CREDENTIALS,password);
  }
  return environment;
}","private Hashtable<String,String> getEnvironment(final String principal,final String password,final String providerUrl,final boolean isSystemContext){
  final String factory=_ldapConfiguration.getFactory();
  final String url=providerUrl == null ? _ldapConfiguration.getProviderUrl() : providerUrl;
  final Hashtable<String,String> environment=new Hashtable<String,String>();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,factory);
  environment.put(Context.PROVIDER_URL,url);
  environment.put(""String_Node_Str"",_ldapConfiguration.getReadTimeout().toString());
  environment.put(""String_Node_Str"",""String_Node_Str"");
  enableSSL(environment);
  setAuthentication(environment,isSystemContext);
  if (principal != null) {
    environment.put(Context.SECURITY_PRINCIPAL,principal);
  }
  if (password != null) {
    environment.put(Context.SECURITY_CREDENTIALS,password);
  }
  return environment;
}",0.9644268774703556
105598,"@Override public int registerForInitialConnects(final StartupCommandProcessor creator,boolean priority){
synchronized (_hostMonitors) {
    _monitorId++;
    if (priority) {
      _creationMonitors.add(0,new Pair<Integer,StartupCommandProcessor>(_monitorId,creator));
    }
 else {
      _creationMonitors.add(new Pair<Integer,StartupCommandProcessor>(_monitorId,creator));
    }
  }
  return _monitorId;
}","@Override public int registerForInitialConnects(final StartupCommandProcessor creator,boolean priority){
synchronized (_hostMonitors) {
    _monitorId++;
    if (priority) {
      _creationMonitors.add(0,new Pair<Integer,StartupCommandProcessor>(_monitorId,creator));
    }
 else {
      _creationMonitors.add(new Pair<Integer,StartupCommandProcessor>(_monitorId,creator));
    }
    return _monitorId;
  }
}",0.945945945945946
105599,"@Override public void registerResourceStateAdapter(String name,ResourceStateAdapter adapter){
  if (_resourceStateAdapters.get(name) != null) {
    throw new CloudRuntimeException(name + ""String_Node_Str"");
  }
synchronized (_resourceStateAdapters) {
    _resourceStateAdapters.put(name,adapter);
  }
}","@Override public void registerResourceStateAdapter(String name,ResourceStateAdapter adapter){
synchronized (_resourceStateAdapters) {
    if (_resourceStateAdapters.get(name) != null) {
      throw new CloudRuntimeException(name + ""String_Node_Str"");
    }
    _resourceStateAdapters.put(name,adapter);
  }
}",0.8590163934426229
105600,"protected List<String> getWarnings(){
synchronized (this) {
    final ArrayList<String> results=_warnings;
    _warnings=new ArrayList<String>();
    return results;
  }
}","protected List<String> getWarnings(){
synchronized (_warnings) {
    final ArrayList<String> results=_warnings;
    _warnings=new ArrayList<String>();
    return results;
  }
}",0.9740634005763688
105601,"protected List<String> getErrors(){
synchronized (this) {
    final ArrayList<String> result=_errors;
    _errors=new ArrayList<String>();
    return result;
  }
}","protected List<String> getErrors(){
synchronized (_errors) {
    final ArrayList<String> result=_errors;
    _errors=new ArrayList<String>();
    return result;
  }
}",0.972644376899696
105602,"private String getEnvironmentProperty(String name){
  try {
    final File propsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
    if (propsFile == null) {
      return null;
    }
 else {
      final FileInputStream finputstream=new FileInputStream(propsFile);
      final Properties props=new Properties();
      props.load(finputstream);
      finputstream.close();
      return props.getProperty(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    return null;
  }
}","private String getEnvironmentProperty(String name){
  try {
    final File propsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
    if (propsFile == null) {
      return null;
    }
 else {
      final Properties props=new Properties();
      try (final FileInputStream finputstream=new FileInputStream(propsFile)){
        props.load(finputstream);
      }
 catch (      IOException e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
      }
      return props.getProperty(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    return null;
  }
}",0.6402266288951841
105603,"private void writeKeyToDisk(String key,String keyPath){
  File keyfile=new File(keyPath);
  if (!keyfile.exists()) {
    try {
      keyfile.createNewFile();
    }
 catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + e.toString());
      throw new CloudRuntimeException(""String_Node_Str"" + keyPath);
    }
  }
  if (keyfile.exists()) {
    try {
      FileOutputStream kStream=new FileOutputStream(keyfile);
      kStream.write(key.getBytes());
      kStream.close();
    }
 catch (    FileNotFoundException e) {
      s_logger.warn(""String_Node_Str"" + keyfile.getAbsolutePath());
      throw new CloudRuntimeException(""String_Node_Str"" + keyPath);
    }
catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + keyfile.getAbsolutePath());
      throw new CloudRuntimeException(""String_Node_Str"" + keyPath);
    }
  }
}","private void writeKeyToDisk(String key,String keyPath){
  File keyfile=new File(keyPath);
  if (!keyfile.exists()) {
    try {
      keyfile.createNewFile();
    }
 catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + e.toString());
      throw new CloudRuntimeException(""String_Node_Str"" + keyPath);
    }
  }
  if (keyfile.exists()) {
    try (FileOutputStream kStream=new FileOutputStream(keyfile)){
      if (kStream != null) {
        kStream.write(key.getBytes());
      }
    }
 catch (    FileNotFoundException e) {
      s_logger.warn(""String_Node_Str"" + keyfile.getAbsolutePath());
      throw new CloudRuntimeException(""String_Node_Str"" + keyPath);
    }
catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + keyfile.getAbsolutePath());
      throw new CloudRuntimeException(""String_Node_Str"" + keyPath);
    }
  }
}",0.9224441833137486
105604,"Map<String,TemplateProp> swiftListTemplate(SwiftTO swift){
  String[] containers=SwiftUtil.list(swift,""String_Node_Str"",null);
  if (containers == null) {
    return null;
  }
  Map<String,TemplateProp> tmpltInfos=new HashMap<String,TemplateProp>();
  for (  String container : containers) {
    if (container.startsWith(""String_Node_Str"")) {
      String[] files=SwiftUtil.list(swift,container,""String_Node_Str"");
      if (files.length != 1) {
        continue;
      }
      try {
        File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        File tmpFile=SwiftUtil.getObject(swift,tempFile,container + File.separator + ""String_Node_Str"");
        if (tmpFile == null) {
          continue;
        }
        FileReader fr=new FileReader(tmpFile);
        BufferedReader brf=new BufferedReader(fr);
        String line=null;
        String uniqName=null;
        Long size=null;
        String name=null;
        while ((line=brf.readLine()) != null) {
          if (line.startsWith(""String_Node_Str"")) {
            uniqName=line.split(""String_Node_Str"")[1];
          }
 else           if (line.startsWith(""String_Node_Str"")) {
            size=Long.parseLong(line.split(""String_Node_Str"")[1]);
          }
 else           if (line.startsWith(""String_Node_Str"")) {
            name=line.split(""String_Node_Str"")[1];
          }
        }
        brf.close();
        tempFile.delete();
        if (uniqName != null) {
          TemplateProp prop=new TemplateProp(uniqName,container + File.separator + name,size,size,true,false);
          tmpltInfos.put(uniqName,prop);
        }
      }
 catch (      IOException e) {
        s_logger.debug(""String_Node_Str"" + e.toString());
        continue;
      }
catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + e.toString());
        continue;
      }
    }
  }
  return tmpltInfos;
}","Map<String,TemplateProp> swiftListTemplate(SwiftTO swift){
  String[] containers=SwiftUtil.list(swift,""String_Node_Str"",null);
  if (containers == null) {
    return null;
  }
  Map<String,TemplateProp> tmpltInfos=new HashMap<String,TemplateProp>();
  for (  String container : containers) {
    if (container.startsWith(""String_Node_Str"")) {
      String[] files=SwiftUtil.list(swift,container,""String_Node_Str"");
      if (files.length != 1) {
        continue;
      }
      try {
        File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        File tmpFile=SwiftUtil.getObject(swift,tempFile,container + File.separator + ""String_Node_Str"");
        if (tmpFile == null) {
          continue;
        }
        try (FileReader fr=new FileReader(tmpFile);BufferedReader brf=new BufferedReader(fr)){
          String line=null;
          String uniqName=null;
          Long size=null;
          String name=null;
          while ((line=brf.readLine()) != null) {
            if (line.startsWith(""String_Node_Str"")) {
              uniqName=line.split(""String_Node_Str"")[1];
            }
 else             if (line.startsWith(""String_Node_Str"")) {
              size=Long.parseLong(line.split(""String_Node_Str"")[1]);
            }
 else             if (line.startsWith(""String_Node_Str"")) {
              name=line.split(""String_Node_Str"")[1];
            }
          }
          tempFile.delete();
          if (uniqName != null) {
            TemplateProp prop=new TemplateProp(uniqName,container + File.separator + name,size,size,true,false);
            tmpltInfos.put(uniqName,prop);
          }
        }
 catch (        IOException ex) {
          s_logger.debug(""String_Node_Str"" + ex.getMessage());
          continue;
        }
      }
 catch (      IOException e) {
        s_logger.debug(""String_Node_Str"" + e.toString());
        continue;
      }
catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + e.toString());
        continue;
      }
    }
  }
  return tmpltInfos;
}",0.9066257354822204
105605,"@Override public void handleData(ByteBuffer buf,Link link){
  if (verbose)   System.out.println(""String_Node_Str"" + this + ""String_Node_Str""+ (packetNumber)+ ""String_Node_Str""+ buf+ ""String_Node_Str"");
  if (buf == null)   return;
  if (packetNumber >= bufs.length)   throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ bufs.length+ ""String_Node_Str""+ buf+ ""String_Node_Str"");
  ByteBuffer expectedBuf=bufs[packetNumber];
  if (!Arrays.equals(expectedBuf.toByteArray(),buf.toByteArray())) {
    dump(buf,expectedBuf);
    throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ buf+ ""String_Node_Str""+ expectedBuf+ ""String_Node_Str"");
  }
  Set<String> metadataKeys=expectedBuf.getMetadataKeys();
  if (metadataKeys.size() > 0) {
    for (    String key : metadataKeys) {
      Object expectedValue=expectedBuf.getMetadata(key);
      Object actualValue=buf.getMetadata(key);
      if (actualValue == null)       throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ key+ ""String_Node_Str""+ actualValue+ ""String_Node_Str""+ expectedValue+ ""String_Node_Str"");
      if (!expectedValue.equals(actualValue))       throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ key+ ""String_Node_Str""+ actualValue+ ""String_Node_Str""+ expectedValue+ ""String_Node_Str"");
    }
  }
  if (verbose)   System.out.println(""String_Node_Str"" + this + ""String_Node_Str"");
  packetNumber++;
  buf.unref();
}","@Override public void handleData(ByteBuffer buf,Link link){
  if (verbose)   System.out.println(""String_Node_Str"" + this + ""String_Node_Str""+ (packetNumber)+ ""String_Node_Str""+ buf+ ""String_Node_Str"");
  if (buf == null)   return;
  if (packetNumber >= bufs.length)   throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ bufs.length+ ""String_Node_Str""+ buf+ ""String_Node_Str"");
  ByteBuffer expectedBuf=bufs[packetNumber];
  if (!Arrays.equals(expectedBuf.toByteArray(),buf.toByteArray())) {
    dump(buf,expectedBuf);
    throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ buf+ ""String_Node_Str""+ expectedBuf+ ""String_Node_Str"");
  }
  Set<String> metadataKeys=expectedBuf.getMetadataKeys();
  if (metadataKeys.size() > 0) {
    for (    String key : metadataKeys) {
      Object expectedValue=expectedBuf.getMetadata(key);
      Object actualValue=buf.getMetadata(key);
      if (actualValue == null)       throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ key+ ""String_Node_Str""+ ""String_Node_Str""+ expectedValue+ ""String_Node_Str"");
      if (!expectedValue.equals(actualValue))       throw new AssertionError(""String_Node_Str"" + this + ""String_Node_Str""+ packetNumber+ ""String_Node_Str""+ key+ ""String_Node_Str""+ actualValue+ ""String_Node_Str""+ expectedValue+ ""String_Node_Str"");
    }
  }
  if (verbose)   System.out.println(""String_Node_Str"" + this + ""String_Node_Str"");
  packetNumber++;
  buf.unref();
}",0.9958743256109172
105606,"private static void responseFileContent(HttpExchange t,File f) throws Exception {
  OutputStream os=t.getResponseBody();
  FileInputStream fis=new FileInputStream(f);
  while (true) {
    byte[] b=new byte[8192];
    int n=fis.read(b);
    if (n < 0) {
      break;
    }
    os.write(b,0,n);
  }
  fis.close();
  os.close();
}","private static void responseFileContent(HttpExchange t,File f) throws Exception {
  try (OutputStream os=t.getResponseBody();FileInputStream fis=new FileInputStream(f)){
    while (true) {
      byte[] b=new byte[8192];
      int n=fis.read(b);
      if (n < 0) {
        break;
      }
      os.write(b,0,n);
    }
  }
 }",0.9090909090909092
105607,"@Override public List<StoragePoolHostVO> listByHostStatus(long poolId,Status hostStatus){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<StoragePoolHostVO> result=new ArrayList<StoragePoolHostVO>();
  ResultSet rs=null;
  try {
    String sql=HOST_FOR_POOL_SEARCH;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,poolId);
    pstmt.setString(2,hostStatus.toString());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","@Override public List<StoragePoolHostVO> listByHostStatus(long poolId,Status hostStatus){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  String sql=HOST_FOR_POOL_SEARCH;
  List<StoragePoolHostVO> result=new ArrayList<StoragePoolHostVO>();
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,poolId);
    pstmt.setString(2,hostStatus.toString());
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    SQLException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}",0.6807387862796834
105608,"@Override public List<Pair<Long,Integer>> getDatacenterStoragePoolHostInfo(long dcId,boolean sharedOnly){
  ArrayList<Pair<Long,Integer>> l=new ArrayList<Pair<Long,Integer>>();
  String sql=sharedOnly ? SHARED_STORAGE_POOL_HOST_INFO : STORAGE_POOL_HOST_INFO;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  ;
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,dcId);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      l.add(new Pair<Long,Integer>(rs.getLong(1),rs.getInt(2)));
    }
  }
 catch (  SQLException e) {
    s_logger.debug(""String_Node_Str"",e);
  }
  return l;
}","@Override public List<Pair<Long,Integer>> getDatacenterStoragePoolHostInfo(long dcId,boolean sharedOnly){
  ArrayList<Pair<Long,Integer>> l=new ArrayList<Pair<Long,Integer>>();
  String sql=sharedOnly ? SHARED_STORAGE_POOL_HOST_INFO : STORAGE_POOL_HOST_INFO;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,dcId);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      l.add(new Pair<Long,Integer>(rs.getLong(1),rs.getInt(2)));
    }
  }
 catch (  SQLException e) {
    s_logger.debug(""String_Node_Str"",e);
  }
  return l;
}",0.9969418960244648
105609,"/** 
 * Return key scan code (in lower byte) and extended flags (in second byte).
 */
private int map_en_us(KeyOrder order){
switch (order.event.getKeyCode()) {
case KeyEvent.VK_ESCAPE:
    return 0xff1b;
case KeyEvent.VK_F1:
  return 0xffbe;
case KeyEvent.VK_F2:
return 0xffbf;
case KeyEvent.VK_F3:
return 0xffc0;
case KeyEvent.VK_F4:
return 0xffc1;
case KeyEvent.VK_F5:
return 0xffc2;
case KeyEvent.VK_F6:
return 0xffc3;
case KeyEvent.VK_F7:
return 0xffc4;
case KeyEvent.VK_F8:
return 0xffc5;
case KeyEvent.VK_F9:
return 0xffc6;
case KeyEvent.VK_F10:
return 0xffc7;
case KeyEvent.VK_F11:
return 0xffc8;
case KeyEvent.VK_F12:
return 0xffc9;
case KeyEvent.VK_BACK_QUOTE:
return (sh) ? '~' : '`';
case KeyEvent.VK_1:
return (sh) ? '!' : '1';
case KeyEvent.VK_2:
return (sh) ? '@' : '2';
case KeyEvent.VK_3:
return (sh) ? '#' : '3';
case KeyEvent.VK_4:
return (sh) ? '$' : '4';
case KeyEvent.VK_5:
return (sh) ? '%' : '5';
case KeyEvent.VK_6:
return (sh) ? '^' : '6';
case KeyEvent.VK_7:
return (sh) ? '&' : '7';
case KeyEvent.VK_8:
return (sh) ? '*' : '8';
case KeyEvent.VK_9:
return (sh) ? '(' : '9';
case KeyEvent.VK_0:
return (sh) ? ')' : '0';
case KeyEvent.VK_MINUS:
return (sh) ? '_' : '-';
case KeyEvent.VK_EQUALS:
return (sh) ? '+' : '=';
case KeyEvent.VK_BACK_SPACE:
return 0xff08;
case KeyEvent.VK_TAB:
return 0xff09;
case KeyEvent.VK_Q:
return (sh ^ caps) ? 'Q' : 'q';
case KeyEvent.VK_W:
return (sh ^ caps) ? 'W' : 'w';
case KeyEvent.VK_E:
return (sh ^ caps) ? 'E' : 'e';
case KeyEvent.VK_R:
return (sh ^ caps) ? 'R' : 'r';
case KeyEvent.VK_T:
return (sh ^ caps) ? 'T' : 't';
case KeyEvent.VK_Y:
return (sh ^ caps) ? 'Y' : 'y';
case KeyEvent.VK_U:
return (sh ^ caps) ? 'U' : 'u';
case KeyEvent.VK_I:
return (sh ^ caps) ? 'I' : 'i';
case KeyEvent.VK_O:
return (sh ^ caps) ? 'O' : 'o';
case KeyEvent.VK_P:
return (sh ^ caps) ? 'P' : 'p';
case KeyEvent.VK_OPEN_BRACKET:
return (sh) ? '{' : '[';
case KeyEvent.VK_CLOSE_BRACKET:
return (sh) ? '{' : ']';
case KeyEvent.VK_ENTER:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_STANDARD:
return 0xff0d;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xff8d;
}
case KeyEvent.VK_CAPS_LOCK:
if (order.pressed) caps=!caps;
return 0xFFE5;
case KeyEvent.VK_A:
return (sh ^ caps) ? 'A' : 'a';
case KeyEvent.VK_S:
return (sh ^ caps) ? 'S' : 's';
case KeyEvent.VK_D:
return (sh ^ caps) ? 'D' : 'd';
case KeyEvent.VK_F:
return (sh ^ caps) ? 'F' : 'f';
case KeyEvent.VK_G:
return (sh ^ caps) ? 'G' : 'g';
case KeyEvent.VK_H:
return (sh ^ caps) ? 'H' : 'h';
case KeyEvent.VK_J:
return (sh ^ caps) ? 'J' : 'j';
case KeyEvent.VK_K:
return (sh ^ caps) ? 'K' : 'k';
case KeyEvent.VK_L:
return (sh ^ caps) ? 'L' : 'l';
case KeyEvent.VK_SEMICOLON:
return (sh) ? ':' : ';';
case KeyEvent.VK_QUOTE:
return (sh) ? '""' : '\'';
case KeyEvent.VK_SHIFT:
sh=!sh;
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xffe1;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xffe2;
}
case KeyEvent.VK_BACK_SLASH:
return (sh) ? '|' : '\\';
case KeyEvent.VK_Z:
return (sh ^ caps) ? 'Z' : 'z';
case KeyEvent.VK_X:
return (sh ^ caps) ? 'X' : 'x';
case KeyEvent.VK_C:
return (sh ^ caps) ? 'C' : 'c';
case KeyEvent.VK_V:
return (sh ^ caps) ? 'V' : 'v';
case KeyEvent.VK_B:
return (sh ^ caps) ? 'B' : 'b';
case KeyEvent.VK_N:
return (sh ^ caps) ? 'N' : 'n';
case KeyEvent.VK_M:
return (sh ^ caps) ? 'M' : 'M';
case KeyEvent.VK_COMMA:
return (sh) ? '<' : ',';
case KeyEvent.VK_PERIOD:
return (sh) ? '>' : '.';
case KeyEvent.VK_SLASH:
return (sh) ? '?' : '/';
case KeyEvent.VK_CONTROL:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFE3;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFE4;
}
case KeyEvent.VK_WINDOWS:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFED;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFEE;
}
case KeyEvent.VK_META:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFE7;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFE8;
}
case KeyEvent.VK_ALT:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFE9;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFEA;
}
case KeyEvent.VK_ALT_GRAPH:
return 0xfe03;
case KeyEvent.VK_SPACE:
return ' ';
case KeyEvent.VK_CONTEXT_MENU:
return 0xff67;
case KeyEvent.VK_PRINTSCREEN:
return (sh) ? 0xFF15 : 0xFF61;
case KeyEvent.VK_SCROLL_LOCK:
return 0xFF14;
case KeyEvent.VK_PAUSE:
return (sh) ? 0xFF6B : 0xFF13;
case KeyEvent.VK_INSERT:
return 0xff63;
case KeyEvent.VK_DELETE:
return 0xffff;
case KeyEvent.VK_HOME:
return 0xff50;
case KeyEvent.VK_END:
return 0xff57;
case KeyEvent.VK_PAGE_UP:
return 0xff55;
case KeyEvent.VK_PAGE_DOWN:
return 0xff56;
case KeyEvent.VK_LEFT:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff51;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF96;
}
case KeyEvent.VK_UP:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff52;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF97;
}
case KeyEvent.VK_RIGHT:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff53;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF98;
}
case KeyEvent.VK_DOWN:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff54;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF99;
}
case KeyEvent.VK_NUM_LOCK:
if (order.pressed) num=!num;
return 0xFF6F;
case KeyEvent.VK_DIVIDE:
return 0xFFAF;
case KeyEvent.VK_MULTIPLY:
return 0xFFAA;
case KeyEvent.VK_SUBTRACT:
return 0xFFAD;
case KeyEvent.VK_ADD:
return 0xFFAB;
case KeyEvent.VK_KP_LEFT:
return 0xFF96;
case KeyEvent.VK_KP_UP:
return 0xFF97;
case KeyEvent.VK_KP_RIGHT:
return 0xFF98;
case KeyEvent.VK_KP_DOWN:
return 0xFF99;
case KeyEvent.VK_NUMPAD0:
return 0xFFB0;
case KeyEvent.VK_NUMPAD1:
return 0xFFB1;
case KeyEvent.VK_NUMPAD2:
return 0xFFB2;
case KeyEvent.VK_NUMPAD3:
return 0xFFB3;
case KeyEvent.VK_NUMPAD4:
return 0xFFB4;
case KeyEvent.VK_NUMPAD5:
return 0xFFB5;
case KeyEvent.VK_NUMPAD6:
return 0xFFB6;
case KeyEvent.VK_NUMPAD7:
return 0xFFB7;
case KeyEvent.VK_NUMPAD8:
return 0xFFB8;
case KeyEvent.VK_NUMPAD9:
return 0xFFB9;
case KeyEvent.VK_DECIMAL:
return 0xFFAE;
default :
System.err.println(""String_Node_Str"" + order + ""String_Node_Str"");
return ' ';
}
}","/** 
 * Return key scan code (in lower byte) and extended flags (in second byte).
 */
private int map_en_us(KeyOrder order){
switch (order.event.getKeyCode()) {
case KeyEvent.VK_ESCAPE:
    return 0xff1b;
case KeyEvent.VK_F1:
  return 0xffbe;
case KeyEvent.VK_F2:
return 0xffbf;
case KeyEvent.VK_F3:
return 0xffc0;
case KeyEvent.VK_F4:
return 0xffc1;
case KeyEvent.VK_F5:
return 0xffc2;
case KeyEvent.VK_F6:
return 0xffc3;
case KeyEvent.VK_F7:
return 0xffc4;
case KeyEvent.VK_F8:
return 0xffc5;
case KeyEvent.VK_F9:
return 0xffc6;
case KeyEvent.VK_F10:
return 0xffc7;
case KeyEvent.VK_F11:
return 0xffc8;
case KeyEvent.VK_F12:
return 0xffc9;
case KeyEvent.VK_BACK_QUOTE:
return (sh) ? '~' : '`';
case KeyEvent.VK_1:
return (sh) ? '!' : '1';
case KeyEvent.VK_2:
return (sh) ? '@' : '2';
case KeyEvent.VK_3:
return (sh) ? '#' : '3';
case KeyEvent.VK_4:
return (sh) ? '$' : '4';
case KeyEvent.VK_5:
return (sh) ? '%' : '5';
case KeyEvent.VK_6:
return (sh) ? '^' : '6';
case KeyEvent.VK_7:
return (sh) ? '&' : '7';
case KeyEvent.VK_8:
return (sh) ? '*' : '8';
case KeyEvent.VK_9:
return (sh) ? '(' : '9';
case KeyEvent.VK_0:
return (sh) ? ')' : '0';
case KeyEvent.VK_MINUS:
return (sh) ? '_' : '-';
case KeyEvent.VK_EQUALS:
return (sh) ? '+' : '=';
case KeyEvent.VK_BACK_SPACE:
return 0xff08;
case KeyEvent.VK_TAB:
return 0xff09;
case KeyEvent.VK_Q:
return (sh ^ caps) ? 'Q' : 'q';
case KeyEvent.VK_W:
return (sh ^ caps) ? 'W' : 'w';
case KeyEvent.VK_E:
return (sh ^ caps) ? 'E' : 'e';
case KeyEvent.VK_R:
return (sh ^ caps) ? 'R' : 'r';
case KeyEvent.VK_T:
return (sh ^ caps) ? 'T' : 't';
case KeyEvent.VK_Y:
return (sh ^ caps) ? 'Y' : 'y';
case KeyEvent.VK_U:
return (sh ^ caps) ? 'U' : 'u';
case KeyEvent.VK_I:
return (sh ^ caps) ? 'I' : 'i';
case KeyEvent.VK_O:
return (sh ^ caps) ? 'O' : 'o';
case KeyEvent.VK_P:
return (sh ^ caps) ? 'P' : 'p';
case KeyEvent.VK_OPEN_BRACKET:
return (sh) ? '{' : '[';
case KeyEvent.VK_CLOSE_BRACKET:
return (sh) ? '{' : ']';
case KeyEvent.VK_ENTER:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_STANDARD:
return 0xff0d;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xff8d;
}
case KeyEvent.VK_CAPS_LOCK:
if (order.pressed) caps=!caps;
return 0xFFE5;
case KeyEvent.VK_A:
return (sh ^ caps) ? 'A' : 'a';
case KeyEvent.VK_S:
return (sh ^ caps) ? 'S' : 's';
case KeyEvent.VK_D:
return (sh ^ caps) ? 'D' : 'd';
case KeyEvent.VK_F:
return (sh ^ caps) ? 'F' : 'f';
case KeyEvent.VK_G:
return (sh ^ caps) ? 'G' : 'g';
case KeyEvent.VK_H:
return (sh ^ caps) ? 'H' : 'h';
case KeyEvent.VK_J:
return (sh ^ caps) ? 'J' : 'j';
case KeyEvent.VK_K:
return (sh ^ caps) ? 'K' : 'k';
case KeyEvent.VK_L:
return (sh ^ caps) ? 'L' : 'l';
case KeyEvent.VK_SEMICOLON:
return (sh) ? ':' : ';';
case KeyEvent.VK_QUOTE:
return (sh) ? '""' : '\'';
case KeyEvent.VK_SHIFT:
sh=!sh;
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xffe1;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xffe2;
}
case KeyEvent.VK_BACK_SLASH:
return (sh) ? '|' : '\\';
case KeyEvent.VK_Z:
return (sh ^ caps) ? 'Z' : 'z';
case KeyEvent.VK_X:
return (sh ^ caps) ? 'X' : 'x';
case KeyEvent.VK_C:
return (sh ^ caps) ? 'C' : 'c';
case KeyEvent.VK_V:
return (sh ^ caps) ? 'V' : 'v';
case KeyEvent.VK_B:
return (sh ^ caps) ? 'B' : 'b';
case KeyEvent.VK_N:
return (sh ^ caps) ? 'N' : 'n';
case KeyEvent.VK_M:
return (sh ^ caps) ? 'M' : 'm';
case KeyEvent.VK_COMMA:
return (sh) ? '<' : ',';
case KeyEvent.VK_PERIOD:
return (sh) ? '>' : '.';
case KeyEvent.VK_SLASH:
return (sh) ? '?' : '/';
case KeyEvent.VK_CONTROL:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFE3;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFE4;
}
case KeyEvent.VK_WINDOWS:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFED;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFEE;
}
case KeyEvent.VK_META:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFE7;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFE8;
}
case KeyEvent.VK_ALT:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xFFE9;
case KeyEvent.KEY_LOCATION_RIGHT:
return 0xFFEA;
}
case KeyEvent.VK_ALT_GRAPH:
return 0xfe03;
case KeyEvent.VK_SPACE:
return ' ';
case KeyEvent.VK_CONTEXT_MENU:
return 0xff67;
case KeyEvent.VK_PRINTSCREEN:
return (sh) ? 0xFF15 : 0xFF61;
case KeyEvent.VK_SCROLL_LOCK:
return 0xFF14;
case KeyEvent.VK_PAUSE:
return (sh) ? 0xFF6B : 0xFF13;
case KeyEvent.VK_INSERT:
return 0xff63;
case KeyEvent.VK_DELETE:
return 0xffff;
case KeyEvent.VK_HOME:
return 0xff50;
case KeyEvent.VK_END:
return 0xff57;
case KeyEvent.VK_PAGE_UP:
return 0xff55;
case KeyEvent.VK_PAGE_DOWN:
return 0xff56;
case KeyEvent.VK_LEFT:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff51;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF96;
}
case KeyEvent.VK_UP:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff52;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF97;
}
case KeyEvent.VK_RIGHT:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff53;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF98;
}
case KeyEvent.VK_DOWN:
switch (order.event.getKeyLocation()) {
default :
case KeyEvent.KEY_LOCATION_LEFT:
return 0xff54;
case KeyEvent.KEY_LOCATION_NUMPAD:
return 0xFF99;
}
case KeyEvent.VK_NUM_LOCK:
if (order.pressed) num=!num;
return 0xFF6F;
case KeyEvent.VK_DIVIDE:
return 0xFFAF;
case KeyEvent.VK_MULTIPLY:
return 0xFFAA;
case KeyEvent.VK_SUBTRACT:
return 0xFFAD;
case KeyEvent.VK_ADD:
return 0xFFAB;
case KeyEvent.VK_KP_LEFT:
return 0xFF96;
case KeyEvent.VK_KP_UP:
return 0xFF97;
case KeyEvent.VK_KP_RIGHT:
return 0xFF98;
case KeyEvent.VK_KP_DOWN:
return 0xFF99;
case KeyEvent.VK_NUMPAD0:
return 0xFFB0;
case KeyEvent.VK_NUMPAD1:
return 0xFFB1;
case KeyEvent.VK_NUMPAD2:
return 0xFFB2;
case KeyEvent.VK_NUMPAD3:
return 0xFFB3;
case KeyEvent.VK_NUMPAD4:
return 0xFFB4;
case KeyEvent.VK_NUMPAD5:
return 0xFFB5;
case KeyEvent.VK_NUMPAD6:
return 0xFFB6;
case KeyEvent.VK_NUMPAD7:
return 0xFFB7;
case KeyEvent.VK_NUMPAD8:
return 0xFFB8;
case KeyEvent.VK_NUMPAD9:
return 0xFFB9;
case KeyEvent.VK_DECIMAL:
return 0xFFAE;
default :
System.err.println(""String_Node_Str"" + order + ""String_Node_Str"");
return ' ';
}
}",0.9998431864513094
105610,"private Hashtable<String,String> getEnvironment(final String principal,final String password,final String providerUrl,final boolean isSystemContext){
  final String factory=_ldapConfiguration.getFactory();
  final String url=providerUrl == null ? _ldapConfiguration.getProviderUrl() : providerUrl;
  final Hashtable<String,String> environment=new Hashtable<String,String>();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,factory);
  environment.put(Context.PROVIDER_URL,url);
  environment.put(""String_Node_Str"",_ldapConfiguration.getReadTimeout().toString());
  environment.put(""String_Node_Str"",""String_Node_Str"");
  enableSSL(environment);
  setAuthentication(environment,isSystemContext);
  if (principal != null) {
    environment.put(Context.SECURITY_PRINCIPAL,principal);
  }
  if (password != null) {
    environment.put(Context.SECURITY_CREDENTIALS,password);
  }
  return environment;
}","private Hashtable<String,String> getEnvironment(final String principal,final String password,final String providerUrl,final boolean isSystemContext){
  final String factory=_ldapConfiguration.getFactory();
  final String url=providerUrl == null ? _ldapConfiguration.getProviderUrl() : providerUrl;
  final Hashtable<String,String> environment=new Hashtable<String,String>();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,factory);
  environment.put(Context.PROVIDER_URL,url);
  environment.put(""String_Node_Str"",""String_Node_Str"");
  environment.put(""String_Node_Str"",""String_Node_Str"");
  enableSSL(environment);
  setAuthentication(environment,isSystemContext);
  if (principal != null) {
    environment.put(Context.SECURITY_PRINCIPAL,principal);
  }
  if (password != null) {
    environment.put(Context.SECURITY_CREDENTIALS,password);
  }
  return environment;
}",0.9644268774703556
105611,"@Override public List<VMTemplateHostVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateHostVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateHostVO> result=new ArrayList<VMTemplateHostVO>();
  ResultSet rs=null;
  try {
    String sql=DOWNLOADS_STATE_DC_POD;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","@Override public List<VMTemplateHostVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateHostVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateHostVO> result=new ArrayList<VMTemplateHostVO>();
  String sql=DOWNLOADS_STATE_DC_POD;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    SQLException e) {
      s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
  return result;
}",0.7935627081021087
105612,"@DB @Override public List<EngineHostVO> findLostHosts(long timeout){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<EngineHostVO> result=new ArrayList<EngineHostVO>();
  ResultSet rs=null;
  try {
    String sql=""String_Node_Str"";
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,timeout);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","@DB @Override public List<EngineHostVO> findLostHosts(long timeout){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<EngineHostVO> result=new ArrayList<EngineHostVO>();
  String sql=""String_Node_Str"";
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,timeout);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}",0.7468634686346863
105613,"public static void main(String[] args){
  String newFile=null;
  String oldFile=null;
  String dirName=""String_Node_Str"";
  LinkedHashMap<String,Command> commands=new LinkedHashMap<String,Command>();
  LinkedHashMap<String,Command> oldCommands=new LinkedHashMap<String,Command>();
  ArrayList<Command> addedCommands=new ArrayList<Command>();
  ArrayList<Command> removedCommands=new ArrayList<Command>();
  HashMap<String,Command> stableCommands=new HashMap<String,Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias(""String_Node_Str"",Command.class);
  xs.alias(""String_Node_Str"",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      newFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      oldFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  try {
    try {
      ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile));
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try {
      ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile));
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  String key : commands.keySet()) {
    if (!oldCommands.containsKey(key)) {
      addedCommands.add(commands.get(key));
    }
 else {
      stableCommands.put(commands.get(key).getName(),commands.get(key));
    }
  }
  for (  String key : oldCommands.keySet()) {
    if (!commands.containsKey(key)) {
      removedCommands.add(oldCommands.get(key));
      if (stableCommands.get(key) != null) {
        stableCommands.remove(key);
      }
    }
  }
  try {
    FileWriter fstream=new FileWriter(dirName + ""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"");
    for (    Command c : addedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Command c : removedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      if (commands.get(key).isAsync() != oldCommands.get(key).isAsync()) {
        String type=""String_Node_Str"";
        if (commands.get(key).isAsync()) {
          type=""String_Node_Str"";
        }
        out.write(""String_Node_Str"" + stableCommands.get(key).getName() + ""String_Node_Str""+ type);
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      ArrayList<Argument> newReqArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedReqArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableReqArgs=new HashMap<String,Argument>();
      ArrayList<Argument> newRespArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedRespArgs=new ArrayList<Argument>();
      Command newCommand=commands.get(key);
      Command oldCommand=oldCommands.get(key);
      for (      Argument arg : newCommand.getRequest()) {
        if (oldCommand.getReqArgByName(arg.getName()) == null) {
          if (!(arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str""))) {
            newReqArgs.add(arg);
          }
        }
 else {
          stableReqArgs.put(arg.getName(),arg);
        }
      }
      for (      Argument arg : oldCommand.getRequest()) {
        if (newCommand.getReqArgByName(arg.getName()) == null) {
          removedReqArgs.add(arg);
          if (stableReqArgs.get(arg.getName()) != null) {
            stableReqArgs.remove(arg.getName());
          }
        }
      }
      for (Iterator<String> i=stableReqArgs.keySet().iterator(); i.hasNext(); ) {
        String argName=i.next();
        if (oldCommand.getReqArgByName(argName).isRequired() == newCommand.getReqArgByName(argName).isRequired()) {
          i.remove();
        }
      }
      if (newCommand.getResponse() != null && oldCommand.getResponse() != null) {
        for (        Argument arg : newCommand.getResponse()) {
          if (oldCommand.getResArgByName(arg.getName()) == null) {
            newRespArgs.add(arg);
          }
        }
        for (        Argument arg : oldCommand.getResponse()) {
          if (newCommand.getResArgByName(arg.getName()) == null) {
            removedRespArgs.add(arg);
          }
        }
      }
      if (newReqArgs.size() != 0 || newRespArgs.size() != 0 || removedReqArgs.size() != 0 || removedRespArgs.size() != 0 || stableReqArgs.size() != 0 || stableReqArgs.size() != 0) {
        StringBuffer commandInfo=new StringBuffer();
        commandInfo.append(""String_Node_Str"" + key);
        out.write(commandInfo.toString());
        out.write(""String_Node_Str"");
        if (newReqArgs.size() != 0 || removedReqArgs.size() != 0 || stableReqArgs.size() != 0) {
          StringBuffer request=new StringBuffer();
          request.append(""String_Node_Str"");
          out.write(request.toString());
          if (newReqArgs.size() != 0) {
            StringBuffer newParameters=new StringBuffer();
            newParameters.append(""String_Node_Str"");
            for (            Argument newArg : newReqArgs) {
              String isRequiredParam=""String_Node_Str"";
              if (newArg.isRequired()) {
                isRequiredParam=""String_Node_Str"";
              }
              newParameters.append(newArg.getName() + ""String_Node_Str"" + isRequiredParam+ ""String_Node_Str"");
            }
            newParameters.delete(newParameters.length() - 2,newParameters.length() - 1);
            out.write(newParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (removedReqArgs.size() != 0) {
            StringBuffer removedParameters=new StringBuffer();
            removedParameters.append(""String_Node_Str"");
            for (            Argument removedArg : removedReqArgs) {
              removedParameters.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedParameters.delete(removedParameters.length() - 2,removedParameters.length() - 1);
            out.write(removedParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (stableReqArgs.size() != 0) {
            StringBuffer changedParameters=new StringBuffer();
            changedParameters.append(""String_Node_Str"");
            for (            Argument stableArg : stableReqArgs.values()) {
              String newRequired=""String_Node_Str"";
              String oldRequired=""String_Node_Str"";
              if (oldCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               oldRequired=""String_Node_Str"";
              if (newCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               newRequired=""String_Node_Str"";
              changedParameters.append(stableArg.getName() + ""String_Node_Str"" + oldRequired+ ""String_Node_Str""+ newRequired+ ""String_Node_Str"");
            }
            changedParameters.delete(changedParameters.length() - 2,changedParameters.length() - 1);
            out.write(changedParameters.toString());
            out.write(""String_Node_Str"");
          }
        }
        if (newRespArgs.size() != 0 || removedRespArgs.size() != 0) {
          StringBuffer changedResponseParams=new StringBuffer();
          changedResponseParams.append(""String_Node_Str"");
          out.write(changedResponseParams.toString());
          if (newRespArgs.size() != 0) {
            StringBuffer newRespParams=new StringBuffer();
            newRespParams.append(""String_Node_Str"");
            for (            Argument newArg : newRespArgs) {
              newRespParams.append(newArg.getName() + ""String_Node_Str"");
            }
            newRespParams.delete(newRespParams.length() - 2,newRespParams.length() - 1);
            out.write(newRespParams.toString());
            out.write(""String_Node_Str"");
          }
          if (removedRespArgs.size() != 0) {
            StringBuffer removedRespParams=new StringBuffer();
            removedRespParams.append(""String_Node_Str"");
            for (            Argument removedArg : removedRespArgs) {
              removedRespParams.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedRespParams.delete(removedRespParams.length() - 2,removedRespParams.length() - 1);
            out.write(removedRespParams.toString());
            out.write(""String_Node_Str"");
          }
        }
      }
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  String newFile=null;
  String oldFile=null;
  String dirName=""String_Node_Str"";
  LinkedHashMap<String,Command> commands=new LinkedHashMap<String,Command>();
  LinkedHashMap<String,Command> oldCommands=new LinkedHashMap<String,Command>();
  ArrayList<Command> addedCommands=new ArrayList<Command>();
  ArrayList<Command> removedCommands=new ArrayList<Command>();
  HashMap<String,Command> stableCommands=new HashMap<String,Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias(""String_Node_Str"",Command.class);
  xs.alias(""String_Node_Str"",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      newFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      oldFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  try {
    try (ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile))){
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try (ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile))){
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  Map.Entry<String,Command> entry : commands.entrySet()) {
    if (!oldCommands.containsKey(entry.getKey())) {
      addedCommands.add(entry.getValue());
    }
 else {
      stableCommands.put(entry.getValue().getName(),entry.getValue());
    }
  }
  for (  Map.Entry<String,Command> entry : oldCommands.entrySet()) {
    if (!commands.containsKey(entry.getKey())) {
      removedCommands.add(entry.getValue());
      if (stableCommands.get(entry.getKey()) != null) {
        stableCommands.remove(entry.getKey());
      }
    }
  }
  try (FileWriter fstream=new FileWriter(dirName + ""String_Node_Str"");BufferedWriter out=new BufferedWriter(fstream)){
    out.write(""String_Node_Str"");
    for (    Command c : addedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Command c : removedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Map.Entry<String,Command> entry : stableCommands.entrySet()) {
      if (commands.get(entry.getKey()).isAsync() != oldCommands.get(entry.getKey()).isAsync()) {
        String type=""String_Node_Str"";
        if (commands.get(entry.getKey()).isAsync()) {
          type=""String_Node_Str"";
        }
        out.write(""String_Node_Str"" + entry.getValue().getName() + ""String_Node_Str""+ type);
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      ArrayList<Argument> newReqArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedReqArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableReqArgs=new HashMap<String,Argument>();
      ArrayList<Argument> newRespArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedRespArgs=new ArrayList<Argument>();
      Command newCommand=commands.get(key);
      Command oldCommand=oldCommands.get(key);
      for (      Argument arg : newCommand.getRequest()) {
        if (oldCommand.getReqArgByName(arg.getName()) == null) {
          if (!(arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str""))) {
            newReqArgs.add(arg);
          }
        }
 else {
          stableReqArgs.put(arg.getName(),arg);
        }
      }
      for (      Argument arg : oldCommand.getRequest()) {
        if (newCommand.getReqArgByName(arg.getName()) == null) {
          removedReqArgs.add(arg);
          if (stableReqArgs.get(arg.getName()) != null) {
            stableReqArgs.remove(arg.getName());
          }
        }
      }
      for (Iterator<String> i=stableReqArgs.keySet().iterator(); i.hasNext(); ) {
        String argName=i.next();
        if ((oldCommand.getReqArgByName(argName) != null) && (newCommand.getReqArgByName(argName) != null)) {
          if (oldCommand.getReqArgByName(argName).isRequired().equals(newCommand.getReqArgByName(argName).isRequired())) {
            i.remove();
          }
        }
      }
      if (newCommand.getResponse() != null && oldCommand.getResponse() != null) {
        for (        Argument arg : newCommand.getResponse()) {
          if (oldCommand.getResArgByName(arg.getName()) == null) {
            newRespArgs.add(arg);
          }
        }
        for (        Argument arg : oldCommand.getResponse()) {
          if (newCommand.getResArgByName(arg.getName()) == null) {
            removedRespArgs.add(arg);
          }
        }
      }
      if (newReqArgs.size() != 0 || newRespArgs.size() != 0 || removedReqArgs.size() != 0 || removedRespArgs.size() != 0 || stableReqArgs.size() != 0 || stableReqArgs.size() != 0) {
        StringBuffer commandInfo=new StringBuffer();
        commandInfo.append(""String_Node_Str"" + key);
        out.write(commandInfo.toString());
        out.write(""String_Node_Str"");
        if (newReqArgs.size() != 0 || removedReqArgs.size() != 0 || stableReqArgs.size() != 0) {
          StringBuffer request=new StringBuffer();
          request.append(""String_Node_Str"");
          out.write(request.toString());
          if (newReqArgs.size() != 0) {
            StringBuffer newParameters=new StringBuffer();
            newParameters.append(""String_Node_Str"");
            for (            Argument newArg : newReqArgs) {
              String isRequiredParam=""String_Node_Str"";
              if (newArg.isRequired()) {
                isRequiredParam=""String_Node_Str"";
              }
              newParameters.append(newArg.getName() + ""String_Node_Str"" + isRequiredParam+ ""String_Node_Str"");
            }
            newParameters.delete(newParameters.length() - 2,newParameters.length() - 1);
            out.write(newParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (removedReqArgs.size() != 0) {
            StringBuffer removedParameters=new StringBuffer();
            removedParameters.append(""String_Node_Str"");
            for (            Argument removedArg : removedReqArgs) {
              removedParameters.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedParameters.delete(removedParameters.length() - 2,removedParameters.length() - 1);
            out.write(removedParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (stableReqArgs.size() != 0) {
            StringBuffer changedParameters=new StringBuffer();
            changedParameters.append(""String_Node_Str"");
            for (            Argument stableArg : stableReqArgs.values()) {
              String newRequired=""String_Node_Str"";
              String oldRequired=""String_Node_Str"";
              if ((oldCommand.getReqArgByName(stableArg.getName()) != null) && (oldCommand.getReqArgByName(stableArg.getName()).isRequired() == true))               oldRequired=""String_Node_Str"";
              if ((newCommand.getReqArgByName(stableArg.getName()) != null) && (newCommand.getReqArgByName(stableArg.getName()).isRequired() == true))               newRequired=""String_Node_Str"";
              changedParameters.append(stableArg.getName() + ""String_Node_Str"" + oldRequired+ ""String_Node_Str""+ newRequired+ ""String_Node_Str"");
            }
            changedParameters.delete(changedParameters.length() - 2,changedParameters.length() - 1);
            out.write(changedParameters.toString());
            out.write(""String_Node_Str"");
          }
        }
        if (newRespArgs.size() != 0 || removedRespArgs.size() != 0) {
          StringBuffer changedResponseParams=new StringBuffer();
          changedResponseParams.append(""String_Node_Str"");
          out.write(changedResponseParams.toString());
          if (newRespArgs.size() != 0) {
            StringBuffer newRespParams=new StringBuffer();
            newRespParams.append(""String_Node_Str"");
            for (            Argument newArg : newRespArgs) {
              newRespParams.append(newArg.getName() + ""String_Node_Str"");
            }
            newRespParams.delete(newRespParams.length() - 2,newRespParams.length() - 1);
            out.write(newRespParams.toString());
            out.write(""String_Node_Str"");
          }
          if (removedRespArgs.size() != 0) {
            StringBuffer removedRespParams=new StringBuffer();
            removedRespParams.append(""String_Node_Str"");
            for (            Argument removedArg : removedRespArgs) {
              removedRespParams.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedRespParams.delete(removedRespParams.length() - 2,removedRespParams.length() - 1);
            out.write(removedRespParams.toString());
            out.write(""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.6624668089758942
105614,"private Hashtable<String,String> getEnvironment(final String principal,final String password,final String providerUrl,final boolean isSystemContext){
  final String factory=_ldapConfiguration.getFactory();
  final String url=providerUrl == null ? _ldapConfiguration.getProviderUrl() : providerUrl;
  final Hashtable<String,String> environment=new Hashtable<String,String>();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,factory);
  environment.put(Context.PROVIDER_URL,url);
  environment.put(""String_Node_Str"",""String_Node_Str"");
  environment.put(""String_Node_Str"",""String_Node_Str"");
  enableSSL(environment);
  setAuthentication(environment,isSystemContext);
  if (principal != null) {
    environment.put(Context.SECURITY_PRINCIPAL,principal);
  }
  if (password != null) {
    environment.put(Context.SECURITY_CREDENTIALS,password);
  }
  return environment;
}","private Hashtable<String,String> getEnvironment(final String principal,final String password,final String providerUrl,final boolean isSystemContext){
  final String factory=_ldapConfiguration.getFactory();
  final String url=providerUrl == null ? _ldapConfiguration.getProviderUrl() : providerUrl;
  final Hashtable<String,String> environment=new Hashtable<String,String>();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,factory);
  environment.put(Context.PROVIDER_URL,url);
  environment.put(""String_Node_Str"",_ldapConfiguration.getReadTimeout().toString());
  environment.put(""String_Node_Str"",""String_Node_Str"");
  enableSSL(environment);
  setAuthentication(environment,isSystemContext);
  if (principal != null) {
    environment.put(Context.SECURITY_PRINCIPAL,principal);
  }
  if (password != null) {
    environment.put(Context.SECURITY_CREDENTIALS,password);
  }
  return environment;
}",0.9644268774703556
105615,"@Override public NicTO toNicTO(NicProfile profile){
  NicTO to=new NicTO();
  to.setDeviceId(profile.getDeviceId());
  to.setBroadcastType(profile.getBroadcastType());
  to.setType(profile.getTrafficType());
  to.setIp(profile.getIp4Address());
  to.setNetmask(profile.getNetmask());
  to.setMac(profile.getMacAddress());
  to.setDns1(profile.getDns1());
  to.setDns2(profile.getDns2());
  to.setGateway(profile.getGateway());
  to.setDefaultNic(profile.isDefaultNic());
  to.setBroadcastUri(profile.getBroadCastUri());
  to.setIsolationuri(profile.getIsolationUri());
  to.setNetworkRateMbps(profile.getNetworkRate());
  to.setName(profile.getName());
  to.setSecurityGroupEnabled(profile.isSecurityGroupEnabled());
  NetworkVO network=_networkDao.findById(profile.getNetworkId());
  to.setNetworkUuid(network.getUuid());
  NicVO nicVO=_nicDao.findById(profile.getId());
  if (nicVO != null) {
    to.setUuid(nicVO.getUuid());
    if (nicVO.getVmType() != VirtualMachine.Type.User) {
      to.setPxeDisable(true);
    }
  }
 else {
    s_logger.warn(""String_Node_Str"" + profile.getId());
  }
  List<String> secIps=null;
  if (nicVO.getSecondaryIp()) {
    secIps=_nicSecIpDao.getSecondaryIpAddressesForNic(nicVO.getId());
  }
  to.setNicSecIps(secIps);
  return to;
}","@Override public NicTO toNicTO(NicProfile profile){
  NicTO to=new NicTO();
  to.setDeviceId(profile.getDeviceId());
  to.setBroadcastType(profile.getBroadcastType());
  to.setType(profile.getTrafficType());
  to.setIp(profile.getIp4Address());
  to.setNetmask(profile.getNetmask());
  to.setMac(profile.getMacAddress());
  to.setDns1(profile.getDns1());
  to.setDns2(profile.getDns2());
  to.setGateway(profile.getGateway());
  to.setDefaultNic(profile.isDefaultNic());
  to.setBroadcastUri(profile.getBroadCastUri());
  to.setIsolationuri(profile.getIsolationUri());
  to.setNetworkRateMbps(profile.getNetworkRate());
  to.setName(profile.getName());
  to.setSecurityGroupEnabled(profile.isSecurityGroupEnabled());
  NetworkVO network=_networkDao.findById(profile.getNetworkId());
  to.setNetworkUuid(network.getUuid());
  NicVO nicVO=_nicDao.findById(profile.getId());
  if (nicVO != null) {
    to.setUuid(nicVO.getUuid());
    if (nicVO.getVmType() != VirtualMachine.Type.User) {
      to.setPxeDisable(true);
    }
    List<String> secIps=null;
    if (nicVO.getSecondaryIp()) {
      secIps=_nicSecIpDao.getSecondaryIpAddressesForNic(nicVO.getId());
    }
    to.setNicSecIps(secIps);
  }
 else {
    s_logger.warn(""String_Node_Str"" + profile.getId());
  }
  return to;
}",0.8609583660644148
105616,"@Override @DB public Network createPrivateNetwork(final String networkName,final String displayText,long physicalNetworkId,String broadcastUriString,final String startIp,String endIp,final String gateway,String netmask,final long networkOwnerId,final Long vpcId,final Boolean sourceNat,final Long networkOfferingId) throws ResourceAllocationException, ConcurrentOperationException, InsufficientCapacityException {
  final Account owner=_accountMgr.getAccount(networkOwnerId);
  NetworkOfferingVO ntwkOff=null;
  if (networkOfferingId != null) {
    ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  }
  if (ntwkOff == null) {
    ntwkOff=findSystemNetworkOffering(NetworkOffering.SystemPrivateGatewayNetworkOffering);
  }
  final PhysicalNetwork pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNtwk == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    ex.addProxyObject(String.valueOf(physicalNetworkId),""String_Node_Str"");
    throw ex;
  }
  if (!NetUtils.isValidIp(startIp)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (endIp == null) {
    endIp=startIp;
  }
 else   if (!NetUtils.isValidIp(endIp)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(gateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidNetmask(netmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  final String cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  URI uri=BroadcastDomainType.fromString(broadcastUriString);
  final String uriString=uri.toString();
  BroadcastDomainType tiep=BroadcastDomainType.getSchemeValue(uri);
  if (!(tiep == BroadcastDomainType.Vlan || tiep == BroadcastDomainType.Lswitch)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + broadcastUriString);
  }
  final NetworkOfferingVO ntwkOffFinal=ntwkOff;
  try {
    return Transaction.execute(new TransactionCallbackWithException<Network,Exception>(){
      @Override public Network doInTransaction(      TransactionStatus status) throws ResourceAllocationException, InsufficientCapacityException {
        DataCenterVO dc=_dcDao.lockRow(pNtwk.getDataCenterId(),true);
        Network privateNetwork=_networksDao.getPrivateNetwork(uriString,cidr,networkOwnerId,pNtwk.getDataCenterId(),networkOfferingId);
        if (privateNetwork == null) {
          privateNetwork=_networkMgr.createGuestNetwork(ntwkOffFinal.getId(),networkName,displayText,gateway,cidr,uriString,null,owner,null,pNtwk,pNtwk.getDataCenterId(),ACLType.Account,null,vpcId,null,null,true,null);
          if (privateNetwork != null) {
            s_logger.debug(""String_Node_Str"" + privateNetwork);
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"");
          }
        }
 else {
          s_logger.debug(""String_Node_Str"" + privateNetwork);
          if (vpcId != null && vpcId.equals(privateNetwork.getVpcId())) {
            throw new InvalidParameterValueException(""String_Node_Str"" + uriString + ""String_Node_Str""+ cidr+ ""String_Node_Str""+ ""String_Node_Str""+ vpcId+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
          }
        }
        PrivateIpVO privateIp=_privateIpDao.findByIpAndSourceNetworkIdAndVpcId(privateNetwork.getId(),startIp,vpcId);
        if (privateIp != null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + startIp + ""String_Node_Str""+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
        }
        Long mac=dc.getMacAddress();
        Long nextMac=mac + 1;
        dc.setMacAddress(nextMac);
        privateIp=new PrivateIpVO(startIp,privateNetwork.getId(),nextMac,vpcId,sourceNat);
        _privateIpDao.persist(privateIp);
        _dcDao.update(dc.getId(),dc);
        s_logger.debug(""String_Node_Str"" + privateNetwork + ""String_Node_Str"");
        return privateNetwork;
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,ResourceAllocationException.class);
    ExceptionUtil.rethrow(e,InsufficientCapacityException.class);
    throw new IllegalStateException(e);
  }
}","@Override @DB public Network createPrivateNetwork(final String networkName,final String displayText,long physicalNetworkId,String broadcastUriString,final String startIp,String endIp,final String gateway,String netmask,final long networkOwnerId,final Long vpcId,final Boolean sourceNat,final Long networkOfferingId) throws ResourceAllocationException, ConcurrentOperationException, InsufficientCapacityException {
  final Account owner=_accountMgr.getAccount(networkOwnerId);
  NetworkOfferingVO ntwkOff=null;
  if (networkOfferingId != null) {
    ntwkOff=_networkOfferingDao.findById(networkOfferingId);
  }
  if (ntwkOff == null) {
    ntwkOff=findSystemNetworkOffering(NetworkOffering.SystemPrivateGatewayNetworkOffering);
  }
  final PhysicalNetwork pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNtwk == null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    ex.addProxyObject(String.valueOf(physicalNetworkId),""String_Node_Str"");
    throw ex;
  }
  if (!NetUtils.isValidIp(startIp)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (endIp == null) {
    endIp=startIp;
  }
 else   if (!NetUtils.isValidIp(endIp)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(gateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidNetmask(netmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  final String cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  URI uri=BroadcastDomainType.fromString(broadcastUriString);
  final String uriString=uri.toString();
  BroadcastDomainType tiep=BroadcastDomainType.getSchemeValue(uri);
  if (!(tiep == BroadcastDomainType.Vlan || tiep == BroadcastDomainType.Lswitch)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + broadcastUriString);
  }
  final NetworkOfferingVO ntwkOffFinal=ntwkOff;
  try {
    return Transaction.execute(new TransactionCallbackWithException<Network,Exception>(){
      @Override public Network doInTransaction(      TransactionStatus status) throws ResourceAllocationException, InsufficientCapacityException {
        DataCenterVO dc=_dcDao.lockRow(pNtwk.getDataCenterId(),true);
        Network privateNetwork=_networksDao.getPrivateNetwork(uriString,cidr,networkOwnerId,pNtwk.getDataCenterId(),networkOfferingId);
        if (privateNetwork == null) {
          privateNetwork=_networkMgr.createGuestNetwork(ntwkOffFinal.getId(),networkName,displayText,gateway,cidr,uriString,null,owner,null,pNtwk,pNtwk.getDataCenterId(),ACLType.Account,null,vpcId,null,null,true,null);
          if (privateNetwork != null) {
            s_logger.debug(""String_Node_Str"" + privateNetwork);
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"");
          }
        }
 else {
          s_logger.debug(""String_Node_Str"" + privateNetwork);
          if (vpcId != null && vpcId.equals(privateNetwork.getVpcId())) {
            throw new InvalidParameterValueException(""String_Node_Str"" + uriString + ""String_Node_Str""+ cidr+ ""String_Node_Str""+ ""String_Node_Str""+ vpcId+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
          }
        }
        if (vpcId != null) {
          PrivateIpVO privateIp=_privateIpDao.findByIpAndSourceNetworkIdAndVpcId(privateNetwork.getId(),startIp,vpcId);
          if (privateIp != null) {
            throw new InvalidParameterValueException(""String_Node_Str"" + startIp + ""String_Node_Str""+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
          }
          Long mac=dc.getMacAddress();
          Long nextMac=mac + 1;
          dc.setMacAddress(nextMac);
          privateIp=new PrivateIpVO(startIp,privateNetwork.getId(),nextMac,vpcId,sourceNat);
          _privateIpDao.persist(privateIp);
          _dcDao.update(dc.getId(),dc);
        }
        s_logger.debug(""String_Node_Str"" + privateNetwork + ""String_Node_Str"");
        return privateNetwork;
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,ResourceAllocationException.class);
    ExceptionUtil.rethrow(e,InsufficientCapacityException.class);
    throw new IllegalStateException(e);
  }
}",0.9932019817951376
105617,"@Override public Network doInTransaction(TransactionStatus status) throws ResourceAllocationException, InsufficientCapacityException {
  DataCenterVO dc=_dcDao.lockRow(pNtwk.getDataCenterId(),true);
  Network privateNetwork=_networksDao.getPrivateNetwork(uriString,cidr,networkOwnerId,pNtwk.getDataCenterId(),networkOfferingId);
  if (privateNetwork == null) {
    privateNetwork=_networkMgr.createGuestNetwork(ntwkOffFinal.getId(),networkName,displayText,gateway,cidr,uriString,null,owner,null,pNtwk,pNtwk.getDataCenterId(),ACLType.Account,null,vpcId,null,null,true,null);
    if (privateNetwork != null) {
      s_logger.debug(""String_Node_Str"" + privateNetwork);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + privateNetwork);
    if (vpcId != null && vpcId.equals(privateNetwork.getVpcId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + uriString + ""String_Node_Str""+ cidr+ ""String_Node_Str""+ ""String_Node_Str""+ vpcId+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
    }
  }
  PrivateIpVO privateIp=_privateIpDao.findByIpAndSourceNetworkIdAndVpcId(privateNetwork.getId(),startIp,vpcId);
  if (privateIp != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + startIp + ""String_Node_Str""+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
  }
  Long mac=dc.getMacAddress();
  Long nextMac=mac + 1;
  dc.setMacAddress(nextMac);
  privateIp=new PrivateIpVO(startIp,privateNetwork.getId(),nextMac,vpcId,sourceNat);
  _privateIpDao.persist(privateIp);
  _dcDao.update(dc.getId(),dc);
  s_logger.debug(""String_Node_Str"" + privateNetwork + ""String_Node_Str"");
  return privateNetwork;
}","@Override public Network doInTransaction(TransactionStatus status) throws ResourceAllocationException, InsufficientCapacityException {
  DataCenterVO dc=_dcDao.lockRow(pNtwk.getDataCenterId(),true);
  Network privateNetwork=_networksDao.getPrivateNetwork(uriString,cidr,networkOwnerId,pNtwk.getDataCenterId(),networkOfferingId);
  if (privateNetwork == null) {
    privateNetwork=_networkMgr.createGuestNetwork(ntwkOffFinal.getId(),networkName,displayText,gateway,cidr,uriString,null,owner,null,pNtwk,pNtwk.getDataCenterId(),ACLType.Account,null,vpcId,null,null,true,null);
    if (privateNetwork != null) {
      s_logger.debug(""String_Node_Str"" + privateNetwork);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + privateNetwork);
    if (vpcId != null && vpcId.equals(privateNetwork.getVpcId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + uriString + ""String_Node_Str""+ cidr+ ""String_Node_Str""+ ""String_Node_Str""+ vpcId+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
    }
  }
  if (vpcId != null) {
    PrivateIpVO privateIp=_privateIpDao.findByIpAndSourceNetworkIdAndVpcId(privateNetwork.getId(),startIp,vpcId);
    if (privateIp != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + startIp + ""String_Node_Str""+ ""String_Node_Str""+ _entityMgr.findById(DataCenter.class,pNtwk.getDataCenterId()).getName());
    }
    Long mac=dc.getMacAddress();
    Long nextMac=mac + 1;
    dc.setMacAddress(nextMac);
    privateIp=new PrivateIpVO(startIp,privateNetwork.getId(),nextMac,vpcId,sourceNat);
    _privateIpDao.persist(privateIp);
    _dcDao.update(dc.getId(),dc);
  }
  s_logger.debug(""String_Node_Str"" + privateNetwork + ""String_Node_Str"");
  return privateNetwork;
}",0.9871056241426612
105618,"private Network commitNetwork(final Long networkOfferingId,final String gateway,final String startIP,final String endIP,final String netmask,final String networkDomain,final String vlanId,final String name,final String displayText,final Account caller,final Long physicalNetworkId,final Long zoneId,final Long domainId,final boolean isDomainSpecific,final Boolean subdomainAccessFinal,final Long vpcId,final String startIPv6,final String endIPv6,final String ip6Gateway,final String ip6Cidr,final Boolean displayNetwork,final Long aclId,final String isolatedPvlan,final NetworkOfferingVO ntwkOff,final PhysicalNetwork pNtwk,final ACLType aclType,final Account ownerFinal,final String cidr,final boolean createVlan) throws InsufficientCapacityException, ResourceAllocationException {
  try {
    return Transaction.execute(new TransactionCallbackWithException<Network,Exception>(){
      @Override public Network doInTransaction(      TransactionStatus status) throws InsufficientCapacityException, ResourceAllocationException {
        Account owner=ownerFinal;
        Boolean subdomainAccess=subdomainAccessFinal;
        Long sharedDomainId=null;
        if (isDomainSpecific) {
          if (domainId != null) {
            sharedDomainId=domainId;
          }
 else {
            sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
            subdomainAccess=true;
          }
        }
        if (aclType == ACLType.Domain) {
          owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
        }
        Network network=null;
        if (vpcId != null) {
          if (!_configMgr.isOfferingForVpc(ntwkOff)) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          if (aclId != null) {
            NetworkACL acl=_networkACLDao.findById(aclId);
            if (acl == null) {
              throw new InvalidParameterValueException(""String_Node_Str"");
            }
            if (aclId != NetworkACL.DEFAULT_DENY && aclId != NetworkACL.DEFAULT_ALLOW) {
              if (!vpcId.equals(acl.getVpcId())) {
                throw new InvalidParameterValueException(""String_Node_Str"" + aclId + ""String_Node_Str"");
              }
            }
          }
          network=_vpcMgr.createVpcGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,aclId,caller,displayNetwork);
        }
 else {
          if (_configMgr.isOfferingForVpc(ntwkOff)) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          if (ntwkOff.getInternalLb()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          network=_networkMgr.createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,ip6Gateway,ip6Cidr,displayNetwork,isolatedPvlan);
        }
        if (_accountMgr.isRootAdmin(caller.getId()) && createVlan) {
          _configMgr.createVlanAndPublicIpRange(pNtwk.getDataCenterId(),network.getId(),physicalNetworkId,false,null,startIP,endIP,gateway,netmask,vlanId,null,startIPv6,endIPv6,ip6Gateway,ip6Cidr);
        }
        return network;
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,InsufficientCapacityException.class);
    ExceptionUtil.rethrow(e,ResourceAllocationException.class);
    throw new IllegalStateException(e);
  }
}","private Network commitNetwork(final Long networkOfferingId,final String gateway,final String startIP,final String endIP,final String netmask,final String networkDomain,final String vlanId,final String name,final String displayText,final Account caller,final Long physicalNetworkId,final Long zoneId,final Long domainId,final boolean isDomainSpecific,final Boolean subdomainAccessFinal,final Long vpcId,final String startIPv6,final String endIPv6,final String ip6Gateway,final String ip6Cidr,final Boolean displayNetwork,final Long aclId,final String isolatedPvlan,final NetworkOfferingVO ntwkOff,final PhysicalNetwork pNtwk,final ACLType aclType,final Account ownerFinal,final String cidr,final boolean createVlan) throws InsufficientCapacityException, ResourceAllocationException {
  try {
    return Transaction.execute(new TransactionCallbackWithException<Network,Exception>(){
      @Override public Network doInTransaction(      TransactionStatus status) throws InsufficientCapacityException, ResourceAllocationException {
        Account owner=ownerFinal;
        Boolean subdomainAccess=subdomainAccessFinal;
        Long sharedDomainId=null;
        if (isDomainSpecific) {
          if (domainId != null) {
            sharedDomainId=domainId;
          }
 else {
            sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
            subdomainAccess=true;
          }
        }
        if (aclType == ACLType.Domain) {
          owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
        }
        Network network=null;
        if (vpcId != null) {
          if (!_configMgr.isOfferingForVpc(ntwkOff)) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          if (aclId != null) {
            NetworkACL acl=_networkACLDao.findById(aclId);
            if (acl == null) {
              throw new InvalidParameterValueException(""String_Node_Str"");
            }
            if (aclId != NetworkACL.DEFAULT_DENY && aclId != NetworkACL.DEFAULT_ALLOW) {
              if (!vpcId.equals(acl.getVpcId())) {
                throw new InvalidParameterValueException(""String_Node_Str"" + aclId + ""String_Node_Str"");
              }
            }
          }
          network=_vpcMgr.createVpcGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,aclId,caller,displayNetwork);
        }
 else {
          if (_configMgr.isOfferingForVpc(ntwkOff)) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          if (ntwkOff.getInternalLb()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          network=_networkMgr.createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess,vpcId,ip6Gateway,ip6Cidr,displayNetwork,isolatedPvlan);
        }
        if (_accountMgr.isRootAdmin(caller.getId()) && createVlan && network != null) {
          _configMgr.createVlanAndPublicIpRange(pNtwk.getDataCenterId(),network.getId(),physicalNetworkId,false,null,startIP,endIP,gateway,netmask,vlanId,null,startIPv6,endIPv6,ip6Gateway,ip6Cidr);
        }
        return network;
      }
    }
);
  }
 catch (  Exception e) {
    ExceptionUtil.rethrowRuntime(e);
    ExceptionUtil.rethrow(e,InsufficientCapacityException.class);
    ExceptionUtil.rethrow(e,ResourceAllocationException.class);
    throw new IllegalStateException(e);
  }
}",0.9973045822102424
105619,"@Override protected void runInContext(){
  try {
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.debug(""String_Node_Str"");
      return;
    }
    if (!lock.lock(30)) {
      s_logger.debug(""String_Node_Str"");
      return;
    }
    try {
      List<VpcVO> inactiveVpcs=_vpcDao.listInactiveVpcs();
      s_logger.info(""String_Node_Str"" + inactiveVpcs.size() + ""String_Node_Str"");
      for (      VpcVO vpc : inactiveVpcs) {
        s_logger.debug(""String_Node_Str"" + vpc);
        destroyVpc(vpc,_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM),User.UID_SYSTEM);
      }
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
    }
 finally {
      lock.unlock();
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
}","@Override protected void runInContext(){
  try {
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.debug(""String_Node_Str"");
      return;
    }
    if (!lock.lock(30)) {
      s_logger.debug(""String_Node_Str"");
      return;
    }
    try {
      List<VpcVO> inactiveVpcs=_vpcDao.listInactiveVpcs();
      if (inactiveVpcs != null) {
        s_logger.info(""String_Node_Str"" + inactiveVpcs.size() + ""String_Node_Str"");
        for (        VpcVO vpc : inactiveVpcs) {
          s_logger.debug(""String_Node_Str"" + vpc);
          destroyVpc(vpc,_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM),User.UID_SYSTEM);
        }
      }
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"",e);
    }
 finally {
      lock.unlock();
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
}",0.955399061032864
105620,"public List<LdapUser> getUsersInGroup(String groupName,DirContext context) throws NamingException {
  String attributeName=_ldapConfiguration.getGroupUniqueMemeberAttribute();
  final SearchControls controls=new SearchControls();
  controls.setSearchScope(_ldapConfiguration.getScope());
  controls.setReturningAttributes(new String[]{attributeName});
  NamingEnumeration<SearchResult> result=context.search(_ldapConfiguration.getBaseDn(),generateGroupSearchFilter(groupName),controls);
  final List<LdapUser> users=new ArrayList<LdapUser>();
  if (result.hasMoreElements()) {
    Attribute attribute=result.nextElement().getAttributes().get(attributeName);
    NamingEnumeration<?> values=attribute.getAll();
    while (values.hasMoreElements()) {
      String userdn=String.valueOf(values.nextElement());
      users.add(getUserForDn(userdn,context));
    }
  }
  Collections.sort(users);
  return users;
}","public List<LdapUser> getUsersInGroup(String groupName,DirContext context) throws NamingException {
  String attributeName=_ldapConfiguration.getGroupUniqueMemeberAttribute();
  final SearchControls controls=new SearchControls();
  controls.setSearchScope(_ldapConfiguration.getScope());
  controls.setReturningAttributes(new String[]{attributeName});
  NamingEnumeration<SearchResult> result=context.search(_ldapConfiguration.getBaseDn(),generateGroupSearchFilter(groupName),controls);
  final List<LdapUser> users=new ArrayList<LdapUser>();
  if (result.hasMoreElements()) {
    Attribute attribute=result.nextElement().getAttributes().get(attributeName);
    NamingEnumeration<?> values=attribute.getAll();
    while (values.hasMoreElements()) {
      String userdn=String.valueOf(values.nextElement());
      try {
        users.add(getUserForDn(userdn,context));
      }
 catch (      NamingException e) {
        s_logger.info(""String_Node_Str"" + userdn + ""String_Node_Str""+ e.getMessage());
      }
    }
  }
  Collections.sort(users);
  return users;
}",0.9227642276422764
105621,"@Override public Long getVirtualSize(File file){
  return file.length();
}","@Override public long getVirtualSize(File file){
  return file.length();
}",0.9864864864864864
105622,"@Override public Long getVirtualSize(File file){
  try {
    long size=getTemplateVirtualSize(file.getParent(),file.getName());
    return size;
  }
 catch (  Exception e) {
  }
  return file.length();
}","@Override public long getVirtualSize(File file){
  try {
    long size=getTemplateVirtualSize(file.getParent(),file.getName());
    return size;
  }
 catch (  Exception e) {
  }
  return file.length();
}",0.9950738916256158
105623,Long getVirtualSize(File file);,long getVirtualSize(File file) throws IOException ;,0.7317073170731707
105624,"@Override public FormatInfo process(String templatePath,ImageFormat format,String templateName){
  if (format != null) {
    s_logger.debug(""String_Node_Str"" + format + ""String_Node_Str"");
    return null;
  }
  String qcow2Path=templatePath + File.separator + templateName+ ""String_Node_Str""+ ImageFormat.QCOW2.getFileExtension();
  if (!_storage.exists(qcow2Path)) {
    s_logger.debug(""String_Node_Str"" + qcow2Path);
    return null;
  }
  FormatInfo info=new FormatInfo();
  info.format=ImageFormat.QCOW2;
  info.filename=templateName + ""String_Node_Str"" + ImageFormat.QCOW2.getFileExtension();
  File qcow2File=_storage.getFile(qcow2Path);
  info.size=_storage.getSize(qcow2Path);
  FileInputStream strm=null;
  byte[] b=new byte[8];
  try {
    strm=new FileInputStream(qcow2File);
    strm.skip(24);
    strm.read(b);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + qcow2Path,e);
    return null;
  }
 finally {
    if (strm != null) {
      try {
        strm.close();
      }
 catch (      IOException e) {
      }
    }
  }
  long templateSize=NumbersUtil.bytesToLong(b);
  info.virtualSize=templateSize;
  return info;
}","@Override public FormatInfo process(String templatePath,ImageFormat format,String templateName){
  if (format != null) {
    s_logger.debug(""String_Node_Str"" + format + ""String_Node_Str"");
    return null;
  }
  String qcow2Path=templatePath + File.separator + templateName+ ""String_Node_Str""+ ImageFormat.QCOW2.getFileExtension();
  if (!_storage.exists(qcow2Path)) {
    s_logger.debug(""String_Node_Str"" + qcow2Path);
    return null;
  }
  FormatInfo info=new FormatInfo();
  info.format=ImageFormat.QCOW2;
  info.filename=templateName + ""String_Node_Str"" + ImageFormat.QCOW2.getFileExtension();
  File qcow2File=_storage.getFile(qcow2Path);
  info.size=_storage.getSize(qcow2Path);
  try {
    info.virtualSize=getVirtualSize(qcow2File);
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"" + qcow2File.getName());
    return null;
  }
  return info;
}",0.7273626917367639
105625,"@Override public Long getVirtualSize(File file){
  FileInputStream strm=null;
  byte[] b=new byte[8];
  try {
    strm=new FileInputStream(file);
    strm.skip(24);
    strm.read(b);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + file,e);
    return null;
  }
 finally {
    if (strm != null) {
      try {
        strm.close();
      }
 catch (      IOException e) {
      }
    }
  }
  long templateSize=NumbersUtil.bytesToLong(b);
  return templateSize;
}","@Override public long getVirtualSize(File file) throws IOException {
  byte[] b=new byte[8];
  try (FileInputStream strm=new FileInputStream(file)){
    if (strm.skip(VIRTUALSIZE_HEADER_LOCATION) != VIRTUALSIZE_HEADER_LOCATION) {
      throw new IOException(""String_Node_Str"");
    }
    if (strm.read(b) != 8) {
      throw new IOException(""String_Node_Str"");
    }
  }
   return NumbersUtil.bytesToLong(b);
}",0.2567567567567567
105626,"@Override public Long getVirtualSize(File file){
  return file.length();
}","@Override public long getVirtualSize(File file){
  return file.length();
}",0.9864864864864864
105627,"@Override public Long getVirtualSize(File file){
  FileInputStream strm=null;
  byte[] currentSize=new byte[8];
  byte[] creatorApp=new byte[4];
  try {
    strm=new FileInputStream(file);
    strm.skip(file.length() - vhdFooterSize + vhdFooterCreatorAppOffset);
    strm.read(creatorApp);
    strm.skip(vhdFooterCurrentSizeOffset - vhdFooterCreatorVerOffset);
    strm.read(currentSize);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ e);
  }
 finally {
    if (strm != null) {
      try {
        strm.close();
      }
 catch (      IOException e) {
      }
    }
  }
  long templateSize=NumbersUtil.bytesToLong(currentSize);
  return templateSize;
}","@Override public long getVirtualSize(File file){
  FileInputStream strm=null;
  byte[] currentSize=new byte[8];
  byte[] creatorApp=new byte[4];
  try {
    strm=new FileInputStream(file);
    strm.skip(file.length() - vhdFooterSize + vhdFooterCreatorAppOffset);
    strm.read(creatorApp);
    strm.skip(vhdFooterCurrentSizeOffset - vhdFooterCreatorVerOffset);
    strm.read(currentSize);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ e);
  }
 finally {
    if (strm != null) {
      try {
        strm.close();
      }
 catch (      IOException e) {
      }
    }
  }
  long templateSize=NumbersUtil.bytesToLong(currentSize);
  return templateSize;
}",0.9987484355444304
105628,"@Override public Long getVirtualSize(File file){
  try {
    long size=getTemplateVirtualSize(file.getParent(),file.getName());
    return size;
  }
 catch (  Exception e) {
  }
  return file.length();
}","@Override public long getVirtualSize(File file){
  try {
    long size=getTemplateVirtualSize(file.getParent(),file.getName());
    return size;
  }
 catch (  Exception e) {
  }
  return file.length();
}",0.9950738916256158
105629,"public long getTemplateVirtualSize(String templatePath,String templateName) throws InternalErrorException {
  long virtualSize=0;
  String templateFileFullPath=templatePath.endsWith(File.separator) ? templatePath : templatePath + File.separator;
  templateFileFullPath+=templateName.endsWith(ImageFormat.VMDK.getFileExtension()) ? templateName : templateName + ""String_Node_Str"" + ImageFormat.VMDK.getFileExtension();
  String vmdkHeader=""String_Node_Str"";
  try {
    FileReader fileReader=new FileReader(templateFileFullPath);
    BufferedReader bufferedReader=new BufferedReader(fileReader);
    Pattern regex=Pattern.compile(""String_Node_Str"");
    String line=null;
    while ((line=bufferedReader.readLine()) != null) {
      Matcher m=regex.matcher(line);
      if (m.find()) {
        long sectors=Long.parseLong(m.group(2));
        virtualSize=sectors * 512;
        break;
      }
    }
    bufferedReader.close();
  }
 catch (  FileNotFoundException ex) {
    String msg=""String_Node_Str"" + templateFileFullPath + ""String_Node_Str""+ ex.toString();
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
catch (  IOException ex) {
    String msg=""String_Node_Str"" + templateFileFullPath + ""String_Node_Str""+ ex.toString();
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
  s_logger.debug(""String_Node_Str"" + virtualSize);
  return virtualSize;
}","public long getTemplateVirtualSize(String templatePath,String templateName) throws InternalErrorException {
  long virtualSize=0;
  String templateFileFullPath=templatePath.endsWith(File.separator) ? templatePath : templatePath + File.separator;
  templateFileFullPath+=templateName.endsWith(ImageFormat.VMDK.getFileExtension()) ? templateName : templateName + ""String_Node_Str"" + ImageFormat.VMDK.getFileExtension();
  try {
    FileReader fileReader=new FileReader(templateFileFullPath);
    BufferedReader bufferedReader=new BufferedReader(fileReader);
    Pattern regex=Pattern.compile(""String_Node_Str"");
    String line=null;
    while ((line=bufferedReader.readLine()) != null) {
      Matcher m=regex.matcher(line);
      if (m.find()) {
        long sectors=Long.parseLong(m.group(2));
        virtualSize=sectors * 512;
        break;
      }
    }
    bufferedReader.close();
  }
 catch (  FileNotFoundException ex) {
    String msg=""String_Node_Str"" + templateFileFullPath + ""String_Node_Str""+ ex.toString();
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
catch (  IOException ex) {
    String msg=""String_Node_Str"" + templateFileFullPath + ""String_Node_Str""+ ex.toString();
    s_logger.error(msg);
    throw new InternalErrorException(msg);
  }
  s_logger.debug(""String_Node_Str"" + virtualSize);
  return virtualSize;
}",0.9858439201451904
105630,"protected Long getVirtualSize(File file,ImageFormat format){
  Processor processor=null;
  try {
    if (format == null) {
      return file.length();
    }
 else     if (format == ImageFormat.QCOW2) {
      processor=new QCOW2Processor();
    }
 else     if (format == ImageFormat.OVA) {
      processor=new OVAProcessor();
    }
 else     if (format == ImageFormat.VHD) {
      processor=new VhdProcessor();
    }
 else     if (format == ImageFormat.RAW) {
      processor=new RawImageProcessor();
    }
 else     if (format == ImageFormat.VMDK) {
      processor=new VmdkProcessor();
    }
    if (processor == null) {
      return file.length();
    }
    processor.configure(""String_Node_Str"",new HashMap<String,Object>());
    return processor.getVirtualSize(file);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
  return file.length();
}","protected long getVirtualSize(File file,ImageFormat format){
  Processor processor=null;
  try {
    if (format == null) {
      return file.length();
    }
 else     if (format == ImageFormat.QCOW2) {
      processor=new QCOW2Processor();
    }
 else     if (format == ImageFormat.OVA) {
      processor=new OVAProcessor();
    }
 else     if (format == ImageFormat.VHD) {
      processor=new VhdProcessor();
    }
 else     if (format == ImageFormat.RAW) {
      processor=new RawImageProcessor();
    }
 else     if (format == ImageFormat.VMDK) {
      processor=new VmdkProcessor();
    }
    if (processor == null) {
      return file.length();
    }
    processor.configure(""String_Node_Str"",new HashMap<String,Object>());
    return processor.getVirtualSize(file);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return file.length();
  }
}",0.9890992541594952
105631,"@DB protected void createDefaultNetworkOfferings(){
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemPublicNetwork,TrafficType.Public,true);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemManagementNetwork,TrafficType.Management,false);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemControlNetwork,TrafficType.Control,false);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemStorageNetwork,TrafficType.Storage,true);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  NetworkOfferingVO privateGatewayNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemPrivateGatewayNetworkOffering,GuestType.Isolated);
  privateGatewayNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(privateGatewayNetworkOffering);
  final Map<Network.Service,Network.Provider> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  final Map<Network.Service,Network.Provider> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  final Map<Network.Service,Network.Provider> defaultSharedSGNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultSharedSGNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.SecurityGroup,Provider.SecurityGroupProvider);
  final Map<Network.Service,Network.Provider> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,Provider.VirtualRouter);
  final Map<Network.Service,Network.Provider> netscalerServiceProviders=new HashMap<Network.Service,Network.Provider>();
  netscalerServiceProviders.put(Service.Dhcp,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.Dns,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.UserData,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.SecurityGroup,Provider.SecurityGroupProvider);
  netscalerServiceProviders.put(Service.StaticNat,Provider.Netscaler);
  netscalerServiceProviders.put(Service.Lb,Provider.Netscaler);
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      NetworkOfferingVO defaultSharedSGNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,true,false,false,false);
      defaultSharedSGNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultSharedSGNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultSharedSGNetworkOffering);
      for (      Service service : defaultSharedSGNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultSharedSGNetworkOffering.getId(),service,defaultSharedSGNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultSharedNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedNetworkOffering,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,true,false,false,false);
      defaultSharedNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultSharedNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultSharedNetworkOffering);
      for (      Service service : defaultSharedNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultSharedNetworkOffering.getId(),service,defaultSharedNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultIsolatedSourceNatEnabledNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Required,null,Network.GuestType.Isolated,true,false,false,false,true);
      defaultIsolatedSourceNatEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultIsolatedSourceNatEnabledNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedSourceNatEnabledNetworkOffering);
      for (      Service service : defaultIsolatedSourceNatEnabledNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultIsolatedSourceNatEnabledNetworkOffering.getId(),service,defaultIsolatedSourceNatEnabledNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultIsolatedEnabledNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOffering,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,true,true,false,false,false);
      defaultIsolatedEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultIsolatedEnabledNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedEnabledNetworkOffering);
      for (      Service service : defaultIsolatedNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultIsolatedEnabledNetworkOffering.getId(),service,defaultIsolatedNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultNetscalerNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,false,false,false,true,true,true,false,false,true,true,false,false,false);
      defaultNetscalerNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultNetscalerNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetscalerNetworkOffering);
      for (      Service service : netscalerServiceProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetscalerNetworkOffering.getId(),service,netscalerServiceProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultNetworkOfferingForVpcNetworks=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,false,false,false,false,true);
      defaultNetworkOfferingForVpcNetworks.setState(NetworkOffering.State.Enabled);
      defaultNetworkOfferingForVpcNetworks=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetworkOfferingForVpcNetworks);
      Map<Network.Service,Network.Provider> defaultVpcNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
      defaultVpcNetworkOfferingProviders.put(Service.Dhcp,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Dns,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.UserData,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.NetworkACL,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Gateway,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Lb,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.SourceNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.StaticNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.PortForwarding,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Vpn,Provider.VPCVirtualRouter);
      for (      Service service : defaultVpcNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetworkOfferingForVpcNetworks.getId(),service,defaultVpcNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultNetworkOfferingForVpcNetworksNoLB=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,false,false,false,false,false);
      defaultNetworkOfferingForVpcNetworksNoLB.setState(NetworkOffering.State.Enabled);
      defaultNetworkOfferingForVpcNetworksNoLB=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetworkOfferingForVpcNetworksNoLB);
      Map<Network.Service,Network.Provider> defaultVpcNetworkOfferingProvidersNoLB=new HashMap<Network.Service,Network.Provider>();
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Dhcp,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Dns,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.UserData,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.NetworkACL,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Gateway,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.SourceNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.StaticNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.PortForwarding,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Vpn,Provider.VPCVirtualRouter);
      for (      Map.Entry<Service,Provider> entry : defaultVpcNetworkOfferingProvidersNoLB.entrySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetworkOfferingForVpcNetworksNoLB.getId(),entry.getKey(),entry.getValue());
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO internalLbOff=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,false,false,false,true,false);
      internalLbOff.setState(NetworkOffering.State.Enabled);
      internalLbOff=_networkOfferingDao.persistDefaultNetworkOffering(internalLbOff);
      Map<Network.Service,Network.Provider> internalLbOffProviders=new HashMap<Network.Service,Network.Provider>();
      internalLbOffProviders.put(Service.Dhcp,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.Dns,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.UserData,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.NetworkACL,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.Gateway,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.Lb,Provider.InternalLbVm);
      internalLbOffProviders.put(Service.SourceNat,Provider.VPCVirtualRouter);
      for (      Service service : internalLbOffProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(internalLbOff.getId(),service,internalLbOffProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
    }
  }
);
}","@DB protected void createDefaultNetworkOfferings(){
  NetworkOfferingVO publicNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemPublicNetwork,TrafficType.Public,true);
  publicNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(publicNetworkOffering);
  NetworkOfferingVO managementNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemManagementNetwork,TrafficType.Management,false);
  managementNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(managementNetworkOffering);
  NetworkOfferingVO controlNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemControlNetwork,TrafficType.Control,false);
  controlNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(controlNetworkOffering);
  NetworkOfferingVO storageNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemStorageNetwork,TrafficType.Storage,true);
  storageNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(storageNetworkOffering);
  NetworkOfferingVO privateGatewayNetworkOffering=new NetworkOfferingVO(NetworkOffering.SystemPrivateGatewayNetworkOffering,GuestType.Isolated);
  privateGatewayNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(privateGatewayNetworkOffering);
  final Map<Network.Service,Network.Provider> defaultSharedNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultSharedNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultSharedNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  final Map<Network.Service,Network.Provider> defaultIsolatedNetworkOfferingProviders=defaultSharedNetworkOfferingProviders;
  final Map<Network.Service,Network.Provider> defaultSharedSGNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultSharedSGNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  defaultSharedSGNetworkOfferingProviders.put(Service.SecurityGroup,Provider.SecurityGroupProvider);
  final Map<Network.Service,Network.Provider> defaultIsolatedSourceNatEnabledNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dhcp,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Dns,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.UserData,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Firewall,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Gateway,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Lb,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.SourceNat,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.StaticNat,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.PortForwarding,Provider.VirtualRouter);
  defaultIsolatedSourceNatEnabledNetworkOfferingProviders.put(Service.Vpn,Provider.VirtualRouter);
  final Map<Network.Service,Network.Provider> netscalerServiceProviders=new HashMap<Network.Service,Network.Provider>();
  netscalerServiceProviders.put(Service.Dhcp,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.Dns,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.UserData,Provider.VirtualRouter);
  netscalerServiceProviders.put(Service.SecurityGroup,Provider.SecurityGroupProvider);
  netscalerServiceProviders.put(Service.StaticNat,Provider.Netscaler);
  netscalerServiceProviders.put(Service.Lb,Provider.Netscaler);
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      NetworkOfferingVO defaultSharedSGNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedNetworkOfferingWithSGService,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,true,false,false,false);
      defaultSharedSGNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultSharedSGNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultSharedSGNetworkOffering);
      for (      Service service : defaultSharedSGNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultSharedSGNetworkOffering.getId(),service,defaultSharedSGNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultSharedNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedNetworkOffering,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,true,false,false,false);
      defaultSharedNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultSharedNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultSharedNetworkOffering);
      for (      Service service : defaultSharedNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultSharedNetworkOffering.getId(),service,defaultSharedNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultIsolatedSourceNatEnabledNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingWithSourceNatService,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Required,null,Network.GuestType.Isolated,true,false,false,false,true);
      defaultIsolatedSourceNatEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultIsolatedSourceNatEnabledNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedSourceNatEnabledNetworkOffering);
      for (      Service service : defaultIsolatedSourceNatEnabledNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultIsolatedSourceNatEnabledNetworkOffering.getId(),service,defaultIsolatedSourceNatEnabledNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultIsolatedEnabledNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOffering,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,true,true,false,false,false);
      defaultIsolatedEnabledNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultIsolatedEnabledNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultIsolatedEnabledNetworkOffering);
      for (      Service service : defaultIsolatedNetworkOfferingProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultIsolatedEnabledNetworkOffering.getId(),service,defaultIsolatedNetworkOfferingProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultNetscalerNetworkOffering=new NetworkOfferingVO(NetworkOffering.DefaultSharedEIPandELBNetworkOffering,""String_Node_Str"",TrafficType.Guest,false,true,null,null,true,Availability.Optional,null,Network.GuestType.Shared,true,false,false,false,true,true,true,false,false,true,true,false,false,false);
      defaultNetscalerNetworkOffering.setState(NetworkOffering.State.Enabled);
      defaultNetscalerNetworkOffering=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetscalerNetworkOffering);
      for (      Service service : netscalerServiceProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetscalerNetworkOffering.getId(),service,netscalerServiceProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultNetworkOfferingForVpcNetworks=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworks,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,false,false,false,false,true);
      defaultNetworkOfferingForVpcNetworks.setState(NetworkOffering.State.Enabled);
      defaultNetworkOfferingForVpcNetworks=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetworkOfferingForVpcNetworks);
      Map<Network.Service,Network.Provider> defaultVpcNetworkOfferingProviders=new HashMap<Network.Service,Network.Provider>();
      defaultVpcNetworkOfferingProviders.put(Service.Dhcp,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Dns,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.UserData,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.NetworkACL,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Gateway,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Lb,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.SourceNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.StaticNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.PortForwarding,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProviders.put(Service.Vpn,Provider.VPCVirtualRouter);
      for (      Map.Entry<Service,Provider> entry : defaultVpcNetworkOfferingProviders.entrySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetworkOfferingForVpcNetworks.getId(),entry.getKey(),entry.getValue());
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO defaultNetworkOfferingForVpcNetworksNoLB=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksNoLB,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,false,false,false,false,false);
      defaultNetworkOfferingForVpcNetworksNoLB.setState(NetworkOffering.State.Enabled);
      defaultNetworkOfferingForVpcNetworksNoLB=_networkOfferingDao.persistDefaultNetworkOffering(defaultNetworkOfferingForVpcNetworksNoLB);
      Map<Network.Service,Network.Provider> defaultVpcNetworkOfferingProvidersNoLB=new HashMap<Network.Service,Network.Provider>();
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Dhcp,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Dns,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.UserData,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.NetworkACL,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Gateway,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.SourceNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.StaticNat,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.PortForwarding,Provider.VPCVirtualRouter);
      defaultVpcNetworkOfferingProvidersNoLB.put(Service.Vpn,Provider.VPCVirtualRouter);
      for (      Map.Entry<Service,Provider> entry : defaultVpcNetworkOfferingProvidersNoLB.entrySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(defaultNetworkOfferingForVpcNetworksNoLB.getId(),entry.getKey(),entry.getValue());
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
      NetworkOfferingVO internalLbOff=new NetworkOfferingVO(NetworkOffering.DefaultIsolatedNetworkOfferingForVpcNetworksWithInternalLB,""String_Node_Str"",TrafficType.Guest,false,false,null,null,true,Availability.Optional,null,Network.GuestType.Isolated,false,false,false,true,false);
      internalLbOff.setState(NetworkOffering.State.Enabled);
      internalLbOff=_networkOfferingDao.persistDefaultNetworkOffering(internalLbOff);
      Map<Network.Service,Network.Provider> internalLbOffProviders=new HashMap<Network.Service,Network.Provider>();
      internalLbOffProviders.put(Service.Dhcp,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.Dns,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.UserData,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.NetworkACL,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.Gateway,Provider.VPCVirtualRouter);
      internalLbOffProviders.put(Service.Lb,Provider.InternalLbVm);
      internalLbOffProviders.put(Service.SourceNat,Provider.VPCVirtualRouter);
      for (      Service service : internalLbOffProviders.keySet()) {
        NetworkOfferingServiceMapVO offService=new NetworkOfferingServiceMapVO(internalLbOff.getId(),service,internalLbOffProviders.get(service));
        _ntwkOfferingServiceMapDao.persist(offService);
        s_logger.trace(""String_Node_Str"" + offService);
      }
    }
  }
);
}",0.9950028968713788
105632,"@Override public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering offering){
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setConserveMode(offering.isConserveMode());
  response.setSpecifyIpRanges(offering.getSpecifyIpRanges());
  response.setAvailability(offering.getAvailability().toString());
  response.setIsPersistent(offering.getIsPersistent());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  response.setEgressDefaultPolicy(offering.getEgressDefaultPolicy());
  response.setConcurrentConnections(offering.getConcurrentConnections());
  response.setSupportsStrechedL2Subnet(offering.getSupportsStrechedL2());
  Long so=null;
  if (offering.getServiceOfferingId() != null) {
    so=offering.getServiceOfferingId();
  }
 else {
    so=ApiDBUtils.findDefaultRouterServiceOffering();
  }
  if (so != null) {
    ServiceOffering soffering=ApiDBUtils.findServiceOfferingById(so);
    if (soffering != null) {
      response.setServiceOfferingId(soffering.getUuid());
    }
  }
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    if (Service.Lb == service) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(lbIsoaltion);
      CapabilityResponse eLb=new CapabilityResponse();
      eLb.setName(Capability.ElasticLb.getName());
      eLb.setValue(offering.getElasticLb() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(eLb);
      CapabilityResponse inline=new CapabilityResponse();
      inline.setName(Capability.InlineMode.getName());
      inline.setValue(offering.isInline() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(inline);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.SourceNat == service) {
      List<CapabilityResponse> capabilities=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(sharedSourceNat);
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(redundantRouter);
      svcRsp.setCapabilities(capabilities);
    }
 else     if (service == Service.StaticNat) {
      List<CapabilityResponse> staticNatCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse eIp=new CapabilityResponse();
      eIp.setName(Capability.ElasticIp.getName());
      eIp.setValue(offering.getElasticIp() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(eIp);
      CapabilityResponse associatePublicIp=new CapabilityResponse();
      associatePublicIp.setName(Capability.AssociatePublicIP.getName());
      associatePublicIp.setValue(offering.getAssociatePublicIP() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(associatePublicIp);
      svcRsp.setCapabilities(staticNatCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setForVpc(_configMgr.isOfferingForVpc(offering));
  response.setServices(serviceResponses);
  Map<Detail,String> details=_ntwkModel.getNtwkOffDetails(offering.getId());
  if (details != null && !details.isEmpty()) {
    response.setDetails(details);
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering offering){
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setConserveMode(offering.isConserveMode());
  response.setSpecifyIpRanges(offering.getSpecifyIpRanges());
  response.setAvailability(offering.getAvailability().toString());
  response.setIsPersistent(offering.getIsPersistent());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  response.setEgressDefaultPolicy(offering.getEgressDefaultPolicy());
  response.setConcurrentConnections(offering.getConcurrentConnections());
  response.setSupportsStrechedL2Subnet(offering.getSupportsStrechedL2());
  Long so=null;
  if (offering.getServiceOfferingId() != null) {
    so=offering.getServiceOfferingId();
  }
 else {
    so=ApiDBUtils.findDefaultRouterServiceOffering();
  }
  if (so != null) {
    ServiceOffering soffering=ApiDBUtils.findServiceOfferingById(so);
    if (soffering != null) {
      response.setServiceOfferingId(soffering.getUuid());
    }
  }
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> srvc_providers=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : srvc_providers) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    if (Service.Lb == service) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(lbIsoaltion);
      CapabilityResponse eLb=new CapabilityResponse();
      eLb.setName(Capability.ElasticLb.getName());
      eLb.setValue(offering.getElasticLb() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(eLb);
      CapabilityResponse inline=new CapabilityResponse();
      inline.setName(Capability.InlineMode.getName());
      inline.setValue(offering.isInline() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(inline);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.SourceNat == service) {
      List<CapabilityResponse> capabilities=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(sharedSourceNat);
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(redundantRouter);
      svcRsp.setCapabilities(capabilities);
    }
 else     if (service == Service.StaticNat) {
      List<CapabilityResponse> staticNatCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse eIp=new CapabilityResponse();
      eIp.setName(Capability.ElasticIp.getName());
      eIp.setValue(offering.getElasticIp() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(eIp);
      CapabilityResponse associatePublicIp=new CapabilityResponse();
      associatePublicIp.setName(Capability.AssociatePublicIP.getName());
      associatePublicIp.setValue(offering.getAssociatePublicIP() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(associatePublicIp);
      svcRsp.setCapabilities(staticNatCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setForVpc(_configMgr.isOfferingForVpc(offering));
  response.setServices(serviceResponses);
  Map<Detail,String> details=_ntwkModel.getNtwkOffDetails(offering.getId());
  if (details != null && !details.isEmpty()) {
    response.setDetails(details);
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9813664596273292
105633,"@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(tmpl.getUuid());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}","@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}",0.9970547574682936
105634,"@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  response.setSupportsDistributedRouter(offering.supportsDistributedRouter());
  response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  response.setSupportsDistributedRouter(offering.supportsDistributedRouter());
  response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> srvc_providers=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : srvc_providers) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.935251798561151
105635,"@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(StaticNatRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  response.setPublicIpAddressId(ip.getId());
  response.setPublicIpAddress(ip.getAddress().addr());
  if (ip != null && fwRule.getDestIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(ip.getAssociatedWithVmId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getUuid());
      response.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        response.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        response.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setStartPort(fwRule.getSourcePortStart());
  response.setEndPort(fwRule.getSourcePortEnd());
  response.setProtocol(fwRule.getProtocol());
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(StaticNatRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getId());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestIpAddress() != null) {
      UserVm vm=ApiDBUtils.findUserVmById(ip.getAssociatedWithVmId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setStartPort(fwRule.getSourcePortStart());
  response.setEndPort(fwRule.getSourcePortEnd());
  response.setProtocol(fwRule.getProtocol());
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9069591527987896
105636,"@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
}
response.setDomainName(domain.getName());
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}","@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
  response.setDomainName(domain.getName());
}
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}",0.994723926380368
105637,"@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Ip ip : lbInstances.keySet()) {
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    UserVm vm=lbInstances.get(ip);
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}","@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Map.Entry<Ip,UserVm> entry : lbInstances.entrySet()) {
    Ip ip=entry.getKey();
    UserVm vm=entry.getValue();
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}",0.9301152737752162
105638,"@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  response.setPublicIpAddressId(ip.getUuid());
  response.setPublicIpAddress(ip.getAddress().addr());
  if (ip != null && fwRule.getDestinationIpAddress() != null) {
    response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getUuid());
      response.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        response.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        response.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestinationIpAddress() != null) {
      response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
      UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9441736818786
105639,"protected void processResourceEvent(Integer event,Object... params){
  List<ResourceListener> lst=_lifeCycleListeners.get(event);
  if (lst == null || lst.size() == 0) {
    return;
  }
  String eventName;
  for (  ResourceListener l : lst) {
    if (event == ResourceListener.EVENT_DISCOVER_BEFORE) {
      l.processDiscoverEventBefore((Long)params[0],(Long)params[1],(Long)params[2],(URI)params[3],(String)params[4],(String)params[5],(List<String>)params[6]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_DISCOVER_AFTER) {
      l.processDiscoverEventAfter((Map<? extends ServerResource,Map<String,String>>)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_DELETE_HOST_BEFORE) {
      l.processDeleteHostEventBefore((HostVO)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_DELETE_HOST_AFTER) {
      l.processDeletHostEventAfter((HostVO)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_CANCEL_MAINTENANCE_BEFORE) {
      l.processCancelMaintenaceEventBefore((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_CANCEL_MAINTENANCE_AFTER) {
      l.processCancelMaintenaceEventAfter((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_PREPARE_MAINTENANCE_BEFORE) {
      l.processPrepareMaintenaceEventBefore((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event == ResourceListener.EVENT_PREPARE_MAINTENANCE_AFTER) {
      l.processPrepareMaintenaceEventAfter((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + event);
    }
    s_logger.debug(""String_Node_Str"" + eventName + ""String_Node_Str""+ l.getClass().getSimpleName());
  }
}","protected void processResourceEvent(Integer event,Object... params){
  List<ResourceListener> lst=_lifeCycleListeners.get(event);
  if (lst == null || lst.size() == 0) {
    return;
  }
  String eventName;
  for (  ResourceListener l : lst) {
    if (event.equals(ResourceListener.EVENT_DISCOVER_BEFORE)) {
      l.processDiscoverEventBefore((Long)params[0],(Long)params[1],(Long)params[2],(URI)params[3],(String)params[4],(String)params[5],(List<String>)params[6]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_DISCOVER_AFTER)) {
      l.processDiscoverEventAfter((Map<? extends ServerResource,Map<String,String>>)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_DELETE_HOST_BEFORE)) {
      l.processDeleteHostEventBefore((HostVO)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_DELETE_HOST_AFTER)) {
      l.processDeletHostEventAfter((HostVO)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_CANCEL_MAINTENANCE_BEFORE)) {
      l.processCancelMaintenaceEventBefore((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_CANCEL_MAINTENANCE_AFTER)) {
      l.processCancelMaintenaceEventAfter((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_PREPARE_MAINTENANCE_BEFORE)) {
      l.processPrepareMaintenaceEventBefore((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else     if (event.equals(ResourceListener.EVENT_PREPARE_MAINTENANCE_AFTER)) {
      l.processPrepareMaintenaceEventAfter((Long)params[0]);
      eventName=""String_Node_Str"";
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + event);
    }
    s_logger.debug(""String_Node_Str"" + eventName + ""String_Node_Str""+ l.getClass().getSimpleName());
  }
}",0.9732922444786852
105640,"private Object dispatchToStateAdapters(ResourceStateAdapter.Event event,boolean singleTaker,Object... args){
synchronized (_resourceStateAdapters) {
    Iterator<Map.Entry<String,ResourceStateAdapter>> it=_resourceStateAdapters.entrySet().iterator();
    Object result=null;
    while (it.hasNext()) {
      Map.Entry<String,ResourceStateAdapter> item=it.next();
      ResourceStateAdapter adapter=item.getValue();
      String msg=new String(""String_Node_Str"" + event + ""String_Node_Str""+ item.getKey());
      s_logger.debug(msg);
      if (event == ResourceStateAdapter.Event.CREATE_HOST_VO_FOR_CONNECTED) {
        result=adapter.createHostVOForConnectedAgent((HostVO)args[0],(StartupCommand[])args[1]);
        if (result != null && singleTaker) {
          break;
        }
      }
 else       if (event == ResourceStateAdapter.Event.CREATE_HOST_VO_FOR_DIRECT_CONNECT) {
        result=adapter.createHostVOForDirectConnectAgent((HostVO)args[0],(StartupCommand[])args[1],(ServerResource)args[2],(Map<String,String>)args[3],(List<String>)args[4]);
        if (result != null && singleTaker) {
          break;
        }
      }
 else       if (event == ResourceStateAdapter.Event.DELETE_HOST) {
        try {
          result=adapter.deleteHost((HostVO)args[0],(Boolean)args[1],(Boolean)args[2]);
          if (result != null) {
            break;
          }
        }
 catch (        UnableDeleteHostException e) {
          s_logger.debug(""String_Node_Str"" + adapter.getName() + ""String_Node_Str"",e);
          result=new ResourceStateAdapter.DeleteHostAnswer(false,true);
        }
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + event);
      }
    }
    return result;
  }
}","private Object dispatchToStateAdapters(ResourceStateAdapter.Event event,boolean singleTaker,Object... args){
synchronized (_resourceStateAdapters) {
    Iterator<Map.Entry<String,ResourceStateAdapter>> it=_resourceStateAdapters.entrySet().iterator();
    Object result=null;
    while (it.hasNext()) {
      Map.Entry<String,ResourceStateAdapter> item=it.next();
      ResourceStateAdapter adapter=item.getValue();
      String msg=""String_Node_Str"" + event + ""String_Node_Str""+ item.getKey();
      s_logger.debug(msg);
      if (event == ResourceStateAdapter.Event.CREATE_HOST_VO_FOR_CONNECTED) {
        result=adapter.createHostVOForConnectedAgent((HostVO)args[0],(StartupCommand[])args[1]);
        if (result != null && singleTaker) {
          break;
        }
      }
 else       if (event == ResourceStateAdapter.Event.CREATE_HOST_VO_FOR_DIRECT_CONNECT) {
        result=adapter.createHostVOForDirectConnectAgent((HostVO)args[0],(StartupCommand[])args[1],(ServerResource)args[2],(Map<String,String>)args[3],(List<String>)args[4]);
        if (result != null && singleTaker) {
          break;
        }
      }
 else       if (event == ResourceStateAdapter.Event.DELETE_HOST) {
        try {
          result=adapter.deleteHost((HostVO)args[0],(Boolean)args[1],(Boolean)args[2]);
          if (result != null) {
            break;
          }
        }
 catch (        UnableDeleteHostException e) {
          s_logger.debug(""String_Node_Str"" + adapter.getName() + ""String_Node_Str"",e);
          result=new ResourceStateAdapter.DeleteHostAnswer(false,true);
        }
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + event);
      }
    }
    return result;
  }
}",0.9964830011723328
105641,"@DB protected boolean doDeleteHost(final long hostId,boolean isForced,final boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(CallContext.current().getCallingUserId());
  final HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),host.getDataCenterId());
  if (!isForced && host.getResourceState() != ResourceState.Maintenance) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getUuid() + ""String_Node_Str"");
  }
  final List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,isForced,isForceDeleteStorage);
  if (answer == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ host.getHypervisorType()+ ""String_Node_Str""+ host.getType());
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
      _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
      _hostDetailsDao.deleteDetails(hostId);
      _hostGpuGroupsDao.deleteGpuEntries(hostId);
      host.setGuid(null);
      Long clusterId=host.getClusterId();
      host.setClusterId(null);
      _hostDao.update(host.getId(),host);
      _hostDao.remove(hostId);
      if (clusterId != null) {
        List<HostVO> hosts=listAllHostsInCluster(clusterId);
        if (hosts.size() == 0) {
          ClusterVO cluster=_clusterDao.findById(clusterId);
          cluster.setGuid(null);
          _clusterDao.update(clusterId,cluster);
        }
      }
      try {
        resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
      }
 catch (      NoTransitionException e) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
      }
      _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
      List<VMInstanceVO> vms=_vmDao.listByHostId(hostId);
      for (      VMInstanceVO vm : vms) {
        vm.setState(State.Stopped);
        vm.setHostId(null);
        _vmDao.persist(vm);
      }
      for (      StoragePoolHostVO pool : pools) {
        Long poolId=pool.getPoolId();
        StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
        if (storagePool.isLocal() && isForceDeleteStorage) {
          storagePool.setUuid(null);
          storagePool.setClusterId(null);
          _storagePoolDao.update(poolId,storagePool);
          _storagePoolDao.remove(poolId);
          s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
        }
      }
      Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
      SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
      hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
      hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
      _capacityDao.remove(hostCapacitySC);
      DedicatedResourceVO dr=_dedicatedDao.findByHostId(hostId);
      if (dr != null) {
        _dedicatedDao.remove(dr.getId());
      }
    }
  }
);
  return true;
}","@DB protected boolean doDeleteHost(final long hostId,boolean isForced,final boolean isForceDeleteStorage){
  _accountMgr.getActiveUser(CallContext.current().getCallingUserId());
  final HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),host.getDataCenterId());
  if (!isForced && host.getResourceState() != ResourceState.Maintenance) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getUuid() + ""String_Node_Str"");
  }
  final List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,isForced,isForceDeleteStorage);
  if (answer == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ host.getHypervisorType()+ ""String_Node_Str""+ host.getType());
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
      _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
      _hostDetailsDao.deleteDetails(hostId);
      _hostGpuGroupsDao.deleteGpuEntries(hostId);
      host.setGuid(null);
      Long clusterId=host.getClusterId();
      host.setClusterId(null);
      _hostDao.update(host.getId(),host);
      _hostDao.remove(hostId);
      if (clusterId != null) {
        List<HostVO> hosts=listAllHostsInCluster(clusterId);
        if (hosts.size() == 0) {
          ClusterVO cluster=_clusterDao.findById(clusterId);
          cluster.setGuid(null);
          _clusterDao.update(clusterId,cluster);
        }
      }
      try {
        resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
      }
 catch (      NoTransitionException e) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
      }
      _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
      List<VMInstanceVO> vms=_vmDao.listByHostId(hostId);
      for (      VMInstanceVO vm : vms) {
        vm.setState(State.Stopped);
        vm.setHostId(null);
        _vmDao.persist(vm);
      }
      for (      StoragePoolHostVO pool : pools) {
        Long poolId=pool.getPoolId();
        StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
        if (storagePool.isLocal() && isForceDeleteStorage) {
          storagePool.setUuid(null);
          storagePool.setClusterId(null);
          _storagePoolDao.update(poolId,storagePool);
          _storagePoolDao.remove(poolId);
          s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
        }
      }
      Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
      SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
      hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
      hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
      _capacityDao.remove(hostCapacitySC);
      DedicatedResourceVO dr=_dedicatedDao.findByHostId(hostId);
      if (dr != null) {
        _dedicatedDao.remove(dr.getId());
      }
    }
  }
);
  return true;
}",0.9983484723369116
105642,"private void dropInvalidKeyFromStoragePoolTable(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  String tableName : uniqueKeys.keySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,tableName,uniqueKeys.get(tableName),false);
  }
}","private void dropInvalidKeyFromStoragePoolTable(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  Map.Entry<String,List<String>> entry : uniqueKeys.entrySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,entry.getKey(),entry.getValue(),false);
  }
}",0.8638392857142857
105643,"protected SR getNfsSR(Connection conn,String poolid,String uuid,String server,String serverpath,String pooldesc){
  Map<String,String> deviceConfig=new HashMap<String,String>();
  try {
    serverpath=serverpath.replace(""String_Node_Str"",""String_Node_Str"");
    Set<SR> srs=SR.getAll(conn);
    for (    SR sr : srs) {
      if (!SRType.NFS.equals(sr.getType(conn))) {
        continue;
      }
      Set<PBD> pbds=sr.getPBDs(conn);
      if (pbds.isEmpty()) {
        continue;
      }
      PBD pbd=pbds.iterator().next();
      Map<String,String> dc=pbd.getDeviceConfig(conn);
      if (dc == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (server.equals(dc.get(""String_Node_Str"")) && serverpath.equals(dc.get(""String_Node_Str""))) {
        throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ uuid+ ""String_Node_Str""+ _host.uuid);
      }
    }
    deviceConfig.put(""String_Node_Str"",server);
    deviceConfig.put(""String_Node_Str"",serverpath);
    Host host=Host.getByUuid(conn,_host.uuid);
    Map<String,String> smConfig=new HashMap<String,String>();
    smConfig.put(""String_Node_Str"",""String_Node_Str"");
    SR sr=SR.create(conn,host,deviceConfig,new Long(0),uuid,poolid,SRType.NFS.toString(),""String_Node_Str"",true,smConfig);
    sr.scan(conn);
    return sr;
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pooldesc,e);
  }
catch (  XmlRpcException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pooldesc,e);
  }
}","protected SR getNfsSR(Connection conn,String poolid,String uuid,String server,String serverpath,String pooldesc){
  Map<String,String> deviceConfig=new HashMap<String,String>();
  try {
    serverpath=serverpath.replace(""String_Node_Str"",""String_Node_Str"");
    Set<SR> srs=SR.getAll(conn);
    if (srs != null && !srs.isEmpty()) {
      for (      SR sr : srs) {
        if (!SRType.NFS.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (server.equals(dc.get(""String_Node_Str"")) && serverpath.equals(dc.get(""String_Node_Str""))) {
          throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ uuid+ ""String_Node_Str""+ _host.uuid);
        }
      }
    }
    deviceConfig.put(""String_Node_Str"",server);
    deviceConfig.put(""String_Node_Str"",serverpath);
    Host host=Host.getByUuid(conn,_host.uuid);
    Map<String,String> smConfig=new HashMap<String,String>();
    smConfig.put(""String_Node_Str"",""String_Node_Str"");
    SR sr=SR.create(conn,host,deviceConfig,new Long(0),uuid,poolid,SRType.NFS.toString(),""String_Node_Str"",true,smConfig);
    sr.scan(conn);
    return sr;
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pooldesc,e);
  }
catch (  XmlRpcException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pooldesc,e);
  }
}",0.9424440034023248
105644,"protected String handleVmStartFailure(Connection conn,String vmName,VM vm,String message,Throwable th){
  String msg=""String_Node_Str"" + vmName + ""String_Node_Str""+ message;
  s_logger.warn(msg,th);
  if (vm == null) {
    return msg;
  }
  try {
    VM.Record vmr=vm.getRecord(conn);
    List<Network> networks=new ArrayList<Network>();
    for (    VIF vif : vmr.VIFs) {
      try {
        VIF.Record rec=vif.getRecord(conn);
        networks.add(rec.network);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    if (vmr.powerState == VmPowerState.RUNNING) {
      try {
        vm.hardShutdown(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    if (vm.getPowerState(conn) == VmPowerState.HALTED) {
      try {
        vm.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    for (    VBD vbd : vmr.VBDs) {
      try {
        vbd.unplug(conn);
        vbd.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    for (    VIF vif : vmr.VIFs) {
      try {
        vif.unplug(conn);
        vif.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    for (    Network network : networks) {
      if (network.getNameLabel(conn).startsWith(""String_Node_Str"")) {
        disableVlanNetwork(conn,network);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return msg;
}","protected String handleVmStartFailure(Connection conn,String vmName,VM vm,String message,Throwable th){
  String msg=""String_Node_Str"" + vmName + ""String_Node_Str""+ message;
  s_logger.warn(msg,th);
  if (vm == null) {
    return msg;
  }
  try {
    VM.Record vmr=vm.getRecord(conn);
    List<Network> networks=new ArrayList<Network>();
    for (    VIF vif : vmr.VIFs) {
      try {
        VIF.Record rec=vif.getRecord(conn);
        if (rec != null) {
          networks.add(rec.network);
        }
 else {
          s_logger.warn(""String_Node_Str"" + vif.toWireString() + ""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    if (vmr.powerState == VmPowerState.RUNNING) {
      try {
        vm.hardShutdown(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    if (vm.getPowerState(conn) == VmPowerState.HALTED) {
      try {
        vm.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    for (    VBD vbd : vmr.VBDs) {
      try {
        vbd.unplug(conn);
        vbd.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    for (    VIF vif : vmr.VIFs) {
      try {
        vif.unplug(conn);
        vif.destroy(conn);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
    for (    Network network : networks) {
      if (network.getNameLabel(conn).startsWith(""String_Node_Str"")) {
        disableVlanNetwork(conn,network);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return msg;
}",0.9570996978851964
105645,"private void cleanUpTmpDomVif(Connection conn,Network nw) throws XenAPIException, XmlRpcException {
  Pair<VM,VM.Record> vm=getControlDomain(conn);
  VM dom0=vm.first();
  Set<VIF> dom0Vifs=dom0.getVIFs(conn);
  for (  VIF v : dom0Vifs) {
    String vifName=""String_Node_Str"";
    try {
      VIF.Record vifr=v.getRecord(conn);
      if (v.getNetwork(conn).getUuid(conn).equals(nw.getUuid(conn))) {
        Map<String,String> config=vifr.otherConfig;
        vifName=config.get(""String_Node_Str"");
        s_logger.debug(""String_Node_Str"");
        v.destroy(conn);
        s_logger.debug(""String_Node_Str"" + vifName + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + vifName + ""String_Node_Str"",e);
    }
  }
}","private void cleanUpTmpDomVif(Connection conn,Network nw) throws XenAPIException, XmlRpcException {
  Pair<VM,VM.Record> vm=getControlDomain(conn);
  VM dom0=vm.first();
  Set<VIF> dom0Vifs=dom0.getVIFs(conn);
  for (  VIF v : dom0Vifs) {
    String vifName=""String_Node_Str"";
    try {
      VIF.Record vifr=v.getRecord(conn);
      if (v.getNetwork(conn).getUuid(conn).equals(nw.getUuid(conn))) {
        if (vifr != null) {
          Map<String,String> config=vifr.otherConfig;
          vifName=config.get(""String_Node_Str"");
        }
        s_logger.debug(""String_Node_Str"");
        v.destroy(conn);
        s_logger.debug(""String_Node_Str"" + vifName + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + vifName + ""String_Node_Str"",e);
    }
  }
}",0.9732142857142856
105646,"@Override public List<VMTemplateStoragePoolVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateStoragePoolVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  ResultSet rs=null;
  try {
    String sql=DOWNLOADS_STATE_DC_POD;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","@Override public List<VMTemplateStoragePoolVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateStoragePoolVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  String sql=DOWNLOADS_STATE_DC_POD;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}",0.8160351455244371
105647,"public List<VMTemplateStoragePoolVO> listByHostTemplate(long hostId,long templateId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  ResultSet rs=null;
  try {
    String sql=HOST_TEMPLATE_SEARCH;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,hostId);
    pstmt.setLong(2,templateId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","public List<VMTemplateStoragePoolVO> listByHostTemplate(long hostId,long templateId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  String sql=HOST_TEMPLATE_SEARCH;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,hostId);
    pstmt.setLong(2,templateId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}",0.7771124417831005
105648,"@DB protected EndPoint findEndPointInScope(Scope scope,String sqlBase,Long poolId){
  StringBuilder sbuilder=new StringBuilder();
  sbuilder.append(sqlBase);
  if (scope.getScopeType() == ScopeType.HOST) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.CLUSTER) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.ZONE) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
  sbuilder.append(""String_Node_Str"");
  String sql=sbuilder.toString();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  HostVO host=null;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,poolId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      host=hostDao.findById(id);
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  if (host == null) {
    return null;
  }
  return RemoteHostEndPoint.getHypervisorHostEndPoint(host);
}","@DB protected EndPoint findEndPointInScope(Scope scope,String sqlBase,Long poolId){
  StringBuilder sbuilder=new StringBuilder();
  sbuilder.append(sqlBase);
  if (scope.getScopeType() == ScopeType.HOST) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.CLUSTER) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.ZONE) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
  sbuilder.append(""String_Node_Str"");
  String sql=sbuilder.toString();
  HostVO host=null;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,poolId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        host=hostDao.findById(id);
      }
    }
 catch (    SQLException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  if (host == null) {
    return null;
  }
  return RemoteHostEndPoint.getHypervisorHostEndPoint(host);
}",0.8632075471698113
105649,"public static void main(String[] args){
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{""String_Node_Str"",""String_Node_Str""});
  for (  Class<?> cmdClass : cmdClasses) {
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (s_apiNameCmdClassMap.containsKey(apiName)) {
      Class<?> curCmd=s_apiNameCmdClassMap.get(apiName);
      if (curCmd.isAssignableFrom(cmdClass)) {
        s_apiNameCmdClassMap.put(apiName,cmdClass);
      }
 else       if (cmdClass.isAssignableFrom(curCmd)) {
        continue;
      }
 else {
        System.out.println(""String_Node_Str"" + cmdClass.getName() + ""String_Node_Str""+ apiName);
        continue;
      }
    }
 else {
      s_apiNameCmdClassMap.put(apiName,cmdClass);
    }
  }
  LinkedProperties preProcessedCommands=new LinkedProperties();
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      fileNames=iter.next().split(""String_Node_Str"");
    }
    if (arg.equals(""String_Node_Str"")) {
      s_dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    System.out.println(""String_Node_Str"");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try {
      FileInputStream in=new FileInputStream(fileName);
      preProcessedCommands.load(in);
      in.close();
    }
 catch (    FileNotFoundException ex) {
      System.out.println(""String_Node_Str"" + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      System.out.println(""String_Node_Str"" + ex1);
      System.exit(2);
    }
  }
  Iterator<?> propertiesIterator=preProcessedCommands.keys.iterator();
  while (propertiesIterator.hasNext()) {
    String key=(String)propertiesIterator.next();
    String preProcessedCommand=preProcessedCommands.getProperty(key);
    int splitIndex=preProcessedCommand.lastIndexOf(""String_Node_Str"");
    String commandRoleMask=preProcessedCommand.substring(splitIndex + 1);
    Class<?> cmdClass=s_apiNameCmdClassMap.get(key);
    if (cmdClass == null) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ preProcessedCommand);
      continue;
    }
    String commandName=cmdClass.getName();
    s_allApiCommands.put(key,commandName);
    short cmdPermissions=1;
    if (commandRoleMask != null) {
      cmdPermissions=Short.parseShort(commandRoleMask);
    }
    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {
      s_domainAdminApiCommands.put(key,commandName);
    }
    if ((cmdPermissions & USER_COMMAND) != 0) {
      s_regularUserApiCommands.put(key,commandName);
    }
  }
  s_allApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_domainAdminApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_regularUserApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_allApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_domainAdminApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_regularUserApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_allApiCommandsSorted.putAll(s_allApiCommands);
  s_domainAdminApiCommandsSorted.putAll(s_domainAdminApiCommands);
  s_regularUserApiCommandsSorted.putAll(s_regularUserApiCommands);
  try {
    XStream xs=new XStream();
    xs.alias(""String_Node_Str"",Command.class);
    xs.alias(""String_Node_Str"",Argument.class);
    String xmlDocDir=s_dirName + ""String_Node_Str"";
    String rootAdminDirName=xmlDocDir + ""String_Node_Str"";
    String domainAdminDirName=xmlDocDir + ""String_Node_Str"";
    String regularUserDirName=xmlDocDir + ""String_Node_Str"";
    (new File(rootAdminDirName)).mkdirs();
    (new File(domainAdminDirName)).mkdirs();
    (new File(regularUserDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(s_dirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream domainAdmin=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream outDomainAdminSorted=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUser=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUserSorted=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    Iterator<?> it=s_allApiCommands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(out);
        writeLoginCommand(rootAdmin);
        writeLoginCommand(domainAdmin);
        writeLoginCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(out);
        writeLogoutCommand(rootAdmin);
        writeLogoutCommand(domainAdmin);
        writeLogoutCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else {
        writeCommand(out,key);
        writeCommand(rootAdmin,key);
        if (!key.equals(""String_Node_Str"")) {
          ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRootAdminCommandOs,key);
          singleRootAdminCommandOs.close();
        }
        if (s_domainAdminApiCommands.containsKey(key)) {
          writeCommand(domainAdmin,key);
          ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleDomainAdminCommandOs,key);
          singleDomainAdminCommandOs.close();
        }
        if (s_regularUserApiCommands.containsKey(key)) {
          writeCommand(regularUser,key);
          ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRegularUserCommandOs,key);
          singleRegularUserCommandOs.close();
        }
      }
    }
    it=s_allApiCommandsSorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(rootAdminSorted);
        writeLoginCommand(outDomainAdminSorted);
        writeLoginCommand(regularUserSorted);
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(rootAdminSorted);
        writeLogoutCommand(outDomainAdminSorted);
        writeLogoutCommand(regularUserSorted);
      }
 else {
        writeCommand(rootAdminSorted,key);
        if (s_domainAdminApiCommands.containsKey(key)) {
          writeCommand(outDomainAdminSorted,key);
        }
        if (s_regularUserApiCommands.containsKey(key)) {
          writeCommand(regularUserSorted,key);
        }
      }
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    domainAdmin.close();
    outDomainAdminSorted.close();
    regularUser.close();
    regularUserSorted.close();
    writeAlertTypes(xmlDocDir);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}","public static void main(String[] args){
  Set<Class<?>> cmdClasses=ReflectUtil.getClassesWithAnnotation(APICommand.class,new String[]{""String_Node_Str"",""String_Node_Str""});
  for (  Class<?> cmdClass : cmdClasses) {
    String apiName=cmdClass.getAnnotation(APICommand.class).name();
    if (s_apiNameCmdClassMap.containsKey(apiName)) {
      Class<?> curCmd=s_apiNameCmdClassMap.get(apiName);
      if (curCmd.isAssignableFrom(cmdClass)) {
        s_apiNameCmdClassMap.put(apiName,cmdClass);
      }
 else       if (cmdClass.isAssignableFrom(curCmd)) {
        continue;
      }
 else {
        System.out.println(""String_Node_Str"" + cmdClass.getName() + ""String_Node_Str""+ apiName);
        continue;
      }
    }
 else {
      s_apiNameCmdClassMap.put(apiName,cmdClass);
    }
  }
  LinkedProperties preProcessedCommands=new LinkedProperties();
  String[] fileNames=null;
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      fileNames=iter.next().split(""String_Node_Str"");
    }
    if (arg.equals(""String_Node_Str"")) {
      s_dirName=iter.next();
    }
  }
  if ((fileNames == null) || (fileNames.length == 0)) {
    System.out.println(""String_Node_Str"");
    System.exit(2);
  }
  for (  String fileName : fileNames) {
    try (FileInputStream in=new FileInputStream(fileName)){
      preProcessedCommands.load(in);
    }
 catch (    FileNotFoundException ex) {
      System.out.println(""String_Node_Str"" + fileName);
      System.exit(2);
    }
catch (    IOException ex1) {
      System.out.println(""String_Node_Str"" + ex1);
      System.exit(2);
    }
  }
  Iterator<?> propertiesIterator=preProcessedCommands.keys.iterator();
  while (propertiesIterator.hasNext()) {
    String key=(String)propertiesIterator.next();
    String preProcessedCommand=preProcessedCommands.getProperty(key);
    int splitIndex=preProcessedCommand.lastIndexOf(""String_Node_Str"");
    String commandRoleMask=preProcessedCommand.substring(splitIndex + 1);
    Class<?> cmdClass=s_apiNameCmdClassMap.get(key);
    if (cmdClass == null) {
      System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ preProcessedCommand);
      continue;
    }
    String commandName=cmdClass.getName();
    s_allApiCommands.put(key,commandName);
    short cmdPermissions=1;
    if (commandRoleMask != null) {
      cmdPermissions=Short.parseShort(commandRoleMask);
    }
    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {
      s_domainAdminApiCommands.put(key,commandName);
    }
    if ((cmdPermissions & USER_COMMAND) != 0) {
      s_regularUserApiCommands.put(key,commandName);
    }
  }
  s_allApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_domainAdminApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_regularUserApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_allApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_domainAdminApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_regularUserApiCommands.put(""String_Node_Str"",""String_Node_Str"");
  s_allApiCommandsSorted.putAll(s_allApiCommands);
  s_domainAdminApiCommandsSorted.putAll(s_domainAdminApiCommands);
  s_regularUserApiCommandsSorted.putAll(s_regularUserApiCommands);
  try {
    XStream xs=new XStream();
    xs.alias(""String_Node_Str"",Command.class);
    xs.alias(""String_Node_Str"",Argument.class);
    String xmlDocDir=s_dirName + ""String_Node_Str"";
    String rootAdminDirName=xmlDocDir + ""String_Node_Str"";
    String domainAdminDirName=xmlDocDir + ""String_Node_Str"";
    String regularUserDirName=xmlDocDir + ""String_Node_Str"";
    (new File(rootAdminDirName)).mkdirs();
    (new File(domainAdminDirName)).mkdirs();
    (new File(regularUserDirName)).mkdirs();
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(s_dirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdmin=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream rootAdminSorted=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream domainAdmin=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream outDomainAdminSorted=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUser=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    ObjectOutputStream regularUserSorted=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str""),""String_Node_Str"");
    Iterator<?> it=s_allApiCommands.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(out);
        writeLoginCommand(rootAdmin);
        writeLoginCommand(domainAdmin);
        writeLoginCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLoginCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(out);
        writeLogoutCommand(rootAdmin);
        writeLogoutCommand(domainAdmin);
        writeLogoutCommand(regularUser);
        ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRootAdminCommandOs);
        singleRootAdminCommandOs.close();
        ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleDomainAdminCommandOs);
        singleDomainAdminCommandOs.close();
        ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""),""String_Node_Str"");
        writeLogoutCommand(singleRegularUserCommandOs);
        singleRegularUserCommandOs.close();
      }
 else {
        writeCommand(out,key);
        writeCommand(rootAdmin,key);
        if (!key.equals(""String_Node_Str"")) {
          ObjectOutputStream singleRootAdminCommandOs=xs.createObjectOutputStream(new FileWriter(rootAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRootAdminCommandOs,key);
          singleRootAdminCommandOs.close();
        }
        if (s_domainAdminApiCommands.containsKey(key)) {
          writeCommand(domainAdmin,key);
          ObjectOutputStream singleDomainAdminCommandOs=xs.createObjectOutputStream(new FileWriter(domainAdminDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleDomainAdminCommandOs,key);
          singleDomainAdminCommandOs.close();
        }
        if (s_regularUserApiCommands.containsKey(key)) {
          writeCommand(regularUser,key);
          ObjectOutputStream singleRegularUserCommandOs=xs.createObjectOutputStream(new FileWriter(regularUserDirName + ""String_Node_Str"" + key+ ""String_Node_Str""),""String_Node_Str"");
          writeCommand(singleRegularUserCommandOs,key);
          singleRegularUserCommandOs.close();
        }
      }
    }
    it=s_allApiCommandsSorted.keySet().iterator();
    while (it.hasNext()) {
      String key=(String)it.next();
      if (key.equals(""String_Node_Str"")) {
        writeLoginCommand(rootAdminSorted);
        writeLoginCommand(outDomainAdminSorted);
        writeLoginCommand(regularUserSorted);
      }
 else       if (key.equals(""String_Node_Str"")) {
        writeLogoutCommand(rootAdminSorted);
        writeLogoutCommand(outDomainAdminSorted);
        writeLogoutCommand(regularUserSorted);
      }
 else {
        writeCommand(rootAdminSorted,key);
        if (s_domainAdminApiCommands.containsKey(key)) {
          writeCommand(outDomainAdminSorted,key);
        }
        if (s_regularUserApiCommands.containsKey(key)) {
          writeCommand(regularUserSorted,key);
        }
      }
    }
    out.close();
    rootAdmin.close();
    rootAdminSorted.close();
    domainAdmin.close();
    outDomainAdminSorted.close();
    regularUser.close();
    regularUserSorted.close();
    writeAlertTypes(xmlDocDir);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.exit(2);
  }
}",0.9934370699693024
105650,"static void addDir(File dirObj,ZipOutputStream out) throws IOException {
  File[] files=dirObj.listFiles();
  byte[] tmpBuf=new byte[1024];
  String pathToDir=s_dirName;
  for (int i=0; i < files.length; i++) {
    if (files[i].isDirectory()) {
      addDir(files[i],out);
      continue;
    }
    FileInputStream in=new FileInputStream(files[i].getPath());
    out.putNextEntry(new ZipEntry(files[i].getPath().substring(pathToDir.length())));
    int len;
    while ((len=in.read(tmpBuf)) > 0) {
      out.write(tmpBuf,0,len);
    }
    out.closeEntry();
    in.close();
  }
}","static void addDir(File dirObj,ZipOutputStream out) throws IOException {
  File[] files=dirObj.listFiles();
  byte[] tmpBuf=new byte[1024];
  String pathToDir=s_dirName;
  for (int i=0; i < files.length; i++) {
    if (files[i].isDirectory()) {
      addDir(files[i],out);
      continue;
    }
    try (FileInputStream in=new FileInputStream(files[i].getPath())){
      out.putNextEntry(new ZipEntry(files[i].getPath().substring(pathToDir.length())));
      int len;
      while ((len=in.read(tmpBuf)) > 0) {
        out.write(tmpBuf,0,len);
      }
      out.closeEntry();
    }
 catch (    IOException ex) {
      s_logger.error(""String_Node_Str"" + ex.getMessage(),ex);
    }
  }
}",0.8763866877971473
105651,"private static void writeAlertTypes(String dirName){
  XStream xs=new XStream();
  xs.alias(""String_Node_Str"",Alert.class);
  try {
    ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(dirName + ""String_Node_Str""),""String_Node_Str"");
    for (    Field f : AlertManager.class.getFields()) {
      if (f.getClass().isAssignableFrom(Number.class)) {
        String name=f.getName().substring(11);
        Alert alert=new Alert(name,f.getInt(null));
        out.writeObject(alert);
      }
    }
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    s_logger.error(""String_Node_Str"",e);
  }
}","private static void writeAlertTypes(String dirName){
  XStream xs=new XStream();
  xs.alias(""String_Node_Str"",Alert.class);
  try (ObjectOutputStream out=xs.createObjectOutputStream(new FileWriter(dirName + ""String_Node_Str""),""String_Node_Str"")){
    for (    Field f : AlertManager.class.getFields()) {
      if (f.getClass().isAssignableFrom(Number.class)) {
        String name=f.getName().substring(11);
        Alert alert=new Alert(name,f.getInt(null));
        out.writeObject(alert);
      }
    }
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    s_logger.error(""String_Node_Str"",e);
  }
}",0.9800148038490007
105652,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  if (rootdisksize != null && !customparameterMap.containsKey(""String_Node_Str"")) {
    customparameterMap.put(""String_Node_Str"",rootdisksize.toString());
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  if (rootdisksize != null && !customparameterMap.containsKey(""String_Node_Str"")) {
    customparameterMap.put(""String_Node_Str"",rootdisksize.toString());
  }
  return customparameterMap;
}",0.9380917698470502
105653,"@Override public void handleVolumeSync(DataStore store){
  if (store == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long storeId=store.getId();
  String lockString=""String_Node_Str"" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=_volumeDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn(""String_Node_Str"" + volumeStore.getVolumeId() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info(""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString(""String_Node_Str"");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"";
              volumeStore.setErrorString(msg);
              s_logger.info(""String_Node_Str"");
              if (volumeStore.getDownloadUrl() == null) {
                msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str""+ volInfo.getInstallPath()+ ""String_Node_Str""+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info(""String_Node_Str"" + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                _volumeDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            toBeDownloaded.add(volumeStore);
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str"");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info(""String_Node_Str"");
                continue;
              }
            }
            s_logger.debug(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str""+ store.getName());
            VolumeInfo vol=volFactory.getVolume(volumeHost.getVolumeId());
            createVolumeAsync(vol,store);
          }
        }
        for (        Long uniqueName : volumeInfos.keySet()) {
          TemplateProp tInfo=volumeInfos.get(uniqueName);
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg=""String_Node_Str"";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info(""String_Node_Str"" + store.getName());
          }
 else {
            String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + lockString + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}","@Override public void handleVolumeSync(DataStore store){
  if (store == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long storeId=store.getId();
  String lockString=""String_Node_Str"" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=_volumeDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn(""String_Node_Str"" + volumeStore.getVolumeId() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info(""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString(""String_Node_Str"");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"";
              volumeStore.setErrorString(msg);
              s_logger.info(""String_Node_Str"");
              if (volumeStore.getDownloadUrl() == null) {
                msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str""+ volInfo.getInstallPath()+ ""String_Node_Str""+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info(""String_Node_Str"" + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                _volumeDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            toBeDownloaded.add(volumeStore);
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str"");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info(""String_Node_Str"");
                continue;
              }
            }
            s_logger.debug(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str""+ store.getName());
            VolumeInfo vol=volFactory.getVolume(volumeHost.getVolumeId());
            createVolumeAsync(vol,store);
          }
        }
        for (        Map.Entry<Long,TemplateProp> entry : volumeInfos.entrySet()) {
          Long uniqueName=entry.getKey();
          TemplateProp tInfo=entry.getValue();
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg=""String_Node_Str"";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info(""String_Node_Str"" + store.getName());
          }
 else {
            String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + lockString + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}",0.9832927818329278
105654,"@Override public LibvirtVMDef.InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException(""String_Node_Str"");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vNetId.equalsIgnoreCase(""String_Node_Str"") || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vNetId.equalsIgnoreCase(""String_Node_Str"") || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}","@Override public LibvirtVMDef.InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException(""String_Node_Str"");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase(""String_Node_Str"")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase(""String_Node_Str"")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}",0.987705990060162
105655,"/** 
 * From a list of files (each being one part of the multipart upload), concatentate all files into a single object that can be accessed by normal S3 calls.  This function could take a long time since a multipart is allowed to have upto 10,000 parts (each 5 gib long).   Amazon defines that while this operation is in progress whitespace is sent back to the client inorder to keep the HTTP connection alive.
 * @param mountedRoot - where both the source and dest buckets are located
 * @param destBucket - resulting location of the concatenated objects
 * @param fileName - resulting file name of the concatenated objects
 * @param sourceBucket - special bucket used to save uploaded file parts
 * @param parts - an array of file names in the sourceBucket
 * @param client - if not null, then keep the servlet connection alive while this potentially long concatentation takes place
 * @return OrderedPair with the first value the MD5 of the final object, and the second value the length of the final object
 */
@Override public OrderedPair<String,Long> concatentateObjects(String mountedRoot,String destBucket,String fileName,String sourceBucket,S3MultipartPart[] parts,OutputStream client){
  MessageDigest md5;
  long totalLength=0;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  File file=new File(getBucketFolderDir(mountedRoot,destBucket) + File.separatorChar + fileName);
  try {
    file.delete();
    file.createNewFile();
    final FileOutputStream fos=new FileOutputStream(file);
    byte[] buffer=new byte[4096];
    for (int i=0; i < parts.length; i++) {
      DataHandler nextPart=loadObject(mountedRoot,sourceBucket,parts[i].getPath());
      InputStream is=nextPart.getInputStream();
      int len=0;
      while ((len=is.read(buffer)) > 0) {
        fos.write(buffer,0,len);
        md5.update(buffer,0,len);
        totalLength+=len;
      }
      is.close();
      if (null != client) {
        client.write(new String(""String_Node_Str"").getBytes());
        client.flush();
      }
    }
    fos.close();
    return new OrderedPair<String,Long>(StringHelper.toHexString(md5.digest()),new Long(totalLength));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
    throw new OutOfStorageException(e);
  }
}","/** 
 * From a list of files (each being one part of the multipart upload), concatentate all files into a single object that can be accessed by normal S3 calls.  This function could take a long time since a multipart is allowed to have upto 10,000 parts (each 5 gib long).   Amazon defines that while this operation is in progress whitespace is sent back to the client inorder to keep the HTTP connection alive.
 * @param mountedRoot - where both the source and dest buckets are located
 * @param destBucket - resulting location of the concatenated objects
 * @param fileName - resulting file name of the concatenated objects
 * @param sourceBucket - special bucket used to save uploaded file parts
 * @param parts - an array of file names in the sourceBucket
 * @param client - if not null, then keep the servlet connection alive while this potentially long concatentation takes place
 * @return OrderedPair with the first value the MD5 of the final object, and the second value the length of the final object
 */
@Override public OrderedPair<String,Long> concatentateObjects(String mountedRoot,String destBucket,String fileName,String sourceBucket,S3MultipartPart[] parts,OutputStream client){
  MessageDigest md5;
  long totalLength=0;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
    throw new InternalErrorException(""String_Node_Str"",e);
  }
  File file=new File(getBucketFolderDir(mountedRoot,destBucket) + File.separatorChar + fileName);
  try {
    file.delete();
    file.createNewFile();
    try (final FileOutputStream fos=new FileOutputStream(file)){
      byte[] buffer=new byte[4096];
      for (int i=0; i < parts.length; i++) {
        DataHandler nextPart=loadObject(mountedRoot,sourceBucket,parts[i].getPath());
        InputStream is=nextPart.getInputStream();
        int len=0;
        while ((len=is.read(buffer)) > 0) {
          fos.write(buffer,0,len);
          md5.update(buffer,0,len);
          totalLength+=len;
        }
        is.close();
        if (null != client) {
          client.write(new String(""String_Node_Str"").getBytes());
          client.flush();
        }
      }
      return new OrderedPair<String,Long>(StringHelper.toHexString(md5.digest()),new Long(totalLength));
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new OutOfStorageException(e);
    }
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + e.getMessage(),e);
    throw new OutOfStorageException(e);
  }
}",0.9607920792079208
105656,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  if (rootdisksize != null && !customparameterMap.containsKey(""String_Node_Str"")) {
    customparameterMap.put(""String_Node_Str"",rootdisksize.toString());
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  if (rootdisksize != null && !customparameterMap.containsKey(""String_Node_Str"")) {
    customparameterMap.put(""String_Node_Str"",rootdisksize.toString());
  }
  return customparameterMap;
}",0.9380917698470502
105657,"@Override public List<VMTemplateStoragePoolVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateStoragePoolVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  ResultSet rs=null;
  try {
    String sql=DOWNLOADS_STATE_DC_POD;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","@Override public List<VMTemplateStoragePoolVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateStoragePoolVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  String sql=DOWNLOADS_STATE_DC_POD;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}",0.8160351455244371
105658,"public List<VMTemplateStoragePoolVO> listByHostTemplate(long hostId,long templateId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  ResultSet rs=null;
  try {
    String sql=HOST_TEMPLATE_SEARCH;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,hostId);
    pstmt.setLong(2,templateId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}","public List<VMTemplateStoragePoolVO> listByHostTemplate(long hostId,long templateId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  String sql=HOST_TEMPLATE_SEARCH;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,hostId);
    pstmt.setLong(2,templateId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}",0.7771124417831005
105659,"private void dropInvalidKeyFromStoragePoolTable(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  String tableName : uniqueKeys.keySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,tableName,uniqueKeys.get(tableName),false);
  }
}","private void dropInvalidKeyFromStoragePoolTable(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  Map.Entry<String,List<String>> entry : uniqueKeys.entrySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,entry.getKey(),entry.getValue(),false);
  }
}",0.8638392857142857
105660,"@DB protected EndPoint findEndPointInScope(Scope scope,String sqlBase,Long poolId){
  StringBuilder sbuilder=new StringBuilder();
  sbuilder.append(sqlBase);
  if (scope.getScopeType() == ScopeType.HOST) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.CLUSTER) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.ZONE) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
  sbuilder.append(""String_Node_Str"");
  String sql=sbuilder.toString();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  HostVO host=null;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,poolId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      host=hostDao.findById(id);
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  if (host == null) {
    return null;
  }
  return RemoteHostEndPoint.getHypervisorHostEndPoint(host);
}","@DB protected EndPoint findEndPointInScope(Scope scope,String sqlBase,Long poolId){
  StringBuilder sbuilder=new StringBuilder();
  sbuilder.append(sqlBase);
  if (scope.getScopeType() == ScopeType.HOST) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.CLUSTER) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.ZONE) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
  sbuilder.append(""String_Node_Str"");
  String sql=sbuilder.toString();
  HostVO host=null;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,poolId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        host=hostDao.findById(id);
      }
    }
 catch (    SQLException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  if (host == null) {
    return null;
  }
  return RemoteHostEndPoint.getHypervisorHostEndPoint(host);
}",0.8632075471698113
105661,"@Override public void handleVolumeSync(DataStore store){
  if (store == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long storeId=store.getId();
  String lockString=""String_Node_Str"" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=_volumeDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn(""String_Node_Str"" + volumeStore.getVolumeId() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info(""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString(""String_Node_Str"");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"";
              volumeStore.setErrorString(msg);
              s_logger.info(""String_Node_Str"");
              if (volumeStore.getDownloadUrl() == null) {
                msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str""+ volInfo.getInstallPath()+ ""String_Node_Str""+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info(""String_Node_Str"" + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                _volumeDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            toBeDownloaded.add(volumeStore);
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str"");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info(""String_Node_Str"");
                continue;
              }
            }
            s_logger.debug(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str""+ store.getName());
            VolumeInfo vol=volFactory.getVolume(volumeHost.getVolumeId());
            createVolumeAsync(vol,store);
          }
        }
        for (        Long uniqueName : volumeInfos.keySet()) {
          TemplateProp tInfo=volumeInfos.get(uniqueName);
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg=""String_Node_Str"";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info(""String_Node_Str"" + store.getName());
          }
 else {
            String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + lockString + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}","@Override public void handleVolumeSync(DataStore store){
  if (store == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long storeId=store.getId();
  String lockString=""String_Node_Str"" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=_volumeDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn(""String_Node_Str"" + volumeStore.getVolumeId() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info(""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString(""String_Node_Str"");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"";
              volumeStore.setErrorString(msg);
              s_logger.info(""String_Node_Str"");
              if (volumeStore.getDownloadUrl() == null) {
                msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str""+ volInfo.getInstallPath()+ ""String_Node_Str""+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info(""String_Node_Str"" + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                _volumeDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            toBeDownloaded.add(volumeStore);
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str"");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info(""String_Node_Str"");
                continue;
              }
            }
            s_logger.debug(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str""+ store.getName());
            VolumeInfo vol=volFactory.getVolume(volumeHost.getVolumeId());
            createVolumeAsync(vol,store);
          }
        }
        for (        Map.Entry<Long,TemplateProp> entry : volumeInfos.entrySet()) {
          Long uniqueName=entry.getKey();
          TemplateProp tInfo=entry.getValue();
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg=""String_Node_Str"";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info(""String_Node_Str"" + store.getName());
          }
 else {
            String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + lockString + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}",0.9832927818329278
105662,"@Override public LibvirtVMDef.InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException(""String_Node_Str"");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vNetId.equalsIgnoreCase(""String_Node_Str"") || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vNetId.equalsIgnoreCase(""String_Node_Str"") || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}","@Override public LibvirtVMDef.InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException(""String_Node_Str"");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase(""String_Node_Str"")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase(""String_Node_Str"")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}",0.987705990060162
105663,"@Override public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering offering){
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setConserveMode(offering.isConserveMode());
  response.setSpecifyIpRanges(offering.getSpecifyIpRanges());
  response.setAvailability(offering.getAvailability().toString());
  response.setIsPersistent(offering.getIsPersistent());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  response.setEgressDefaultPolicy(offering.getEgressDefaultPolicy());
  response.setConcurrentConnections(offering.getConcurrentConnections());
  response.setSupportsStrechedL2Subnet(offering.getSupportsStrechedL2());
  Long so=null;
  if (offering.getServiceOfferingId() != null) {
    so=offering.getServiceOfferingId();
  }
 else {
    so=ApiDBUtils.findDefaultRouterServiceOffering();
  }
  if (so != null) {
    ServiceOffering soffering=ApiDBUtils.findServiceOfferingById(so);
    if (soffering != null) {
      response.setServiceOfferingId(soffering.getUuid());
    }
  }
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    if (Service.Lb == service) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(lbIsoaltion);
      CapabilityResponse eLb=new CapabilityResponse();
      eLb.setName(Capability.ElasticLb.getName());
      eLb.setValue(offering.getElasticLb() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(eLb);
      CapabilityResponse inline=new CapabilityResponse();
      inline.setName(Capability.InlineMode.getName());
      inline.setValue(offering.isInline() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(inline);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.SourceNat == service) {
      List<CapabilityResponse> capabilities=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(sharedSourceNat);
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(redundantRouter);
      svcRsp.setCapabilities(capabilities);
    }
 else     if (service == Service.StaticNat) {
      List<CapabilityResponse> staticNatCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse eIp=new CapabilityResponse();
      eIp.setName(Capability.ElasticIp.getName());
      eIp.setValue(offering.getElasticIp() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(eIp);
      CapabilityResponse associatePublicIp=new CapabilityResponse();
      associatePublicIp.setName(Capability.AssociatePublicIP.getName());
      associatePublicIp.setValue(offering.getAssociatePublicIP() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(associatePublicIp);
      svcRsp.setCapabilities(staticNatCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setForVpc(_configMgr.isOfferingForVpc(offering));
  response.setServices(serviceResponses);
  Map<Detail,String> details=_ntwkModel.getNtwkOffDetails(offering.getId());
  if (details != null && !details.isEmpty()) {
    response.setDetails(details);
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering offering){
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setConserveMode(offering.isConserveMode());
  response.setSpecifyIpRanges(offering.getSpecifyIpRanges());
  response.setAvailability(offering.getAvailability().toString());
  response.setIsPersistent(offering.getIsPersistent());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  response.setEgressDefaultPolicy(offering.getEgressDefaultPolicy());
  response.setConcurrentConnections(offering.getConcurrentConnections());
  response.setSupportsStrechedL2Subnet(offering.getSupportsStrechedL2());
  Long so=null;
  if (offering.getServiceOfferingId() != null) {
    so=offering.getServiceOfferingId();
  }
 else {
    so=ApiDBUtils.findDefaultRouterServiceOffering();
  }
  if (so != null) {
    ServiceOffering soffering=ApiDBUtils.findServiceOfferingById(so);
    if (soffering != null) {
      response.setServiceOfferingId(soffering.getUuid());
    }
  }
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> srvc_providers=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : srvc_providers) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    if (Service.Lb == service) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(lbIsoaltion);
      CapabilityResponse eLb=new CapabilityResponse();
      eLb.setName(Capability.ElasticLb.getName());
      eLb.setValue(offering.getElasticLb() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(eLb);
      CapabilityResponse inline=new CapabilityResponse();
      inline.setName(Capability.InlineMode.getName());
      inline.setValue(offering.isInline() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(inline);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.SourceNat == service) {
      List<CapabilityResponse> capabilities=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(sharedSourceNat);
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(redundantRouter);
      svcRsp.setCapabilities(capabilities);
    }
 else     if (service == Service.StaticNat) {
      List<CapabilityResponse> staticNatCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse eIp=new CapabilityResponse();
      eIp.setName(Capability.ElasticIp.getName());
      eIp.setValue(offering.getElasticIp() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(eIp);
      CapabilityResponse associatePublicIp=new CapabilityResponse();
      associatePublicIp.setName(Capability.AssociatePublicIP.getName());
      associatePublicIp.setValue(offering.getAssociatePublicIP() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(associatePublicIp);
      svcRsp.setCapabilities(staticNatCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setForVpc(_configMgr.isOfferingForVpc(offering));
  response.setServices(serviceResponses);
  Map<Detail,String> details=_ntwkModel.getNtwkOffDetails(offering.getId());
  if (details != null && !details.isEmpty()) {
    response.setDetails(details);
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9813664596273292
105664,"@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(tmpl.getUuid());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}","@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}",0.9970547574682936
105665,"@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  response.setSupportsDistributedRouter(offering.supportsDistributedRouter());
  response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  response.setSupportsDistributedRouter(offering.supportsDistributedRouter());
  response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> srvc_providers=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : srvc_providers) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.935251798561151
105666,"@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(StaticNatRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  response.setPublicIpAddressId(ip.getId());
  response.setPublicIpAddress(ip.getAddress().addr());
  if (ip != null && fwRule.getDestIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(ip.getAssociatedWithVmId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getUuid());
      response.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        response.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        response.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setStartPort(fwRule.getSourcePortStart());
  response.setEndPort(fwRule.getSourcePortEnd());
  response.setProtocol(fwRule.getProtocol());
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(StaticNatRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getId());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestIpAddress() != null) {
      UserVm vm=ApiDBUtils.findUserVmById(ip.getAssociatedWithVmId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setStartPort(fwRule.getSourcePortStart());
  response.setEndPort(fwRule.getSourcePortEnd());
  response.setProtocol(fwRule.getProtocol());
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9069591527987896
105667,"@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
}
response.setDomainName(domain.getName());
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}","@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
  response.setDomainName(domain.getName());
}
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}",0.994723926380368
105668,"@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Ip ip : lbInstances.keySet()) {
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    UserVm vm=lbInstances.get(ip);
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}","@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Map.Entry<Ip,UserVm> entry : lbInstances.entrySet()) {
    Ip ip=entry.getKey();
    UserVm vm=entry.getValue();
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}",0.9301152737752162
105669,"@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  response.setPublicIpAddressId(ip.getUuid());
  response.setPublicIpAddress(ip.getAddress().addr());
  if (ip != null && fwRule.getDestinationIpAddress() != null) {
    response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getUuid());
      response.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        response.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        response.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestinationIpAddress() != null) {
      response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
      UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9441736818786
105670,"private void processReport(long hostId,Map<Long,VirtualMachine.PowerState> translatedInfo){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ translatedInfo.size());
  for (  Map.Entry<Long,VirtualMachine.PowerState> entry : translatedInfo.entrySet()) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
    if (_instanceDao.updatePowerState(entry.getKey(),hostId,entry.getValue())) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
      _messageBus.publish(null,VirtualMachineManager.Topics.VM_POWER_STATE,PublishScope.GLOBAL,entry.getKey());
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + entry.getKey());
    }
  }
  List<VMInstanceVO> vmsThatAreMissingReport=_instanceDao.findByHostInStates(hostId,VirtualMachine.State.Running,VirtualMachine.State.Stopping,VirtualMachine.State.Starting);
  java.util.Iterator<VMInstanceVO> it=vmsThatAreMissingReport.iterator();
  while (it.hasNext()) {
    VMInstanceVO instance=it.next();
    if (translatedInfo.get(instance.getId()) != null)     it.remove();
  }
  if (vmsThatAreMissingReport.size() > 0) {
    Date currentTime=DateUtil.currentGMTTime();
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + currentTime.getTime());
    long milliSecondsGracefullPeriod=PingInterval.value() * 2000;
    for (    VMInstanceVO instance : vmsThatAreMissingReport) {
      Date vmStateUpdateTime=instance.getUpdateTime();
      if (vmStateUpdateTime == null) {
        s_logger.warn(""String_Node_Str"" + instance.getId());
        vmStateUpdateTime=currentTime;
      }
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ instance.getId()+ ""String_Node_Str""+ vmStateUpdateTime.getTime());
      long milliSecondsSinceLastStateUpdate=currentTime.getTime() - vmStateUpdateTime.getTime();
      if (milliSecondsSinceLastStateUpdate > milliSecondsGracefullPeriod) {
        s_logger.debug(""String_Node_Str"" + instance.getId() + ""String_Node_Str""+ milliSecondsSinceLastStateUpdate+ ""String_Node_Str"");
        if (_instanceDao.updatePowerState(instance.getId(),hostId,VirtualMachine.PowerState.PowerReportMissing)) {
          if (s_logger.isDebugEnabled())           s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ instance.getId()+ ""String_Node_Str"");
          _messageBus.publish(null,VirtualMachineManager.Topics.VM_POWER_STATE,PublishScope.GLOBAL,instance.getId());
        }
 else {
          if (s_logger.isDebugEnabled())           s_logger.debug(""String_Node_Str"" + instance.getId());
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + instance.getId() + ""String_Node_Str""+ milliSecondsSinceLastStateUpdate+ ""String_Node_Str"");
      }
    }
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId);
}","private void processReport(long hostId,Map<Long,VirtualMachine.PowerState> translatedInfo){
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ translatedInfo.size());
  for (  Map.Entry<Long,VirtualMachine.PowerState> entry : translatedInfo.entrySet()) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
    if (_instanceDao.updatePowerState(entry.getKey(),hostId,entry.getValue())) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getValue());
      _messageBus.publish(null,VirtualMachineManager.Topics.VM_POWER_STATE,PublishScope.GLOBAL,entry.getKey());
    }
 else {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + entry.getKey());
    }
  }
  List<VMInstanceVO> vmsThatAreMissingReport=_instanceDao.findByHostInStates(hostId,VirtualMachine.State.Running,VirtualMachine.State.Stopping,VirtualMachine.State.Starting);
  java.util.Iterator<VMInstanceVO> it=vmsThatAreMissingReport.iterator();
  while (it.hasNext()) {
    VMInstanceVO instance=it.next();
    if (translatedInfo.get(instance.getId()) != null)     it.remove();
  }
  if (vmsThatAreMissingReport.size() > 0) {
    Date currentTime=DateUtil.currentGMTTime();
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + currentTime.getTime());
    long milliSecondsGracefullPeriod=PingInterval.value() * 2000L;
    for (    VMInstanceVO instance : vmsThatAreMissingReport) {
      Date vmStateUpdateTime=instance.getUpdateTime();
      if (vmStateUpdateTime == null) {
        s_logger.warn(""String_Node_Str"" + instance.getId());
        vmStateUpdateTime=currentTime;
      }
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ instance.getId()+ ""String_Node_Str""+ vmStateUpdateTime.getTime());
      long milliSecondsSinceLastStateUpdate=currentTime.getTime() - vmStateUpdateTime.getTime();
      if (milliSecondsSinceLastStateUpdate > milliSecondsGracefullPeriod) {
        s_logger.debug(""String_Node_Str"" + instance.getId() + ""String_Node_Str""+ milliSecondsSinceLastStateUpdate+ ""String_Node_Str"");
        if (_instanceDao.updatePowerState(instance.getId(),hostId,VirtualMachine.PowerState.PowerReportMissing)) {
          if (s_logger.isDebugEnabled())           s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ instance.getId()+ ""String_Node_Str"");
          _messageBus.publish(null,VirtualMachineManager.Topics.VM_POWER_STATE,PublishScope.GLOBAL,instance.getId());
        }
 else {
          if (s_logger.isDebugEnabled())           s_logger.debug(""String_Node_Str"" + instance.getId());
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + instance.getId() + ""String_Node_Str""+ milliSecondsSinceLastStateUpdate+ ""String_Node_Str"");
      }
    }
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + hostId);
}",0.9998380042118904
105671,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  if (rootdisksize != null && !customparameterMap.containsKey(""String_Node_Str"")) {
    customparameterMap.put(""String_Node_Str"",rootdisksize.toString());
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  if (rootdisksize != null && !customparameterMap.containsKey(""String_Node_Str"")) {
    customparameterMap.put(""String_Node_Str"",rootdisksize.toString());
  }
  return customparameterMap;
}",0.8638018936635106
105672,"@Override public List<VMTemplateStoragePoolVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateStoragePoolVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  String sql=DOWNLOADS_STATE_DC_POD;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}","@Override public List<VMTemplateStoragePoolVO> listByTemplateStatus(long templateId,long datacenterId,long podId,VMTemplateStoragePoolVO.Status downloadState){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  ResultSet rs=null;
  try {
    String sql=DOWNLOADS_STATE_DC_POD;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,datacenterId);
    pstmt.setLong(2,podId);
    pstmt.setLong(3,templateId);
    pstmt.setString(4,downloadState.toString());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}",0.7929708951125755
105673,"public List<VMTemplateStoragePoolVO> listByHostTemplate(long hostId,long templateId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  String sql=HOST_TEMPLATE_SEARCH;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,hostId);
    pstmt.setLong(2,templateId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        result.add(findById(id));
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return result;
}","public List<VMTemplateStoragePoolVO> listByHostTemplate(long hostId,long templateId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<VMTemplateStoragePoolVO> result=new ArrayList<VMTemplateStoragePoolVO>();
  ResultSet rs=null;
  try {
    String sql=HOST_TEMPLATE_SEARCH;
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,hostId);
    pstmt.setLong(2,templateId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      result.add(findById(id));
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  return result;
}",0.7491683300066534
105674,"private void dropInvalidKeyFromStoragePoolTable(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  Map.Entry<String,List<String>> entry : uniqueKeys.entrySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,entry.getKey(),entry.getValue(),false);
  }
}","private void dropInvalidKeyFromStoragePoolTable(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  String tableName : uniqueKeys.keySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,tableName,uniqueKeys.get(tableName),false);
  }
}",0.8638392857142857
105675,"@DB protected EndPoint findEndPointInScope(Scope scope,String sqlBase,Long poolId){
  StringBuilder sbuilder=new StringBuilder();
  sbuilder.append(sqlBase);
  if (scope.getScopeType() == ScopeType.HOST) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.CLUSTER) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.ZONE) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
  sbuilder.append(""String_Node_Str"");
  String sql=sbuilder.toString();
  HostVO host=null;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,poolId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        long id=rs.getLong(1);
        host=hostDao.findById(id);
      }
    }
 catch (    SQLException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  if (host == null) {
    return null;
  }
  return RemoteHostEndPoint.getHypervisorHostEndPoint(host);
}","@DB protected EndPoint findEndPointInScope(Scope scope,String sqlBase,Long poolId){
  StringBuilder sbuilder=new StringBuilder();
  sbuilder.append(sqlBase);
  if (scope.getScopeType() == ScopeType.HOST) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.CLUSTER) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
 else   if (scope.getScopeType() == ScopeType.ZONE) {
    sbuilder.append(""String_Node_Str"");
    sbuilder.append(scope.getScopeId());
  }
  sbuilder.append(""String_Node_Str"");
  String sql=sbuilder.toString();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  HostVO host=null;
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    pstmt=txn.prepareStatement(sql);
    pstmt.setLong(1,poolId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      host=hostDao.findById(id);
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  if (host == null) {
    return null;
  }
  return RemoteHostEndPoint.getHypervisorHostEndPoint(host);
}",0.8537735849056604
105676,"@Override public void handleVolumeSync(DataStore store){
  if (store == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long storeId=store.getId();
  String lockString=""String_Node_Str"" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=_volumeDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn(""String_Node_Str"" + volumeStore.getVolumeId() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info(""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString(""String_Node_Str"");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"";
              volumeStore.setErrorString(msg);
              s_logger.info(""String_Node_Str"");
              if (volumeStore.getDownloadUrl() == null) {
                msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str""+ volInfo.getInstallPath()+ ""String_Node_Str""+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info(""String_Node_Str"" + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                _volumeDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            toBeDownloaded.add(volumeStore);
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str"");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info(""String_Node_Str"");
                continue;
              }
            }
            s_logger.debug(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str""+ store.getName());
            VolumeInfo vol=volFactory.getVolume(volumeHost.getVolumeId());
            createVolumeAsync(vol,store);
          }
        }
        for (        Map.Entry<Long,TemplateProp> entry : volumeInfos.entrySet()) {
          Long uniqueName=entry.getKey();
          TemplateProp tInfo=entry.getValue();
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg=""String_Node_Str"";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info(""String_Node_Str"" + store.getName());
          }
 else {
            String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + lockString + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}","@Override public void handleVolumeSync(DataStore store){
  if (store == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long storeId=store.getId();
  String lockString=""String_Node_Str"" + storeId;
  GlobalLock syncLock=GlobalLock.getInternLock(lockString);
  try {
    if (syncLock.lock(3)) {
      try {
        Map<Long,TemplateProp> volumeInfos=listVolume(store);
        if (volumeInfos == null) {
          return;
        }
        List<VolumeDataStoreVO> dbVolumes=_volumeStoreDao.listByStoreId(storeId);
        List<VolumeDataStoreVO> toBeDownloaded=new ArrayList<VolumeDataStoreVO>(dbVolumes);
        for (        VolumeDataStoreVO volumeStore : dbVolumes) {
          VolumeVO volume=_volumeDao.findById(volumeStore.getVolumeId());
          if (volume == null) {
            s_logger.warn(""String_Node_Str"" + volumeStore.getVolumeId() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            volumeStore.setDestroyed(true);
            _volumeStoreDao.update(volumeStore.getId(),volumeStore);
            continue;
          }
          if (volumeInfos.containsKey(volume.getId())) {
            TemplateProp volInfo=volumeInfos.remove(volume.getId());
            toBeDownloaded.remove(volumeStore);
            s_logger.info(""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"");
            if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
              volumeStore.setErrorString(""String_Node_Str"");
            }
            if (volInfo.isCorrupted()) {
              volumeStore.setDownloadState(Status.DOWNLOAD_ERROR);
              String msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str"";
              volumeStore.setErrorString(msg);
              s_logger.info(""String_Node_Str"");
              if (volumeStore.getDownloadUrl() == null) {
                msg=""String_Node_Str"" + volume.getUuid() + ""String_Node_Str""+ volInfo.getInstallPath()+ ""String_Node_Str""+ volumeStore.getDataStoreId();
                s_logger.warn(msg);
              }
 else {
                s_logger.info(""String_Node_Str"" + volume.getName());
                _volumeStoreDao.remove(volumeStore.getId());
                toBeDownloaded.add(volumeStore);
              }
            }
 else {
              volumeStore.setDownloadPercent(100);
              volumeStore.setDownloadState(Status.DOWNLOADED);
              volumeStore.setState(ObjectInDataStoreStateMachine.State.Ready);
              volumeStore.setInstallPath(volInfo.getInstallPath());
              volumeStore.setSize(volInfo.getSize());
              volumeStore.setPhysicalSize(volInfo.getPhysicalSize());
              volumeStore.setLastUpdated(new Date());
              _volumeStoreDao.update(volumeStore.getId(),volumeStore);
              if (volume.getSize() == 0) {
                volume.setSize(volInfo.getSize());
                _volumeDao.update(volumeStore.getVolumeId(),volume);
              }
              if (volInfo.getSize() > 0) {
                try {
                  _resourceLimitMgr.checkResourceLimit(_accountMgr.getAccount(volume.getAccountId()),com.cloud.configuration.Resource.ResourceType.secondary_storage,volInfo.getSize() - volInfo.getPhysicalSize());
                }
 catch (                ResourceAllocationException e) {
                  s_logger.warn(e.getMessage());
                  _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_RESOURCE_LIMIT_EXCEEDED,volume.getDataCenterId(),volume.getPodId(),e.getMessage(),e.getMessage());
                }
 finally {
                  _resourceLimitMgr.recalculateResourceCount(volume.getAccountId(),volume.getDomainId(),com.cloud.configuration.Resource.ResourceType.secondary_storage.getOrdinal());
                }
              }
            }
            continue;
          }
          if (volumeStore.getDownloadState() != Status.DOWNLOADED) {
            s_logger.info(""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
            toBeDownloaded.add(volumeStore);
          }
        }
        if (toBeDownloaded.size() > 0) {
          for (          VolumeDataStoreVO volumeHost : toBeDownloaded) {
            if (volumeHost.getDownloadUrl() == null) {
              s_logger.info(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str"");
              continue;
            }
            if (store.getScope().getScopeType() == ScopeType.REGION) {
              if (volumeHost.getDownloadState() == VMTemplateStorageResourceAssoc.Status.DOWNLOADED && volumeHost.getInstallPath() == null) {
                s_logger.info(""String_Node_Str"");
                continue;
              }
            }
            s_logger.debug(""String_Node_Str"" + volumeHost.getVolumeId() + ""String_Node_Str""+ store.getName());
            VolumeInfo vol=volFactory.getVolume(volumeHost.getVolumeId());
            createVolumeAsync(vol,store);
          }
        }
        for (        Long uniqueName : volumeInfos.keySet()) {
          TemplateProp tInfo=volumeInfos.get(uniqueName);
          VolumeObjectTO tmplTO=new VolumeObjectTO();
          tmplTO.setDataStore(store.getTO());
          tmplTO.setPath(tInfo.getInstallPath());
          tmplTO.setId(tInfo.getId());
          DeleteCommand dtCommand=new DeleteCommand(tmplTO);
          EndPoint ep=_epSelector.select(store);
          Answer answer=null;
          if (ep == null) {
            String errMsg=""String_Node_Str"";
            s_logger.error(errMsg);
            answer=new Answer(dtCommand,false,errMsg);
          }
 else {
            answer=ep.sendMessage(dtCommand);
          }
          if (answer == null || !answer.getResult()) {
            s_logger.info(""String_Node_Str"" + store.getName());
          }
 else {
            String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ storeId;
            s_logger.info(description);
          }
        }
      }
  finally {
        syncLock.unlock();
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + lockString + ""String_Node_Str""+ storeId+ ""String_Node_Str"");
    }
  }
  finally {
    syncLock.releaseRef();
  }
}",0.9826439578264397
105677,"@Override public LibvirtVMDef.InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException(""String_Node_Str"");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase(""String_Node_Str"")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) && (vNetId != null) && (protocol != null)&& (!vNetId.equalsIgnoreCase(""String_Node_Str"")) || (nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan)) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}","@Override public LibvirtVMDef.InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + nic);
    if (nicAdapter != null && !nicAdapter.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + nicAdapter);
    }
  }
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  String vNetId=null;
  String protocol=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
    vNetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
    protocol=Networks.BroadcastDomainType.getSchemeValue(nic.getBroadcastUri()).scheme();
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    throw new InternalErrorException(""String_Node_Str"");
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vNetId.equalsIgnoreCase(""String_Node_Str"") || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork();
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vNetId.equalsIgnoreCase(""String_Node_Str"") || nic.getBroadcastType() == Networks.BroadcastDomainType.Vxlan) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        String brName=createVnetBr(vNetId,trafficLabel,protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
 else {
        String brName=createVnetBr(vNetId,""String_Node_Str"",protocol);
        intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  if (nic.getPxeDisable() == true) {
    intf.setPxeDisable(true);
  }
  return intf;
}",0.9544860057546428
105678,"@Override public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering offering){
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setConserveMode(offering.isConserveMode());
  response.setSpecifyIpRanges(offering.getSpecifyIpRanges());
  response.setAvailability(offering.getAvailability().toString());
  response.setIsPersistent(offering.getIsPersistent());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  response.setEgressDefaultPolicy(offering.getEgressDefaultPolicy());
  response.setConcurrentConnections(offering.getConcurrentConnections());
  response.setSupportsStrechedL2Subnet(offering.getSupportsStrechedL2());
  Long so=null;
  if (offering.getServiceOfferingId() != null) {
    so=offering.getServiceOfferingId();
  }
 else {
    so=ApiDBUtils.findDefaultRouterServiceOffering();
  }
  if (so != null) {
    ServiceOffering soffering=ApiDBUtils.findServiceOfferingById(so);
    if (soffering != null) {
      response.setServiceOfferingId(soffering.getUuid());
    }
  }
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> srvc_providers=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : srvc_providers) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    if (Service.Lb == service) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(lbIsoaltion);
      CapabilityResponse eLb=new CapabilityResponse();
      eLb.setName(Capability.ElasticLb.getName());
      eLb.setValue(offering.getElasticLb() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(eLb);
      CapabilityResponse inline=new CapabilityResponse();
      inline.setName(Capability.InlineMode.getName());
      inline.setValue(offering.isInline() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(inline);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.SourceNat == service) {
      List<CapabilityResponse> capabilities=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(sharedSourceNat);
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(redundantRouter);
      svcRsp.setCapabilities(capabilities);
    }
 else     if (service == Service.StaticNat) {
      List<CapabilityResponse> staticNatCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse eIp=new CapabilityResponse();
      eIp.setName(Capability.ElasticIp.getName());
      eIp.setValue(offering.getElasticIp() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(eIp);
      CapabilityResponse associatePublicIp=new CapabilityResponse();
      associatePublicIp.setName(Capability.AssociatePublicIP.getName());
      associatePublicIp.setValue(offering.getAssociatePublicIP() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(associatePublicIp);
      svcRsp.setCapabilities(staticNatCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setForVpc(_configMgr.isOfferingForVpc(offering));
  response.setServices(serviceResponses);
  Map<Detail,String> details=_ntwkModel.getNtwkOffDetails(offering.getId());
  if (details != null && !details.isEmpty()) {
    response.setDetails(details);
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkOfferingResponse createNetworkOfferingResponse(NetworkOffering offering){
  NetworkOfferingResponse response=new NetworkOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setTags(offering.getTags());
  response.setTrafficType(offering.getTrafficType().toString());
  response.setIsDefault(offering.isDefault());
  response.setSpecifyVlan(offering.getSpecifyVlan());
  response.setConserveMode(offering.isConserveMode());
  response.setSpecifyIpRanges(offering.getSpecifyIpRanges());
  response.setAvailability(offering.getAvailability().toString());
  response.setIsPersistent(offering.getIsPersistent());
  response.setNetworkRate(ApiDBUtils.getNetworkRate(offering.getId()));
  response.setEgressDefaultPolicy(offering.getEgressDefaultPolicy());
  response.setConcurrentConnections(offering.getConcurrentConnections());
  response.setSupportsStrechedL2Subnet(offering.getSupportsStrechedL2());
  Long so=null;
  if (offering.getServiceOfferingId() != null) {
    so=offering.getServiceOfferingId();
  }
 else {
    so=ApiDBUtils.findDefaultRouterServiceOffering();
  }
  if (so != null) {
    ServiceOffering soffering=ApiDBUtils.findServiceOfferingById(so);
    if (soffering != null) {
      response.setServiceOfferingId(soffering.getUuid());
    }
  }
  if (offering.getGuestType() != null) {
    response.setGuestIpType(offering.getGuestType().toString());
  }
  response.setState(offering.getState().name());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listNetworkOfferingServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    if (Service.Lb == service) {
      List<CapabilityResponse> lbCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse lbIsoaltion=new CapabilityResponse();
      lbIsoaltion.setName(Capability.SupportedLBIsolation.getName());
      lbIsoaltion.setValue(offering.getDedicatedLB() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(lbIsoaltion);
      CapabilityResponse eLb=new CapabilityResponse();
      eLb.setName(Capability.ElasticLb.getName());
      eLb.setValue(offering.getElasticLb() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(eLb);
      CapabilityResponse inline=new CapabilityResponse();
      inline.setName(Capability.InlineMode.getName());
      inline.setValue(offering.isInline() ? ""String_Node_Str"" : ""String_Node_Str"");
      lbCapResponse.add(inline);
      svcRsp.setCapabilities(lbCapResponse);
    }
 else     if (Service.SourceNat == service) {
      List<CapabilityResponse> capabilities=new ArrayList<CapabilityResponse>();
      CapabilityResponse sharedSourceNat=new CapabilityResponse();
      sharedSourceNat.setName(Capability.SupportedSourceNatTypes.getName());
      sharedSourceNat.setValue(offering.getSharedSourceNat() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(sharedSourceNat);
      CapabilityResponse redundantRouter=new CapabilityResponse();
      redundantRouter.setName(Capability.RedundantRouter.getName());
      redundantRouter.setValue(offering.getRedundantRouter() ? ""String_Node_Str"" : ""String_Node_Str"");
      capabilities.add(redundantRouter);
      svcRsp.setCapabilities(capabilities);
    }
 else     if (service == Service.StaticNat) {
      List<CapabilityResponse> staticNatCapResponse=new ArrayList<CapabilityResponse>();
      CapabilityResponse eIp=new CapabilityResponse();
      eIp.setName(Capability.ElasticIp.getName());
      eIp.setValue(offering.getElasticIp() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(eIp);
      CapabilityResponse associatePublicIp=new CapabilityResponse();
      associatePublicIp.setName(Capability.AssociatePublicIP.getName());
      associatePublicIp.setValue(offering.getAssociatePublicIP() ? ""String_Node_Str"" : ""String_Node_Str"");
      staticNatCapResponse.add(associatePublicIp);
      svcRsp.setCapabilities(staticNatCapResponse);
    }
    serviceResponses.add(svcRsp);
  }
  response.setForVpc(_configMgr.isOfferingForVpc(offering));
  response.setServices(serviceResponses);
  Map<Detail,String> details=_ntwkModel.getNtwkOffDetails(offering.getId());
  if (details != null && !details.isEmpty()) {
    response.setDetails(details);
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9332544612047716
105679,"@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}","@Override public UsageRecordResponse createUsageResponse(Usage usageRecord){
  UsageRecordResponse usageRecResponse=new UsageRecordResponse();
  Account account=ApiDBUtils.findAccountById(usageRecord.getAccountId());
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    Project project=ApiDBUtils.findProjectByProjectAccountId(account.getId());
    usageRecResponse.setProjectId(project.getUuid());
    usageRecResponse.setProjectName(project.getName());
  }
 else {
    usageRecResponse.setAccountId(account.getUuid());
    usageRecResponse.setAccountName(account.getAccountName());
  }
  Domain domain=ApiDBUtils.findDomainById(usageRecord.getDomainId());
  if (domain != null) {
    usageRecResponse.setDomainId(domain.getUuid());
  }
  if (usageRecord.getZoneId() != null) {
    DataCenter zone=ApiDBUtils.findZoneById(usageRecord.getZoneId());
    if (zone != null) {
      usageRecResponse.setZoneId(zone.getUuid());
    }
  }
  usageRecResponse.setDescription(usageRecord.getDescription());
  usageRecResponse.setUsage(usageRecord.getUsageDisplay());
  usageRecResponse.setUsageType(usageRecord.getUsageType());
  if (usageRecord.getVmInstanceId() != null) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
  }
  usageRecResponse.setVmName(usageRecord.getVmName());
  if (usageRecord.getTemplateId() != null) {
    VMTemplateVO template=ApiDBUtils.findTemplateById(usageRecord.getTemplateId());
    if (template != null) {
      usageRecResponse.setTemplateId(template.getUuid());
    }
  }
  if (usageRecord.getUsageType() == UsageTypes.RUNNING_VM || usageRecord.getUsageType() == UsageTypes.ALLOCATED_VM) {
    ServiceOfferingVO svcOffering=_entityMgr.findByIdIncludingRemoved(ServiceOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(svcOffering.getUuid());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
    if (vm != null) {
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setType(usageRecord.getType());
    usageRecResponse.setCpuNumber(usageRecord.getCpuCores());
    usageRecResponse.setCpuSpeed(usageRecord.getCpuSpeed());
    usageRecResponse.setMemory(usageRecord.getMemory());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.IP_ADDRESS) {
    usageRecResponse.setSourceNat((usageRecord.getType().equals(""String_Node_Str"")) ? true : false);
    usageRecResponse.setSystem((usageRecord.getSize() == 1) ? true : false);
    IPAddressVO ip=_entityMgr.findByIdIncludingRemoved(IPAddressVO.class,usageRecord.getUsageId().toString());
    if (ip != null) {
      usageRecResponse.setUsageId(ip.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_SENT || usageRecord.getUsageType() == UsageTypes.NETWORK_BYTES_RECEIVED) {
    usageRecResponse.setType(usageRecord.getType());
    if (usageRecord.getType().equals(""String_Node_Str"")) {
      VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getUsageId().toString());
      if (vm != null) {
        usageRecResponse.setUsageId(vm.getUuid());
      }
    }
 else {
      HostVO host=_entityMgr.findByIdIncludingRemoved(HostVO.class,usageRecord.getUsageId().toString());
      if (host != null) {
        usageRecResponse.setUsageId(host.getUuid());
      }
    }
    NetworkVO network=_entityMgr.findByIdIncludingRemoved(NetworkVO.class,usageRecord.getNetworkId().toString());
    if (network != null) {
      usageRecResponse.setNetworkId(network.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_IO_WRITE || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_READ || usageRecord.getUsageType() == UsageTypes.VM_DISK_BYTES_WRITE) {
    usageRecResponse.setType(usageRecord.getType());
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVirtualMachineId(vm.getUuid());
    }
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VOLUME) {
    VolumeVO volume=_entityMgr.findByIdIncludingRemoved(VolumeVO.class,usageRecord.getUsageId().toString());
    if (volume != null) {
      usageRecResponse.setUsageId(volume.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      DiskOfferingVO diskOff=_entityMgr.findByIdIncludingRemoved(DiskOfferingVO.class,usageRecord.getOfferingId().toString());
      usageRecResponse.setOfferingId(diskOff.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.TEMPLATE || usageRecord.getUsageType() == UsageTypes.ISO) {
    VMTemplateVO tmpl=_entityMgr.findByIdIncludingRemoved(VMTemplateVO.class,usageRecord.getUsageId().toString());
    usageRecResponse.setUsageId(tmpl.getUuid());
    if (tmpl != null) {
      usageRecResponse.setUsageId(tmpl.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getUsageType() == UsageTypes.ISO) {
      usageRecResponse.setVirtualSize(usageRecord.getSize());
    }
 else {
      usageRecResponse.setVirtualSize(usageRecord.getVirtualSize());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SNAPSHOT) {
    SnapshotVO snap=_entityMgr.findByIdIncludingRemoved(SnapshotVO.class,usageRecord.getUsageId().toString());
    if (snap != null) {
      usageRecResponse.setUsageId(snap.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
  }
 else   if (usageRecord.getUsageType() == UsageTypes.LOAD_BALANCER_POLICY) {
    LoadBalancerVO lb=_entityMgr.findByIdIncludingRemoved(LoadBalancerVO.class,usageRecord.getUsageId().toString());
    if (lb != null) {
      usageRecResponse.setUsageId(lb.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.PORT_FORWARDING_RULE) {
    PortForwardingRuleVO pf=_entityMgr.findByIdIncludingRemoved(PortForwardingRuleVO.class,usageRecord.getUsageId().toString());
    if (pf != null) {
      usageRecResponse.setUsageId(pf.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.NETWORK_OFFERING) {
    NetworkOfferingVO netOff=_entityMgr.findByIdIncludingRemoved(NetworkOfferingVO.class,usageRecord.getOfferingId().toString());
    usageRecResponse.setOfferingId(netOff.getUuid());
    usageRecResponse.setDefault((usageRecord.getUsageId() == 1) ? true : false);
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VPN_USERS) {
    VpnUserVO vpnUser=_entityMgr.findByIdIncludingRemoved(VpnUserVO.class,usageRecord.getUsageId().toString());
    if (vpnUser != null) {
      usageRecResponse.setUsageId(vpnUser.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.SECURITY_GROUP) {
    SecurityGroupVO sg=_entityMgr.findByIdIncludingRemoved(SecurityGroupVO.class,usageRecord.getUsageId().toString());
    if (sg != null) {
      usageRecResponse.setUsageId(sg.getUuid());
    }
  }
 else   if (usageRecord.getUsageType() == UsageTypes.VM_SNAPSHOT) {
    VMInstanceVO vm=_entityMgr.findByIdIncludingRemoved(VMInstanceVO.class,usageRecord.getVmInstanceId().toString());
    if (vm != null) {
      usageRecResponse.setVmName(vm.getInstanceName());
      usageRecResponse.setUsageId(vm.getUuid());
    }
    usageRecResponse.setSize(usageRecord.getSize());
    if (usageRecord.getOfferingId() != null) {
      usageRecResponse.setOfferingId(usageRecord.getOfferingId().toString());
    }
  }
  if (usageRecord.getRawUsage() != null) {
    DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
    usageRecResponse.setRawUsage(decimalFormat.format(usageRecord.getRawUsage()));
  }
  if (usageRecord.getStartDate() != null) {
    usageRecResponse.setStartDate(getDateStringInternal(usageRecord.getStartDate()));
  }
  if (usageRecord.getEndDate() != null) {
    usageRecResponse.setEndDate(getDateStringInternal(usageRecord.getEndDate()));
  }
  return usageRecResponse;
}",0.9970547574682936
105680,"@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  response.setSupportsDistributedRouter(offering.supportsDistributedRouter());
  response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> srvc_providers=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : srvc_providers) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering){
  VpcOfferingResponse response=new VpcOfferingResponse();
  response.setId(offering.getUuid());
  response.setName(offering.getName());
  response.setDisplayText(offering.getDisplayText());
  response.setIsDefault(offering.isDefault());
  response.setState(offering.getState().name());
  response.setSupportsDistributedRouter(offering.supportsDistributedRouter());
  response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(offering.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  response.setServices(serviceResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.7687564234326825
105681,"@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(StaticNatRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getId());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestIpAddress() != null) {
      UserVm vm=ApiDBUtils.findUserVmById(ip.getAssociatedWithVmId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setStartPort(fwRule.getSourcePortStart());
  response.setEndPort(fwRule.getSourcePortEnd());
  response.setProtocol(fwRule.getProtocol());
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(StaticNatRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getUuid());
  response.setProtocol(fwRule.getProtocol());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  response.setPublicIpAddressId(ip.getId());
  response.setPublicIpAddress(ip.getAddress().addr());
  if (ip != null && fwRule.getDestIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(ip.getAssociatedWithVmId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getUuid());
      response.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        response.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        response.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setStartPort(fwRule.getSourcePortStart());
  response.setEndPort(fwRule.getSourcePortEnd());
  response.setProtocol(fwRule.getProtocol());
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9069591527987896
105682,"@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
  response.setDomainName(domain.getName());
}
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}","@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
}
response.setDomainName(domain.getName());
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}",0.9996319018404908
105683,"@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Map.Entry<Ip,UserVm> entry : lbInstances.entrySet()) {
    Ip ip=entry.getKey();
    UserVm vm=entry.getValue();
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}","@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  lbResponse.setForDisplay(lb.isDisplay());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Ip ip : lbInstances.keySet()) {
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    UserVm vm=lbInstances.get(ip);
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}",0.9247118155619596
105684,"@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  if (ip != null) {
    response.setPublicIpAddressId(ip.getUuid());
    response.setPublicIpAddress(ip.getAddress().addr());
    if (fwRule.getDestinationIpAddress() != null) {
      response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
      UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
      if (vm != null) {
        response.setVirtualMachineId(vm.getUuid());
        response.setVirtualMachineName(vm.getHostName());
        if (vm.getDisplayName() != null) {
          response.setVirtualMachineDisplayName(vm.getDisplayName());
        }
 else {
          response.setVirtualMachineDisplayName(vm.getHostName());
        }
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createPortForwardingRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getUuid());
  response.setPrivateStartPort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setPrivateEndPort(Integer.toString(fwRule.getDestinationPortEnd()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicStartPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicEndPort(Integer.toString(fwRule.getSourcePortEnd()));
  List<String> cidrs=ApiDBUtils.findFirewallSourceCidrs(fwRule.getId());
  response.setCidrList(StringUtils.join(cidrs,""String_Node_Str""));
  Network guestNtwk=ApiDBUtils.findNetworkById(fwRule.getNetworkId());
  response.setNetworkId(guestNtwk.getUuid());
  IpAddress ip=ApiDBUtils.findIpAddressById(fwRule.getSourceIpAddressId());
  response.setPublicIpAddressId(ip.getUuid());
  response.setPublicIpAddress(ip.getAddress().addr());
  if (ip != null && fwRule.getDestinationIpAddress() != null) {
    response.setDestNatVmIp(fwRule.getDestinationIpAddress().toString());
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getUuid());
      response.setVirtualMachineName(vm.getHostName());
      if (vm.getDisplayName() != null) {
        response.setVirtualMachineDisplayName(vm.getDisplayName());
      }
 else {
        response.setVirtualMachineDisplayName(vm.getHostName());
      }
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.PortForwardingRule,fwRule.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setState(stateToSet);
  response.setForDisplay(fwRule.isDisplay());
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9441736818786
105685,"@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
      newTemplate.setPath(path);
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}","@Override public Answer copyTemplateToPrimaryStorage(CopyCommand cmd){
  DataTO srcData=cmd.getSrcTO();
  TemplateObjectTO template=(TemplateObjectTO)srcData;
  DataStoreTO srcStore=srcData.getDataStore();
  if (!(srcStore instanceof NfsTO)) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  NfsTO nfsImageStore=(NfsTO)srcStore;
  DataTO destData=cmd.getDestTO();
  DataStoreTO destStore=destData.getDataStore();
  DataStoreTO primaryStore=destStore;
  String secondaryStorageUrl=nfsImageStore.getUrl();
  assert(secondaryStorageUrl != null);
  boolean managed=false;
  String storageHost=null;
  int storagePort=Integer.MIN_VALUE;
  String managedStoragePoolName=null;
  String managedStoragePoolRootVolumeName=null;
  String chapInitiatorUsername=null;
  String chapInitiatorSecret=null;
  String chapTargetUsername=null;
  String chapTargetSecret=null;
  if (destStore instanceof PrimaryDataStoreTO) {
    PrimaryDataStoreTO destPrimaryDataStoreTo=(PrimaryDataStoreTO)destStore;
    Map<String,String> details=destPrimaryDataStoreTo.getDetails();
    if (details != null) {
      managed=Boolean.parseBoolean(details.get(PrimaryDataStoreTO.MANAGED));
      if (managed) {
        storageHost=details.get(PrimaryDataStoreTO.STORAGE_HOST);
        try {
          storagePort=Integer.parseInt(details.get(PrimaryDataStoreTO.STORAGE_PORT));
        }
 catch (        Exception ex) {
          storagePort=3260;
        }
        managedStoragePoolName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET);
        managedStoragePoolRootVolumeName=details.get(PrimaryDataStoreTO.MANAGED_STORE_TARGET_ROOT_VOLUME);
        chapInitiatorUsername=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_USERNAME);
        chapInitiatorSecret=details.get(PrimaryDataStoreTO.CHAP_INITIATOR_SECRET);
        chapTargetUsername=details.get(PrimaryDataStoreTO.CHAP_TARGET_USERNAME);
        chapTargetSecret=details.get(PrimaryDataStoreTO.CHAP_TARGET_SECRET);
      }
    }
  }
  String templateUrl=secondaryStorageUrl + ""String_Node_Str"" + srcData.getPath();
  Pair<String,String> templateInfo=VmwareStorageLayoutHelper.decodeTemplateRelativePathAndNameFromUrl(secondaryStorageUrl,templateUrl,template.getName());
  VmwareContext context=hostService.getServiceContext(cmd);
  if (context == null) {
    return new CopyCmdAnswer(""String_Node_Str"");
  }
  try {
    VmwareHypervisorHost hyperHost=hostService.getHyperHost(context,cmd);
    String storageUuid=managed ? managedStoragePoolName : primaryStore.getUuid();
    String templateUuidName=deriveTemplateUuidOnHost(hyperHost,storageUuid,templateInfo.second());
    DatacenterMO dcMo=new DatacenterMO(context,hyperHost.getHyperHostDatacenter());
    VirtualMachineMO templateMo=VmwareHelper.pickOneVmOnRunningHost(dcMo.findVmByNameAndLabel(templateUuidName),true);
    DatastoreMO dsMo=null;
    if (templateMo == null) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str""+ templateUuidName);
      }
      final ManagedObjectReference morDs;
      if (managed) {
        morDs=prepareManagedDatastore(context,hyperHost,managedStoragePoolName,storageHost,storagePort,chapInitiatorUsername,chapInitiatorSecret,chapTargetUsername,chapTargetSecret);
      }
 else {
        morDs=HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost,storageUuid);
      }
      assert(morDs != null);
      dsMo=new DatastoreMO(context,morDs);
      if (managed) {
        VirtualMachineMO vmMo=copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),managedStoragePoolRootVolumeName,false);
        vmMo.unregisterVm();
        String[] vmwareLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,managedStoragePoolRootVolumeName,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.VMWARE,false);
        String[] legacyCloudStackLayoutFilePair=VmwareStorageLayoutHelper.getVmdkFilePairDatastorePath(dsMo,null,managedStoragePoolRootVolumeName,VmwareStorageLayoutType.CLOUDSTACK_LEGACY,false);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[0],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[0],dcMo.getMor(),true);
        dsMo.moveDatastoreFile(vmwareLayoutFilePair[1],dcMo.getMor(),dsMo.getMor(),legacyCloudStackLayoutFilePair[1],dcMo.getMor(),true);
        String folderToDelete=dsMo.getDatastorePath(managedStoragePoolRootVolumeName,true);
        dsMo.deleteFolder(folderToDelete,dcMo.getMor());
      }
 else {
        copyTemplateFromSecondaryToPrimary(hyperHost,dsMo,secondaryStorageUrl,templateInfo.first(),templateInfo.second(),templateUuidName,true);
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + templateInfo.second() + ""String_Node_Str"");
    }
    TemplateObjectTO newTemplate=new TemplateObjectTO();
    if (managed) {
      String path=dsMo.getDatastorePath(managedStoragePoolRootVolumeName + ""String_Node_Str"");
      newTemplate.setPath(path);
    }
 else {
      newTemplate.setPath(templateUuidName);
    }
    return new CopyCmdAnswer(newTemplate);
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      hostService.invalidateServiceContext(context);
    }
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg,e);
    return new CopyCmdAnswer(msg);
  }
}",0.9926774314682688
105686,"private static void enableSslFeature(nitro_service ns) throws ExecutionException {
  try {
    base_response result=ns.enable_features(new String[]{""String_Node_Str""});
    if (result.errorcode != 0)     throw new ExecutionException(""String_Node_Str"");
  }
 catch (  nitro_exception e) {
    throw new ExecutionException(""String_Node_Str"" + e.getMessage());
  }
catch (  Exception e) {
    throw new ExecutionException(""String_Node_Str"" + e.getMessage());
  }
}","private static void enableSslFeature(nitro_service ns,boolean isSdx) throws ExecutionException {
  if (isSdx) {
    return;
  }
  try {
    base_response result=ns.enable_features(new String[]{""String_Node_Str""});
    if (result.errorcode != 0)     throw new ExecutionException(""String_Node_Str"");
  }
 catch (  nitro_exception e) {
    throw new ExecutionException(""String_Node_Str"" + e.getMessage());
  }
catch (  Exception e) {
    throw new ExecutionException(""String_Node_Str"" + e.getMessage());
  }
}",0.953464322647363
105687,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  try {
    _name=(String)params.get(""String_Node_Str"");
    if (_name == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _zoneId=(String)params.get(""String_Node_Str"");
    if (_zoneId == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _physicalNetworkId=(String)params.get(""String_Node_Str"");
    if (_physicalNetworkId == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _ip=(String)params.get(""String_Node_Str"");
    if (_ip == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _username=(String)params.get(""String_Node_Str"");
    if (_username == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _password=(String)params.get(""String_Node_Str"");
    if (_password == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _publicInterface=(String)params.get(""String_Node_Str"");
    if (_publicInterface == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _privateInterface=(String)params.get(""String_Node_Str"");
    if (_privateInterface == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _numRetries=NumbersUtil.parseInt((String)params.get(""String_Node_Str""),2);
    _guid=(String)params.get(""String_Node_Str"");
    if (_guid == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _deviceName=(String)params.get(""String_Node_Str"");
    if (_deviceName == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _isSdx=_deviceName.equalsIgnoreCase(""String_Node_Str"");
    _inline=Boolean.parseBoolean((String)params.get(""String_Node_Str""));
    if (((String)params.get(""String_Node_Str"")) != null) {
      _cloudManaged=Boolean.parseBoolean((String)params.get(""String_Node_Str""));
    }
    login();
    validateDeviceType(_deviceName);
    validateInterfaces(_publicInterface,_privateInterface);
    enableLoadBalancingFeature();
    SSL.enableSslFeature(_netscalerService);
    if (_cloudManaged) {
      _publicIP=(String)params.get(""String_Node_Str"");
      _publicIPGateway=(String)params.get(""String_Node_Str"");
      _publicIPNetmask=(String)params.get(""String_Node_Str"");
      _publicIPVlan=(String)params.get(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(_publicIPVlan)) {
        addSubnetIP(_publicIP,_publicIPNetmask);
      }
 else {
        addGuestVlanAndSubnet(Long.parseLong(_publicIPVlan),_publicIP,_publicIPNetmask,false);
      }
    }
    return true;
  }
 catch (  Exception e) {
    throw new ConfigurationException(e.getMessage());
  }
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  try {
    _name=(String)params.get(""String_Node_Str"");
    if (_name == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _zoneId=(String)params.get(""String_Node_Str"");
    if (_zoneId == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _physicalNetworkId=(String)params.get(""String_Node_Str"");
    if (_physicalNetworkId == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _ip=(String)params.get(""String_Node_Str"");
    if (_ip == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _username=(String)params.get(""String_Node_Str"");
    if (_username == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _password=(String)params.get(""String_Node_Str"");
    if (_password == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _publicInterface=(String)params.get(""String_Node_Str"");
    if (_publicInterface == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _privateInterface=(String)params.get(""String_Node_Str"");
    if (_privateInterface == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _numRetries=NumbersUtil.parseInt((String)params.get(""String_Node_Str""),2);
    _guid=(String)params.get(""String_Node_Str"");
    if (_guid == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _deviceName=(String)params.get(""String_Node_Str"");
    if (_deviceName == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    _isSdx=_deviceName.equalsIgnoreCase(""String_Node_Str"");
    _inline=Boolean.parseBoolean((String)params.get(""String_Node_Str""));
    if (((String)params.get(""String_Node_Str"")) != null) {
      _cloudManaged=Boolean.parseBoolean((String)params.get(""String_Node_Str""));
    }
    login();
    validateDeviceType(_deviceName);
    validateInterfaces(_publicInterface,_privateInterface);
    enableLoadBalancingFeature();
    SSL.enableSslFeature(_netscalerService,_isSdx);
    if (_cloudManaged) {
      _publicIP=(String)params.get(""String_Node_Str"");
      _publicIPGateway=(String)params.get(""String_Node_Str"");
      _publicIPNetmask=(String)params.get(""String_Node_Str"");
      _publicIPVlan=(String)params.get(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(_publicIPVlan)) {
        addSubnetIP(_publicIP,_publicIPNetmask);
      }
 else {
        addGuestVlanAndSubnet(Long.parseLong(_publicIPVlan),_publicIP,_publicIPNetmask,false);
      }
    }
    return true;
  }
 catch (  Exception e) {
    throw new ConfigurationException(e.getMessage());
  }
}",0.9987316542851966
105688,"@Override public void removeCustomOfferingDetails(long vmId){
  Map<String,String> details=_uservmDetailsDao.listDetailsKeyPairs(vmId);
  details.remove(UsageEventVO.DynamicParameters.cpuNumber.name());
  details.remove(UsageEventVO.DynamicParameters.cpuSpeed.name());
  details.remove(UsageEventVO.DynamicParameters.memory.name());
  List<UserVmDetailVO> detailList=new ArrayList<UserVmDetailVO>();
  for (  String key : details.keySet()) {
    UserVmDetailVO detailVO=new UserVmDetailVO(vmId,key,details.get(key),true);
    detailList.add(detailVO);
  }
  _uservmDetailsDao.saveDetails(detailList);
}","@Override public void removeCustomOfferingDetails(long vmId){
  Map<String,String> details=_uservmDetailsDao.listDetailsKeyPairs(vmId);
  details.remove(UsageEventVO.DynamicParameters.cpuNumber.name());
  details.remove(UsageEventVO.DynamicParameters.cpuSpeed.name());
  details.remove(UsageEventVO.DynamicParameters.memory.name());
  List<UserVmDetailVO> detailList=new ArrayList<UserVmDetailVO>();
  for (  Map.Entry<String,String> entry : details.entrySet()) {
    UserVmDetailVO detailVO=new UserVmDetailVO(vmId,entry.getKey(),entry.getValue(),true);
    detailList.add(detailVO);
  }
  _uservmDetailsDao.saveDetails(detailList);
}",0.9361358124494744
105689,"@Override public HashMap<Long,List<VmDiskStatsEntry>> getVmDiskStatistics(long hostId,String hostName,List<Long> vmIds) throws CloudRuntimeException {
  HashMap<Long,List<VmDiskStatsEntry>> vmDiskStatsById=new HashMap<Long,List<VmDiskStatsEntry>>();
  if (vmIds.isEmpty()) {
    return vmDiskStatsById;
  }
  List<String> vmNames=new ArrayList<String>();
  for (  Long vmId : vmIds) {
    UserVmVO vm=_vmDao.findById(vmId);
    vmNames.add(vm.getInstanceName());
  }
  Answer answer=_agentMgr.easySend(hostId,new GetVmDiskStatsCommand(vmNames,_hostDao.findById(hostId).getGuid(),hostName));
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
 else {
    HashMap<String,List<VmDiskStatsEntry>> vmDiskStatsByName=((GetVmDiskStatsAnswer)answer).getVmDiskStatsMap();
    if (vmDiskStatsByName == null) {
      s_logger.warn(""String_Node_Str"");
      return null;
    }
    for (    String vmName : vmDiskStatsByName.keySet()) {
      vmDiskStatsById.put(vmIds.get(vmNames.indexOf(vmName)),vmDiskStatsByName.get(vmName));
    }
  }
  return vmDiskStatsById;
}","@Override public HashMap<Long,List<VmDiskStatsEntry>> getVmDiskStatistics(long hostId,String hostName,List<Long> vmIds) throws CloudRuntimeException {
  HashMap<Long,List<VmDiskStatsEntry>> vmDiskStatsById=new HashMap<Long,List<VmDiskStatsEntry>>();
  if (vmIds.isEmpty()) {
    return vmDiskStatsById;
  }
  List<String> vmNames=new ArrayList<String>();
  for (  Long vmId : vmIds) {
    UserVmVO vm=_vmDao.findById(vmId);
    vmNames.add(vm.getInstanceName());
  }
  Answer answer=_agentMgr.easySend(hostId,new GetVmDiskStatsCommand(vmNames,_hostDao.findById(hostId).getGuid(),hostName));
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
 else {
    HashMap<String,List<VmDiskStatsEntry>> vmDiskStatsByName=((GetVmDiskStatsAnswer)answer).getVmDiskStatsMap();
    if (vmDiskStatsByName == null) {
      s_logger.warn(""String_Node_Str"");
      return null;
    }
    for (    Map.Entry<String,List<VmDiskStatsEntry>> entry : vmDiskStatsByName.entrySet()) {
      vmDiskStatsById.put(vmIds.get(vmNames.indexOf(entry.getKey())),entry.getValue());
    }
  }
  return vmDiskStatsById;
}",0.9039145907473308
105690,"@Override @ActionEvent(eventType=EventTypes.EVENT_VM_REBOOT,eventDescription=""String_Node_Str"",async=true) public UserVm rebootVirtualMachine(RebootVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  Long vmId=cmd.getId();
  UserVmVO vmInstance=_vmDao.findById(vmId.longValue());
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  long serviceOfferingId=vmInstance.getServiceOfferingId();
  ServiceOfferingVO offering=_serviceOfferingDao.findById(vmInstance.getId(),serviceOfferingId);
  if (offering != null && offering.getRemoved() == null) {
    if (offering.getVolatileVm()) {
      return restoreVMInternal(caller,vmInstance,null);
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId + ""String_Node_Str"");
  }
  return rebootVirtualMachine(CallContext.current().getCallingUserId(),vmId);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VM_REBOOT,eventDescription=""String_Node_Str"",async=true) public UserVm rebootVirtualMachine(RebootVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException {
  Account caller=CallContext.current().getCallingAccount();
  Long vmId=cmd.getId();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  long serviceOfferingId=vmInstance.getServiceOfferingId();
  ServiceOfferingVO offering=_serviceOfferingDao.findById(vmInstance.getId(),serviceOfferingId);
  if (offering != null && offering.getRemoved() == null) {
    if (offering.getVolatileVm()) {
      return restoreVMInternal(caller,vmInstance,null);
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId + ""String_Node_Str"");
  }
  return rebootVirtualMachine(CallContext.current().getCallingUserId(),vmId);
}",0.9942196531791908
105691,"@Override public void saveCustomOfferingDetails(long vmId,ServiceOffering serviceOffering){
  Map<String,String> details=_uservmDetailsDao.listDetailsKeyPairs(vmId);
  details.put(UsageEventVO.DynamicParameters.cpuNumber.name(),serviceOffering.getCpu().toString());
  details.put(UsageEventVO.DynamicParameters.cpuSpeed.name(),serviceOffering.getSpeed().toString());
  details.put(UsageEventVO.DynamicParameters.memory.name(),serviceOffering.getRamSize().toString());
  List<UserVmDetailVO> detailList=new ArrayList<UserVmDetailVO>();
  for (  String key : details.keySet()) {
    UserVmDetailVO detailVO=new UserVmDetailVO(vmId,key,details.get(key),true);
    detailList.add(detailVO);
  }
  _uservmDetailsDao.saveDetails(detailList);
}","@Override public void saveCustomOfferingDetails(long vmId,ServiceOffering serviceOffering){
  Map<String,String> details=_uservmDetailsDao.listDetailsKeyPairs(vmId);
  details.put(UsageEventVO.DynamicParameters.cpuNumber.name(),serviceOffering.getCpu().toString());
  details.put(UsageEventVO.DynamicParameters.cpuSpeed.name(),serviceOffering.getSpeed().toString());
  details.put(UsageEventVO.DynamicParameters.memory.name(),serviceOffering.getRamSize().toString());
  List<UserVmDetailVO> detailList=new ArrayList<UserVmDetailVO>();
  for (  Map.Entry<String,String> entry : details.entrySet()) {
    UserVmDetailVO detailVO=new UserVmDetailVO(vmId,entry.getKey(),entry.getValue(),true);
    detailList.add(detailVO);
  }
  _uservmDetailsDao.saveDetails(detailList);
}",0.93828798938288
105692,"public UserVm restoreVMInternal(Account caller,UserVmVO vm,Long newTemplateId) throws InsufficientCapacityException, ResourceUnavailableException {
  Long userId=caller.getId();
  Account owner=_accountDao.findById(vm.getAccountId());
  _userDao.findById(userId);
  long vmId=vm.getId();
  boolean needRestart=false;
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (vm.getState() != VirtualMachine.State.Running && vm.getState() != VirtualMachine.State.Stopped) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getUuid() + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
  }
  if (vm.getState() == VirtualMachine.State.Running) {
    needRestart=true;
  }
  List<VolumeVO> rootVols=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVols.isEmpty()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + vm.getUuid());
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
  VolumeVO root=rootVols.get(0);
  Long templateId=root.getTemplateId();
  boolean isISO=false;
  if (templateId == null) {
    isISO=true;
    templateId=vm.getIsoId();
  }
  List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
  if (vmSnapshots.size() > 0 && vm.getHypervisorType() == HypervisorType.VMware) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VMTemplateVO template=null;
  if (newTemplateId != null) {
    template=_templateDao.findById(newTemplateId);
    _accountMgr.checkAccess(caller,null,true,template);
    if (isISO) {
      if (!template.getFormat().equals(ImageFormat.ISO)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else {
      if (template.getFormat().equals(ImageFormat.ISO)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 else {
    if (isISO && templateId == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    template=_templateDao.findById(templateId);
    if (template == null) {
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
      ex.addProxyObject(root.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  if (needRestart) {
    try {
      _itMgr.stop(vm.getUuid());
    }
 catch (    ResourceUnavailableException e) {
      s_logger.debug(""String_Node_Str"" + vm.getUuid() + ""String_Node_Str"",e);
      CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"");
      ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  Volume newVol=null;
  if (newTemplateId != null) {
    if (isISO) {
      newVol=volumeMgr.allocateDuplicateVolume(root,null);
      vm.setIsoId(newTemplateId);
      vm.setGuestOSId(template.getGuestOSId());
      vm.setTemplateId(newTemplateId);
      _vmDao.update(vmId,vm);
    }
 else {
      newVol=volumeMgr.allocateDuplicateVolume(root,newTemplateId);
      vm.setGuestOSId(template.getGuestOSId());
      vm.setTemplateId(newTemplateId);
      _vmDao.update(vmId,vm);
    }
  }
 else {
    newVol=volumeMgr.allocateDuplicateVolume(root,null);
  }
  if (vm instanceof UserVm) {
    _resourceLimitMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,newVol.getAccountId(),newVol.getDataCenterId(),newVol.getId(),newVol.getName(),newVol.getDiskOfferingId(),templateId,newVol.getSize());
  _usageEventDao.persist(usageEvent);
  handleManagedStorage(vm,root);
  _volsDao.attachVolume(newVol.getId(),vmId,newVol.getDeviceId());
  _volsDao.detachVolume(root.getId());
  volumeMgr.destroyVolume(root);
  if (vm.getHypervisorType() == HypervisorType.VMware) {
    VolumeInfo volumeInStorage=volFactory.getVolume(root.getId());
    if (volumeInStorage != null) {
      s_logger.info(""String_Node_Str"" + root.getId() + ""String_Node_Str"");
      AsyncCallFuture<VolumeApiResult> future=_volService.expungeVolumeAsync(volFactory.getVolume(root.getId()));
      try {
        future.get();
      }
 catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + root.getId(),e);
      }
    }
  }
  Map<VirtualMachineProfile.Param,Object> params=null;
  String password=null;
  if (template.getEnablePassword()) {
    password=_mgr.generateRandomPassword();
    boolean result=resetVMPasswordInternal(vmId,password);
    if (result) {
      vm.setPassword(password);
      _vmDao.loadDetails(vm);
      encryptAndStorePassword(vm,password);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (needRestart) {
    try {
      if (vm.getDetail(""String_Node_Str"") != null) {
        params=new HashMap<VirtualMachineProfile.Param,Object>();
        params.put(VirtualMachineProfile.Param.VmPassword,password);
      }
      _itMgr.start(vm.getUuid(),params);
      vm=_vmDao.findById(vmId);
      if (template.getEnablePassword()) {
        vm.setPassword(password);
        if (vm.isUpdateParameters()) {
          vm.setUpdateParameters(false);
          _vmDao.loadDetails(vm);
          if (vm.getDetail(""String_Node_Str"") != null) {
            _vmDetailsDao.remove(_vmDetailsDao.findDetail(vm.getId(),""String_Node_Str"").getId());
          }
          _vmDao.update(vm.getId(),vm);
        }
      }
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + vm.getUuid(),e);
      CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
      ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str""+ template.getUuid()+ ""String_Node_Str"");
  return vm;
}","public UserVm restoreVMInternal(Account caller,UserVmVO vm,Long newTemplateId) throws InsufficientCapacityException, ResourceUnavailableException {
  Long userId=caller.getId();
  Account owner=_accountDao.findById(vm.getAccountId());
  _userDao.findById(userId);
  long vmId=vm.getId();
  boolean needRestart=false;
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (vm.getState() != VirtualMachine.State.Running && vm.getState() != VirtualMachine.State.Stopped) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getUuid() + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
  }
  if (vm.getState() == VirtualMachine.State.Running) {
    needRestart=true;
  }
  List<VolumeVO> rootVols=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVols.isEmpty()) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + vm.getUuid());
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
  VolumeVO root=rootVols.get(0);
  Long templateId=root.getTemplateId();
  boolean isISO=false;
  if (templateId == null) {
    isISO=true;
    templateId=vm.getIsoId();
  }
  List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
  if (vmSnapshots.size() > 0 && vm.getHypervisorType() == HypervisorType.VMware) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VMTemplateVO template=null;
  if (newTemplateId != null) {
    template=_templateDao.findById(newTemplateId);
    _accountMgr.checkAccess(caller,null,true,template);
    if (isISO) {
      if (!template.getFormat().equals(ImageFormat.ISO)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else {
      if (template.getFormat().equals(ImageFormat.ISO)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 else {
    if (isISO && templateId == null) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    template=_templateDao.findById(templateId);
    if (template == null) {
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
      ex.addProxyObject(root.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  if (needRestart) {
    try {
      _itMgr.stop(vm.getUuid());
    }
 catch (    ResourceUnavailableException e) {
      s_logger.debug(""String_Node_Str"" + vm.getUuid() + ""String_Node_Str"",e);
      CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"");
      ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  Volume newVol=null;
  if (newTemplateId != null) {
    if (isISO) {
      newVol=volumeMgr.allocateDuplicateVolume(root,null);
      vm.setIsoId(newTemplateId);
      vm.setGuestOSId(template.getGuestOSId());
      vm.setTemplateId(newTemplateId);
      _vmDao.update(vmId,vm);
    }
 else {
      newVol=volumeMgr.allocateDuplicateVolume(root,newTemplateId);
      vm.setGuestOSId(template.getGuestOSId());
      vm.setTemplateId(newTemplateId);
      _vmDao.update(vmId,vm);
    }
  }
 else {
    newVol=volumeMgr.allocateDuplicateVolume(root,null);
  }
  _resourceLimitMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,newVol.getAccountId(),newVol.getDataCenterId(),newVol.getId(),newVol.getName(),newVol.getDiskOfferingId(),templateId,newVol.getSize());
  _usageEventDao.persist(usageEvent);
  handleManagedStorage(vm,root);
  _volsDao.attachVolume(newVol.getId(),vmId,newVol.getDeviceId());
  _volsDao.detachVolume(root.getId());
  volumeMgr.destroyVolume(root);
  if (vm.getHypervisorType() == HypervisorType.VMware) {
    VolumeInfo volumeInStorage=volFactory.getVolume(root.getId());
    if (volumeInStorage != null) {
      s_logger.info(""String_Node_Str"" + root.getId() + ""String_Node_Str"");
      AsyncCallFuture<VolumeApiResult> future=_volService.expungeVolumeAsync(volFactory.getVolume(root.getId()));
      try {
        future.get();
      }
 catch (      Exception e) {
        s_logger.debug(""String_Node_Str"" + root.getId(),e);
      }
    }
  }
  Map<VirtualMachineProfile.Param,Object> params=null;
  String password=null;
  if (template.getEnablePassword()) {
    password=_mgr.generateRandomPassword();
    boolean result=resetVMPasswordInternal(vmId,password);
    if (result) {
      vm.setPassword(password);
      _vmDao.loadDetails(vm);
      encryptAndStorePassword(vm,password);
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (needRestart) {
    try {
      if (vm.getDetail(""String_Node_Str"") != null) {
        params=new HashMap<VirtualMachineProfile.Param,Object>();
        params.put(VirtualMachineProfile.Param.VmPassword,password);
      }
      _itMgr.start(vm.getUuid(),params);
      vm=_vmDao.findById(vmId);
      if (template.getEnablePassword()) {
        vm.setPassword(password);
        if (vm.isUpdateParameters()) {
          vm.setUpdateParameters(false);
          _vmDao.loadDetails(vm);
          if (vm.getDetail(""String_Node_Str"") != null) {
            _vmDetailsDao.remove(_vmDetailsDao.findDetail(vm.getId(),""String_Node_Str"").getId());
          }
          _vmDao.update(vm.getId(),vm);
        }
      }
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + vm.getUuid(),e);
      CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
      ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
      throw ex;
    }
  }
  s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str""+ template.getUuid()+ ""String_Node_Str"");
  return vm;
}",0.9969834087481146
105693,"@Override public HashMap<Long,VmStatsEntry> getVirtualMachineStatistics(long hostId,String hostName,List<Long> vmIds) throws CloudRuntimeException {
  HashMap<Long,VmStatsEntry> vmStatsById=new HashMap<Long,VmStatsEntry>();
  if (vmIds.isEmpty()) {
    return vmStatsById;
  }
  List<String> vmNames=new ArrayList<String>();
  for (  Long vmId : vmIds) {
    UserVmVO vm=_vmDao.findById(vmId);
    vmNames.add(vm.getInstanceName());
  }
  Answer answer=_agentMgr.easySend(hostId,new GetVmStatsCommand(vmNames,_hostDao.findById(hostId).getGuid(),hostName));
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
 else {
    HashMap<String,VmStatsEntry> vmStatsByName=((GetVmStatsAnswer)answer).getVmStatsMap();
    if (vmStatsByName == null) {
      s_logger.warn(""String_Node_Str"");
      return null;
    }
    for (    String vmName : vmStatsByName.keySet()) {
      vmStatsById.put(vmIds.get(vmNames.indexOf(vmName)),vmStatsByName.get(vmName));
    }
  }
  return vmStatsById;
}","@Override public HashMap<Long,VmStatsEntry> getVirtualMachineStatistics(long hostId,String hostName,List<Long> vmIds) throws CloudRuntimeException {
  HashMap<Long,VmStatsEntry> vmStatsById=new HashMap<Long,VmStatsEntry>();
  if (vmIds.isEmpty()) {
    return vmStatsById;
  }
  List<String> vmNames=new ArrayList<String>();
  for (  Long vmId : vmIds) {
    UserVmVO vm=_vmDao.findById(vmId);
    vmNames.add(vm.getInstanceName());
  }
  Answer answer=_agentMgr.easySend(hostId,new GetVmStatsCommand(vmNames,_hostDao.findById(hostId).getGuid(),hostName));
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
 else {
    HashMap<String,VmStatsEntry> vmStatsByName=((GetVmStatsAnswer)answer).getVmStatsMap();
    if (vmStatsByName == null) {
      s_logger.warn(""String_Node_Str"");
      return null;
    }
    for (    Map.Entry<String,VmStatsEntry> entry : vmStatsByName.entrySet()) {
      vmStatsById.put(vmIds.get(vmNames.indexOf(entry.getKey())),entry.getValue());
    }
  }
  return vmStatsById;
}",0.9196172248803828
105694,"@Override public boolean expunge(UserVmVO vm,long callerUserId,Account caller){
  try {
    List<VolumeVO> rootVol=_volsDao.findByInstanceAndType(vm.getId(),Volume.Type.ROOT);
    _itMgr.advanceExpunge(vm.getUuid());
    if (vm.getAccountId() != Account.ACCOUNT_ID_SYSTEM && !rootVol.isEmpty()) {
      _resourceLimitMgr.decrementResourceCount(vm.getAccountId(),ResourceType.volume);
      _resourceLimitMgr.recalculateResourceCount(vm.getAccountId(),vm.getDomainId(),ResourceType.primary_storage.getOrdinal());
    }
    if (vm != null && vm.getRemoved() == null) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
      if (cleanupVmResources(vm.getId())) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        return false;
      }
      _vmDao.remove(vm.getId());
    }
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
}","@Override public boolean expunge(UserVmVO vm,long callerUserId,Account caller){
  try {
    List<VolumeVO> rootVol=_volsDao.findByInstanceAndType(vm.getId(),Volume.Type.ROOT);
    _itMgr.advanceExpunge(vm.getUuid());
    if (vm.getAccountId() != Account.ACCOUNT_ID_SYSTEM && !rootVol.isEmpty()) {
      _resourceLimitMgr.decrementResourceCount(vm.getAccountId(),ResourceType.volume);
      _resourceLimitMgr.recalculateResourceCount(vm.getAccountId(),vm.getDomainId(),ResourceType.primary_storage.getOrdinal());
    }
    if (vm.getRemoved() == null) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
      if (cleanupVmResources(vm.getId())) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        return false;
      }
      _vmDao.remove(vm.getId());
    }
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
}",0.9943593875906528
105695,"@Override public UserVmVO doInTransaction(TransactionStatus status) throws InsufficientCapacityException {
  UserVmVO vm=new UserVmVO(id,instanceName,displayName,template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),offering.getLimitCpuUse(),owner.getDomainId(),owner.getId(),offering.getId(),userData,hostName,diskOfferingId);
  vm.setUuid(uuidName);
  vm.setDynamicallyScalable(template.isDynamicallyScalable());
  Map<String,String> details=template.getDetails();
  if (details != null && !details.isEmpty()) {
    vm.details.putAll(details);
  }
  if (sshPublicKey != null) {
    vm.setDetail(""String_Node_Str"",sshPublicKey);
  }
  if (keyboard != null && !keyboard.isEmpty())   vm.setDetail(VmDetailConstants.KEYBOARD,keyboard);
  if (isIso) {
    vm.setIsoId(template.getId());
  }
  Long rootDiskSize=null;
  if (customParameters.containsKey(""String_Node_Str"")) {
    if (NumbersUtil.parseLong(customParameters.get(""String_Node_Str""),-1) <= 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    rootDiskSize=Long.parseLong(customParameters.get(""String_Node_Str""));
    if (hypervisor != HypervisorType.KVM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
    VMTemplateVO templateVO=_templateDao.findById(template.getId());
    if (templateVO == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
    }
    if ((rootDiskSize << 30) < templateVO.getSize()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateVO.getSize());
    }
 else {
      s_logger.debug(""String_Node_Str"" + (rootDiskSize << 30) + ""String_Node_Str""+ templateVO.getSize());
    }
    s_logger.debug(""String_Node_Str"" + rootDiskSize);
    customParameters.remove(""String_Node_Str"");
  }
  if (isDisplayVm != null) {
    vm.setDisplayVm(isDisplayVm);
  }
 else {
    vm.setDisplayVm(true);
  }
  if (hypervisorType.equals(HypervisorType.VMware)) {
    UserVmCloneType cloneType=UserVmCloneType.linked;
    String value=_configDao.getValue(Config.VmwareCreateFullClone.key());
    if (value != null) {
      if (Boolean.parseBoolean(value) == true)       cloneType=UserVmCloneType.full;
    }
    UserVmCloneSettingVO vmCloneSettingVO=new UserVmCloneSettingVO(id,cloneType.toString());
    _vmCloneSettingDao.persist(vmCloneSettingVO);
  }
  long guestOSId=template.getGuestOSId();
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  long guestOSCategoryId=guestOS.getCategoryId();
  GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
  if (hypervisorType.equals(HypervisorType.VMware)) {
    if (guestOS.getDisplayName().toLowerCase().contains(""String_Node_Str"")) {
      vm.setDetail(""String_Node_Str"",""String_Node_Str"");
      vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER,""String_Node_Str"");
      vm.setDetail(""String_Node_Str"",""String_Node_Str"");
      s_logger.info(""String_Node_Str"");
    }
  }
  _vmDao.persist(vm);
  if (customParameters != null && customParameters.size() > 0) {
    for (    String key : customParameters.keySet()) {
      vm.setDetail(key,customParameters.get(key));
    }
  }
  _vmDao.saveDetails(vm);
  s_logger.debug(""String_Node_Str"");
  DataCenterDeployment plan=new DataCenterDeployment(zone.getId());
  List<String> computeTags=new ArrayList<String>();
  computeTags.add(offering.getHostTag());
  List<String> rootDiskTags=new ArrayList<String>();
  rootDiskTags.add(offering.getTags());
  if (isIso) {
    _orchSrvc.createVirtualMachineFromScratch(vm.getUuid(),Long.toString(owner.getAccountId()),vm.getIsoId().toString(),hostName,displayName,hypervisor.name(),guestOSCategory.getName(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan);
  }
 else {
    _orchSrvc.createVirtualMachine(vm.getUuid(),Long.toString(owner.getAccountId()),Long.toString(template.getId()),hostName,displayName,hypervisor.name(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan,rootDiskSize);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  CallContext.current().setEventDetails(""String_Node_Str"" + vm.getId());
  if (!offering.isDynamic()) {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),vm.isDisplayVm());
  }
 else {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),customParameters,vm.isDisplayVm());
  }
  resourceCountIncrement(accountId,isDisplayVm,new Long(offering.getCpu()),new Long(offering.getRamSize()));
  return vm;
}","@Override public UserVmVO doInTransaction(TransactionStatus status) throws InsufficientCapacityException {
  UserVmVO vm=new UserVmVO(id,instanceName,displayName,template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),offering.getLimitCpuUse(),owner.getDomainId(),owner.getId(),offering.getId(),userData,hostName,diskOfferingId);
  vm.setUuid(uuidName);
  vm.setDynamicallyScalable(template.isDynamicallyScalable());
  Map<String,String> details=template.getDetails();
  if (details != null && !details.isEmpty()) {
    vm.details.putAll(details);
  }
  if (sshPublicKey != null) {
    vm.setDetail(""String_Node_Str"",sshPublicKey);
  }
  if (keyboard != null && !keyboard.isEmpty())   vm.setDetail(VmDetailConstants.KEYBOARD,keyboard);
  if (isIso) {
    vm.setIsoId(template.getId());
  }
  Long rootDiskSize=null;
  if (customParameters.containsKey(""String_Node_Str"")) {
    if (NumbersUtil.parseLong(customParameters.get(""String_Node_Str""),-1) <= 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    rootDiskSize=Long.parseLong(customParameters.get(""String_Node_Str""));
    if (hypervisor != HypervisorType.KVM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
    VMTemplateVO templateVO=_templateDao.findById(template.getId());
    if (templateVO == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
    }
    if ((rootDiskSize << 30) < templateVO.getSize()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateVO.getSize());
    }
 else {
      s_logger.debug(""String_Node_Str"" + (rootDiskSize << 30) + ""String_Node_Str""+ templateVO.getSize());
    }
    s_logger.debug(""String_Node_Str"" + rootDiskSize);
    customParameters.remove(""String_Node_Str"");
  }
  if (isDisplayVm != null) {
    vm.setDisplayVm(isDisplayVm);
  }
 else {
    vm.setDisplayVm(true);
  }
  if (hypervisorType.equals(HypervisorType.VMware)) {
    UserVmCloneType cloneType=UserVmCloneType.linked;
    String value=_configDao.getValue(Config.VmwareCreateFullClone.key());
    if (value != null) {
      if (Boolean.parseBoolean(value) == true)       cloneType=UserVmCloneType.full;
    }
    UserVmCloneSettingVO vmCloneSettingVO=new UserVmCloneSettingVO(id,cloneType.toString());
    _vmCloneSettingDao.persist(vmCloneSettingVO);
  }
  long guestOSId=template.getGuestOSId();
  GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
  long guestOSCategoryId=guestOS.getCategoryId();
  GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
  if (hypervisorType.equals(HypervisorType.VMware)) {
    if (guestOS.getDisplayName().toLowerCase().contains(""String_Node_Str"")) {
      vm.setDetail(""String_Node_Str"",""String_Node_Str"");
      vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER,""String_Node_Str"");
      vm.setDetail(""String_Node_Str"",""String_Node_Str"");
      s_logger.info(""String_Node_Str"");
    }
  }
  _vmDao.persist(vm);
  for (  String key : customParameters.keySet()) {
    vm.setDetail(key,customParameters.get(key));
  }
  _vmDao.saveDetails(vm);
  s_logger.debug(""String_Node_Str"");
  DataCenterDeployment plan=new DataCenterDeployment(zone.getId());
  List<String> computeTags=new ArrayList<String>();
  computeTags.add(offering.getHostTag());
  List<String> rootDiskTags=new ArrayList<String>();
  rootDiskTags.add(offering.getTags());
  if (isIso) {
    _orchSrvc.createVirtualMachineFromScratch(vm.getUuid(),Long.toString(owner.getAccountId()),vm.getIsoId().toString(),hostName,displayName,hypervisor.name(),guestOSCategory.getName(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan);
  }
 else {
    _orchSrvc.createVirtualMachine(vm.getUuid(),Long.toString(owner.getAccountId()),Long.toString(template.getId()),hostName,displayName,hypervisor.name(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan,rootDiskSize);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  CallContext.current().setEventDetails(""String_Node_Str"" + vm.getId());
  if (!offering.isDynamic()) {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),vm.isDisplayVm());
  }
 else {
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),customParameters,vm.isDisplayVm());
  }
  resourceCountIncrement(accountId,isDisplayVm,new Long(offering.getCpu()),new Long(offering.getRamSize()));
  return vm;
}",0.9797537898056772
105696,"@Override @ActionEvent(eventType=EventTypes.EVENT_NIC_UPDATE,eventDescription=""String_Node_Str"",async=true) public UserVm updateDefaultNicForVirtualMachine(UpdateDefaultNicForVMCmd cmd) throws InvalidParameterValueException, CloudRuntimeException {
  Long vmId=cmd.getVmId();
  Long nicId=cmd.getNicId();
  Account caller=CallContext.current().getCallingAccount();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  NicVO nic=_nicDao.findById(nicId);
  if (nic == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + nicId);
  }
  NetworkVO network=_networkDao.findById(nic.getNetworkId());
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + nic.getNetworkId());
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == DataCenter.NetworkType.Basic) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance.getDataCenterId() + ""String_Node_Str"");
  }
  Network existingdefaultnet=_networkModel.getDefaultNetworkForVm(vmId);
  if (nic.getInstanceId() != vmId) {
    throw new InvalidParameterValueException(nic + ""String_Node_Str"" + vmInstance);
  }
  if (nic.isDefaultNic()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if ((vmInstance.getState() != State.Running) && (vmInstance.getState() != State.Stopped)) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
  }
  NicProfile existing=null;
  List<NicProfile> nicProfiles=_networkMgr.getNicProfiles(vmInstance);
  for (  NicProfile nicProfile : nicProfiles) {
    if (nicProfile.isDefaultNic() && nicProfile.getNetworkId() == existingdefaultnet.getId()) {
      existing=nicProfile;
      continue;
    }
  }
  if (existing == null) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  Network oldDefaultNetwork=null;
  oldDefaultNetwork=_networkModel.getDefaultNetworkForVm(vmId);
  String oldNicIdString=Long.toString(_networkModel.getDefaultNic(vmId).getId());
  long oldNetworkOfferingId=-1L;
  if (oldDefaultNetwork != null) {
    oldNetworkOfferingId=oldDefaultNetwork.getNetworkOfferingId();
  }
  NicVO existingVO=_nicDao.findById(existing.id);
  Integer chosenID=nic.getDeviceId();
  Integer existingID=existing.getDeviceId();
  nic.setDefaultNic(true);
  nic.setDeviceId(existingID);
  existingVO.setDefaultNic(false);
  existingVO.setDeviceId(chosenID);
  nic=_nicDao.persist(nic);
  existingVO=_nicDao.persist(existingVO);
  Network newdefault=null;
  newdefault=_networkModel.getDefaultNetworkForVm(vmId);
  if (newdefault == null) {
    nic.setDefaultNic(false);
    nic.setDeviceId(chosenID);
    existingVO.setDefaultNic(true);
    existingVO.setDeviceId(existingID);
    nic=_nicDao.persist(nic);
    existingVO=_nicDao.persist(existingVO);
    newdefault=_networkModel.getDefaultNetworkForVm(vmId);
    if (newdefault.getId() == existingdefaultnet.getId()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    throw new CloudRuntimeException(""String_Node_Str"" + nic + ""String_Node_Str"");
  }
 else   if (newdefault.getId() == nic.getNetworkId()) {
    s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str""+ vmInstance);
    String nicIdString=Long.toString(nic.getId());
    long newNetworkOfferingId=network.getNetworkOfferingId();
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),oldNicIdString,oldNetworkOfferingId,null,1L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),nicIdString,newNetworkOfferingId,null,1L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),nicIdString,newNetworkOfferingId,null,0L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),oldNicIdString,oldNetworkOfferingId,null,0L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    return _vmDao.findById(vmInstance.getId());
  }
  throw new CloudRuntimeException(""String_Node_Str"" + newdefault.getId() + ""String_Node_Str""+ nic.getNetworkId()+ ""String_Node_Str"");
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NIC_UPDATE,eventDescription=""String_Node_Str"",async=true) public UserVm updateDefaultNicForVirtualMachine(UpdateDefaultNicForVMCmd cmd) throws InvalidParameterValueException, CloudRuntimeException {
  Long vmId=cmd.getVmId();
  Long nicId=cmd.getNicId();
  Account caller=CallContext.current().getCallingAccount();
  UserVmVO vmInstance=_vmDao.findById(vmId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  NicVO nic=_nicDao.findById(nicId);
  if (nic == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + nicId);
  }
  NetworkVO network=_networkDao.findById(nic.getNetworkId());
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + nic.getNetworkId());
  }
  _accountMgr.checkAccess(caller,null,true,vmInstance);
  DataCenterVO dc=_dcDao.findById(vmInstance.getDataCenterId());
  if (dc.getNetworkType() == DataCenter.NetworkType.Basic) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance.getDataCenterId() + ""String_Node_Str"");
  }
  Network existingdefaultnet=_networkModel.getDefaultNetworkForVm(vmId);
  if (nic.getInstanceId() != vmId) {
    throw new InvalidParameterValueException(nic + ""String_Node_Str"" + vmInstance);
  }
  if (nic.isDefaultNic()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if ((vmInstance.getState() != State.Running) && (vmInstance.getState() != State.Stopped)) {
    throw new CloudRuntimeException(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
  }
  NicProfile existing=null;
  List<NicProfile> nicProfiles=_networkMgr.getNicProfiles(vmInstance);
  for (  NicProfile nicProfile : nicProfiles) {
    if (nicProfile.isDefaultNic() && existingdefaultnet != null && nicProfile.getNetworkId() == existingdefaultnet.getId()) {
      existing=nicProfile;
    }
  }
  if (existing == null) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  Network oldDefaultNetwork=null;
  oldDefaultNetwork=_networkModel.getDefaultNetworkForVm(vmId);
  String oldNicIdString=Long.toString(_networkModel.getDefaultNic(vmId).getId());
  long oldNetworkOfferingId=-1L;
  if (oldDefaultNetwork != null) {
    oldNetworkOfferingId=oldDefaultNetwork.getNetworkOfferingId();
  }
  NicVO existingVO=_nicDao.findById(existing.id);
  Integer chosenID=nic.getDeviceId();
  Integer existingID=existing.getDeviceId();
  nic.setDefaultNic(true);
  nic.setDeviceId(existingID);
  existingVO.setDefaultNic(false);
  existingVO.setDeviceId(chosenID);
  nic=_nicDao.persist(nic);
  existingVO=_nicDao.persist(existingVO);
  Network newdefault=null;
  newdefault=_networkModel.getDefaultNetworkForVm(vmId);
  if (newdefault == null) {
    nic.setDefaultNic(false);
    nic.setDeviceId(chosenID);
    existingVO.setDefaultNic(true);
    existingVO.setDeviceId(existingID);
    nic=_nicDao.persist(nic);
    _nicDao.persist(existingVO);
    newdefault=_networkModel.getDefaultNetworkForVm(vmId);
    if (newdefault.getId() == existingdefaultnet.getId()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    throw new CloudRuntimeException(""String_Node_Str"" + nic + ""String_Node_Str"");
  }
 else   if (newdefault.getId() == nic.getNetworkId()) {
    s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str""+ vmInstance);
    String nicIdString=Long.toString(nic.getId());
    long newNetworkOfferingId=network.getNetworkOfferingId();
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),oldNicIdString,oldNetworkOfferingId,null,1L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),nicIdString,newNetworkOfferingId,null,1L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),nicIdString,newNetworkOfferingId,null,0L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vmInstance.getAccountId(),vmInstance.getDataCenterId(),vmInstance.getId(),oldNicIdString,oldNetworkOfferingId,null,0L,VirtualMachine.class.getName(),vmInstance.getUuid(),vmInstance.isDisplay());
    return _vmDao.findById(vmInstance.getId());
  }
  throw new CloudRuntimeException(""String_Node_Str"" + newdefault.getId() + ""String_Node_Str""+ nic.getNetworkId()+ ""String_Node_Str"");
}",0.9940420194418312
105697,"private void validateUserData(String userData,HTTPMethod httpmethod){
  byte[] decodedUserData=null;
  if (userData != null) {
    if (!Base64.isBase64(userData)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (httpmethod.equals(HTTPMethod.GET)) {
      if (userData.length() >= MAX_HTTP_GET_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      decodedUserData=Base64.decodeBase64(userData.getBytes());
      if (decodedUserData.length > MAX_HTTP_GET_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (httpmethod.equals(HTTPMethod.POST)) {
      if (userData.length() >= MAX_HTTP_POST_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      decodedUserData=Base64.decodeBase64(userData.getBytes());
      if (decodedUserData.length > MAX_HTTP_POST_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
}","private void validateUserData(String userData,HTTPMethod httpmethod){
  byte[] decodedUserData=null;
  if (userData != null) {
    if (!Base64.isBase64(userData)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (httpmethod.equals(HTTPMethod.GET)) {
      if (userData.length() >= MAX_HTTP_GET_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      decodedUserData=Base64.decodeBase64(userData.getBytes());
      if (decodedUserData.length > MAX_HTTP_GET_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (httpmethod.equals(HTTPMethod.POST)) {
      if (userData.length() >= MAX_HTTP_POST_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      decodedUserData=Base64.decodeBase64(userData.getBytes());
      if (decodedUserData.length > MAX_HTTP_POST_LENGTH) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (decodedUserData == null || decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
}",0.9881422924901184
105698,"@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Long userId=2L;
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    throw ex;
  }
  if (vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
    s_logger.trace(""String_Node_Str"" + vmId + ""String_Node_Str"");
    return vm;
  }
  User userCaller=_userDao.findById(userId);
  boolean status;
  State vmState=vm.getState();
  try {
    VirtualMachineEntity vmEntity=_orchSrvc.getVirtualMachine(vm.getUuid());
    status=vmEntity.destroy(Long.toString(userId));
  }
 catch (  CloudException e) {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"",e);
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),Volume.class.getName(),volume.getUuid(),volume.isDisplayVolume());
      }
    }
    if (vmState != State.Error) {
      ServiceOfferingVO offering=_serviceOfferingDao.findByIdIncludingRemoved(vm.getId(),vm.getServiceOfferingId());
      resourceCountDecrement(vm.getAccountId(),vm.isDisplayVm(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
    }
    return _vmDao.findById(vmId);
  }
 else {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"");
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
}","@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Long userId=2L;
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    throw ex;
  }
  if (vm.getState() == State.Destroyed || vm.getState() == State.Expunging) {
    s_logger.trace(""String_Node_Str"" + vmId + ""String_Node_Str"");
    return vm;
  }
  boolean status;
  State vmState=vm.getState();
  try {
    VirtualMachineEntity vmEntity=_orchSrvc.getVirtualMachine(vm.getUuid());
    status=vmEntity.destroy(Long.toString(userId));
  }
 catch (  CloudException e) {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"",e);
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),Volume.class.getName(),volume.getUuid(),volume.isDisplayVolume());
      }
    }
    if (vmState != State.Error) {
      ServiceOfferingVO offering=_serviceOfferingDao.findByIdIncludingRemoved(vm.getId(),vm.getServiceOfferingId());
      resourceCountDecrement(vm.getAccountId(),vm.isDisplayVm(),new Long(offering.getCpu()),new Long(offering.getRamSize()));
    }
    return _vmDao.findById(vmId);
  }
 else {
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"");
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
}",0.9872845436564
105699,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  final Long vmId=cmd.getId();
  Account caller=CallContext.current().getCallingAccount();
  final UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<ResourceAllocationException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws ResourceAllocationException {
      Account account=_accountDao.lockRow(vm.getAccountId(),true);
      if (account.getRemoved() != null) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      ServiceOfferingVO serviceOffering=_serviceOfferingDao.findById(vm.getId(),vm.getServiceOfferingId());
      resourceLimitCheck(account,vm.isDisplayVm(),new Long(serviceOffering.getCpu()),new Long(serviceOffering.getRamSize()));
      _haMgr.cancelDestroy(vm,vm.getHostId());
      try {
        if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
          s_logger.debug(""String_Node_Str"" + vmId);
          throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
        }
      }
 catch (      NoTransitionException e) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
      }
      List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
      for (      VolumeVO volume : volumes) {
        if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
          Long templateId=volume.getTemplateId();
          Long diskOfferingId=volume.getDiskOfferingId();
          Long offeringId=null;
          if (diskOfferingId != null) {
            DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
            if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
              offeringId=offering.getId();
            }
          }
          UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize(),Volume.class.getName(),volume.getUuid(),volume.isDisplayVolume());
        }
      }
      resourceCountIncrement(account.getId(),vm.isDisplayVm(),new Long(serviceOffering.getCpu()),new Long(serviceOffering.getRamSize()));
    }
  }
);
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  final Long vmId=cmd.getId();
  Account caller=CallContext.current().getCallingAccount();
  final UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  _accountMgr.checkAccess(caller,null,true,vm);
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction.execute(new TransactionCallbackWithExceptionNoReturn<ResourceAllocationException>(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status) throws ResourceAllocationException {
      Account account=_accountDao.lockRow(vm.getAccountId(),true);
      if (account.getRemoved() != null) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      ServiceOfferingVO serviceOffering=_serviceOfferingDao.findById(vm.getId(),vm.getServiceOfferingId());
      resourceLimitCheck(account,vm.isDisplayVm(),new Long(serviceOffering.getCpu()),new Long(serviceOffering.getRamSize()));
      _haMgr.cancelDestroy(vm,vm.getHostId());
      try {
        if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
          s_logger.debug(""String_Node_Str"" + vmId);
          throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
        }
      }
 catch (      NoTransitionException e) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
      }
      List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
      for (      VolumeVO volume : volumes) {
        if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
          Long templateId=volume.getTemplateId();
          Long diskOfferingId=volume.getDiskOfferingId();
          Long offeringId=null;
          if (diskOfferingId != null) {
            DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
            if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
              offeringId=offering.getId();
            }
          }
          UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize(),Volume.class.getName(),volume.getUuid(),volume.isDisplayVolume());
        }
      }
      resourceCountIncrement(account.getId(),vm.isDisplayVm(),new Long(serviceOffering.getCpu()),new Long(serviceOffering.getRamSize()));
    }
  }
);
  return _vmDao.findById(vmId);
}",0.99801521667218
105700,"@Override @ActionEvent(eventType=EventTypes.EVENT_VM_MIGRATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachine migrateVirtualMachineWithVolume(Long vmId,Host destinationHost,Map<String,String> volumeToPool) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  Account caller=CallContext.current().getCallingAccount();
  if (!_accountMgr.isRootAdmin(caller.getId())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
  if (serviceOfferingDetailsDao.findDetail(vm.getServiceOfferingId(),GPU.Keys.pciDevice.toString()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)&& !vm.getHypervisorType().equals(HypervisorType.Hyperv)&& !vm.getHypervisorType().equals(HypervisorType.Simulator)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_resourceMgr.getHost(srcHostId);
  if (destinationHost.getId() == srcHostId) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (!(srcHost.getHypervisorType().equals(destinationHost.getHypervisorType()) && srcHost.getHypervisorVersion().equals(destinationHost.getHypervisorVersion()))) {
    throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + srcHost.getHypervisorType().toString() + ""String_Node_Str""+ srcHost.getHypervisorVersion()+ ""String_Node_Str""+ destinationHost.getHypervisorType().toString()+ ""String_Node_Str""+ destinationHost.getHypervisorVersion());
  }
  HypervisorCapabilitiesVO capabilities=_hypervisorCapabilitiesDao.findByHypervisorTypeAndVersion(srcHost.getHypervisorType(),srcHost.getHypervisorVersion());
  if (!capabilities.isStorageMotionSupported()) {
    throw new CloudRuntimeException(""String_Node_Str"" + srcHost.getHypervisorType() + ""String_Node_Str""+ srcHost.getHypervisorVersion());
  }
  if (destinationHost.getState() != com.cloud.host.Status.Up || destinationHost.getResourceState() != ResourceState.Enabled) {
    throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + destinationHost.getState() + ""String_Node_Str""+ destinationHost.getResourceState());
  }
  List<VolumeVO> vmVolumes=_volsDao.findUsableVolumesForInstance(vm.getId());
  Map<Long,Long> volToPoolObjectMap=new HashMap<Long,Long>();
  if (!isVMUsingLocalStorage(vm) && destinationHost.getClusterId().equals(srcHost.getClusterId())) {
    if (volumeToPool.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vm + ""String_Node_Str""+ srcHost+ ""String_Node_Str""+ destinationHost+ ""String_Node_Str"");
    }
  }
  if (!volumeToPool.isEmpty()) {
    for (    Map.Entry<String,String> entry : volumeToPool.entrySet()) {
      VolumeVO volume=_volsDao.findByUuid(entry.getKey());
      StoragePoolVO pool=_storagePoolDao.findByUuid(entry.getValue());
      if (volume == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + entry.getKey());
      }
 else       if (pool == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + entry.getValue());
      }
 else {
        if (!vmVolumes.contains(volume)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + volume + ""String_Node_Str""+ ""String_Node_Str""+ vm+ ""String_Node_Str"");
        }
        volToPoolObjectMap.put(Long.valueOf(volume.getId()),Long.valueOf(pool.getId()));
      }
    }
  }
  for (  VolumeVO volume : vmVolumes) {
    if (volume.getState() != Volume.State.Ready) {
      throw new CloudRuntimeException(""String_Node_Str"" + volume + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  HostVO destinationHostVO=_hostDao.findById(destinationHost.getId());
  if (_capacityMgr.checkIfHostReachMaxGuestLimit(destinationHostVO)) {
    throw new VirtualMachineMigrationException(""String_Node_Str"" + destinationHost.getName() + ""String_Node_Str""+ destinationHost.getId()+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  checkHostsDedication(vm,srcHostId,destinationHost.getId());
  _itMgr.migrateWithStorage(vm.getUuid(),srcHostId,destinationHost.getId(),volToPoolObjectMap);
  return _vmDao.findById(vm.getId());
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VM_MIGRATE,eventDescription=""String_Node_Str"",async=true) public VirtualMachine migrateVirtualMachineWithVolume(Long vmId,Host destinationHost,Map<String,String> volumeToPool) throws ResourceUnavailableException, ConcurrentOperationException, ManagementServerException, VirtualMachineMigrationException {
  Account caller=CallContext.current().getCallingAccount();
  if (!_accountMgr.isRootAdmin(caller.getId())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Running) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    CloudRuntimeException ex=new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    ex.addProxyObject(vm.getUuid(),""String_Node_Str"");
    throw ex;
  }
  if (serviceOfferingDetailsDao.findDetail(vm.getServiceOfferingId(),GPU.Keys.pciDevice.toString()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!vm.getHypervisorType().equals(HypervisorType.XenServer) && !vm.getHypervisorType().equals(HypervisorType.VMware) && !vm.getHypervisorType().equals(HypervisorType.KVM)&& !vm.getHypervisorType().equals(HypervisorType.Ovm)&& !vm.getHypervisorType().equals(HypervisorType.Hyperv)&& !vm.getHypervisorType().equals(HypervisorType.Simulator)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
  }
  long srcHostId=vm.getHostId();
  Host srcHost=_resourceMgr.getHost(srcHostId);
  if (srcHost == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcHostId);
  }
  if (destinationHost.getId() == srcHostId) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (!(srcHost.getHypervisorType().equals(destinationHost.getHypervisorType()) && srcHost.getHypervisorVersion().equals(destinationHost.getHypervisorVersion()))) {
    throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + srcHost.getHypervisorType().toString() + ""String_Node_Str""+ srcHost.getHypervisorVersion()+ ""String_Node_Str""+ destinationHost.getHypervisorType().toString()+ ""String_Node_Str""+ destinationHost.getHypervisorVersion());
  }
  HypervisorCapabilitiesVO capabilities=_hypervisorCapabilitiesDao.findByHypervisorTypeAndVersion(srcHost.getHypervisorType(),srcHost.getHypervisorVersion());
  if (!capabilities.isStorageMotionSupported()) {
    throw new CloudRuntimeException(""String_Node_Str"" + srcHost.getHypervisorType() + ""String_Node_Str""+ srcHost.getHypervisorVersion());
  }
  if (destinationHost.getState() != com.cloud.host.Status.Up || destinationHost.getResourceState() != ResourceState.Enabled) {
    throw new CloudRuntimeException(""String_Node_Str"" + ""String_Node_Str"" + destinationHost.getState() + ""String_Node_Str""+ destinationHost.getResourceState());
  }
  List<VolumeVO> vmVolumes=_volsDao.findUsableVolumesForInstance(vm.getId());
  Map<Long,Long> volToPoolObjectMap=new HashMap<Long,Long>();
  if (!isVMUsingLocalStorage(vm) && destinationHost.getClusterId().equals(srcHost.getClusterId())) {
    if (volumeToPool.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vm + ""String_Node_Str""+ srcHost+ ""String_Node_Str""+ destinationHost+ ""String_Node_Str"");
    }
  }
  if (!volumeToPool.isEmpty()) {
    for (    Map.Entry<String,String> entry : volumeToPool.entrySet()) {
      VolumeVO volume=_volsDao.findByUuid(entry.getKey());
      StoragePoolVO pool=_storagePoolDao.findByUuid(entry.getValue());
      if (volume == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + entry.getKey());
      }
 else       if (pool == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + entry.getValue());
      }
 else {
        if (!vmVolumes.contains(volume)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + volume + ""String_Node_Str""+ ""String_Node_Str""+ vm+ ""String_Node_Str"");
        }
        volToPoolObjectMap.put(Long.valueOf(volume.getId()),Long.valueOf(pool.getId()));
      }
    }
  }
  for (  VolumeVO volume : vmVolumes) {
    if (volume.getState() != Volume.State.Ready) {
      throw new CloudRuntimeException(""String_Node_Str"" + volume + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  HostVO destinationHostVO=_hostDao.findById(destinationHost.getId());
  if (_capacityMgr.checkIfHostReachMaxGuestLimit(destinationHostVO)) {
    throw new VirtualMachineMigrationException(""String_Node_Str"" + destinationHost.getName() + ""String_Node_Str""+ destinationHost.getId()+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  checkHostsDedication(vm,srcHostId,destinationHost.getId());
  _itMgr.migrateWithStorage(vm.getUuid(),srcHostId,destinationHost.getId(),volToPoolObjectMap);
  return _vmDao.findById(vm.getId());
}",0.9894211576846308
105701,"@Override public void validateCustomParameters(ServiceOfferingVO serviceOffering,Map<String,String> customParameters){
  if (customParameters.size() != 0) {
    if (serviceOffering.getCpu() == null) {
      String cpuNumber=customParameters.get(UsageEventVO.DynamicParameters.cpuNumber.name());
      if ((cpuNumber == null) || (NumbersUtil.parseInt(cpuNumber,-1) <= 0 || NumbersUtil.parseInt(cpuNumber,-1) > 2147483647)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (customParameters.containsKey(UsageEventVO.DynamicParameters.cpuNumber.name())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getId() + ""String_Node_Str"");
    }
    if (serviceOffering.getSpeed() == null) {
      String cpuSpeed=customParameters.get(UsageEventVO.DynamicParameters.cpuSpeed.name());
      if ((cpuSpeed == null) || (NumbersUtil.parseInt(cpuSpeed,-1) <= 0 || NumbersUtil.parseInt(cpuSpeed,-1) > 2147483647)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (customParameters.containsKey(UsageEventVO.DynamicParameters.cpuSpeed.name())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getId() + ""String_Node_Str"");
    }
    if (serviceOffering.getRamSize() == null) {
      String memory=customParameters.get(UsageEventVO.DynamicParameters.memory.name());
      if (memory == null || (NumbersUtil.parseInt(memory,-1) < 32 || NumbersUtil.parseInt(memory,-1) > 2147483647)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (customParameters.containsKey(UsageEventVO.DynamicParameters.memory.name())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getId() + ""String_Node_Str"");
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
}","@Override public void validateCustomParameters(ServiceOfferingVO serviceOffering,Map<String,String> customParameters){
  if (customParameters.size() != 0) {
    if (serviceOffering.getCpu() == null) {
      String cpuNumber=customParameters.get(UsageEventVO.DynamicParameters.cpuNumber.name());
      if ((cpuNumber == null) || (NumbersUtil.parseInt(cpuNumber,-1) <= 0)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (customParameters.containsKey(UsageEventVO.DynamicParameters.cpuNumber.name())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getId() + ""String_Node_Str"");
    }
    if (serviceOffering.getSpeed() == null) {
      String cpuSpeed=customParameters.get(UsageEventVO.DynamicParameters.cpuSpeed.name());
      if ((cpuSpeed == null) || (NumbersUtil.parseInt(cpuSpeed,-1) <= 0)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (customParameters.containsKey(UsageEventVO.DynamicParameters.cpuSpeed.name())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getId() + ""String_Node_Str"");
    }
    if (serviceOffering.getRamSize() == null) {
      String memory=customParameters.get(UsageEventVO.DynamicParameters.memory.name());
      if (memory == null || (NumbersUtil.parseInt(memory,-1) < 32)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (customParameters.containsKey(UsageEventVO.DynamicParameters.memory.name())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOffering.getId() + ""String_Node_Str"");
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
}",0.7013340593520283
105702,"@Override @ActionEvent(eventType=EventTypes.EVENT_VM_RESETPASSWORD,eventDescription=""String_Node_Str"",async=true) public UserVm resetVMPassword(ResetVMPasswordCmd cmd,String password) throws ResourceUnavailableException, InsufficientCapacityException {
  Account caller=CallContext.current().getCallingAccount();
  Long vmId=cmd.getId();
  UserVmVO userVm=_vmDao.findById(cmd.getId());
  _vmDao.loadDetails(userVm);
  if (userVm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getId());
  }
  VMTemplateVO template=_templateDao.findByIdIncludingRemoved(userVm.getTemplateId());
  if (template == null || !template.getEnablePassword()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (userVm.getState() == State.Error || userVm.getState() == State.Expunging) {
    s_logger.error(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,true,userVm);
  boolean result=resetVMPasswordInternal(vmId,password);
  if (result) {
    userVm.setPassword(password);
    encryptAndStorePassword(userVm,password);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return userVm;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VM_RESETPASSWORD,eventDescription=""String_Node_Str"",async=true) public UserVm resetVMPassword(ResetVMPasswordCmd cmd,String password) throws ResourceUnavailableException, InsufficientCapacityException {
  Account caller=CallContext.current().getCallingAccount();
  Long vmId=cmd.getId();
  UserVmVO userVm=_vmDao.findById(cmd.getId());
  if (userVm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getId());
  }
  _vmDao.loadDetails(userVm);
  VMTemplateVO template=_templateDao.findByIdIncludingRemoved(userVm.getTemplateId());
  if (template == null || !template.getEnablePassword()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (userVm.getState() == State.Error || userVm.getState() == State.Expunging) {
    s_logger.error(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,true,userVm);
  boolean result=resetVMPasswordInternal(vmId,password);
  if (result) {
    userVm.setPassword(password);
    encryptAndStorePassword(userVm,password);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return userVm;
}",0.9148766905330152
105703,"private boolean resetVMSSHKeyInternal(Long vmId,String sshPublicKey,String password) throws ResourceUnavailableException, InsufficientCapacityException {
  Long userId=CallContext.current().getCallingUserId();
  VMInstanceVO vmInstance=_vmDao.findById(vmId);
  VMTemplateVO template=_templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());
  Nic defaultNic=_networkModel.getDefaultNic(vmId);
  if (defaultNic == null) {
    s_logger.error(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
    return false;
  }
  Network defaultNetwork=_networkDao.findById(defaultNic.getNetworkId());
  NicProfile defaultNicProfile=new NicProfile(defaultNic,defaultNetwork,null,null,null,_networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),_networkModel.getNetworkTag(template.getHypervisorType(),defaultNetwork));
  VirtualMachineProfile vmProfile=new VirtualMachineProfileImpl(vmInstance);
  if (template != null && template.getEnablePassword()) {
    vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword,password);
  }
  UserDataServiceProvider element=_networkMgr.getSSHKeyResetProvider(defaultNetwork);
  if (element == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + Service.UserData.getName() + ""String_Node_Str"");
  }
  boolean result=element.saveSSHKey(defaultNetwork,defaultNicProfile,vmProfile,sshPublicKey);
  if (!result) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
 else {
    if (vmInstance.getState() == State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
      return true;
    }
    if (rebootVirtualMachine(userId,vmId) == null) {
      s_logger.warn(""String_Node_Str"" + vmInstance);
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
      return true;
    }
  }
}","private boolean resetVMSSHKeyInternal(Long vmId,String sshPublicKey,String password) throws ResourceUnavailableException, InsufficientCapacityException {
  Long userId=CallContext.current().getCallingUserId();
  VMInstanceVO vmInstance=_vmDao.findById(vmId);
  VMTemplateVO template=_templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());
  Nic defaultNic=_networkModel.getDefaultNic(vmId);
  if (defaultNic == null) {
    s_logger.error(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
    return false;
  }
  Network defaultNetwork=_networkDao.findById(defaultNic.getNetworkId());
  NicProfile defaultNicProfile=new NicProfile(defaultNic,defaultNetwork,null,null,null,_networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),_networkModel.getNetworkTag(template.getHypervisorType(),defaultNetwork));
  VirtualMachineProfile vmProfile=new VirtualMachineProfileImpl(vmInstance);
  if (template.getEnablePassword()) {
    vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword,password);
  }
  UserDataServiceProvider element=_networkMgr.getSSHKeyResetProvider(defaultNetwork);
  if (element == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + Service.UserData.getName() + ""String_Node_Str"");
  }
  boolean result=element.saveSSHKey(defaultNetwork,defaultNicProfile,vmProfile,sshPublicKey);
  if (!result) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
 else {
    if (vmInstance.getState() == State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
      return true;
    }
    if (rebootVirtualMachine(userId,vmId) == null) {
      s_logger.warn(""String_Node_Str"" + vmInstance);
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + vmInstance + ""String_Node_Str"");
      return true;
    }
  }
}",0.9945145364783324
105704,"private UserVmVO commitUserVm(final DataCenter zone,final VirtualMachineTemplate template,final String hostName,final String displayName,final Account owner,final Long diskOfferingId,final Long diskSize,final String userData,final HypervisorType hypervisor,final Account caller,final Boolean isDisplayVm,final String keyboard,final long accountId,final ServiceOfferingVO offering,final boolean isIso,final String sshPublicKey,final LinkedHashMap<String,NicProfile> networkNicMap,final long id,final String instanceName,final String uuidName,final HypervisorType hypervisorType,final Map<String,String> customParameters) throws InsufficientCapacityException {
  return Transaction.execute(new TransactionCallbackWithException<UserVmVO,InsufficientCapacityException>(){
    @Override public UserVmVO doInTransaction(    TransactionStatus status) throws InsufficientCapacityException {
      UserVmVO vm=new UserVmVO(id,instanceName,displayName,template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),offering.getLimitCpuUse(),owner.getDomainId(),owner.getId(),offering.getId(),userData,hostName,diskOfferingId);
      vm.setUuid(uuidName);
      vm.setDynamicallyScalable(template.isDynamicallyScalable());
      Map<String,String> details=template.getDetails();
      if (details != null && !details.isEmpty()) {
        vm.details.putAll(details);
      }
      if (sshPublicKey != null) {
        vm.setDetail(""String_Node_Str"",sshPublicKey);
      }
      if (keyboard != null && !keyboard.isEmpty())       vm.setDetail(VmDetailConstants.KEYBOARD,keyboard);
      if (isIso) {
        vm.setIsoId(template.getId());
      }
      Long rootDiskSize=null;
      if (customParameters.containsKey(""String_Node_Str"")) {
        if (NumbersUtil.parseLong(customParameters.get(""String_Node_Str""),-1) <= 0) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
        rootDiskSize=Long.parseLong(customParameters.get(""String_Node_Str""));
        if (hypervisor != HypervisorType.KVM) {
          throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
        }
        VMTemplateVO templateVO=_templateDao.findById(template.getId());
        if (templateVO == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
        }
        if ((rootDiskSize << 30) < templateVO.getSize()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + templateVO.getSize());
        }
 else {
          s_logger.debug(""String_Node_Str"" + (rootDiskSize << 30) + ""String_Node_Str""+ templateVO.getSize());
        }
        s_logger.debug(""String_Node_Str"" + rootDiskSize);
        customParameters.remove(""String_Node_Str"");
      }
      if (isDisplayVm != null) {
        vm.setDisplayVm(isDisplayVm);
      }
 else {
        vm.setDisplayVm(true);
      }
      if (hypervisorType.equals(HypervisorType.VMware)) {
        UserVmCloneType cloneType=UserVmCloneType.linked;
        String value=_configDao.getValue(Config.VmwareCreateFullClone.key());
        if (value != null) {
          if (Boolean.parseBoolean(value) == true)           cloneType=UserVmCloneType.full;
        }
        UserVmCloneSettingVO vmCloneSettingVO=new UserVmCloneSettingVO(id,cloneType.toString());
        _vmCloneSettingDao.persist(vmCloneSettingVO);
      }
      long guestOSId=template.getGuestOSId();
      GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
      long guestOSCategoryId=guestOS.getCategoryId();
      GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
      if (hypervisorType.equals(HypervisorType.VMware)) {
        if (guestOS.getDisplayName().toLowerCase().contains(""String_Node_Str"")) {
          vm.setDetail(""String_Node_Str"",""String_Node_Str"");
          vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER,""String_Node_Str"");
          vm.setDetail(""String_Node_Str"",""String_Node_Str"");
          s_logger.info(""String_Node_Str"");
        }
      }
      _vmDao.persist(vm);
      if (customParameters != null && customParameters.size() > 0) {
        for (        String key : customParameters.keySet()) {
          vm.setDetail(key,customParameters.get(key));
        }
      }
      _vmDao.saveDetails(vm);
      s_logger.debug(""String_Node_Str"");
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId());
      List<String> computeTags=new ArrayList<String>();
      computeTags.add(offering.getHostTag());
      List<String> rootDiskTags=new ArrayList<String>();
      rootDiskTags.add(offering.getTags());
      if (isIso) {
        _orchSrvc.createVirtualMachineFromScratch(vm.getUuid(),Long.toString(owner.getAccountId()),vm.getIsoId().toString(),hostName,displayName,hypervisor.name(),guestOSCategory.getName(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan);
      }
 else {
        _orchSrvc.createVirtualMachine(vm.getUuid(),Long.toString(owner.getAccountId()),Long.toString(template.getId()),hostName,displayName,hypervisor.name(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan,rootDiskSize);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      CallContext.current().setEventDetails(""String_Node_Str"" + vm.getId());
      if (!offering.isDynamic()) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),vm.isDisplayVm());
      }
 else {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),customParameters,vm.isDisplayVm());
      }
      resourceCountIncrement(accountId,isDisplayVm,new Long(offering.getCpu()),new Long(offering.getRamSize()));
      return vm;
    }
  }
);
}","private UserVmVO commitUserVm(final DataCenter zone,final VirtualMachineTemplate template,final String hostName,final String displayName,final Account owner,final Long diskOfferingId,final Long diskSize,final String userData,final HypervisorType hypervisor,final Account caller,final Boolean isDisplayVm,final String keyboard,final long accountId,final ServiceOfferingVO offering,final boolean isIso,final String sshPublicKey,final LinkedHashMap<String,NicProfile> networkNicMap,final long id,final String instanceName,final String uuidName,final HypervisorType hypervisorType,final Map<String,String> customParameters) throws InsufficientCapacityException {
  return Transaction.execute(new TransactionCallbackWithException<UserVmVO,InsufficientCapacityException>(){
    @Override public UserVmVO doInTransaction(    TransactionStatus status) throws InsufficientCapacityException {
      UserVmVO vm=new UserVmVO(id,instanceName,displayName,template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),offering.getLimitCpuUse(),owner.getDomainId(),owner.getId(),offering.getId(),userData,hostName,diskOfferingId);
      vm.setUuid(uuidName);
      vm.setDynamicallyScalable(template.isDynamicallyScalable());
      Map<String,String> details=template.getDetails();
      if (details != null && !details.isEmpty()) {
        vm.details.putAll(details);
      }
      if (sshPublicKey != null) {
        vm.setDetail(""String_Node_Str"",sshPublicKey);
      }
      if (keyboard != null && !keyboard.isEmpty())       vm.setDetail(VmDetailConstants.KEYBOARD,keyboard);
      if (isIso) {
        vm.setIsoId(template.getId());
      }
      Long rootDiskSize=null;
      if (customParameters.containsKey(""String_Node_Str"")) {
        if (NumbersUtil.parseLong(customParameters.get(""String_Node_Str""),-1) <= 0) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
        rootDiskSize=Long.parseLong(customParameters.get(""String_Node_Str""));
        if (hypervisor != HypervisorType.KVM) {
          throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
        }
        VMTemplateVO templateVO=_templateDao.findById(template.getId());
        if (templateVO == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
        }
        if ((rootDiskSize << 30) < templateVO.getSize()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + templateVO.getSize());
        }
 else {
          s_logger.debug(""String_Node_Str"" + (rootDiskSize << 30) + ""String_Node_Str""+ templateVO.getSize());
        }
        s_logger.debug(""String_Node_Str"" + rootDiskSize);
        customParameters.remove(""String_Node_Str"");
      }
      if (isDisplayVm != null) {
        vm.setDisplayVm(isDisplayVm);
      }
 else {
        vm.setDisplayVm(true);
      }
      if (hypervisorType.equals(HypervisorType.VMware)) {
        UserVmCloneType cloneType=UserVmCloneType.linked;
        String value=_configDao.getValue(Config.VmwareCreateFullClone.key());
        if (value != null) {
          if (Boolean.parseBoolean(value) == true)           cloneType=UserVmCloneType.full;
        }
        UserVmCloneSettingVO vmCloneSettingVO=new UserVmCloneSettingVO(id,cloneType.toString());
        _vmCloneSettingDao.persist(vmCloneSettingVO);
      }
      long guestOSId=template.getGuestOSId();
      GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
      long guestOSCategoryId=guestOS.getCategoryId();
      GuestOSCategoryVO guestOSCategory=_guestOSCategoryDao.findById(guestOSCategoryId);
      if (hypervisorType.equals(HypervisorType.VMware)) {
        if (guestOS.getDisplayName().toLowerCase().contains(""String_Node_Str"")) {
          vm.setDetail(""String_Node_Str"",""String_Node_Str"");
          vm.setDetail(VmDetailConstants.ROOK_DISK_CONTROLLER,""String_Node_Str"");
          vm.setDetail(""String_Node_Str"",""String_Node_Str"");
          s_logger.info(""String_Node_Str"");
        }
      }
      _vmDao.persist(vm);
      for (      String key : customParameters.keySet()) {
        vm.setDetail(key,customParameters.get(key));
      }
      _vmDao.saveDetails(vm);
      s_logger.debug(""String_Node_Str"");
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId());
      List<String> computeTags=new ArrayList<String>();
      computeTags.add(offering.getHostTag());
      List<String> rootDiskTags=new ArrayList<String>();
      rootDiskTags.add(offering.getTags());
      if (isIso) {
        _orchSrvc.createVirtualMachineFromScratch(vm.getUuid(),Long.toString(owner.getAccountId()),vm.getIsoId().toString(),hostName,displayName,hypervisor.name(),guestOSCategory.getName(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan);
      }
 else {
        _orchSrvc.createVirtualMachine(vm.getUuid(),Long.toString(owner.getAccountId()),Long.toString(template.getId()),hostName,displayName,hypervisor.name(),offering.getCpu(),offering.getSpeed(),offering.getRamSize(),diskSize,computeTags,rootDiskTags,networkNicMap,plan,rootDiskSize);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      CallContext.current().setEventDetails(""String_Node_Str"" + vm.getId());
      if (!offering.isDynamic()) {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),vm.isDisplayVm());
      }
 else {
        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VM_CREATE,accountId,zone.getId(),vm.getId(),vm.getHostName(),offering.getId(),template.getId(),hypervisorType.toString(),VirtualMachine.class.getName(),vm.getUuid(),customParameters,vm.isDisplayVm());
      }
      resourceCountIncrement(accountId,isDisplayVm,new Long(offering.getCpu()),new Long(offering.getRamSize()));
      return vm;
    }
  }
);
}",0.982129622004447
105705,"@Override public void setUuid(String uuid){
  this.uuid=uuid;
}","@Override public void setUuid(String uuid){
  this.nicUuid=uuid;
}",0.9612403100775194
105706,"@Override public String getUuid(){
  return uuid;
}","@Override public String getUuid(){
  return nicUuid;
}",0.9523809523809524
105707,"@Override public VolumeInfo createVolumeOnPrimaryStorage(VirtualMachine vm,VolumeInfo volume,HypervisorType rootDiskHyperType,StoragePool storagePool) throws NoTransitionException {
  VirtualMachineTemplate rootDiskTmplt=_entityMgr.findById(VirtualMachineTemplate.class,vm.getTemplateId());
  DataCenter dcVO=_entityMgr.findById(DataCenter.class,vm.getDataCenterId());
  Pod pod=_entityMgr.findById(Pod.class,storagePool.getPodId());
  ServiceOffering svo=_entityMgr.findById(ServiceOffering.class,vm.getServiceOfferingId());
  DiskOffering diskVO=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
  Long clusterId=(storagePool == null ? null : storagePool.getClusterId());
  VolumeInfo vol=null;
  if (volume.getState() == Volume.State.Allocated) {
    vol=createVolume(volume,vm,rootDiskTmplt,dcVO,pod,clusterId,svo,diskVO,new ArrayList<StoragePool>(),volume.getSize(),rootDiskHyperType);
  }
 else   if (volume.getState() == Volume.State.Uploaded) {
    vol=copyVolume(storagePool,volume,vm,rootDiskTmplt,dcVO,pod,diskVO,svo,rootDiskHyperType);
    if (vol != null) {
      _resourceLimitMgr.decrementResourceCount(volume.getAccountId(),ResourceType.secondary_storage,volume.getSize());
      _resourceLimitMgr.incrementResourceCount(volume.getAccountId(),ResourceType.primary_storage,volume.getSize());
    }
  }
  if (vol == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volume.getId());
  }
  VolumeVO volVO=_volsDao.findById(vol.getId());
  if (volVO.getFormat() == null) {
    volVO.setFormat(getSupportedImageFormatForCluster(rootDiskHyperType));
  }
  _volsDao.update(volVO.getId(),volVO);
  return volFactory.getVolume(volVO.getId());
}","@Override public VolumeInfo createVolumeOnPrimaryStorage(VirtualMachine vm,VolumeInfo volume,HypervisorType rootDiskHyperType,StoragePool storagePool) throws NoTransitionException {
  VirtualMachineTemplate rootDiskTmplt=_entityMgr.findById(VirtualMachineTemplate.class,vm.getTemplateId());
  DataCenter dcVO=_entityMgr.findById(DataCenter.class,vm.getDataCenterId());
  Pod pod=_entityMgr.findById(Pod.class,storagePool.getPodId());
  ServiceOffering svo=_entityMgr.findById(ServiceOffering.class,vm.getServiceOfferingId());
  DiskOffering diskVO=_entityMgr.findById(DiskOffering.class,volume.getDiskOfferingId());
  Long clusterId=storagePool.getClusterId();
  VolumeInfo vol=null;
  if (volume.getState() == Volume.State.Allocated) {
    vol=createVolume(volume,vm,rootDiskTmplt,dcVO,pod,clusterId,svo,diskVO,new ArrayList<StoragePool>(),volume.getSize(),rootDiskHyperType);
  }
 else   if (volume.getState() == Volume.State.Uploaded) {
    vol=copyVolume(storagePool,volume,vm,rootDiskTmplt,dcVO,pod,diskVO,svo,rootDiskHyperType);
    if (vol != null) {
      _resourceLimitMgr.decrementResourceCount(volume.getAccountId(),ResourceType.secondary_storage,volume.getSize());
      _resourceLimitMgr.incrementResourceCount(volume.getAccountId(),ResourceType.primary_storage,volume.getSize());
    }
  }
  if (vol == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volume.getId());
  }
  VolumeVO volVO=_volsDao.findById(vol.getId());
  if (volVO.getFormat() == null) {
    volVO.setFormat(getSupportedImageFormatForCluster(rootDiskHyperType));
  }
  _volsDao.update(volVO.getId(),volVO);
  return volFactory.getVolume(volVO.getId());
}",0.990704647676162
105708,"@Override public void update(UsageVolumeVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  PreparedStatement pstmt=null;
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      pstmt=txn.prepareAutoCloseStatement(UPDATE_DELETED);
      pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
      pstmt.setLong(2,usage.getAccountId());
      pstmt.setLong(3,usage.getId());
    }
    pstmt.executeUpdate();
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    txn.close();
  }
}","@Override public void update(UsageVolumeVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  PreparedStatement pstmt=null;
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      pstmt=txn.prepareAutoCloseStatement(UPDATE_DELETED);
      pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
      pstmt.setLong(2,usage.getAccountId());
      pstmt.setLong(3,usage.getId());
      pstmt.executeUpdate();
    }
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    txn.close();
  }
}",0.9574468085106383
105709,"@Override public void invalidateRunSession(long id,long runid){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","@Override public void invalidateRunSession(long id,long runid){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.976514215080346
105710,"@Override public List<Long> listOrphanMsids(){
  List<Long> orphanList=new ArrayList<Long>();
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      orphanList.add(rs.getLong(1));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
  return orphanList;
}","@Override public List<Long> listOrphanMsids(){
  List<Long> orphanList=new ArrayList<Long>();
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      orphanList.add(rs.getLong(1));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  return orphanList;
}",0.980269989615784
105711,"@Override public void update(long id,long runId,State state,Date lastUpdate){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    if (count < 1) {
      s_logger.info(""String_Node_Str"" + runId + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + runId + ""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","@Override public void update(long id,long runId,State state,Date lastUpdate){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    if (count < 1) {
      s_logger.info(""String_Node_Str"" + runId + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + runId + ""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}",0.988670244484198
105712,"/** 
 * Converts a string of the format 'yy-MM-dd'T'HH:mm:ss.SSS"" into ms.
 * @param str containing the interval.
 * @param defaultValue value to return if str doesn't parse.  If -1, throws VmopsRuntimeException
 * @return interval in ms
 */
public static long parseInterval(String str,long defaultValue){
  SimpleDateFormat sdf=null;
  if (str.contains(""String_Node_Str"")) {
    sdf=new SimpleDateFormat(""String_Node_Str"");
  }
 else   if (str.contains(""String_Node_Str"")) {
    sdf=new SimpleDateFormat(""String_Node_Str"");
  }
 else   if (str.contains(""String_Node_Str"")) {
    sdf=new SimpleDateFormat(""String_Node_Str"");
  }
 else   if (str.contains(""String_Node_Str"")) {
    sdf=new SimpleDateFormat(""String_Node_Str"");
  }
 else   if (str.contains(""String_Node_Str"")) {
    sdf=new SimpleDateFormat(""String_Node_Str"");
  }
  Date date;
  try {
    if (str == null || sdf == null) {
      throw new ParseException(""String_Node_Str"",0);
    }
    date=sdf.parse(str);
    return date.getTime();
  }
 catch (  ParseException e) {
    if (defaultValue != -1) {
      return defaultValue;
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + str,e);
    }
  }
}","/** 
 * Converts a string of the format 'yy-MM-dd'T'HH:mm:ss.SSS"" into ms.
 * @param str containing the interval.
 * @param defaultValue value to return if str doesn't parse.  If -1, throws VmopsRuntimeException
 * @return interval in ms
 */
public static long parseInterval(String str,long defaultValue){
  try {
    if (str == null) {
      throw new ParseException(""String_Node_Str"",0);
    }
    SimpleDateFormat sdf=null;
    if (str.contains(""String_Node_Str"")) {
      sdf=new SimpleDateFormat(""String_Node_Str"");
    }
 else     if (str.contains(""String_Node_Str"")) {
      sdf=new SimpleDateFormat(""String_Node_Str"");
    }
 else     if (str.contains(""String_Node_Str"")) {
      sdf=new SimpleDateFormat(""String_Node_Str"");
    }
 else     if (str.contains(""String_Node_Str"")) {
      sdf=new SimpleDateFormat(""String_Node_Str"");
    }
 else     if (str.contains(""String_Node_Str"")) {
      sdf=new SimpleDateFormat(""String_Node_Str"");
    }
    if (sdf == null) {
      throw new ParseException(""String_Node_Str"",0);
    }
    Date date=sdf.parse(str);
    return date.getTime();
  }
 catch (  ParseException e) {
    if (defaultValue != -1) {
      return defaultValue;
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + str,e);
    }
  }
}",0.5226253567060742
105713,"public static String putObject(SwiftClientCfg cfg,File srcFile,String container,String fileName){
  String swiftCli=getSwiftCLIPath();
  if (fileName == null) {
    fileName=srcFile.getName();
  }
  String srcDirectory=srcFile.getParent();
  Script command=new Script(""String_Node_Str"",logger);
  long size=srcFile.length();
  command.add(""String_Node_Str"");
  if (size <= SWIFT_MAX_SIZE) {
    command.add(""String_Node_Str"" + srcDirectory + ""String_Node_Str""+ swiftCli+ ""String_Node_Str""+ cfg.getEndPoint()+ ""String_Node_Str""+ cfg.getAccount()+ ""String_Node_Str""+ cfg.getUserName()+ ""String_Node_Str""+ cfg.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ fileName);
  }
 else {
    command.add(""String_Node_Str"" + srcDirectory + ""String_Node_Str""+ swiftCli+ ""String_Node_Str""+ cfg.getEndPoint()+ ""String_Node_Str""+ cfg.getAccount()+ ""String_Node_Str""+ cfg.getUserName()+ ""String_Node_Str""+ cfg.getKey()+ ""String_Node_Str""+ SWIFT_MAX_SIZE+ ""String_Node_Str""+ container+ ""String_Node_Str""+ fileName);
  }
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + result);
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + lines.toString());
      }
    }
  }
  return container + File.separator + srcFile.getName();
}","public static String putObject(SwiftClientCfg cfg,File srcFile,String container,String fileName){
  String swiftCli=getSwiftCLIPath();
  if (fileName == null) {
    fileName=srcFile.getName();
  }
  String srcDirectory=srcFile.getParent();
  Script command=new Script(""String_Node_Str"",logger);
  long size=srcFile.length();
  command.add(""String_Node_Str"");
  if (size <= SWIFT_MAX_SIZE) {
    command.add(""String_Node_Str"" + srcDirectory + ""String_Node_Str""+ swiftCli+ ""String_Node_Str""+ cfg.getEndPoint()+ ""String_Node_Str""+ cfg.getAccount()+ ""String_Node_Str""+ cfg.getUserName()+ ""String_Node_Str""+ cfg.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ fileName);
  }
 else {
    command.add(""String_Node_Str"" + srcDirectory + ""String_Node_Str""+ swiftCli+ ""String_Node_Str""+ cfg.getEndPoint()+ ""String_Node_Str""+ cfg.getAccount()+ ""String_Node_Str""+ cfg.getUserName()+ ""String_Node_Str""+ cfg.getKey()+ ""String_Node_Str""+ SWIFT_MAX_SIZE+ ""String_Node_Str""+ container+ ""String_Node_Str""+ fileName);
  }
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + result);
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + Arrays.toString(lines));
      }
    }
  }
  return container + File.separator + srcFile.getName();
}",0.9890243902439024
105714,"public static Long getRemoteSize(String url){
  Long remoteSize=(long)0;
  HttpURLConnection httpConn=null;
  HttpsURLConnection httpsConn=null;
  try {
    URI uri=new URI(url);
    if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      httpConn=(HttpURLConnection)uri.toURL().openConnection();
      httpConn.setConnectTimeout(2000);
      httpConn.setReadTimeout(5000);
      if (httpConn != null) {
        String contentLength=httpConn.getHeaderField(""String_Node_Str"");
        if (contentLength != null) {
          remoteSize=Long.parseLong(contentLength);
        }
        httpConn.disconnect();
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      httpsConn=(HttpsURLConnection)uri.toURL().openConnection();
      if (httpsConn != null) {
        String contentLength=httpsConn.getHeaderField(""String_Node_Str"");
        if (contentLength != null) {
          remoteSize=Long.parseLong(contentLength);
        }
        httpsConn.disconnect();
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
catch (  IOException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
  return remoteSize;
}","public static Long getRemoteSize(String url){
  Long remoteSize=(long)0;
  HttpURLConnection httpConn=null;
  HttpsURLConnection httpsConn=null;
  try {
    URI uri=new URI(url);
    if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      httpConn=(HttpURLConnection)uri.toURL().openConnection();
      if (httpConn != null) {
        httpConn.setConnectTimeout(2000);
        httpConn.setReadTimeout(5000);
        String contentLength=httpConn.getHeaderField(""String_Node_Str"");
        if (contentLength != null) {
          remoteSize=Long.parseLong(contentLength);
        }
        httpConn.disconnect();
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      httpsConn=(HttpsURLConnection)uri.toURL().openConnection();
      if (httpsConn != null) {
        String contentLength=httpsConn.getHeaderField(""String_Node_Str"");
        if (contentLength != null) {
          remoteSize=Long.parseLong(contentLength);
        }
        httpsConn.disconnect();
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
catch (  IOException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
  return remoteSize;
}",0.9742143432715552
105715,"public static boolean isSameIsolationId(String one,String other){
  if ((one == null || one.equals(""String_Node_Str"")) && (other == null || other.equals(""String_Node_Str""))) {
    return true;
  }
  if ((one == null || other == null) && !(one == null && other == null)) {
    return false;
  }
  if (one.contains(VLAN_UNTAGGED) && other.contains(VLAN_UNTAGGED)) {
    return true;
  }
  if (one.startsWith(VLAN_PREFIX)) {
    one=one.substring(VLAN_PREFIX_LENGTH);
  }
  if (other.startsWith(VLAN_PREFIX)) {
    other=other.substring(VLAN_PREFIX_LENGTH);
  }
  if (one.equalsIgnoreCase(other)) {
    return true;
  }
  return false;
}","public static boolean isSameIsolationId(String one,String other){
  if ((one == null || one.isEmpty()) && (other == null || other.isEmpty())) {
    return true;
  }
  if (one == null || other == null) {
    return false;
  }
  if (one.contains(VLAN_UNTAGGED) && other.contains(VLAN_UNTAGGED)) {
    return true;
  }
  if (one.startsWith(VLAN_PREFIX)) {
    one=one.substring(VLAN_PREFIX_LENGTH);
  }
  if (other.startsWith(VLAN_PREFIX)) {
    other=other.substring(VLAN_PREFIX_LENGTH);
  }
  if (one.equalsIgnoreCase(other)) {
    return true;
  }
  return false;
}",0.8623853211009175
105716,"public static String getPublicKeyFingerprint(String publicKey){
  String key[]=publicKey.split(""String_Node_Str"");
  if (key.length < 2) {
    throw new RuntimeException(""String_Node_Str"");
  }
  byte[] keyBytes=Base64.decodeBase64(key[1]);
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  String sumString=toHexString(md5.digest(keyBytes));
  String rString=""String_Node_Str"";
  for (int i=2; i <= sumString.length(); i+=2) {
    rString+=sumString.substring(i - 2,i);
    if (i != sumString.length())     rString+=""String_Node_Str"";
  }
  return rString;
}","public static String getPublicKeyFingerprint(String publicKey){
  String key[]=publicKey.split(""String_Node_Str"");
  if (key.length < 2) {
    throw new RuntimeException(""String_Node_Str"");
  }
  byte[] keyBytes=Base64.decodeBase64(key[1]);
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  String rString=""String_Node_Str"";
  String sumString=""String_Node_Str"";
  if (md5 != null) {
    sumString=toHexString(md5.digest(keyBytes));
  }
  for (int i=2; i <= sumString.length(); i+=2) {
    rString+=sumString.substring(i - 2,i);
    if (i != sumString.length())     rString+=""String_Node_Str"";
  }
  return rString;
}",0.9115549215406562
105717,"public DecodedDataObject(String objType,Long size,String name,String path,DecodedDataStore store){
  this.objType=objType;
  this.size=size;
  this.path=path;
  this.store=store;
}","public DecodedDataObject(String objType,Long size,String name,String path,DecodedDataStore store){
  this.objType=objType;
  this.size=size;
  this.name=name;
  this.path=path;
  this.store=store;
}",0.9523809523809524
105718,"@Override @DB public int increaseAlertCount(long id){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  int changedRows=0;
  try {
    txn.start();
    try (PreparedStatement pstmt=txn.prepareStatement(""String_Node_Str"")){
      pstmt.setLong(1,id);
      changedRows=pstmt.executeUpdate();
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
    }
    txn.commit();
  }
 catch (  RuntimeException e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    txn.close();
  }
  return changedRows;
}","@Override @DB public int increaseAlertCount(long id){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  int changedRows=0;
  try {
    txn.start();
    try (PreparedStatement pstmt=txn.prepareStatement(""String_Node_Str"")){
      if (pstmt != null) {
        pstmt.setLong(1,id);
        changedRows=pstmt.executeUpdate();
      }
    }
 catch (    SQLException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
    }
    txn.commit();
  }
 catch (  RuntimeException e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    txn.close();
  }
  return changedRows;
}",0.9722419928825624
105719,"@Override public void execute(){
  PortableIpRange portableIpRange=_entityMgr.findById(PortableIpRange.class,getEntityId());
  PortableIpRangeResponse response=null;
  if (portableIpRange != null) {
    response=_responseGenerator.createPortableIPRangeResponse(portableIpRange);
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  PortableIpRange portableIpRange=_entityMgr.findById(PortableIpRange.class,getEntityId());
  if (portableIpRange != null) {
    PortableIpRangeResponse response=_responseGenerator.createPortableIPRangeResponse(portableIpRange);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
}",0.8984700973574409
105720,"@Override public void execute(){
  ListResponse<PortableIpRangeResponse> response=new ListResponse<PortableIpRangeResponse>();
  List<PortableIpRangeResponse> responses=new ArrayList<PortableIpRangeResponse>();
  List<? extends PortableIpRange> portableIpRanges=_configService.listPortableIpRanges(this);
  if (portableIpRanges != null && !portableIpRanges.isEmpty()) {
    for (    PortableIpRange range : portableIpRanges) {
      PortableIpRangeResponse rangeResponse=_responseGenerator.createPortableIPRangeResponse(range);
      List<? extends PortableIp> portableIps=_configService.listPortableIps(range.getId());
      if (portableIps != null && !portableIps.isEmpty()) {
        List<PortableIpResponse> portableIpResponses=new ArrayList<PortableIpResponse>();
        for (        PortableIp portableIP : portableIps) {
          PortableIpResponse portableIpresponse=_responseGenerator.createPortableIPResponse(portableIP);
          portableIpResponses.add(portableIpresponse);
        }
        rangeResponse.setPortableIpResponses(portableIpResponses);
      }
      responses.add(rangeResponse);
    }
  }
  response.setResponses(responses,portableIpRanges.size());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  ListResponse<PortableIpRangeResponse> response=new ListResponse<PortableIpRangeResponse>();
  List<PortableIpRangeResponse> responses=new ArrayList<PortableIpRangeResponse>();
  List<? extends PortableIpRange> portableIpRanges=_configService.listPortableIpRanges(this);
  if (portableIpRanges != null && !portableIpRanges.isEmpty()) {
    for (    PortableIpRange range : portableIpRanges) {
      PortableIpRangeResponse rangeResponse=_responseGenerator.createPortableIPRangeResponse(range);
      List<? extends PortableIp> portableIps=_configService.listPortableIps(range.getId());
      if (portableIps != null && !portableIps.isEmpty()) {
        List<PortableIpResponse> portableIpResponses=new ArrayList<PortableIpResponse>();
        for (        PortableIp portableIP : portableIps) {
          PortableIpResponse portableIpresponse=_responseGenerator.createPortableIPResponse(portableIP);
          portableIpResponses.add(portableIpresponse);
        }
        rangeResponse.setPortableIpResponses(portableIpResponses);
      }
      responses.add(rangeResponse);
    }
    response.setResponses(responses,portableIpRanges.size());
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.951740506329114
105721,"private Long getVpcId(){
  if (ipAddressId != null) {
    IpAddress ipAddr=_networkService.getIp(ipAddressId);
    if (ipAddr == null || !ipAddr.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddr.getId());
    }
 else {
      return ipAddr.getVpcId();
    }
  }
  return null;
}","private Long getVpcId(){
  if (ipAddressId != null) {
    IpAddress ipAddr=_networkService.getIp(ipAddressId);
    if (ipAddr == null || !ipAddr.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId);
    }
 else {
      return ipAddr.getVpcId();
    }
  }
  return null;
}",0.7955625990491284
105722,"public Long getSourceIpAddressId(){
  if (publicIpId != null) {
    IpAddress ipAddr=_networkService.getIp(publicIpId);
    if (ipAddr == null || !ipAddr.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddr.getId());
    }
  }
 else   if (getEntityId() != null) {
    LoadBalancer rule=_entityMgr.findById(LoadBalancer.class,getEntityId());
    return rule.getSourceIpAddressId();
  }
  return publicIpId;
}","public Long getSourceIpAddressId(){
  if (publicIpId != null) {
    IpAddress ipAddr=_networkService.getIp(publicIpId);
    if (ipAddr == null || !ipAddr.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + publicIpId);
    }
  }
 else   if (getEntityId() != null) {
    LoadBalancer rule=_entityMgr.findById(LoadBalancer.class,getEntityId());
    return rule.getSourceIpAddressId();
  }
  return publicIpId;
}",0.9728506787330315
105723,"private Long getVpcId(){
  if (publicIpId != null) {
    IpAddress ipAddr=_networkService.getIp(publicIpId);
    if (ipAddr == null || !ipAddr.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddr.getId());
    }
 else {
      return ipAddr.getVpcId();
    }
  }
  return null;
}","private Long getVpcId(){
  if (publicIpId != null) {
    IpAddress ipAddr=_networkService.getIp(publicIpId);
    if (ipAddr == null || !ipAddr.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + publicIpId);
    }
 else {
      return ipAddr.getVpcId();
    }
  }
  return null;
}",0.7955271565495208
105724,"@Override public void execute(){
  Pair<List<? extends LoadBalancer>,Integer> loadBalancers=_lbService.searchForLoadBalancers(this);
  ListResponse<LoadBalancerResponse> response=new ListResponse<LoadBalancerResponse>();
  List<LoadBalancerResponse> lbResponses=new ArrayList<LoadBalancerResponse>();
  if (loadBalancers != null) {
    for (    LoadBalancer loadBalancer : loadBalancers.first()) {
      LoadBalancerResponse lbResponse=_responseGenerator.createLoadBalancerResponse(loadBalancer);
      lbResponse.setObjectName(""String_Node_Str"");
      lbResponses.add(lbResponse);
    }
  }
  response.setResponses(lbResponses,loadBalancers.second());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Pair<List<? extends LoadBalancer>,Integer> loadBalancers=_lbService.searchForLoadBalancers(this);
  ListResponse<LoadBalancerResponse> response=new ListResponse<LoadBalancerResponse>();
  List<LoadBalancerResponse> lbResponses=new ArrayList<LoadBalancerResponse>();
  if (loadBalancers != null) {
    for (    LoadBalancer loadBalancer : loadBalancers.first()) {
      LoadBalancerResponse lbResponse=_responseGenerator.createLoadBalancerResponse(loadBalancer);
      lbResponse.setObjectName(""String_Node_Str"");
      lbResponses.add(lbResponse);
    }
    response.setResponses(lbResponses,loadBalancers.second());
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.9159891598915988
105725,"@Override public void execute() throws ResourceAllocationException, ResourceUnavailableException {
  CallContext callerContext=CallContext.current();
  GlobalLoadBalancerRule rule=_entityMgr.findById(GlobalLoadBalancerRule.class,getEntityId());
  GlobalLoadBalancerResponse response=null;
  if (rule != null) {
    response=_responseGenerator.createGlobalLoadBalancerResponse(rule);
    setResponseObject(response);
  }
  response.setResponseName(getCommandName());
}","@Override public void execute() throws ResourceAllocationException, ResourceUnavailableException {
  GlobalLoadBalancerRule rule=_entityMgr.findById(GlobalLoadBalancerRule.class,getEntityId());
  if (rule != null) {
    GlobalLoadBalancerResponse response=_responseGenerator.createGlobalLoadBalancerResponse(rule);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
}",0.7720504009163803
105726,"protected boolean filter(ExcludeList avoid,StoragePool pool,DiskProfile dskCh,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  if (clusterId != null) {
    ClusterVO cluster=_clusterDao.findById(clusterId);
    if (!(cluster.getHypervisorType() == dskCh.getHypervisorType())) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return false;
    }
  }
 else   if (pool.getHypervisor() != null && !(pool.getHypervisor() == dskCh.getHypervisorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Volume volume=_volumeDao.findById(dskCh.getVolumeId());
  List<Volume> requestVolumes=new ArrayList<Volume>();
  requestVolumes.add(volume);
  return storageMgr.storagePoolHasEnoughIops(requestVolumes,pool) && storageMgr.storagePoolHasEnoughSpace(requestVolumes,pool);
}","protected boolean filter(ExcludeList avoid,StoragePool pool,DiskProfile dskCh,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  if (clusterId != null) {
    ClusterVO cluster=_clusterDao.findById(clusterId);
    if (!(cluster.getHypervisorType() == dskCh.getHypervisorType())) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return false;
    }
  }
 else   if (pool.getHypervisor() != null && !pool.getHypervisor().equals(HypervisorType.Any) && !(pool.getHypervisor() == dskCh.getHypervisorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Volume volume=_volumeDao.findById(dskCh.getVolumeId());
  List<Volume> requestVolumes=new ArrayList<Volume>();
  requestVolumes.add(volume);
  return storageMgr.storagePoolHasEnoughIops(requestVolumes,pool) && storageMgr.storagePoolHasEnoughSpace(requestVolumes,pool);
}",0.978021978021978
105727,"@Override @DB public List<VlanVO> searchForZoneWideVlans(long dcId,String vlanType,String vlanId){
  StringBuilder sql=new StringBuilder(FindZoneWideVlans);
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    pstmt.setLong(1,dcId);
    pstmt.setString(2,vlanType);
    pstmt.setString(3,vlanId);
    ResultSet rs=pstmt.executeQuery();
    List<VlanVO> zoneWideVlans=new ArrayList<VlanVO>();
    while (rs.next()) {
      zoneWideVlans.add(toEntityBean(rs,false));
    }
    return zoneWideVlans;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","@Override @DB public List<VlanVO> searchForZoneWideVlans(long dcId,String vlanType,String vlanId){
  StringBuilder sql=new StringBuilder(FindZoneWideVlans);
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<VlanVO> zoneWideVlans=new ArrayList<VlanVO>();
  try (PreparedStatement pstmt=txn.prepareStatement(sql.toString())){
    if (pstmt != null) {
      pstmt.setLong(1,dcId);
      pstmt.setString(2,vlanType);
      pstmt.setString(3,vlanId);
      try (ResultSet rs=pstmt.executeQuery()){
        while (rs.next()) {
          zoneWideVlans.add(toEntityBean(rs,false));
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    return zoneWideVlans;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.7037271004421983
105728,"@Override @DB public List<Long> searchForPoolIdsForPendingWorkJobs(long msId){
  StringBuilder sql=new StringBuilder(FindPoolIds);
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    pstmt.setLong(1,msId);
    ResultSet rs=pstmt.executeQuery();
    List<Long> poolIds=new ArrayList<Long>();
    while (rs.next()) {
      poolIds.add(rs.getLong(""String_Node_Str""));
    }
    return poolIds;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","@Override @DB public List<Long> searchForPoolIdsForPendingWorkJobs(long msId){
  StringBuilder sql=new StringBuilder(FindPoolIds);
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<Long> poolIds=new ArrayList<Long>();
  try (PreparedStatement pstmt=txn.prepareStatement(sql.toString())){
    if (pstmt != null) {
      pstmt.setLong(1,msId);
      try (ResultSet rs=pstmt.executeQuery()){
        while (rs.next()) {
          poolIds.add(rs.getLong(""String_Node_Str""));
        }
      }
 catch (      SQLException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    return poolIds;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.6837107377647919
105729,"private static void initDB(String dbPropsFile,String rootPassword,String[] databases,boolean dryRun){
  Properties dbProperties=new Properties();
  try {
    dbProperties.load(new FileInputStream(new File(dbPropsFile)));
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e);
    System.exit(1);
  }
  for (  String database : databases) {
    String host=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String port=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String username=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String password=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String dbName=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    System.out.println(String.format(""String_Node_Str"",dbName,host,port,username,password));
    List<String> queries=new ArrayList<String>();
    queries.add(String.format(""String_Node_Str"",dbName));
    queries.add(String.format(""String_Node_Str"",dbName));
    queries.add(String.format(""String_Node_Str"",dbName,username,password));
    queries.add(String.format(""String_Node_Str"",dbName,username,password));
    for (    String query : queries) {
      runQuery(host,port,rootPassword,query,dryRun);
    }
  }
}","private static void initDB(String dbPropsFile,String rootPassword,String[] databases,boolean dryRun){
  Properties dbProperties=new Properties();
  try (FileInputStream f_stream=new FileInputStream(new File(dbPropsFile))){
    dbProperties.load(f_stream);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"" + e);
    System.exit(1);
  }
  for (  String database : databases) {
    String host=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String port=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String username=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String password=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    String dbName=dbProperties.getProperty(String.format(""String_Node_Str"",database));
    System.out.println(String.format(""String_Node_Str"",dbName,host,port,username,password));
    List<String> queries=new ArrayList<String>();
    queries.add(String.format(""String_Node_Str"",dbName));
    queries.add(String.format(""String_Node_Str"",dbName));
    queries.add(String.format(""String_Node_Str"",dbName,username,password));
    queries.add(String.format(""String_Node_Str"",dbName,username,password));
    for (    String query : queries) {
      runQuery(host,port,rootPassword,query,dryRun);
    }
  }
}",0.9552463332079728
105730,"@Override public void update(UsageIPAddressVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  PreparedStatement pstmt=null;
  try {
    txn.start();
    if (usage.getReleased() != null) {
      pstmt=txn.prepareAutoCloseStatement(UPDATE_RELEASED);
      pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getReleased()));
      pstmt.setLong(2,usage.getAccountId());
      pstmt.setString(3,usage.getAddress());
    }
    pstmt.executeUpdate();
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    txn.close();
  }
}","@Override public void update(UsageIPAddressVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  try {
    txn.start();
    if (usage.getReleased() != null) {
      try (PreparedStatement pstmt=txn.prepareStatement(UPDATE_RELEASED)){
        if (pstmt != null) {
          pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getReleased()));
          pstmt.setLong(2,usage.getAccountId());
          pstmt.setString(3,usage.getAddress());
          pstmt.executeUpdate();
        }
      }
 catch (      SQLException e) {
        throw new CloudException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    txn.close();
  }
}",0.7312252964426877
105731,"@Override public void update(UsageLoadBalancerPolicyVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  PreparedStatement pstmt=null;
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      pstmt=txn.prepareAutoCloseStatement(UPDATE_DELETED);
      pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
      pstmt.setLong(2,usage.getAccountId());
      pstmt.setLong(3,usage.getId());
    }
    pstmt.executeUpdate();
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    txn.close();
  }
}","@Override public void update(UsageLoadBalancerPolicyVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      try (PreparedStatement pstmt=txn.prepareStatement(UPDATE_DELETED)){
        if (pstmt != null) {
          pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
          pstmt.setLong(2,usage.getAccountId());
          pstmt.setLong(3,usage.getId());
          pstmt.executeUpdate();
        }
      }
 catch (      SQLException e) {
        throw new CloudException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    txn.close();
  }
}",0.7313531353135313
105732,"@Override public void update(UsageNetworkOfferingVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  PreparedStatement pstmt=null;
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      pstmt=txn.prepareAutoCloseStatement(UPDATE_DELETED);
      pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
      pstmt.setLong(2,usage.getAccountId());
      pstmt.setLong(3,usage.getVmInstanceId());
      pstmt.setLong(4,usage.getNetworkOfferingId());
    }
    pstmt.executeUpdate();
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    txn.close();
  }
}","@Override public void update(UsageNetworkOfferingVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      try (PreparedStatement pstmt=txn.prepareStatement(UPDATE_DELETED)){
        if (pstmt != null) {
          pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
          pstmt.setLong(2,usage.getAccountId());
          pstmt.setLong(3,usage.getVmInstanceId());
          pstmt.setLong(4,usage.getNetworkOfferingId());
          pstmt.executeUpdate();
        }
      }
 catch (      SQLException e) {
        throw new CloudException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    txn.close();
  }
}",0.7492373398413666
105733,"@Override public void update(UsagePortForwardingRuleVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  PreparedStatement pstmt=null;
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      pstmt=txn.prepareAutoCloseStatement(UPDATE_DELETED);
      pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
      pstmt.setLong(2,usage.getAccountId());
      pstmt.setLong(3,usage.getId());
    }
    pstmt.executeUpdate();
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    txn.close();
  }
}","@Override public void update(UsagePortForwardingRuleVO usage){
  TransactionLegacy txn=TransactionLegacy.open(TransactionLegacy.USAGE_DB);
  try {
    txn.start();
    if (usage.getDeleted() != null) {
      try (PreparedStatement pstmt=txn.prepareStatement(UPDATE_DELETED)){
        if (pstmt != null) {
          pstmt.setString(1,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),usage.getDeleted()));
          pstmt.setLong(2,usage.getAccountId());
          pstmt.setLong(3,usage.getId());
          pstmt.executeUpdate();
        }
      }
 catch (      SQLException e) {
        throw new CloudException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    txn.commit();
  }
 catch (  Exception e) {
    txn.rollback();
    s_logger.warn(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    txn.close();
  }
}",0.7313531353135313
105734,"@Override @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_POLICY_UPDATE,eventDescription=""String_Node_Str"",async=true) public SnapshotPolicy updateSnapshotPolicy(UpdateSnapshotPolicyCmd cmd){
  Long id=cmd.getId();
  String customUUID=cmd.getCustomId();
  Boolean display=cmd.getDisplay();
  SnapshotPolicyVO policyVO=_snapshotPolicyDao.findById(id);
  if (display != null)   policyVO.setDisplay(display);
  if (customUUID != null)   policyVO.setUuid(customUUID);
  _snapshotPolicyDao.update(id,policyVO);
  return policyVO;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_POLICY_UPDATE,eventDescription=""String_Node_Str"",async=true) public SnapshotPolicy updateSnapshotPolicy(UpdateSnapshotPolicyCmd cmd){
  Long id=cmd.getId();
  String customUUID=cmd.getCustomId();
  Boolean display=cmd.getDisplay();
  SnapshotPolicyVO policyVO=_snapshotPolicyDao.findById(id);
  if (display != null) {
    boolean previousDisplay=policyVO.isDisplay();
    policyVO.setDisplay(display);
    _snapSchedMgr.scheduleOrCancelNextSnapshotJobOnDisplayChange(policyVO,previousDisplay);
  }
  if (customUUID != null)   policyVO.setUuid(customUUID);
  _snapshotPolicyDao.update(id,policyVO);
  return policyVO;
}",0.8239202657807309
105735,"@Override @DB public Date scheduleNextSnapshotJob(final SnapshotPolicyVO policy){
  if (policy == null) {
    return null;
  }
  if (!policy.isDisplay()) {
    removeSchedule(policy.getVolumeId(),policy.getId());
  }
  final long policyId=policy.getId();
  if (policyId == Snapshot.MANUAL_POLICY_ID) {
    return null;
  }
  final Date nextSnapshotTimestamp=getNextScheduledTime(policyId,_currentTimestamp);
  SnapshotScheduleVO spstSchedVO=_snapshotScheduleDao.findOneByVolumePolicy(policy.getVolumeId(),policy.getId());
  if (spstSchedVO == null) {
    spstSchedVO=new SnapshotScheduleVO(policy.getVolumeId(),policyId,nextSnapshotTimestamp);
    _snapshotScheduleDao.persist(spstSchedVO);
  }
 else {
    try {
      spstSchedVO=_snapshotScheduleDao.acquireInLockTable(spstSchedVO.getId());
      spstSchedVO.setPolicyId(policyId);
      spstSchedVO.setScheduledTimestamp(nextSnapshotTimestamp);
      spstSchedVO.setAsyncJobId(null);
      spstSchedVO.setSnapshotId(null);
      _snapshotScheduleDao.update(spstSchedVO.getId(),spstSchedVO);
    }
  finally {
      if (spstSchedVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(spstSchedVO.getId());
      }
    }
  }
  return nextSnapshotTimestamp;
}","@Override @DB public Date scheduleNextSnapshotJob(final SnapshotPolicyVO policy){
  if (policy == null) {
    return null;
  }
  if (!policy.isDisplay()) {
    removeSchedule(policy.getVolumeId(),policy.getId());
    return null;
  }
  final long policyId=policy.getId();
  if (policyId == Snapshot.MANUAL_POLICY_ID) {
    return null;
  }
  final Date nextSnapshotTimestamp=getNextScheduledTime(policyId,_currentTimestamp);
  SnapshotScheduleVO spstSchedVO=_snapshotScheduleDao.findOneByVolumePolicy(policy.getVolumeId(),policy.getId());
  if (spstSchedVO == null) {
    spstSchedVO=new SnapshotScheduleVO(policy.getVolumeId(),policyId,nextSnapshotTimestamp);
    _snapshotScheduleDao.persist(spstSchedVO);
  }
 else {
    try {
      spstSchedVO=_snapshotScheduleDao.acquireInLockTable(spstSchedVO.getId());
      spstSchedVO.setPolicyId(policyId);
      spstSchedVO.setScheduledTimestamp(nextSnapshotTimestamp);
      spstSchedVO.setAsyncJobId(null);
      spstSchedVO.setSnapshotId(null);
      _snapshotScheduleDao.update(spstSchedVO.getId(),spstSchedVO);
    }
  finally {
      if (spstSchedVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(spstSchedVO.getId());
      }
    }
  }
  return nextSnapshotTimestamp;
}",0.9930697105584998
105736,"@Override public long getUsedIops(StoragePoolVO pool){
  long usedIops=0;
  List<VolumeVO> volumes=_volumeDao.findByPoolId(pool.getId(),null);
  if (volumes != null && volumes.size() > 0) {
    for (    VolumeVO volume : volumes) {
      usedIops+=volume.getMinIops();
    }
  }
  return usedIops;
}","@Override public long getUsedIops(StoragePoolVO pool){
  long usedIops=0;
  List<VolumeVO> volumes=_volumeDao.findByPoolId(pool.getId(),null);
  if (volumes != null && volumes.size() > 0) {
    for (    VolumeVO volume : volumes) {
      usedIops+=volume.getMinIops() != null ? volume.getMinIops() : 0;
    }
  }
  return usedIops;
}",0.9462025316455696
105737,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  return customparameterMap;
}",0.919431279620853
105738,"public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      String key : value.keySet()) {
        customparameterMap.put(key,value.get(key));
      }
    }
  }
  return customparameterMap;
}","public Map<String,String> getDetails(){
  Map<String,String> customparameterMap=new HashMap<String,String>();
  if (details != null && details.size() != 0) {
    Collection parameterCollection=details.values();
    Iterator iter=parameterCollection.iterator();
    while (iter.hasNext()) {
      HashMap<String,String> value=(HashMap<String,String>)iter.next();
      for (      Map.Entry<String,String> entry : value.entrySet()) {
        customparameterMap.put(entry.getKey(),entry.getValue());
      }
    }
  }
  return customparameterMap;
}",0.919431279620853
105739,"public void putContextParameters(Map<Object,Object> details){
  if (details == null)   return;
  for (  Object key : details.keySet()) {
    putContextParameter(key,details.get(key));
  }
}","public void putContextParameters(Map<Object,Object> details){
  if (details == null)   return;
  for (  Map.Entry<Object,Object> entry : details.entrySet()) {
    putContextParameter(entry.getKey(),entry.getValue());
  }
}",0.7980535279805353
105740,"protected AgentAttache(final AgentManagerImpl agentMgr,final long id,final String name,final boolean maintenance){
  _id=id;
  _name=name;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
  _agentMgr=agentMgr;
  _nextSequence=new Long(s_rand.nextInt(Short.MAX_VALUE)) << 48;
}","protected AgentAttache(final AgentManagerImpl agentMgr,final long id,final String name,final boolean maintenance){
  _id=id;
  _name=name;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
  _agentMgr=agentMgr;
  _nextSequence=new Long(s_rand.nextInt(Short.MAX_VALUE)).longValue() << 48;
}",0.9842105263157894
105741,"private VM createWorkingVM(Connection conn,String vmName,String guestOSType,List<VolumeObjectTO> listVolumeTo) throws BadServerResponse, Types.VmBadPowerState, Types.SrFull, Types.OperationNotAllowed, XenAPIException, XmlRpcException {
  String guestOsTypeName=getGuestOsType(guestOSType,false);
  if (guestOsTypeName == null) {
    String msg=""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ guestOSType+ ""String_Node_Str"";
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  VM template=getVM(conn,guestOsTypeName);
  VM vm=template.createClone(conn,vmName);
  vm.setIsATemplate(conn,false);
  Map<VDI,VolumeObjectTO> vdiMap=new HashMap<VDI,VolumeObjectTO>();
  for (  VolumeObjectTO volume : listVolumeTo) {
    String vdiUuid=volume.getPath();
    try {
      VDI vdi=VDI.getByUuid(conn,vdiUuid);
      vdiMap.put(vdi,volume);
    }
 catch (    Types.UuidInvalid e) {
      s_logger.warn(""String_Node_Str"" + vdiUuid + ""String_Node_Str"");
    }
  }
  for (  VDI vdi : vdiMap.keySet()) {
    VolumeObjectTO volumeTO=vdiMap.get(vdi);
    VBD.Record vbdr=new VBD.Record();
    vbdr.VM=vm;
    vbdr.VDI=vdi;
    if (volumeTO.getVolumeType() == Volume.Type.ROOT) {
      vbdr.bootable=true;
      vbdr.unpluggable=false;
    }
 else {
      vbdr.bootable=false;
      vbdr.unpluggable=true;
    }
    vbdr.userdevice=Long.toString(volumeTO.getDeviceId());
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
    VBD.create(conn,vbdr);
  }
  return vm;
}","private VM createWorkingVM(Connection conn,String vmName,String guestOSType,List<VolumeObjectTO> listVolumeTo) throws BadServerResponse, Types.VmBadPowerState, Types.SrFull, Types.OperationNotAllowed, XenAPIException, XmlRpcException {
  String guestOsTypeName=getGuestOsType(guestOSType,false);
  if (guestOsTypeName == null) {
    String msg=""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ guestOSType+ ""String_Node_Str"";
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  VM template=getVM(conn,guestOsTypeName);
  VM vm=template.createClone(conn,vmName);
  vm.setIsATemplate(conn,false);
  Map<VDI,VolumeObjectTO> vdiMap=new HashMap<VDI,VolumeObjectTO>();
  for (  VolumeObjectTO volume : listVolumeTo) {
    String vdiUuid=volume.getPath();
    try {
      VDI vdi=VDI.getByUuid(conn,vdiUuid);
      vdiMap.put(vdi,volume);
    }
 catch (    Types.UuidInvalid e) {
      s_logger.warn(""String_Node_Str"" + vdiUuid + ""String_Node_Str"");
    }
  }
  for (  Map.Entry<VDI,VolumeObjectTO> entry : vdiMap.entrySet()) {
    VDI vdi=entry.getKey();
    VolumeObjectTO volumeTO=entry.getValue();
    VBD.Record vbdr=new VBD.Record();
    vbdr.VM=vm;
    vbdr.VDI=vdi;
    if (volumeTO.getVolumeType() == Volume.Type.ROOT) {
      vbdr.bootable=true;
      vbdr.unpluggable=false;
    }
 else {
      vbdr.bootable=false;
      vbdr.unpluggable=true;
    }
    vbdr.userdevice=Long.toString(volumeTO.getDeviceId());
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
    VBD.create(conn,vbdr);
  }
  return vm;
}",0.967699836867863
105742,"protected HashMap<String,VmStatsEntry> getVmStats(Connection conn,GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows))));
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(vmStatsAnswer.getNetworkReadKBs() + (getDataAverage(dataNode,col,numRows) / (8 * 2)));
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(vmStatsAnswer.getNetworkWriteKBs() + (getDataAverage(dataNode,col,numRows) / (8 * 2)));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  try {
    for (    String vmUUID : vmUUIDs) {
      VM vm=VM.getByUuid(conn,vmUUID);
      VmStatsEntry stats=vmResponseMap.get(vmUUID);
      double diskReadKBs=0;
      double diskWriteKBs=0;
      for (      VBD vbd : vm.getVBDs(conn)) {
        VBDMetrics vbdmetrics=vbd.getMetrics(conn);
        if (!isRefNull(vbdmetrics)) {
          try {
            diskReadKBs+=vbdmetrics.getIoReadKbs(conn);
            diskWriteKBs+=vbdmetrics.getIoWriteKbs(conn);
          }
 catch (          Types.HandleInvalid e) {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
      if (stats == null) {
        stats=new VmStatsEntry();
      }
      stats.setDiskReadKBs(diskReadKBs);
      stats.setDiskWriteKBs(diskWriteKBs);
      vmResponseMap.put(vmUUID,stats);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  return vmResponseMap;
}","protected HashMap<String,VmStatsEntry> getVmStats(Connection conn,GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows))));
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(vmStatsAnswer.getNetworkReadKBs() + (getDataAverage(dataNode,col,numRows) / (8 * 2)));
      }
 else       if (param.matches(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(vmStatsAnswer.getNetworkWriteKBs() + (getDataAverage(dataNode,col,numRows) / (8 * 2)));
      }
    }
  }
  for (  Map.Entry<String,VmStatsEntry> entry : vmResponseMap.entrySet()) {
    VmStatsEntry vmStatsAnswer=entry.getValue();
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  try {
    for (    String vmUUID : vmUUIDs) {
      VM vm=VM.getByUuid(conn,vmUUID);
      VmStatsEntry stats=vmResponseMap.get(vmUUID);
      double diskReadKBs=0;
      double diskWriteKBs=0;
      for (      VBD vbd : vm.getVBDs(conn)) {
        VBDMetrics vbdmetrics=vbd.getMetrics(conn);
        if (!isRefNull(vbdmetrics)) {
          try {
            diskReadKBs+=vbdmetrics.getIoReadKbs(conn);
            diskWriteKBs+=vbdmetrics.getIoWriteKbs(conn);
          }
 catch (          Types.HandleInvalid e) {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
      if (stats == null) {
        stats=new VmStatsEntry();
      }
      stats.setDiskReadKBs(diskReadKBs);
      stats.setDiskWriteKBs(diskWriteKBs);
      vmResponseMap.put(vmUUID,stats);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  return vmResponseMap;
}",0.9858518964479228
105743,"@Override public String toString(){
  StringBuilder sbuf=new StringBuilder(""String_Node_Str"");
  for (  HashMap<String,Pair<String,State>> clusterVM : _clusterVms.values()) {
    for (    String vmname : clusterVM.keySet()) {
      sbuf.append(vmname).append(""String_Node_Str"").append(clusterVM.get(vmname).second()).append(""String_Node_Str"");
    }
  }
  return sbuf.toString();
}","@Override public String toString(){
  StringBuilder sbuf=new StringBuilder(""String_Node_Str"");
  for (  HashMap<String,Pair<String,State>> clusterVM : _clusterVms.values()) {
    for (    Map.Entry<String,Pair<String,State>> entry : clusterVM.entrySet()) {
      String vmname=entry.getKey();
      Pair<String,State> vmstate=entry.getValue();
      sbuf.append(vmname).append(""String_Node_Str"").append(vmstate.second()).append(""String_Node_Str"");
    }
  }
  return sbuf.toString();
}",0.789838337182448
105744,"@Override public boolean verifyServicesCombination(Set<Service> services){
  Set<Service> netscalerServices=new HashSet<Service>();
  netscalerServices.add(Service.Lb);
  netscalerServices.add(Service.StaticNat);
  if (services != null && !services.isEmpty() && !netscalerServices.containsAll(services)) {
    s_logger.warn(""String_Node_Str"" + services + ""String_Node_Str"");
    String servicesList=""String_Node_Str"";
    for (    Service service : services) {
      servicesList+=service.getName() + ""String_Node_Str"";
    }
    s_logger.warn(""String_Node_Str"" + servicesList + ""String_Node_Str"");
    s_logger.warn(""String_Node_Str"" + services + ""String_Node_Str"");
    return false;
  }
  return true;
}","@Override public boolean verifyServicesCombination(Set<Service> services){
  Set<Service> netscalerServices=new HashSet<Service>();
  netscalerServices.add(Service.Lb);
  netscalerServices.add(Service.StaticNat);
  if (services != null && !services.isEmpty() && !netscalerServices.containsAll(services)) {
    s_logger.warn(""String_Node_Str"" + services + ""String_Node_Str"");
    StringBuffer buff=new StringBuffer();
    for (    Service service : services) {
      buff.append(service.getName());
      buff.append(""String_Node_Str"");
    }
    s_logger.warn(""String_Node_Str"" + buff.toString() + ""String_Node_Str"");
    s_logger.warn(""String_Node_Str"" + services + ""String_Node_Str"");
    return false;
  }
  return true;
}",0.6526904262753319
105745,"private String genObjectName(Object... args){
  String objectName=""String_Node_Str"";
  for (int i=0; i < args.length; i++) {
    objectName+=args[i];
    if (i != args.length - 1) {
      objectName+=_objectNamePathSep;
    }
  }
  return objectName;
}","private String genObjectName(Object... args){
  StringBuffer buff=new StringBuffer();
  for (int i=0; i < args.length; i++) {
    buff.append(args[i]);
    if (i != args.length - 1) {
      buff.append(_objectNamePathSep);
    }
  }
  return buff.toString();
}",0.74609375
105746,"private static String genGslbObjectName(Object... args){
  String objectName=""String_Node_Str"";
  for (int i=0; i < args.length; i++) {
    objectName+=args[i];
    if (i != args.length - 1) {
      objectName+=""String_Node_Str"";
    }
  }
  return objectName;
}","private static String genGslbObjectName(Object... args){
  StringBuffer buff=new StringBuffer();
  for (int i=0; i < args.length; i++) {
    buff.append(args[i]);
    if (i != args.length - 1) {
      buff.append(""String_Node_Str"");
    }
  }
  return buff.toString();
}",0.3233082706766917
105747,"public Integer getPort(){
  return port <= 0 ? 389 : port;
}","public Integer getPort(){
  return (Integer)(port.intValue() <= 0 ? 389 : port.intValue());
}",0.7843137254901961
105748,"@Override public VpcResponse createVpcResponse(ResponseView view,Vpc vpc){
  VpcResponse response=new VpcResponse();
  response.setId(vpc.getUuid());
  response.setName(vpc.getName());
  response.setDisplayText(vpc.getDisplayText());
  response.setState(vpc.getState().name());
  VpcOffering voff=ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());
  if (voff != null) {
    response.setVpcOfferingId(voff.getUuid());
  }
  response.setCidr(vpc.getCidr());
  response.setRestartRequired(vpc.isRestartRequired());
  response.setNetworkDomain(vpc.getNetworkDomain());
  response.setForDisplay(vpc.isDisplay());
  response.setUsesDistributedRouter(vpc.usesDistributedRouter());
  response.setRegionLevelVpc(vpc.isRegionLevelVpc());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Service service : serviceProviderMap.keySet()) {
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviderMap.get(service)) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  List<NetworkResponse> networkResponses=new ArrayList<NetworkResponse>();
  List<? extends Network> networks=ApiDBUtils.listVpcNetworks(vpc.getId());
  for (  Network network : networks) {
    NetworkResponse ntwkRsp=createNetworkResponse(view,network);
    networkResponses.add(ntwkRsp);
  }
  DataCenter zone=ApiDBUtils.findZoneById(vpc.getZoneId());
  if (zone != null) {
    response.setZoneId(zone.getUuid());
    response.setZoneName(zone.getName());
  }
  response.setNetworks(networkResponses);
  response.setServices(serviceResponses);
  populateOwner(response,vpc);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc,vpc.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public VpcResponse createVpcResponse(ResponseView view,Vpc vpc){
  VpcResponse response=new VpcResponse();
  response.setId(vpc.getUuid());
  response.setName(vpc.getName());
  response.setDisplayText(vpc.getDisplayText());
  response.setState(vpc.getState().name());
  VpcOffering voff=ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());
  if (voff != null) {
    response.setVpcOfferingId(voff.getUuid());
  }
  response.setCidr(vpc.getCidr());
  response.setRestartRequired(vpc.isRestartRequired());
  response.setNetworkDomain(vpc.getNetworkDomain());
  response.setForDisplay(vpc.isDisplay());
  response.setUsesDistributedRouter(vpc.usesDistributedRouter());
  response.setRegionLevelVpc(vpc.isRegionLevelVpc());
  Map<Service,Set<Provider>> serviceProviderMap=ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  for (  Map.Entry<Service,Set<Provider>> entry : serviceProviderMap.entrySet()) {
    Service service=entry.getKey();
    Set<Provider> serviceProviders=entry.getValue();
    ServiceResponse svcRsp=new ServiceResponse();
    if (service == Service.Gateway) {
      continue;
    }
    svcRsp.setName(service.getName());
    List<ProviderResponse> providers=new ArrayList<ProviderResponse>();
    for (    Provider provider : serviceProviders) {
      if (provider != null) {
        ProviderResponse providerRsp=new ProviderResponse();
        providerRsp.setName(provider.getName());
        providers.add(providerRsp);
      }
    }
    svcRsp.setProviders(providers);
    serviceResponses.add(svcRsp);
  }
  List<NetworkResponse> networkResponses=new ArrayList<NetworkResponse>();
  List<? extends Network> networks=ApiDBUtils.listVpcNetworks(vpc.getId());
  for (  Network network : networks) {
    NetworkResponse ntwkRsp=createNetworkResponse(view,network);
    networkResponses.add(ntwkRsp);
  }
  DataCenter zone=ApiDBUtils.findZoneById(vpc.getZoneId());
  if (zone != null) {
    response.setZoneId(zone.getUuid());
    response.setZoneName(zone.getName());
  }
  response.setNetworks(networkResponses);
  response.setServices(serviceResponses);
  populateOwner(response,vpc);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc,vpc.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9707421042433636
105749,"@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Service service : serviceCapabilitiesMap.keySet()) {
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
  if (serviceCapabilities != null) {
    for (    Capability capability : serviceCapabilities.keySet()) {
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=serviceCapabilities.get(capability);
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
}
response.setDomainName(domain.getName());
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}","@Override public NetworkResponse createNetworkResponse(ResponseView view,Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getUuid());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().toString());
  }
  response.setGateway(network.getGateway());
  response.setCidr(network.getCidr());
  response.setNetworkCidr((network.getNetworkCidr()));
  if (network.getNetworkCidr() != null) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));
  }
  if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {
    response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));
  }
  response.setIp6Gateway(network.getIp6Gateway());
  response.setIp6Cidr(network.getIp6Cidr());
  String reservation=null;
  if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(),network.getNetworkCidr()))) {
    String[] guestVmCidrPair=network.getCidr().split(""String_Node_Str"");
    String[] guestCidrPair=network.getNetworkCidr().split(""String_Node_Str"");
    Long guestVmCidrSize=Long.valueOf(guestVmCidrPair[1]);
    Long guestCidrSize=Long.valueOf(guestCidrPair[1]);
    String[] guestVmIpRange=NetUtils.getIpRangeFromCidr(guestVmCidrPair[0],guestVmCidrSize);
    String[] guestIpRange=NetUtils.getIpRangeFromCidr(guestCidrPair[0],guestCidrSize);
    long startGuestIp=NetUtils.ip2Long(guestIpRange[0]);
    long endGuestIp=NetUtils.ip2Long(guestIpRange[1]);
    long startVmIp=NetUtils.ip2Long(guestVmIpRange[0]);
    long endVmIp=NetUtils.ip2Long(guestVmIpRange[1]);
    if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(endVmIp + 1) + ""String_Node_Str"" + NetUtils.long2Ip(endGuestIp));
    }
    if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1));
    }
    if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {
      reservation=(NetUtils.long2Ip(startGuestIp) + ""String_Node_Str"" + NetUtils.long2Ip(startVmIp - 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endVmIp + 1)+ ""String_Node_Str""+ NetUtils.long2Ip(endGuestIp));
    }
  }
  response.setReservedIpRange(reservation);
  if (network.getBroadcastUri() != null && view == ResponseView.Full) {
    String broadcastUri=network.getBroadcastUri().toString();
    response.setBroadcastUri(broadcastUri);
    String vlan=""String_Node_Str"";
switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {
case Vlan:
case Vxlan:
      vlan=BroadcastDomainType.getValue(network.getBroadcastUri());
    break;
}
response.setVlan(vlan);
}
DataCenter zone=ApiDBUtils.findZoneById(network.getDataCenterId());
if (zone != null) {
response.setZoneId(zone.getUuid());
response.setZoneName(zone.getName());
}
if (network.getPhysicalNetworkId() != null) {
PhysicalNetworkVO pnet=ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());
response.setPhysicalNetworkId(pnet.getUuid());
}
NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
if (networkOffering != null) {
response.setNetworkOfferingId(networkOffering.getUuid());
response.setNetworkOfferingName(networkOffering.getName());
response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());
response.setIsSystem(networkOffering.isSystemOnly());
response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
response.setIsPersistent(networkOffering.getIsPersistent());
}
if (network.getAclType() != null) {
response.setAclType(network.getAclType().toString());
}
response.setDisplayNetwork(network.getDisplayNetwork());
response.setState(network.getState().toString());
response.setRestartRequired(network.isRestartRequired());
NetworkVO nw=ApiDBUtils.findNetworkById(network.getRelated());
if (nw != null) {
response.setRelated(nw.getUuid());
}
response.setNetworkDomain(network.getNetworkDomain());
response.setDns1(profile.getDns1());
response.setDns2(profile.getDns2());
Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId(),network.getDataCenterId());
List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
if (serviceCapabilitiesMap != null) {
for (Map.Entry<Service,Map<Capability,String>> entry : serviceCapabilitiesMap.entrySet()) {
  Service service=entry.getKey();
  ServiceResponse serviceResponse=new ServiceResponse();
  if (service == Service.Gateway) {
    continue;
  }
  serviceResponse.setName(service.getName());
  List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
  Map<Capability,String> serviceCapabilities=entry.getValue();
  if (serviceCapabilities != null) {
    for (    Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {
      Capability capability=ser_cap_entries.getKey();
      CapabilityResponse capabilityResponse=new CapabilityResponse();
      String capabilityValue=ser_cap_entries.getValue();
      capabilityResponse.setName(capability.getName());
      capabilityResponse.setValue(capabilityValue);
      capabilityResponse.setObjectName(""String_Node_Str"");
      capabilityResponses.add(capabilityResponse);
    }
    serviceResponse.setCapabilities(capabilityResponses);
  }
  serviceResponse.setObjectName(""String_Node_Str"");
  serviceResponses.add(serviceResponse);
}
}
response.setServices(serviceResponses);
if (network.getAclType() == null || network.getAclType() == ACLType.Account) {
populateOwner(response,network);
}
 else {
Pair<Long,Boolean> domainNetworkDetails=ApiDBUtils.getDomainNetworkDetails(network.getId());
if (domainNetworkDetails.first() != null) {
  Domain domain=ApiDBUtils.findDomainById(domainNetworkDetails.first());
  if (domain != null) {
    response.setDomainId(domain.getUuid());
  }
}
response.setSubdomainAccess(domainNetworkDetails.second());
}
Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
if (dedicatedDomainId != null) {
Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
if (domain != null) {
  response.setDomainId(domain.getUuid());
}
response.setDomainName(domain.getName());
}
response.setSpecifyIpRanges(network.getSpecifyIpRanges());
if (network.getVpcId() != null) {
Vpc vpc=ApiDBUtils.findVpcById(network.getVpcId());
if (vpc != null) {
  response.setVpcId(vpc.getUuid());
}
}
response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));
List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network,network.getId());
List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
for (ResourceTag tag : tags) {
ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
tagResponses.add(tagResponse);
}
response.setTags(tagResponses);
if (network.getNetworkACLId() != null) {
NetworkACL acl=ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());
if (acl != null) {
  response.setAclId(acl.getUuid());
}
}
response.setStrechedL2Subnet(network.isStrechedL2Network());
if (network.isStrechedL2Network()) {
Set<String> networkSpannedZones=new HashSet<String>();
List<VMInstanceVO> vmInstances=new ArrayList<VMInstanceVO>();
vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));
vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));
for (VirtualMachine vm : vmInstances) {
  DataCenter vmZone=ApiDBUtils.findZoneById(vm.getDataCenterId());
  networkSpannedZones.add(vmZone.getUuid());
}
response.setNetworkSpannedZones(networkSpannedZones);
}
response.setObjectName(""String_Node_Str"");
return response;
}",0.9666852092218308
105750,"private String queueCommand(final BaseCmd cmdObj,final Map<String,String> params) throws Exception {
  final CallContext ctx=CallContext.current();
  final Long callerUserId=ctx.getCallingUserId();
  final Account caller=ctx.getCallingAccount();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectUuid=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      final BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectUuid=createCmd.getEntityUuid();
      params.put(""String_Node_Str"",objectId.toString());
      Class entityClass=EventTypes.getEntityClassForEvent(createCmd.getEventType());
      if (entityClass != null)       ctx.putContextParameter(entityClass.getName(),objectUuid);
    }
 else {
      objectUuid=params.get(ApiConstants.ID);
      dispatchChainFactory.getStandardDispatchChain().dispatch(new DispatchTask(cmdObj,params));
    }
    final BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    if (objectUuid != null) {
      params.put(""String_Node_Str"",objectUuid);
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    final Long eventId=ActionEventUtils.onScheduledActionEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),asyncCmd.isDisplay(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    params.put(""String_Node_Str"",asyncCmd.getEventType().toString());
    params.put(""String_Node_Str"",ApiGsonHelper.getBuilder().create().toJson(ctx.getContextParameters()));
    Long instanceId=(objectId == null) ? asyncCmd.getInstanceId() : objectId;
    String injectedJobId=asyncCmd.getInjectedJobId();
    _uuidMgr.checkUuidSimple(injectedJobId,AsyncJob.class);
    AsyncJobVO job=new AsyncJobVO(""String_Node_Str"",callerUserId,caller.getId(),cmdObj.getClass().getName(),ApiGsonHelper.getBuilder().create().toJson(params),instanceId,asyncCmd.getInstanceType() != null ? asyncCmd.getInstanceType().toString() : null,injectedJobId);
    job.setDispatcher(_asyncDispatcher.getName());
    final long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      final String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      final String objUuid=(objectUuid == null) ? objectId.toString() : objectUuid;
      return getBaseAsyncCreateResponse(jobId,(BaseAsyncCreateCmd)asyncCmd,objUuid);
    }
 else {
      SerializationContext.current().setUuidTranslation(true);
      return getBaseAsyncResponse(jobId,asyncCmd);
    }
  }
 else {
    _dispatcher.dispatch(cmdObj,params,false);
    if (cmdObj instanceof BaseListCmd && !(cmdObj instanceof ListVMsCmd) && !(cmdObj instanceof ListVMsCmdByAdmin)&& !(cmdObj instanceof ListRoutersCmd)&& !(cmdObj instanceof ListSecurityGroupsCmd)&& !(cmdObj instanceof ListTagsCmd)&& !(cmdObj instanceof ListEventsCmd)&& !(cmdObj instanceof ListVMGroupsCmd)&& !(cmdObj instanceof ListProjectsCmd)&& !(cmdObj instanceof ListProjectAccountsCmd)&& !(cmdObj instanceof ListProjectInvitationsCmd)&& !(cmdObj instanceof ListHostsCmd)&& !(cmdObj instanceof ListVolumesCmd)&& !(cmdObj instanceof ListVolumesCmdByAdmin)&& !(cmdObj instanceof ListUsersCmd)&& !(cmdObj instanceof ListAccountsCmd)&& !(cmdObj instanceof ListAccountsCmdByAdmin)&& !(cmdObj instanceof ListStoragePoolsCmd)&& !(cmdObj instanceof ListDiskOfferingsCmd)&& !(cmdObj instanceof ListServiceOfferingsCmd)&& !(cmdObj instanceof ListZonesCmd)&& !(cmdObj instanceof ListZonesCmdByAdmin)) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}","private String queueCommand(final BaseCmd cmdObj,final Map<String,String> params) throws Exception {
  final CallContext ctx=CallContext.current();
  final Long callerUserId=ctx.getCallingUserId();
  final Account caller=ctx.getCallingAccount();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectUuid=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      final BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectUuid=createCmd.getEntityUuid();
      params.put(""String_Node_Str"",objectId.toString());
      Class entityClass=EventTypes.getEntityClassForEvent(createCmd.getEventType());
      if (entityClass != null)       ctx.putContextParameter(entityClass.getName(),objectUuid);
    }
 else {
      objectUuid=params.get(ApiConstants.ID);
      dispatchChainFactory.getStandardDispatchChain().dispatch(new DispatchTask(cmdObj,params));
    }
    final BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    if (objectUuid != null) {
      params.put(""String_Node_Str"",objectUuid);
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    final Long eventId=ActionEventUtils.onScheduledActionEvent((callerUserId == null) ? (Long)User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),asyncCmd.isDisplay(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    params.put(""String_Node_Str"",asyncCmd.getEventType().toString());
    params.put(""String_Node_Str"",ApiGsonHelper.getBuilder().create().toJson(ctx.getContextParameters()));
    Long instanceId=(objectId == null) ? asyncCmd.getInstanceId() : objectId;
    String injectedJobId=asyncCmd.getInjectedJobId();
    _uuidMgr.checkUuidSimple(injectedJobId,AsyncJob.class);
    AsyncJobVO job=new AsyncJobVO(""String_Node_Str"",callerUserId,caller.getId(),cmdObj.getClass().getName(),ApiGsonHelper.getBuilder().create().toJson(params),instanceId,asyncCmd.getInstanceType() != null ? asyncCmd.getInstanceType().toString() : null,injectedJobId);
    job.setDispatcher(_asyncDispatcher.getName());
    final long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      final String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      final String objUuid=(objectUuid == null) ? objectId.toString() : objectUuid;
      return getBaseAsyncCreateResponse(jobId,(BaseAsyncCreateCmd)asyncCmd,objUuid);
    }
 else {
      SerializationContext.current().setUuidTranslation(true);
      return getBaseAsyncResponse(jobId,asyncCmd);
    }
  }
 else {
    _dispatcher.dispatch(cmdObj,params,false);
    if (cmdObj instanceof BaseListCmd && !(cmdObj instanceof ListVMsCmd) && !(cmdObj instanceof ListVMsCmdByAdmin)&& !(cmdObj instanceof ListRoutersCmd)&& !(cmdObj instanceof ListSecurityGroupsCmd)&& !(cmdObj instanceof ListTagsCmd)&& !(cmdObj instanceof ListEventsCmd)&& !(cmdObj instanceof ListVMGroupsCmd)&& !(cmdObj instanceof ListProjectsCmd)&& !(cmdObj instanceof ListProjectAccountsCmd)&& !(cmdObj instanceof ListProjectInvitationsCmd)&& !(cmdObj instanceof ListHostsCmd)&& !(cmdObj instanceof ListVolumesCmd)&& !(cmdObj instanceof ListVolumesCmdByAdmin)&& !(cmdObj instanceof ListUsersCmd)&& !(cmdObj instanceof ListAccountsCmd)&& !(cmdObj instanceof ListAccountsCmdByAdmin)&& !(cmdObj instanceof ListStoragePoolsCmd)&& !(cmdObj instanceof ListDiskOfferingsCmd)&& !(cmdObj instanceof ListServiceOfferingsCmd)&& !(cmdObj instanceof ListZonesCmd)&& !(cmdObj instanceof ListZonesCmdByAdmin)) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}",0.9992966002344664
105751,"private void doAccessChecks(BaseCmd cmd,Map<Object,AccessType> entitiesToAccess){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountMgr.getActiveAccountById(cmd.getEntityOwnerId());
  if (cmd instanceof BaseAsyncCreateCmd) {
    _accountMgr.checkAccess(caller,null,true,owner);
  }
  if (!entitiesToAccess.isEmpty()) {
    _accountMgr.checkAccess(caller,null,true,owner);
    for (    Object entity : entitiesToAccess.keySet()) {
      if (entity instanceof ControlledEntity) {
        _accountMgr.checkAccess(caller,entitiesToAccess.get(entity),true,(ControlledEntity)entity);
      }
 else       if (entity instanceof InfrastructureEntity) {
      }
    }
  }
}","private void doAccessChecks(BaseCmd cmd,Map<Object,AccessType> entitiesToAccess){
  Account caller=CallContext.current().getCallingAccount();
  Account owner=_accountMgr.getActiveAccountById(cmd.getEntityOwnerId());
  if (cmd instanceof BaseAsyncCreateCmd) {
    _accountMgr.checkAccess(caller,null,true,owner);
  }
  if (!entitiesToAccess.isEmpty()) {
    _accountMgr.checkAccess(caller,null,true,owner);
    for (    Map.Entry<Object,AccessType> entry : entitiesToAccess.entrySet()) {
      Object entity=entry.getKey();
      if (entity instanceof ControlledEntity) {
        _accountMgr.checkAccess(caller,entry.getValue(),true,(ControlledEntity)entity);
      }
 else       if (entity instanceof InfrastructureEntity) {
      }
    }
  }
}",0.6523247744621791
105752,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handle(final DispatchTask task) throws ServerApiException {
  final Map<String,Object> lowercaseParams=new HashMap<String,Object>();
  final Map<String,String> params=task.getParams();
  for (  final String key : params.keySet()) {
    final int arrayStartIndex=key.indexOf('[');
    final int arrayStartLastIndex=key.lastIndexOf('[');
    if (arrayStartIndex != arrayStartLastIndex) {
      throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
    }
    if (arrayStartIndex > 0) {
      final int arrayEndIndex=key.indexOf(']');
      final int arrayEndLastIndex=key.lastIndexOf(']');
      if ((arrayEndIndex < arrayStartIndex) || (arrayEndIndex != arrayEndLastIndex)) {
        throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
      }
      final int fieldIndex=key.indexOf('.');
      String fieldName=null;
      if (fieldIndex < arrayEndIndex) {
        throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
      }
 else {
        fieldName=key.substring(fieldIndex + 1);
      }
      String paramName=key.substring(0,arrayStartIndex);
      paramName=paramName.toLowerCase();
      Map<Integer,Map> mapArray=null;
      Map<String,Object> mapValue=null;
      final String indexStr=key.substring(arrayStartIndex + 1,arrayEndIndex);
      int index=0;
      boolean parsedIndex=false;
      try {
        if (indexStr != null) {
          index=Integer.parseInt(indexStr);
          parsedIndex=true;
        }
      }
 catch (      final NumberFormatException nfe) {
        s_logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
      }
      if (!parsedIndex) {
        throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
      }
      final Object value=lowercaseParams.get(paramName);
      if (value == null) {
        mapArray=new HashMap<Integer,Map>();
        mapValue=new HashMap<String,Object>();
        mapArray.put(Integer.valueOf(index),mapValue);
      }
 else       if (value instanceof Map) {
        mapArray=(HashMap)value;
        mapValue=mapArray.get(Integer.valueOf(index));
        if (mapValue == null) {
          mapValue=new HashMap<String,Object>();
          mapArray.put(Integer.valueOf(index),mapValue);
        }
      }
      mapValue.put(fieldName,params.get(key));
      lowercaseParams.put(paramName,mapArray);
    }
 else {
      lowercaseParams.put(key.toLowerCase(),params.get(key));
    }
  }
  task.setParams(lowercaseParams);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handle(final DispatchTask task) throws ServerApiException {
  final Map<String,Object> lowercaseParams=new HashMap<String,Object>();
  final Map<String,String> params=task.getParams();
  for (  final Map.Entry<String,String> entry : params.entrySet()) {
    final String key=entry.getKey();
    final int arrayStartIndex=key.indexOf('[');
    final int arrayStartLastIndex=key.lastIndexOf('[');
    if (arrayStartIndex != arrayStartLastIndex) {
      throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
    }
    if (arrayStartIndex > 0) {
      final int arrayEndIndex=key.indexOf(']');
      final int arrayEndLastIndex=key.lastIndexOf(']');
      if ((arrayEndIndex < arrayStartIndex) || (arrayEndIndex != arrayEndLastIndex)) {
        throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
      }
      final int fieldIndex=key.indexOf('.');
      String fieldName=null;
      if (fieldIndex < arrayEndIndex) {
        throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
      }
 else {
        fieldName=key.substring(fieldIndex + 1);
      }
      String paramName=key.substring(0,arrayStartIndex);
      paramName=paramName.toLowerCase();
      Map<Integer,Map> mapArray=null;
      Map<String,Object> mapValue=null;
      final String indexStr=key.substring(arrayStartIndex + 1,arrayEndIndex);
      int index=0;
      boolean parsedIndex=false;
      try {
        if (indexStr != null) {
          index=Integer.parseInt(indexStr);
          parsedIndex=true;
        }
      }
 catch (      final NumberFormatException nfe) {
        s_logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
      }
      if (!parsedIndex) {
        throw new ServerApiException(ApiErrorCode.MALFORMED_PARAMETER_ERROR,""String_Node_Str"" + key + ""String_Node_Str"");
      }
      final Object value=lowercaseParams.get(paramName);
      if (value == null) {
        mapArray=new HashMap<Integer,Map>();
        mapValue=new HashMap<String,Object>();
        mapArray.put(Integer.valueOf(index),mapValue);
      }
 else       if (value instanceof Map) {
        mapArray=(HashMap)value;
        mapValue=mapArray.get(Integer.valueOf(index));
        if (mapValue == null) {
          mapValue=new HashMap<String,Object>();
          mapArray.put(Integer.valueOf(index),mapValue);
        }
      }
      mapValue.put(fieldName,entry.getValue());
      lowercaseParams.put(paramName,mapArray);
    }
 else {
      lowercaseParams.put(key.toLowerCase(),entry.getValue());
    }
  }
  task.setParams(lowercaseParams);
}",0.9203281677301732
105753,"protected List<DomainRouterVO> startRouters(final Map<Param,Object> params,final List<DomainRouterVO> routers) throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  List<DomainRouterVO> runningRouters=null;
  if (routers != null) {
    runningRouters=new ArrayList<DomainRouterVO>();
  }
  for (  DomainRouterVO router : routers) {
    boolean skip=false;
    final State state=router.getState();
    if (router.getHostId() != null && state != State.Running) {
      final HostVO host=_hostDao.findById(router.getHostId());
      if (host == null || host.getState() != Status.Up) {
        skip=true;
      }
    }
    if (!skip) {
      if (state != State.Running) {
        router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
      }
      if (router != null) {
        runningRouters.add(router);
      }
    }
  }
  return runningRouters;
}","protected List<DomainRouterVO> startRouters(final Map<Param,Object> params,final List<DomainRouterVO> routers) throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  List<DomainRouterVO> runningRouters=new ArrayList<DomainRouterVO>();
  for (  DomainRouterVO router : routers) {
    boolean skip=false;
    final State state=router.getState();
    if (router.getHostId() != null && state != State.Running) {
      final HostVO host=_hostDao.findById(router.getHostId());
      if (host == null || host.getState() != Status.Up) {
        skip=true;
      }
    }
    if (!skip) {
      if (state != State.Running) {
        router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
      }
      if (router != null) {
        runningRouters.add(router);
      }
    }
  }
  return runningRouters;
}",0.9713375796178344
105754,"private void createApplyStaticNatRulesCommands(final List<? extends StaticNatRule> rules,final VirtualRouter router,final Commands cmds,final long guestNetworkId){
  List<StaticNatRuleTO> rulesTO=null;
  if (rules != null) {
    rulesTO=new ArrayList<StaticNatRuleTO>();
    for (    final StaticNatRule rule : rules) {
      final IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      final StaticNatRuleTO ruleTO=new StaticNatRuleTO(rule,null,sourceIp.getAddress().addr(),rule.getDestIpAddress());
      rulesTO.add(ruleTO);
    }
  }
  final SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,router.getVpcId());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}","private void createApplyStaticNatRulesCommands(final List<? extends StaticNatRule> rules,final VirtualRouter router,final Commands cmds,final long guestNetworkId){
  List<StaticNatRuleTO> rulesTO=new ArrayList<StaticNatRuleTO>();
  if (rules != null) {
    for (    final StaticNatRule rule : rules) {
      final IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      final StaticNatRuleTO ruleTO=new StaticNatRuleTO(rule,null,sourceIp.getAddress().addr(),rule.getDestIpAddress());
      rulesTO.add(ruleTO);
    }
  }
  final SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,router.getVpcId());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}",0.964349376114082
105755,"private void createApplyPortForwardingRulesCommands(final List<? extends PortForwardingRule> rules,final VirtualRouter router,final Commands cmds,final long guestNetworkId){
  List<PortForwardingRuleTO> rulesTO=null;
  if (rules != null) {
    rulesTO=new ArrayList<PortForwardingRuleTO>();
    for (    final PortForwardingRule rule : rules) {
      final IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      final PortForwardingRuleTO ruleTO=new PortForwardingRuleTO(rule,null,sourceIp.getAddress().addr());
      rulesTO.add(ruleTO);
    }
  }
  SetPortForwardingRulesCommand cmd=null;
  if (router.getVpcId() != null) {
    cmd=new SetPortForwardingRulesVpcCommand(rulesTO);
  }
 else {
    cmd=new SetPortForwardingRulesCommand(rulesTO);
  }
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}","private void createApplyPortForwardingRulesCommands(final List<? extends PortForwardingRule> rules,final VirtualRouter router,final Commands cmds,final long guestNetworkId){
  List<PortForwardingRuleTO> rulesTO=new ArrayList<PortForwardingRuleTO>();
  if (rules != null) {
    for (    final PortForwardingRule rule : rules) {
      final IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      final PortForwardingRuleTO ruleTO=new PortForwardingRuleTO(rule,null,sourceIp.getAddress().addr());
      rulesTO.add(ruleTO);
    }
  }
  SetPortForwardingRulesCommand cmd=null;
  if (router.getVpcId() != null) {
    cmd=new SetPortForwardingRulesVpcCommand(rulesTO);
  }
 else {
    cmd=new SetPortForwardingRulesCommand(rulesTO);
  }
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}",0.9636803874092008
105756,"@Override @ActionEvent(eventType=EventTypes.EVENT_ROUTER_STOP,eventDescription=""String_Node_Str"",async=true) public VirtualRouter stopRouter(final long routerId,final boolean forced) throws ResourceUnavailableException, ConcurrentOperationException {
  final CallContext context=CallContext.current();
  final Account account=context.getCallingAccount();
  DomainRouterVO router=_routerDao.findById(routerId);
  if (router == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + routerId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(account,null,true,router);
  final UserVO user=_userDao.findById(CallContext.current().getCallingUserId());
  final VirtualRouter virtualRouter=stop(router,forced,user,account);
  if (virtualRouter == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + routerId);
  }
  if (router.isStopPending()) {
    s_logger.info(""String_Node_Str"" + router.getHostName() + ""String_Node_Str"");
    router.setStopPending(false);
    router=_routerDao.persist(router);
    virtualRouter.setStopPending(false);
  }
  return virtualRouter;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_ROUTER_STOP,eventDescription=""String_Node_Str"",async=true) public VirtualRouter stopRouter(final long routerId,final boolean forced) throws ResourceUnavailableException, ConcurrentOperationException {
  final CallContext context=CallContext.current();
  final Account account=context.getCallingAccount();
  DomainRouterVO router=_routerDao.findById(routerId);
  if (router == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + routerId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(account,null,true,router);
  final UserVO user=_userDao.findById(CallContext.current().getCallingUserId());
  final VirtualRouter virtualRouter=stop(router,forced,user,account);
  if (virtualRouter == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + routerId);
  }
  if (router.isStopPending()) {
    s_logger.info(""String_Node_Str"" + router.getHostName() + ""String_Node_Str"");
    router.setStopPending(false);
    _routerDao.persist(router);
    virtualRouter.setStopPending(false);
  }
  return virtualRouter;
}",0.9967963386727688
105757,"private void createApplyStaticNatCommands(final List<? extends StaticNat> rules,final VirtualRouter router,final Commands cmds,final long guestNetworkId){
  List<StaticNatRuleTO> rulesTO=null;
  if (rules != null) {
    rulesTO=new ArrayList<StaticNatRuleTO>();
    for (    final StaticNat rule : rules) {
      final IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      final StaticNatRuleTO ruleTO=new StaticNatRuleTO(0,sourceIp.getAddress().addr(),null,null,rule.getDestIpAddress(),null,null,null,rule.isForRevoke(),false);
      rulesTO.add(ruleTO);
    }
  }
  final SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,router.getVpcId());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}","private void createApplyStaticNatCommands(final List<? extends StaticNat> rules,final VirtualRouter router,final Commands cmds,final long guestNetworkId){
  List<StaticNatRuleTO> rulesTO=new ArrayList<StaticNatRuleTO>();
  if (rules != null) {
    for (    final StaticNat rule : rules) {
      final IpAddress sourceIp=_networkModel.getIp(rule.getSourceIpAddressId());
      final StaticNatRuleTO ruleTO=new StaticNatRuleTO(0,sourceIp.getAddress().addr(),null,null,rule.getDestIpAddress(),null,null,null,rule.isForRevoke(),false);
      rulesTO.add(ruleTO);
    }
  }
  final SetStaticNatRulesCommand cmd=new SetStaticNatRulesCommand(rulesTO,router.getVpcId());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(guestNetworkId,router.getId()));
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  final DataCenterVO dcVo=_dcDao.findById(router.getDataCenterId());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmds.addCommand(cmd);
}",0.9652476107732406
105758,"@Override public boolean finalizeStart(final VirtualMachineProfile profile,final long hostId,final Commands cmds,final ReservationContext context){
  DomainRouterVO router=_routerDao.findById(profile.getId());
  for (  Answer answer : cmds.getAnswers()) {
    if (!answer.getResult()) {
      String cmdClassName=answer.getClass().getCanonicalName().replace(""String_Node_Str"",""String_Node_Str"");
      String errorMessage=""String_Node_Str"" + cmdClassName + ""String_Node_Str"";
      String errorDetails=""String_Node_Str"" + answer.getDetails() + ""String_Node_Str""+ answer.toString();
      _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER,router.getDataCenterId(),router.getPodIdToDeployIn(),errorMessage,errorDetails);
      s_logger.warn(errorMessage);
      return false;
    }
  }
  boolean result=true;
  final List<Network> guestNetworks=new ArrayList<Network>();
  final List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  final Nic nic : routerNics) {
    final Network network=_networkModel.getNetwork(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      guestNetworks.add(network);
      if (nic.getBroadcastUri().getScheme().equals(""String_Node_Str"")) {
        final NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),0,false,""String_Node_Str"");
        result=setupDhcpForPvlan(true,router,router.getHostId(),nicProfile);
      }
    }
  }
  if (result) {
    GetDomRVersionAnswer versionAnswer=(GetDomRVersionAnswer)cmds.getAnswer(""String_Node_Str"");
    router.setTemplateVersion(versionAnswer.getTemplateVersion());
    router.setScriptsVersion(versionAnswer.getScriptsVersion());
    router=_routerDao.persist(router,guestNetworks);
  }
  return result;
}","@Override public boolean finalizeStart(final VirtualMachineProfile profile,final long hostId,final Commands cmds,final ReservationContext context){
  DomainRouterVO router=_routerDao.findById(profile.getId());
  for (  Answer answer : cmds.getAnswers()) {
    if (!answer.getResult()) {
      String cmdClassName=answer.getClass().getCanonicalName().replace(""String_Node_Str"",""String_Node_Str"");
      String errorMessage=""String_Node_Str"" + cmdClassName + ""String_Node_Str"";
      String errorDetails=""String_Node_Str"" + answer.getDetails() + ""String_Node_Str""+ answer.toString();
      _alertMgr.sendAlert(AlertService.AlertType.ALERT_TYPE_DOMAIN_ROUTER,router.getDataCenterId(),router.getPodIdToDeployIn(),errorMessage,errorDetails);
      s_logger.warn(errorMessage);
      return false;
    }
  }
  boolean result=true;
  final List<Network> guestNetworks=new ArrayList<Network>();
  final List<? extends Nic> routerNics=_nicDao.listByVmId(profile.getId());
  for (  final Nic nic : routerNics) {
    final Network network=_networkModel.getNetwork(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Guest) {
      guestNetworks.add(network);
      if (nic.getBroadcastUri().getScheme().equals(""String_Node_Str"")) {
        final NicProfile nicProfile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),0,false,""String_Node_Str"");
        result=setupDhcpForPvlan(true,router,router.getHostId(),nicProfile);
      }
    }
  }
  if (result) {
    GetDomRVersionAnswer versionAnswer=(GetDomRVersionAnswer)cmds.getAnswer(""String_Node_Str"");
    router.setTemplateVersion(versionAnswer.getTemplateVersion());
    router.setScriptsVersion(versionAnswer.getScriptsVersion());
    _routerDao.persist(router,guestNetworks);
  }
  return result;
}",0.9980375665825624
105759,"private void finalizeMonitorServiceOnStrat(Commands cmds,VirtualMachineProfile profile,DomainRouterVO router,Provider provider,long networkId,Boolean add){
  final NetworkVO network=_networkDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  final List<MonitoringServiceVO> services=new ArrayList<MonitoringServiceVO>();
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dhcp,Provider.VirtualRouter) || _networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dns,Provider.VirtualRouter)) {
    final MonitoringServiceVO dhcpService=_monitorServiceDao.getServiceByName(MonitoringService.Service.Dhcp.toString());
    if (dhcpService != null) {
      services.add(dhcpService);
    }
  }
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Lb,Provider.VirtualRouter)) {
    final MonitoringServiceVO lbService=_monitorServiceDao.getServiceByName(MonitoringService.Service.LoadBalancing.toString());
    if (lbService != null) {
      services.add(lbService);
    }
  }
  final List<MonitoringServiceVO> defaultServices=_monitorServiceDao.listDefaultServices(true);
  services.addAll(defaultServices);
  final List<MonitorServiceTO> servicesTO=new ArrayList<MonitorServiceTO>();
  for (  final MonitoringServiceVO service : services) {
    final MonitorServiceTO serviceTO=new MonitorServiceTO(service.getService(),service.getProcessName(),service.getServiceName(),service.getServicePath(),service.getServicePidFile(),service.isDefaultService());
    servicesTO.add(serviceTO);
  }
  final NicProfile controlNic=getControlNic(profile);
  final SetMonitorServiceCommand command=new SetMonitorServiceCommand(servicesTO);
  command.setAccessDetail(NetworkElementCommand.ROUTER_IP,controlNic.getIp4Address());
  command.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(networkId,router.getId()));
  command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  if (!add) {
    command.setAccessDetail(NetworkElementCommand.ROUTER_MONITORING_ENABLE,add.toString());
  }
  cmds.addCommand(""String_Node_Str"",command);
}","private void finalizeMonitorServiceOnStrat(Commands cmds,VirtualMachineProfile profile,DomainRouterVO router,Provider provider,long networkId,Boolean add){
  final NetworkVO network=_networkDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  final List<MonitoringServiceVO> services=new ArrayList<MonitoringServiceVO>();
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dhcp,Provider.VirtualRouter) || _networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Dns,Provider.VirtualRouter)) {
    final MonitoringServiceVO dhcpService=_monitorServiceDao.getServiceByName(MonitoringService.Service.Dhcp.toString());
    if (dhcpService != null) {
      services.add(dhcpService);
    }
  }
  if (_networkModel.isProviderSupportServiceInNetwork(network.getId(),Service.Lb,Provider.VirtualRouter)) {
    final MonitoringServiceVO lbService=_monitorServiceDao.getServiceByName(MonitoringService.Service.LoadBalancing.toString());
    if (lbService != null) {
      services.add(lbService);
    }
  }
  final List<MonitoringServiceVO> defaultServices=_monitorServiceDao.listDefaultServices(true);
  services.addAll(defaultServices);
  final List<MonitorServiceTO> servicesTO=new ArrayList<MonitorServiceTO>();
  for (  final MonitoringServiceVO service : services) {
    final MonitorServiceTO serviceTO=new MonitorServiceTO(service.getService(),service.getProcessName(),service.getServiceName(),service.getServicePath(),service.getServicePidFile(),service.isDefaultService());
    servicesTO.add(serviceTO);
  }
  final NicProfile controlNic=getControlNic(profile);
  if (controlNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + profile.getInstanceName() + ""String_Node_Str"");
  }
  final SetMonitorServiceCommand command=new SetMonitorServiceCommand(servicesTO);
  command.setAccessDetail(NetworkElementCommand.ROUTER_IP,controlNic.getIp4Address());
  command.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,getRouterIpInNetwork(networkId,router.getId()));
  command.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  if (!add) {
    command.setAccessDetail(NetworkElementCommand.ROUTER_MONITORING_ENABLE,add.toString());
  }
  cmds.addCommand(""String_Node_Str"",command);
}",0.9696292987941044
105760,"/** 
 * Once a guest network has been designed, virtual machines can be created.  allocated() is called for the NetworkGuru to design a nic that will make the virtual machine work within the guest network.
 * @param network guest network that the virtual machine will be deployed in.
 * @param nic nic information that the end user wants to set.  TheNetworkGuru should check this information with the guest network settings to make sure everything will work.
 * @param vm virtual machine that is about to be deployed.
 * @return NicProfile nic with all of the information
 * @throws InsufficientVirtualNetworkCapcityException if there'sinsufficient capacity within the guest network.
 * @throws InsufficientAddressCapacityException if there are not addressesto be assigned.
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * Once a guest network has been designed, virtual machines can be created.  allocated() is called for the NetworkGuru to design a nic that will make the virtual machine work within the guest network.
 * @param network guest network that the virtual machine will be deployed in.
 * @param nic nic information that the end user wants to set.  TheNetworkGuru should check this information with the guest network settings to make sure everything will work.
 * @param vm virtual machine that is about to be deployed.
 * @return NicProfile nic with all of the information
 * @throws InsufficientVirtualNetworkCapacityException if there'sinsufficient capacity within the guest network.
 * @throws InsufficientAddressCapacityException if there are not addressesto be assigned.
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile vm) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.9989743589743588
105761,"/** 
 * Once a guest network is implemented, then the virtual machine must be allocated its resources in order for it to participate within the guest network.  reserve() is called for the NetworkGuru to make sure that works.
 * @param nic nic that the vm is using to access the guest network.
 * @param network guest network the vm is in.
 * @param vm vm
 * @param dest destination the vm is deployed to
 * @param context Reservation context from which to get the owner, caller, and reservation id
 * @throws InsufficientVirtualNetworkCapcityException if there's not enoughresources.
 * @throws InsufficientAddressCapacityException if there's not enough ipaddresses.
 * @throws ConcurrentOperationException if there are multiple operationshappening on this guest network or vm.
 */
void reserve(NicProfile nic,Network network,VirtualMachineProfile vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * Once a guest network is implemented, then the virtual machine must be allocated its resources in order for it to participate within the guest network.  reserve() is called for the NetworkGuru to make sure that works.
 * @param nic nic that the vm is using to access the guest network.
 * @param network guest network the vm is in.
 * @param vm vm
 * @param dest destination the vm is deployed to
 * @param context Reservation context from which to get the owner, caller, and reservation id
 * @throws InsufficientVirtualNetworkCapacityException if there's not enoughresources.
 * @throws InsufficientAddressCapacityException if there's not enough ipaddresses.
 * @throws ConcurrentOperationException if there are multiple operationshappening on this guest network or vm.
 */
void reserve(NicProfile nic,Network network,VirtualMachineProfile vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.9990215264187868
105762,"/** 
 * For guest networks that are in Allocated state after the design stage, resources are allocated when the guest network is actually being used by a virtual machine.  implement() is called to acquire those resources.
 * @param network network to be implemented.
 * @param offering network offering that the network was created with.
 * @param destination where the network is being deployed in.
 * @return a fully implemented Network.
 * @throws InsufficientVirtualNetworkCapcityException  if there's notenough resources to make the guest network usable in the physical environment.  At this time, the admin generally must be involved to allocate more resources before any more guest network can be implemented.
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * For guest networks that are in Allocated state after the design stage, resources are allocated when the guest network is actually being used by a virtual machine.  implement() is called to acquire those resources.
 * @param network network to be implemented.
 * @param offering network offering that the network was created with.
 * @param destination where the network is being deployed in.
 * @return a fully implemented Network.
 * @throws InsufficientVirtualNetworkCapacityException  if there's notenough resources to make the guest network usable in the physical environment.  At this time, the admin generally must be involved to allocate more resources before any more guest network can be implemented.
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapacityException ;",0.998876404494382
105763,"@Override public void create(){
  try {
    ApplicationLoadBalancerRule result=_appLbService.createApplicationLoadBalancer(getName(),getDescription(),getScheme(),getSourceIpNetworkId(),getSourceIp(),getSourcePort(),getInstancePort(),getAlgorithm(),getNetworkId(),getEntityOwnerId(),getDisplay());
    this.setEntityId(result.getId());
    this.setEntityUuid(result.getUuid());
  }
 catch (  NetworkRuleConflictException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,e.getMessage());
  }
catch (  InsufficientAddressCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,e.getMessage());
  }
catch (  InsufficientVirtualNetworkCapcityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,e.getMessage());
  }
}","@Override public void create(){
  try {
    ApplicationLoadBalancerRule result=_appLbService.createApplicationLoadBalancer(getName(),getDescription(),getScheme(),getSourceIpNetworkId(),getSourceIp(),getSourcePort(),getInstancePort(),getAlgorithm(),getNetworkId(),getEntityOwnerId(),getDisplay());
    this.setEntityId(result.getId());
    this.setEntityUuid(result.getUuid());
  }
 catch (  NetworkRuleConflictException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR,e.getMessage());
  }
catch (  InsufficientAddressCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,e.getMessage());
  }
catch (  InsufficientVirtualNetworkCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,e.getMessage());
  }
}",0.9994678020223524
105764,"ApplicationLoadBalancerRule createApplicationLoadBalancer(String name,String description,Scheme scheme,long sourceIpNetworkId,String sourceIp,int sourcePort,int instancePort,String algorithm,long networkId,long lbOwnerId,Boolean forDisplay) throws InsufficientAddressCapacityException, NetworkRuleConflictException, InsufficientVirtualNetworkCapcityException ;","ApplicationLoadBalancerRule createApplicationLoadBalancer(String name,String description,Scheme scheme,long sourceIpNetworkId,String sourceIp,int sourcePort,int instancePort,String algorithm,long networkId,long lbOwnerId,Boolean forDisplay) throws InsufficientAddressCapacityException, NetworkRuleConflictException, InsufficientVirtualNetworkCapacityException ;",0.9986130374479888
105765,"/** 
 * @param requested
 * @param network
 * @param isDefaultNic
 * @param deviceId
 * @param vm
 * @return
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 * @throws ConcurrentOperationException
 */
Pair<NicProfile,Integer> allocateNic(NicProfile requested,Network network,Boolean isDefaultNic,int deviceId,VirtualMachineProfile vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * @param requested
 * @param network
 * @param isDefaultNic
 * @param deviceId
 * @param vm
 * @return
 * @throws InsufficientVirtualNetworkCapacityException
 * @throws InsufficientAddressCapacityException
 * @throws ConcurrentOperationException
 */
Pair<NicProfile,Integer> allocateNic(NicProfile requested,Network network,Boolean isDefaultNic,int deviceId,VirtualMachineProfile vm) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException ;",0.9980353634577604
105766,"/** 
 * @param vmProfile
 * @param dest
 * @param context
 * @param nicId
 * @param network
 * @return
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 * @throws ConcurrentOperationException
 * @throws InsufficientCapacityException
 * @throws ResourceUnavailableException
 */
NicProfile prepareNic(VirtualMachineProfile vmProfile,DeployDestination dest,ReservationContext context,long nicId,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException ;","/** 
 * @param vmProfile
 * @param dest
 * @param context
 * @param nicId
 * @param network
 * @return
 * @throws InsufficientVirtualNetworkCapacityException
 * @throws InsufficientAddressCapacityException
 * @throws ConcurrentOperationException
 * @throws InsufficientCapacityException
 * @throws ResourceUnavailableException
 */
NicProfile prepareNic(VirtualMachineProfile vmProfile,DeployDestination dest,ReservationContext context,long nicId,Network network) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException ;",0.9984447900466564
105767,"NicProfile createNicForVm(Network network,NicProfile requested,ReservationContext context,VirtualMachineProfile vmProfile,boolean prepare) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException ;","NicProfile createNicForVm(Network network,NicProfile requested,ReservationContext context,VirtualMachineProfile vmProfile,boolean prepare) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException ;",0.9984350547730828
105768,"void allocateDirectIp(NicProfile nic,DataCenter dc,VirtualMachineProfile vm,Network network,String requestedIpv4,String requestedIpv6) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException ;","void allocateDirectIp(NicProfile nic,DataCenter dc,VirtualMachineProfile vm,Network network,String requestedIpv4,String requestedIpv6) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException ;",0.9977728285077953
105769,"@Override public NicProfile prepareNic(VirtualMachineProfile vmProfile,DeployDestination dest,ReservationContext context,long nicId,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  Integer networkRate=_networkModel.getNetworkRate(network.getId(),vmProfile.getId());
  NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
  NicVO nic=_nicDao.findById(nicId);
  NicProfile profile=null;
  if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {
    nic.setState(Nic.State.Reserving);
    nic.setReservationId(context.getReservationId());
    _nicDao.update(nic.getId(),nic);
    URI broadcastUri=nic.getBroadcastUri();
    if (broadcastUri == null) {
      broadcastUri=network.getBroadcastUri();
    }
    URI isolationUri=nic.getIsolationUri();
    profile=new NicProfile(nic,network,broadcastUri,isolationUri,networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
    guru.reserve(profile,network,vmProfile,dest,context);
    nic.setIp4Address(profile.getIp4Address());
    nic.setAddressFormat(profile.getFormat());
    nic.setIp6Address(profile.getIp6Address());
    nic.setMacAddress(profile.getMacAddress());
    nic.setIsolationUri(profile.getIsolationUri());
    nic.setBroadcastUri(profile.getBroadCastUri());
    nic.setReserver(guru.getName());
    nic.setState(Nic.State.Reserved);
    nic.setNetmask(profile.getNetmask());
    nic.setGateway(profile.getGateway());
    if (profile.getStrategy() != null) {
      nic.setReservationStrategy(profile.getStrategy());
    }
    updateNic(nic,network.getId(),1);
  }
 else {
    profile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
    guru.updateNicProfile(profile,network);
    nic.setState(Nic.State.Reserved);
    updateNic(nic,network.getId(),1);
  }
  List<Provider> providersToImplement=getNetworkProviders(network.getId());
  for (  NetworkElement element : networkElements) {
    if (providersToImplement.contains(element.getProvider())) {
      if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network),element.getProvider().getName())) {
        throw new CloudRuntimeException(""String_Node_Str"" + element.getProvider().getName() + ""String_Node_Str""+ network.getPhysicalNetworkId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ nic);
      }
      if (!prepareElement(element,network,profile,vmProfile,dest,context)) {
        throw new InsufficientAddressCapacityException(""String_Node_Str"",Network.class,network.getId());
      }
    }
  }
  profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));
  guru.updateNicProfile(profile,network);
  return profile;
}","@Override public NicProfile prepareNic(VirtualMachineProfile vmProfile,DeployDestination dest,ReservationContext context,long nicId,Network network) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  Integer networkRate=_networkModel.getNetworkRate(network.getId(),vmProfile.getId());
  NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,network.getGuruName());
  NicVO nic=_nicDao.findById(nicId);
  NicProfile profile=null;
  if (nic.getReservationStrategy() == Nic.ReservationStrategy.Start) {
    nic.setState(Nic.State.Reserving);
    nic.setReservationId(context.getReservationId());
    _nicDao.update(nic.getId(),nic);
    URI broadcastUri=nic.getBroadcastUri();
    if (broadcastUri == null) {
      broadcastUri=network.getBroadcastUri();
    }
    URI isolationUri=nic.getIsolationUri();
    profile=new NicProfile(nic,network,broadcastUri,isolationUri,networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
    guru.reserve(profile,network,vmProfile,dest,context);
    nic.setIp4Address(profile.getIp4Address());
    nic.setAddressFormat(profile.getFormat());
    nic.setIp6Address(profile.getIp6Address());
    nic.setMacAddress(profile.getMacAddress());
    nic.setIsolationUri(profile.getIsolationUri());
    nic.setBroadcastUri(profile.getBroadCastUri());
    nic.setReserver(guru.getName());
    nic.setState(Nic.State.Reserved);
    nic.setNetmask(profile.getNetmask());
    nic.setGateway(profile.getGateway());
    if (profile.getStrategy() != null) {
      nic.setReservationStrategy(profile.getStrategy());
    }
    updateNic(nic,network.getId(),1);
  }
 else {
    profile=new NicProfile(nic,network,nic.getBroadcastUri(),nic.getIsolationUri(),networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vmProfile.getHypervisorType(),network));
    guru.updateNicProfile(profile,network);
    nic.setState(Nic.State.Reserved);
    updateNic(nic,network.getId(),1);
  }
  List<Provider> providersToImplement=getNetworkProviders(network.getId());
  for (  NetworkElement element : networkElements) {
    if (providersToImplement.contains(element.getProvider())) {
      if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network),element.getProvider().getName())) {
        throw new CloudRuntimeException(""String_Node_Str"" + element.getProvider().getName() + ""String_Node_Str""+ network.getPhysicalNetworkId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ nic);
      }
      if (!prepareElement(element,network,profile,vmProfile,dest,context)) {
        throw new InsufficientAddressCapacityException(""String_Node_Str"",Network.class,network.getId());
      }
    }
  }
  profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));
  guru.updateNicProfile(profile,network);
  return profile;
}",0.999840230068701
105770,"@DB @Override public Pair<NicProfile,Integer> allocateNic(NicProfile requested,Network network,Boolean isDefaultNic,int deviceId,VirtualMachineProfile vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  NetworkVO ntwkVO=_networksDao.findById(network.getId());
  s_logger.debug(""String_Node_Str"" + vm.getVirtualMachine() + ""String_Node_Str""+ network+ ""String_Node_Str""+ requested);
  NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,ntwkVO.getGuruName());
  if (requested != null && requested.getMode() == null) {
    requested.setMode(network.getMode());
  }
  NicProfile profile=guru.allocate(network,requested,vm);
  if (profile == null) {
    return null;
  }
  if (isDefaultNic != null) {
    profile.setDefaultNic(isDefaultNic);
  }
  if (requested != null && requested.getMode() == null) {
    profile.setMode(requested.getMode());
  }
 else {
    profile.setMode(network.getMode());
  }
  NicVO vo=new NicVO(guru.getName(),vm.getId(),network.getId(),vm.getType());
  deviceId=applyProfileToNic(vo,profile,deviceId);
  vo=_nicDao.persist(vo);
  Integer networkRate=_networkModel.getNetworkRate(network.getId(),vm.getId());
  NicProfile vmNic=new NicProfile(vo,network,vo.getBroadcastUri(),vo.getIsolationUri(),networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vm.getHypervisorType(),network));
  return new Pair<NicProfile,Integer>(vmNic,Integer.valueOf(deviceId));
}","@DB @Override public Pair<NicProfile,Integer> allocateNic(NicProfile requested,Network network,Boolean isDefaultNic,int deviceId,VirtualMachineProfile vm) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  NetworkVO ntwkVO=_networksDao.findById(network.getId());
  s_logger.debug(""String_Node_Str"" + vm.getVirtualMachine() + ""String_Node_Str""+ network+ ""String_Node_Str""+ requested);
  NetworkGuru guru=AdapterBase.getAdapterByName(networkGurus,ntwkVO.getGuruName());
  if (requested != null && requested.getMode() == null) {
    requested.setMode(network.getMode());
  }
  NicProfile profile=guru.allocate(network,requested,vm);
  if (profile == null) {
    return null;
  }
  if (isDefaultNic != null) {
    profile.setDefaultNic(isDefaultNic);
  }
  if (requested != null && requested.getMode() == null) {
    profile.setMode(requested.getMode());
  }
 else {
    profile.setMode(network.getMode());
  }
  NicVO vo=new NicVO(guru.getName(),vm.getId(),network.getId(),vm.getType());
  deviceId=applyProfileToNic(vo,profile,deviceId);
  vo=_nicDao.persist(vo);
  Integer networkRate=_networkModel.getNetworkRate(network.getId(),vm.getId());
  NicProfile vmNic=new NicProfile(vo,network,vo.getBroadcastUri(),vo.getIsolationUri(),networkRate,_networkModel.isSecurityGroupSupportedInNetwork(network),_networkModel.getNetworkTag(vm.getHypervisorType(),network));
  return new Pair<NicProfile,Integer>(vmNic,Integer.valueOf(deviceId));
}",0.9996676636756398
105771,"@Override public NicProfile createNicForVm(Network network,NicProfile requested,ReservationContext context,VirtualMachineProfile vmProfile,boolean prepare) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  DataCenter dc=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  DeployDestination dest=new DeployDestination(dc,null,null,host);
  NicProfile nic=getNicProfileForVm(network,requested,vm);
  if (nic == null || (vmProfile.getType() == VirtualMachine.Type.User)) {
    int deviceId=_nicDao.countNics(vm.getId());
    nic=allocateNic(requested,network,false,deviceId,vmProfile).first();
    if (nic == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
    }
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
  }
  if (prepare) {
    Pair<NetworkGuru,NetworkVO> implemented=implementNetwork(nic.getNetworkId(),dest,context);
    nic=prepareNic(vmProfile,dest,context,nic.getId(),implemented.second());
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
  }
  return nic;
}","@Override public NicProfile createNicForVm(Network network,NicProfile requested,ReservationContext context,VirtualMachineProfile vmProfile,boolean prepare) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  DataCenter dc=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  DeployDestination dest=new DeployDestination(dc,null,null,host);
  NicProfile nic=getNicProfileForVm(network,requested,vm);
  if (nic == null || (vmProfile.getType() == VirtualMachine.Type.User)) {
    int deviceId=_nicDao.countNics(vm.getId());
    nic=allocateNic(requested,network,false,deviceId,vmProfile).first();
    if (nic == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
    }
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
  }
  if (prepare) {
    Pair<NetworkGuru,NetworkVO> implemented=implementNetwork(nic.getNetworkId(),dest,context);
    nic=prepareNic(vmProfile,dest,context,nic.getId(),implemented.second());
    s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ network);
  }
  return nic;
}",0.9996202050892518
105772,"private void getBaremetalIp(NicProfile nic,Pod pod,VirtualMachineProfile vm,Network network,String requiredIp) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(pod.getDataCenterId());
  if (nic.getIp4Address() == null) {
    s_logger.debug(String.format(""String_Node_Str"",nic.getIp4Address()));
    PublicIp ip=_ipAddrMgr.assignPublicIpAddress(dc.getId(),pod.getId(),vm.getOwner(),VlanType.DirectAttached,network.getId(),requiredIp,false);
    nic.setIp4Address(ip.getAddress().toString());
    nic.setFormat(AddressFormat.Ip4);
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    if (ip.getVlanTag() != null && ip.getVlanTag().equalsIgnoreCase(Vlan.UNTAGGED)) {
      nic.setIsolationUri(IsolationType.Ec2.toUri(Vlan.UNTAGGED));
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED));
      nic.setBroadcastType(BroadcastDomainType.Native);
    }
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}","private void getBaremetalIp(NicProfile nic,Pod pod,VirtualMachineProfile vm,Network network,String requiredIp) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(pod.getDataCenterId());
  if (nic.getIp4Address() == null) {
    s_logger.debug(String.format(""String_Node_Str"",nic.getIp4Address()));
    PublicIp ip=_ipAddrMgr.assignPublicIpAddress(dc.getId(),pod.getId(),vm.getOwner(),VlanType.DirectAttached,network.getId(),requiredIp,false);
    nic.setIp4Address(ip.getAddress().toString());
    nic.setFormat(AddressFormat.Ip4);
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    if (ip.getVlanTag() != null && ip.getVlanTag().equalsIgnoreCase(Vlan.UNTAGGED)) {
      nic.setIsolationUri(IsolationType.Ec2.toUri(Vlan.UNTAGGED));
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(Vlan.UNTAGGED));
      nic.setBroadcastType(BroadcastDomainType.Native);
    }
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}",0.999569151227919
105773,"@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (dest.getHost().getHypervisorType() != HypervisorType.BareMetal) {
    super.reserve(nic,network,vm,dest,context);
    return;
  }
  HostVO host=_hostDao.findById(dest.getHost().getId());
  _hostDao.loadDetails(host);
  String intentIp=host.getDetail(ApiConstants.IP_ADDRESS);
  if (intentIp == null) {
    super.reserve(nic,network,vm,dest,context);
    return;
  }
  String oldIp=nic.getIp4Address();
  boolean getNewIp=false;
  if (oldIp == null) {
    getNewIp=true;
  }
 else {
    final IPAddressVO ipVO=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),oldIp);
    if (ipVO != null) {
      PodVlanMapVO mapVO=_podVlanDao.listPodVlanMapsByVlan(ipVO.getVlanId());
      if (mapVO.getPodId() != dest.getPod().getId()) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _ipAddrMgr.markIpAsUnavailable(ipVO.getId());
            _ipAddressDao.unassignIpAddress(ipVO.getId());
          }
        }
);
        nic.setIp4Address(null);
        getNewIp=true;
      }
    }
  }
  if (getNewIp) {
    getBaremetalIp(nic,dest.getPod(),vm,network,intentIp);
  }
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
}","@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (dest.getHost().getHypervisorType() != HypervisorType.BareMetal) {
    super.reserve(nic,network,vm,dest,context);
    return;
  }
  HostVO host=_hostDao.findById(dest.getHost().getId());
  _hostDao.loadDetails(host);
  String intentIp=host.getDetail(ApiConstants.IP_ADDRESS);
  if (intentIp == null) {
    super.reserve(nic,network,vm,dest,context);
    return;
  }
  String oldIp=nic.getIp4Address();
  boolean getNewIp=false;
  if (oldIp == null) {
    getNewIp=true;
  }
 else {
    final IPAddressVO ipVO=_ipAddressDao.findByIpAndSourceNetworkId(network.getId(),oldIp);
    if (ipVO != null) {
      PodVlanMapVO mapVO=_podVlanDao.listPodVlanMapsByVlan(ipVO.getVlanId());
      if (mapVO.getPodId() != dest.getPod().getId()) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            _ipAddrMgr.markIpAsUnavailable(ipVO.getId());
            _ipAddressDao.unassignIpAddress(ipVO.getId());
          }
        }
);
        nic.setIp4Address(null);
        getNewIp=true;
      }
    }
  }
  if (getNewIp) {
    getBaremetalIp(nic,dest.getPod(),vm,network,intentIp);
  }
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
}",0.9996948428440648
105774,"@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  super.reserve(nic,network,vm,dest,context);
}","@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException {
  super.reserve(nic,network,vm,dest,context);
}",0.9981785063752276
105775,"@Override public Network implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException {
}","@Override public Network implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapacityException {
}",0.997229916897507
105776,"protected VDI prepareManagedStorage(Connection conn,Map<String,String> details,String path,String vdiNameLabel) throws Exception {
  SR sr=prepareManagedSr(conn,details);
  VDI vdi=getVDIbyUuid(conn,path,false);
  Long volumeSize=Long.parseLong(details.get(DiskTO.VOLUME_SIZE));
  if (vdi == null) {
    vdi=createVdi(sr,vdiNameLabel,volumeSize);
  }
 else {
    s_logger.info(""String_Node_Str"");
    long vdiVirtualsize=vdi.getVirtualSize(conn);
    if (vdiVirtualsize != volumeSize) {
      s_logger.info(""String_Node_Str"" + vdiVirtualsize + ""String_Node_Str""+ volumeSize);
      try {
        vdi.resize(conn,volumeSize);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
  return vdi;
}","protected VDI prepareManagedStorage(Connection conn,Map<String,String> details,String path,String vdiNameLabel) throws Exception {
  SR sr=prepareManagedSr(conn,details);
  VDI vdi=getVDIbyUuid(conn,path,false);
  Long volumeSize=Long.parseLong(details.get(DiskTO.VOLUME_SIZE));
  if (vdi == null) {
    vdi=createVdi(sr,vdiNameLabel,volumeSize);
  }
 else {
    s_logger.info(""String_Node_Str"");
    long vdiVirtualSize=vdi.getVirtualSize(conn);
    if (vdiVirtualSize != volumeSize) {
      s_logger.info(""String_Node_Str"" + vdiVirtualSize + ""String_Node_Str""+ volumeSize);
      try {
        vdi.resize(conn,volumeSize);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
  return vdi;
}",0.9959404600811907
105777,"@Override public void execute(){
  LoadBalancer lb=null;
  if (lbRuleId == null && id == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (id != null) {
    lb=_lbService.findLbByStickinessId(id);
    if (lb == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((lbRuleId != null) && (lbRuleId != lb.getId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + lbRuleId);
    }
  }
  if (lbRuleId != null && lb != null) {
    lb=_lbService.findById(getLbRuleId());
  }
  List<LBStickinessResponse> spResponses=new ArrayList<LBStickinessResponse>();
  ListResponse<LBStickinessResponse> response=new ListResponse<LBStickinessResponse>();
  if (lb != null) {
    Account caller=CallContext.current().getCallingAccount();
    _accountService.checkAccess(caller,null,true,lb);
    List<? extends StickinessPolicy> stickinessPolicies=_lbService.searchForLBStickinessPolicies(this);
    LBStickinessResponse spResponse=_responseGenerator.createLBStickinessPolicyResponse(stickinessPolicies,lb);
    spResponses.add(spResponse);
    response.setResponses(spResponses);
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  LoadBalancer lb=null;
  if (lbRuleId == null && id == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (id != null) {
    lb=_lbService.findLbByStickinessId(id);
    if (lb == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((lbRuleId != null) && (lbRuleId != lb.getId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + lbRuleId);
    }
  }
  if (lbRuleId != null && lb == null) {
    lb=_lbService.findById(getLbRuleId());
  }
  List<LBStickinessResponse> spResponses=new ArrayList<LBStickinessResponse>();
  ListResponse<LBStickinessResponse> response=new ListResponse<LBStickinessResponse>();
  if (lb != null) {
    Account caller=CallContext.current().getCallingAccount();
    _accountService.checkAccess(caller,null,true,lb);
    List<? extends StickinessPolicy> stickinessPolicies=_lbService.searchForLBStickinessPolicies(this);
    LBStickinessResponse spResponse=_responseGenerator.createLBStickinessPolicyResponse(stickinessPolicies,lb);
    spResponses.add(spResponse);
    response.setResponses(spResponses);
  }
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}",0.9991922455573504
105778,"@SuppressWarnings(""String_Node_Str"") @Override public DataStore initialize(Map<String,Object> dsInfos){
  Long clusterId=(Long)dsInfos.get(""String_Node_Str"");
  Long podId=(Long)dsInfos.get(""String_Node_Str"");
  Long zoneId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      URI cifsUri=new URI(url);
      String warnMsg=UriUtils.getCifsUriParametersProblems(cifsUri);
      if (warnMsg != null) {
        throw new InvalidParameterValueException(warnMsg);
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  String tags=(String)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  parameters.setTags(tags);
  parameters.setDetails(details);
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  Object localStorage=dsInfos.get(""String_Node_Str"");
  if (localStorage != null) {
    hostPath=hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    hostPath=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String userInfo=uri.getUserInfo();
  int port=uri.getPort();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.NetworkFilesystem);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=445;
    }
    parameters.setType(StoragePoolType.SMB);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    parameters.setType(StoragePoolType.Filesystem);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.SharedMountPoint);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.CLVM);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=6789;
    }
    parameters.setType(StoragePoolType.RBD);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    parameters.setUserInfo(userInfo);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.PreSetup);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath=hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      parameters.setType(StoragePoolType.IscsiLUN);
      parameters.setHost(storageHost);
      parameters.setPort(port);
      parameters.setPath(hostPath);
    }
 else {
      for (      StoragePoolDiscoverer discoverer : _discoverers) {
        Map<? extends StoragePool,Map<String,String>> pools;
        try {
          pools=discoverer.find(zoneId,podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<? extends StoragePool,Map<String,String>> entry=pools.entrySet().iterator().next();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.ISO);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.VMFS);
    parameters.setHost(""String_Node_Str"" + hostPath);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    port=7777;
    parameters.setType(StoragePoolType.OCFS2);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=24007;
    }
    parameters.setType(StoragePoolType.Gluster);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else {
    StoragePoolType type=Enum.valueOf(StoragePoolType.class,scheme);
    if (type != null) {
      parameters.setType(type);
      parameters.setHost(storageHost);
      parameters.setPort(0);
      parameters.setPath(hostPath);
    }
 else {
      s_logger.warn(""String_Node_Str"" + uri);
      throw new IllegalArgumentException(""String_Node_Str"" + uri);
    }
  }
  if (localStorage == null) {
    List<StoragePoolVO> pools=primaryDataStoreDao.listPoolByHostPath(storageHost,hostPath);
    if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
      Long oldPodId=pools.get(0).getPodId();
      throw new CloudRuntimeException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"");
    }
  }
  Object existingUuid=dsInfos.get(""String_Node_Str"");
  String uuid=null;
  if (existingUuid != null) {
    uuid=(String)existingUuid;
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"") || scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes((storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=primaryDataStoreDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  String poolName=(String)dsInfos.get(""String_Node_Str"");
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setPodId(podId);
  parameters.setName(poolName);
  parameters.setClusterId(clusterId);
  parameters.setProviderName(providerName);
  return dataStoreHelper.createPrimaryDataStore(parameters);
}","@SuppressWarnings(""String_Node_Str"") @Override public DataStore initialize(Map<String,Object> dsInfos){
  Long clusterId=(Long)dsInfos.get(""String_Node_Str"");
  Long podId=(Long)dsInfos.get(""String_Node_Str"");
  Long zoneId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      URI cifsUri=new URI(url);
      String warnMsg=UriUtils.getCifsUriParametersProblems(cifsUri);
      if (warnMsg != null) {
        throw new InvalidParameterValueException(warnMsg);
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  String tags=(String)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  parameters.setTags(tags);
  parameters.setDetails(details);
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  Object localStorage=dsInfos.get(""String_Node_Str"");
  if (localStorage != null) {
    hostPath=hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    hostPath=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String userInfo=uri.getUserInfo();
  int port=uri.getPort();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.NetworkFilesystem);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=445;
    }
    parameters.setType(StoragePoolType.SMB);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    parameters.setType(StoragePoolType.Filesystem);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.SharedMountPoint);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.CLVM);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=6789;
    }
    parameters.setType(StoragePoolType.RBD);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    parameters.setUserInfo(userInfo);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.PreSetup);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      parameters.setType(StoragePoolType.IscsiLUN);
      parameters.setHost(storageHost);
      parameters.setPort(port);
      parameters.setPath(hostPath);
    }
 else {
      for (      StoragePoolDiscoverer discoverer : _discoverers) {
        Map<? extends StoragePool,Map<String,String>> pools;
        try {
          pools=discoverer.find(zoneId,podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<? extends StoragePool,Map<String,String>> entry=pools.entrySet().iterator().next();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.ISO);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.VMFS);
    parameters.setHost(""String_Node_Str"" + hostPath);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    port=7777;
    parameters.setType(StoragePoolType.OCFS2);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=24007;
    }
    parameters.setType(StoragePoolType.Gluster);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else {
    StoragePoolType type=Enum.valueOf(StoragePoolType.class,scheme);
    if (type != null) {
      parameters.setType(type);
      parameters.setHost(storageHost);
      parameters.setPort(0);
      parameters.setPath(hostPath);
    }
 else {
      s_logger.warn(""String_Node_Str"" + uri);
      throw new IllegalArgumentException(""String_Node_Str"" + uri);
    }
  }
  if (localStorage == null) {
    List<StoragePoolVO> pools=primaryDataStoreDao.listPoolByHostPath(storageHost,hostPath);
    if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
      Long oldPodId=pools.get(0).getPodId();
      throw new CloudRuntimeException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"");
    }
  }
  Object existingUuid=dsInfos.get(""String_Node_Str"");
  String uuid=null;
  if (existingUuid != null) {
    uuid=(String)existingUuid;
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"") || scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes((storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=primaryDataStoreDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  String poolName=(String)dsInfos.get(""String_Node_Str"");
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setPodId(podId);
  parameters.setName(poolName);
  parameters.setClusterId(clusterId);
  parameters.setProviderName(providerName);
  return dataStoreHelper.createPrimaryDataStore(parameters);
}",0.9957086456485666
105779,"@Override public List<Long> listPodIdsHavingVmsforAccount(long zoneId,long accountId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  List<Long> result=new ArrayList<Long>();
  try {
    String sql=LIST_PODS_HAVING_VMS_FOR_ACCOUNT;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,zoneId);
    pstmt.setLong(2,accountId);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      result.add(rs.getLong(1));
    }
    return result;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + LIST_PODS_HAVING_VMS_FOR_ACCOUNT,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + LIST_PODS_HAVING_VMS_FOR_ACCOUNT,e);
  }
}","@Override public List<Long> listPodIdsHavingVmsforAccount(long zoneId,long accountId){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  List<Long> result=new ArrayList<Long>();
  String sql=LIST_PODS_HAVING_VMS_FOR_ACCOUNT;
  try (PreparedStatement pstmt=txn.prepareStatement(sql)){
    pstmt.setLong(1,zoneId);
    pstmt.setLong(2,accountId);
    try (ResultSet rs=pstmt.executeQuery()){
      while (rs.next()) {
        result.add(rs.getLong(1));
      }
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
      throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
    }
    txn.commit();
    return result;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    try {
      if (txn != null) {
        txn.close();
      }
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.6125211505922166
105780,"@Override public Hashtable<Long,UserVmData> listVmDetails(Hashtable<Long,UserVmData> userVmDataHash){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  PreparedStatement pstmt=null;
  try {
    int curr_index=0;
    List<UserVmData> userVmDataList=new ArrayList(userVmDataHash.values());
    if (userVmDataList.size() > VM_DETAILS_BATCH_SIZE) {
      pstmt=txn.prepareStatement(VM_DETAILS + getQueryBatchAppender(VM_DETAILS_BATCH_SIZE));
      while ((curr_index + VM_DETAILS_BATCH_SIZE) <= userVmDataList.size()) {
        for (int k=1, j=curr_index; j < curr_index + VM_DETAILS_BATCH_SIZE; j++, k++) {
          pstmt.setLong(k,userVmDataList.get(j).getId());
        }
        ResultSet rs=pstmt.executeQuery();
        while (rs.next()) {
          long vm_id=rs.getLong(""String_Node_Str"");
          UserVmData uvm=userVmDataHash.get(vm_id);
          if (uvm == null) {
            uvm=new UserVmData();
            uvm.setId(vm_id);
          }
          setUserVmData(uvm,rs);
        }
        rs.close();
        curr_index+=VM_DETAILS_BATCH_SIZE;
      }
      if (pstmt != null)       pstmt.close();
    }
    if (curr_index < userVmDataList.size()) {
      int batch_size=(userVmDataList.size() - curr_index);
      pstmt=txn.prepareStatement(VM_DETAILS + getQueryBatchAppender(batch_size));
      for (int k=1, j=curr_index; j < curr_index + batch_size; j++, k++) {
        pstmt.setLong(k,userVmDataList.get(j).getId());
      }
      ResultSet rs=pstmt.executeQuery();
      while (rs.next()) {
        long vm_id=rs.getLong(""String_Node_Str"");
        UserVmData uvm=userVmDataHash.get(vm_id);
        if (uvm == null) {
          uvm=new UserVmData();
          uvm.setId(vm_id);
        }
        setUserVmData(uvm,rs);
      }
      rs.close();
    }
    if (pstmt != null)     pstmt.close();
    return userVmDataHash;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public Hashtable<Long,UserVmData> listVmDetails(Hashtable<Long,UserVmData> userVmDataHash){
  TransactionLegacy txn=TransactionLegacy.currentTxn();
  try {
    int curr_index=0;
    List<UserVmData> userVmDataList=new ArrayList(userVmDataHash.values());
    if (userVmDataList.size() > VM_DETAILS_BATCH_SIZE) {
      try (PreparedStatement pstmt=txn.prepareStatement(VM_DETAILS + getQueryBatchAppender(VM_DETAILS_BATCH_SIZE))){
        while ((curr_index + VM_DETAILS_BATCH_SIZE) <= userVmDataList.size()) {
          for (int k=1, j=curr_index; j < curr_index + VM_DETAILS_BATCH_SIZE; j++, k++) {
            pstmt.setLong(k,userVmDataList.get(j).getId());
          }
          try (ResultSet rs=pstmt.executeQuery()){
            while (rs.next()) {
              long vm_id=rs.getLong(""String_Node_Str"");
              UserVmData uvm=userVmDataHash.get(vm_id);
              if (uvm == null) {
                uvm=new UserVmData();
                uvm.setId(vm_id);
              }
              setUserVmData(uvm,rs);
            }
          }
 catch (          Exception e) {
            s_logger.error(""String_Node_Str"" + e.getMessage());
            throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
          }
          curr_index+=VM_DETAILS_BATCH_SIZE;
        }
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
        throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
      }
      if (pstmt != null)       pstmt.close();
    }
    if (curr_index < userVmDataList.size()) {
      int batch_size=(userVmDataList.size() - curr_index);
      try (PreparedStatement vm_details_pstmt=txn.prepareStatement(VM_DETAILS + getQueryBatchAppender(batch_size))){
        for (int k=1, j=curr_index; j < curr_index + batch_size; j++, k++) {
          vm_details_pstmt.setLong(k,userVmDataList.get(j).getId());
        }
        try (ResultSet rs=vm_details_pstmt.executeQuery()){
          while (rs.next()) {
            long vm_id=rs.getLong(""String_Node_Str"");
            UserVmData uvm=userVmDataHash.get(vm_id);
            if (uvm == null) {
              uvm=new UserVmData();
              uvm.setId(vm_id);
            }
            setUserVmData(uvm,rs);
          }
        }
 catch (        Exception e) {
          s_logger.error(""String_Node_Str"" + e.getMessage());
          throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
        }
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage());
        throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
      }
    }
    txn.commit();
    return userVmDataHash;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (txn != null) {
        txn.close();
      }
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.6983877310263469
105781,"private void checkPodAttributes(long podId,String podName,long zoneId,String gateway,String cidr,String startIp,String endIp,String allocationStateStr,boolean checkForDuplicates,boolean skipGatewayOverlapCheck){
  if (checkForDuplicates) {
    if (validPod(podName,zoneId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podName + ""String_Node_Str""+ zoneId+ ""String_Node_Str"");
    }
  }
  String cidrAddress;
  long cidrSize;
  if (NetUtils.isValidCIDR(cidr)) {
    cidrAddress=getCidrAddress(cidr);
    cidrSize=getCidrSize(cidr);
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + podName);
  }
  if (startIp != null || endIp != null) {
    checkIpRange(startIp,endIp,cidrAddress,cidrSize);
  }
  checkOverlapPublicIpRange(zoneId,startIp,endIp);
  if (!NetUtils.isValidIp(gateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.getCidrSubNet(gateway,cidrSize).equalsIgnoreCase(NetUtils.getCidrSubNet(cidrAddress,cidrSize))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!skipGatewayOverlapCheck) {
    if (NetUtils.ipRangesOverlap(startIp,endIp,gateway,gateway)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String checkPodCIDRs=_configDao.getValue(""String_Node_Str"");
  if (checkPodCIDRs == null || checkPodCIDRs.trim().isEmpty() || Boolean.parseBoolean(checkPodCIDRs)) {
    checkPodCidrSubnets(zoneId,podId,cidr);
  }
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    try {
      Grouping.AllocationState.valueOf(allocationStateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationStateStr + ""String_Node_Str"");
    }
  }
}","private void checkPodAttributes(long podId,String podName,long zoneId,String gateway,String cidr,String startIp,String endIp,String allocationStateStr,boolean checkForDuplicates,boolean skipGatewayOverlapCheck){
  if (checkForDuplicates) {
    if (validPod(podName,zoneId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podName + ""String_Node_Str""+ zoneId+ ""String_Node_Str"");
    }
  }
  String cidrAddress;
  long cidrSize;
  if (NetUtils.isValidCIDR(cidr)) {
    cidrAddress=getCidrAddress(cidr);
    cidrSize=getCidrSize(cidr);
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + podName);
  }
  checkIpRange(startIp,endIp,cidrAddress,cidrSize);
  checkOverlapPublicIpRange(zoneId,startIp,endIp);
  if (!NetUtils.isValidIp(gateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.getCidrSubNet(gateway,cidrSize).equalsIgnoreCase(NetUtils.getCidrSubNet(cidrAddress,cidrSize))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!skipGatewayOverlapCheck) {
    if (NetUtils.ipRangesOverlap(startIp,endIp,gateway,gateway)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String checkPodCIDRs=_configDao.getValue(""String_Node_Str"");
  if (checkPodCIDRs == null || checkPodCIDRs.trim().isEmpty() || Boolean.parseBoolean(checkPodCIDRs)) {
    checkPodCidrSubnets(zoneId,podId,cidr);
  }
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    try {
      Grouping.AllocationState.valueOf(allocationStateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationStateStr + ""String_Node_Str"");
    }
  }
}",0.9863868406125922
105782,"@Override @DB public boolean deletePod(DeletePodCmd cmd){
  final Long podId=cmd.getId();
  if (!validPod(podId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str"");
  }
  checkIfPodIsDeletable(podId);
  final HostPodVO pod=_podDao.findById(podId);
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      List<DataCenterIpAddressVO> privateIps=_privateIpAddressDao.listByPodIdDcId(Long.valueOf(podId),pod.getDataCenterId());
      if (!privateIps.isEmpty()) {
        if (!(_privateIpAddressDao.deleteIpAddressByPod(podId))) {
          throw new CloudRuntimeException(""String_Node_Str"" + podId);
        }
      }
      List<DataCenterLinkLocalIpAddressVO> localIps=_linkLocalIpAllocDao.listByPodIdDcId(podId,pod.getDataCenterId());
      if (!localIps.isEmpty()) {
        if (!(_linkLocalIpAllocDao.deleteIpAddressByPod(podId))) {
          throw new CloudRuntimeException(""String_Node_Str"" + podId);
        }
      }
      List<? extends Vlan> vlans=_networkModel.listPodVlans(podId);
      if (vlans != null && !vlans.isEmpty()) {
        for (        Vlan vlan : vlans) {
          _vlanDao.remove(vlan.getId());
        }
      }
      _capacityDao.removeBy(null,null,podId,null,null);
      if (!(_podDao.remove(podId))) {
        throw new CloudRuntimeException(""String_Node_Str"" + podId);
      }
      DedicatedResourceVO dr=_dedicatedDao.findByPodId(podId);
      if (dr != null) {
        _dedicatedDao.remove(dr.getId());
      }
    }
  }
);
  return true;
}","@Override @DB public boolean deletePod(DeletePodCmd cmd){
  final Long podId=cmd.getId();
  if (!validPod(podId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str"");
  }
  checkIfPodIsDeletable(podId);
  final HostPodVO pod=_podDao.findById(podId);
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      List<DataCenterIpAddressVO> privateIps=_privateIpAddressDao.listByPodIdDcId(podId,pod.getDataCenterId());
      if (!privateIps.isEmpty()) {
        if (!(_privateIpAddressDao.deleteIpAddressByPod(podId))) {
          throw new CloudRuntimeException(""String_Node_Str"" + podId);
        }
      }
      List<DataCenterLinkLocalIpAddressVO> localIps=_linkLocalIpAllocDao.listByPodIdDcId(podId,pod.getDataCenterId());
      if (!localIps.isEmpty()) {
        if (!(_linkLocalIpAllocDao.deleteIpAddressByPod(podId))) {
          throw new CloudRuntimeException(""String_Node_Str"" + podId);
        }
      }
      List<? extends Vlan> vlans=_networkModel.listPodVlans(podId);
      if (vlans != null && !vlans.isEmpty()) {
        for (        Vlan vlan : vlans) {
          _vlanDao.remove(vlan.getId());
        }
      }
      _capacityDao.removeBy(null,null,podId,null,null);
      if (!(_podDao.remove(podId))) {
        throw new CloudRuntimeException(""String_Node_Str"" + podId);
      }
      DedicatedResourceVO dr=_dedicatedDao.findByPodId(podId);
      if (dr != null) {
        _dedicatedDao.remove(dr.getId());
      }
    }
  }
);
  return true;
}",0.9925140361821584
105783,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_DELETE,eventDescription=""String_Node_Str"",async=false) public boolean deleteZone(DeleteZoneCmd cmd){
  Long userId=CallContext.current().getCallingUserId();
  final Long zoneId=cmd.getId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  checkIfZoneIsDeletable(zoneId);
  return Transaction.execute(new TransactionCallback<Boolean>(){
    @Override public Boolean doInTransaction(    TransactionStatus status){
      List<VlanVO> vlans=_vlanDao.listByZone(zoneId);
      for (      VlanVO vlan : vlans) {
        _vlanDao.remove(vlan.getId());
      }
      boolean success=_zoneDao.remove(zoneId);
      if (success) {
        _capacityDao.removeBy(null,zoneId,null,null,null);
        DedicatedResourceVO dr=_dedicatedDao.findByZoneId(zoneId);
        if (dr != null) {
          _dedicatedDao.remove(dr.getId());
          List<DedicatedResourceVO> resourcesInGroup=_dedicatedDao.listByAffinityGroupId(dr.getAffinityGroupId());
          if (resourcesInGroup.isEmpty()) {
            _affinityGroupService.deleteAffinityGroup(dr.getAffinityGroupId(),null,null,null);
          }
        }
      }
      return success;
    }
  }
);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_DELETE,eventDescription=""String_Node_Str"",async=false) public boolean deleteZone(DeleteZoneCmd cmd){
  final Long zoneId=cmd.getId();
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  checkIfZoneIsDeletable(zoneId);
  return Transaction.execute(new TransactionCallback<Boolean>(){
    @Override public Boolean doInTransaction(    TransactionStatus status){
      List<VlanVO> vlans=_vlanDao.listByZone(zoneId);
      for (      VlanVO vlan : vlans) {
        _vlanDao.remove(vlan.getId());
      }
      boolean success=_zoneDao.remove(zoneId);
      if (success) {
        _capacityDao.removeBy(null,zoneId,null,null,null);
        DedicatedResourceVO dr=_dedicatedDao.findByZoneId(zoneId);
        if (dr != null) {
          _dedicatedDao.remove(dr.getId());
          List<DedicatedResourceVO> resourcesInGroup=_dedicatedDao.listByAffinityGroupId(dr.getAffinityGroupId());
          if (resourcesInGroup.isEmpty()) {
            _affinityGroupService.deleteAffinityGroup(dr.getAffinityGroupId(),null,null,null);
          }
        }
      }
      return success;
    }
  }
);
}",0.9407176287051482
105784,"@Override @DB public boolean trash(Network network,NetworkOffering offering){
  final List<NicVO> nics=_nicDao.listPlaceholderNicsByNetworkId(network.getId());
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      Nic nic : nics) {
        if (nic.getIp4Address() != null) {
          s_logger.debug(""String_Node_Str"" + nic.getIp4Address() + ""String_Node_Str""+ nic);
          IPAddressVO ip=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),nic.getIp4Address());
          _ipAddrMgr.markIpAsUnavailable(ip.getId());
          _ipAddressDao.unassignIpAddress(ip.getId());
          s_logger.debug(""String_Node_Str"" + nic);
          _nicDao.remove(nic.getId());
        }
      }
    }
  }
);
  return true;
}","@Override @DB public boolean trash(Network network,NetworkOffering offering){
  try {
    long id=network.getId();
    final List<NicVO> nics=_nicDao.listPlaceholderNicsByNetworkId(id);
    if (nics != null) {
      Transaction.execute(new TransactionCallbackNoReturn(){
        @Override public void doInTransactionWithoutResult(        TransactionStatus status){
          for (          Nic nic : nics) {
            if (nic.getIp4Address() != null) {
              s_logger.debug(""String_Node_Str"" + nic.getIp4Address() + ""String_Node_Str""+ nic);
              IPAddressVO ip=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),nic.getIp4Address());
              if (ip != null) {
                _ipAddrMgr.markIpAsUnavailable(ip.getId());
                _ipAddressDao.unassignIpAddress(ip.getId());
                s_logger.debug(""String_Node_Str"" + nic);
                _nicDao.remove(nic.getId());
              }
            }
          }
        }
      }
);
    }
    return true;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage(),e);
  }
}",0.7673019057171514
105785,"@Override public void doInTransactionWithoutResult(TransactionStatus status){
  for (  Nic nic : nics) {
    if (nic.getIp4Address() != null) {
      s_logger.debug(""String_Node_Str"" + nic.getIp4Address() + ""String_Node_Str""+ nic);
      IPAddressVO ip=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),nic.getIp4Address());
      _ipAddrMgr.markIpAsUnavailable(ip.getId());
      _ipAddressDao.unassignIpAddress(ip.getId());
      s_logger.debug(""String_Node_Str"" + nic);
      _nicDao.remove(nic.getId());
    }
  }
}","@Override public void doInTransactionWithoutResult(TransactionStatus status){
  for (  Nic nic : nics) {
    if (nic.getIp4Address() != null) {
      s_logger.debug(""String_Node_Str"" + nic.getIp4Address() + ""String_Node_Str""+ nic);
      IPAddressVO ip=_ipAddressDao.findByIpAndSourceNetworkId(nic.getNetworkId(),nic.getIp4Address());
      if (ip != null) {
        _ipAddrMgr.markIpAsUnavailable(ip.getId());
        _ipAddressDao.unassignIpAddress(ip.getId());
        s_logger.debug(""String_Node_Str"" + nic);
        _nicDao.remove(nic.getId());
      }
    }
  }
}",0.9635701275045536
105786,"@Override public VMInstanceVO reConfigureVm(String vmUuid,ServiceOffering oldServiceOffering,boolean reconfiguringOnExistingHost) throws ResourceUnavailableException, InsufficientServerCapacityException, ConcurrentOperationException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      return orchestrateReConfigureVm(vmUuid,oldServiceOffering,reconfiguringOnExistingHost);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=reconfigureVmThroughJobQueue(vmUuid,oldServiceOffering,reconfiguringOnExistingHost);
    VirtualMachine vm=null;
    try {
      vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof InsufficientServerCapacityException)       throw (InsufficientServerCapacityException)jobResult;
 else       if (jobResult instanceof Throwable) {
        s_logger.error(""String_Node_Str"",(Throwable)jobResult);
        throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
      }
    }
    return (VMInstanceVO)vm;
  }
}","@Override public VMInstanceVO reConfigureVm(String vmUuid,ServiceOffering oldServiceOffering,boolean reconfiguringOnExistingHost) throws ResourceUnavailableException, InsufficientServerCapacityException, ConcurrentOperationException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      return orchestrateReConfigureVm(vmUuid,oldServiceOffering,reconfiguringOnExistingHost);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=reconfigureVmThroughJobQueue(vmUuid,oldServiceOffering,reconfiguringOnExistingHost);
    VirtualMachine vm=null;
    try {
      vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof InsufficientServerCapacityException)       throw (InsufficientServerCapacityException)jobResult;
 else       if (jobResult instanceof Throwable) {
        s_logger.error(""String_Node_Str"",(Throwable)jobResult);
        throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
      }
    }
    return (VMInstanceVO)vm;
  }
}",0.9863648057627992
105787,"@Override public void migrateForScale(String vmUuid,long srcHostId,DeployDestination dest,Long oldSvcOfferingId) throws ResourceUnavailableException, ConcurrentOperationException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateMigrateForScale(vmUuid,srcHostId,dest,oldSvcOfferingId);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=migrateVmForScaleThroughJobQueue(vmUuid,srcHostId,dest,oldSvcOfferingId);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}","@Override public void migrateForScale(String vmUuid,long srcHostId,DeployDestination dest,Long oldSvcOfferingId) throws ResourceUnavailableException, ConcurrentOperationException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateMigrateForScale(vmUuid,srcHostId,dest,oldSvcOfferingId);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=migrateVmForScaleThroughJobQueue(vmUuid,srcHostId,dest,oldSvcOfferingId);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}",0.9844346549192364
105788,"@Override public NicProfile addVmToNetwork(VirtualMachine vm,Network network,NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      return orchestrateAddVmToNetwork(vm,network,requested);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=addVmToNetworkThroughJobQueue(vm,network,requested);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobException;
 else       if (jobException instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobException;
 else       if (jobException instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobException;
 else       if (jobException instanceof RuntimeException)       throw (RuntimeException)jobException;
 else       if (jobException instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobException);
 else       if (jobException instanceof NicProfile)       return (NicProfile)jobException;
    }
    throw new RuntimeException(""String_Node_Str"");
  }
}","@Override public NicProfile addVmToNetwork(VirtualMachine vm,Network network,NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      return orchestrateAddVmToNetwork(vm,network,requested);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=addVmToNetworkThroughJobQueue(vm,network,requested);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobException;
 else       if (jobException instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobException;
 else       if (jobException instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobException;
 else       if (jobException instanceof RuntimeException)       throw (RuntimeException)jobException;
 else       if (jobException instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobException);
 else       if (jobException instanceof NicProfile)       return (NicProfile)jobException;
    }
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.986179921773142
105789,"@Override public void advanceStart(String vmUuid,Map<VirtualMachineProfile.Param,Object> params,DeploymentPlan planToDeploy,DeploymentPlanner planner) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateStart(vmUuid,params,planToDeploy,planner);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=startVmThroughJobQueue(vmUuid,params,planToDeploy,planner);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}","@Override public void advanceStart(String vmUuid,Map<VirtualMachineProfile.Param,Object> params,DeploymentPlan planToDeploy,DeploymentPlanner planner) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateStart(vmUuid,params,planToDeploy,planner);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=startVmThroughJobQueue(vmUuid,params,planToDeploy,planner);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}",0.9857946931117664
105790,"private VMInstanceVO orchestrateReConfigureVm(String vmUuid,ServiceOffering oldServiceOffering,boolean reconfiguringOnExistingHost) throws ResourceUnavailableException, ConcurrentOperationException {
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  long newServiceofferingId=vm.getServiceOfferingId();
  ServiceOffering newServiceOffering=_offeringDao.findById(vm.getId(),newServiceofferingId);
  HostVO hostVo=_hostDao.findById(vm.getHostId());
  Float memoryOvercommitRatio=CapacityManager.MemOverprovisioningFactor.valueIn(hostVo.getClusterId());
  Float cpuOvercommitRatio=CapacityManager.CpuOverprovisioningFactor.valueIn(hostVo.getClusterId());
  long minMemory=(long)(newServiceOffering.getRamSize() / memoryOvercommitRatio);
  ScaleVmCommand reconfigureCmd=new ScaleVmCommand(vm.getInstanceName(),newServiceOffering.getCpu(),(int)(newServiceOffering.getSpeed() / cpuOvercommitRatio),newServiceOffering.getSpeed(),minMemory * 1024L * 1024L,newServiceOffering.getRamSize() * 1024L * 1024L,newServiceOffering.getLimitCpuUse());
  Long dstHostId=vm.getHostId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Running,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(vm.getHostId());
  work=_workDao.persist(work);
  boolean success=false;
  try {
    if (reconfiguringOnExistingHost) {
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(newServiceofferingId);
      _capacityMgr.allocateVmCapacity(vm,false);
    }
    Answer reconfigureAnswer=_agentMgr.send(vm.getHostId(),reconfigureCmd);
    if (reconfigureAnswer == null || !reconfigureAnswer.getResult()) {
      s_logger.error(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
      throw new CloudRuntimeException(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
    }
    success=true;
  }
 catch (  OperationTimedoutException e) {
    throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
  }
catch (  AgentUnavailableException e) {
    throw e;
  }
 finally {
    if (!success) {
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.allocateVmCapacity(vm,false);
    }
  }
  return vm;
}","private VMInstanceVO orchestrateReConfigureVm(String vmUuid,ServiceOffering oldServiceOffering,boolean reconfiguringOnExistingHost) throws ResourceUnavailableException, ConcurrentOperationException {
  VMInstanceVO vm=_vmDao.findByUuid(vmUuid);
  long newServiceofferingId=vm.getServiceOfferingId();
  ServiceOffering newServiceOffering=_offeringDao.findById(vm.getId(),newServiceofferingId);
  HostVO hostVo=_hostDao.findById(vm.getHostId());
  Float memoryOvercommitRatio=CapacityManager.MemOverprovisioningFactor.valueIn(hostVo.getClusterId());
  Float cpuOvercommitRatio=CapacityManager.CpuOverprovisioningFactor.valueIn(hostVo.getClusterId());
  long minMemory=(long)(newServiceOffering.getRamSize() / memoryOvercommitRatio);
  ScaleVmCommand reconfigureCmd=new ScaleVmCommand(vm.getInstanceName(),newServiceOffering.getCpu(),(int)(newServiceOffering.getSpeed() / cpuOvercommitRatio),newServiceOffering.getSpeed(),minMemory * 1024L * 1024L,newServiceOffering.getRamSize() * 1024L * 1024L,newServiceOffering.getLimitCpuUse());
  Long dstHostId=vm.getHostId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Running,vm.getType(),vm.getId());
  work.setStep(Step.Prepare);
  work.setResourceType(ItWorkVO.ResourceType.Host);
  work.setResourceId(vm.getHostId());
  _workDao.persist(work);
  boolean success=false;
  try {
    if (reconfiguringOnExistingHost) {
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(newServiceofferingId);
      _capacityMgr.allocateVmCapacity(vm,false);
    }
    Answer reconfigureAnswer=_agentMgr.send(vm.getHostId(),reconfigureCmd);
    if (reconfigureAnswer == null || !reconfigureAnswer.getResult()) {
      s_logger.error(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
      throw new CloudRuntimeException(""String_Node_Str"" + (reconfigureAnswer == null ? ""String_Node_Str"" : reconfigureAnswer.getDetails()));
    }
    success=true;
  }
 catch (  OperationTimedoutException e) {
    throw new AgentUnavailableException(""String_Node_Str"" + vm,dstHostId);
  }
catch (  AgentUnavailableException e) {
    throw e;
  }
 finally {
    if (!success) {
      _capacityMgr.releaseVmCapacity(vm,false,false,vm.getHostId());
      vm.setServiceOfferingId(oldServiceOffering.getId());
      _capacityMgr.allocateVmCapacity(vm,false);
    }
  }
  return vm;
}",0.5968100141328487
105791,"private void advanceStop(VMInstanceVO vm,boolean cleanUpEvenIfUnableToStop) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return;
  }
  ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ work.getId());
    }
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    boolean doCleanup=false;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    if (state == State.Starting || state == State.Migrating) {
      if (work != null) {
        doCleanup=true;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
 else     if (state == State.Stopping) {
      doCleanup=true;
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException(""String_Node_Str"" + vm);
          }
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),false);
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      if (vm.getType() == VirtualMachine.Type.User) {
        String platform=answer.getPlatform();
        if (platform != null) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
      GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + vm.instanceName);
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        s_logger.warn(""String_Node_Str"" + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
}","private void advanceStop(VMInstanceVO vm,boolean cleanUpEvenIfUnableToStop) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return;
  }
  ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
  if (work != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ work.getId());
    }
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    if (!cleanUpEvenIfUnableToStop) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    return;
  }
  VirtualMachineGuru vmGuru=getVmGuru(vm);
  VirtualMachineProfile profile=new VirtualMachineProfileImpl(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!cleanUpEvenIfUnableToStop) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    boolean doCleanup=false;
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    if ((state == State.Starting) || (state == State.Migrating) || (state == State.Stopping)) {
      if (work != null) {
        doCleanup=true;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
    if (doCleanup) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl(vm),work,Event.StopRequested,cleanUpEvenIfUnableToStop)) {
        try {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + work.getId());
          }
          if (!changeState(vm,Event.AgentReportStopped,null,work,Step.Done)) {
            throw new CloudRuntimeException(""String_Node_Str"" + vm);
          }
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
      }
    }
  }
  if (vm.getState() != State.Stopping) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  vmGuru.prepareStop(profile);
  StopCommand stop=new StopCommand(vm,getExecuteInSequence(vm.getHypervisorType()),false);
  boolean stopped=false;
  StopAnswer answer=null;
  try {
    answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
    if (answer != null) {
      if (vm.getType() == VirtualMachine.Type.User) {
        String platform=answer.getPlatform();
        if (platform != null) {
          UserVmVO userVm=_userVmDao.findById(vm.getId());
          _userVmDao.loadDetails(userVm);
          userVm.setDetail(""String_Node_Str"",platform);
          _userVmDao.saveDetails(userVm);
        }
      }
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
      GPUDeviceTO gpuDevice=stop.getGpuDevice();
      if (gpuDevice != null) {
        _resourceMgr.updateGPUDetails(vm.getHostId(),gpuDevice.getGroupDetails());
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + vm.instanceName);
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + e.toString());
  }
 finally {
    if (!stopped) {
      if (!cleanUpEvenIfUnableToStop) {
        s_logger.warn(""String_Node_Str"" + vm);
        try {
          stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
        }
        throw new CloudRuntimeException(""String_Node_Str"" + vm);
      }
 else {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        vmGuru.finalizeStop(profile,answer);
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,cleanUpEvenIfUnableToStop);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      volumeMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (work != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + work.getId());
      }
      work.setStep(Step.Done);
      _workDao.update(work.getId(),work);
    }
    if (!stateTransitTo(vm,Event.OperationSucceeded,null)) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
}",0.9917914051183004
105792,"@Override public void advanceReboot(String vmUuid,Map<VirtualMachineProfile.Param,Object> params) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateReboot(vmUuid,params);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=rebootVmThroughJobQueue(vmUuid,params);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}","@Override public void advanceReboot(String vmUuid,Map<VirtualMachineProfile.Param,Object> params) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateReboot(vmUuid,params);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=rebootVmThroughJobQueue(vmUuid,params);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof InsufficientCapacityException)       throw (InsufficientCapacityException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}",0.985049365303244
105793,"@Override public boolean removeNicFromVm(VirtualMachine vm,Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      return orchestrateRemoveNicFromVm(vm,nic);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=removeNicFromVmThroughJobQueue(vm,nic);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
 else       if (jobResult instanceof Boolean)       return (Boolean)jobResult;
    }
    throw new RuntimeException(""String_Node_Str"");
  }
}","@Override public boolean removeNicFromVm(VirtualMachine vm,Nic nic) throws ConcurrentOperationException, ResourceUnavailableException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      return orchestrateRemoveNicFromVm(vm,nic);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=removeNicFromVmThroughJobQueue(vm,nic);
    try {
      outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobResult;
 else       if (jobResult instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobResult;
 else       if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
 else       if (jobResult instanceof Boolean)       return (Boolean)jobResult;
    }
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9846339258812896
105794,"@Override public void migrateWithStorage(String vmUuid,long srcHostId,long destHostId,Map<Long,Long> volumeToPool) throws ResourceUnavailableException, ConcurrentOperationException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateMigrateWithStorage(vmUuid,srcHostId,destHostId,volumeToPool);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=migrateVmWithStorageThroughJobQueue(vmUuid,srcHostId,destHostId,volumeToPool);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobException;
 else       if (jobException instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobException;
 else       if (jobException instanceof RuntimeException)       throw (RuntimeException)jobException;
 else       if (jobException instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobException);
    }
  }
}","@Override public void migrateWithStorage(String vmUuid,long srcHostId,long destHostId,Map<Long,Long> volumeToPool) throws ResourceUnavailableException, ConcurrentOperationException {
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateMigrateWithStorage(vmUuid,srcHostId,destHostId,volumeToPool);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=migrateVmWithStorageThroughJobQueue(vmUuid,srcHostId,destHostId,volumeToPool);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobException=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobException != null) {
      if (jobException instanceof ResourceUnavailableException)       throw (ResourceUnavailableException)jobException;
 else       if (jobException instanceof ConcurrentOperationException)       throw (ConcurrentOperationException)jobException;
 else       if (jobException instanceof RuntimeException)       throw (RuntimeException)jobException;
 else       if (jobException instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobException);
    }
  }
}",0.9848094009744912
105795,"@Override public void storageMigration(String vmUuid,StoragePool destPool){
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateStorageMigration(vmUuid,destPool);
    }
  finally {
      if (VmJobEnabled.value())       _workJobDao.expunge(placeHolder.getId());
    }
  }
 else {
    Outcome<VirtualMachine> outcome=migrateVmStorageThroughJobQueue(vmUuid,destPool);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}","@Override public void storageMigration(String vmUuid,StoragePool destPool){
  AsyncJobExecutionContext jobContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (!VmJobEnabled.value() || jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {
    VmWorkJobVO placeHolder=null;
    if (VmJobEnabled.value()) {
      VirtualMachine vm=_vmDao.findByUuid(vmUuid);
      placeHolder=createPlaceHolderWork(vm.getId());
    }
    try {
      orchestrateStorageMigration(vmUuid,destPool);
    }
  finally {
      if (placeHolder != null) {
        _workJobDao.expunge(placeHolder.getId());
      }
    }
  }
 else {
    Outcome<VirtualMachine> outcome=migrateVmStorageThroughJobQueue(vmUuid,destPool);
    try {
      VirtualMachine vm=outcome.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
catch (    java.util.concurrent.ExecutionException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    Object jobResult=_jobMgr.unmarshallResultObject(outcome.getJob());
    if (jobResult != null) {
      if (jobResult instanceof RuntimeException)       throw (RuntimeException)jobResult;
 else       if (jobResult instanceof Throwable)       throw new RuntimeException(""String_Node_Str"",(Throwable)jobResult);
    }
  }
}",0.979794128860084
105796,"private String buildAccessCacheKey(Account caller,ControlledEntity entity,AccessType accessType,String action){
  StringBuffer key=new StringBuffer();
  key.append(caller.getAccountId());
  key.append(""String_Node_Str"");
  String entityType=null;
  if (entity != null && entity.getEntityType() != null) {
    entityType=entity.getEntityType().getSimpleName();
  }
  key.append(entityType != null ? entityType : ""String_Node_Str"");
  key.append(""String_Node_Str"");
  key.append(accessType != null ? accessType.toString() : ""String_Node_Str"");
  key.append(""String_Node_Str"");
  key.append(action != null ? action : ""String_Node_Str"");
  return key.toString();
}","private String buildAccessCacheKey(Account caller,ControlledEntity entity,AccessType accessType,String action){
  StringBuffer key=new StringBuffer();
  key.append(caller.getAccountId());
  key.append(""String_Node_Str"");
  String entityType=null;
  if (entity != null && entity.getEntityType() != null) {
    entityType=entity.getEntityType().getSimpleName();
    if (entity instanceof InternalIdentity) {
      entityType+=((InternalIdentity)entity).getId();
    }
  }
  key.append(entityType != null ? entityType : ""String_Node_Str"");
  key.append(""String_Node_Str"");
  key.append(accessType != null ? accessType.toString() : ""String_Node_Str"");
  key.append(""String_Node_Str"");
  key.append(action != null ? action : ""String_Node_Str"");
  return key.toString();
}",0.9256661991584852
105797,"void destroyRemoteAccessVpnForIp(long vpnServerAddressId,Account caller) throws ResourceUnavailableException ;","boolean destroyRemoteAccessVpnForIp(long ipId,Account caller) throws ResourceUnavailableException ;",0.8803827751196173
105798,"@Override public void execute() throws ResourceUnavailableException {
  _ravService.destroyRemoteAccessVpnForIp(publicIpId,CallContext.current().getCallingAccount());
}","@Override public void execute() throws ResourceUnavailableException {
  if (!_ravService.destroyRemoteAccessVpnForIp(publicIpId,CallContext.current().getCallingAccount())) {
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,""String_Node_Str"");
  }
}",0.7850467289719626
105799,"@Override @DB public void destroyRemoteAccessVpnForIp(long ipId,Account caller) throws ResourceUnavailableException {
  final RemoteAccessVpnVO vpn=_remoteAccessVpnDao.findByPublicIpAddress(ipId);
  if (vpn == null) {
    s_logger.debug(""String_Node_Str"" + ipId);
    return;
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,vpn);
  vpn.setState(RemoteAccessVpn.State.Removed);
  _remoteAccessVpnDao.update(vpn.getId(),vpn);
  boolean success=false;
  try {
    for (    RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
      if (element.stopVpn(vpn)) {
        success=true;
        break;
      }
    }
  }
  finally {
    if (success) {
      final List<? extends FirewallRule> vpnFwRules=_rulesDao.listByIpAndPurpose(ipId,Purpose.Vpn);
      boolean applyFirewall=false;
      final List<FirewallRuleVO> fwRules=new ArrayList<FirewallRuleVO>();
      if (vpnFwRules.size() != 0 && _rulesDao.findByRelatedId(vpnFwRules.get(0).getId()) != null) {
        applyFirewall=true;
      }
      if (applyFirewall) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            for (            FirewallRule vpnFwRule : vpnFwRules) {
              _firewallMgr.revokeRelatedFirewallRule(vpnFwRule.getId(),false);
              fwRules.add(_rulesDao.findByRelatedId(vpnFwRule.getId()));
            }
            s_logger.debug(""String_Node_Str"" + fwRules.size() + ""String_Node_Str"");
          }
        }
);
        s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
        success=_firewallMgr.applyIngressFirewallRules(ipId,caller);
      }
      if (success) {
        try {
          Transaction.execute(new TransactionCallbackNoReturn(){
            @Override public void doInTransactionWithoutResult(            TransactionStatus status){
              _remoteAccessVpnDao.remove(vpn.getId());
              List<VpnUserVO> vpnUsers=_vpnUsersDao.listByAccount(vpn.getAccountId());
              for (              VpnUserVO user : vpnUsers) {
                if (user.getState() != VpnUser.State.Revoke) {
                  UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
                }
              }
              if (vpnFwRules != null) {
                for (                FirewallRule vpnFwRule : vpnFwRules) {
                  _rulesDao.remove(vpnFwRule.getId());
                  s_logger.debug(""String_Node_Str"" + vpnFwRule.getSourceIpAddressId() + ""String_Node_Str""+ vpnFwRule.getSourcePortStart()+ ""String_Node_Str"");
                }
              }
            }
          }
);
        }
 catch (        Exception ex) {
          s_logger.warn(""String_Node_Str"",ex);
        }
      }
    }
  }
}","@Override @DB public boolean destroyRemoteAccessVpnForIp(long ipId,Account caller) throws ResourceUnavailableException {
  final RemoteAccessVpnVO vpn=_remoteAccessVpnDao.findByPublicIpAddress(ipId);
  if (vpn == null) {
    s_logger.debug(""String_Node_Str"" + ipId);
    return true;
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,vpn);
  RemoteAccessVpn.State prevState=vpn.getState();
  vpn.setState(RemoteAccessVpn.State.Removed);
  _remoteAccessVpnDao.update(vpn.getId(),vpn);
  boolean success=false;
  try {
    for (    RemoteAccessVPNServiceProvider element : _vpnServiceProviders) {
      if (element.stopVpn(vpn)) {
        success=true;
        break;
      }
    }
  }
 catch (  ResourceUnavailableException ex) {
    vpn.setState(prevState);
    _remoteAccessVpnDao.update(vpn.getId(),vpn);
    s_logger.debug(""String_Node_Str"" + vpn.getId() + ""String_Node_Str""+ RemoteAccessVpn.State.Running);
    success=false;
  }
 finally {
    if (success) {
      final List<? extends FirewallRule> vpnFwRules=_rulesDao.listByIpAndPurpose(ipId,Purpose.Vpn);
      boolean applyFirewall=false;
      final List<FirewallRuleVO> fwRules=new ArrayList<FirewallRuleVO>();
      if (vpnFwRules.size() != 0 && _rulesDao.findByRelatedId(vpnFwRules.get(0).getId()) != null) {
        applyFirewall=true;
      }
      if (applyFirewall) {
        Transaction.execute(new TransactionCallbackNoReturn(){
          @Override public void doInTransactionWithoutResult(          TransactionStatus status){
            for (            FirewallRule vpnFwRule : vpnFwRules) {
              _firewallMgr.revokeRelatedFirewallRule(vpnFwRule.getId(),false);
              fwRules.add(_rulesDao.findByRelatedId(vpnFwRule.getId()));
            }
            s_logger.debug(""String_Node_Str"" + fwRules.size() + ""String_Node_Str"");
          }
        }
);
        s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
        success=_firewallMgr.applyIngressFirewallRules(ipId,caller);
      }
      if (success) {
        try {
          Transaction.execute(new TransactionCallbackNoReturn(){
            @Override public void doInTransactionWithoutResult(            TransactionStatus status){
              _remoteAccessVpnDao.remove(vpn.getId());
              List<VpnUserVO> vpnUsers=_vpnUsersDao.listByAccount(vpn.getAccountId());
              for (              VpnUserVO user : vpnUsers) {
                if (user.getState() != VpnUser.State.Revoke) {
                  UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VPN_USER_REMOVE,user.getAccountId(),0,user.getId(),user.getUsername(),user.getClass().getName(),user.getUuid());
                }
              }
              if (vpnFwRules != null) {
                for (                FirewallRule vpnFwRule : vpnFwRules) {
                  _rulesDao.remove(vpnFwRule.getId());
                  s_logger.debug(""String_Node_Str"" + vpnFwRule.getSourceIpAddressId() + ""String_Node_Str""+ vpnFwRule.getSourcePortStart()+ ""String_Node_Str"");
                }
              }
            }
          }
);
        }
 catch (        Exception ex) {
          s_logger.warn(""String_Node_Str"",ex);
        }
      }
    }
  }
  return success;
}",0.9454008853910476
105800,"@Override @ActionEvent(eventType=EventTypes.EVENT_PRIVATE_GATEWAY_DELETE,eventDescription=""String_Node_Str"") @DB public boolean deleteVpcPrivateGateway(long gatewayId) throws ConcurrentOperationException, ResourceUnavailableException {
  final VpcGatewayVO gatewayVO=_vpcGatewayDao.acquireInLockTable(gatewayId);
  if (gatewayVO == null || gatewayVO.getType() != VpcGateway.Type.Private) {
    throw new ConcurrentOperationException(""String_Node_Str"" + gatewayId);
  }
  try {
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        long routeCount=_staticRouteDao.countRoutesByGateway(gatewayVO.getId());
        if (routeCount > 0) {
          throw new CloudRuntimeException(""String_Node_Str"" + gatewayVO + ""String_Node_Str""+ routeCount+ ""String_Node_Str"");
        }
        gatewayVO.setState(VpcGateway.State.Deleting);
        _vpcGatewayDao.update(gatewayVO.getId(),gatewayVO);
        s_logger.debug(""String_Node_Str"" + gatewayVO + ""String_Node_Str""+ VpcGateway.State.Deleting);
      }
    }
);
    PrivateGateway gateway=getVpcPrivateGateway(gatewayId);
    for (    VpcProvider provider : getVpcElements()) {
      if (provider.deletePrivateGateway(gateway)) {
        s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + gateway + ""String_Node_Str"");
        gatewayVO.setState(VpcGateway.State.Ready);
        _vpcGatewayDao.update(gatewayVO.getId(),gatewayVO);
        s_logger.debug(""String_Node_Str"" + gatewayVO + ""String_Node_Str""+ VpcGateway.State.Ready);
        return false;
      }
    }
    return deletePrivateGatewayFromTheDB(gateway);
  }
  finally {
    if (gatewayVO != null) {
      _vpcGatewayDao.releaseFromLockTable(gatewayId);
    }
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_PRIVATE_GATEWAY_DELETE,eventDescription=""String_Node_Str"") @DB public boolean deleteVpcPrivateGateway(long gatewayId) throws ConcurrentOperationException, ResourceUnavailableException {
  final VpcGatewayVO gatewayVO=_vpcGatewayDao.acquireInLockTable(gatewayId);
  if (gatewayVO == null || gatewayVO.getType() != VpcGateway.Type.Private) {
    throw new ConcurrentOperationException(""String_Node_Str"" + gatewayId);
  }
  try {
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        long routeCount=_staticRouteDao.countRoutesByGateway(gatewayVO.getId());
        if (routeCount > 0) {
          throw new CloudRuntimeException(""String_Node_Str"" + gatewayVO + ""String_Node_Str""+ routeCount+ ""String_Node_Str"");
        }
        gatewayVO.setState(VpcGateway.State.Deleting);
        _vpcGatewayDao.update(gatewayVO.getId(),gatewayVO);
        s_logger.debug(""String_Node_Str"" + gatewayVO + ""String_Node_Str""+ VpcGateway.State.Deleting);
      }
    }
);
    List<Provider> providersToImplement=getVpcProviders(gatewayVO.getVpcId());
    PrivateGateway gateway=getVpcPrivateGateway(gatewayId);
    for (    VpcProvider provider : getVpcElements()) {
      if (providersToImplement.contains(provider.getProvider())) {
        if (provider.deletePrivateGateway(gateway)) {
          s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"" + gateway + ""String_Node_Str"");
          gatewayVO.setState(VpcGateway.State.Ready);
          _vpcGatewayDao.update(gatewayVO.getId(),gatewayVO);
          s_logger.debug(""String_Node_Str"" + gatewayVO + ""String_Node_Str""+ VpcGateway.State.Ready);
          return false;
        }
      }
    }
    return deletePrivateGatewayFromTheDB(gateway);
  }
  finally {
    if (gatewayVO != null) {
      _vpcGatewayDao.releaseFromLockTable(gatewayId);
    }
  }
}",0.9517884914463453
105801,"@Override public PrivateGateway applyVpcPrivateGateway(long gatewayId,boolean destroyOnFailure) throws ConcurrentOperationException, ResourceUnavailableException {
  VpcGatewayVO vo=_vpcGatewayDao.findById(gatewayId);
  boolean success=true;
  try {
    PrivateGateway gateway=getVpcPrivateGateway(gatewayId);
    for (    VpcProvider provider : getVpcElements()) {
      if (!provider.createPrivateGateway(gateway)) {
        success=false;
      }
    }
    if (success) {
      s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str"");
      if (vo.getState() != VpcGateway.State.Ready) {
        vo.setState(VpcGateway.State.Ready);
        _vpcGatewayDao.update(vo.getId(),vo);
        s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str""+ VpcGateway.State.Ready);
      }
      return getVpcPrivateGateway(gatewayId);
    }
 else {
      s_logger.warn(""String_Node_Str"" + gateway + ""String_Node_Str"");
      return null;
    }
  }
  finally {
    if (!success) {
      if (destroyOnFailure) {
        s_logger.debug(""String_Node_Str"" + vo + ""String_Node_Str"");
        if (deletePrivateGatewayFromTheDB(getVpcPrivateGateway(gatewayId))) {
          s_logger.warn(""String_Node_Str"" + vo + ""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"" + vo + ""String_Node_Str"");
        }
      }
    }
  }
}","@Override public PrivateGateway applyVpcPrivateGateway(long gatewayId,boolean destroyOnFailure) throws ConcurrentOperationException, ResourceUnavailableException {
  VpcGatewayVO vo=_vpcGatewayDao.findById(gatewayId);
  boolean success=true;
  try {
    List<Provider> providersToImplement=getVpcProviders(vo.getVpcId());
    PrivateGateway gateway=getVpcPrivateGateway(gatewayId);
    for (    VpcProvider provider : getVpcElements()) {
      if (providersToImplement.contains(provider.getProvider())) {
        if (!provider.createPrivateGateway(gateway)) {
          success=false;
        }
      }
    }
    if (success) {
      s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str"");
      if (vo.getState() != VpcGateway.State.Ready) {
        vo.setState(VpcGateway.State.Ready);
        _vpcGatewayDao.update(vo.getId(),vo);
        s_logger.debug(""String_Node_Str"" + gateway + ""String_Node_Str""+ VpcGateway.State.Ready);
      }
      return getVpcPrivateGateway(gatewayId);
    }
 else {
      s_logger.warn(""String_Node_Str"" + gateway + ""String_Node_Str"");
      return null;
    }
  }
  finally {
    if (!success) {
      if (destroyOnFailure) {
        s_logger.debug(""String_Node_Str"" + vo + ""String_Node_Str"");
        if (deletePrivateGatewayFromTheDB(getVpcPrivateGateway(gatewayId))) {
          s_logger.warn(""String_Node_Str"" + vo + ""String_Node_Str"");
        }
 else {
          s_logger.warn(""String_Node_Str"" + vo + ""String_Node_Str"");
        }
      }
    }
  }
}",0.946259220231823
105802,"@Override public List<NetworkACLItemVO> listByACL(long aclId){
  SearchCriteria<NetworkACLItemVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",aclId);
  List<NetworkACLItemVO> list=listBy(sc);
  for (  NetworkACLItemVO item : list) {
    loadCidrs(item);
  }
  return listBy(sc);
}","@Override public List<NetworkACLItemVO> listByACL(long aclId){
  SearchCriteria<NetworkACLItemVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",aclId);
  List<NetworkACLItemVO> list=listBy(sc);
  for (  NetworkACLItemVO item : list) {
    loadCidrs(item);
  }
  return list;
}",0.9899665551839464
105803,"@Override public NetworkACLItemVO findByAclAndNumber(long aclId,int number){
  SearchCriteria<NetworkACLItemVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",aclId);
  sc.setParameters(""String_Node_Str"",number);
  NetworkACLItemVO vo=findOneBy(sc);
  loadCidrs(vo);
  return vo;
}","@Override public NetworkACLItemVO findByAclAndNumber(long aclId,int number){
  SearchCriteria<NetworkACLItemVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",aclId);
  sc.setParameters(""String_Node_Str"",number);
  NetworkACLItemVO vo=findOneBy(sc);
  if (vo != null) {
    loadCidrs(vo);
  }
  return vo;
}",0.8690095846645367
105804,"@ActionEvent(eventType=EventTypes.EVENT_VOLUME_ATTACH,eventDescription=""String_Node_Str"",async=true) public Volume attachVolumeToVM(Long vmId,Long volumeId,Long deviceId){
  Account caller=CallContext.current().getCallingAccount();
  VolumeInfo volumeToAttach=volFactory.getVolume(volumeId);
  if (volumeToAttach == null || !(volumeToAttach.getVolumeType() == Volume.Type.DATADISK || volumeToAttach.getVolumeType() == Volume.Type.ROOT)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Volume.Type.ROOT.toString() + ""String_Node_Str""+ Volume.Type.DATADISK.toString());
  }
  if (volumeToAttach.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volumeToAttach.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_userVmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volumeToAttach.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,true,volumeToAttach,vm);
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      validateRootVolumeDetachAttach(_volsDao.findById(volumeToAttach.getId()),vm);
      if (!_volsDao.findByInstanceAndDeviceId(vm.getId(),0).isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (volumeToAttach.getState() == Volume.State.Uploaded) {
        throw new InvalidParameterValueException(""String_Node_Str"" + Volume.State.Uploaded);
      }
    }
  }
  if (deviceId == null || deviceId.longValue() != 0) {
    List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
    int maxDataVolumesSupported=getMaxDataVolumesSupported(vm);
    if (existingDataVolumes.size() >= maxDataVolumesSupported) {
      throw new InvalidParameterValueException(""String_Node_Str"" + maxDataVolumesSupported + ""String_Node_Str"");
    }
  }
  deviceId=getDeviceId(vmId,deviceId);
  DataCenterVO dataCenter=_dcDao.findById(volumeToAttach.getDataCenterId());
  if (!dataCenter.isLocalStorageEnabled()) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(volumeToAttach.getDiskOfferingId());
    if (diskOffering.getUseLocalStorage()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering.getName() + ""String_Node_Str"");
    }
  }
  List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
  if (vmSnapshots.size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,volumeToAttach,vm);
  if (!(Volume.State.Allocated.equals(volumeToAttach.getState()) || Volume.State.Ready.equals(volumeToAttach.getState()) || Volume.State.Uploaded.equals(volumeToAttach.getState()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VolumeVO exstingVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str"");
  }
 else {
    if (!rootVolumesOfVm.isEmpty()) {
      exstingVolumeOfVm=rootVolumesOfVm.get(0);
    }
 else {
      List<VolumeVO> diskVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
      for (      VolumeVO diskVolume : diskVolumesOfVm) {
        if (diskVolume.getState() != Volume.State.Allocated) {
          exstingVolumeOfVm=diskVolume;
          break;
        }
      }
    }
  }
  HypervisorType rootDiskHyperType=vm.getHypervisorType();
  HypervisorType volumeToAttachHyperType=_volsDao.getHypervisorType(volumeToAttach.getId());
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (volumeToAttachStoragePool != null && !volumeToAttachStoragePool.isManaged()) {
    if (volumeToAttachHyperType != HypervisorType.None && rootDiskHyperType != volumeToAttachHyperType) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeToAttachHyperType + ""String_Node_Str""+ rootDiskHyperType+ ""String_Node_Str"");
    }
  }
  VolumeInfo newVolumeOnPrimaryStorage=volumeToAttach;
  StoragePoolVO destPrimaryStorage=null;
  if (exstingVolumeOfVm != null && !exstingVolumeOfVm.getState().equals(Volume.State.Allocated)) {
    destPrimaryStorage=_storagePoolDao.findById(exstingVolumeOfVm.getPoolId());
  }
  if (destPrimaryStorage != null && (volumeToAttach.getState() == Volume.State.Allocated || volumeToAttach.getState() == Volume.State.Uploaded)) {
    try {
      newVolumeOnPrimaryStorage=_volumeMgr.createVolumeOnPrimaryStorage(vm,volumeToAttach,rootDiskHyperType,destPrimaryStorage);
    }
 catch (    NoTransitionException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  newVolumeOnPrimaryStorage=volFactory.getVolume(newVolumeOnPrimaryStorage.getId());
  boolean moveVolumeNeeded=needMoveVolume(exstingVolumeOfVm,newVolumeOnPrimaryStorage);
  if (moveVolumeNeeded) {
    PrimaryDataStoreInfo primaryStore=(PrimaryDataStoreInfo)newVolumeOnPrimaryStorage.getDataStore();
    if (primaryStore.isLocal()) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeToAttach.getName() + ""String_Node_Str""+ vm.getDisplayName()+ ""String_Node_Str"");
    }
    StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(exstingVolumeOfVm.getPoolId());
    try {
      newVolumeOnPrimaryStorage=_volumeMgr.moveVolume(newVolumeOnPrimaryStorage,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeToAttachHyperType);
    }
 catch (    ConcurrentOperationException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    StorageUnavailableException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  AsyncJobExecutionContext asyncExecutionContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (asyncExecutionContext != null) {
    AsyncJob job=asyncExecutionContext.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
    _jobMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
  }
  VolumeVO newVol=_volsDao.findById(newVolumeOnPrimaryStorage.getId());
  newVol=sendAttachVolumeCommand(vm,newVol,deviceId);
  return newVol;
}","@ActionEvent(eventType=EventTypes.EVENT_VOLUME_ATTACH,eventDescription=""String_Node_Str"",async=true) public Volume attachVolumeToVM(Long vmId,Long volumeId,Long deviceId){
  Account caller=CallContext.current().getCallingAccount();
  VolumeInfo volumeToAttach=volFactory.getVolume(volumeId);
  if (volumeToAttach == null || !(volumeToAttach.getVolumeType() == Volume.Type.DATADISK || volumeToAttach.getVolumeType() == Volume.Type.ROOT)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Volume.Type.ROOT.toString() + ""String_Node_Str""+ Volume.Type.DATADISK.toString());
  }
  if (volumeToAttach.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volumeToAttach.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_userVmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volumeToAttach.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      validateRootVolumeDetachAttach(_volsDao.findById(volumeToAttach.getId()),vm);
      if (!_volsDao.findByInstanceAndDeviceId(vm.getId(),0).isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (volumeToAttach.getState() == Volume.State.Uploaded) {
        throw new InvalidParameterValueException(""String_Node_Str"" + Volume.State.Uploaded);
      }
    }
  }
  if (deviceId == null || deviceId.longValue() != 0) {
    List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
    int maxDataVolumesSupported=getMaxDataVolumesSupported(vm);
    if (existingDataVolumes.size() >= maxDataVolumesSupported) {
      throw new InvalidParameterValueException(""String_Node_Str"" + maxDataVolumesSupported + ""String_Node_Str"");
    }
  }
  deviceId=getDeviceId(vmId,deviceId);
  DataCenterVO dataCenter=_dcDao.findById(volumeToAttach.getDataCenterId());
  if (!dataCenter.isLocalStorageEnabled()) {
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(volumeToAttach.getDiskOfferingId());
    if (diskOffering.getUseLocalStorage()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering.getName() + ""String_Node_Str"");
    }
  }
  List<VMSnapshotVO> vmSnapshots=_vmSnapshotDao.findByVm(vmId);
  if (vmSnapshots.size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,volumeToAttach,vm);
  if (!(Volume.State.Allocated.equals(volumeToAttach.getState()) || Volume.State.Ready.equals(volumeToAttach.getState()) || Volume.State.Uploaded.equals(volumeToAttach.getState()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VolumeVO exstingVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str"");
  }
 else {
    if (!rootVolumesOfVm.isEmpty()) {
      exstingVolumeOfVm=rootVolumesOfVm.get(0);
    }
 else {
      List<VolumeVO> diskVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
      for (      VolumeVO diskVolume : diskVolumesOfVm) {
        if (diskVolume.getState() != Volume.State.Allocated) {
          exstingVolumeOfVm=diskVolume;
          break;
        }
      }
    }
  }
  HypervisorType rootDiskHyperType=vm.getHypervisorType();
  HypervisorType volumeToAttachHyperType=_volsDao.getHypervisorType(volumeToAttach.getId());
  StoragePoolVO volumeToAttachStoragePool=_storagePoolDao.findById(volumeToAttach.getPoolId());
  if (volumeToAttachStoragePool != null && !volumeToAttachStoragePool.isManaged()) {
    if (volumeToAttachHyperType != HypervisorType.None && rootDiskHyperType != volumeToAttachHyperType) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeToAttachHyperType + ""String_Node_Str""+ rootDiskHyperType+ ""String_Node_Str"");
    }
  }
  VolumeInfo newVolumeOnPrimaryStorage=volumeToAttach;
  StoragePoolVO destPrimaryStorage=null;
  if (exstingVolumeOfVm != null && !exstingVolumeOfVm.getState().equals(Volume.State.Allocated)) {
    destPrimaryStorage=_storagePoolDao.findById(exstingVolumeOfVm.getPoolId());
  }
  if (destPrimaryStorage != null && (volumeToAttach.getState() == Volume.State.Allocated || volumeToAttach.getState() == Volume.State.Uploaded)) {
    try {
      newVolumeOnPrimaryStorage=_volumeMgr.createVolumeOnPrimaryStorage(vm,volumeToAttach,rootDiskHyperType,destPrimaryStorage);
    }
 catch (    NoTransitionException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  newVolumeOnPrimaryStorage=volFactory.getVolume(newVolumeOnPrimaryStorage.getId());
  boolean moveVolumeNeeded=needMoveVolume(exstingVolumeOfVm,newVolumeOnPrimaryStorage);
  if (moveVolumeNeeded) {
    PrimaryDataStoreInfo primaryStore=(PrimaryDataStoreInfo)newVolumeOnPrimaryStorage.getDataStore();
    if (primaryStore.isLocal()) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeToAttach.getName() + ""String_Node_Str""+ vm.getDisplayName()+ ""String_Node_Str"");
    }
    StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(exstingVolumeOfVm.getPoolId());
    try {
      newVolumeOnPrimaryStorage=_volumeMgr.moveVolume(newVolumeOnPrimaryStorage,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeToAttachHyperType);
    }
 catch (    ConcurrentOperationException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
catch (    StorageUnavailableException e) {
      s_logger.debug(""String_Node_Str"",e);
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
  AsyncJobExecutionContext asyncExecutionContext=AsyncJobExecutionContext.getCurrentExecutionContext();
  if (asyncExecutionContext != null) {
    AsyncJob job=asyncExecutionContext.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
    _jobMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
  }
  VolumeVO newVol=_volsDao.findById(newVolumeOnPrimaryStorage.getId());
  newVol=sendAttachVolumeCommand(vm,newVol,deviceId);
  return newVol;
}",0.9953720708146624
105805,"@Before public void setup() throws Exception {
  MockitoAnnotations.initMocks(this);
  _svc._volsDao=_volumeDao;
  _svc._accountMgr=_accountMgr;
  _svc._userVmDao=_userVmDao;
  _svc._storagePoolDao=_storagePoolDao;
  _svc._vmSnapshotDao=_vmSnapshotDao;
  _svc._vmInstanceDao=_vmInstanceDao;
  _svc._jobMgr=_jobMgr;
  _svc.volFactory=_volFactory;
  AccountVO account=new AccountVO(""String_Node_Str"",1L,""String_Node_Str"",Account.ACCOUNT_TYPE_NORMAL,""String_Node_Str"");
  UserVO user=new UserVO(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",UUID.randomUUID().toString());
  CallContext.register(user,account);
  AsyncJobExecutionContext context=new AsyncJobExecutionContext();
  AsyncJobExecutionContext.init(_svc._jobMgr,_joinMapDao);
  AsyncJobVO job=new AsyncJobVO();
  context.setJob(job);
  AsyncJobExecutionContext.setCurrentExecutionContext(context);
  TransactionLegacy txn=TransactionLegacy.open(""String_Node_Str"");
  try {
    VolumeVO volumeOfRunningVm=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,1L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    when(_svc._volsDao.findById(1L)).thenReturn(volumeOfRunningVm);
    UserVmVO runningVm=new UserVmVO(1L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.XenServer,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    runningVm.setState(State.Running);
    runningVm.setDataCenterId(1L);
    when(_svc._userVmDao.findById(1L)).thenReturn(runningVm);
    VolumeVO volumeOfStoppedVm=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    volumeOfStoppedVm.setPoolId(1L);
    when(_svc._volsDao.findById(2L)).thenReturn(volumeOfStoppedVm);
    UserVmVO stoppedVm=new UserVmVO(2L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.XenServer,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    stoppedVm.setState(State.Stopped);
    stoppedVm.setDataCenterId(1L);
    when(_svc._userVmDao.findById(2L)).thenReturn(stoppedVm);
    UserVmVO hyperVVm=new UserVmVO(3L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.Hyperv,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    hyperVVm.setState(State.Stopped);
    hyperVVm.setDataCenterId(1L);
    when(_svc._userVmDao.findById(3L)).thenReturn(hyperVVm);
    VolumeVO volumeOfStoppeHyperVVm=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,3L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    volumeOfStoppeHyperVVm.setPoolId(1L);
    when(_svc._volsDao.findById(3L)).thenReturn(volumeOfStoppeHyperVVm);
    StoragePoolVO unmanagedPool=new StoragePoolVO();
    when(_svc._storagePoolDao.findById(1L)).thenReturn(unmanagedPool);
    StoragePoolVO managedPool=new StoragePoolVO();
    managedPool.setManaged(true);
    when(_svc._storagePoolDao.findById(2L)).thenReturn(managedPool);
    VolumeVO managedPoolVolume=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    managedPoolVolume.setPoolId(2L);
    when(_svc._volsDao.findById(4L)).thenReturn(managedPoolVolume);
    VolumeInfo volumeWithIncorrectVolumeType=Mockito.mock(VolumeInfo.class);
    when(volumeWithIncorrectVolumeType.getId()).thenReturn(5L);
    when(volumeWithIncorrectVolumeType.getVolumeType()).thenReturn(Volume.Type.ISO);
    when(_svc.volFactory.getVolume(5L)).thenReturn(volumeWithIncorrectVolumeType);
    VolumeInfo correctRootVolume=Mockito.mock(VolumeInfo.class);
    when(correctRootVolume.getId()).thenReturn(6L);
    when(correctRootVolume.getDataCenterId()).thenReturn(1L);
    when(correctRootVolume.getVolumeType()).thenReturn(Volume.Type.ROOT);
    when(correctRootVolume.getInstanceId()).thenReturn(null);
    when(_svc.volFactory.getVolume(6L)).thenReturn(correctRootVolume);
    VolumeVO correctRootVolumeVO=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    when(_svc._volsDao.findById(6L)).thenReturn(correctRootVolumeVO);
    VolumeInfo managedVolume=Mockito.mock(VolumeInfo.class);
    when(managedVolume.getId()).thenReturn(7L);
    when(managedVolume.getDataCenterId()).thenReturn(1L);
    when(managedVolume.getVolumeType()).thenReturn(Volume.Type.ROOT);
    when(managedVolume.getInstanceId()).thenReturn(null);
    when(managedVolume.getPoolId()).thenReturn(2L);
    when(_svc.volFactory.getVolume(7L)).thenReturn(managedVolume);
    VolumeVO managedVolume1=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    managedVolume1.setPoolId(2L);
    managedVolume1.setDataCenterId(1L);
    when(_svc._volsDao.findById(7L)).thenReturn(managedVolume1);
    UserVmVO vmHavingRootVolume=new UserVmVO(4L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.XenServer,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    vmHavingRootVolume.setState(State.Stopped);
    vmHavingRootVolume.setDataCenterId(1L);
    when(_svc._userVmDao.findById(4L)).thenReturn(vmHavingRootVolume);
    List<VolumeVO> vols=new ArrayList<VolumeVO>();
    vols.add(new VolumeVO());
    when(_svc._volsDao.findByInstanceAndDeviceId(4L,0L)).thenReturn(vols);
    VolumeInfo uploadedVolume=Mockito.mock(VolumeInfo.class);
    when(uploadedVolume.getId()).thenReturn(8L);
    when(uploadedVolume.getDataCenterId()).thenReturn(1L);
    when(uploadedVolume.getVolumeType()).thenReturn(Volume.Type.ROOT);
    when(uploadedVolume.getInstanceId()).thenReturn(null);
    when(uploadedVolume.getPoolId()).thenReturn(1L);
    when(uploadedVolume.getState()).thenReturn(Volume.State.Uploaded);
    when(_svc.volFactory.getVolume(8L)).thenReturn(uploadedVolume);
    VolumeVO upVolume=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    upVolume.setPoolId(1L);
    upVolume.setDataCenterId(1L);
    upVolume.setState(Volume.State.Uploaded);
    when(_svc._volsDao.findById(8L)).thenReturn(upVolume);
    when(_svc._vmSnapshotDao.findByVm(any(Long.class))).thenReturn(new ArrayList<VMSnapshotVO>());
    when(_svc._vmInstanceDao.findById(any(Long.class))).thenReturn(stoppedVm);
  }
  finally {
    txn.close(""String_Node_Str"");
  }
  doNothing().when(_svc._accountMgr).checkAccess(any(Account.class),any(AccessType.class),any(Boolean.class),any(ControlledEntity.class));
  doNothing().when(_svc._jobMgr).updateAsyncJobAttachment(any(Long.class),any(String.class),any(Long.class));
  when(_svc._jobMgr.submitAsyncJob(any(AsyncJobVO.class),any(String.class),any(Long.class))).thenReturn(1L);
}","@Before public void setup() throws Exception {
  MockitoAnnotations.initMocks(this);
  _svc._volsDao=_volumeDao;
  _svc._accountMgr=_accountMgr;
  _svc._userVmDao=_userVmDao;
  _svc._storagePoolDao=_storagePoolDao;
  _svc._vmSnapshotDao=_vmSnapshotDao;
  _svc._vmInstanceDao=_vmInstanceDao;
  _svc._jobMgr=_jobMgr;
  _svc.volFactory=_volFactory;
  AccountVO account=new AccountVO(""String_Node_Str"",1L,""String_Node_Str"",Account.ACCOUNT_TYPE_NORMAL,""String_Node_Str"");
  UserVO user=new UserVO(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",UUID.randomUUID().toString());
  CallContext.register(user,account);
  AsyncJobExecutionContext context=new AsyncJobExecutionContext();
  AsyncJobExecutionContext.init(_svc._jobMgr,_joinMapDao);
  AsyncJobVO job=new AsyncJobVO();
  context.setJob(job);
  AsyncJobExecutionContext.setCurrentExecutionContext(context);
  TransactionLegacy txn=TransactionLegacy.open(""String_Node_Str"");
  try {
    VolumeVO volumeOfRunningVm=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,1L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    when(_svc._volsDao.findById(1L)).thenReturn(volumeOfRunningVm);
    UserVmVO runningVm=new UserVmVO(1L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.XenServer,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    runningVm.setState(State.Running);
    runningVm.setDataCenterId(1L);
    when(_svc._userVmDao.findById(1L)).thenReturn(runningVm);
    VolumeVO volumeOfStoppedVm=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    volumeOfStoppedVm.setPoolId(1L);
    when(_svc._volsDao.findById(2L)).thenReturn(volumeOfStoppedVm);
    UserVmVO stoppedVm=new UserVmVO(2L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.XenServer,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    stoppedVm.setState(State.Stopped);
    stoppedVm.setDataCenterId(1L);
    when(_svc._userVmDao.findById(2L)).thenReturn(stoppedVm);
    UserVmVO hyperVVm=new UserVmVO(3L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.Hyperv,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    hyperVVm.setState(State.Stopped);
    hyperVVm.setDataCenterId(1L);
    when(_svc._userVmDao.findById(3L)).thenReturn(hyperVVm);
    VolumeVO volumeOfStoppeHyperVVm=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,3L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    volumeOfStoppeHyperVVm.setPoolId(1L);
    when(_svc._volsDao.findById(3L)).thenReturn(volumeOfStoppeHyperVVm);
    StoragePoolVO unmanagedPool=new StoragePoolVO();
    when(_svc._storagePoolDao.findById(1L)).thenReturn(unmanagedPool);
    StoragePoolVO managedPool=new StoragePoolVO();
    managedPool.setManaged(true);
    when(_svc._storagePoolDao.findById(2L)).thenReturn(managedPool);
    VolumeVO managedPoolVolume=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    managedPoolVolume.setPoolId(2L);
    when(_svc._volsDao.findById(4L)).thenReturn(managedPoolVolume);
    VolumeInfo volumeWithIncorrectVolumeType=Mockito.mock(VolumeInfo.class);
    when(volumeWithIncorrectVolumeType.getId()).thenReturn(5L);
    when(volumeWithIncorrectVolumeType.getVolumeType()).thenReturn(Volume.Type.ISO);
    when(_svc.volFactory.getVolume(5L)).thenReturn(volumeWithIncorrectVolumeType);
    VolumeInfo correctRootVolume=Mockito.mock(VolumeInfo.class);
    when(correctRootVolume.getId()).thenReturn(6L);
    when(correctRootVolume.getDataCenterId()).thenReturn(1L);
    when(correctRootVolume.getVolumeType()).thenReturn(Volume.Type.ROOT);
    when(correctRootVolume.getInstanceId()).thenReturn(null);
    when(_svc.volFactory.getVolume(6L)).thenReturn(correctRootVolume);
    VolumeVO correctRootVolumeVO=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    when(_svc._volsDao.findById(6L)).thenReturn(correctRootVolumeVO);
    VolumeInfo managedVolume=Mockito.mock(VolumeInfo.class);
    when(managedVolume.getId()).thenReturn(7L);
    when(managedVolume.getDataCenterId()).thenReturn(1L);
    when(managedVolume.getVolumeType()).thenReturn(Volume.Type.ROOT);
    when(managedVolume.getInstanceId()).thenReturn(null);
    when(managedVolume.getPoolId()).thenReturn(2L);
    when(_svc.volFactory.getVolume(7L)).thenReturn(managedVolume);
    VolumeVO managedVolume1=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    managedVolume1.setPoolId(2L);
    managedVolume1.setDataCenterId(1L);
    when(_svc._volsDao.findById(7L)).thenReturn(managedVolume1);
    UserVmVO vmHavingRootVolume=new UserVmVO(4L,""String_Node_Str"",""String_Node_Str"",1,HypervisorType.XenServer,1L,false,false,1L,1L,1L,null,""String_Node_Str"",null);
    vmHavingRootVolume.setState(State.Stopped);
    vmHavingRootVolume.setDataCenterId(1L);
    when(_svc._userVmDao.findById(4L)).thenReturn(vmHavingRootVolume);
    List<VolumeVO> vols=new ArrayList<VolumeVO>();
    vols.add(new VolumeVO());
    when(_svc._volsDao.findByInstanceAndDeviceId(4L,0L)).thenReturn(vols);
    VolumeInfo uploadedVolume=Mockito.mock(VolumeInfo.class);
    when(uploadedVolume.getId()).thenReturn(8L);
    when(uploadedVolume.getDataCenterId()).thenReturn(1L);
    when(uploadedVolume.getVolumeType()).thenReturn(Volume.Type.ROOT);
    when(uploadedVolume.getInstanceId()).thenReturn(null);
    when(uploadedVolume.getPoolId()).thenReturn(1L);
    when(uploadedVolume.getState()).thenReturn(Volume.State.Uploaded);
    when(_svc.volFactory.getVolume(8L)).thenReturn(uploadedVolume);
    VolumeVO upVolume=new VolumeVO(""String_Node_Str"",1L,1L,1L,1L,2L,""String_Node_Str"",""String_Node_Str"",Storage.ProvisioningType.THIN,1,null,null,""String_Node_Str"",Volume.Type.ROOT);
    upVolume.setPoolId(1L);
    upVolume.setDataCenterId(1L);
    upVolume.setState(Volume.State.Uploaded);
    when(_svc._volsDao.findById(8L)).thenReturn(upVolume);
    when(_svc._vmSnapshotDao.findByVm(any(Long.class))).thenReturn(new ArrayList<VMSnapshotVO>());
    when(_svc._vmInstanceDao.findById(any(Long.class))).thenReturn(stoppedVm);
  }
  finally {
    txn.close(""String_Node_Str"");
  }
  doNothing().when(_svc._accountMgr).checkAccess(any(Account.class),any(AccessType.class),any(ControlledEntity.class));
  doNothing().when(_svc._jobMgr).updateAsyncJobAttachment(any(Long.class),any(String.class),any(Long.class));
  when(_svc._jobMgr.submitAsyncJob(any(AsyncJobVO.class),any(String.class),any(Long.class))).thenReturn(1L);
}",0.9986262743113296
105806,"private String extractSnapshotBaseFileName(String input){
  if (input == null) {
    return null;
  }
  String result=input;
  if (result.endsWith(""String_Node_Str"")) {
    result=result.substring(0,result.length() - (""String_Node_Str"").length());
  }
  if (result.split(""String_Node_Str"").length == 1) {
    return result;
  }
  if (result.split(""String_Node_Str"").length > 2) {
    return result.split(""String_Node_Str"")[0] + ""String_Node_Str"" + result.split(""String_Node_Str"")[1];
  }
  if (result.split(""String_Node_Str"").length == 2) {
    return result.split(""String_Node_Str"")[0];
  }
 else {
    return result;
  }
}","private String extractSnapshotBaseFileName(String input){
  if (input == null) {
    return null;
  }
  String result=input;
  final String fileType=""String_Node_Str"";
  if (result.endsWith(fileType)) {
    result=result.substring(0,result.length() - (fileType).length());
  }
  String[] str=result.split(""String_Node_Str"");
  int length=str.length;
  if (length == 1 || length == 2) {
    return result;
  }
  if (length > 2) {
    return str[0] + ""String_Node_Str"" + str[1];
  }
  return result;
}",0.4630454140694568
105807,"@Override public InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  s_logger.debug(""String_Node_Str"" + nic);
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  intf.setVirtualPortType(""String_Node_Str"");
  String vlanId=null;
  String logicalSwitchUuid=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {
    vlanId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    logicalSwitchUuid=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {
    vlanId=NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else     if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {
      s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ logicalSwitchUuid);
      intf.setVirtualPortInterfaceId(nic.getUuid());
      String brName=(trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(""String_Node_Str"");
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork(_bridges.get(""String_Node_Str""));
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  return intf;
}","@Override public InterfaceDef plug(NicTO nic,String guestOsType,String nicAdapter) throws InternalErrorException, LibvirtException {
  s_logger.debug(""String_Node_Str"" + nic);
  LibvirtVMDef.InterfaceDef intf=new LibvirtVMDef.InterfaceDef();
  intf.setVirtualPortType(""String_Node_Str"");
  String vlanId=null;
  String logicalSwitchUuid=null;
  if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {
    vlanId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {
    logicalSwitchUuid=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
  }
 else   if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {
    vlanId=NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());
  }
  String trafficLabel=nic.getName();
  if (nic.getType() == Networks.TrafficType.Guest) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else     if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {
      s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ logicalSwitchUuid);
      intf.setVirtualPortInterfaceId(nic.getUuid());
      String brName=(trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(""String_Node_Str"");
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
 else     if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {
      String vnetId=Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());
      String brName=""String_Node_Str"" + vnetId;
      s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ brName);
      intf.defBridgeNet(brName,null,nic.getMac(),getGuestNicModel(guestOsType),networkRateKBps);
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Control) {
    createControlNetwork(_bridges.get(""String_Node_Str""));
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Public) {
    Integer networkRateKBps=(nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;
    if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(""String_Node_Str"")) {
      if (trafficLabel != null && !trafficLabel.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + trafficLabel);
        intf.defBridgeNet(_pifs.get(trafficLabel),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
 else {
        intf.defBridgeNet(_pifs.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
        intf.setVlanTag(Integer.parseInt(vlanId));
      }
    }
 else {
      intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter),networkRateKBps);
    }
  }
 else   if (nic.getType() == Networks.TrafficType.Management) {
    intf.defBridgeNet(_bridges.get(""String_Node_Str""),null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
 else   if (nic.getType() == Networks.TrafficType.Storage) {
    String storageBrName=nic.getName() == null ? _bridges.get(""String_Node_Str"") : nic.getName();
    intf.defBridgeNet(storageBrName,null,nic.getMac(),getGuestNicModel(guestOsType,nicAdapter));
  }
  return intf;
}",0.9550301344459898
105808,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  Long accountId=null;
  if (id == null) {
    if (domainId != null) {
      Domain domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
      }
      checkAccess(caller,domain);
    }
    if (accountName != null) {
      if (projectId != null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      Account userAccount=null;
      Domain domain=null;
      if (domainId != null) {
        userAccount=_accountDao.findActiveAccount(accountName,domainId);
        domain=_domainDao.findById(domainId);
      }
 else {
        userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
        domain=_domainDao.findById(caller.getDomainId());
      }
      if (userAccount != null) {
        checkAccess(caller,null,userAccount);
        accountId=userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
      }
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    AccessType accessType=AccessType.UseEntry;
    if (listAll || id != null) {
      accessType=AccessType.ListEntry;
    }
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    if (_querySelectors == null || _querySelectors.size() == 0)     return;
    QuerySelector qs=_querySelectors.get(0);
    boolean grantedAll=qs.isGrantedAll(caller,action,accessType);
    if (grantedAll) {
      if (accountId != null) {
        permittedAccounts.add(accountId);
        domainIdRecursiveListProject.second(false);
      }
 else       if (domainId != null) {
        permittedDomains.add(domainId);
      }
 else {
        domainIdRecursiveListProject.second(false);
      }
    }
 else {
      List<Long> grantedDomains=qs.getAuthorizedDomains(caller,action,accessType);
      List<Long> grantedAccounts=qs.getAuthorizedAccounts(caller,action,accessType);
      List<Long> grantedResources=qs.getAuthorizedResources(caller,action,accessType);
      if (accountId != null) {
        if (grantedAccounts.contains(accountId)) {
          permittedAccounts.add(accountId);
        }
 else {
          permittedResources.addAll(grantedResources);
        }
        domainIdRecursiveListProject.second(false);
      }
 else       if (domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
        domainIdRecursiveListProject.second(false);
      }
      if (permittedDomains.isEmpty() && permittedAccounts.isEmpty() & permittedResources.isEmpty()) {
        permittedAccounts.add(-1L);
      }
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  Long accountId=null;
  if (id == null) {
    if (domainId != null) {
      Domain domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
      }
      checkAccess(caller,domain);
    }
    if (accountName != null) {
      if (projectId != null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      Account userAccount=null;
      Domain domain=null;
      if (domainId != null) {
        userAccount=_accountDao.findActiveAccount(accountName,domainId);
        domain=_domainDao.findById(domainId);
      }
 else {
        userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
        domain=_domainDao.findById(caller.getDomainId());
      }
      if (userAccount != null) {
        checkAccess(caller,null,userAccount);
        accountId=userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
      }
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    AccessType accessType=AccessType.UseEntry;
    if (listAll || id != null) {
      accessType=AccessType.ListEntry;
    }
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    if (_querySelectors == null || _querySelectors.size() == 0)     return;
    QuerySelector qs=_querySelectors.get(0);
    boolean grantedAll=qs.isGrantedAll(caller,action,accessType);
    if (grantedAll) {
      if (accountId != null) {
        permittedAccounts.add(accountId);
        domainIdRecursiveListProject.second(false);
      }
 else       if (domainId != null) {
        permittedDomains.add(domainId);
      }
 else {
        domainIdRecursiveListProject.second(false);
      }
    }
 else {
      List<Long> grantedDomains=qs.getAuthorizedDomains(caller,action,accessType);
      List<Long> grantedAccounts=qs.getAuthorizedAccounts(caller,action,accessType);
      List<Long> grantedResources=qs.getAuthorizedResources(caller,action,accessType);
      if (accountId != null) {
        if (grantedAccounts.contains(accountId)) {
          permittedAccounts.add(accountId);
        }
 else {
          permittedResources.addAll(grantedResources);
        }
        domainIdRecursiveListProject.second(false);
      }
 else       if (domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
        domainIdRecursiveListProject.second(false);
      }
      if (permittedDomains.isEmpty() && permittedAccounts.isEmpty() && permittedResources.isEmpty()) {
        permittedAccounts.add(-1L);
      }
    }
  }
}",0.999886916204908
105809,"@Override public Answer deleteVmSnapshot(DeleteVMSnapshotCommand cmd){
  String vm=cmd.getVmName();
  String snapshotName=cmd.getTarget().getSnapshotName();
  if (_mockVmDao.findByVmName(cmd.getVmName()) != null) {
    return new DeleteVMSnapshotAnswer(cmd,false,""String_Node_Str"" + cmd.getVmName());
  }
  s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ vm);
  return new DeleteVMSnapshotAnswer(cmd,true,""String_Node_Str"");
}","@Override public Answer deleteVmSnapshot(DeleteVMSnapshotCommand cmd){
  String vm=cmd.getVmName();
  String snapshotName=cmd.getTarget().getSnapshotName();
  if (_mockVmDao.findByVmName(cmd.getVmName()) == null) {
    return new DeleteVMSnapshotAnswer(cmd,false,""String_Node_Str"" + cmd.getVmName());
  }
  s_logger.debug(""String_Node_Str"" + snapshotName + ""String_Node_Str""+ vm);
  return new DeleteVMSnapshotAnswer(cmd,cmd.getVolumeTOs());
}",0.952808988764045
105810,"@Override public Answer revertVmSnapshot(RevertToVMSnapshotCommand cmd){
  String vm=cmd.getVmName();
  String snapshot=cmd.getTarget().getSnapshotName();
  if (_mockVmDao.findByVmName(cmd.getVmName()) != null) {
    return new RevertToVMSnapshotAnswer(cmd,false,""String_Node_Str"" + cmd.getVmName());
  }
  s_logger.debug(""String_Node_Str"" + snapshot + ""String_Node_Str""+ vm);
  return new RevertToVMSnapshotAnswer(cmd,true,""String_Node_Str"");
}","@Override public Answer revertVmSnapshot(RevertToVMSnapshotCommand cmd){
  String vm=cmd.getVmName();
  String snapshot=cmd.getTarget().getSnapshotName();
  MockVMVO vmVo=_mockVmDao.findByVmName(cmd.getVmName());
  if (vmVo == null) {
    return new RevertToVMSnapshotAnswer(cmd,false,""String_Node_Str"" + cmd.getVmName());
  }
  s_logger.debug(""String_Node_Str"" + snapshot + ""String_Node_Str""+ vm);
  return new RevertToVMSnapshotAnswer(cmd,cmd.getVolumeTOs(),vmVo.getState());
}",0.9047619047619048
105811,"public ServiceOfferingVO(ServiceOfferingVO offering){
  super(offering.getId(),offering.getName(),offering.getDisplayText(),false,offering.getTags(),offering.isRecreatable(),offering.getUseLocalStorage(),offering.getSystemUse(),true,offering.getDomainId());
  cpu=offering.getCpu();
  ramSize=offering.getRamSize();
  speed=offering.getSpeed();
  rateMbps=offering.getRateMbps();
  multicastRateMbps=offering.getMulticastRateMbps();
  offerHA=offering.getOfferHA();
  limitCpuUse=offering.getLimitCpuUse();
  volatileVm=offering.getVolatileVm();
  hostTag=offering.getHostTag();
  vmType=offering.getSystemVmType();
}","public ServiceOfferingVO(ServiceOfferingVO offering){
  super(offering.getId(),offering.getName(),offering.getDisplayText(),false,offering.getTags(),offering.isRecreatable(),offering.getUseLocalStorage(),offering.getSystemUse(),true,offering.isCustomizedIops(),offering.getDomainId());
  cpu=offering.getCpu();
  ramSize=offering.getRamSize();
  speed=offering.getSpeed();
  rateMbps=offering.getRateMbps();
  multicastRateMbps=offering.getMulticastRateMbps();
  offerHA=offering.getOfferHA();
  limitCpuUse=offering.getLimitCpuUse();
  volatileVm=offering.getVolatileVm();
  hostTag=offering.getHostTag();
  vmType=offering.getSystemVmType();
}",0.9778129952456418
105812,"public DiskOfferingVO(long id,String name,String displayText,boolean mirrored,String tags,boolean recreatable,boolean useLocalStorage,boolean systemUse,boolean customized,Long domainId){
  this.id=id;
  type=Type.Service;
  this.name=name;
  this.displayText=displayText;
  this.tags=tags;
  this.recreatable=recreatable;
  this.useLocalStorage=useLocalStorage;
  this.systemUse=systemUse;
  this.customized=customized;
  this.domainId=domainId;
  uuid=UUID.randomUUID().toString();
  state=State.Active;
}","public DiskOfferingVO(long id,String name,String displayText,boolean mirrored,String tags,boolean recreatable,boolean useLocalStorage,boolean systemUse,boolean customized,boolean customizedIops,Long domainId){
  this.id=id;
  type=Type.Service;
  this.name=name;
  this.displayText=displayText;
  this.tags=tags;
  this.recreatable=recreatable;
  this.useLocalStorage=useLocalStorage;
  this.systemUse=systemUse;
  this.customized=customized;
  this.customizedIops=customizedIops;
  this.domainId=domainId;
  uuid=UUID.randomUUID().toString();
  state=State.Active;
}",0.9431500465983224
105813,"ExecutionResult executeInVR(String routerIp,String script,String args);","ExecutionResult executeInVR(String routerIp,String script,String args,int timeout);",0.922077922077922
105814,"@Override public ExecutionResult executeInVR(String routerIp,String script,String args){
  assertEquals(routerIp,ROUTERIP);
  verifyCommand(_currentCmd,script,args);
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult executeInVR(String routerIp,String script,String args,int timeout){
  assertEquals(routerIp,ROUTERIP);
  verifyCommand(_currentCmd,script,args);
  return new ExecutionResult(true,null);
}",0.97196261682243
105815,"@Override public ExecutionResult executeInVR(String routerIP,String script,String args){
  Pair<Boolean,String> result;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + routerIP + ""String_Node_Str""+ script+ ""String_Node_Str""+ args);
  }
  try {
    result=SshHelper.sshExecute(routerIP,DEFAULT_DOMR_SSHPORT,""String_Node_Str"",getSystemVMKeyFile(),null,""String_Node_Str"" + script + ""String_Node_Str""+ args);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e;
    s_logger.error(msg);
    result=new Pair<Boolean,String>(false,msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(script + ""String_Node_Str"" + result.first().toString());
  }
  return new ExecutionResult(result.first(),result.second());
}","@Override public ExecutionResult executeInVR(String routerIP,String script,String args,int timeout){
  Pair<Boolean,String> result;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + routerIP + ""String_Node_Str""+ script+ ""String_Node_Str""+ args);
  }
  try {
    result=SshHelper.sshExecute(routerIP,DEFAULT_DOMR_SSHPORT,""String_Node_Str"",getSystemVMKeyFile(),null,""String_Node_Str"" + script + ""String_Node_Str""+ args,60000,60000,timeout * 1000);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e;
    s_logger.error(msg);
    result=new Pair<Boolean,String>(false,msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(script + ""String_Node_Str"" + result.first().toString());
  }
  return new ExecutionResult(result.first(),result.second());
}",0.974757281553398
105816,"@Override public ExecutionResult executeInVR(String routerIp,String script,String args){
  final Script command=new Script(_routerProxyPath,_timeout,s_logger);
  final AllLinesParser parser=new AllLinesParser();
  command.add(script);
  command.add(routerIp);
  if (args != null) {
    command.add(args);
  }
  String details=command.execute(parser);
  if (details == null) {
    details=parser.getLines();
  }
  return new ExecutionResult(command.getExitValue() == 0,details);
}","@Override public ExecutionResult executeInVR(String routerIp,String script,String args,int timeout){
  final Script command=new Script(_routerProxyPath,timeout,s_logger);
  final AllLinesParser parser=new AllLinesParser();
  command.add(script);
  command.add(routerIp);
  if (args != null) {
    command.add(args);
  }
  String details=command.execute(parser);
  if (details == null) {
    details=parser.getLines();
  }
  return new ExecutionResult(command.getExitValue() == 0,details);
}",0.9680082559339526
105817,"@Override public ExecutionResult executeInVR(String routerIP,String script,String args){
  Pair<Boolean,String> result;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + routerIP + ""String_Node_Str""+ script+ ""String_Node_Str""+ args);
  }
  try {
    VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    result=SshHelper.sshExecute(routerIP,DefaultDomRSshPort,""String_Node_Str"",mgr.getSystemVMKeyFile(),null,""String_Node_Str"" + script + ""String_Node_Str""+ args);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg);
    result=new Pair<Boolean,String>(false,msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(script + ""String_Node_Str"" + result.first().toString());
  }
  return new ExecutionResult(result.first(),result.second());
}","@Override public ExecutionResult executeInVR(String routerIP,String script,String args,int timeout){
  Pair<Boolean,String> result;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + routerIP + ""String_Node_Str""+ script+ ""String_Node_Str""+ args);
  }
  try {
    VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    result=SshHelper.sshExecute(routerIP,DefaultDomRSshPort,""String_Node_Str"",mgr.getSystemVMKeyFile(),null,""String_Node_Str"" + script + ""String_Node_Str""+ args,60000,60000,timeout * 1000);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + VmwareHelper.getExceptionMessage(e);
    s_logger.error(msg);
    result=new Pair<Boolean,String>(false,msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(script + ""String_Node_Str"" + result.first().toString());
  }
  return new ExecutionResult(result.first(),result.second());
}",0.9783453636868408
105818,"@Override public ExecutionResult executeInVR(String routerIP,String script,String args){
  Connection conn=getConnection();
  String rc=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",script + ""String_Node_Str"" + routerIP+ ""String_Node_Str""+ args);
  return new ExecutionResult(rc.startsWith(""String_Node_Str""),rc.substring(5));
}","@Override public ExecutionResult executeInVR(String routerIP,String script,String args){
  return executeInVR(routerIP,script,args,120);
}",0.4736842105263157
105819,"@Override public Boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host){
  Status status=isAgentAlive(host);
  if (status == null) {
    return null;
  }
  return status == Status.Up ? true : null;
}","@Override public Boolean isVmAlive(com.cloud.vm.VirtualMachine vm,Host host){
  Status status=isAgentAlive(host);
  if (status == null) {
    return false;
  }
  return status == Status.Up ? true : false;
}",0.9560975609756096
105820,"@Override public final Map<? extends ServerResource,Map<String,String>> find(final long dcId,final Long podId,final Long clusterId,final URI uri,final String username,final String password,final List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ uri.getHost());
  }
  if (podId == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + ""String_Node_Str"");
    }
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + clusterId);
    }
    return null;
  }
  if (cluster.getHypervisorType() != HypervisorType.Hyperv) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + clusterId + ""String_Node_Str"");
    }
    return null;
  }
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    String agentIp=ia.getHostAddress();
    String uuidSeed=agentIp;
    String guidWithTail=calcServerResourceGuid(uuidSeed) + ""String_Node_Str"";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug(""String_Node_Str"" + agentIp + ""String_Node_Str""+ guidWithTail+ ""String_Node_Str"");
      return null;
    }
    s_logger.info(""String_Node_Str"" + HypervDirectConnectResource.class.getName() + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
      _clusterDao.update(clusterId,cluster);
    }
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guidWithTail);
    params.put(""String_Node_Str"",agentIp);
    Map<String,String> details=new HashMap<String,String>();
    details.put(""String_Node_Str"",uri.getHost());
    details.put(""String_Node_Str"",username);
    details.put(""String_Node_Str"",password);
    details.put(""String_Node_Str"",cluster.getGuid());
    params.putAll(details);
    HypervDirectConnectResource resource=new HypervDirectConnectResource();
    resource.configure(agentIp,params);
    ReadyCommand ping=new ReadyCommand();
    Answer pingAns=resource.executeRequest(ping);
    if (pingAns == null || !pingAns.getResult()) {
      String errMsg=""String_Node_Str"" + uri;
      s_logger.debug(errMsg);
      throw new DiscoveryException(errMsg);
    }
    Map<HypervDirectConnectResource,Map<String,String>> resources=new HashMap<HypervDirectConnectResource,Map<String,String>>();
    resources.put(resource,details);
    return resources;
  }
 catch (  ConfigurationException e) {
    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + uri.getHost(),""String_Node_Str"" + e.getMessage());
    s_logger.warn(""String_Node_Str"" + uri.getHost(),e);
  }
catch (  UnknownHostException e) {
    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + uri.getHost(),""String_Node_Str"" + e.getMessage());
    s_logger.warn(""String_Node_Str"" + uri.getHost(),e);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
  return null;
}","@Override public final Map<? extends ServerResource,Map<String,String>> find(final long dcId,final Long podId,final Long clusterId,final URI uri,final String username,final String password,final List<String> hostTags) throws DiscoveryException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + dcId + ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ uri.getHost());
  }
  if (podId == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + ""String_Node_Str"");
    }
    return null;
  }
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + clusterId);
    }
    return null;
  }
  if (cluster.getHypervisorType() != HypervisorType.Hyperv) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + clusterId + ""String_Node_Str"");
    }
    return null;
  }
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + ""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    String agentIp=ia.getHostAddress();
    String uuidSeed=agentIp;
    String guidWithTail=calcServerResourceGuid(uuidSeed) + ""String_Node_Str"";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug(""String_Node_Str"" + agentIp + ""String_Node_Str""+ guidWithTail+ ""String_Node_Str"");
      return null;
    }
    s_logger.info(""String_Node_Str"" + HypervDirectConnectResource.class.getName() + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes(Charset.forName(""String_Node_Str""))).toString());
      _clusterDao.update(clusterId,cluster);
    }
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guidWithTail);
    params.put(""String_Node_Str"",agentIp);
    Map<String,String> details=new HashMap<String,String>();
    details.put(""String_Node_Str"",uri.getHost());
    details.put(""String_Node_Str"",username);
    details.put(""String_Node_Str"",password);
    details.put(""String_Node_Str"",cluster.getGuid());
    params.putAll(details);
    HypervDirectConnectResource resource=new HypervDirectConnectResource();
    resource.configure(agentIp,params);
    ReadyCommand ping=new ReadyCommand();
    Answer pingAns=resource.executeRequest(ping);
    if (pingAns == null || !pingAns.getResult()) {
      String errMsg=""String_Node_Str"" + uri;
      s_logger.debug(errMsg);
      throw new DiscoveryException(errMsg);
    }
    Map<HypervDirectConnectResource,Map<String,String>> resources=new HashMap<HypervDirectConnectResource,Map<String,String>>();
    resources.put(resource,details);
    return resources;
  }
 catch (  ConfigurationException e) {
    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + uri.getHost(),""String_Node_Str"" + e.getMessage());
    s_logger.warn(""String_Node_Str"" + uri.getHost(),e);
  }
catch (  UnknownHostException e) {
    _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,dcId,podId,""String_Node_Str"" + uri.getHost(),""String_Node_Str"" + e.getMessage());
    s_logger.warn(""String_Node_Str"" + uri.getHost(),e);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
  return null;
}",0.9954423592493298
105821,"/** 
 * Encapsulate GUID calculation in public method to allow access to test programs. Works by converting a string to a GUID using UUID.nameUUIDFromBytes
 * @param uuidSeed string to use to generate GUID
 * @return GUID in form of a string.
 */
public static String calcServerResourceGuid(final String uuidSeed){
  String guid=UUID.nameUUIDFromBytes(uuidSeed.getBytes()).toString();
  return guid;
}","/** 
 * Encapsulate GUID calculation in public method to allow access to test programs. Works by converting a string to a GUID using UUID.nameUUIDFromBytes
 * @param uuidSeed string to use to generate GUID
 * @return GUID in form of a string.
 */
public static String calcServerResourceGuid(final String uuidSeed){
  String guid=UUID.nameUUIDFromBytes(uuidSeed.getBytes(Charset.forName(""String_Node_Str""))).toString();
  return guid;
}",0.9593301435406698
105822,"@Override public ExecutionResult createFileInVR(String routerIp,String filePath,String fileName,String content){
  File keyFile=getSystemVMKeyFile();
  try {
    SshHelper.scpTo(routerIp,3922,""String_Node_Str"",keyFile,null,filePath,content.getBytes(),fileName,null);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + filePath + fileName+ ""String_Node_Str""+ routerIp,e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult createFileInVR(String routerIp,String filePath,String fileName,String content){
  File keyFile=getSystemVMKeyFile();
  try {
    SshHelper.scpTo(routerIp,3922,""String_Node_Str"",keyFile,null,filePath,content.getBytes(Charset.forName(""String_Node_Str"")),fileName,null);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + filePath + fileName+ ""String_Node_Str""+ routerIp,e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}",0.9662698412698412
105823,"@Test public void testClusterAllocatorWithWrongTag(){
  try {
    createDb();
    StoragePoolDetailVO detailVO=new StoragePoolDetailVO(this.storagePoolId,""String_Node_Str"",""String_Node_Str"",display);
    poolDetailsDao.persist(detailVO);
    DiskOfferingVO diskOff=this.diskOfferingDao.findById(diskOffering.getId());
    List<String> tags=new ArrayList<String>();
    tags.add(""String_Node_Str"");
    diskOff.setTagsArray(tags);
    diskOfferingDao.update(diskOff.getId(),diskOff);
    DiskProfile profile=new DiskProfile(volume,diskOff,HypervisorType.XenServer);
    VirtualMachineProfile vmProfile=Mockito.mock(VirtualMachineProfile.class);
    Mockito.when(storageMgr.storagePoolHasEnoughSpace(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    DeploymentPlan plan=new DataCenterDeployment(dcId,podId,clusterId,null,null,null);
    int foundAcct=0;
    for (    StoragePoolAllocator allocator : allocators) {
      List<StoragePool> pools=allocator.allocateToPool(profile,vmProfile,plan,new ExcludeList(),1);
      if (!pools.isEmpty()) {
        foundAcct++;
      }
    }
    if (foundAcct != 0) {
      Assert.fail();
    }
  }
 catch (  Exception e) {
    cleanDb();
    Assert.fail();
  }
}","@Test public void testClusterAllocatorWithWrongTag(){
  try {
    createDb();
    StoragePoolDetailVO detailVO=new StoragePoolDetailVO(this.storagePoolId,""String_Node_Str"",""String_Node_Str"",true);
    poolDetailsDao.persist(detailVO);
    DiskOfferingVO diskOff=this.diskOfferingDao.findById(diskOffering.getId());
    List<String> tags=new ArrayList<String>();
    tags.add(""String_Node_Str"");
    diskOff.setTagsArray(tags);
    diskOfferingDao.update(diskOff.getId(),diskOff);
    DiskProfile profile=new DiskProfile(volume,diskOff,HypervisorType.XenServer);
    VirtualMachineProfile vmProfile=Mockito.mock(VirtualMachineProfile.class);
    Mockito.when(storageMgr.storagePoolHasEnoughSpace(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    DeploymentPlan plan=new DataCenterDeployment(dcId,podId,clusterId,null,null,null);
    int foundAcct=0;
    for (    StoragePoolAllocator allocator : allocators) {
      List<StoragePool> pools=allocator.allocateToPool(profile,vmProfile,plan,new ExcludeList(),1);
      if (!pools.isEmpty()) {
        foundAcct++;
      }
    }
    if (foundAcct != 0) {
      Assert.fail();
    }
  }
 catch (  Exception e) {
    cleanDb();
    Assert.fail();
  }
}",0.9955483609874544
105824,"@Test public void testClusterAllocatorWithTags(){
  try {
    createDb();
    StoragePoolDetailVO detailVO=new StoragePoolDetailVO(this.storagePoolId,""String_Node_Str"",""String_Node_Str"",display);
    poolDetailsDao.persist(detailVO);
    DiskOfferingVO diskOff=this.diskOfferingDao.findById(diskOffering.getId());
    List<String> tags=new ArrayList<String>();
    tags.add(""String_Node_Str"");
    diskOff.setTagsArray(tags);
    diskOfferingDao.update(diskOff.getId(),diskOff);
    DiskProfile profile=new DiskProfile(volume,diskOff,HypervisorType.XenServer);
    VirtualMachineProfile vmProfile=Mockito.mock(VirtualMachineProfile.class);
    Mockito.when(storageMgr.storagePoolHasEnoughSpace(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    DeploymentPlan plan=new DataCenterDeployment(dcId,podId,clusterId,null,null,null);
    int foundAcct=0;
    for (    StoragePoolAllocator allocator : allocators) {
      List<StoragePool> pools=allocator.allocateToPool(profile,vmProfile,plan,new ExcludeList(),1);
      if (!pools.isEmpty()) {
        Assert.assertEquals(pools.get(0).getId(),storage.getId());
        foundAcct++;
      }
    }
    if (foundAcct > 1 || foundAcct == 0) {
      Assert.fail();
    }
  }
 catch (  Exception e) {
    cleanDb();
    Assert.fail();
  }
}","@Test public void testClusterAllocatorWithTags(){
  try {
    createDb();
    StoragePoolDetailVO detailVO=new StoragePoolDetailVO(this.storagePoolId,""String_Node_Str"",""String_Node_Str"",true);
    poolDetailsDao.persist(detailVO);
    DiskOfferingVO diskOff=this.diskOfferingDao.findById(diskOffering.getId());
    List<String> tags=new ArrayList<String>();
    tags.add(""String_Node_Str"");
    diskOff.setTagsArray(tags);
    diskOfferingDao.update(diskOff.getId(),diskOff);
    DiskProfile profile=new DiskProfile(volume,diskOff,HypervisorType.XenServer);
    VirtualMachineProfile vmProfile=Mockito.mock(VirtualMachineProfile.class);
    Mockito.when(storageMgr.storagePoolHasEnoughSpace(Matchers.anyListOf(Volume.class),Matchers.any(StoragePool.class))).thenReturn(true);
    DeploymentPlan plan=new DataCenterDeployment(dcId,podId,clusterId,null,null,null);
    int foundAcct=0;
    for (    StoragePoolAllocator allocator : allocators) {
      List<StoragePool> pools=allocator.allocateToPool(profile,vmProfile,plan,new ExcludeList(),1);
      if (!pools.isEmpty()) {
        Assert.assertEquals(pools.get(0).getId(),storage.getId());
        foundAcct++;
      }
    }
    if (foundAcct > 1 || foundAcct == 0) {
      Assert.fail();
    }
  }
 catch (  Exception e) {
    cleanDb();
    Assert.fail();
  }
}",0.9958190801976436
105825,"@Override public void checkAndRemoveHostFromTunnelNetwork(Network nw,Host host){
  if (nw.getVpcId() != null && isVpcEnabledForDistributedRouter(nw.getVpcId())) {
    List<Long> vmIds=_ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(nw.getVpcId(),host.getId());
    if (vmIds != null && !vmIds.isEmpty()) {
      return;
    }
    List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(nw.getVpcId());
    try {
      for (      Network network : vpcNetworks) {
        int key=getGreKey(nw);
        String bridgeName=generateBridgeName(nw,key);
        List<OvsTunnelNetworkVO> peers=_tunnelNetworkDao.listByToNetwork(host.getId(),nw.getId());
        for (        OvsTunnelNetworkVO p : peers) {
          if (p.getState().equals(OvsTunnel.State.Established.name())) {
            Command cmd=new OvsDestroyTunnelCommand(p.getNetworkId(),bridgeName,p.getPortName());
            s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ p.getFrom());
            Answer ans=_agentMgr.send(p.getFrom(),cmd);
            handleDestroyTunnelAnswer(ans,p.getFrom(),p.getTo(),p.getNetworkId());
          }
        }
      }
      Command cmd=new OvsDestroyBridgeCommand(nw.getId(),generateBridgeNameForVpc(nw.getVpcId()));
      s_logger.debug(""String_Node_Str"" + nw.getId() + ""String_Node_Str""+ host.getId());
      Answer ans=_agentMgr.send(host.getId(),cmd);
      handleDestroyBridgeAnswer(ans,host.getId(),nw.getId());
    }
 catch (    Exception e) {
    }
  }
 else {
    List<Long> vmIds=_ovsNetworkToplogyGuru.getActiveVmsInNetworkOnHost(nw.getId(),host.getId());
    if (vmIds != null && !vmIds.isEmpty()) {
      return;
    }
    try {
      int key=getGreKey(nw);
      String bridgeName=generateBridgeName(nw,key);
      Command cmd=new OvsDestroyBridgeCommand(nw.getId(),bridgeName);
      s_logger.debug(""String_Node_Str"" + nw.getId() + ""String_Node_Str""+ host.getId());
      Answer ans=_agentMgr.send(host.getId(),cmd);
      handleDestroyBridgeAnswer(ans,host.getId(),nw.getId());
      List<OvsTunnelNetworkVO> peers=_tunnelNetworkDao.listByToNetwork(host.getId(),nw.getId());
      for (      OvsTunnelNetworkVO p : peers) {
        if (p.getState().equals(OvsTunnel.State.Established.name())) {
          cmd=new OvsDestroyTunnelCommand(p.getNetworkId(),bridgeName,p.getPortName());
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ p.getFrom());
          ans=_agentMgr.send(p.getFrom(),cmd);
          handleDestroyTunnelAnswer(ans,p.getFrom(),p.getTo(),p.getNetworkId());
        }
      }
    }
 catch (    Exception e) {
      s_logger.warn(String.format(""String_Node_Str"",e));
    }
  }
}","@Override public void checkAndRemoveHostFromTunnelNetwork(Network nw,Host host){
  if (nw.getVpcId() != null && isVpcEnabledForDistributedRouter(nw.getVpcId())) {
    List<Long> vmIds=_ovsNetworkToplogyGuru.getActiveVmsInVpcOnHost(nw.getVpcId(),host.getId());
    if (vmIds != null && !vmIds.isEmpty()) {
      return;
    }
    List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(nw.getVpcId());
    try {
      for (      Network network : vpcNetworks) {
        int key=getGreKey(nw);
        String bridgeName=generateBridgeName(nw,key);
        List<OvsTunnelNetworkVO> peers=_tunnelNetworkDao.listByToNetwork(host.getId(),nw.getId());
        for (        OvsTunnelNetworkVO p : peers) {
          if (p.getState().equals(OvsTunnel.State.Established.name())) {
            Command cmd=new OvsDestroyTunnelCommand(p.getNetworkId(),bridgeName,p.getPortName());
            s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ p.getFrom());
            Answer ans=_agentMgr.send(p.getFrom(),cmd);
            handleDestroyTunnelAnswer(ans,p.getFrom(),p.getTo(),p.getNetworkId());
          }
        }
      }
      Command cmd=new OvsDestroyBridgeCommand(nw.getId(),generateBridgeNameForVpc(nw.getVpcId()));
      s_logger.debug(""String_Node_Str"" + nw.getId() + ""String_Node_Str""+ host.getId());
      Answer ans=_agentMgr.send(host.getId(),cmd);
      handleDestroyBridgeAnswer(ans,host.getId(),nw.getId());
    }
 catch (    Exception e) {
    }
  }
 else {
    List<Long> vmIds=_ovsNetworkToplogyGuru.getActiveVmsInNetworkOnHost(nw.getId(),host.getId());
    if (vmIds != null && !vmIds.isEmpty()) {
      return;
    }
    try {
      int key=getGreKey(nw);
      String bridgeName=generateBridgeName(nw,key);
      Command cmd=new OvsDestroyBridgeCommand(nw.getId(),bridgeName);
      s_logger.debug(""String_Node_Str"" + nw.getId() + ""String_Node_Str""+ host.getId());
      Answer ans=_agentMgr.send(host.getId(),cmd);
      handleDestroyBridgeAnswer(ans,host.getId(),nw.getId());
      List<OvsTunnelNetworkVO> peers=_tunnelNetworkDao.listByToNetwork(host.getId(),nw.getId());
      for (      OvsTunnelNetworkVO p : peers) {
        if (p.getState().equals(OvsTunnel.State.Established.name())) {
          cmd=new OvsDestroyTunnelCommand(p.getNetworkId(),bridgeName,p.getPortName());
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ p.getFrom());
          ans=_agentMgr.send(p.getFrom(),cmd);
          handleDestroyTunnelAnswer(ans,p.getFrom(),p.getTo(),p.getNetworkId());
        }
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
}",0.9971692772221172
105826,"@Override public void onPublishMessage(String senderAddress,String subject,Object args){
  try {
    NetworkVO network=(NetworkVO)args;
    String bridgeName=generateBridgeNameForVpc(network.getVpcId());
    if (network.getVpcId() != null & isVpcEnabledForDistributedRouter(network.getVpcId())) {
      long vpcId=network.getVpcId();
      OvsVpcRoutingPolicyConfigCommand cmd=prepareVpcRoutingPolicyUpdate(vpcId);
      List<Long> vpcSpannedHostIds=_ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);
      for (      Long id : vpcSpannedHostIds) {
        if (!sendVpcRoutingPolicyChangeUpdate(cmd,id,bridgeName)) {
          s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
}","@Override public void onPublishMessage(String senderAddress,String subject,Object args){
  try {
    NetworkVO network=(NetworkVO)args;
    String bridgeName=generateBridgeNameForVpc(network.getVpcId());
    if (network.getVpcId() != null && isVpcEnabledForDistributedRouter(network.getVpcId())) {
      long vpcId=network.getVpcId();
      OvsVpcRoutingPolicyConfigCommand cmd=prepareVpcRoutingPolicyUpdate(vpcId);
      List<Long> vpcSpannedHostIds=_ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);
      for (      Long id : vpcSpannedHostIds) {
        if (!sendVpcRoutingPolicyChangeUpdate(cmd,id,bridgeName)) {
          s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
}",0.9993634627625716
105827,"@Override public List<Long> getActiveVmsInNetworkOnHost(long networkId,long hostId){
  List<Long> vmIds=new ArrayList<>();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,VirtualMachine.State.Running,VirtualMachine.State.Starting,VirtualMachine.State.Stopping,VirtualMachine.State.Unknown,VirtualMachine.State.Migrating);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(networkId);
  List<VMInstanceVO> ins=new ArrayList<VMInstanceVO>();
  if (vms != null) {
    for (    UserVmVO vm : vms) {
      if (vm.getHostId() == hostId)       vmIds.add(vm.getId());
    }
  }
  if (routers.size() != 0) {
    for (    DomainRouterVO router : routers) {
      if (router.getHostId() == hostId)       vmIds.add(router.getId());
    }
  }
  return vmIds;
}","/** 
 * get the list of all Vm id's in the network that are running on the host
 */
@Override public List<Long> getActiveVmsInNetworkOnHost(long networkId,long hostId){
  List<Long> vmIds=new ArrayList<>();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,VirtualMachine.State.Running,VirtualMachine.State.Starting,VirtualMachine.State.Stopping,VirtualMachine.State.Unknown,VirtualMachine.State.Migrating);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(networkId);
  if (vms != null) {
    for (    UserVmVO vm : vms) {
      if (vm.getHostId() == hostId)       vmIds.add(vm.getId());
    }
  }
  if (routers.size() != 0) {
    for (    DomainRouterVO router : routers) {
      if (router.getHostId() == hostId)       vmIds.add(router.getId());
    }
  }
  return vmIds;
}",0.910941475826972
105828,"@Override public List<Long> getAllActiveVmsInVpc(long vpcId){
  Set<Long> vmIdsSet=new HashSet<>();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  for (  Network network : vpcNetworks) {
    List<Long> networkVmIds=getAllActiveVmsInNetwork(network.getId());
    if (networkVmIds != null && !networkVmIds.isEmpty()) {
      vmIdsSet.addAll(networkVmIds);
    }
  }
  List<Long> vmIds=new ArrayList<>();
  vmIds.addAll(vmIdsSet);
  return vmIds;
}","/** 
 * get the list of all active Vm id's in the VPC for all ther tiers
 */
@Override public List<Long> getAllActiveVmsInVpc(long vpcId){
  Set<Long> vmIdsSet=new HashSet<>();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  for (  Network network : vpcNetworks) {
    List<Long> networkVmIds=getAllActiveVmsInNetwork(network.getId());
    if (networkVmIds != null && !networkVmIds.isEmpty()) {
      vmIdsSet.addAll(networkVmIds);
    }
  }
  List<Long> vmIds=new ArrayList<>();
  vmIds.addAll(vmIdsSet);
  return vmIds;
}",0.9241379310344828
105829,"@Override public List<Long> getActiveVmsInVpcOnHost(long vpcId,long hostId){
  Set<Long> vmIdsSet=new HashSet<>();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  for (  Network network : vpcNetworks) {
    List<Long> networkVmIds=getActiveVmsInNetworkOnHost(network.getId(),hostId);
    if (networkVmIds != null && !networkVmIds.isEmpty()) {
      vmIdsSet.addAll(networkVmIds);
    }
  }
  List<Long> vmIds=new ArrayList<>();
  vmIds.addAll(vmIdsSet);
  return vmIds;
}","/** 
 * get the list of all Vm id's in the VPC for all the tiers that are running on the host
 */
@Override public List<Long> getActiveVmsInVpcOnHost(long vpcId,long hostId){
  Set<Long> vmIdsSet=new HashSet<>();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  for (  Network network : vpcNetworks) {
    List<Long> networkVmIds=getActiveVmsInNetworkOnHost(network.getId(),hostId);
    if (networkVmIds != null && !networkVmIds.isEmpty()) {
      vmIdsSet.addAll(networkVmIds);
    }
  }
  List<Long> vmIds=new ArrayList<>();
  vmIds.addAll(vmIdsSet);
  return vmIds;
}",0.9097605893186004
105830,"@Override public List<Long> getVpcIdsVmIsPartOf(long vmId){
  List<Long> vpcIds=new ArrayList<>();
  List<NicVO> nics=_nicDao.listByVmId(vmId);
  if (nics == null)   return null;
  for (  Nic nic : nics) {
    Network network=_networkDao.findById(nic.getNetworkId());
    if (network != null && network.getTrafficType() == Networks.TrafficType.Guest && network.getVpcId() != null) {
      if (!vpcIds.contains(network.getVpcId())) {
        vpcIds.add(network.getVpcId());
      }
    }
  }
  return vpcIds;
}","/** 
 * get the list of all Vpc id's in which, a VM has a nic in the network that is part of VPC
 */
@Override public List<Long> getVpcIdsVmIsPartOf(long vmId){
  List<Long> vpcIds=new ArrayList<>();
  List<NicVO> nics=_nicDao.listByVmId(vmId);
  if (nics == null)   return null;
  for (  Nic nic : nics) {
    Network network=_networkDao.findById(nic.getNetworkId());
    if (network != null && network.getTrafficType() == Networks.TrafficType.Guest && network.getVpcId() != null) {
      if (!vpcIds.contains(network.getVpcId())) {
        vpcIds.add(network.getVpcId());
      }
    }
  }
  return vpcIds;
}",0.9097408400357462
105831,"@Override public List<Long> getVpcOnHost(long hostId){
  List<Long> vpcIds=new ArrayList<>();
  List<VMInstanceVO> vmInstances=_vmInstanceDao.listByHostId(hostId);
  for (  VMInstanceVO instance : vmInstances) {
    List<NicVO> nics=_nicDao.listByVmId(instance.getId());
    for (    Nic nic : nics) {
      Network network=_networkDao.findById(nic.getNetworkId());
      if (network.getTrafficType() == Networks.TrafficType.Guest && network.getVpcId() != null) {
        if (!vpcIds.contains(network.getVpcId())) {
          vpcIds.add(network.getVpcId());
        }
      }
    }
  }
  return vpcIds;
}","/** 
 * get the list of VPC id's of the vpc's for which one or more VM's from the VPC are running on the host
 */
@Override public List<Long> getVpcOnHost(long hostId){
  List<Long> vpcIds=new ArrayList<>();
  List<VMInstanceVO> vmInstances=_vmInstanceDao.listByHostId(hostId);
  for (  VMInstanceVO instance : vmInstances) {
    List<NicVO> nics=_nicDao.listByVmId(instance.getId());
    for (    Nic nic : nics) {
      Network network=_networkDao.findById(nic.getNetworkId());
      if (network.getTrafficType() == Networks.TrafficType.Guest && network.getVpcId() != null) {
        if (!vpcIds.contains(network.getVpcId())) {
          vpcIds.add(network.getVpcId());
        }
      }
    }
  }
  return vpcIds;
}",0.913767019667171
105832,"@Override public List<Long> getAllActiveVmsInNetwork(long networkId){
  List<Long> vmIds=new ArrayList<>();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,VirtualMachine.State.Running,VirtualMachine.State.Starting,VirtualMachine.State.Stopping,VirtualMachine.State.Unknown,VirtualMachine.State.Migrating);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(networkId);
  List<VMInstanceVO> ins=new ArrayList<VMInstanceVO>();
  if (vms != null) {
    for (    UserVmVO vm : vms) {
      vmIds.add(vm.getId());
    }
  }
  if (routers.size() != 0) {
    for (    DomainRouterVO router : routers) {
      vmIds.add(router.getId());
    }
  }
  return vmIds;
}","/** 
 * get the list of all active Vm id's in a network
 */
@Override public List<Long> getAllActiveVmsInNetwork(long networkId){
  List<Long> vmIds=new ArrayList<>();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,VirtualMachine.State.Running,VirtualMachine.State.Starting,VirtualMachine.State.Stopping,VirtualMachine.State.Unknown,VirtualMachine.State.Migrating);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(networkId);
  if (vms != null) {
    for (    UserVmVO vm : vms) {
      vmIds.add(vm.getId());
    }
  }
  if (routers.size() != 0) {
    for (    DomainRouterVO router : routers) {
      vmIds.add(router.getId());
    }
  }
  return vmIds;
}",0.9150805270863837
105833,"public boolean sendVpcRoutingPolicyChangeUpdate(OvsVpcRoutingPolicyConfigCommand updateCmd,long hostId,String bridgeName){
  try {
    s_logger.debug(""String_Node_Str"" + hostId);
    updateCmd.setHostId(hostId);
    updateCmd.setBridgeName(bridgeName);
    Answer ans=_agentMgr.send(hostId,updateCmd);
    if (ans.getResult()) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return true;
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
    return false;
  }
}","public boolean sendVpcRoutingPolicyChangeUpdate(OvsVpcRoutingPolicyConfigCommand updateCmd,long hostId,String bridgeName){
  try {
    s_logger.debug(""String_Node_Str"" + hostId);
    updateCmd.setHostId(hostId);
    updateCmd.setBridgeName(bridgeName);
    Answer ans=_agentMgr.send(hostId,updateCmd);
    if (ans.getResult()) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return true;
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"",e);
    return false;
  }
}",0.9984591679506932
105834,"public boolean sendVpcTopologyChangeUpdate(OvsVpcPhysicalTopologyConfigCommand updateCmd,long hostId,String bridgeName){
  try {
    s_logger.debug(""String_Node_Str"" + hostId);
    updateCmd.setHostId(hostId);
    updateCmd.setBridgeName(bridgeName);
    Answer ans=_agentMgr.send(hostId,updateCmd);
    if (ans.getResult()) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return true;
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
    return false;
  }
}","public boolean sendVpcTopologyChangeUpdate(OvsVpcPhysicalTopologyConfigCommand updateCmd,long hostId,String bridgeName){
  try {
    s_logger.debug(""String_Node_Str"" + hostId);
    updateCmd.setHostId(hostId);
    updateCmd.setBridgeName(bridgeName);
    Answer ans=_agentMgr.send(hostId,updateCmd);
    if (ans.getResult()) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return true;
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"",e);
    return false;
  }
}",0.9984544049459042
105835,"@Override public void onPublishMessage(String senderAddress,String subject,Object args){
  NetworkVO network=(NetworkVO)args;
  String bridgeName=generateBridgeNameForVpc(network.getVpcId());
  if (network.getVpcId() != null & isVpcEnabledForDistributedRouter(network.getVpcId())) {
    long vpcId=network.getVpcId();
    OvsVpcRoutingPolicyConfigCommand cmd=prepareVpcRoutingPolicyUpdate(vpcId);
    List<Long> vpcSpannedHostIds=_ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);
    for (    Long id : vpcSpannedHostIds) {
      if (!sendVpcRoutingPolicyChangeUpdate(cmd,id,bridgeName)) {
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str"");
      }
    }
  }
}","@Override public void onPublishMessage(String senderAddress,String subject,Object args){
  try {
    NetworkVO network=(NetworkVO)args;
    String bridgeName=generateBridgeNameForVpc(network.getVpcId());
    if (network.getVpcId() != null & isVpcEnabledForDistributedRouter(network.getVpcId())) {
      long vpcId=network.getVpcId();
      OvsVpcRoutingPolicyConfigCommand cmd=prepareVpcRoutingPolicyUpdate(vpcId);
      List<Long> vpcSpannedHostIds=_ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);
      for (      Long id : vpcSpannedHostIds) {
        if (!sendVpcRoutingPolicyChangeUpdate(cmd,id,bridgeName)) {
          s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
}",0.9261285909712722
105836,"/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,String bridgeName){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,bridgeName);
    String nwName=bridgeName;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      if (!is_xcp())       enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + bridgeName);
      String result;
      if (bridgeName.startsWith(""String_Node_Str"")) {
        result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",bridgeName,""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      }
 else {
        result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",bridgeName,""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      }
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,Long networkId,long hostId,String bridgeName){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,bridgeName);
    String nwName=bridgeName;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      if (!is_xcp())       enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + bridgeName);
      String result;
      if (bridgeName.startsWith(""String_Node_Str"")) {
        result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",bridgeName,""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      }
 else {
        result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",bridgeName,""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      }
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}",0.9839842652430458
105837,"@Override public boolean release(Network network,NicProfile nic,VirtualMachineProfile vm,ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException {
  if (!canHandle(network,Service.Connectivity)) {
    return false;
  }
  if (nic.getBroadcastType() != Networks.BroadcastDomainType.Vswitch) {
    return false;
  }
  if (nic.getTrafficType() != Networks.TrafficType.Guest) {
    return false;
  }
  List<UserVmVO> userVms=_userVmDao.listByAccountIdAndHostId(vm.getVirtualMachine().getAccountId(),vm.getVirtualMachine().getHostId());
  if (vm.getType() == VirtualMachine.Type.User) {
    if (userVms.size() > 1) {
      return true;
    }
    List<DomainRouterVO> routers=_routerDao.findByNetwork(network.getId());
    for (    DomainRouterVO router : routers) {
      if (router.getHostId().equals(vm.getVirtualMachine().getHostId())) {
        return true;
      }
    }
  }
 else   if (vm.getType() == VirtualMachine.Type.DomainRouter && userVms.size() != 0) {
    return true;
  }
  HostVO host=_hostDao.findById(vm.getVirtualMachine().getHostId());
  _ovsTunnelMgr.checkAndRemoveHostFromTunnelNetwork(network,host);
  return true;
}","@Override public boolean release(Network network,NicProfile nic,VirtualMachineProfile vm,ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException {
  if (!canHandle(network,Service.Connectivity)) {
    return false;
  }
  if (nic.getBroadcastType() != Networks.BroadcastDomainType.Vswitch) {
    return false;
  }
  if (nic.getTrafficType() != Networks.TrafficType.Guest) {
    return false;
  }
  HostVO host=_hostDao.findById(vm.getVirtualMachine().getHostId());
  _ovsTunnelMgr.checkAndRemoveHostFromTunnelNetwork(network,host);
  return true;
}",0.665907797381901
105838,"@Override public List<Long> getAllActiveVmsInVpc(long vpcId){
  return null;
}","@Override public List<Long> getAllActiveVmsInVpc(long vpcId){
  Set<Long> vmIdsSet=new HashSet<>();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  for (  Network network : vpcNetworks) {
    List<Long> networkVmIds=getAllActiveVmsInNetwork(network.getId());
    if (networkVmIds != null && !networkVmIds.isEmpty()) {
      vmIdsSet.addAll(networkVmIds);
    }
  }
  List<Long> vmIds=new ArrayList<>();
  vmIds.addAll(vmIdsSet);
  return vmIds;
}",0.2522851919561243
105839,"@Override public List<Long> getActiveVmsInVpcOnHost(long vpcId,long hostId){
  return null;
}","@Override public List<Long> getActiveVmsInVpcOnHost(long vpcId,long hostId){
  Set<Long> vmIdsSet=new HashSet<>();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  for (  Network network : vpcNetworks) {
    List<Long> networkVmIds=getActiveVmsInNetworkOnHost(network.getId(),hostId);
    if (networkVmIds != null && !networkVmIds.isEmpty()) {
      vmIdsSet.addAll(networkVmIds);
    }
  }
  List<Long> vmIds=new ArrayList<>();
  vmIds.addAll(vmIdsSet);
  return vmIds;
}",0.2862010221465076
105840,"@Override public List<Long> getVpcSpannedHosts(long vpId){
  return null;
}","/** 
 * get the list of hypervisor hosts on which VM's belonging to a VPC currently spans
 */
@Override public List<Long> getVpcSpannedHosts(long vpcId){
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  List<Long> vpcHostIds=new ArrayList<>();
  for (  Network vpcNetwork : vpcNetworks) {
    List<Long> networkHostIds=new ArrayList<Long>();
    networkHostIds=getNetworkSpanedHosts(vpcNetwork.getId());
    if (networkHostIds != null && !networkHostIds.isEmpty()) {
      for (      Long hostId : networkHostIds) {
        if (!vpcHostIds.contains(hostId)) {
          vpcHostIds.add(hostId);
        }
      }
    }
  }
  return vpcHostIds;
}",0.1862348178137652
105841,"@Override public List<Long> getVpcOnHost(long hostId){
  return null;
}","@Override public List<Long> getVpcOnHost(long hostId){
  List<Long> vpcIds=new ArrayList<>();
  List<VMInstanceVO> vmInstances=_vmInstanceDao.listByHostId(hostId);
  for (  VMInstanceVO instance : vmInstances) {
    List<NicVO> nics=_nicDao.listByVmId(instance.getId());
    for (    Nic nic : nics) {
      Network network=_networkDao.findById(nic.getNetworkId());
      if (network.getTrafficType() == Networks.TrafficType.Guest && network.getVpcId() != null) {
        if (!vpcIds.contains(network.getVpcId())) {
          vpcIds.add(network.getVpcId());
        }
      }
    }
  }
  return vpcIds;
}",0.1955555555555555
105842,"@Override public IAMEntityType getEntityType(){
}","@Override public IAMEntityType getEntityType(){
  return IAMEntityType.Vpc;
}",0.7777777777777778
105843,"@DB protected void checkAndCreateVpcTunnelNetworks(Host host,long vpcId){
  long hostId=host.getId();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  List<Long> vpcSpannedHostIds=_ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);
  String bridgeName=generateBridgeNameForVpc(vpcId);
  boolean bridgeNotSetup=true;
  for (  Network vpcNetwork : vpcNetworks) {
    int key=getGreKey(vpcNetwork);
    List<Long> toHostIds=new ArrayList<Long>();
    List<Long> fromHostIds=new ArrayList<Long>();
    for (    Long rh : vpcSpannedHostIds) {
      if (rh == hostId) {
        continue;
      }
      OvsTunnelNetworkVO ta=_tunnelNetworkDao.getByFromToNetwork(hostId,rh.longValue(),vpcNetwork.getId());
      if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ rh.longValue());
        if (ta == null) {
          createTunnelRecord(hostId,rh.longValue(),vpcNetwork.getId(),key);
        }
        if (!toHostIds.contains(rh)) {
          toHostIds.add(rh);
        }
      }
      ta=_tunnelNetworkDao.getByFromToNetwork(rh.longValue(),hostId,vpcNetwork.getId());
      if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {
        s_logger.debug(""String_Node_Str"" + rh.longValue() + ""String_Node_Str""+ hostId);
        if (ta == null) {
          createTunnelRecord(rh.longValue(),hostId,vpcNetwork.getId(),key);
        }
        if (!fromHostIds.contains(rh)) {
          fromHostIds.add(rh);
        }
      }
    }
    try {
      String myIp=getGreEndpointIP(host,vpcNetwork);
      if (myIp == null)       throw new GreTunnelException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ host.getId());
      boolean noHost=true;
      for (      Long i : toHostIds) {
        HostVO rHost=_hostDao.findById(i);
        String otherIp=getGreEndpointIP(rHost,vpcNetwork);
        if (otherIp == null)         throw new GreTunnelException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ rHost.getId());
        Commands cmds=new Commands(new OvsCreateTunnelCommand(otherIp,key,Long.valueOf(hostId),i,vpcNetwork.getId(),myIp,bridgeName,vpcNetwork.getUuid()));
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ i+ ""String_Node_Str""+ vpcNetwork.getId());
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ i);
        Answer[] answers=_agentMgr.send(hostId,cmds);
        handleCreateTunnelAnswer(answers);
        bridgeNotSetup=false;
      }
      for (      Long i : fromHostIds) {
        HostVO rHost=_hostDao.findById(i);
        String otherIp=getGreEndpointIP(rHost,vpcNetwork);
        Commands cmds=new Commands(new OvsCreateTunnelCommand(myIp,key,i,Long.valueOf(hostId),vpcNetwork.getId(),otherIp,bridgeName,vpcNetwork.getUuid()));
        s_logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ hostId);
        Answer[] answers=_agentMgr.send(i,cmds);
        handleCreateTunnelAnswer(answers);
        bridgeNotSetup=false;
      }
    }
 catch (    GreTunnelException|OperationTimedoutException|AgentUnavailableException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
  if (bridgeNotSetup) {
    try {
      Commands cmds=new Commands(new OvsSetupBridgeCommand(bridgeName,hostId,null));
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleSetupBridgeAnswer(answers);
    }
 catch (    OperationTimedoutException|AgentUnavailableException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
  OvsVpcPhysicalTopologyConfigCommand topologyConfigCommand=prepareVpcTopologyUpdate(vpcId);
  for (  Long id : vpcSpannedHostIds) {
    if (!sendVpcTopologyChangeUpdate(topologyConfigCommand,id,bridgeName)) {
      s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
}","@DB protected void checkAndCreateVpcTunnelNetworks(Host host,long vpcId){
  long hostId=host.getId();
  List<? extends Network> vpcNetworks=_vpcMgr.getVpcNetworks(vpcId);
  List<Long> vpcSpannedHostIds=_ovsNetworkToplogyGuru.getVpcSpannedHosts(vpcId);
  String bridgeName=generateBridgeNameForVpc(vpcId);
  boolean bridgeNotSetup=true;
  for (  Network vpcNetwork : vpcNetworks) {
    int key=getGreKey(vpcNetwork);
    List<Long> toHostIds=new ArrayList<Long>();
    List<Long> fromHostIds=new ArrayList<Long>();
    for (    Long rh : vpcSpannedHostIds) {
      if (rh == hostId) {
        continue;
      }
      OvsTunnelNetworkVO ta=_tunnelNetworkDao.getByFromToNetwork(hostId,rh.longValue(),vpcNetwork.getId());
      if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ rh.longValue());
        if (ta == null) {
          createTunnelRecord(hostId,rh.longValue(),vpcNetwork.getId(),key);
        }
        if (!toHostIds.contains(rh)) {
          toHostIds.add(rh);
        }
      }
      ta=_tunnelNetworkDao.getByFromToNetwork(rh.longValue(),hostId,vpcNetwork.getId());
      if (ta == null || ta.getState().equals(OvsTunnel.State.Failed.name())) {
        s_logger.debug(""String_Node_Str"" + rh.longValue() + ""String_Node_Str""+ hostId);
        if (ta == null) {
          createTunnelRecord(rh.longValue(),hostId,vpcNetwork.getId(),key);
        }
        if (!fromHostIds.contains(rh)) {
          fromHostIds.add(rh);
        }
      }
    }
    try {
      String myIp=getGreEndpointIP(host,vpcNetwork);
      if (myIp == null)       throw new GreTunnelException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ host.getId());
      boolean noHost=true;
      for (      Long i : toHostIds) {
        HostVO rHost=_hostDao.findById(i);
        String otherIp=getGreEndpointIP(rHost,vpcNetwork);
        if (otherIp == null)         throw new GreTunnelException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ rHost.getId());
        Commands cmds=new Commands(new OvsCreateTunnelCommand(otherIp,key,Long.valueOf(hostId),i,vpcNetwork.getId(),myIp,bridgeName,vpcNetwork.getUuid()));
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ i+ ""String_Node_Str""+ vpcNetwork.getId());
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ i);
        Answer[] answers=_agentMgr.send(hostId,cmds);
        handleCreateTunnelAnswer(answers);
        bridgeNotSetup=false;
      }
      for (      Long i : fromHostIds) {
        HostVO rHost=_hostDao.findById(i);
        String otherIp=getGreEndpointIP(rHost,vpcNetwork);
        Commands cmds=new Commands(new OvsCreateTunnelCommand(myIp,key,i,Long.valueOf(hostId),vpcNetwork.getId(),otherIp,bridgeName,vpcNetwork.getUuid()));
        s_logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ hostId);
        Answer[] answers=_agentMgr.send(i,cmds);
        handleCreateTunnelAnswer(answers);
        bridgeNotSetup=false;
      }
    }
 catch (    GreTunnelException|OperationTimedoutException|AgentUnavailableException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
  if (bridgeNotSetup) {
    try {
      Commands cmds=new Commands(new OvsSetupBridgeCommand(bridgeName,hostId,null));
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleSetupBridgeAnswer(answers);
    }
 catch (    OperationTimedoutException|AgentUnavailableException e) {
      s_logger.warn(""String_Node_Str"",e);
    }
  }
}",0.959284474702977
105844,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _executorPool=Executors.newScheduledThreadPool(10,new NamedThreadFactory(""String_Node_Str""));
  _cleanupExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _messageBus.subscribe(""String_Node_Str"",new NetworkAclEventsSubscriber());
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _executorPool=Executors.newScheduledThreadPool(10,new NamedThreadFactory(""String_Node_Str""));
  _cleanupExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _messageBus.subscribe(""String_Node_Str"",new NetworkAclEventsSubscriber());
  VirtualMachine.State.getStateMachine().registerListener(this);
  return true;
}",0.8977673325499412
105845,"OvsVpcRoutingPolicyConfigCommand prepareVpcRoutingPolicyUpdate(long vpcId){
}","private OvsVpcRoutingPolicyConfigCommand prepareVpcRoutingPolicyUpdate(long vpcId){
}",0.9506172839506172
105846,"@Override public boolean isPortableIpTransferableFromNetwork(long ipAddrId,long networkId){
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ip=_ipAddressDao.findById(ipAddrId);
  if (ip == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null & !ipToServices.isEmpty()) {
    Set<Service> ipServices=ipToServices.get(publicIp);
    if (ipServices != null && !ipServices.isEmpty()) {
      return false;
    }
  }
  return true;
}","@Override public boolean isPortableIpTransferableFromNetwork(long ipAddrId,long networkId){
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ip=_ipAddressDao.findById(ipAddrId);
  if (ip == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (!ipToServices.isEmpty()) {
    Set<Service> ipServices=ipToServices.get(publicIp);
    if (ipServices != null && !ipServices.isEmpty()) {
      return false;
    }
  }
  return true;
}",0.9865889212827988
105847,"@DB @Override public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId,long networkId) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str"");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null & !ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
  }
}","@DB @Override public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId,long networkId) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str"");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (!ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
  }
}",0.99604198933058
105848,"@Override public Map<String,Object> listCapabilities(ListCapabilitiesCmd cmd){
  Map<String,Object> capabilities=new HashMap<String,Object>();
  Account caller=CallContext.current().getCallingAccount();
  boolean securityGroupsEnabled=false;
  boolean elasticLoadBalancerEnabled=false;
  boolean KVMSnapshotEnabled=false;
  String supportELB=""String_Node_Str"";
  List<NetworkVO> networks=_networkDao.listSecurityGroupEnabledNetworks();
  if (networks != null && !networks.isEmpty()) {
    securityGroupsEnabled=true;
    String elbEnabled=_configDao.getValue(Config.ElasticLoadBalancerEnabled.key());
    elasticLoadBalancerEnabled=elbEnabled == null ? false : Boolean.parseBoolean(elbEnabled);
    if (elasticLoadBalancerEnabled) {
      String networkType=_configDao.getValue(Config.ElasticLoadBalancerNetwork.key());
      if (networkType != null) {
        supportELB=networkType;
      }
    }
  }
  long diskOffMaxSize=_volumeMgr.CustomDiskOfferingMaxSize.value();
  KVMSnapshotEnabled=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  boolean userPublicTemplateEnabled=TemplateManager.AllowPublicUserTemplates.valueIn(caller.getId());
  boolean apiLimitEnabled=Boolean.parseBoolean(_configDao.getValue(Config.ApiLimitEnabled.key()));
  Integer apiLimitInterval=Integer.valueOf(_configDao.getValue(Config.ApiLimitInterval.key()));
  Integer apiLimitMax=Integer.valueOf(_configDao.getValue(Config.ApiLimitMax.key()));
  boolean regionSecondaryEnabled=false;
  List<ImageStoreVO> imgStores=_imgStoreDao.findRegionImageStores();
  if (imgStores != null && imgStores.size() > 0) {
    regionSecondaryEnabled=true;
  }
  capabilities.put(""String_Node_Str"",securityGroupsEnabled);
  capabilities.put(""String_Node_Str"",userPublicTemplateEnabled);
  capabilities.put(""String_Node_Str"",getVersion());
  capabilities.put(""String_Node_Str"",supportELB);
  capabilities.put(""String_Node_Str"",_projectMgr.projectInviteRequired());
  capabilities.put(""String_Node_Str"",_projectMgr.allowUserToCreateProject());
  capabilities.put(""String_Node_Str"",diskOffMaxSize);
  capabilities.put(""String_Node_Str"",regionSecondaryEnabled);
  capabilities.put(""String_Node_Str"",KVMSnapshotEnabled);
  if (apiLimitEnabled) {
    capabilities.put(""String_Node_Str"",apiLimitInterval);
    capabilities.put(""String_Node_Str"",apiLimitMax);
  }
  return capabilities;
}","@Override public Map<String,Object> listCapabilities(ListCapabilitiesCmd cmd){
  Map<String,Object> capabilities=new HashMap<String,Object>();
  Account caller=CallContext.current().getCallingAccount();
  boolean securityGroupsEnabled=false;
  boolean elasticLoadBalancerEnabled=false;
  boolean KVMSnapshotEnabled=false;
  String supportELB=""String_Node_Str"";
  List<NetworkVO> networks=_networkDao.listSecurityGroupEnabledNetworks();
  if (networks != null && !networks.isEmpty()) {
    securityGroupsEnabled=true;
    String elbEnabled=_configDao.getValue(Config.ElasticLoadBalancerEnabled.key());
    elasticLoadBalancerEnabled=elbEnabled == null ? false : Boolean.parseBoolean(elbEnabled);
    if (elasticLoadBalancerEnabled) {
      String networkType=_configDao.getValue(Config.ElasticLoadBalancerNetwork.key());
      if (networkType != null) {
        supportELB=networkType;
      }
    }
  }
  long diskOffMaxSize=VolumeOrchestrationService.CustomDiskOfferingMaxSize.value();
  KVMSnapshotEnabled=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  boolean userPublicTemplateEnabled=TemplateManager.AllowPublicUserTemplates.valueIn(caller.getId());
  boolean apiLimitEnabled=Boolean.parseBoolean(_configDao.getValue(Config.ApiLimitEnabled.key()));
  Integer apiLimitInterval=Integer.valueOf(_configDao.getValue(Config.ApiLimitInterval.key()));
  Integer apiLimitMax=Integer.valueOf(_configDao.getValue(Config.ApiLimitMax.key()));
  boolean regionSecondaryEnabled=false;
  List<ImageStoreVO> imgStores=_imgStoreDao.findRegionImageStores();
  if (imgStores != null && imgStores.size() > 0) {
    regionSecondaryEnabled=true;
  }
  capabilities.put(""String_Node_Str"",securityGroupsEnabled);
  capabilities.put(""String_Node_Str"",userPublicTemplateEnabled);
  capabilities.put(""String_Node_Str"",getVersion());
  capabilities.put(""String_Node_Str"",supportELB);
  capabilities.put(""String_Node_Str"",_projectMgr.projectInviteRequired());
  capabilities.put(""String_Node_Str"",_projectMgr.allowUserToCreateProject());
  capabilities.put(""String_Node_Str"",diskOffMaxSize);
  capabilities.put(""String_Node_Str"",regionSecondaryEnabled);
  capabilities.put(""String_Node_Str"",KVMSnapshotEnabled);
  if (apiLimitEnabled) {
    capabilities.put(""String_Node_Str"",apiLimitInterval);
    capabilities.put(""String_Node_Str"",apiLimitMax);
  }
  return capabilities;
}",0.9927996611605252
105849,Boolean isDynamicallyScalable();,boolean isDynamicallyScalable();,0.96875
105850,"@Override public Boolean isDynamicallyScalable(){
  return dynamicallyScalable;
}","@Override public boolean isDynamicallyScalable(){
  return dynamicallyScalable;
}",0.9876543209876544
105851,"@Override public Boolean isDynamicallyScalable(){
  return Boolean.FALSE;
}","@Override public boolean isDynamicallyScalable(){
  return false;
}",0.8873239436619719
105852,"@Override public Boolean isDynamicallyScalable(){
  return null;
}","@Override public boolean isDynamicallyScalable(){
  return false;
}",0.9323308270676692
105853,"@DB protected Void createVolumeFromBaseImageCallBack(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CreateVolumeFromBaseImageContext<VolumeApiResult> context){
  DataObject vo=context.vo;
  DataObject tmplOnPrimary=context.templateOnStore;
  CopyCommandResult result=callback.getResult();
  VolumeApiResult volResult=new VolumeApiResult((VolumeObject)vo);
  if (result.isSuccess()) {
    vo.processEvent(Event.OperationSuccessed,result.getAnswer());
  }
 else {
    vo.processEvent(Event.OperationFailed);
    volResult.setResult(result.getResult());
    Answer ans=result.getAnswer();
    if (ans != null && ans instanceof CopyCmdAnswer && ans.getDetails().contains(""String_Node_Str"")) {
      if (tmplOnPrimary != null) {
        s_logger.info(""String_Node_Str"");
        VMTemplateStoragePoolVO templatePoolRef=_tmpltPoolDao.findByPoolTemplate(tmplOnPrimary.getDataStore().getId(),tmplOnPrimary.getId());
        if (templatePoolRef != null) {
          long templatePoolRefId=templatePoolRef.getId();
          templatePoolRef=_tmpltPoolDao.acquireInLockTable(templatePoolRefId,1200);
          if (templatePoolRef == null) {
            s_logger.warn(""String_Node_Str"" + templatePoolRefId);
          }
          try {
            templatePoolRef.setDownloadState(VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED);
            templatePoolRef.setState(ObjectInDataStoreStateMachine.State.Allocated);
            _tmpltPoolDao.update(templatePoolRefId,templatePoolRef);
          }
  finally {
            _tmpltPoolDao.releaseFromLockTable(templatePoolRefId);
          }
        }
      }
    }
  }
  AsyncCallFuture<VolumeApiResult> future=context.getFuture();
  future.complete(volResult);
  return null;
}","@DB protected Void createVolumeFromBaseImageCallBack(AsyncCallbackDispatcher<VolumeServiceImpl,CopyCommandResult> callback,CreateVolumeFromBaseImageContext<VolumeApiResult> context){
  DataObject vo=context.vo;
  DataObject tmplOnPrimary=context.templateOnStore;
  CopyCommandResult result=callback.getResult();
  VolumeApiResult volResult=new VolumeApiResult((VolumeObject)vo);
  if (result.isSuccess()) {
    vo.processEvent(Event.OperationSuccessed,result.getAnswer());
  }
 else {
    vo.processEvent(Event.OperationFailed);
    volResult.setResult(result.getResult());
    Answer ans=result.getAnswer();
    if (ans != null && ans instanceof CopyCmdAnswer && ans.getDetails().contains(""String_Node_Str"")) {
      if (tmplOnPrimary != null) {
        s_logger.info(""String_Node_Str"");
        VMTemplateStoragePoolVO templatePoolRef=_tmpltPoolDao.findByPoolTemplate(tmplOnPrimary.getDataStore().getId(),tmplOnPrimary.getId());
        if (templatePoolRef != null) {
          long templatePoolRefId=templatePoolRef.getId();
          templatePoolRef=_tmpltPoolDao.acquireInLockTable(templatePoolRefId,1200);
          try {
            if (templatePoolRef == null) {
              s_logger.warn(""String_Node_Str"" + templatePoolRefId);
            }
 else {
              templatePoolRef.setDownloadState(VMTemplateStorageResourceAssoc.Status.NOT_DOWNLOADED);
              templatePoolRef.setState(ObjectInDataStoreStateMachine.State.Allocated);
              _tmpltPoolDao.update(templatePoolRefId,templatePoolRef);
            }
          }
  finally {
            _tmpltPoolDao.releaseFromLockTable(templatePoolRefId);
          }
        }
      }
    }
  }
  AsyncCallFuture<VolumeApiResult> future=context.getFuture();
  future.complete(volResult);
  return null;
}",0.9835039817974972
105854,"/** 
 * This method will process the affinity group of type 'Explicit Dedication' for a deployment of a VM that demands dedicated resources. For ExplicitDedicationProcessor we need to add dedicated resources into the IncludeList based on the level we have dedicated resources available. For eg. if admin dedicates a pod to a domain, then all the user in that domain can use the resources of that pod. We need to take care of the situation when dedicated resources further have resources dedicated to sub-domain/account. This IncludeList is then used to update the avoid list for a given data center.
 */
@Override public void process(VirtualMachineProfile vmProfile,DeploymentPlan plan,ExcludeList avoid) throws AffinityConflictException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  List<AffinityGroupVMMapVO> vmGroupMappings=_affinityGroupVMMapDao.findByVmIdType(vm.getId(),getType());
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  List<DedicatedResourceVO> resourceList=new ArrayList<DedicatedResourceVO>();
  if (vmGroupMappings != null && !vmGroupMappings.isEmpty()) {
    for (    AffinityGroupVMMapVO vmGroupMapping : vmGroupMappings) {
      if (vmGroupMapping != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vmGroupMapping.getAffinityGroupId() + ""String_Node_Str""+ vm.getId());
        }
        long affinityGroupId=vmGroupMapping.getAffinityGroupId();
        List<DedicatedResourceVO> dr=_dedicatedDao.listByAffinityGroupId(affinityGroupId);
        resourceList.addAll(dr);
      }
    }
    boolean canUse=false;
    if (plan.getHostId() != null) {
      HostVO host=_hostDao.findById(plan.getHostId());
      ClusterVO clusterofHost=_clusterDao.findById(host.getClusterId());
      HostPodVO podOfHost=_podDao.findById(host.getPodId());
      DataCenterVO zoneOfHost=_dcDao.findById(host.getDataCenterId());
      if (resourceList != null && resourceList.size() != 0) {
        for (        DedicatedResourceVO resource : resourceList) {
          if ((resource.getHostId() != null && resource.getHostId() == plan.getHostId()) || (resource.getClusterId() != null && resource.getClusterId() == clusterofHost.getId()) || (resource.getPodId() != null && resource.getPodId() == podOfHost.getId())|| (resource.getDataCenterId() != null && resource.getDataCenterId() == zoneOfHost.getId())) {
            canUse=true;
          }
        }
      }
      if (!canUse) {
        throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str"");
      }
    }
 else     if (plan.getClusterId() != null) {
      ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
      HostPodVO podOfCluster=_podDao.findById(cluster.getPodId());
      DataCenterVO zoneOfCluster=_dcDao.findById(cluster.getDataCenterId());
      List<HostVO> hostToUse=new ArrayList<HostVO>();
      if (resourceList != null && resourceList.size() != 0) {
        for (        DedicatedResourceVO resource : resourceList) {
          if ((resource.getClusterId() != null && resource.getClusterId() == cluster.getId()) || (resource.getPodId() != null && resource.getPodId() == podOfCluster.getId()) || (resource.getDataCenterId() != null && resource.getDataCenterId() == zoneOfCluster.getId())) {
            canUse=true;
          }
          if (!canUse) {
            if (resource.getHostId() != null) {
              HostVO dHost=_hostDao.findById(resource.getHostId());
              if (dHost.getClusterId() == cluster.getId()) {
                hostToUse.add(dHost);
              }
            }
          }
        }
      }
      if (hostToUse.isEmpty() && !canUse) {
        throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
      }
      if (hostToUse != null && hostToUse.size() != 0) {
        List<HostVO> hostList=_hostDao.findByClusterId(cluster.getId());
        for (        HostVO host : hostList) {
          if (!hostToUse.contains(host)) {
            avoid.addHost(host.getId());
          }
        }
      }
    }
 else     if (plan.getPodId() != null) {
      HostPodVO pod=_podDao.findById(plan.getPodId());
      DataCenterVO zoneOfPod=_dcDao.findById(pod.getDataCenterId());
      List<ClusterVO> clustersToUse=new ArrayList<ClusterVO>();
      List<HostVO> hostsToUse=new ArrayList<HostVO>();
      if (resourceList != null && resourceList.size() != 0) {
        for (        DedicatedResourceVO resource : resourceList) {
          if ((resource.getPodId() != null && resource.getPodId() == pod.getId()) || (resource.getDataCenterId() != null && resource.getDataCenterId() == zoneOfPod.getId())) {
            canUse=true;
          }
          if (!canUse) {
            if (resource.getClusterId() != null) {
              ClusterVO dCluster=_clusterDao.findById(resource.getClusterId());
              if (dCluster.getPodId() == pod.getId()) {
                clustersToUse.add(dCluster);
              }
            }
            if (resource.getHostId() != null) {
              HostVO dHost=_hostDao.findById(resource.getHostId());
              if (dHost.getPodId() == pod.getId()) {
                hostsToUse.add(dHost);
              }
            }
          }
        }
      }
      if (hostsToUse.isEmpty() && clustersToUse.isEmpty() && !canUse) {
        throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      }
      if (clustersToUse != null && clustersToUse.size() != 0) {
        List<ClusterVO> clusterList=_clusterDao.listByPodId(pod.getId());
        for (        ClusterVO cluster : clusterList) {
          if (!clustersToUse.contains(cluster)) {
            avoid.addCluster(cluster.getId());
          }
        }
      }
      if (hostsToUse != null && hostsToUse.size() != 0) {
        List<HostVO> hostList=_hostDao.findByPodId(pod.getId());
        for (        HostVO host : hostList) {
          if (!hostsToUse.contains(host)) {
            avoid.addHost(host.getId());
          }
        }
      }
    }
 else {
      if (resourceList != null && resourceList.size() != 0) {
        avoid=updateAvoidList(resourceList,avoid,dc);
      }
 else {
        avoid.addDataCenter(dc.getId());
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid() + ""String_Node_Str""+ avoid.getClustersToAvoid()+ ""String_Node_Str""+ avoid.getHostsToAvoid());
      }
    }
  }
}","/** 
 * This method will process the affinity group of type 'Explicit Dedication' for a deployment of a VM that demands dedicated resources. For ExplicitDedicationProcessor we need to add dedicated resources into the IncludeList based on the level we have dedicated resources available. For eg. if admin dedicates a pod to a domain, then all the user in that domain can use the resources of that pod. We need to take care of the situation when dedicated resources further have resources dedicated to sub-domain/account. This IncludeList is then used to update the avoid list for a given data center.
 */
@Override public void process(VirtualMachineProfile vmProfile,DeploymentPlan plan,ExcludeList avoid) throws AffinityConflictException {
  VirtualMachine vm=vmProfile.getVirtualMachine();
  List<AffinityGroupVMMapVO> vmGroupMappings=_affinityGroupVMMapDao.findByVmIdType(vm.getId(),getType());
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  List<DedicatedResourceVO> resourceList=new ArrayList<DedicatedResourceVO>();
  if (vmGroupMappings != null && !vmGroupMappings.isEmpty()) {
    for (    AffinityGroupVMMapVO vmGroupMapping : vmGroupMappings) {
      if (vmGroupMapping != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vmGroupMapping.getAffinityGroupId() + ""String_Node_Str""+ vm.getId());
        }
        long affinityGroupId=vmGroupMapping.getAffinityGroupId();
        List<DedicatedResourceVO> dr=_dedicatedDao.listByAffinityGroupId(affinityGroupId);
        resourceList.addAll(dr);
      }
    }
    boolean canUse=false;
    if (plan.getHostId() != null) {
      HostVO host=_hostDao.findById(plan.getHostId());
      ClusterVO clusterofHost=_clusterDao.findById(host.getClusterId());
      HostPodVO podOfHost=_podDao.findById(host.getPodId());
      DataCenterVO zoneOfHost=_dcDao.findById(host.getDataCenterId());
      if (resourceList != null && resourceList.size() != 0) {
        for (        DedicatedResourceVO resource : resourceList) {
          if ((resource.getHostId() != null && resource.getHostId().longValue() == plan.getHostId().longValue()) || (resource.getClusterId() != null && resource.getClusterId().longValue() == clusterofHost.getId()) || (resource.getPodId() != null && resource.getPodId().longValue() == podOfHost.getId())|| (resource.getDataCenterId() != null && resource.getDataCenterId().longValue() == zoneOfHost.getId())) {
            canUse=true;
          }
        }
      }
      if (!canUse) {
        throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str"");
      }
    }
 else     if (plan.getClusterId() != null) {
      ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
      HostPodVO podOfCluster=_podDao.findById(cluster.getPodId());
      DataCenterVO zoneOfCluster=_dcDao.findById(cluster.getDataCenterId());
      List<HostVO> hostToUse=new ArrayList<HostVO>();
      if (resourceList != null && resourceList.size() != 0) {
        for (        DedicatedResourceVO resource : resourceList) {
          if ((resource.getClusterId() != null && resource.getClusterId() == cluster.getId()) || (resource.getPodId() != null && resource.getPodId() == podOfCluster.getId()) || (resource.getDataCenterId() != null && resource.getDataCenterId() == zoneOfCluster.getId())) {
            canUse=true;
          }
          if (!canUse) {
            if (resource.getHostId() != null) {
              HostVO dHost=_hostDao.findById(resource.getHostId());
              if (dHost.getClusterId() == cluster.getId()) {
                hostToUse.add(dHost);
              }
            }
          }
        }
      }
      if (hostToUse.isEmpty() && !canUse) {
        throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
      }
      if (hostToUse != null && hostToUse.size() != 0) {
        List<HostVO> hostList=_hostDao.findByClusterId(cluster.getId());
        for (        HostVO host : hostList) {
          if (!hostToUse.contains(host)) {
            avoid.addHost(host.getId());
          }
        }
      }
    }
 else     if (plan.getPodId() != null) {
      HostPodVO pod=_podDao.findById(plan.getPodId());
      DataCenterVO zoneOfPod=_dcDao.findById(pod.getDataCenterId());
      List<ClusterVO> clustersToUse=new ArrayList<ClusterVO>();
      List<HostVO> hostsToUse=new ArrayList<HostVO>();
      if (resourceList != null && resourceList.size() != 0) {
        for (        DedicatedResourceVO resource : resourceList) {
          if ((resource.getPodId() != null && resource.getPodId() == pod.getId()) || (resource.getDataCenterId() != null && resource.getDataCenterId() == zoneOfPod.getId())) {
            canUse=true;
          }
          if (!canUse) {
            if (resource.getClusterId() != null) {
              ClusterVO dCluster=_clusterDao.findById(resource.getClusterId());
              if (dCluster.getPodId() == pod.getId()) {
                clustersToUse.add(dCluster);
              }
            }
            if (resource.getHostId() != null) {
              HostVO dHost=_hostDao.findById(resource.getHostId());
              if (dHost.getPodId() == pod.getId()) {
                hostsToUse.add(dHost);
              }
            }
          }
        }
      }
      if (hostsToUse.isEmpty() && clustersToUse.isEmpty() && !canUse) {
        throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      }
      if (clustersToUse != null && clustersToUse.size() != 0) {
        List<ClusterVO> clusterList=_clusterDao.listByPodId(pod.getId());
        for (        ClusterVO cluster : clusterList) {
          if (!clustersToUse.contains(cluster)) {
            avoid.addCluster(cluster.getId());
          }
        }
      }
      if (hostsToUse != null && hostsToUse.size() != 0) {
        List<HostVO> hostList=_hostDao.findByPodId(pod.getId());
        for (        HostVO host : hostList) {
          if (!hostsToUse.contains(host)) {
            avoid.addHost(host.getId());
          }
        }
      }
    }
 else {
      if (resourceList != null && resourceList.size() != 0) {
        avoid=updateAvoidList(resourceList,avoid,dc);
      }
 else {
        avoid.addDataCenter(dc.getId());
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid() + ""String_Node_Str""+ avoid.getClustersToAvoid()+ ""String_Node_Str""+ avoid.getHostsToAvoid());
      }
    }
  }
}",0.9954254345837146
105855,"@Override public List<ResourceDetailResponse> listResourceDetails(ListResourceDetailsCmd cmd){
  String key=cmd.getKey();
  Boolean forDisplay=cmd.forDisplay();
  ResourceTag.ResourceObjectType resourceType=cmd.getResourceType();
  String resourceIdStr=cmd.getResourceId();
  Long resourceId=null;
  if (resourceIdStr != null) {
    resourceId=_taggedResourceMgr.getResourceId(resourceIdStr,resourceType);
  }
  List<? extends ResourceDetail> detailList=new ArrayList<ResourceDetail>();
  ResourceDetail requestedDetail=null;
  if (key == null) {
    detailList=_resourceMetaDataMgr.getDetailsList(resourceId,resourceType,forDisplay);
  }
 else {
    requestedDetail=_resourceMetaDataMgr.getDetail(resourceId,resourceType,key);
    if (forDisplay != null && requestedDetail.isDisplay() != forDisplay) {
      requestedDetail=null;
    }
  }
  List<ResourceDetailResponse> responseList=new ArrayList<ResourceDetailResponse>();
  if (requestedDetail != null) {
    ResourceDetailResponse detailResponse=createResourceDetailsResponse(requestedDetail,resourceType);
    responseList.add(detailResponse);
  }
 else {
    for (    ResourceDetail detail : detailList) {
      ResourceDetailResponse detailResponse=createResourceDetailsResponse(detail,resourceType);
      responseList.add(detailResponse);
    }
  }
  return responseList;
}","@Override public List<ResourceDetailResponse> listResourceDetails(ListResourceDetailsCmd cmd){
  String key=cmd.getKey();
  Boolean forDisplay=cmd.forDisplay();
  ResourceTag.ResourceObjectType resourceType=cmd.getResourceType();
  String resourceIdStr=cmd.getResourceId();
  Long resourceId=null;
  if (resourceIdStr != null) {
    resourceId=_taggedResourceMgr.getResourceId(resourceIdStr,resourceType);
  }
  if (resourceId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + resourceIdStr + ""String_Node_Str""+ resourceType);
  }
  List<? extends ResourceDetail> detailList=new ArrayList<ResourceDetail>();
  ResourceDetail requestedDetail=null;
  if (key == null) {
    detailList=_resourceMetaDataMgr.getDetailsList(resourceId,resourceType,forDisplay);
  }
 else {
    requestedDetail=_resourceMetaDataMgr.getDetail(resourceId,resourceType,key);
    if (forDisplay != null && requestedDetail.isDisplay() != forDisplay) {
      requestedDetail=null;
    }
  }
  List<ResourceDetailResponse> responseList=new ArrayList<ResourceDetailResponse>();
  if (requestedDetail != null) {
    ResourceDetailResponse detailResponse=createResourceDetailsResponse(requestedDetail,resourceType);
    responseList.add(detailResponse);
  }
 else {
    for (    ResourceDetail detail : detailList) {
      ResourceDetailResponse detailResponse=createResourceDetailsResponse(detail,resourceType);
      responseList.add(detailResponse);
    }
  }
  return responseList;
}",0.947742623533594
105856,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  IAMPermissionResponse other=(IAMPermissionResponse)obj;
  if ((entityType == null && other.entityType != null) || !entityType.equals(other.entityType)) {
    return false;
  }
 else   if ((action == null && other.action != null) || !action.equals(other.action)) {
    return false;
  }
 else   if ((scope == null && other.scope != null) || !scope.equals(other.scope)) {
    return false;
  }
 else   if ((scopeId == null && other.scopeId != null) || !scopeId.equals(other.scopeId)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  IAMPermissionResponse other=(IAMPermissionResponse)obj;
  if ((entityType == null && other.entityType != null) || (entityType != null && !entityType.equals(other.entityType))) {
    return false;
  }
 else   if ((action == null && other.action != null) || (action != null && !action.equals(other.action))) {
    return false;
  }
 else   if ((scope == null && other.scope != null) || (scope != null && !scope.equals(other.scope))) {
    return false;
  }
 else   if ((scopeId == null && other.scopeId != null) || (scopeId != null && !scopeId.equals(other.scopeId))) {
    return false;
  }
  return true;
}",0.9207650273224044
105857,"@DB @Override @ActionEvent(eventType=EventTypes.EVENT_IAM_POLICY_GRANT,eventDescription=""String_Node_Str"") public IAMPolicy addIAMPermissionToIAMPolicy(long iamPolicyId,String entityType,PermissionScope scope,Long scopeId,String action,Permission perm,Boolean recursive){
  Class<?> cmdClass=_apiServer.getCmdClass(action);
  AccessType accessType=null;
  if (BaseListCmd.class.isAssignableFrom(cmdClass)) {
    accessType=AccessType.UseEntry;
  }
  return _iamSrv.addIAMPermissionToIAMPolicy(iamPolicyId,entityType,scope.toString(),scopeId,action,accessType.toString(),perm,recursive);
}","@DB @Override @ActionEvent(eventType=EventTypes.EVENT_IAM_POLICY_GRANT,eventDescription=""String_Node_Str"") public IAMPolicy addIAMPermissionToIAMPolicy(long iamPolicyId,String entityType,PermissionScope scope,Long scopeId,String action,Permission perm,Boolean recursive){
  Class<?> cmdClass=_apiServer.getCmdClass(action);
  AccessType accessType=null;
  if (BaseListCmd.class.isAssignableFrom(cmdClass)) {
    accessType=AccessType.UseEntry;
  }
  String accessTypeStr=(accessType != null) ? accessType.toString() : null;
  return _iamSrv.addIAMPermissionToIAMPolicy(iamPolicyId,entityType,scope.toString(),scopeId,action,accessTypeStr,perm,recursive);
}",0.9228295819935692
105858,"@Override public boolean checkAccess(Account caller,ControlledEntity entity,AccessType accessType,String action) throws PermissionDeniedException {
  if (entity == null && action != null) {
    List<IAMPolicy> policies=_iamSrv.listIAMPolicies(caller.getAccountId());
    boolean isAllowed=_iamSrv.isActionAllowedForPolicies(action,policies);
    if (!isAllowed) {
      throw new PermissionDeniedException(""String_Node_Str"" + action + ""String_Node_Str""+ caller);
    }
    return true;
  }
  String entityType=entity.getEntityType().toString();
  if (accessType == null) {
    accessType=AccessType.UseEntry;
  }
  List<IAMPolicy> policies=getEffectivePolicies(caller,entity);
  HashMap<IAMPolicy,Boolean> policyPermissionMap=new HashMap<IAMPolicy,Boolean>();
  for (  IAMPolicy policy : policies) {
    List<IAMPolicyPermission> permissions=new ArrayList<IAMPolicyPermission>();
    if (action != null) {
      permissions=_iamSrv.listPolicyPermissionByActionAndEntity(policy.getId(),action,entityType);
      if (permissions.isEmpty()) {
        if (accessType != null) {
          permissions.addAll(_iamSrv.listPolicyPermissionByAccessAndEntity(policy.getId(),accessType.toString(),entityType));
        }
      }
    }
 else {
      if (accessType != null) {
        permissions.addAll(_iamSrv.listPolicyPermissionByAccessAndEntity(policy.getId(),accessType.toString(),entityType));
      }
    }
    for (    IAMPolicyPermission permission : permissions) {
      if (checkPermissionScope(caller,permission.getScope(),permission.getScopeId(),entity)) {
        if (permission.getEntityType().equals(entityType)) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
          break;
        }
 else         if (permission.getEntityType().equals(""String_Node_Str"")) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
        }
      }
    }
    if (policyPermissionMap.containsKey(policy) && policyPermissionMap.get(policy)) {
      return true;
    }
  }
  if (!policies.isEmpty()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + caller + ""String_Node_Str""+ entity+ ""String_Node_Str""+ accessType);
    }
    throw new PermissionDeniedException(caller + ""String_Node_Str"" + entity);
  }
  return false;
}","@Override public boolean checkAccess(Account caller,ControlledEntity entity,AccessType accessType,String action) throws PermissionDeniedException {
  if (entity == null && action != null) {
    List<IAMPolicy> policies=_iamSrv.listIAMPolicies(caller.getAccountId());
    boolean isAllowed=_iamSrv.isActionAllowedForPolicies(action,policies);
    if (!isAllowed) {
      throw new PermissionDeniedException(""String_Node_Str"" + action + ""String_Node_Str""+ caller);
    }
    return true;
  }
  if (entity == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String entityType=null;
  if (entity.getEntityType() != null) {
    entityType=entity.getEntityType().toString();
  }
  if (accessType == null) {
    accessType=AccessType.UseEntry;
  }
  List<IAMPolicy> policies=getEffectivePolicies(caller,entity);
  HashMap<IAMPolicy,Boolean> policyPermissionMap=new HashMap<IAMPolicy,Boolean>();
  for (  IAMPolicy policy : policies) {
    List<IAMPolicyPermission> permissions=new ArrayList<IAMPolicyPermission>();
    if (action != null) {
      permissions=_iamSrv.listPolicyPermissionByActionAndEntity(policy.getId(),action,entityType);
      if (permissions.isEmpty()) {
        if (accessType != null) {
          permissions.addAll(_iamSrv.listPolicyPermissionByAccessAndEntity(policy.getId(),accessType.toString(),entityType));
        }
      }
    }
 else {
      if (accessType != null) {
        permissions.addAll(_iamSrv.listPolicyPermissionByAccessAndEntity(policy.getId(),accessType.toString(),entityType));
      }
    }
    for (    IAMPolicyPermission permission : permissions) {
      if (checkPermissionScope(caller,permission.getScope(),permission.getScopeId(),entity)) {
        if (permission.getEntityType().equals(entityType)) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
          break;
        }
 else         if (permission.getEntityType().equals(""String_Node_Str"")) {
          policyPermissionMap.put(policy,permission.getPermission().isGranted());
        }
      }
    }
    if (policyPermissionMap.containsKey(policy) && policyPermissionMap.get(policy)) {
      return true;
    }
  }
  if (!policies.isEmpty()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + caller + ""String_Node_Str""+ entity+ ""String_Node_Str""+ accessType);
    }
    throw new PermissionDeniedException(caller + ""String_Node_Str"" + entity);
  }
  return false;
}",0.9668345927791772
105859,"protected SetSourceNatCommand generateSetSourceNatCommand(){
  IpAddressTO ip=new IpAddressTO(1,""String_Node_Str"",true,true,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false);
  SetSourceNatCommand cmd=new SetSourceNatCommand(ip,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected SetSourceNatCommand generateSetSourceNatCommand(){
  IpAddressTO ip=new IpAddressTO(1,""String_Node_Str"",true,true,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false);
  SetSourceNatCommand cmd=new SetSourceNatCommand(ip,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.99860529986053
105860,"protected SavePasswordCommand generateSavePasswordCommand(){
  SavePasswordCommand cmd=new SavePasswordCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected SavePasswordCommand generateSavePasswordCommand(){
  SavePasswordCommand cmd=new SavePasswordCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9980506822612084
105861,"protected DnsMasqConfigCommand generateDnsMasqConfigCommand(){
  List<DhcpTO> dhcps=new ArrayList<>();
  dhcps.add(new DhcpTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  dhcps.add(new DhcpTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  DnsMasqConfigCommand cmd=new DnsMasqConfigCommand(dhcps);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected DnsMasqConfigCommand generateDnsMasqConfigCommand(){
  List<DhcpTO> dhcps=new ArrayList<>();
  dhcps.add(new DhcpTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  dhcps.add(new DhcpTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  DnsMasqConfigCommand cmd=new DnsMasqConfigCommand(dhcps);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9988726042841036
105862,"protected RemoteAccessVpnCfgCommand generateRemoteAccessVpnCfgCommand2(){
  RemoteAccessVpnCfgCommand cmd=new RemoteAccessVpnCfgCommand(false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  cmd.setLocalCidr(""String_Node_Str"");
  return cmd;
}","protected RemoteAccessVpnCfgCommand generateRemoteAccessVpnCfgCommand2(){
  RemoteAccessVpnCfgCommand cmd=new RemoteAccessVpnCfgCommand(false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  cmd.setLocalCidr(""String_Node_Str"");
  return cmd;
}",0.9985528219971056
105863,"protected RemoteAccessVpnCfgCommand generateRemoteAccessVpnCfgCommand3(){
  RemoteAccessVpnCfgCommand cmd=new RemoteAccessVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  cmd.setLocalCidr(""String_Node_Str"");
  return cmd;
}","protected RemoteAccessVpnCfgCommand generateRemoteAccessVpnCfgCommand3(){
  RemoteAccessVpnCfgCommand cmd=new RemoteAccessVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  cmd.setLocalCidr(""String_Node_Str"");
  return cmd;
}",0.9985443959243084
105864,"protected LoadBalancerConfigCommand generateLoadBalancerConfigCommand1(){
  List<LoadBalancerTO> lbs=new ArrayList<>();
  List<LbDestination> dests=new ArrayList<>();
  dests.add(new LbDestination(80,8080,""String_Node_Str"",false));
  dests.add(new LbDestination(80,8080,""String_Node_Str"",true));
  lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(),""String_Node_Str"",80,""String_Node_Str"",""String_Node_Str"",false,false,false,dests));
  LoadBalancerTO[] arrayLbs=new LoadBalancerTO[lbs.size()];
  lbs.toArray(arrayLbs);
  NicTO nic=new NicTO();
  LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(arrayLbs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nic,null,""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected LoadBalancerConfigCommand generateLoadBalancerConfigCommand1(){
  List<LoadBalancerTO> lbs=new ArrayList<>();
  List<LbDestination> dests=new ArrayList<>();
  dests.add(new LbDestination(80,8080,""String_Node_Str"",false));
  dests.add(new LbDestination(80,8080,""String_Node_Str"",true));
  lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(),""String_Node_Str"",80,""String_Node_Str"",""String_Node_Str"",false,false,false,dests));
  LoadBalancerTO[] arrayLbs=new LoadBalancerTO[lbs.size()];
  lbs.toArray(arrayLbs);
  NicTO nic=new NicTO();
  LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(arrayLbs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nic,null,""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9994229659549914
105865,"protected SetMonitorServiceCommand generateSetMonitorServiceCommand(){
  List<MonitorServiceTO> services=new ArrayList<>();
  services.add(new MonitorServiceTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true));
  services.add(new MonitorServiceTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
  SetMonitorServiceCommand cmd=new SetMonitorServiceCommand(services);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected SetMonitorServiceCommand generateSetMonitorServiceCommand(){
  List<MonitorServiceTO> services=new ArrayList<>();
  services.add(new MonitorServiceTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true));
  services.add(new MonitorServiceTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false));
  SetMonitorServiceCommand cmd=new SetMonitorServiceCommand(services);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9990884229717412
105866,"protected DhcpEntryCommand generateDhcpEntryCommand1(){
  DhcpEntryCommand cmd=new DhcpEntryCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected DhcpEntryCommand generateDhcpEntryCommand1(){
  DhcpEntryCommand cmd=new DhcpEntryCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.998003992015968
105867,"protected LoadBalancerConfigCommand generateLoadBalancerConfigCommand2(){
  List<LoadBalancerTO> lbs=new ArrayList<>();
  List<LbDestination> dests=new ArrayList<>();
  dests.add(new LbDestination(80,8080,""String_Node_Str"",false));
  dests.add(new LbDestination(80,8080,""String_Node_Str"",true));
  lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(),""String_Node_Str"",80,""String_Node_Str"",""String_Node_Str"",false,false,false,dests));
  LoadBalancerTO[] arrayLbs=new LoadBalancerTO[lbs.size()];
  lbs.toArray(arrayLbs);
  NicTO nic=new NicTO();
  nic.setIp(""String_Node_Str"");
  LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(arrayLbs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nic,Long.valueOf(1),""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected LoadBalancerConfigCommand generateLoadBalancerConfigCommand2(){
  List<LoadBalancerTO> lbs=new ArrayList<>();
  List<LbDestination> dests=new ArrayList<>();
  dests.add(new LbDestination(80,8080,""String_Node_Str"",false));
  dests.add(new LbDestination(80,8080,""String_Node_Str"",true));
  lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(),""String_Node_Str"",80,""String_Node_Str"",""String_Node_Str"",false,false,false,dests));
  LoadBalancerTO[] arrayLbs=new LoadBalancerTO[lbs.size()];
  lbs.toArray(arrayLbs);
  NicTO nic=new NicTO();
  nic.setIp(""String_Node_Str"");
  LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(arrayLbs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",nic,Long.valueOf(1),""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.999450247388675
105868,"protected RemoteAccessVpnCfgCommand generateRemoteAccessVpnCfgCommand1(){
  RemoteAccessVpnCfgCommand cmd=new RemoteAccessVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  cmd.setLocalCidr(""String_Node_Str"");
  return cmd;
}","protected RemoteAccessVpnCfgCommand generateRemoteAccessVpnCfgCommand1(){
  RemoteAccessVpnCfgCommand cmd=new RemoteAccessVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  cmd.setLocalCidr(""String_Node_Str"");
  return cmd;
}",0.9985486211901308
105869,"protected DhcpEntryCommand generateDhcpEntryCommand2(){
  DhcpEntryCommand cmd=new DhcpEntryCommand(""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac()));
  return cmd;
}","protected DhcpEntryCommand generateDhcpEntryCommand2(){
  DhcpEntryCommand cmd=new DhcpEntryCommand(""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac()));
  return cmd;
}",0.9983416252072967
105870,"protected DhcpEntryCommand generateDhcpEntryCommand3(){
  DhcpEntryCommand cmd=new DhcpEntryCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac()));
  return cmd;
}","protected DhcpEntryCommand generateDhcpEntryCommand3(){
  DhcpEntryCommand cmd=new DhcpEntryCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac()));
  return cmd;
}",0.9984101748807632
105871,"protected CreateIpAliasCommand generateCreateIpAliasCommand(){
  List<IpAliasTO> aliases=new ArrayList<>();
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  CreateIpAliasCommand cmd=new CreateIpAliasCommand(""String_Node_Str"",aliases);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected CreateIpAliasCommand generateCreateIpAliasCommand(){
  List<IpAliasTO> aliases=new ArrayList<>();
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  CreateIpAliasCommand cmd=new CreateIpAliasCommand(""String_Node_Str"",aliases);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9990521327014218
105872,"@Override public ExecutionResult executeInVR(String routerIp,String script,String args){
  assertEquals(routerIp,ROUTER_IP);
  verifyCommand(_currentCmd,script,args);
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult executeInVR(String routerIp,String script,String args){
  assertEquals(routerIp,ROUTERIP);
  verifyCommand(_currentCmd,script,args);
  return new ExecutionResult(true,null);
}",0.9976019184652278
105873,"protected IpAssocVpcCommand generateIpAssocVpcCommand(){
  List<IpAddressTO> ips=new ArrayList<IpAddressTO>();
  ips.add(new IpAddressTO(1,""String_Node_Str"",true,true,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(2,""String_Node_Str"",false,false,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(3,""String_Node_Str"",true,false,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  IpAddressTO[] ipArray=ips.toArray(new IpAddressTO[ips.size()]);
  IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipArray);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  assertEquals(cmd.getAnswersCount(),6);
  return cmd;
}","protected IpAssocVpcCommand generateIpAssocVpcCommand(){
  List<IpAddressTO> ips=new ArrayList<IpAddressTO>();
  ips.add(new IpAddressTO(1,""String_Node_Str"",true,true,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(2,""String_Node_Str"",false,false,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(3,""String_Node_Str"",true,false,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  IpAddressTO[] ipArray=ips.toArray(new IpAddressTO[ips.size()]);
  IpAssocVpcCommand cmd=new IpAssocVpcCommand(ipArray);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  assertEquals(cmd.getAnswersCount(),6);
  return cmd;
}",0.9993777224642192
105874,"protected SetFirewallRulesCommand generateSetFirewallRulesCommand(){
  List<FirewallRuleTO> rules=new ArrayList<>();
  List<String> sourceCidrs=new ArrayList<>();
  sourceCidrs.add(""String_Node_Str"");
  sourceCidrs.add(""String_Node_Str"");
  rules.add(new FirewallRuleTO(1,""String_Node_Str"",""String_Node_Str"",22,80,false,false,Purpose.Firewall,sourceCidrs,0,0));
  rules.add(new FirewallRuleTO(2,""String_Node_Str"",""String_Node_Str"",0,0,false,false,Purpose.Firewall,sourceCidrs,-1,-1));
  rules.add(new FirewallRuleTO(3,""String_Node_Str"",""String_Node_Str"",0,0,true,true,Purpose.Firewall,sourceCidrs,-1,-1));
  SetFirewallRulesCommand cmd=new SetFirewallRulesCommand(rules);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected SetFirewallRulesCommand generateSetFirewallRulesCommand(){
  List<FirewallRuleTO> rules=new ArrayList<>();
  List<String> sourceCidrs=new ArrayList<>();
  sourceCidrs.add(""String_Node_Str"");
  sourceCidrs.add(""String_Node_Str"");
  rules.add(new FirewallRuleTO(1,""String_Node_Str"",""String_Node_Str"",22,80,false,false,Purpose.Firewall,sourceCidrs,0,0));
  rules.add(new FirewallRuleTO(2,""String_Node_Str"",""String_Node_Str"",0,0,false,false,Purpose.Firewall,sourceCidrs,-1,-1));
  rules.add(new FirewallRuleTO(3,""String_Node_Str"",""String_Node_Str"",0,0,true,true,Purpose.Firewall,sourceCidrs,-1,-1));
  SetFirewallRulesCommand cmd=new SetFirewallRulesCommand(rules);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9993390614672836
105875,"@Override public ExecutionResult prepareCommand(NetworkElementCommand cmd){
  cmd.setRouterAccessIp(ROUTER_IP);
  _currentCmd=cmd;
  if (cmd instanceof IpAssocVpcCommand) {
    return prepareNetworkElementCommand((IpAssocVpcCommand)cmd);
  }
 else   if (cmd instanceof IpAssocCommand) {
    return prepareNetworkElementCommand((IpAssocCommand)cmd);
  }
 else   if (cmd instanceof SetupGuestNetworkCommand) {
    return prepareNetworkElementCommand((SetupGuestNetworkCommand)cmd);
  }
 else   if (cmd instanceof SetSourceNatCommand) {
    return prepareNetworkElementCommand((SetSourceNatCommand)cmd);
  }
 else   if (cmd instanceof SetNetworkACLCommand) {
    return prepareNetworkElementCommand((SetNetworkACLCommand)cmd);
  }
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult prepareCommand(NetworkElementCommand cmd){
  cmd.setRouterAccessIp(ROUTERIP);
  _currentCmd=cmd;
  if (cmd instanceof IpAssocVpcCommand) {
    return prepareNetworkElementCommand((IpAssocVpcCommand)cmd);
  }
 else   if (cmd instanceof IpAssocCommand) {
    return prepareNetworkElementCommand((IpAssocCommand)cmd);
  }
 else   if (cmd instanceof SetupGuestNetworkCommand) {
    return prepareNetworkElementCommand((SetupGuestNetworkCommand)cmd);
  }
 else   if (cmd instanceof SetSourceNatCommand) {
    return prepareNetworkElementCommand((SetSourceNatCommand)cmd);
  }
 else   if (cmd instanceof SetNetworkACLCommand) {
    return prepareNetworkElementCommand((SetNetworkACLCommand)cmd);
  }
  return new ExecutionResult(true,null);
}",0.9993502274204028
105876,"protected SetPortForwardingRulesVpcCommand generateSetPortForwardingRulesVpcCommand(){
  List<PortForwardingRuleTO> pfRules=new ArrayList<>();
  pfRules.add(new PortForwardingRuleTO(1,""String_Node_Str"",22,80,""String_Node_Str"",22,80,""String_Node_Str"",false,false));
  pfRules.add(new PortForwardingRuleTO(2,""String_Node_Str"",8080,8080,""String_Node_Str"",8080,8080,""String_Node_Str"",true,false));
  SetPortForwardingRulesVpcCommand cmd=new SetPortForwardingRulesVpcCommand(pfRules);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  assertEquals(cmd.getAnswersCount(),2);
  return cmd;
}","protected SetPortForwardingRulesVpcCommand generateSetPortForwardingRulesVpcCommand(){
  List<PortForwardingRuleTO> pfRules=new ArrayList<>();
  pfRules.add(new PortForwardingRuleTO(1,""String_Node_Str"",22,80,""String_Node_Str"",22,80,""String_Node_Str"",false,false));
  pfRules.add(new PortForwardingRuleTO(2,""String_Node_Str"",8080,8080,""String_Node_Str"",8080,8080,""String_Node_Str"",true,false));
  SetPortForwardingRulesVpcCommand cmd=new SetPortForwardingRulesVpcCommand(pfRules);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  assertEquals(cmd.getAnswersCount(),2);
  return cmd;
}",0.9991742361684558
105877,"protected SetNetworkACLCommand generateSetNetworkACLCommand(){
  List<NetworkACLTO> acls=new ArrayList<>();
  List<String> cidrs=new ArrayList<>();
  cidrs.add(""String_Node_Str"");
  cidrs.add(""String_Node_Str"");
  acls.add(new NetworkACLTO(1,""String_Node_Str"",""String_Node_Str"",20,80,false,false,cidrs,0,0,TrafficType.Ingress,true,1));
  acls.add(new NetworkACLTO(2,""String_Node_Str"",""String_Node_Str"",0,0,false,false,cidrs,-1,-1,TrafficType.Ingress,false,2));
  acls.add(new NetworkACLTO(3,""String_Node_Str"",""String_Node_Str"",0,0,false,false,cidrs,-1,-1,TrafficType.Egress,true,3));
  NicTO nic=new NicTO();
  nic.setMac(""String_Node_Str"");
  nic.setIp(""String_Node_Str"");
  nic.setNetmask(""String_Node_Str"");
  SetNetworkACLCommand cmd=new SetNetworkACLCommand(acls,nic);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected SetNetworkACLCommand generateSetNetworkACLCommand(){
  List<NetworkACLTO> acls=new ArrayList<>();
  List<String> cidrs=new ArrayList<>();
  cidrs.add(""String_Node_Str"");
  cidrs.add(""String_Node_Str"");
  acls.add(new NetworkACLTO(1,""String_Node_Str"",""String_Node_Str"",20,80,false,false,cidrs,0,0,TrafficType.Ingress,true,1));
  acls.add(new NetworkACLTO(2,""String_Node_Str"",""String_Node_Str"",0,0,false,false,cidrs,-1,-1,TrafficType.Ingress,false,2));
  acls.add(new NetworkACLTO(3,""String_Node_Str"",""String_Node_Str"",0,0,false,false,cidrs,-1,-1,TrafficType.Egress,true,3));
  NicTO nic=new NicTO();
  nic.setMac(""String_Node_Str"");
  nic.setIp(""String_Node_Str"");
  nic.setNetmask(""String_Node_Str"");
  SetNetworkACLCommand cmd=new SetNetworkACLCommand(acls,nic);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9994175888177051
105878,"@Test public void testSite2SiteVpnCfgCommand(){
  _count=0;
  Site2SiteVpnCfgCommand cmd=new Site2SiteVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Long.valueOf(1800),Long.valueOf(1800),true,false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  Answer answer=_resource.executeRequest(cmd);
  assertTrue(answer.getResult());
  cmd=new Site2SiteVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Long.valueOf(1800),Long.valueOf(1800),false,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  answer=_resource.executeRequest(cmd);
  assertTrue(answer.getResult());
  cmd=new Site2SiteVpnCfgCommand(false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Long.valueOf(1800),Long.valueOf(1800),false,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  answer=_resource.executeRequest(cmd);
  assertTrue(answer.getResult());
}","@Test public void testSite2SiteVpnCfgCommand(){
  _count=0;
  Site2SiteVpnCfgCommand cmd=new Site2SiteVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Long.valueOf(1800),Long.valueOf(1800),true,false);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  Answer answer=_resource.executeRequest(cmd);
  assertTrue(answer.getResult());
  cmd=new Site2SiteVpnCfgCommand(true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Long.valueOf(1800),Long.valueOf(1800),false,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  answer=_resource.executeRequest(cmd);
  assertTrue(answer.getResult());
  cmd=new Site2SiteVpnCfgCommand(false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Long.valueOf(1800),Long.valueOf(1800),false,true);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  answer=_resource.executeRequest(cmd);
  assertTrue(answer.getResult());
}",0.9987720016373312
105879,"protected DeleteIpAliasCommand generateDeleteIpAliasCommand(){
  List<IpAliasTO> aliases=new ArrayList<>();
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  DeleteIpAliasCommand cmd=new DeleteIpAliasCommand(""String_Node_Str"",aliases,aliases);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected DeleteIpAliasCommand generateDeleteIpAliasCommand(){
  List<IpAliasTO> aliases=new ArrayList<>();
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  aliases.add(new IpAliasTO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  DeleteIpAliasCommand cmd=new DeleteIpAliasCommand(""String_Node_Str"",aliases,aliases);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9990662931839402
105880,"@Test public void testAggregationCommands(){
  List<NetworkElementCommand> cmds=new LinkedList<>();
  StartAggregationCommand startCmd=new StartAggregationCommand(ROUTER_NAME,ROUTER_IP,ROUTER_GUEST_IP);
  cmds.add(startCmd);
  cmds.add(generateIpAssocCommand());
  cmds.add(generateIpAssocVpcCommand());
  cmds.add(generateSetFirewallRulesCommand());
  cmds.add(generateSetPortForwardingRulesCommand());
  cmds.add(generateSetPortForwardingRulesVpcCommand());
  cmds.add(generateCreateIpAliasCommand());
  cmds.add(generateDeleteIpAliasCommand());
  cmds.add(generateDnsMasqConfigCommand());
  cmds.add(generateRemoteAccessVpnCfgCommand1());
  cmds.add(generateRemoteAccessVpnCfgCommand2());
  cmds.add(generateRemoteAccessVpnCfgCommand3());
  cmds.add(generateSetPortForwardingRulesCommand());
  cmds.add(generateSetPortForwardingRulesVpcCommand());
  cmds.add(generateDhcpEntryCommand1());
  cmds.add(generateDhcpEntryCommand2());
  cmds.add(generateDhcpEntryCommand3());
  cmds.add(generateSavePasswordCommand());
  cmds.add(generateVmDataCommand());
  FinishAggregationCommand finishCmd=new FinishAggregationCommand(ROUTER_NAME,ROUTER_IP,ROUTER_GUEST_IP);
  cmds.add(finishCmd);
  for (  NetworkElementCommand cmd : cmds) {
    Answer answer=_resource.executeRequest(cmd);
    if (!(cmd instanceof FinishAggregationCommand)) {
      assertTrue(answer.getResult());
    }
 else {
    }
  }
}","@Test public void testAggregationCommands(){
  List<NetworkElementCommand> cmds=new LinkedList<>();
  StartAggregationCommand startCmd=new StartAggregationCommand(ROUTERNAME,ROUTERIP,ROUTERGUESTIP);
  cmds.add(startCmd);
  cmds.add(generateIpAssocCommand());
  cmds.add(generateIpAssocVpcCommand());
  cmds.add(generateSetFirewallRulesCommand());
  cmds.add(generateSetPortForwardingRulesCommand());
  cmds.add(generateSetPortForwardingRulesVpcCommand());
  cmds.add(generateCreateIpAliasCommand());
  cmds.add(generateDeleteIpAliasCommand());
  cmds.add(generateDnsMasqConfigCommand());
  cmds.add(generateRemoteAccessVpnCfgCommand1());
  cmds.add(generateRemoteAccessVpnCfgCommand2());
  cmds.add(generateRemoteAccessVpnCfgCommand3());
  cmds.add(generateSetPortForwardingRulesCommand());
  cmds.add(generateSetPortForwardingRulesVpcCommand());
  cmds.add(generateDhcpEntryCommand1());
  cmds.add(generateDhcpEntryCommand2());
  cmds.add(generateDhcpEntryCommand3());
  cmds.add(generateSavePasswordCommand());
  cmds.add(generateVmDataCommand());
  FinishAggregationCommand finishCmd=new FinishAggregationCommand(ROUTERNAME,ROUTERIP,ROUTERGUESTIP);
  cmds.add(finishCmd);
  for (  NetworkElementCommand cmd : cmds) {
    Answer answer=_resource.executeRequest(cmd);
    if (!(cmd instanceof FinishAggregationCommand)) {
      assertTrue(answer.getResult());
    }
 else {
    }
  }
}",0.9971223021582734
105881,"protected SetPortForwardingRulesCommand generateSetPortForwardingRulesCommand(){
  List<PortForwardingRuleTO> pfRules=new ArrayList<>();
  pfRules.add(new PortForwardingRuleTO(1,""String_Node_Str"",22,80,""String_Node_Str"",22,80,""String_Node_Str"",false,false));
  pfRules.add(new PortForwardingRuleTO(2,""String_Node_Str"",8080,8080,""String_Node_Str"",8080,8080,""String_Node_Str"",true,false));
  SetPortForwardingRulesCommand cmd=new SetPortForwardingRulesCommand(pfRules);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  assertEquals(cmd.getAnswersCount(),2);
  return cmd;
}","protected SetPortForwardingRulesCommand generateSetPortForwardingRulesCommand(){
  List<PortForwardingRuleTO> pfRules=new ArrayList<>();
  pfRules.add(new PortForwardingRuleTO(1,""String_Node_Str"",22,80,""String_Node_Str"",22,80,""String_Node_Str"",false,false));
  pfRules.add(new PortForwardingRuleTO(2,""String_Node_Str"",8080,8080,""String_Node_Str"",8080,8080,""String_Node_Str"",true,false));
  SetPortForwardingRulesCommand cmd=new SetPortForwardingRulesCommand(pfRules);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  assertEquals(cmd.getAnswersCount(),2);
  return cmd;
}",0.9991575400168492
105882,"@Override public ExecutionResult createFileInVR(String routerIp,String path,String filename,String content){
  assertEquals(routerIp,ROUTER_IP);
  verifyFile(_currentCmd,path,filename,content);
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult createFileInVR(String routerIp,String path,String filename,String content){
  assertEquals(routerIp,ROUTERIP);
  verifyFile(_currentCmd,path,filename,content);
  return new ExecutionResult(true,null);
}",0.9978768577494692
105883,"protected VmDataCommand generateVmDataCommand(){
  VmDataCommand cmd=new VmDataCommand(""String_Node_Str"",""String_Node_Str"",true);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected VmDataCommand generateVmDataCommand(){
  VmDataCommand cmd=new VmDataCommand(""String_Node_Str"",""String_Node_Str"",true);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.9995032290114256
105884,"protected IpAssocCommand generateIpAssocCommand(){
  List<IpAddressTO> ips=new ArrayList<>();
  ips.add(new IpAddressTO(1,""String_Node_Str"",true,true,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(2,""String_Node_Str"",false,false,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(3,""String_Node_Str"",true,false,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  IpAddressTO[] ipArray=ips.toArray(new IpAddressTO[ips.size()]);
  IpAssocCommand cmd=new IpAssocCommand(ipArray);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  assertEquals(cmd.getAnswersCount(),3);
  return cmd;
}","protected IpAssocCommand generateIpAssocCommand(){
  List<IpAddressTO> ips=new ArrayList<>();
  ips.add(new IpAddressTO(1,""String_Node_Str"",true,true,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(2,""String_Node_Str"",false,false,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  ips.add(new IpAddressTO(3,""String_Node_Str"",true,false,false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1000,false));
  IpAddressTO[] ipArray=ips.toArray(new IpAddressTO[ips.size()]);
  IpAssocCommand cmd=new IpAssocCommand(ipArray);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  assertEquals(cmd.getAnswersCount(),3);
  return cmd;
}",0.999360204734485
105885,"protected SetupGuestNetworkCommand generateSetupGuestNetworkCommand(){
  NicTO nic=new NicTO();
  nic.setMac(""String_Node_Str"");
  nic.setIp(""String_Node_Str"");
  nic.setNetmask(""String_Node_Str"");
  SetupGuestNetworkCommand cmd=new SetupGuestNetworkCommand(""String_Node_Str"",""String_Node_Str"",false,0,""String_Node_Str"",""String_Node_Str"",true,nic);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTER_NAME);
  return cmd;
}","protected SetupGuestNetworkCommand generateSetupGuestNetworkCommand(){
  NicTO nic=new NicTO();
  nic.setMac(""String_Node_Str"");
  nic.setIp(""String_Node_Str"");
  nic.setNetmask(""String_Node_Str"");
  SetupGuestNetworkCommand cmd=new SetupGuestNetworkCommand(""String_Node_Str"",""String_Node_Str"",false,0,""String_Node_Str"",""String_Node_Str"",true,nic);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,""String_Node_Str"");
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,ROUTERNAME);
  return cmd;
}",0.999165971643036
105886,"@Override public Long getPermissionScopeId(String scope,String entityType,String scopeId){
  if (scopeId.equals(""String_Node_Str"")) {
    return -1L;
  }
  PermissionScope permScope=PermissionScope.valueOf(scope);
  InternalIdentity entity=null;
switch (permScope) {
case DOMAIN:
    entity=_domainDao.findByUuid(scopeId);
  break;
case ACCOUNT:
entity=_accountDao.findByUuid(scopeId);
break;
case RESOURCE:
Class<?> clazz=s_typeMap.get(entityType);
entity=(InternalIdentity)_entityMgr.findByUuid(clazz,scopeId);
}
if (entity != null) {
return entity.getId();
}
throw new InvalidParameterValueException(""String_Node_Str"" + scopeId + ""String_Node_Str""+ scope+ ""String_Node_Str""+ entityType);
}","@Override public Long getPermissionScopeId(String scope,String entityType,String scopeId){
  if (scopeId.equals(""String_Node_Str"")) {
    return -1L;
  }
  PermissionScope permScope=PermissionScope.valueOf(scope);
  InternalIdentity entity=null;
switch (permScope) {
case DOMAIN:
    entity=_domainDao.findByUuid(scopeId);
  break;
case ACCOUNT:
entity=_accountDao.findByUuid(scopeId);
break;
case RESOURCE:
Class<?> clazz=s_typeMap.get(IAMEntityType.valueOf(entityType));
entity=(InternalIdentity)_entityMgr.findByUuid(clazz,scopeId);
}
if (entity != null) {
return entity.getId();
}
throw new InvalidParameterValueException(""String_Node_Str"" + scopeId + ""String_Node_Str""+ scope+ ""String_Node_Str""+ entityType);
}",0.9822316986496092
105887,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  ListByAccountId=createSearchBuilder();
  ListByAccountId.and(""String_Node_Str"",ListByAccountId.entity().getAccountId(),SearchCriteria.Op.EQ);
  ListByAccountId.done();
  ListByPolicyId=createSearchBuilder();
  ListByPolicyId.and(""String_Node_Str"",ListByPolicyId.entity().getIAMPolicyId(),SearchCriteria.Op.EQ);
  ListByPolicyId.done();
  findByPolicyAccountId=createSearchBuilder();
  findByPolicyAccountId.and(""String_Node_Str"",findByPolicyAccountId.entity().getIAMPolicyId(),SearchCriteria.Op.EQ);
  findByPolicyAccountId.and(""String_Node_Str"",findByPolicyAccountId.entity().getAccountId(),SearchCriteria.Op.EQ);
  findByPolicyAccountId.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  ListByAccountId=createSearchBuilder();
  ListByAccountId.and(""String_Node_Str"",ListByAccountId.entity().getAccountId(),SearchCriteria.Op.EQ);
  ListByAccountId.done();
  ListByPolicyId=createSearchBuilder();
  ListByPolicyId.and(""String_Node_Str"",ListByPolicyId.entity().getIamPolicyId(),SearchCriteria.Op.EQ);
  ListByPolicyId.done();
  findByPolicyAccountId=createSearchBuilder();
  findByPolicyAccountId.and(""String_Node_Str"",findByPolicyAccountId.entity().getIamPolicyId(),SearchCriteria.Op.EQ);
  findByPolicyAccountId.and(""String_Node_Str"",findByPolicyAccountId.entity().getAccountId(),SearchCriteria.Op.EQ);
  findByPolicyAccountId.done();
  return true;
}",0.9950186799501868
105888,"@Override public void removeIAMPolicyFromAccounts(final Long policyId,final List<Long> acctIds){
  IAMPolicy policy=_aclPolicyDao.findById(policyId);
  if (policy == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + policyId + ""String_Node_Str"");
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      Long acctId : acctIds) {
        IAMAccountPolicyMapVO acctMap=_aclAccountPolicyMapDao.findByAccountAndPolicy(acctId,policyId);
        if (acctMap == null) {
          acctMap=new IAMAccountPolicyMapVO(acctId,policyId);
          _aclAccountPolicyMapDao.remove(acctMap.getId());
        }
      }
    }
  }
);
}","@Override public void removeIAMPolicyFromAccounts(final Long policyId,final List<Long> acctIds){
  IAMPolicy policy=_aclPolicyDao.findById(policyId);
  if (policy == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + policyId + ""String_Node_Str"");
  }
  Transaction.execute(new TransactionCallbackNoReturn(){
    @Override public void doInTransactionWithoutResult(    TransactionStatus status){
      for (      Long acctId : acctIds) {
        IAMAccountPolicyMapVO acctMap=_aclAccountPolicyMapDao.findByAccountAndPolicy(acctId,policyId);
        if (acctMap != null) {
          _aclAccountPolicyMapDao.remove(acctMap.getId());
        }
      }
    }
  }
);
}",0.9552447552447552
105889,"/** 
 * This is a tricky to create network in xenserver. if you create a network then create bridge by brctl or openvswitch yourself, then you will get an expection that is ""REQUIRED_NETWROK"" when you start a vm with this network. The soultion is, create a vif of dom0 and plug it in network, xenserver will create the bridge on behalf of you
 * @throws XmlRpcException
 * @throws XenAPIException
 */
private void enableXenServerNetwork(Connection conn,Network nw,String vifNameLabel,String networkDesc) throws XenAPIException, XmlRpcException {
  VIF dom0vif=null;
  Pair<VM,VM.Record> vm=getControlDomain(conn);
  VM dom0=vm.first();
  Set<VIF> dom0Vifs=dom0.getVIFs(conn);
  for (  VIF vif : dom0Vifs) {
    vif.getRecord(conn);
    if (vif.getNetwork(conn).getUuid(conn) == nw.getUuid(conn)) {
      dom0vif=vif;
      s_logger.debug(""String_Node_Str"");
    }
  }
  if (dom0vif == null) {
    s_logger.debug(""String_Node_Str"" + networkDesc);
    VIF.Record vifr=new VIF.Record();
    vifr.VM=dom0;
    vifr.device=getLowestAvailableVIFDeviceNum(conn,dom0);
    if (vifr.device == null) {
      s_logger.debug(""String_Node_Str"" + networkDesc + ""String_Node_Str"");
      return;
    }
    Map<String,String> config=new HashMap<String,String>();
    config.put(""String_Node_Str"",vifNameLabel);
    vifr.otherConfig=config;
    vifr.MAC=""String_Node_Str"";
    vifr.network=nw;
    vifr.lockingMode=Types.VifLockingMode.NETWORK_DEFAULT;
    dom0vif=VIF.create(conn,vifr);
  }
  dom0vif.plug(conn);
  dom0vif.unplug(conn);
synchronized (_tmpDom0Vif) {
    _tmpDom0Vif.add(dom0vif);
  }
}","/** 
 * This is a tricky to create network in xenserver. if you create a network then create bridge by brctl or openvswitch yourself, then you will get an expection that is ""REQUIRED_NETWROK"" when you start a vm with this network. The soultion is, create a vif of dom0 and plug it in network, xenserver will create the bridge on behalf of you
 * @throws XmlRpcException
 * @throws XenAPIException
 */
private void enableXenServerNetwork(Connection conn,Network nw,String vifNameLabel,String networkDesc) throws XenAPIException, XmlRpcException {
  VIF dom0vif=null;
  Pair<VM,VM.Record> vm=getControlDomain(conn);
  VM dom0=vm.first();
  Set<VIF> dom0Vifs=dom0.getVIFs(conn);
  for (  VIF vif : dom0Vifs) {
    vif.getRecord(conn);
    if (vif.getNetwork(conn).getUuid(conn).equals(nw.getUuid(conn))) {
      dom0vif=vif;
      s_logger.debug(""String_Node_Str"");
    }
  }
  if (dom0vif == null) {
    s_logger.debug(""String_Node_Str"" + networkDesc);
    VIF.Record vifr=new VIF.Record();
    vifr.VM=dom0;
    vifr.device=getLowestAvailableVIFDeviceNum(conn,dom0);
    if (vifr.device == null) {
      s_logger.debug(""String_Node_Str"" + networkDesc + ""String_Node_Str"");
      return;
    }
    Map<String,String> config=new HashMap<String,String>();
    config.put(""String_Node_Str"",vifNameLabel);
    vifr.otherConfig=config;
    vifr.MAC=""String_Node_Str"";
    vifr.network=nw;
    vifr.lockingMode=Types.VifLockingMode.NETWORK_DEFAULT;
    dom0vif=VIF.create(conn,vifr);
  }
  dom0vif.plug(conn);
  dom0vif.unplug(conn);
synchronized (_tmpDom0Vif) {
    _tmpDom0Vif.add(dom0vif);
  }
}",0.9959055118110236
105890,"public static AsyncJobExecutionContext getCurrentExecutionContext(){
  AsyncJobExecutionContext context=s_currentExectionContext.get();
  if (context == null) {
    s_logger.warn(""String_Node_Str"");
    context=registerPseudoExecutionContext(CallContext.current().getCallingAccountId(),CallContext.current().getCallingUserId());
  }
  return context;
}","public static AsyncJobExecutionContext getCurrentExecutionContext(){
  AsyncJobExecutionContext context=s_currentExectionContext.get();
  if (context == null) {
    s_logger.warn(""String_Node_Str"");
    if (CallContext.current() != null)     context=registerPseudoExecutionContext(CallContext.current().getCallingAccountId(),CallContext.current().getCallingUserId());
 else     context=registerPseudoExecutionContext(Account.ACCOUNT_ID_SYSTEM,User.UID_SYSTEM);
  }
  return context;
}",0.8421052631578947
105891,"private void secondaryIpsAccountAndDomainIdsUpdate(Connection conn){
  PreparedStatement pstmt=null;
  PreparedStatement pstmtVm=null;
  PreparedStatement pstmtNw=null;
  PreparedStatement pstmtUpdate=null;
  ResultSet rs1=null;
  ResultSet vmRs=null;
  ResultSet networkRs=null;
  String secondIpsSql=""String_Node_Str"";
  try {
    pstmt=conn.prepareStatement(secondIpsSql);
    rs1=pstmt.executeQuery();
    while (rs1.next()) {
      long ipId=rs1.getLong(1);
      long vmId=rs1.getLong(2);
      long networkId=rs1.getLong(3);
      long accountId=rs1.getLong(4);
      long domainId=rs1.getLong(5);
      String ipAddr=rs1.getString(6);
      pstmtVm=conn.prepareStatement(""String_Node_Str"");
      pstmtVm.setLong(1,vmId);
      vmRs=pstmtVm.executeQuery();
      if (vmRs.next()) {
        long vmAccountId=vmRs.getLong(1);
        long vmDomainId=vmRs.getLong(2);
        if (vmAccountId != accountId && vmAccountId != domainId) {
          pstmtUpdate=conn.prepareStatement(""String_Node_Str"");
          pstmtUpdate.setLong(1,vmAccountId);
          pstmtUpdate.setLong(2,vmDomainId);
          pstmtUpdate.setLong(3,ipId);
          pstmtUpdate.executeUpdate();
          pstmtUpdate.close();
          pstmtNw=conn.prepareStatement(""String_Node_Str"");
          pstmtNw.setLong(1,networkId);
          networkRs=pstmtNw.executeQuery();
          if (networkRs.next()) {
            String guesttype=networkRs.getString(1);
            if (guesttype == Network.GuestType.Shared.toString()) {
              pstmtUpdate=conn.prepareStatement(""String_Node_Str"");
              pstmtUpdate.setLong(1,vmAccountId);
              pstmtUpdate.setLong(2,vmDomainId);
              pstmtUpdate.setString(3,ipAddr);
              pstmtUpdate.executeUpdate();
              pstmtUpdate.close();
            }
          }
          networkRs.close();
          networkRs=null;
          pstmtNw.close();
          pstmtNw=null;
        }
      }
      pstmtVm.close();
      pstmtVm=null;
      vmRs.close();
      vmRs=null;
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
    if (rs1 != null) {
      try {
        rs1.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmtVm != null) {
      try {
        pstmtVm.close();
      }
 catch (      SQLException e) {
      }
    }
    if (vmRs != null) {
      try {
        vmRs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmtNw != null) {
      try {
        pstmtNw.close();
      }
 catch (      SQLException e) {
      }
    }
    if (networkRs != null) {
      try {
        networkRs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  s_logger.debug(""String_Node_Str"");
}","private void secondaryIpsAccountAndDomainIdsUpdate(Connection conn){
  PreparedStatement pstmt=null;
  PreparedStatement pstmtVm=null;
  PreparedStatement pstmtNw=null;
  PreparedStatement pstmtUpdate=null;
  ResultSet rs1=null;
  ResultSet vmRs=null;
  ResultSet networkRs=null;
  String secondIpsSql=""String_Node_Str"";
  try {
    pstmt=conn.prepareStatement(secondIpsSql);
    rs1=pstmt.executeQuery();
    while (rs1.next()) {
      long ipId=rs1.getLong(1);
      long vmId=rs1.getLong(2);
      long networkId=rs1.getLong(3);
      long accountId=rs1.getLong(4);
      long domainId=rs1.getLong(5);
      String ipAddr=rs1.getString(6);
      pstmtVm=conn.prepareStatement(""String_Node_Str"");
      pstmtVm.setLong(1,vmId);
      vmRs=pstmtVm.executeQuery();
      if (vmRs.next()) {
        long vmAccountId=vmRs.getLong(1);
        long vmDomainId=vmRs.getLong(2);
        if (vmAccountId != accountId && vmAccountId != domainId) {
          pstmtUpdate=conn.prepareStatement(""String_Node_Str"");
          pstmtUpdate.setLong(1,vmAccountId);
          pstmtUpdate.setLong(2,vmDomainId);
          pstmtUpdate.setLong(3,ipId);
          pstmtUpdate.executeUpdate();
          pstmtUpdate.close();
          pstmtNw=conn.prepareStatement(""String_Node_Str"");
          pstmtNw.setLong(1,networkId);
          networkRs=pstmtNw.executeQuery();
          if (networkRs.next()) {
            String guesttype=networkRs.getString(1);
            if (guesttype.equals(Network.GuestType.Shared.toString())) {
              pstmtUpdate=conn.prepareStatement(""String_Node_Str"");
              pstmtUpdate.setLong(1,vmAccountId);
              pstmtUpdate.setLong(2,vmDomainId);
              pstmtUpdate.setString(3,ipAddr);
              pstmtUpdate.executeUpdate();
              pstmtUpdate.close();
            }
          }
          networkRs.close();
          networkRs=null;
          pstmtNw.close();
          pstmtNw=null;
        }
      }
      pstmtVm.close();
      pstmtVm=null;
      vmRs.close();
      vmRs=null;
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
    if (rs1 != null) {
      try {
        rs1.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmtVm != null) {
      try {
        pstmtVm.close();
      }
 catch (      SQLException e) {
      }
    }
    if (vmRs != null) {
      try {
        vmRs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmtNw != null) {
      try {
        pstmtNw.close();
      }
 catch (      SQLException e) {
      }
    }
    if (networkRs != null) {
      try {
        networkRs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  s_logger.debug(""String_Node_Str"");
}",0.997738737171682
105892,"@Override public int compare(Object o1,Object o2){
  long seq1=((Request)o1).getSequence();
  long seq2=(Long)o2;
  if (seq1 < seq2) {
    return -1;
  }
 else   if (seq1 > seq2) {
    return 1;
  }
 else {
    return 0;
  }
}","@Override public int compare(final Object o1,final Object o2){
  long seq1=((Request)o1).getSequence();
  long seq2=(Long)o2;
  if (seq1 < seq2) {
    return -1;
  }
 else   if (seq1 > seq2) {
    return 1;
  }
 else {
    return 0;
  }
}",0.9741379310344828
105893,"protected AgentAttache(AgentManagerImpl agentMgr,final long id,final String name,boolean maintenance){
  _id=id;
  _name=name;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
  _agentMgr=agentMgr;
  _nextSequence=new Long(s_rand.nextInt(Short.MAX_VALUE)) << 48;
  _outstandingTaskCount=new AtomicInteger(0);
}","protected AgentAttache(final AgentManagerImpl agentMgr,final long id,final String name,final boolean maintenance){
  _id=id;
  _name=name;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
  _agentMgr=agentMgr;
  _nextSequence=new Long(s_rand.nextInt(Short.MAX_VALUE)) << 48;
  _outstandingTaskCount=new AtomicInteger(0);
}",0.9855072463768116
105894,"protected synchronized void addRequest(Request req){
}","protected synchronized void addRequest(final Request req){
}",0.9473684210526316
105895,"public void process(Answer[] answers){
}","public void process(final Answer[] answers){
}",0.9302325581395348
105896,"protected synchronized int findRequest(long seq){
  return Collections.binarySearch(_requests,seq,s_seqComparator);
}","protected synchronized int findRequest(final long seq){
  return Collections.binarySearch(_requests,seq,s_seqComparator);
}",0.975
105897,"@Override public boolean equals(Object obj){
}","@Override public boolean equals(final Object obj){
  if (obj == null) {
    return false;
  }
  if (this.getClass() != obj.getClass()) {
    return false;
  }
  AgentAttache that=(AgentAttache)obj;
  return _id == that._id;
}",0.3394833948339483
105898,"public Alarm(long seq){
  _seq=seq;
}","public Alarm(final long seq){
  _seq=seq;
}",0.925
105899,"@Override public void cancel(long seq){
  if (forForward()) {
    Listener listener=getListener(seq);
    if (listener != null && listener instanceof SynchronousListener) {
      SynchronousListener synchronous=(SynchronousListener)listener;
      String peerName=synchronous.getPeer();
      if (peerName != null) {
        if (s_clusteredAgentMgr != null) {
          s_logger.debug(log(seq,""String_Node_Str""));
          s_clusteredAgentMgr.cancel(peerName,_id,seq,""String_Node_Str"");
        }
 else {
          s_logger.error(""String_Node_Str"");
        }
      }
    }
  }
  super.cancel(seq);
}","@Override public void cancel(final long seq){
  if (forForward()) {
    Listener listener=getListener(seq);
    if (listener != null && listener instanceof SynchronousListener) {
      SynchronousListener synchronous=(SynchronousListener)listener;
      String peerName=synchronous.getPeer();
      if (peerName != null) {
        if (s_clusteredAgentMgr != null) {
          s_logger.debug(log(seq,""String_Node_Str""));
          s_clusteredAgentMgr.cancel(peerName,_id,seq,""String_Node_Str"");
        }
 else {
          s_logger.error(""String_Node_Str"");
        }
      }
    }
  }
  super.cancel(seq);
}",0.9950331125827816
105900,"public boolean getTransferMode(){
  return _transferMode;
}","public synchronized boolean getTransferMode(){
  return _transferMode;
}",0.900763358778626
105901,"@Override public void routeToAgent(byte[] data) throws AgentUnavailableException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(log(Request.getSequence(data),""String_Node_Str"" + Request.getManagementServerId(data)));
  }
  if (_link == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(Request.getSequence(data),""String_Node_Str""));
    }
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
  try {
    _link.send(data);
  }
 catch (  ClosedChannelException e) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(Request.getSequence(data),""String_Node_Str""));
    }
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
catch (  NullPointerException e) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(Request.getSequence(data),""String_Node_Str""));
    }
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
}","@Override public void routeToAgent(final byte[] data) throws AgentUnavailableException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(log(Request.getSequence(data),""String_Node_Str"" + Request.getManagementServerId(data)));
  }
  if (_link == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(Request.getSequence(data),""String_Node_Str""));
    }
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
  try {
    _link.send(data);
  }
 catch (  ClosedChannelException e) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(Request.getSequence(data),""String_Node_Str""));
    }
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
catch (  NullPointerException e) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(Request.getSequence(data),""String_Node_Str""));
    }
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
}",0.9967141292442496
105902,"public ClusteredAgentAttache(AgentManagerImpl agentMgr,long id,String name,Link link,boolean maintenance){
  super(agentMgr,id,name,link,maintenance);
  _forward=link == null;
  _transferRequests=new LinkedList<Request>();
}","public ClusteredAgentAttache(final AgentManagerImpl agentMgr,final long id,final String name,final Link link,final boolean maintenance){
  super(agentMgr,id,name,link,maintenance);
  _forward=link == null;
  _transferRequests=new LinkedList<Request>();
}",0.9037656903765692
105903,"protected synchronized int findTransferRequest(Request req){
  return Collections.binarySearch(_transferRequests,req,s_reqComparator);
}","protected synchronized int findTransferRequest(final Request req){
  return Collections.binarySearch(_transferRequests,req,s_reqComparator);
}",0.9784172661870504
105904,"protected synchronized void addRequestToTransfer(Request req){
}","protected synchronized void addRequestToTransfer(final Request req){
}",0.9552238805970148
105905,"static public void initialize(ClusteredAgentManagerImpl agentMgr){
  s_clusteredAgentMgr=agentMgr;
}","static public void initialize(final ClusteredAgentManagerImpl agentMgr){
  s_clusteredAgentMgr=agentMgr;
}",0.970873786407767
105906,"@Override public void send(Request req,Listener listener) throws AgentUnavailableException {
  if (_link != null) {
    super.send(req,listener);
    return;
  }
  long seq=req.getSequence();
  if (listener != null) {
    registerListener(req.getSequence(),listener);
  }
  if (_transferMode) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(seq,""String_Node_Str""));
    }
synchronized (this) {
      addRequestToTransfer(req);
      return;
    }
  }
  if (s_clusteredAgentMgr == null) {
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
  int i=0;
  SocketChannel ch=null;
  boolean error=true;
  try {
    while (i++ < 5) {
      String peerName=s_clusteredAgentMgr.findPeer(_id);
      if (peerName == null) {
        throw new AgentUnavailableException(""String_Node_Str"",_id);
      }
      ch=s_clusteredAgentMgr.connectToPeer(peerName,ch);
      if (ch == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(log(seq,""String_Node_Str"" + req.toString()));
        }
        continue;
      }
      SSLEngine sslEngine=s_clusteredAgentMgr.getSSLEngine(peerName);
      if (sslEngine == null) {
        throw new AgentUnavailableException(""String_Node_Str"" + peerName,_id);
      }
      try {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(log(seq,""String_Node_Str"" + req.toString() + ""String_Node_Str""+ peerName));
        }
        if (req.executeInSequence() && listener != null && listener instanceof SynchronousListener) {
          SynchronousListener synchronous=(SynchronousListener)listener;
          synchronous.setPeer(peerName);
        }
        Link.write(ch,req.toBytes(),sslEngine);
        error=false;
        return;
      }
 catch (      IOException e) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(log(seq,""String_Node_Str"" + req.toString() + ""String_Node_Str""+ i));
        }
        if (s_logger.isInfoEnabled()) {
          s_logger.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ peerName+ ""String_Node_Str"");
        }
      }
    }
  }
  finally {
    if (error) {
      unregisterListener(seq);
    }
  }
  throw new AgentUnavailableException(""String_Node_Str"",_id);
}","@Override public void send(final Request req,final Listener listener) throws AgentUnavailableException {
  if (_link != null) {
    super.send(req,listener);
    return;
  }
  long seq=req.getSequence();
  if (listener != null) {
    registerListener(req.getSequence(),listener);
  }
  if (_transferMode) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(seq,""String_Node_Str""));
    }
synchronized (this) {
      addRequestToTransfer(req);
      return;
    }
  }
  if (s_clusteredAgentMgr == null) {
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
  int i=0;
  SocketChannel ch=null;
  boolean error=true;
  try {
    while (i++ < 5) {
      String peerName=s_clusteredAgentMgr.findPeer(_id);
      if (peerName == null) {
        throw new AgentUnavailableException(""String_Node_Str"",_id);
      }
      ch=s_clusteredAgentMgr.connectToPeer(peerName,ch);
      if (ch == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(log(seq,""String_Node_Str"" + req.toString()));
        }
        continue;
      }
      SSLEngine sslEngine=s_clusteredAgentMgr.getSSLEngine(peerName);
      if (sslEngine == null) {
        throw new AgentUnavailableException(""String_Node_Str"" + peerName,_id);
      }
      try {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(log(seq,""String_Node_Str"" + req.toString() + ""String_Node_Str""+ peerName));
        }
        if (req.executeInSequence() && listener != null && listener instanceof SynchronousListener) {
          SynchronousListener synchronous=(SynchronousListener)listener;
          synchronous.setPeer(peerName);
        }
        Link.write(ch,req.toBytes(),sslEngine);
        error=false;
        return;
      }
 catch (      IOException e) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(log(seq,""String_Node_Str"" + req.toString() + ""String_Node_Str""+ i));
        }
        if (s_logger.isInfoEnabled()) {
          s_logger.info(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ peerName+ ""String_Node_Str"");
        }
      }
    }
  }
  finally {
    if (error) {
      unregisterListener(seq);
    }
  }
  throw new AgentUnavailableException(""String_Node_Str"",_id);
}",0.9972924187725632
105907,"public ConnectedAgentAttache(AgentManagerImpl agentMgr,final long id,final String name,final Link link,boolean maintenance){
  super(agentMgr,id,name,maintenance);
  _link=link;
}","public ConnectedAgentAttache(final AgentManagerImpl agentMgr,final long id,final String name,final Link link,final boolean maintenance){
  super(agentMgr,id,name,maintenance);
  _link=link;
}",0.9675675675675676
105908,"@Override public boolean equals(Object obj){
}","@Override public boolean equals(final Object obj){
  if (obj == null) {
    return false;
  }
  if (this.getClass() != obj.getClass()) {
    return false;
  }
  if (_link == null) {
    return false;
  }
  ConnectedAgentAttache that=(ConnectedAgentAttache)obj;
  return super.equals(obj) && _link == that._link;
}",0.2562674094707521
105909,"@Override public synchronized void send(Request req) throws AgentUnavailableException {
  try {
    _link.send(req.toBytes());
  }
 catch (  ClosedChannelException e) {
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
}","@Override public synchronized void send(final Request req) throws AgentUnavailableException {
  try {
    _link.send(req.toBytes());
  }
 catch (  ClosedChannelException e) {
    throw new AgentUnavailableException(""String_Node_Str"",_id);
  }
}",0.9875518672199172
105910,"@Override public StorageEntity registerStorage(String name,List<String> tags,Map<String,String> details){
  return null;
}","@Override public StorageEntity registerStorage(final String name,final List<String> tags,final Map<String,String> details){
  return null;
}",0.931297709923664
105911,"@Override public void deregisterHost(String uuid){
  HostEntityImpl hostEntity=new HostEntityImpl(uuid,manager);
  hostEntity.disable();
}","@Override public void deregisterHost(final String uuid){
  HostEntityImpl hostEntity=new HostEntityImpl(uuid,manager);
  hostEntity.disable();
}",0.9787234042553192
105912,"@Override public ZoneEntity getZone(String uuid){
  ZoneEntityImpl impl=new ZoneEntityImpl(uuid,manager);
  return impl;
}","@Override public ZoneEntity getZone(final String uuid){
  ZoneEntityImpl impl=new ZoneEntityImpl(uuid,manager);
  return impl;
}",0.976
105913,"@Override public ClusterEntity registerCluster(String clusterUuid,String name,String owner,List<String> tags,Map<String,String> details){
  ClusterEntityImpl clusterEntity=new ClusterEntityImpl(clusterUuid,manager);
  clusterEntity.setOwner(owner);
  clusterEntity.setName(name);
  clusterEntity.persist();
  return clusterEntity;
}","@Override public ClusterEntity registerCluster(final String clusterUuid,final String name,final String owner,final List<String> tags,final Map<String,String> details){
  ClusterEntityImpl clusterEntity=new ClusterEntityImpl(clusterUuid,manager);
  clusterEntity.setOwner(owner);
  clusterEntity.setName(name);
  clusterEntity.persist();
  return clusterEntity;
}",0.9221902017291066
105914,"@Override public void deregisterStorage(String uuid){
}","@Override public void deregisterStorage(final String uuid){
}",0.9482758620689656
105915,"@Override public ZoneEntity registerZone(String zoneUuid,String name,String owner,List<String> tags,Map<String,String> details){
  ZoneEntityImpl zoneEntity=new ZoneEntityImpl(zoneUuid,manager);
  zoneEntity.setName(name);
  zoneEntity.setOwner(owner);
  zoneEntity.setDetails(details);
  zoneEntity.persist();
  return zoneEntity;
}","@Override public ZoneEntity registerZone(final String zoneUuid,final String name,final String owner,final List<String> tags,final Map<String,String> details){
  ZoneEntityImpl zoneEntity=new ZoneEntityImpl(zoneUuid,manager);
  zoneEntity.setName(name);
  zoneEntity.setOwner(owner);
  zoneEntity.setDetails(details);
  zoneEntity.persist();
  return zoneEntity;
}",0.9224137931034484
105916,"@Override public void deregisterCluster(String uuid){
  ClusterEntityImpl clusterEntity=new ClusterEntityImpl(uuid,manager);
  clusterEntity.disable();
}","@Override public void deregisterCluster(final String uuid){
  ClusterEntityImpl clusterEntity=new ClusterEntityImpl(uuid,manager);
  clusterEntity.disable();
}",0.9807692307692308
105917,"@Override public void changeState(String type,String entity,Status state){
}","@Override public void changeState(final String type,final String entity,final Status state){
}",0.8941176470588236
105918,"@Override public PodEntity registerPod(String podUuid,String name,String owner,String zoneUuid,List<String> tags,Map<String,String> details){
  PodEntityImpl podEntity=new PodEntityImpl(podUuid,manager);
  podEntity.setOwner(owner);
  podEntity.setName(name);
  podEntity.persist();
  return podEntity;
}","@Override public PodEntity registerPod(final String podUuid,final String name,final String owner,final String zoneUuid,final List<String> tags,final Map<String,String> details){
  PodEntityImpl podEntity=new PodEntityImpl(podUuid,manager);
  podEntity.setOwner(owner);
  podEntity.setName(name);
  podEntity.persist();
  return podEntity;
}",0.906832298136646
105919,"@Override public HostEntity registerHost(String hostUuid,String name,String owner,List<String> tags,Map<String,String> details){
  HostEntityImpl hostEntity=new HostEntityImpl(hostUuid,manager);
  hostEntity.setOwner(owner);
  hostEntity.setName(name);
  hostEntity.setDetails(details);
  hostEntity.persist();
  return hostEntity;
}","@Override public HostEntity registerHost(final String hostUuid,final String name,final String owner,final List<String> tags,final Map<String,String> details){
  HostEntityImpl hostEntity=new HostEntityImpl(hostUuid,manager);
  hostEntity.setOwner(owner);
  hostEntity.setName(name);
  hostEntity.setDetails(details);
  hostEntity.persist();
  return hostEntity;
}",0.9224137931034484
105920,"@Override public void deregisterPod(String uuid){
  PodEntityImpl podEntity=new PodEntityImpl(uuid,manager);
  podEntity.disable();
}","@Override public void deregisterPod(final String uuid){
  PodEntityImpl podEntity=new PodEntityImpl(uuid,manager);
  podEntity.disable();
}",0.9779411764705882
105921,"@Override public void deregisterZone(String uuid){
  ZoneEntityImpl zoneEntity=new ZoneEntityImpl(uuid,manager);
  zoneEntity.disable();
}","@Override public void deregisterZone(final String uuid){
  ZoneEntityImpl zoneEntity=new ZoneEntityImpl(uuid,manager);
  zoneEntity.disable();
}",0.9787234042553192
105922,"@Override public List<PodEntity> listPods(){
  List<PodEntity> pods=new ArrayList<PodEntity>();
  return null;
}","@Override public List<PodEntity> listPods(){
  return null;
}",0.7052023121387283
105923,"public NfsStoragePool(String poolUUID,String poolIp,String poolSourcePath,String mountDestPath,PoolType type){
  this._poolUUID=poolUUID;
  this._poolIp=poolIp;
  this._poolMountSourcePath=poolSourcePath;
  this._mountDestPath=mountDestPath;
  this._type=type;
}","public NfsStoragePool(String poolUUID,String poolIp,String poolSourcePath,String mountDestPath,PoolType type){
  _poolUUID=poolUUID;
  _poolIp=poolIp;
  _poolMountSourcePath=poolSourcePath;
  _mountDestPath=mountDestPath;
  _type=type;
}",0.7895791583166333
105924,"protected String getMountPoint(NfsStoragePool storagePool){
  StoragePool pool=null;
  String poolName=null;
  try {
    pool=LibvirtConnection.getConnection().storagePoolLookupByUUIDString(storagePool._poolUUID);
    if (pool != null) {
      StoragePoolInfo spi=pool.getInfo();
      if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
        pool.create(0);
      }
 else {
      }
    }
    poolName=pool.getName();
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pool != null) {
        pool.free();
      }
    }
 catch (    LibvirtException e) {
      s_logger.debug(""String_Node_Str"",e);
    }
  }
  return checkingMountPoint(storagePool,poolName);
}","protected String getMountPoint(NfsStoragePool storagePool){
  StoragePool pool=null;
  String poolName=null;
  try {
    pool=LibvirtConnection.getConnection().storagePoolLookupByUUIDString(storagePool._poolUUID);
    if (pool != null) {
      StoragePoolInfo spi=pool.getInfo();
      if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
        pool.create(0);
      }
 else {
      }
      poolName=pool.getName();
    }
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pool != null) {
        pool.free();
      }
    }
 catch (    LibvirtException e) {
      s_logger.debug(""String_Node_Str"",e);
    }
  }
  return checkingMountPoint(storagePool,poolName);
}",0.9931880108991824
105925,String getUuid();,@Override String getUuid();,0.7727272727272727
105926,long getId();,@Override long getId();,0.7222222222222222
105927,String getUuid();,@Override String getUuid();,0.7727272727272727
105928,long getId();,@Override long getId();,0.7222222222222222
105929,"@DB @Override public AclPolicy removeAclPermissionFromAclPolicy(long aclPolicyId,String entityType,String scope,Long scopeId,String action){
  AclPolicy policy=_aclPolicyDao.findById(aclPolicyId);
  if (policy == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + aclPolicyId + ""String_Node_Str"");
  }
  AclPolicyPermissionVO permit=_policyPermissionDao.findByPolicyAndEntity(aclPolicyId,entityType,scope,scopeId,action,null);
  if (permit != null) {
    _policyPermissionDao.remove(permit.getId());
  }
  return policy;
}","@DB @Override public AclPolicy removeAclPermissionFromAclPolicy(long aclPolicyId,String entityType,String scope,Long scopeId,String action){
  AclPolicy policy=_aclPolicyDao.findById(aclPolicyId);
  if (policy == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + aclPolicyId + ""String_Node_Str"");
  }
  AclPolicyPermissionVO permit=_policyPermissionDao.findByPolicyAndEntity(aclPolicyId,entityType,scope,scopeId,action,Permission.Allow);
  if (permit != null) {
    _policyPermissionDao.remove(permit.getId());
  }
  return policy;
}",0.9818181818181818
105930,"protected ExecutionResult cleanupNetworkElementCommand(IpAssocCommand cmd){
  Connection conn=getConnection();
  String[] results=new String[cmd.getIpAddresses().length];
  int i=0;
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  try {
    IpAddressTO[] ips=cmd.getIpAddresses();
    for (    IpAddressTO ip : ips) {
      VM router=getVM(conn,routerName);
      NicTO nic=new NicTO();
      nic.setMac(ip.getVifMacAddress());
      nic.setType(ip.getTrafficType());
      if (ip.getBroadcastUri() == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        URI uri=BroadcastDomainType.fromString(ip.getBroadcastUri());
        nic.setBroadcastType(BroadcastDomainType.getSchemeValue(uri));
        nic.setBroadcastUri(uri);
      }
      nic.setDeviceId(0);
      nic.setNetworkRateMbps(ip.getNetworkRate());
      nic.setName(ip.getNetworkName());
      Network network=getNetwork(conn,nic);
      VIF correctVif=getCorrectVif(conn,router,network);
      boolean removeVif=false;
      if (correctVif == null) {
        throw new InternalErrorException(""String_Node_Str"");
      }
      if (removeVif) {
        network=correctVif.getNetwork(conn);
        networkUsage(conn,routerIp,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
        correctVif.unplug(conn);
        correctVif.destroy(conn);
        disableVlanNetwork(conn,network);
      }
    }
  }
 catch (  InternalErrorException e) {
    s_logger.error(""String_Node_Str"",e);
    return new ExecutionResult(false,e.getMessage());
  }
catch (  Exception e) {
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}","protected ExecutionResult cleanupNetworkElementCommand(IpAssocCommand cmd){
  Connection conn=getConnection();
  String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
  String routerIp=cmd.getAccessDetail(NetworkElementCommand.ROUTER_IP);
  try {
    IpAddressTO[] ips=cmd.getIpAddresses();
    for (    IpAddressTO ip : ips) {
      VM router=getVM(conn,routerName);
      NicTO nic=new NicTO();
      nic.setMac(ip.getVifMacAddress());
      nic.setType(ip.getTrafficType());
      if (ip.getBroadcastUri() == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        URI uri=BroadcastDomainType.fromString(ip.getBroadcastUri());
        nic.setBroadcastType(BroadcastDomainType.getSchemeValue(uri));
        nic.setBroadcastUri(uri);
      }
      nic.setDeviceId(0);
      nic.setNetworkRateMbps(ip.getNetworkRate());
      nic.setName(ip.getNetworkName());
      Network network=getNetwork(conn,nic);
      VIF correctVif=getCorrectVif(conn,router,network);
      boolean removeVif=false;
      if (correctVif == null) {
        throw new InternalErrorException(""String_Node_Str"");
      }
      if (removeVif) {
        network=correctVif.getNetwork(conn);
        networkUsage(conn,routerIp,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
        correctVif.unplug(conn);
        correctVif.destroy(conn);
        disableVlanNetwork(conn,network);
      }
    }
  }
 catch (  InternalErrorException e) {
    s_logger.error(""String_Node_Str"",e);
    return new ExecutionResult(false,e.getMessage());
  }
catch (  Exception e) {
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}",0.9796035621947716
105931,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    if (_querySelectors == null || _querySelectors.size() == 0)     return;
    QuerySelector qs=_querySelectors.get(0);
    boolean grantedAll=qs.isGrantedAll(caller,action);
    if (grantedAll) {
      if (domainId != null) {
        permittedDomains.add(domainId);
      }
    }
 else {
      List<Long> grantedDomains=qs.getAuthorizedDomains(caller,action);
      List<Long> grantedAccounts=qs.getAuthorizedAccounts(caller,action);
      List<Long> grantedResources=qs.getAuthorizedResources(caller,action);
      if (domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else       if (permittedAccounts.isEmpty()) {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
      }
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    if (_querySelectors == null || _querySelectors.size() == 0)     return;
    QuerySelector qs=_querySelectors.get(0);
    boolean grantedAll=qs.isGrantedAll(caller,action);
    if (grantedAll) {
      if (domainId != null) {
        permittedDomains.add(domainId);
      }
    }
 else {
      List<Long> grantedDomains=qs.getAuthorizedDomains(caller,action);
      List<Long> grantedAccounts=qs.getAuthorizedAccounts(caller,action);
      List<Long> grantedResources=qs.getAuthorizedResources(caller,action);
      if (permittedAccounts.isEmpty() && domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else       if (permittedAccounts.isEmpty()) {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
      }
    }
  }
}",0.995627027789533
105932,"@DB() protected int addJoinAttributes(int count,PreparedStatement pstmt,Collection<JoinBuilder<SearchCriteria<?>>> joins) throws SQLException {
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    for (    final Pair<Attribute,Object> value : join.getT().getValues()) {
      prepareAttribute(++count,pstmt,value.first(),value.second());
    }
  }
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    if (join.getT().getJoins() != null) {
      count=addJoinAttributes(count,pstmt,join.getT().getJoins());
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + pstmt);
  }
  return count;
}","@DB() protected int addJoinAttributes(int count,PreparedStatement pstmt,Collection<JoinBuilder<SearchCriteria<?>>> joins) throws SQLException {
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    for (    final Pair<Attribute,Object> value : join.getT().getValues()) {
      prepareAttribute(count++,pstmt,value.first(),value.second());
    }
  }
  for (  JoinBuilder<SearchCriteria<?>> join : joins) {
    if (join.getT().getJoins() != null) {
      count=addJoinAttributes(count,pstmt,join.getT().getJoins());
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + pstmt);
  }
  return count;
}",0.9921011058451816
105933,"private List<CommandExecLogVO> listActiveCommands(long dcId,Date cutTime){
  SearchCriteria<CommandExecLogVO> sc=ActiveCommandSearch.create();
  sc.setParameters(""String_Node_Str"",cutTime);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Status.Up);
  return _cmdExecLogDao.search(sc,null);
}","private List<CommandExecLogVO> listActiveCommands(long dcId,Date cutTime){
  SearchCriteria<CommandExecLogVO> sc=activeCommandSearch.create();
  sc.setParameters(""String_Node_Str"",cutTime);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Status.Up);
  return _cmdExecLogDao.search(sc,null);
}",0.997289972899729
105934,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  _capacityPerSSVM=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageSessionMax.key()),DEFAULT_SS_VM_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageCapacityStandby.key()),DEFAULT_STANDBY_CAPACITY);
  int nMaxExecutionMinutes=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageCmdExecutionTimeMax.key()),30);
  _maxExecutionTimeMs=nMaxExecutionMinutes * 60 * 1000;
  HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),Op.EQ);
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getStatus(),Op.EQ);
  ActiveCommandSearch=_cmdExecLogDao.createSearchBuilder();
  ActiveCommandSearch.and(""String_Node_Str"",ActiveCommandSearch.entity().getCreated(),Op.GTEQ);
  ActiveCommandSearch.join(""String_Node_Str"",HostSearch,ActiveCommandSearch.entity().getInstanceId(),HostSearch.entity().getId(),JoinType.INNER);
  HostSearch.done();
  ActiveCommandSearch.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  _capacityPerSSVM=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageSessionMax.key()),DEFAULT_SS_VM_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageCapacityStandby.key()),DEFAULT_STANDBY_CAPACITY);
  int nMaxExecutionMinutes=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageCmdExecutionTimeMax.key()),30);
  _maxExecutionTimeMs=nMaxExecutionMinutes * 60 * 1000;
  hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),Op.EQ);
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  activeCommandSearch=_cmdExecLogDao.createSearchBuilder();
  activeCommandSearch.and(""String_Node_Str"",activeCommandSearch.entity().getCreated(),Op.GTEQ);
  activeCommandSearch.join(""String_Node_Str"",hostSearch,activeCommandSearch.entity().getInstanceId(),hostSearch.entity().getId(),JoinType.INNER);
  hostSearch.done();
  activeCommandSearch.done();
  return true;
}",0.9609929078014184
105935,"@Override public boolean generateVMSetupCommand(Long ssAHostId){
  HostVO ssAHost=_hostDao.findById(ssAHostId);
  if (ssAHost.getType() != Host.Type.SecondaryStorageVM) {
    return false;
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findByInstanceName(ssAHost.getName());
  if (secStorageVm == null) {
    s_logger.warn(""String_Node_Str"" + ssAHost.getName() + ""String_Node_Str"");
    return false;
  }
  SecStorageVMSetupCommand setupCmd=new SecStorageVMSetupCommand();
  if (_allowedInternalSites != null) {
    List<String> allowedCidrs=new ArrayList<String>();
    String[] cidrs=_allowedInternalSites.split(""String_Node_Str"");
    for (    String cidr : cidrs) {
      if (NetUtils.isValidCIDR(cidr) || NetUtils.isValidIp(cidr) || !cidr.startsWith(""String_Node_Str"")) {
        allowedCidrs.add(cidr);
      }
    }
    List<? extends Nic> nics=_networkModel.getNicsForTraffic(secStorageVm.getId(),TrafficType.Management);
    setupCmd.setAllowedInternalSites(allowedCidrs.toArray(new String[allowedCidrs.size()]));
  }
  String copyPasswd=_configDao.getValue(""String_Node_Str"");
  setupCmd.setCopyPassword(copyPasswd);
  setupCmd.setCopyUserName(TemplateConstants.DEFAULT_HTTP_AUTH_USER);
  Answer answer=_agentMgr.easySend(ssAHostId,setupCmd);
  if (answer != null && answer.getResult()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + secStorageVm.getHostName());
    }
    return true;
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + secStorageVm.getHostName());
    }
    return false;
  }
}","@Override public boolean generateVMSetupCommand(Long ssAHostId){
  HostVO ssAHost=_hostDao.findById(ssAHostId);
  if (ssAHost.getType() != Host.Type.SecondaryStorageVM) {
    return false;
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findByInstanceName(ssAHost.getName());
  if (secStorageVm == null) {
    s_logger.warn(""String_Node_Str"" + ssAHost.getName() + ""String_Node_Str"");
    return false;
  }
  SecStorageVMSetupCommand setupCmd=new SecStorageVMSetupCommand();
  if (_allowedInternalSites != null) {
    List<String> allowedCidrs=new ArrayList<String>();
    String[] cidrs=_allowedInternalSites.split(""String_Node_Str"");
    for (    String cidr : cidrs) {
      if (NetUtils.isValidCIDR(cidr) || NetUtils.isValidIp(cidr) || !cidr.startsWith(""String_Node_Str"")) {
        allowedCidrs.add(cidr);
      }
    }
    setupCmd.setAllowedInternalSites(allowedCidrs.toArray(new String[allowedCidrs.size()]));
  }
  String copyPasswd=_configDao.getValue(""String_Node_Str"");
  setupCmd.setCopyPassword(copyPasswd);
  setupCmd.setCopyUserName(TemplateConstants.DEFAULT_HTTP_AUTH_USER);
  Answer answer=_agentMgr.easySend(ssAHostId,setupCmd);
  if (answer != null && answer.getResult()) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + secStorageVm.getHostName());
    }
    return true;
  }
 else {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + secStorageVm.getHostName());
    }
    return false;
  }
}",0.965112487773068
105936,"private Pair<List<TemplateJoinVO>,Integer> searchForTemplatesInternal(Long templateId,String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean showDomr,boolean onlyReady,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,boolean isRecursive,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags,boolean showRemovedTmpl){
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
    if (hypers == null || hypers.isEmpty()) {
      return new Pair<List<TemplateJoinVO>,Integer>(new ArrayList<TemplateJoinVO>(),0);
    }
  }
  VMTemplateVO template=null;
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,""String_Node_Str"",isAscending,startIndex,pageSize);
  SearchBuilder<TemplateJoinVO> sb=_templateJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getTempZonePair());
  SearchCriteria<TemplateJoinVO> sc=sb.create();
  if (templateId != null) {
    template=_templateDao.findByIdIncludingRemoved(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId + ""String_Node_Str"");
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + template.getFormat() + ""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!template.isPublicTemplate() && !_accountMgr.isRootAdmin(caller.getId())) {
      Account owner=_accountMgr.getAccount(template.getAccountId());
      _accountMgr.checkAccess(caller,null,true,owner);
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,templateId);
  }
 else {
    if (!isIso) {
      if (hypers != null && !hypers.isEmpty()) {
        String[] relatedHypers=new String[hypers.size()];
        for (int i=0; i < hypers.size(); i++) {
          relatedHypers[i]=hypers.get(i).toString();
        }
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,relatedHypers);
      }
    }
    DomainVO callerDomain=_domainDao.findById(caller.getDomainId());
    if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (templateFilter == TemplateFilter.featured) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      }
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      if (permittedDomains.contains(caller.getDomainId())) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,callerDomain.getPath() + ""String_Node_Str"");
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,caller.getAccountId());
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      permittedDomains.remove(caller.getDomainId());
      permittedAccounts.remove(caller.getAccountId());
      SearchCriteria<TemplateJoinVO> aclSc=_templateJoinDao.createSearchCriteria();
      _accountMgr.buildACLViewSearchCriteria(sc,aclSc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
    }
 else     if (templateFilter == TemplateFilter.executable) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (permittedDomains.contains(caller.getDomainId())) {
        sc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,callerDomain.getPath() + ""String_Node_Str"");
      }
 else {
        sc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,caller.getAccountId());
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (tags != null && !tags.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      for (      String key : tags.keySet()) {
        SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
        if (isIso) {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.ISO);
        }
 else {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.Template);
        }
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,scTag);
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (keyword != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    }
 else     if (name != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
    }
    if (isIso) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,""String_Node_Str"");
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,""String_Node_Str"");
    }
    if (!hyperType.equals(HypervisorType.None)) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hyperType);
    }
    if (bootable != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,bootable);
    }
    if (onlyReady) {
      SearchCriteria<TemplateJoinVO> readySc=_templateJoinDao.createSearchCriteria();
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateState.Ready);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.BAREMETAL);
      SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,readySc);
    }
    if (!showDomr) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
    }
  }
  if (zoneId != null) {
    SearchCriteria<TemplateJoinVO> zoneSc=_templateJoinDao.createSearchCriteria();
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ScopeType.REGION);
    SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,zoneSc);
  }
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=null;
  if (showRemovedTmpl) {
    uniqueTmplPair=_templateJoinDao.searchIncludingRemovedAndCount(sc,searchFilter);
  }
 else {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,State.Active);
    uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  }
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  String[] tzIds=new String[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    tzIds[i++]=v.getTempZonePair();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByTemplateZonePair(showRemovedTmpl,tzIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}","private Pair<List<TemplateJoinVO>,Integer> searchForTemplatesInternal(Long templateId,String name,String keyword,TemplateFilter templateFilter,boolean isIso,Boolean bootable,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean showDomr,boolean onlyReady,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,boolean isRecursive,Account caller,ListProjectResourcesCriteria listProjectResourcesCriteria,Map<String,String> tags,boolean showRemovedTmpl){
  List<HypervisorType> hypers=null;
  if (!isIso) {
    hypers=_resourceMgr.listAvailHypervisorInZone(null,null);
    if (hypers == null || hypers.isEmpty()) {
      return new Pair<List<TemplateJoinVO>,Integer>(new ArrayList<TemplateJoinVO>(),0);
    }
  }
  VMTemplateVO template=null;
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(TemplateJoinVO.class,""String_Node_Str"",isAscending,startIndex,pageSize);
  SearchBuilder<TemplateJoinVO> sb=_templateJoinDao.createSearchBuilder();
  sb.select(null,Func.DISTINCT,sb.entity().getTempZonePair());
  SearchCriteria<TemplateJoinVO> sc=sb.create();
  if (templateId != null) {
    template=_templateDao.findByIdIncludingRemoved(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (isIso && template.getFormat() != ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId + ""String_Node_Str"");
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!isIso && template.getFormat() == ImageFormat.ISO) {
      s_logger.error(""String_Node_Str"" + templateId);
      InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"" + template.getFormat() + ""String_Node_Str"");
      ex.addProxyObject(template.getUuid(),""String_Node_Str"");
      throw ex;
    }
    if (!template.isPublicTemplate() && !_accountMgr.isRootAdmin(caller.getId())) {
      Account owner=_accountMgr.getAccount(template.getAccountId());
      _accountMgr.checkAccess(caller,null,true,owner);
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,templateId);
  }
 else {
    if (!isIso) {
      if (hypers != null && !hypers.isEmpty()) {
        String[] relatedHypers=new String[hypers.size()];
        for (int i=0; i < hypers.size(); i++) {
          relatedHypers[i]=hypers.get(i).toString();
        }
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,relatedHypers);
      }
    }
    DomainVO callerDomain=_domainDao.findById(caller.getDomainId());
    if (templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (templateFilter == TemplateFilter.featured) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      }
    }
 else     if (templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) {
      if (permittedDomains.contains(caller.getDomainId())) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,callerDomain.getPath() + ""String_Node_Str"");
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,caller.getAccountId());
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable || templateFilter == TemplateFilter.shared) {
      permittedDomains.remove(caller.getDomainId());
      permittedAccounts.remove(caller.getAccountId());
      for (      Long tid : permittedResources) {
        VMTemplateVO tmpl=_templateDao.findById(tid);
        if (tmpl != null && tmpl.getAccountId() == caller.getAccountId()) {
          permittedResources.remove(tid);
        }
      }
      SearchCriteria<TemplateJoinVO> aclSc=_templateJoinDao.createSearchCriteria();
      _accountMgr.buildACLViewSearchCriteria(sc,aclSc,isRecursive,permittedDomains,permittedAccounts,permittedResources,listProjectResourcesCriteria);
    }
 else     if (templateFilter == TemplateFilter.executable) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      scc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      if (permittedDomains.contains(caller.getDomainId())) {
        sc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,callerDomain.getPath() + ""String_Node_Str"");
      }
 else {
        sc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,caller.getAccountId());
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (tags != null && !tags.isEmpty()) {
      SearchCriteria<TemplateJoinVO> scc=_templateJoinDao.createSearchCriteria();
      for (      String key : tags.keySet()) {
        SearchCriteria<TemplateJoinVO> scTag=_templateJoinDao.createSearchCriteria();
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,key);
        scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,tags.get(key));
        if (isIso) {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.ISO);
        }
 else {
          scTag.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ResourceObjectType.Template);
        }
        scc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,scTag);
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,scc);
    }
    if (keyword != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    }
 else     if (name != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
    }
    if (isIso) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,""String_Node_Str"");
    }
 else {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,""String_Node_Str"");
    }
    if (!hyperType.equals(HypervisorType.None)) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hyperType);
    }
    if (bootable != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,bootable);
    }
    if (onlyReady) {
      SearchCriteria<TemplateJoinVO> readySc=_templateJoinDao.createSearchCriteria();
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateState.Ready);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.BAREMETAL);
      SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
      isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
      readySc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,readySc);
    }
    if (!showDomr) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,Storage.TemplateType.SYSTEM);
    }
  }
  if (zoneId != null) {
    SearchCriteria<TemplateJoinVO> zoneSc=_templateJoinDao.createSearchCriteria();
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,ScopeType.REGION);
    SearchCriteria<TemplateJoinVO> isoPerhostSc=_templateJoinDao.createSearchCriteria();
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ImageFormat.ISO);
    isoPerhostSc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,TemplateType.PERHOST);
    zoneSc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,isoPerhostSc);
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,zoneSc);
  }
  Pair<List<TemplateJoinVO>,Integer> uniqueTmplPair=null;
  if (showRemovedTmpl) {
    uniqueTmplPair=_templateJoinDao.searchIncludingRemovedAndCount(sc,searchFilter);
  }
 else {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,State.Active);
    uniqueTmplPair=_templateJoinDao.searchAndCount(sc,searchFilter);
  }
  Integer count=uniqueTmplPair.second();
  if (count.intValue() == 0) {
    return uniqueTmplPair;
  }
  List<TemplateJoinVO> uniqueTmpls=uniqueTmplPair.first();
  String[] tzIds=new String[uniqueTmpls.size()];
  int i=0;
  for (  TemplateJoinVO v : uniqueTmpls) {
    tzIds[i++]=v.getTempZonePair();
  }
  List<TemplateJoinVO> vrs=_templateJoinDao.searchByTemplateZonePair(showRemovedTmpl,tzIds);
  return new Pair<List<TemplateJoinVO>,Integer>(vrs,count);
}",0.9854827002177596
105937,"@DB @Override public boolean updateTemplateOrIsoPermissions(BaseUpdateTemplateOrIsoPermissionsCmd cmd){
  final Long id=cmd.getId();
  final Account caller=CallContext.current().getCallingAccount();
  List<String> accountNames=cmd.getAccountNames();
  List<Long> projectIds=cmd.getProjectIds();
  Boolean isFeatured=cmd.isFeatured();
  Boolean isPublic=cmd.isPublic();
  Boolean isExtractable=cmd.isExtractable();
  String operation=cmd.getOperation();
  String mediaType=""String_Node_Str"";
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  if (cmd instanceof UpdateTemplatePermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (template.getFormat().equals(ImageFormat.ISO)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (cmd instanceof UpdateIsoPermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (!template.getFormat().equals(ImageFormat.ISO)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (projectIds != null) {
    if (accountNames == null) {
      accountNames=new ArrayList<String>();
    }
    for (    Long projectId : projectIds) {
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      accountNames.add(_accountMgr.getAccount(project.getProjectAccountId()).getAccountName());
    }
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,true,template);
  if (template.getRemoved() != null) {
    s_logger.error(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
  }
  if (id.equals(Long.valueOf(1))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  boolean isAdmin=_accountMgr.isAdmin(caller.getType());
  boolean allowPublicUserTemplates=AllowPublicUserTemplates.valueIn(template.getAccountId());
  if (!isAdmin && !allowPublicUserTemplates && isPublic != null && isPublic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str"");
  }
  if (accountNames != null) {
    if ((operation == null) || (!operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str""))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + operation + ""String_Node_Str"");
    }
  }
  Long ownerId=template.getAccountId();
  if (ownerId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getName());
  }
  VMTemplateVO updatedTemplate=_tmpltDao.createForUpdate();
  if (isPublic != null) {
    updatedTemplate.setPublicTemplate(isPublic.booleanValue());
  }
  if (isFeatured != null) {
    updatedTemplate.setFeatured(isFeatured.booleanValue());
  }
  if (isExtractable != null) {
    if (!template.getFormat().equals(ImageFormat.ISO) && _accountMgr.isRootAdmin(caller.getId())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      updatedTemplate.setExtractable(isExtractable.booleanValue());
    }
  }
  _tmpltDao.update(template.getId(),updatedTemplate);
  if ((""String_Node_Str"".equalsIgnoreCase(operation) || ""String_Node_Str"".equalsIgnoreCase(operation)) && accountNames == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + operation + ""String_Node_Str"");
  }
  Account owner=_accountMgr.getAccount(ownerId);
  final Domain domain=_domainDao.findById(owner.getDomainId());
  if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    final List<String> accountNamesFinal=accountNames;
    final List<Long> accountIds=new ArrayList<Long>();
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        for (        String accountName : accountNamesFinal) {
          Account permittedAccount=_accountDao.findActiveAccount(accountName,domain.getId());
          if (permittedAccount != null) {
            if (permittedAccount.getId() == caller.getId()) {
              continue;
            }
            accountIds.add(permittedAccount.getId());
            LaunchPermissionVO existingPermission=_launchPermissionDao.findByTemplateAndAccount(id,permittedAccount.getId());
            if (existingPermission == null) {
              LaunchPermissionVO launchPermission=new LaunchPermissionVO(id,permittedAccount.getId());
              _launchPermissionDao.persist(launchPermission);
            }
          }
 else {
            throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid()+ ""String_Node_Str""+ ""String_Node_Str"");
          }
        }
      }
    }
);
    Map<String,Object> permit=new HashMap<String,Object>();
    permit.put(ApiConstants.ENTITY_TYPE,AclEntityType.VirtualMachineTemplate.toString());
    permit.put(ApiConstants.ENTITY_ID,id);
    permit.put(ApiConstants.ACCESS_TYPE,AccessType.UseEntry);
    permit.put(ApiConstants.ACL_ACTION,""String_Node_Str"");
    permit.put(ApiConstants.ACCOUNTS,accountIds);
    _messageBus.publish(_name,EntityManager.MESSAGE_GRANT_ENTITY_EVENT,PublishScope.LOCAL,permit);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    List<Long> accountIds=new ArrayList<Long>();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domain.getId());
      if (permittedAccount != null) {
        accountIds.add(permittedAccount.getId());
      }
    }
    _launchPermissionDao.removePermissions(id,accountIds);
    Map<String,Object> permit=new HashMap<String,Object>();
    permit.put(ApiConstants.ENTITY_TYPE,AclEntityType.VirtualMachineTemplate.toString());
    permit.put(ApiConstants.ENTITY_ID,id);
    permit.put(ApiConstants.ACCESS_TYPE,AccessType.UseEntry);
    permit.put(ApiConstants.ACL_ACTION,""String_Node_Str"");
    permit.put(ApiConstants.ACCOUNTS,accountIds);
    _messageBus.publish(_name,EntityManager.MESSAGE_REVOKE_ENTITY_EVENT,PublishScope.LOCAL,permit);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    updatedTemplate=_tmpltDao.createForUpdate();
    updatedTemplate.setPublicTemplate(false);
    updatedTemplate.setFeatured(false);
    _tmpltDao.update(template.getId(),updatedTemplate);
    _launchPermissionDao.removeAllPermissions(id);
    _messageBus.publish(_name,TemplateManager.MESSAGE_RESET_TEMPLATE_PERMISSION_EVENT,PublishScope.LOCAL,template.getId());
  }
  return true;
}","@DB @Override public boolean updateTemplateOrIsoPermissions(BaseUpdateTemplateOrIsoPermissionsCmd cmd){
  final Long id=cmd.getId();
  final Account caller=CallContext.current().getCallingAccount();
  List<String> accountNames=cmd.getAccountNames();
  List<Long> projectIds=cmd.getProjectIds();
  Boolean isFeatured=cmd.isFeatured();
  Boolean isPublic=cmd.isPublic();
  Boolean isExtractable=cmd.isExtractable();
  String operation=cmd.getOperation();
  String mediaType=""String_Node_Str"";
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  if (cmd instanceof UpdateTemplatePermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (template.getFormat().equals(ImageFormat.ISO)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (cmd instanceof UpdateIsoPermissionsCmd) {
    mediaType=""String_Node_Str"";
    if (!template.getFormat().equals(ImageFormat.ISO)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (projectIds != null) {
    if (accountNames == null) {
      accountNames=new ArrayList<String>();
    }
    for (    Long projectId : projectIds) {
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      accountNames.add(_accountMgr.getAccount(project.getProjectAccountId()).getAccountName());
    }
  }
  _accountMgr.checkAccess(caller,AccessType.OperateEntry,true,template);
  if (template.getRemoved() != null) {
    s_logger.error(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id+ ""String_Node_Str"");
  }
  if (id.equals(Long.valueOf(1))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str""+ id);
  }
  boolean isAdmin=_accountMgr.isAdmin(caller.getType());
  boolean allowPublicUserTemplates=AllowPublicUserTemplates.valueIn(template.getAccountId());
  if (!isAdmin && !allowPublicUserTemplates && isPublic != null && isPublic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + mediaType + ""String_Node_Str"");
  }
  if (accountNames != null) {
    if ((operation == null) || (!operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str"") && !operation.equalsIgnoreCase(""String_Node_Str""))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + operation + ""String_Node_Str"");
    }
  }
  Long ownerId=template.getAccountId();
  if (ownerId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getName());
  }
  VMTemplateVO updatedTemplate=_tmpltDao.createForUpdate();
  if (isPublic != null) {
    updatedTemplate.setPublicTemplate(isPublic.booleanValue());
  }
  if (isFeatured != null) {
    updatedTemplate.setFeatured(isFeatured.booleanValue());
  }
  if (isExtractable != null) {
    if (!template.getFormat().equals(ImageFormat.ISO) && _accountMgr.isRootAdmin(caller.getId())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      updatedTemplate.setExtractable(isExtractable.booleanValue());
    }
  }
  _tmpltDao.update(template.getId(),updatedTemplate);
  if ((""String_Node_Str"".equalsIgnoreCase(operation) || ""String_Node_Str"".equalsIgnoreCase(operation)) && accountNames == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + operation + ""String_Node_Str"");
  }
  Account owner=_accountMgr.getAccount(ownerId);
  final Domain domain=_domainDao.findById(owner.getDomainId());
  if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    final List<String> accountNamesFinal=accountNames;
    final List<Long> accountIds=new ArrayList<Long>();
    Transaction.execute(new TransactionCallbackNoReturn(){
      @Override public void doInTransactionWithoutResult(      TransactionStatus status){
        for (        String accountName : accountNamesFinal) {
          Account permittedAccount=_accountDao.findActiveAccount(accountName,domain.getId());
          if (permittedAccount != null) {
            if (permittedAccount.getId() == caller.getId()) {
              continue;
            }
            accountIds.add(permittedAccount.getId());
            LaunchPermissionVO existingPermission=_launchPermissionDao.findByTemplateAndAccount(id,permittedAccount.getId());
            if (existingPermission == null) {
              LaunchPermissionVO launchPermission=new LaunchPermissionVO(id,permittedAccount.getId());
              _launchPermissionDao.persist(launchPermission);
            }
          }
 else {
            throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid()+ ""String_Node_Str""+ ""String_Node_Str"");
          }
        }
      }
    }
);
    Map<String,Object> permit=new HashMap<String,Object>();
    permit.put(ApiConstants.ENTITY_TYPE,AclEntityType.VirtualMachineTemplate.toString());
    permit.put(ApiConstants.ENTITY_ID,id);
    permit.put(ApiConstants.ACCESS_TYPE,AccessType.UseEntry);
    permit.put(ApiConstants.ACL_ACTION,""String_Node_Str"");
    permit.put(ApiConstants.ACCOUNTS,accountIds);
    _messageBus.publish(_name,EntityManager.MESSAGE_GRANT_ENTITY_EVENT,PublishScope.LOCAL,permit);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    List<Long> accountIds=new ArrayList<Long>();
    for (    String accountName : accountNames) {
      Account permittedAccount=_accountDao.findActiveAccount(accountName,domain.getId());
      if (permittedAccount != null) {
        accountIds.add(permittedAccount.getId());
      }
    }
    _launchPermissionDao.removePermissions(id,accountIds);
    Map<String,Object> permit=new HashMap<String,Object>();
    permit.put(ApiConstants.ENTITY_TYPE,AclEntityType.VirtualMachineTemplate.toString());
    permit.put(ApiConstants.ENTITY_ID,id);
    permit.put(ApiConstants.ACCESS_TYPE,AccessType.UseEntry);
    permit.put(ApiConstants.ACL_ACTION,""String_Node_Str"");
    permit.put(ApiConstants.ACCOUNTS,accountIds);
    _messageBus.publish(_name,EntityManager.MESSAGE_REVOKE_ENTITY_EVENT,PublishScope.LOCAL,permit);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(operation)) {
    updatedTemplate=_tmpltDao.createForUpdate();
    updatedTemplate.setPublicTemplate(false);
    updatedTemplate.setFeatured(false);
    _tmpltDao.update(template.getId(),updatedTemplate);
    _launchPermissionDao.removeAllPermissions(id);
    _messageBus.publish(_name,TemplateManager.MESSAGE_RESET_TEMPLATE_PERMISSION_EVENT,PublishScope.LOCAL,template.getId());
  }
  return true;
}",0.9990726870675511
105938,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (id != null) {
    permittedResources.add(id);
    return;
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    if (_querySelectors == null || _querySelectors.size() == 0)     return;
    QuerySelector qs=_querySelectors.get(0);
    boolean grantedAll=qs.isGrantedAll(caller,action);
    if (grantedAll) {
      if (domainId != null) {
        permittedDomains.add(domainId);
      }
    }
 else {
      List<Long> grantedDomains=qs.getAuthorizedDomains(caller,action);
      List<Long> grantedAccounts=qs.getAuthorizedAccounts(caller,action);
      List<Long> grantedResources=qs.getAuthorizedResources(caller,action);
      if (domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else       if (permittedAccounts.isEmpty()) {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
      }
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedDomains,List<Long> permittedAccounts,List<Long> permittedResources,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation,String action){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    Domain domain=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
      domain=_domainDao.findById(domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
      domain=_domainDao.findById(caller.getDomainId());
    }
    if (userAccount != null) {
      checkAccess(caller,null,false,userAccount);
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domain.getUuid());
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId.longValue() == -1) {
        if (isNormalUser(caller.getId())) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    if (_querySelectors == null || _querySelectors.size() == 0)     return;
    QuerySelector qs=_querySelectors.get(0);
    boolean grantedAll=qs.isGrantedAll(caller,action);
    if (grantedAll) {
      if (domainId != null) {
        permittedDomains.add(domainId);
      }
    }
 else {
      List<Long> grantedDomains=qs.getAuthorizedDomains(caller,action);
      List<Long> grantedAccounts=qs.getAuthorizedAccounts(caller,action);
      List<Long> grantedResources=qs.getAuthorizedResources(caller,action);
      if (domainId != null) {
        if (grantedDomains.contains(domainId)) {
          permittedDomains.add(domainId);
        }
 else {
          for (          Long acctId : grantedAccounts) {
            Account acct=_accountDao.findById(acctId);
            if (acct != null && acct.getDomainId() == domainId) {
              permittedAccounts.add(acctId);
            }
          }
          permittedResources.addAll(grantedResources);
        }
      }
 else       if (permittedAccounts.isEmpty()) {
        permittedDomains.addAll(grantedDomains);
        permittedAccounts.addAll(grantedAccounts);
        permittedResources.addAll(grantedResources);
      }
    }
  }
}",0.9904574796519788
105939,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicateHost(final Long hostId,final Long domainId,final String accountName){
  Long accountId=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  checkAccountAndDomain(accountId,domainId);
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId);
  }
 else {
    if (host.getType() != Host.Type.Routing) {
      throw new CloudRuntimeException(""String_Node_Str"" + host.getName());
    }
    DedicatedResourceVO dedicatedHost=_dedicatedDao.findByHostId(hostId);
    DedicatedResourceVO dedicatedClusterOfHost=_dedicatedDao.findByClusterId(host.getClusterId());
    DedicatedResourceVO dedicatedPodOfHost=_dedicatedDao.findByPodId(host.getPodId());
    DedicatedResourceVO dedicatedZoneOfHost=_dedicatedDao.findByZoneId(host.getDataCenterId());
    if (dedicatedHost != null) {
      s_logger.error(""String_Node_Str"" + host.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str"");
    }
    if (dedicatedClusterOfHost != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedClusterOfHost.getDomainId()).contains(domainId);
      if (dedicatedClusterOfHost.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedClusterOfHost.getDomainId() == domainId || domainIdInChildreanList))) {
        ClusterVO cluster=_clusterDao.findById(host.getClusterId());
        s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
      }
    }
    if (dedicatedPodOfHost != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedPodOfHost.getDomainId()).contains(domainId);
      if (dedicatedPodOfHost.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedPodOfHost.getDomainId() == domainId || domainIdInChildreanList))) {
        HostPodVO pod=_podDao.findById(host.getPodId());
        s_logger.error(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      }
    }
    if (dedicatedZoneOfHost != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfHost.getDomainId()).contains(domainId);
      if (dedicatedZoneOfHost.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfHost.getDomainId() == domainId || domainIdInChildreanList))) {
        DataCenterVO zone=_zoneDao.findById(host.getDataCenterId());
        s_logger.error(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
      }
    }
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkHostSuitabilityForExplicitDedication(accountId,childDomainIds,hostId);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,null,null,hostId,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicateHost(final Long hostId,final Long domainId,final String accountName){
  Long accountId=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  checkAccountAndDomain(accountId,domainId);
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId);
  }
 else {
    if (host.getType() != Host.Type.Routing) {
      throw new CloudRuntimeException(""String_Node_Str"" + host.getName());
    }
    DedicatedResourceVO dedicatedHost=_dedicatedDao.findByHostId(hostId);
    DedicatedResourceVO dedicatedClusterOfHost=_dedicatedDao.findByClusterId(host.getClusterId());
    DedicatedResourceVO dedicatedPodOfHost=_dedicatedDao.findByPodId(host.getPodId());
    DedicatedResourceVO dedicatedZoneOfHost=_dedicatedDao.findByZoneId(host.getDataCenterId());
    if (dedicatedHost != null) {
      s_logger.error(""String_Node_Str"" + host.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str"");
    }
    if (dedicatedClusterOfHost != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedClusterOfHost.getDomainId()).contains(domainId);
      if (dedicatedClusterOfHost.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedClusterOfHost.getDomainId().equals(domainId) || domainIdInChildreanList))) {
        ClusterVO cluster=_clusterDao.findById(host.getClusterId());
        s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
      }
    }
    if (dedicatedPodOfHost != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedPodOfHost.getDomainId()).contains(domainId);
      if (dedicatedPodOfHost.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedPodOfHost.getDomainId().equals(domainId) || domainIdInChildreanList))) {
        HostPodVO pod=_podDao.findById(host.getPodId());
        s_logger.error(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      }
    }
    if (dedicatedZoneOfHost != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfHost.getDomainId()).contains(domainId);
      if (dedicatedZoneOfHost.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfHost.getDomainId().equals(domainId) || domainIdInChildreanList))) {
        DataCenterVO zone=_zoneDao.findById(host.getDataCenterId());
        s_logger.error(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
      }
    }
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkHostSuitabilityForExplicitDedication(accountId,childDomainIds,hostId);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,null,null,hostId,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}",0.9902869264262588
105940,"private void checkAccountAndDomain(Long accountId,Long domainId){
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVO account=_accountDao.findById(accountId);
    if (account == null || domainId != account.getDomainId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + account.getAccountName());
    }
  }
}","private void checkAccountAndDomain(Long accountId,Long domainId){
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
  }
  if (accountId != null) {
    AccountVO account=_accountDao.findById(accountId);
    if (account == null || domainId != account.getDomainId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
  }
}",0.9803108808290156
105941,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicateCluster(final Long clusterId,final Long domainId,final String accountName){
  Long accountId=null;
  List<HostVO> hosts=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + clusterId);
  }
 else {
    DedicatedResourceVO dedicatedCluster=_dedicatedDao.findByClusterId(clusterId);
    DedicatedResourceVO dedicatedPodOfCluster=_dedicatedDao.findByPodId(cluster.getPodId());
    DedicatedResourceVO dedicatedZoneOfCluster=_dedicatedDao.findByZoneId(cluster.getDataCenterId());
    if (dedicatedCluster != null) {
      s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
    }
    if (dedicatedPodOfCluster != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedPodOfCluster.getDomainId()).contains(domainId);
      if (dedicatedPodOfCluster.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedPodOfCluster.getDomainId() == domainId || domainIdInChildreanList))) {
        s_logger.error(""String_Node_Str"");
        HostPodVO pod=_podDao.findById(cluster.getPodId());
        throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      }
    }
    if (dedicatedZoneOfCluster != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfCluster.getDomainId()).contains(domainId);
      if (dedicatedZoneOfCluster.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfCluster.getDomainId() == domainId || domainIdInChildreanList))) {
        s_logger.error(""String_Node_Str"");
        DataCenterVO zone=_zoneDao.findById(cluster.getDataCenterId());
        throw new CloudRuntimeException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
      }
    }
    hosts=_hostDao.findByClusterId(cluster.getId());
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(childDomainIds.contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ cluster.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dHost.getAccountId() == accountId) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ accountName);
            throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ accountName);
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId() == domainId) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,null,clusterId,null,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicateCluster(final Long clusterId,final Long domainId,final String accountName){
  Long accountId=null;
  List<HostVO> hosts=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + clusterId);
  }
 else {
    DedicatedResourceVO dedicatedCluster=_dedicatedDao.findByClusterId(clusterId);
    DedicatedResourceVO dedicatedPodOfCluster=_dedicatedDao.findByPodId(cluster.getPodId());
    DedicatedResourceVO dedicatedZoneOfCluster=_dedicatedDao.findByZoneId(cluster.getDataCenterId());
    if (dedicatedCluster != null) {
      s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str"");
    }
    if (dedicatedPodOfCluster != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedPodOfCluster.getDomainId()).contains(domainId);
      if (dedicatedPodOfCluster.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedPodOfCluster.getDomainId().equals(domainId) || domainIdInChildreanList))) {
        s_logger.error(""String_Node_Str"");
        HostPodVO pod=_podDao.findById(cluster.getPodId());
        throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      }
    }
    if (dedicatedZoneOfCluster != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfCluster.getDomainId()).contains(domainId);
      if (dedicatedZoneOfCluster.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfCluster.getDomainId().equals(domainId) || domainIdInChildreanList))) {
        s_logger.error(""String_Node_Str"");
        DataCenterVO zone=_zoneDao.findById(cluster.getDataCenterId());
        throw new CloudRuntimeException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
      }
    }
    hosts=_hostDao.findByClusterId(cluster.getId());
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(childDomainIds.contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ cluster.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dHost.getAccountId().equals(accountId)) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ accountName);
            throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ accountName);
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId().equals(domainId)) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,null,clusterId,null,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}",0.9162510390689942
105942,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicatePod(final Long podId,final Long domainId,final String accountName){
  Long accountId=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  HostPodVO pod=_podDao.findById(podId);
  List<HostVO> hosts=null;
  if (pod == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId);
  }
 else {
    DedicatedResourceVO dedicatedPod=_dedicatedDao.findByPodId(podId);
    DedicatedResourceVO dedicatedZoneOfPod=_dedicatedDao.findByZoneId(pod.getDataCenterId());
    if (dedicatedPod != null) {
      s_logger.error(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
    }
    if (dedicatedZoneOfPod != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfPod.getDomainId()).contains(domainId);
      if (dedicatedZoneOfPod.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfPod.getDomainId() == domainId || domainIdInChildreanList))) {
        DataCenterVO zone=_zoneDao.findById(pod.getDataCenterId());
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
      }
    }
    List<ClusterVO> clusters=_clusterDao.listByPodId(pod.getId());
    List<DedicatedResourceVO> clustersToRelease=new ArrayList<DedicatedResourceVO>();
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    ClusterVO cluster : clusters) {
      DedicatedResourceVO dCluster=_dedicatedDao.findByClusterId(cluster.getId());
      if (dCluster != null) {
        if (!(childDomainIds.contains(dCluster.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dCluster.getAccountId() == accountId) {
            clustersToRelease.add(dCluster);
          }
 else {
            s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dCluster.getAccountId() == null && dCluster.getDomainId() == domainId) {
            clustersToRelease.add(dCluster);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : clustersToRelease) {
      releaseDedicatedResource(null,null,dr.getClusterId(),null);
    }
    hosts=_hostDao.findByPodId(pod.getId());
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(getDomainChildIds(domainId).contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dHost.getAccountId() == accountId) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId() == domainId) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,podId,null,null,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicatePod(final Long podId,final Long domainId,final String accountName){
  Long accountId=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  HostPodVO pod=_podDao.findById(podId);
  List<HostVO> hosts=null;
  if (pod == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId);
  }
 else {
    DedicatedResourceVO dedicatedPod=_dedicatedDao.findByPodId(podId);
    DedicatedResourceVO dedicatedZoneOfPod=_dedicatedDao.findByZoneId(pod.getDataCenterId());
    if (dedicatedPod != null) {
      s_logger.error(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str"");
    }
    if (dedicatedZoneOfPod != null) {
      boolean domainIdInChildreanList=getDomainChildIds(dedicatedZoneOfPod.getDomainId()).contains(domainId);
      if (dedicatedZoneOfPod.getAccountId() != null || (accountId == null && !domainIdInChildreanList) || (accountId != null && !(dedicatedZoneOfPod.getDomainId().equals(domainId) || domainIdInChildreanList))) {
        DataCenterVO zone=_zoneDao.findById(pod.getDataCenterId());
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
      }
    }
    List<ClusterVO> clusters=_clusterDao.listByPodId(pod.getId());
    List<DedicatedResourceVO> clustersToRelease=new ArrayList<DedicatedResourceVO>();
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    ClusterVO cluster : clusters) {
      DedicatedResourceVO dCluster=_dedicatedDao.findByClusterId(cluster.getId());
      if (dCluster != null) {
        if (!(childDomainIds.contains(dCluster.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dCluster.getAccountId().equals(accountId)) {
            clustersToRelease.add(dCluster);
          }
 else {
            s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dCluster.getAccountId() == null && dCluster.getDomainId().equals(domainId)) {
            clustersToRelease.add(dCluster);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : clustersToRelease) {
      releaseDedicatedResource(null,null,dr.getClusterId(),null);
    }
    hosts=_hostDao.findByPodId(pod.getId());
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(getDomainChildIds(domainId).contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dHost.getAccountId().equals(accountId)) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId().equals(domainId)) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(null,podId,null,null,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}",0.8414372375174989
105943,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicateZone(final Long zoneId,final Long domainId,final String accountName){
  Long accountId=null;
  List<HostVO> hosts=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  final DataCenterVO dc=_zoneDao.findById(zoneId);
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
 else {
    DedicatedResourceVO dedicatedZone=_dedicatedDao.findByZoneId(zoneId);
    if (dedicatedZone != null) {
      s_logger.error(""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
    }
    List<HostPodVO> pods=_podDao.listByDataCenterId(dc.getId());
    List<DedicatedResourceVO> podsToRelease=new ArrayList<DedicatedResourceVO>();
    List<DedicatedResourceVO> clustersToRelease=new ArrayList<DedicatedResourceVO>();
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    HostPodVO pod : pods) {
      DedicatedResourceVO dPod=_dedicatedDao.findByPodId(pod.getId());
      if (dPod != null) {
        if (!(childDomainIds.contains(dPod.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dPod.getAccountId() == accountId) {
            podsToRelease.add(dPod);
          }
 else {
            s_logger.error(""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dPod.getAccountId() == null && dPod.getDomainId() == domainId) {
            podsToRelease.add(dPod);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : podsToRelease) {
      releaseDedicatedResource(null,dr.getPodId(),null,null);
    }
    List<ClusterVO> clusters=_clusterDao.listClustersByDcId(dc.getId());
    for (    ClusterVO cluster : clusters) {
      DedicatedResourceVO dCluster=_dedicatedDao.findByClusterId(cluster.getId());
      if (dCluster != null) {
        if (!(childDomainIds.contains(dCluster.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dCluster.getAccountId() == accountId) {
            clustersToRelease.add(dCluster);
          }
 else {
            s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dCluster.getAccountId() == null && dCluster.getDomainId() == domainId) {
            clustersToRelease.add(dCluster);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : clustersToRelease) {
      releaseDedicatedResource(null,null,dr.getClusterId(),null);
    }
    hosts=_hostDao.listByDataCenterId(dc.getId());
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(childDomainIds.contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dHost.getAccountId() == accountId) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId() == domainId) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(zoneId,null,null,null,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
        dc.setDomainId(domainId);
        if (!_zoneDao.update(zoneId,dc)) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_DEDICATE_RESOURCE,eventDescription=""String_Node_Str"") public List<DedicatedResourceVO> dedicateZone(final Long zoneId,final Long domainId,final String accountName){
  Long accountId=null;
  List<HostVO> hosts=null;
  if (accountName != null) {
    Account caller=CallContext.current().getCallingAccount();
    Account owner=_accountMgr.finalizeOwner(caller,accountName,domainId,null);
    accountId=owner.getId();
  }
  List<Long> childDomainIds=getDomainChildIds(domainId);
  childDomainIds.add(domainId);
  checkAccountAndDomain(accountId,domainId);
  final DataCenterVO dc=_zoneDao.findById(zoneId);
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
 else {
    DedicatedResourceVO dedicatedZone=_dedicatedDao.findByZoneId(zoneId);
    if (dedicatedZone != null) {
      s_logger.error(""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getName() + ""String_Node_Str"");
    }
    List<HostPodVO> pods=_podDao.listByDataCenterId(dc.getId());
    List<DedicatedResourceVO> podsToRelease=new ArrayList<DedicatedResourceVO>();
    List<DedicatedResourceVO> clustersToRelease=new ArrayList<DedicatedResourceVO>();
    List<DedicatedResourceVO> hostsToRelease=new ArrayList<DedicatedResourceVO>();
    for (    HostPodVO pod : pods) {
      DedicatedResourceVO dPod=_dedicatedDao.findByPodId(pod.getId());
      if (dPod != null) {
        if (!(childDomainIds.contains(dPod.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dPod.getAccountId().equals(accountId)) {
            podsToRelease.add(dPod);
          }
 else {
            s_logger.error(""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dPod.getAccountId() == null && dPod.getDomainId().equals(domainId)) {
            podsToRelease.add(dPod);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : podsToRelease) {
      releaseDedicatedResource(null,dr.getPodId(),null,null);
    }
    List<ClusterVO> clusters=_clusterDao.listClustersByDcId(dc.getId());
    for (    ClusterVO cluster : clusters) {
      DedicatedResourceVO dCluster=_dedicatedDao.findByClusterId(cluster.getId());
      if (dCluster != null) {
        if (!(childDomainIds.contains(dCluster.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dCluster.getAccountId().equals(accountId)) {
            clustersToRelease.add(dCluster);
          }
 else {
            s_logger.error(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dCluster.getAccountId() == null && dCluster.getDomainId().equals(domainId)) {
            clustersToRelease.add(dCluster);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : clustersToRelease) {
      releaseDedicatedResource(null,null,dr.getClusterId(),null);
    }
    hosts=_hostDao.listByDataCenterId(dc.getId());
    for (    HostVO host : hosts) {
      DedicatedResourceVO dHost=_dedicatedDao.findByHostId(host.getId());
      if (dHost != null) {
        if (!(childDomainIds.contains(dHost.getDomainId()))) {
          throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
        }
        if (accountId != null) {
          if (dHost.getAccountId().equals(accountId)) {
            hostsToRelease.add(dHost);
          }
 else {
            s_logger.error(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
            throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ dc.getName()+ ""String_Node_Str"");
          }
        }
 else {
          if (dHost.getAccountId() == null && dHost.getDomainId().equals(domainId)) {
            hostsToRelease.add(dHost);
          }
        }
      }
    }
    for (    DedicatedResourceVO dr : hostsToRelease) {
      releaseDedicatedResource(null,null,null,dr.getHostId());
    }
  }
  checkHostsSuitabilityForExplicitDedication(accountId,childDomainIds,hosts);
  final Long accountIdFinal=accountId;
  return Transaction.execute(new TransactionCallback<List<DedicatedResourceVO>>(){
    @Override public List<DedicatedResourceVO> doInTransaction(    TransactionStatus status){
      AffinityGroup group=findOrCreateDedicatedAffinityGroup(domainId,accountIdFinal);
      if (group == null) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      DedicatedResourceVO dedicatedResource=new DedicatedResourceVO(zoneId,null,null,null,null,null,group.getId());
      try {
        dedicatedResource.setDomainId(domainId);
        if (accountIdFinal != null) {
          dedicatedResource.setAccountId(accountIdFinal);
        }
        dedicatedResource=_dedicatedDao.persist(dedicatedResource);
        dc.setDomainId(domainId);
        if (!_zoneDao.update(zoneId,dc)) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
 catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + e.getMessage(),e);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      List<DedicatedResourceVO> result=new ArrayList<DedicatedResourceVO>();
      result.add(dedicatedResource);
      return result;
    }
  }
);
}",0.799136786188579
105944,"@Override public AclPolicyResponse createAclPolicyResponse(AclPolicy policy){
  AclPolicyResponse response=new AclPolicyResponse();
  response.setId(policy.getUuid());
  response.setName(policy.getName());
  response.setDescription(policy.getDescription());
  String domainPath=policy.getPath();
  if (domainPath != null) {
    DomainVO domain=_domainDao.findDomainByPath(domainPath);
    if (domain != null) {
      response.setDomainId(domain.getUuid());
      response.setDomainName(domain.getName());
    }
  }
  long accountId=policy.getAccountId();
  AccountVO owner=_accountDao.findById(accountId);
  if (owner != null) {
    response.setAccountName(owner.getAccountName());
  }
  List<AclPolicyPermission> permissions=_iamSrv.listPolicyPermissions(policy.getId());
  if (permissions != null && permissions.size() > 0) {
    for (    AclPolicyPermission permission : permissions) {
      AclPermissionResponse perm=new AclPermissionResponse();
      perm.setAction(permission.getAction());
      perm.setEntityType(AclEntityType.valueOf(permission.getEntityType()));
      perm.setScope(PermissionScope.valueOf(permission.getScope()));
      perm.setScopeId(permission.getScopeId());
      perm.setPermission(permission.getPermission());
      response.addPermission(perm);
    }
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public AclPolicyResponse createAclPolicyResponse(AclPolicy policy){
  AclPolicyResponse response=new AclPolicyResponse();
  response.setId(policy.getUuid());
  response.setName(policy.getName());
  response.setDescription(policy.getDescription());
  String domainPath=policy.getPath();
  if (domainPath != null) {
    DomainVO domain=_domainDao.findDomainByPath(domainPath);
    if (domain != null) {
      response.setDomainId(domain.getUuid());
      response.setDomainName(domain.getName());
    }
  }
  long accountId=policy.getAccountId();
  AccountVO owner=_accountDao.findById(accountId);
  if (owner != null) {
    response.setAccountName(owner.getAccountName());
  }
  List<AclPolicyPermission> permissions=_iamSrv.listPolicyPermissions(policy.getId());
  if (permissions != null && permissions.size() > 0) {
    for (    AclPolicyPermission permission : permissions) {
      AclPermissionResponse perm=new AclPermissionResponse();
      perm.setAction(permission.getAction());
      if (permission.getEntityType() != null) {
        perm.setEntityType(AclEntityType.valueOf(permission.getEntityType()));
      }
      if (permission.getScope() != null) {
        perm.setScope(PermissionScope.valueOf(permission.getScope()));
      }
      perm.setScopeId(permission.getScopeId());
      perm.setPermission(permission.getPermission());
      response.addPermission(perm);
    }
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9606801275239109
105945,"public String[] getResults(){
  return results;
}","public String[] getResults(){
  if (results != null) {
    return Arrays.copyOf(results,results.length);
  }
  return null;
}",0.5632183908045977
105946,"@Override public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext,long dcId,Long podId,Long clusterId,String hostInventoryPath) throws Exception {
  ManagedObjectReference mor=null;
  if (serviceContext != null) {
    mor=serviceContext.getHostMorByPath(hostInventoryPath);
  }
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject(""String_Node_Str"");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null && hosts.size() > 0);
      HostMO hostMo=new HostMO(serviceContext,hosts.get(0));
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts.get(0));
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      if (hosts.size() > 0) {
        AboutInfo about=(AboutInfo)(serviceContext.getVimClient().getDynamicProperty(hosts.get(0),""String_Node_Str""));
        String version=about.getApiVersion();
        int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(HypervisorType.VMware,version);
        if (hosts.size() > maxHostsPerCluster) {
          String msg=""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ maxHostsPerCluster;
          s_logger.error(msg);
          throw new DiscoveredWithErrorException(msg);
        }
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.getValue()+ ""String_Node_Str""+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error(""String_Node_Str"" + hostInventoryPath);
  return null;
}","@Override public List<ManagedObjectReference> addHostToPodCluster(VmwareContext serviceContext,long dcId,Long podId,Long clusterId,String hostInventoryPath) throws Exception {
  if (serviceContext == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  ManagedObjectReference mor=serviceContext.getHostMorByPath(hostInventoryPath);
  String privateTrafficLabel=null;
  privateTrafficLabel=serviceContext.getStockObject(""String_Node_Str"");
  if (privateTrafficLabel == null) {
    privateTrafficLabel=_privateNetworkVSwitchName;
  }
  if (mor != null) {
    List<ManagedObjectReference> returnedHostList=new ArrayList<ManagedObjectReference>();
    if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null && hosts.size() > 0);
      HostMO hostMo=new HostMO(serviceContext,hosts.get(0));
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(hosts.get(0));
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      List<ManagedObjectReference> hosts=serviceContext.getVimClient().getDynamicProperty(mor,""String_Node_Str"");
      assert(hosts != null);
      if (hosts.size() > 0) {
        AboutInfo about=(AboutInfo)(serviceContext.getVimClient().getDynamicProperty(hosts.get(0),""String_Node_Str""));
        String version=about.getApiVersion();
        int maxHostsPerCluster=_hvCapabilitiesDao.getMaxHostsPerCluster(HypervisorType.VMware,version);
        if (hosts.size() > maxHostsPerCluster) {
          String msg=""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ maxHostsPerCluster;
          s_logger.error(msg);
          throw new DiscoveredWithErrorException(msg);
        }
      }
      for (      ManagedObjectReference morHost : hosts) {
        HostMO hostMo=new HostMO(serviceContext,morHost);
        prepareHost(hostMo,privateTrafficLabel);
        returnedHostList.add(morHost);
      }
      return returnedHostList;
    }
 else     if (mor.getType().equals(""String_Node_Str"")) {
      HostMO hostMo=new HostMO(serviceContext,mor);
      prepareHost(hostMo,privateTrafficLabel);
      returnedHostList.add(mor);
      return returnedHostList;
    }
 else {
      s_logger.error(""String_Node_Str"" + mor.getType() + ""String_Node_Str""+ mor.getValue()+ ""String_Node_Str""+ hostInventoryPath);
      return null;
    }
  }
  s_logger.error(""String_Node_Str"" + hostInventoryPath);
  return null;
}",0.9716566866267464
105947,"private ExecutionResult NetworkElementCommandnup(IpAssocCommand cmd){
  String[] results=new String[cmd.getIpAddresses().length];
  VmwareContext context=getServiceContext();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(context);
    IpAddressTO[] ips=cmd.getIpAddresses();
    String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
    String controlIp=VmwareResource.getRouterSshControlIp(cmd);
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(routerName);
    if (vmMo == null) {
      if (hyperHost instanceof HostMO) {
        ClusterMO clusterMo=new ClusterMO(hyperHost.getContext(),((HostMO)hyperHost).getParentMor());
        vmMo=clusterMo.findVmOnHyperHost(routerName);
      }
    }
    if (vmMo == null) {
      String msg=""String_Node_Str"" + routerName + ""String_Node_Str"";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    for (    IpAddressTO ip : ips) {
      URI broadcastUri=BroadcastDomainType.fromString(ip.getBroadcastUri());
      if (BroadcastDomainType.getSchemeValue(broadcastUri) != BroadcastDomainType.Vlan) {
        throw new InternalErrorException(""String_Node_Str"" + ip.getBroadcastUri());
      }
      String vlanId=BroadcastDomainType.getValue(broadcastUri);
      String publicNeworkName=HypervisorHostHelper.getPublicNetworkNamePrefix(vlanId);
      Pair<Integer,VirtualDevice> publicNicInfo=vmMo.getNicDeviceIndex(publicNeworkName);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + publicNeworkName + ""String_Node_Str""+ publicNicInfo.first());
      }
      boolean removeVif=false;
      if (!ip.isAdd() && ip.isFirstIP()) {
        removeVif=true;
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + publicNicInfo.first());
        }
      }
      if (publicNicInfo.first().intValue() < 0) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new InternalErrorException(msg);
      }
      if (removeVif) {
        String nicMasksStr=vmMo.getCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK);
        int nicMasks=Integer.parseInt(nicMasksStr);
        nicMasks&=~(1 << publicNicInfo.first().intValue());
        vmMo.setCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK,String.valueOf(nicMasks));
        HostMO hostMo=vmMo.getRunningHost();
        List<NetworkDetails> networks=vmMo.getNetworksWithDetails();
        for (        NetworkDetails netDetails : networks) {
          if (netDetails.getGCTag() != null && netDetails.getGCTag().equalsIgnoreCase(""String_Node_Str"")) {
            if (netDetails.getVMMorsOnNetwork() == null || netDetails.getVMMorsOnNetwork().length == 1) {
              cleanupNetwork(hostMo,netDetails);
            }
          }
        }
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.toString() + ""String_Node_Str"",e);
    return new ExecutionResult(false,e.toString());
  }
  return new ExecutionResult(true,null);
}","private ExecutionResult NetworkElementCommandnup(IpAssocCommand cmd){
  VmwareContext context=getServiceContext();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(context);
    IpAddressTO[] ips=cmd.getIpAddresses();
    String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
    VmwareResource.getRouterSshControlIp(cmd);
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(routerName);
    if (vmMo == null) {
      if (hyperHost instanceof HostMO) {
        ClusterMO clusterMo=new ClusterMO(hyperHost.getContext(),((HostMO)hyperHost).getParentMor());
        vmMo=clusterMo.findVmOnHyperHost(routerName);
      }
    }
    if (vmMo == null) {
      String msg=""String_Node_Str"" + routerName + ""String_Node_Str"";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    for (    IpAddressTO ip : ips) {
      URI broadcastUri=BroadcastDomainType.fromString(ip.getBroadcastUri());
      if (BroadcastDomainType.getSchemeValue(broadcastUri) != BroadcastDomainType.Vlan) {
        throw new InternalErrorException(""String_Node_Str"" + ip.getBroadcastUri());
      }
      String vlanId=BroadcastDomainType.getValue(broadcastUri);
      String publicNeworkName=HypervisorHostHelper.getPublicNetworkNamePrefix(vlanId);
      Pair<Integer,VirtualDevice> publicNicInfo=vmMo.getNicDeviceIndex(publicNeworkName);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + publicNeworkName + ""String_Node_Str""+ publicNicInfo.first());
      }
      boolean removeVif=false;
      if (!ip.isAdd() && ip.isFirstIP()) {
        removeVif=true;
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + publicNicInfo.first());
        }
      }
      if (publicNicInfo.first().intValue() < 0) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new InternalErrorException(msg);
      }
      if (removeVif) {
        String nicMasksStr=vmMo.getCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK);
        int nicMasks=Integer.parseInt(nicMasksStr);
        nicMasks&=~(1 << publicNicInfo.first().intValue());
        vmMo.setCustomFieldValue(CustomFieldConstants.CLOUD_NIC_MASK,String.valueOf(nicMasks));
        HostMO hostMo=vmMo.getRunningHost();
        List<NetworkDetails> networks=vmMo.getNetworksWithDetails();
        for (        NetworkDetails netDetails : networks) {
          if (netDetails.getGCTag() != null && netDetails.getGCTag().equalsIgnoreCase(""String_Node_Str"")) {
            if (netDetails.getVMMorsOnNetwork() == null || netDetails.getVMMorsOnNetwork().length == 1) {
              cleanupNetwork(hostMo,netDetails);
            }
          }
        }
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.toString() + ""String_Node_Str"",e);
    return new ExecutionResult(false,e.toString());
  }
  return new ExecutionResult(true,null);
}",0.9869380831212892
105948,"@Override public ExecutionResult createFileInVR(String routerIp,String filePath,String fileName,String content){
  VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  File keyFile=mgr.getSystemVMKeyFile();
  boolean result=true;
  try {
    SshHelper.scpTo(routerIp,3922,""String_Node_Str"",keyFile,null,filePath,content.getBytes(),fileName,null);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + filePath + fileName+ ""String_Node_Str""+ routerIp,e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}","@Override public ExecutionResult createFileInVR(String routerIp,String filePath,String fileName,String content){
  VmwareManager mgr=getServiceContext().getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
  File keyFile=mgr.getSystemVMKeyFile();
  try {
    SshHelper.scpTo(routerIp,3922,""String_Node_Str"",keyFile,null,filePath,content.getBytes(),fileName,null);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + filePath + fileName+ ""String_Node_Str""+ routerIp,e);
    return new ExecutionResult(false,e.getMessage());
  }
  return new ExecutionResult(true,null);
}",0.980590717299578
105949,"private ExecutionResult prepareNetworkElementCommand(IpAssocCommand cmd){
  int i=0;
  String[] results=new String[cmd.getIpAddresses().length];
  VmwareContext context=getServiceContext();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(context);
    IpAddressTO[] ips=cmd.getIpAddresses();
    String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
    String controlIp=VmwareResource.getRouterSshControlIp(cmd);
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(routerName);
    if (vmMo == null) {
      if (hyperHost instanceof HostMO) {
        ClusterMO clusterMo=new ClusterMO(hyperHost.getContext(),((HostMO)hyperHost).getParentMor());
        vmMo=clusterMo.findVmOnHyperHost(routerName);
      }
    }
    if (vmMo == null) {
      String msg=""String_Node_Str"" + routerName + ""String_Node_Str"";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    for (    IpAddressTO ip : ips) {
      URI broadcastUri=BroadcastDomainType.fromString(ip.getBroadcastUri());
      if (BroadcastDomainType.getSchemeValue(broadcastUri) != BroadcastDomainType.Vlan) {
        throw new InternalErrorException(""String_Node_Str"" + ip.getBroadcastUri());
      }
      String vlanId=BroadcastDomainType.getValue(broadcastUri);
      String publicNeworkName=HypervisorHostHelper.getPublicNetworkNamePrefix(vlanId);
      Pair<Integer,VirtualDevice> publicNicInfo=vmMo.getNicDeviceIndex(publicNeworkName);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + publicNeworkName + ""String_Node_Str""+ publicNicInfo.first());
      }
      boolean addVif=false;
      if (ip.isAdd() && publicNicInfo.first().intValue() == -1) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + controlIp + ""String_Node_Str""+ ip.getPublicIp());
        }
        addVif=true;
      }
      if (addVif) {
        plugPublicNic(vmMo,vlanId,ip.getVifMacAddress());
        publicNicInfo=vmMo.getNicDeviceIndex(publicNeworkName);
        if (publicNicInfo.first().intValue() >= 0) {
          networkUsage(controlIp,""String_Node_Str"",""String_Node_Str"" + publicNicInfo.first());
        }
      }
      if (publicNicInfo.first().intValue() < 0) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new InternalErrorException(msg);
      }
      ip.setNicDevId(publicNicInfo.first().intValue());
      ip.setNewNic(addVif);
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.toString() + ""String_Node_Str"",e);
    return new ExecutionResult(false,e.toString());
  }
  return new ExecutionResult(true,null);
}","private ExecutionResult prepareNetworkElementCommand(IpAssocCommand cmd){
  VmwareContext context=getServiceContext();
  try {
    VmwareHypervisorHost hyperHost=getHyperHost(context);
    IpAddressTO[] ips=cmd.getIpAddresses();
    String routerName=cmd.getAccessDetail(NetworkElementCommand.ROUTER_NAME);
    String controlIp=VmwareResource.getRouterSshControlIp(cmd);
    VirtualMachineMO vmMo=hyperHost.findVmOnHyperHost(routerName);
    if (vmMo == null) {
      if (hyperHost instanceof HostMO) {
        ClusterMO clusterMo=new ClusterMO(hyperHost.getContext(),((HostMO)hyperHost).getParentMor());
        vmMo=clusterMo.findVmOnHyperHost(routerName);
      }
    }
    if (vmMo == null) {
      String msg=""String_Node_Str"" + routerName + ""String_Node_Str"";
      s_logger.error(msg);
      throw new Exception(msg);
    }
    for (    IpAddressTO ip : ips) {
      URI broadcastUri=BroadcastDomainType.fromString(ip.getBroadcastUri());
      if (BroadcastDomainType.getSchemeValue(broadcastUri) != BroadcastDomainType.Vlan) {
        throw new InternalErrorException(""String_Node_Str"" + ip.getBroadcastUri());
      }
      String vlanId=BroadcastDomainType.getValue(broadcastUri);
      String publicNeworkName=HypervisorHostHelper.getPublicNetworkNamePrefix(vlanId);
      Pair<Integer,VirtualDevice> publicNicInfo=vmMo.getNicDeviceIndex(publicNeworkName);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + publicNeworkName + ""String_Node_Str""+ publicNicInfo.first());
      }
      boolean addVif=false;
      if (ip.isAdd() && publicNicInfo.first().intValue() == -1) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + controlIp + ""String_Node_Str""+ ip.getPublicIp());
        }
        addVif=true;
      }
      if (addVif) {
        plugPublicNic(vmMo,vlanId,ip.getVifMacAddress());
        publicNicInfo=vmMo.getNicDeviceIndex(publicNeworkName);
        if (publicNicInfo.first().intValue() >= 0) {
          networkUsage(controlIp,""String_Node_Str"",""String_Node_Str"" + publicNicInfo.first());
        }
      }
      if (publicNicInfo.first().intValue() < 0) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new InternalErrorException(msg);
      }
      ip.setNicDevId(publicNicInfo.first().intValue());
      ip.setNewNic(addVif);
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.toString() + ""String_Node_Str"",e);
    return new ExecutionResult(false,e.toString());
  }
  return new ExecutionResult(true,null);
}",0.9863330125120308
105950,"@SuppressWarnings(""String_Node_Str"") @Override public DataStore initialize(Map<String,Object> dsInfos){
  Long clusterId=(Long)dsInfos.get(""String_Node_Str"");
  Long podId=(Long)dsInfos.get(""String_Node_Str"");
  Long zoneId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      URI cifsUri=new URI(url);
      String warnMsg=UriUtils.getCifsUriParametersProblems(cifsUri);
      if (warnMsg != null) {
        throw new InvalidParameterValueException(warnMsg);
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  String tags=(String)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  parameters.setTags(tags);
  parameters.setDetails(details);
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  Object localStorage=dsInfos.get(""String_Node_Str"");
  if (localStorage != null) {
    hostPath=hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    hostPath=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String userInfo=uri.getUserInfo();
  int port=uri.getPort();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.NetworkFilesystem);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=445;
    }
    parameters.setType(StoragePoolType.SMB);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    parameters.setType(StoragePoolType.Filesystem);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.SharedMountPoint);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.CLVM);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=6789;
    }
    parameters.setType(StoragePoolType.RBD);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    parameters.setUserInfo(userInfo);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.PreSetup);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      parameters.setType(StoragePoolType.IscsiLUN);
      parameters.setHost(storageHost);
      parameters.setPort(port);
      parameters.setPath(hostPath);
    }
 else {
      for (      StoragePoolDiscoverer discoverer : _discoverers) {
        Map<? extends StoragePool,Map<String,String>> pools;
        try {
          pools=discoverer.find(zoneId,podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<? extends StoragePool,Map<String,String>> entry=pools.entrySet().iterator().next();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.ISO);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.VMFS);
    parameters.setHost(""String_Node_Str"" + hostPath);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    port=7777;
    parameters.setType(StoragePoolType.OCFS2);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else {
    StoragePoolType type=Enum.valueOf(StoragePoolType.class,scheme);
    if (type != null) {
      parameters.setType(type);
      parameters.setHost(storageHost);
      parameters.setPort(0);
      parameters.setPath(hostPath);
    }
 else {
      s_logger.warn(""String_Node_Str"" + uri);
      throw new IllegalArgumentException(""String_Node_Str"" + uri);
    }
  }
  if (localStorage == null) {
    List<StoragePoolVO> pools=primaryDataStoreDao.listPoolByHostPath(storageHost,hostPath);
    if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
      Long oldPodId=pools.get(0).getPodId();
      throw new CloudRuntimeException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"");
    }
  }
  Object existingUuid=dsInfos.get(""String_Node_Str"");
  String uuid=null;
  if (existingUuid != null) {
    uuid=(String)existingUuid;
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"") || scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=primaryDataStoreDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  String poolName=(String)dsInfos.get(""String_Node_Str"");
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setPodId(podId);
  parameters.setName(poolName);
  parameters.setClusterId(clusterId);
  parameters.setProviderName(providerName);
  return dataStoreHelper.createPrimaryDataStore(parameters);
}","@SuppressWarnings(""String_Node_Str"") @Override public DataStore initialize(Map<String,Object> dsInfos){
  Long clusterId=(Long)dsInfos.get(""String_Node_Str"");
  Long podId=(Long)dsInfos.get(""String_Node_Str"");
  Long zoneId=(Long)dsInfos.get(""String_Node_Str"");
  String url=(String)dsInfos.get(""String_Node_Str"");
  String providerName=(String)dsInfos.get(""String_Node_Str"");
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  PrimaryDataStoreParameters parameters=new PrimaryDataStoreParameters();
  URI uri=null;
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      URI cifsUri=new URI(url);
      String warnMsg=UriUtils.getCifsUriParametersProblems(cifsUri);
      if (warnMsg != null) {
        throw new InvalidParameterValueException(warnMsg);
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  String tags=(String)dsInfos.get(""String_Node_Str"");
  Map<String,String> details=(Map<String,String>)dsInfos.get(""String_Node_Str"");
  parameters.setTags(tags);
  parameters.setDetails(details);
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  Object localStorage=dsInfos.get(""String_Node_Str"");
  if (localStorage != null) {
    hostPath=hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    hostPath=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
  String userInfo=uri.getUserInfo();
  int port=uri.getPort();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.NetworkFilesystem);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=445;
    }
    parameters.setType(StoragePoolType.SMB);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    parameters.setType(StoragePoolType.Filesystem);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.SharedMountPoint);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.CLVM);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=6789;
    }
    parameters.setType(StoragePoolType.RBD);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    parameters.setUserInfo(userInfo);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.PreSetup);
    parameters.setHost(storageHost);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath=hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      parameters.setType(StoragePoolType.IscsiLUN);
      parameters.setHost(storageHost);
      parameters.setPort(port);
      parameters.setPath(hostPath);
    }
 else {
      for (      StoragePoolDiscoverer discoverer : _discoverers) {
        Map<? extends StoragePool,Map<String,String>> pools;
        try {
          pools=discoverer.find(zoneId,podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<? extends StoragePool,Map<String,String>> entry=pools.entrySet().iterator().next();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    parameters.setType(StoragePoolType.ISO);
    parameters.setHost(storageHost);
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    parameters.setType(StoragePoolType.VMFS);
    parameters.setHost(""String_Node_Str"" + hostPath);
    parameters.setPort(0);
    parameters.setPath(hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    port=7777;
    parameters.setType(StoragePoolType.OCFS2);
    parameters.setHost(""String_Node_Str"");
    parameters.setPort(port);
    parameters.setPath(hostPath);
  }
 else {
    StoragePoolType type=Enum.valueOf(StoragePoolType.class,scheme);
    if (type != null) {
      parameters.setType(type);
      parameters.setHost(storageHost);
      parameters.setPort(0);
      parameters.setPath(hostPath);
    }
 else {
      s_logger.warn(""String_Node_Str"" + uri);
      throw new IllegalArgumentException(""String_Node_Str"" + uri);
    }
  }
  if (localStorage == null) {
    List<StoragePoolVO> pools=primaryDataStoreDao.listPoolByHostPath(storageHost,hostPath);
    if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
      Long oldPodId=pools.get(0).getPodId();
      throw new CloudRuntimeException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"");
    }
  }
  Object existingUuid=dsInfos.get(""String_Node_Str"");
  String uuid=null;
  if (existingUuid != null) {
    uuid=(String)existingUuid;
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"") || scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes((storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=primaryDataStoreDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  String poolName=(String)dsInfos.get(""String_Node_Str"");
  parameters.setUuid(uuid);
  parameters.setZoneId(zoneId);
  parameters.setPodId(podId);
  parameters.setName(poolName);
  parameters.setClusterId(clusterId);
  parameters.setProviderName(providerName);
  return dataStoreHelper.createPrimaryDataStore(parameters);
}",0.998840119650815
105951,"@Override public String getName(){
  return providerName;
}","@Override public String getName(){
  return DataStoreProvider.DEFAULT_PRIMARY;
}",0.7769784172661871
105952,"@Override public DataStoreLifeCycle getDataStoreLifeCycle(){
  return this.lifecycle;
}","@Override public DataStoreLifeCycle getDataStoreLifeCycle(){
  return lifecycle;
}",0.970414201183432
105953,"@Override public PrimaryDataStoreDriver getDataStoreDriver(){
  return this.driver;
}","@Override public PrimaryDataStoreDriver getDataStoreDriver(){
  return driver;
}",0.9696969696969696
105954,"@Override public HypervisorHostListener getHostListener(){
  return this.listener;
}","@Override public HypervisorHostListener getHostListener(){
  return listener;
}",0.9693251533742332
105955,"protected boolean handleDisconnectWithInvestigation(AgentAttache attache,Status.Event event){
  long hostId=attache.getId();
  HostVO host=_hostDao.findById(hostId);
  if (host != null) {
    Status nextStatus=null;
    try {
      nextStatus=host.getStatus().getNextStatus(event);
    }
 catch (    NoTransitionException ne) {
    }
    if (nextStatus == Status.Alert) {
      s_logger.info(""String_Node_Str"" + hostId + ""String_Node_Str""+ event);
      final Status determinedState=investigate(attache);
      if (determinedState == null) {
        s_logger.warn(""String_Node_Str"");
        return false;
      }
      final Status currentStatus=host.getStatus();
      s_logger.info(""String_Node_Str"" + determinedState);
      if (determinedState == Status.Down) {
        s_logger.error(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        event=Status.Event.HostDown;
      }
 else       if (determinedState == Status.Up) {
        s_logger.info(""String_Node_Str"");
        agentStatusTransitTo(host,Status.Event.Ping,_nodeId);
        return false;
      }
 else       if (determinedState == Status.Disconnected) {
        s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName());
        if (currentStatus == Status.Disconnected) {
          if (((System.currentTimeMillis() >> 10) - host.getLastPinged()) > AlertWait.value()) {
            s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
            event=Status.Event.WaitedTooLong;
          }
 else {
            s_logger.debug(""String_Node_Str"");
            return false;
          }
        }
 else         if (currentStatus == Status.Up) {
          DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
          HostPodVO podVO=_podDao.findById(host.getPodId());
          String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
          if ((host.getType() != Host.Type.SecondaryStorage) && (host.getType() != Host.Type.ConsoleProxy)) {
            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str""+ AlertWait+ ""String_Node_Str"");
          }
          event=Status.Event.AgentDisconnected;
        }
      }
 else {
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ host.getName());
      }
    }
 else {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    }
  }
  handleDisconnectWithoutInvestigation(attache,event,true,true);
  host=_hostDao.findById(host.getId());
  if (host.getStatus() == Status.Alert || host.getStatus() == Status.Down) {
    _haMgr.scheduleRestartForVmsOnHost(host,true);
  }
  return true;
}","protected boolean handleDisconnectWithInvestigation(AgentAttache attache,Status.Event event){
  long hostId=attache.getId();
  HostVO host=_hostDao.findById(hostId);
  if (host != null) {
    Status nextStatus=null;
    try {
      nextStatus=host.getStatus().getNextStatus(event);
    }
 catch (    NoTransitionException ne) {
    }
    if (nextStatus == Status.Alert) {
      s_logger.info(""String_Node_Str"" + hostId + ""String_Node_Str""+ event);
      final Status determinedState=investigate(attache);
      if (determinedState == null) {
        s_logger.warn(""String_Node_Str"");
        return false;
      }
      final Status currentStatus=host.getStatus();
      s_logger.info(""String_Node_Str"" + determinedState);
      if (determinedState == Status.Down) {
        s_logger.error(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        event=Status.Event.HostDown;
      }
 else       if (determinedState == Status.Up) {
        s_logger.info(""String_Node_Str"");
        agentStatusTransitTo(host,Status.Event.Ping,_nodeId);
        return false;
      }
 else       if (determinedState == Status.Disconnected) {
        s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName());
        if (currentStatus == Status.Disconnected) {
          if (((System.currentTimeMillis() >> 10) - host.getLastPinged()) > AlertWait.value()) {
            s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
            event=Status.Event.WaitedTooLong;
          }
 else {
            s_logger.debug(""String_Node_Str"");
            return false;
          }
        }
 else         if (currentStatus == Status.Up) {
          DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
          HostPodVO podVO=_podDao.findById(host.getPodId());
          String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
          if ((host.getType() != Host.Type.SecondaryStorage) && (host.getType() != Host.Type.ConsoleProxy)) {
            _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str""+ AlertWait+ ""String_Node_Str"");
          }
          event=Status.Event.AgentDisconnected;
        }
      }
 else {
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ host.getName());
      }
    }
 else {
      s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"");
    }
  }
  handleDisconnectWithoutInvestigation(attache,event,true,true);
  host=_hostDao.findById(hostId);
  if (host != null && (host.getStatus() == Status.Alert || host.getStatus() == Status.Down)) {
    _haMgr.scheduleRestartForVmsOnHost(host,true);
  }
  return true;
}",0.996382273138378
105956,"protected void processResponse(final Link link,final Response response){
  final AgentAttache attache=(AgentAttache)link.attachment();
  if (attache == null) {
    s_logger.warn(""String_Node_Str"" + response);
  }
  if (!attache.processAnswers(response.getSequence(),response)) {
    s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response);
  }
}","protected void processResponse(final Link link,final Response response){
  final AgentAttache attache=(AgentAttache)link.attachment();
  if (attache == null) {
    s_logger.warn(""String_Node_Str"" + response);
  }
 else   if (!attache.processAnswers(response.getSequence(),response)) {
    s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response);
  }
}",0.9927884615384616
105957,"private void createPolicyAndAddToDomainGroup(String policyName,String description,String entityType,Long entityId,String action,AccessType accessType,Long domainId,Boolean recursive){
  AclPolicy policy=_iamSrv.createAclPolicy(policyName,description,null);
  _iamSrv.addAclPermissionToAclPolicy(policy.getId(),entityType,PermissionScope.RESOURCE.toString(),entityId,action,accessType.toString(),Permission.Allow,recursive);
  List<Long> policyList=new ArrayList<Long>();
  policyList.add(new Long(policy.getId()));
  Domain domain=_domainDao.findById(domainId);
  if (domain != null) {
    List<AclGroup> domainGroups=listDomainGroup(domain);
    if (domainGroups != null) {
      for (      AclGroup group : domainGroups) {
        _iamSrv.attachAclPoliciesToGroup(policyList,group.getId());
      }
    }
  }
}","private void createPolicyAndAddToDomainGroup(String policyName,String description,String entityType,Long entityId,String action,AccessType accessType,Long domainId,Boolean recursive){
  Domain domain=_domainDao.findById(domainId);
  if (domain != null) {
    AclPolicy policy=_iamSrv.createAclPolicy(policyName,description,null,domain.getPath());
    _iamSrv.addAclPermissionToAclPolicy(policy.getId(),entityType,PermissionScope.RESOURCE.toString(),entityId,action,accessType.toString(),Permission.Allow,recursive);
    List<Long> policyList=new ArrayList<Long>();
    policyList.add(new Long(policy.getId()));
    List<AclGroup> domainGroups=listDomainGroup(domain);
    if (domainGroups != null) {
      for (      AclGroup group : domainGroups) {
        _iamSrv.attachAclPoliciesToGroup(policyList,group.getId());
      }
    }
  }
}",0.6949666464523954
105958,"@DB @Override @ActionEvent(eventType=EventTypes.EVENT_ACL_POLICY_CREATE,eventDescription=""String_Node_Str"",create=true) public AclPolicy createAclPolicy(Account caller,final String aclPolicyName,final String description,final Long parentPolicyId){
  return _iamSrv.createAclPolicy(aclPolicyName,description,parentPolicyId);
}","@DB @Override @ActionEvent(eventType=EventTypes.EVENT_ACL_POLICY_CREATE,eventDescription=""String_Node_Str"",create=true) public AclPolicy createAclPolicy(Account caller,final String aclPolicyName,final String description,final Long parentPolicyId){
  Long domainId=caller.getDomainId();
  Domain callerDomain=_domainDao.findById(domainId);
  if (callerDomain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return _iamSrv.createAclPolicy(aclPolicyName,description,parentPolicyId,callerDomain.getPath());
}",0.746234067207416
105959,"AclPolicy createAclPolicy(String aclPolicyName,String description,Long parentPolicyId);","AclPolicy createAclPolicy(String aclPolicyName,String description,Long parentPolicyId,String path);",0.935483870967742
105960,"@DB @Override public AclPolicy createAclPolicy(final String aclPolicyName,final String description,final Long parentPolicyId){
  AclPolicy ro=_aclPolicyDao.findByName(aclPolicyName);
  if (ro != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + aclPolicyName + ""String_Node_Str"");
  }
  AclPolicy role=Transaction.execute(new TransactionCallback<AclPolicy>(){
    @Override public AclPolicy doInTransaction(    TransactionStatus status){
      AclPolicyVO rvo=new AclPolicyVO(aclPolicyName,description);
      AclPolicy role=_aclPolicyDao.persist(rvo);
      if (parentPolicyId != null) {
        List<AclPolicyPermissionVO> perms=_policyPermissionDao.listByPolicy(parentPolicyId);
        if (perms != null) {
          for (          AclPolicyPermissionVO perm : perms) {
            perm.setAclPolicyId(role.getId());
            _policyPermissionDao.persist(perm);
          }
        }
      }
      return role;
    }
  }
);
  return role;
}","@DB @Override public AclPolicy createAclPolicy(final String aclPolicyName,final String description,final Long parentPolicyId,final String path){
  AclPolicy ro=_aclPolicyDao.findByName(aclPolicyName);
  if (ro != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + aclPolicyName + ""String_Node_Str"");
  }
  AclPolicy role=Transaction.execute(new TransactionCallback<AclPolicy>(){
    @Override public AclPolicy doInTransaction(    TransactionStatus status){
      AclPolicyVO rvo=new AclPolicyVO(aclPolicyName,description);
      rvo.setPath(path);
      AclPolicy role=_aclPolicyDao.persist(rvo);
      if (parentPolicyId != null) {
        List<AclPolicyPermissionVO> perms=_policyPermissionDao.listByPolicy(parentPolicyId);
        if (perms != null) {
          for (          AclPolicyPermissionVO perm : perms) {
            perm.setAclPolicyId(role.getId());
            _policyPermissionDao.persist(perm);
          }
        }
      }
      return role;
    }
  }
);
  return role;
}",0.978315683308119
105961,"@Override public AclPolicy doInTransaction(TransactionStatus status){
  AclPolicyVO rvo=new AclPolicyVO(aclPolicyName,description);
  AclPolicy role=_aclPolicyDao.persist(rvo);
  if (parentPolicyId != null) {
    List<AclPolicyPermissionVO> perms=_policyPermissionDao.listByPolicy(parentPolicyId);
    if (perms != null) {
      for (      AclPolicyPermissionVO perm : perms) {
        perm.setAclPolicyId(role.getId());
        _policyPermissionDao.persist(perm);
      }
    }
  }
  return role;
}","@Override public AclPolicy doInTransaction(TransactionStatus status){
  AclPolicyVO rvo=new AclPolicyVO(aclPolicyName,description);
  rvo.setPath(path);
  AclPolicy role=_aclPolicyDao.persist(rvo);
  if (parentPolicyId != null) {
    List<AclPolicyPermissionVO> perms=_policyPermissionDao.listByPolicy(parentPolicyId);
    if (perms != null) {
      for (      AclPolicyPermissionVO perm : perms) {
        perm.setAclPolicyId(role.getId());
        _policyPermissionDao.persist(perm);
      }
    }
  }
  return role;
}",0.9793915603532876
105962,"@Test public void toReadableSize(){
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize((1024l * 1024l * 1024l* 1024l)));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize(1024 * 1024 * 1024));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize(1024 * 1024));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize((1024)));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize((1023)));
}","@Test public void toReadableSize(){
  Locale.setDefault(Locale.US);
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize((1024l * 1024l * 1024l* 1024l)));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize(1024 * 1024 * 1024));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize(1024 * 1024));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize((1024)));
  assertEquals(""String_Node_Str"",NumbersUtil.toReadableSize((1023)));
}",0.963963963963964
105963,"private void addDomainWideResourceAccess(Map<String,Object> params){
  String entityType=(String)params.get(ApiConstants.ENTITY_TYPE);
  Long entityId=(Long)params.get(ApiConstants.ENTITY_ID);
  Long domainId=(Long)params.get(ApiConstants.DOMAIN_ID);
  Boolean isRecursive=(Boolean)params.get(ApiConstants.SUBDOMAIN_ACCESS);
  if (AclEntityType.Network.toString().equals(entityType)) {
    createPolicyAndAddToDomainGroup(""String_Node_Str"" + entityId,""String_Node_Str"",entityType,entityId,""String_Node_Str"",AccessType.UseEntry,domainId,isRecursive);
  }
 else   if (AclEntityType.AffinityGroup.toString().equals(entityType)) {
    createPolicyAndAddToDomainGroup(""String_Node_Str"" + entityId,""String_Node_Str"",entityType,entityId,""String_Node_Str"",AccessType.UseEntry,domainId,isRecursive);
  }
}","private void addDomainWideResourceAccess(Map<String,Object> params){
  AclEntityType entityType=(AclEntityType)params.get(ApiConstants.ENTITY_TYPE);
  Long entityId=(Long)params.get(ApiConstants.ENTITY_ID);
  Long domainId=(Long)params.get(ApiConstants.DOMAIN_ID);
  Boolean isRecursive=(Boolean)params.get(ApiConstants.SUBDOMAIN_ACCESS);
  if (entityType == AclEntityType.Network) {
    createPolicyAndAddToDomainGroup(""String_Node_Str"" + entityId,""String_Node_Str"",entityType.toString(),entityId,""String_Node_Str"",AccessType.UseEntry,domainId,isRecursive);
  }
 else   if (entityType == AclEntityType.AffinityGroup) {
    createPolicyAndAddToDomainGroup(""String_Node_Str"" + entityId,""String_Node_Str"",entityType.toString(),entityId,""String_Node_Str"",AccessType.UseEntry,domainId,isRecursive);
  }
}",0.4924812030075188
105964,"@Override public List<AclGroup> listParentAclGroups(long groupId){
  AclGroup group=_aclGroupDao.findById(groupId);
  if (group == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + groupId);
  }
  String path=group.getPath();
  List<String> pathList=new ArrayList<String>();
  String[] parts=path.split(""String_Node_Str"");
  for (  String part : parts) {
    int start=path.indexOf(part);
    if (start > 0) {
      String subPath=path.substring(0,start);
      pathList.add(subPath);
    }
  }
  SearchBuilder<AclGroupVO> sb=_aclGroupDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.IN);
  SearchCriteria<AclGroupVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",pathList.toArray());
  List<AclGroupVO> groups=_aclGroupDao.search(sc,null);
  return new ArrayList<AclGroup>(groups);
}","@Override public List<AclGroup> listParentAclGroups(long groupId){
  AclGroup group=_aclGroupDao.findById(groupId);
  if (group == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + groupId);
  }
  String path=group.getPath();
  List<String> pathList=new ArrayList<String>();
  String[] parts=path.split(""String_Node_Str"");
  for (  String part : parts) {
    int start=path.indexOf(part);
    if (start > 0) {
      String subPath=path.substring(0,start);
      pathList.add(subPath);
    }
  }
  if (pathList.isEmpty()) {
    return new ArrayList<AclGroup>();
  }
  SearchBuilder<AclGroupVO> sb=_aclGroupDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getPath(),SearchCriteria.Op.IN);
  SearchCriteria<AclGroupVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",pathList.toArray());
  List<AclGroupVO> groups=_aclGroupDao.search(sc,null);
  return new ArrayList<AclGroup>(groups);
}",0.9608501118568232
105965,"public static ImageFormat getFormat(String format){
  for (  ImageFormat fm : formats) {
    if (fm.equals(format)) {
      return fm;
    }
  }
  return ImageFormatHelper.defaultFormat;
}","public static ImageFormat getFormat(String format){
  for (  ImageFormat fm : formats) {
    if (fm.toString().equals(format)) {
      return fm;
    }
  }
  return ImageFormatHelper.defaultFormat;
}",0.9715762273901808
105966,"public MonitoringServiceDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isDefaultService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getProcessname(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServiceName(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServicePath(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPidFile(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
}","public MonitoringServiceDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().isDefaultService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getService(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getProcessName(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServiceName(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServicePath(),SearchCriteria.Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getServicePidFile(),SearchCriteria.Op.EQ);
  AllFieldsSearch.done();
}",0.9939312204989884
105967,"@Override public String getServicePath(){
  return this.servicePidFile;
}","@Override public String getServicePath(){
  return servicePidFile;
}",0.9645390070921984
105968,"@Override public String getServiceName(){
  return this.servicename;
}","@Override public String getServiceName(){
  return serviceName;
}",0.9481481481481482
105969,"@Override public String getService(){
  return this.service;
}","@Override public String getService(){
  return service;
}",0.957983193277311
105970,"public String getDetail(String name){
  if (details == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return details.get(name);
}","public String getDetail(String name){
}",0.4083769633507853
105971,"@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  String storePassword=String.valueOf(_random.nextLong());
  byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
  assert(ksBits != null);
  if (ksBits == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new CloudRuntimeException(msg);
  }
  cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  cmd.setEncryptorPassword(getEncryptorPassword());
  try {
    HostVO consoleProxyHost=findConsoleProxyHost(startupCmd);
    assert(consoleProxyHost != null);
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}","@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  String storePassword=String.valueOf(_random.nextLong());
  byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
  assert(ksBits != null);
  if (ksBits == null) {
    s_logger.error(""String_Node_Str"");
  }
  cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  cmd.setEncryptorPassword(getEncryptorPassword());
  try {
    HostVO consoleProxyHost=findConsoleProxyHost(startupCmd);
    assert(consoleProxyHost != null);
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}",0.9650986342943856
105972,"@Override public String getUuid(){
  return uuid;
}","@Override public String getUuid(){
  return this.uuid;
}",0.9532710280373832
105973,"@Override public boolean equals(Object obj){
  if (obj instanceof DedicatedResourceVO) {
    return ((DedicatedResourceVO)obj).getId() == getId();
  }
 else {
    return false;
  }
}","@Override public boolean equals(Object obj){
  if (obj instanceof DedicatedResourceVO) {
    return ((DedicatedResourceVO)obj).getId() == this.getId();
  }
 else {
    return false;
  }
}",0.986449864498645
105974,"public DedicatedResourceVO(long dedicatedResourceId){
  id=dedicatedResourceId;
}","public DedicatedResourceVO(long dedicatedResourceId){
  this.id=dedicatedResourceId;
}",0.9700598802395208
105975,"@Override public boolean isPortableIpTransferableFromNetwork(long ipAddrId,long networkId){
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ip=_ipAddressDao.findById(ipAddrId);
  if (ip == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null && !ipToServices.isEmpty()) {
    Set<Service> ipServices=ipToServices.get(publicIp);
    if (ipServices != null && !ipServices.isEmpty()) {
      return false;
    }
  }
  return true;
}","@Override public boolean isPortableIpTransferableFromNetwork(long ipAddrId,long networkId){
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ip=_ipAddressDao.findById(ipAddrId);
  if (ip == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null & !ipToServices.isEmpty()) {
    Set<Service> ipServices=ipToServices.get(publicIp);
    if (ipServices != null && !ipServices.isEmpty()) {
      return false;
    }
  }
  return true;
}",0.9994249568717654
105976,"@Override public boolean applyStaticNats(List<? extends StaticNat> staticNats,boolean continueOnError,boolean forRevoke) throws ResourceUnavailableException {
  if (staticNats == null || staticNats.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return true;
  }
  Network network=_networksDao.findById(staticNats.get(0).getNetworkId());
  boolean success=true;
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
      publicIps.add(publicIp);
    }
  }
  if (checkStaticNatIPAssocRequired(network,false,forRevoke,publicIps)) {
    applyIpAssociations(network,false,continueOnError,publicIps);
  }
  StaticNatServiceProvider element=_networkMgr.getStaticNatProviderForNetwork(network);
  try {
    success=element.applyStaticNats(network,staticNats);
  }
 catch (  ResourceUnavailableException e) {
    if (!continueOnError) {
      throw e;
    }
    s_logger.warn(""String_Node_Str"" + element.getName() + ""String_Node_Str"",e);
    success=false;
  }
  for (  StaticNat staticNat : staticNats) {
    if (staticNat.isForRevoke()) {
      for (      PublicIp publicIp : publicIps) {
        if (publicIp.getId() == staticNat.getSourceIpAddressId()) {
          publicIps.remove(publicIp);
          IPAddressVO ip=_ipAddressDao.findByIdIncludingRemoved(staticNat.getSourceIpAddressId());
          ip.setAssociatedWithVmId(null);
          publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
          publicIps.add(publicIp);
          break;
        }
      }
    }
  }
  if (checkStaticNatIPAssocRequired(network,true,forRevoke,publicIps)) {
    applyIpAssociations(network,true,continueOnError,publicIps);
  }
  return success;
}","@Override public boolean applyStaticNats(List<? extends StaticNat> staticNats,boolean continueOnError,boolean forRevoke) throws ResourceUnavailableException {
  Network network=_networksDao.findById(staticNats.get(0).getNetworkId());
  boolean success=true;
  if (staticNats == null || staticNats.size() == 0) {
    s_logger.debug(""String_Node_Str"");
    return true;
  }
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=PublicIp.createFromAddrAndVlan(userIp,_vlanDao.findById(userIp.getVlanId()));
      publicIps.add(publicIp);
    }
  }
  if (checkStaticNatIPAssocRequired(network,false,forRevoke,publicIps)) {
    applyIpAssociations(network,false,continueOnError,publicIps);
  }
  StaticNatServiceProvider element=_networkMgr.getStaticNatProviderForNetwork(network);
  try {
    success=element.applyStaticNats(network,staticNats);
  }
 catch (  ResourceUnavailableException e) {
    if (!continueOnError) {
      throw e;
    }
    s_logger.warn(""String_Node_Str"" + element.getName() + ""String_Node_Str"",e);
    success=false;
  }
  for (  StaticNat staticNat : staticNats) {
    if (staticNat.isForRevoke()) {
      for (      PublicIp publicIp : publicIps) {
        if (publicIp.getId() == staticNat.getSourceIpAddressId()) {
          publicIps.remove(publicIp);
          IPAddressVO ip=_ipAddressDao.findByIdIncludingRemoved(staticNat.getSourceIpAddressId());
          ip.setAssociatedWithVmId(null);
          publicIp=PublicIp.createFromAddrAndVlan(ip,_vlanDao.findById(ip.getVlanId()));
          publicIps.add(publicIp);
          break;
        }
      }
    }
  }
  if (checkStaticNatIPAssocRequired(network,true,forRevoke,publicIps)) {
    applyIpAssociations(network,true,continueOnError,publicIps);
  }
  return success;
}",0.9493346980552712
105977,"@DB @Override public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId,long networkId) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str"");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null && !ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
  }
}","@DB @Override public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId,long networkId) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    if (ipToAssoc.getAssociatedWithNetworkId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str"");
    }
    if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));
        _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<PublicIpAddress> ipList=new ArrayList<PublicIpAddress>();
  PublicIp publicIp=PublicIp.createFromAddrAndVlan(ipToAssoc,_vlanDao.findById(ipToAssoc.getVlanId()));
  ipList.add(publicIp);
  Map<PublicIpAddress,Set<Service>> ipToServices=_networkModel.getIpToServices(ipList,false,true);
  if (ipToServices != null & !ipToServices.isEmpty()) {
    Set<Service> services=ipToServices.get(publicIp);
    if (services != null && !services.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    }
  }
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(null);
  _ipAddressDao.update(ipId,ip);
  try {
    boolean success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
  }
}",0.9998286203941732
105978,"@Override @DB public boolean disassociatePublicIpAddress(long addrId,long userId,Account caller){
  boolean success=true;
  if (!cleanupIpResources(addrId,userId,caller)) {
    success=false;
    s_logger.warn(""String_Node_Str"" + addrId);
  }
  IPAddressVO ip=markIpAsUnavailable(addrId);
  if (ip == null) {
    String msg=""String_Node_Str"" + addrId + ""String_Node_Str"";
    s_logger.error(msg);
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + addrId + ""String_Node_Str""+ ip.isSourceNat());
  }
  if (ip.getAssociatedWithNetworkId() != null) {
    Network network=_networksDao.findById(ip.getAssociatedWithNetworkId());
    try {
      if (!applyIpAssociations(network,true)) {
        s_logger.warn(""String_Node_Str"" + network);
        success=false;
      }
    }
 catch (    ResourceUnavailableException e) {
      throw new CloudRuntimeException(""String_Node_Str"",e);
    }
  }
 else {
    if (ip.getState() == IpAddress.State.Releasing) {
      _ipAddressDao.unassignIpAddress(ip.getId());
    }
  }
  if (success) {
    if (ip.isPortable()) {
      releasePortableIpAddress(addrId);
    }
    s_logger.debug(""String_Node_Str"" + addrId);
  }
  return success;
}","@Override @DB public boolean disassociatePublicIpAddress(long addrId,long userId,Account caller){
}",0.1506849315068493
105979,"@DB @Override public IPAddressVO associateIPToGuestNetwork(long ipId,long networkId,boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    Network network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
          _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  if (ipToAssoc.getAssociatedWithNetworkId() != null) {
    s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    return ipToAssoc;
  }
  Network network=_networksDao.findById(networkId);
  if (network != null) {
    _accountMgr.checkAccess(owner,AccessType.UseNetwork,false,network);
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zone.getNetworkType() == NetworkType.Advanced) {
    if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(),Service.SourceNat))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Shared+ ""String_Node_Str""+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str""+ Service.StaticNat.getName()+ ""String_Node_Str""+ Service.Lb.getName()+ ""String_Node_Str""+ Service.PortForwarding.getName()+ ""String_Node_Str"");
    }
  }
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  boolean isSourceNat=false;
  if (!sharedSourceNat) {
    if (getExistingSourceNatInNetwork(owner.getId(),networkId) == null) {
      if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {
        isSourceNat=true;
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ network);
  IPAddressVO ip=ipToAssoc;
  ip.setAssociatedWithNetworkId(networkId);
  ip.setSourceNat(isSourceNat);
  _ipAddressDao.update(ipId,ip);
  boolean success=false;
  try {
    success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
    if (!success && releaseOnFailure) {
      try {
        s_logger.warn(""String_Node_Str"" + ip);
        _ipAddressDao.markAsUnavailable(ip.getId());
        if (!applyIpAssociations(network,true)) {
          _ipAddressDao.unassignIpAddress(ip.getId());
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@DB @Override public IPAddressVO associateIPToGuestNetwork(long ipId,long networkId,boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=CallContext.current().getCallingAccount();
  Account owner=null;
  IPAddressVO ipToAssoc=_ipAddressDao.findById(ipId);
  if (ipToAssoc != null) {
    Network network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
    if (zone.getNetworkType() == NetworkType.Advanced) {
      if (network.getGuestType() == Network.GuestType.Shared) {
        if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
          _accountMgr.checkAccess(CallContext.current().getCallingAccount(),AccessType.UseNetwork,false,network);
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
    }
 else {
      _accountMgr.checkAccess(caller,null,true,ipToAssoc);
    }
    owner=_accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  if (ipToAssoc.getAssociatedWithNetworkId() != null) {
    s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ networkId);
    return ipToAssoc;
  }
  Network network=_networksDao.findById(networkId);
  if (network != null) {
    _accountMgr.checkAccess(owner,AccessType.UseNetwork,false,network);
  }
 else {
    s_logger.debug(""String_Node_Str"" + ipId);
    return null;
  }
  DataCenter zone=_entityMgr.findById(DataCenter.class,network.getDataCenterId());
  if (network.getTrafficType() != TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  if (network.getAccountId() != owner.getId()) {
    if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zone.getNetworkType() == NetworkType.Advanced) {
    if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(),Service.SourceNat))) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
    }
    if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Advanced + ""String_Node_Str""+ GuestType.Shared+ ""String_Node_Str""+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str""+ Service.StaticNat.getName()+ ""String_Node_Str""+ Service.Lb.getName()+ ""String_Node_Str""+ Service.PortForwarding.getName()+ ""String_Node_Str"");
    }
  }
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  boolean isSourceNat=false;
  if (!sharedSourceNat) {
    if (getExistingSourceNatInNetwork(owner.getId(),networkId) == null) {
      if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {
        isSourceNat=true;
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + ipToAssoc + ""String_Node_Str""+ network);
  IPAddressVO ip=_ipAddressDao.findById(ipId);
  ip.setAssociatedWithNetworkId(networkId);
  ip.setSourceNat(isSourceNat);
  _ipAddressDao.update(ipId,ip);
  boolean success=false;
  try {
    success=applyIpAssociations(network,false);
    if (success) {
      s_logger.debug(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
 else {
      s_logger.warn(""String_Node_Str"" + ip.getAddress().addr() + ""String_Node_Str""+ network);
    }
    return ip;
  }
  finally {
    if (!success && releaseOnFailure) {
      if (ip != null) {
        try {
          s_logger.warn(""String_Node_Str"" + ip);
          _ipAddressDao.markAsUnavailable(ip.getId());
          if (!applyIpAssociations(network,true)) {
            _ipAddressDao.unassignIpAddress(ip.getId());
          }
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"",e);
        }
      }
    }
  }
}",0.9903515581679052
105980,"@DB @Override public PublicIp assignDedicateIpAddress(Account owner,final Long guestNtwkId,final Long vpcId,final long dcId,final boolean isSourceNat) throws ConcurrentOperationException, InsufficientAddressCapacityException {
  if (owner == null) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  final long ownerId=owner.getId();
  PublicIp ip=null;
  try {
    ip=Transaction.execute(new TransactionCallbackWithException<PublicIp,InsufficientAddressCapacityException>(){
      @Override public PublicIp doInTransaction(      TransactionStatus status) throws InsufficientAddressCapacityException {
        Account owner=_accountDao.acquireInLockTable(ownerId);
        if (owner == null) {
          ConcurrentOperationException ex=new ConcurrentOperationException(""String_Node_Str"");
          throw ex;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ownerId + ""String_Node_Str"");
        }
        PublicIp ip=fetchNewPublicIp(dcId,null,null,owner,VlanType.VirtualNetwork,guestNtwkId,isSourceNat,false,null,false,vpcId);
        IPAddressVO publicIp=ip.ip();
        markPublicIpAsAllocated(publicIp);
        _ipAddressDao.update(publicIp.getId(),publicIp);
        return ip;
      }
    }
);
    return ip;
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + ownerId);
    }
    _accountDao.releaseFromLockTable(ownerId);
    if (ip == null) {
      s_logger.error(""String_Node_Str"" + ownerId);
    }
  }
}","@DB @Override public PublicIp assignDedicateIpAddress(Account owner,final Long guestNtwkId,final Long vpcId,final long dcId,final boolean isSourceNat) throws ConcurrentOperationException, InsufficientAddressCapacityException {
  final long ownerId=owner.getId();
  PublicIp ip=null;
  try {
    ip=Transaction.execute(new TransactionCallbackWithException<PublicIp,InsufficientAddressCapacityException>(){
      @Override public PublicIp doInTransaction(      TransactionStatus status) throws InsufficientAddressCapacityException {
        Account owner=_accountDao.acquireInLockTable(ownerId);
        if (owner == null) {
          ConcurrentOperationException ex=new ConcurrentOperationException(""String_Node_Str"");
          throw ex;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + ownerId + ""String_Node_Str"");
        }
        PublicIp ip=fetchNewPublicIp(dcId,null,null,owner,VlanType.VirtualNetwork,guestNtwkId,isSourceNat,false,null,false,vpcId);
        IPAddressVO publicIp=ip.ip();
        markPublicIpAsAllocated(publicIp);
        _ipAddressDao.update(publicIp.getId(),publicIp);
        return ip;
      }
    }
);
    return ip;
  }
  finally {
    if (owner != null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + ownerId);
      }
      _accountDao.releaseFromLockTable(ownerId);
    }
    if (ip == null) {
      s_logger.error(""String_Node_Str"" + ownerId);
    }
  }
}",0.9592245989304812
105981,"@Override public Map<Service,Set<Provider>> getNetworkOfferingServiceProvidersMap(long networkOfferingId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<NetworkOfferingServiceMapVO> map=_ntwkOfferingSrvcDao.listByNetworkOfferingId(networkOfferingId);
  for (  NetworkOfferingServiceMapVO instance : map) {
    Service service=Network.Service.getService(instance.getService());
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(service,providers);
  }
  return serviceProviderMap;
}","@Override public Map<Service,Set<Provider>> getNetworkOfferingServiceProvidersMap(long networkOfferingId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<NetworkOfferingServiceMapVO> map=_ntwkOfferingSrvcDao.listByNetworkOfferingId(networkOfferingId);
  for (  NetworkOfferingServiceMapVO instance : map) {
    String service=instance.getService();
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(Service.getService(service),providers);
  }
  return serviceProviderMap;
}",0.9226480836236932
105982,"@Override public void checkNetworkPermissions(Account owner,Network network){
  if (network == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (network.getGuestType() != Network.GuestType.Shared || (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Account)) {
    AccountVO networkOwner=_accountDao.findById(network.getAccountId());
    if (networkOwner == null)     throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
    if (owner.getType() != Account.ACCOUNT_TYPE_PROJECT && networkOwner.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      if (!_projectAccountDao.canAccessProjectAccount(owner.getAccountId(),network.getAccountId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else {
      List<NetworkVO> networkMap=_networksDao.listBy(owner.getId(),network.getId());
      if (networkMap == null || networkMap.isEmpty()) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    if (!isNetworkAvailableInDomain(network.getId(),owner.getDomainId())) {
      throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str""+ owner.getDomainId());
    }
  }
}","@Override public void checkNetworkPermissions(Account owner,Network network){
  if (network.getGuestType() != Network.GuestType.Shared || (network.getGuestType() == Network.GuestType.Shared && network.getAclType() == ACLType.Account)) {
    AccountVO networkOwner=_accountDao.findById(network.getAccountId());
    if (networkOwner == null)     throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
    if (owner.getType() != Account.ACCOUNT_TYPE_PROJECT && networkOwner.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      if (!_projectAccountDao.canAccessProjectAccount(owner.getAccountId(),network.getAccountId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
 else {
      List<NetworkVO> networkMap=_networksDao.listBy(owner.getId(),network.getId());
      if (networkMap == null || networkMap.isEmpty()) {
        throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    if (!isNetworkAvailableInDomain(network.getId(),owner.getDomainId())) {
      throw new PermissionDeniedException(""String_Node_Str"" + ((network != null) ? ((NetworkVO)network).getUuid() : ""String_Node_Str"") + ""String_Node_Str""+ owner.getDomainId());
    }
  }
}",0.9721949623814196
105983,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> dbParams=_configDao.getConfiguration(params);
  _cidr=dbParams.get(Config.ControlCidr.toString());
  if (_cidr == null) {
    _cidr=""String_Node_Str"";
  }
  _gateway=dbParams.get(Config.ControlGateway.toString());
  if (_gateway == null) {
    _gateway=NetUtils.getLinkLocalGateway();
  }
  s_logger.info(""String_Node_Str"" + _cidr + ""String_Node_Str""+ _gateway);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  super.configure(name,params);
  Map<String,String> dbParams=_configDao.getConfiguration(params);
  _cidr=dbParams.get(Config.ControlCidr);
  if (_cidr == null) {
    _cidr=""String_Node_Str"";
  }
  _gateway=dbParams.get(Config.ControlGateway);
  if (_gateway == null) {
    _gateway=NetUtils.getLinkLocalGateway();
  }
  s_logger.info(""String_Node_Str"" + _cidr + ""String_Node_Str""+ _gateway);
  return true;
}",0.9791271347248576
105984,"@Override public Map<Service,Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<VpcOfferingServiceMapVO> map=_vpcOffSvcMapDao.listByVpcOffId(vpcOffId);
  for (  VpcOfferingServiceMapVO instance : map) {
    Service service=Service.getService(instance.getService());
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(service,providers);
  }
  return serviceProviderMap;
}","@Override public Map<Service,Set<Provider>> getVpcOffSvcProvidersMap(long vpcOffId){
  Map<Service,Set<Provider>> serviceProviderMap=new HashMap<Service,Set<Provider>>();
  List<VpcOfferingServiceMapVO> map=_vpcOffSvcMapDao.listByVpcOffId(vpcOffId);
  for (  VpcOfferingServiceMapVO instance : map) {
    String service=instance.getService();
    Set<Provider> providers;
    providers=serviceProviderMap.get(service);
    if (providers == null) {
      providers=new HashSet<Provider>();
    }
    providers.add(Provider.getProvider(instance.getProvider()));
    serviceProviderMap.put(Service.getService(service),providers);
  }
  return serviceProviderMap;
}",0.9206349206349206
105985,"private VMTemplateVO updateTemplateOrIso(BaseUpdateTemplateOrIsoCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isDynamicallyScalable=cmd.isDynamicallyScalable();
  Boolean isRoutingTemplate=cmd.isRoutingType();
  Boolean bootable=cmd.isBootable();
  Integer sortKey=cmd.getSortKey();
  Account account=CallContext.current().getCallingAccount();
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null || template.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  if (Long.valueOf(1).equals(id)) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  _accountMgr.checkAccess(account,AccessType.ModifyEntry,true,template);
  if (cmd.isRoutingType() != null) {
    if (!_accountService.isRootAdmin(account.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
  }
  boolean updateNeeded=!(name == null && displayText == null && format == null && guestOSId == null && passwordEnabled == null && bootable == null && sortKey == null && isDynamicallyScalable == null && isRoutingTemplate == null);
  if (!updateNeeded) {
    return template;
  }
  template=_tmpltDao.createForUpdate(id);
  if (name != null) {
    template.setName(name);
  }
  if (displayText != null) {
    template.setDisplayText(displayText);
  }
  if (sortKey != null) {
    template.setSortKey(sortKey);
  }
  ImageFormat imageFormat=null;
  if (format != null) {
    try {
      imageFormat=ImageFormat.valueOf(format.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    template.setFormat(imageFormat);
  }
  if (guestOSId != null) {
    GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
    if (guestOS == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      template.setGuestOSId(guestOSId);
    }
  }
  if (passwordEnabled != null) {
    template.setEnablePassword(passwordEnabled);
  }
  if (bootable != null) {
    template.setBootable(bootable);
  }
  if (isDynamicallyScalable != null) {
    template.setDynamicallyScalable(isDynamicallyScalable);
  }
  if (isRoutingTemplate != null) {
    if (isRoutingTemplate) {
      template.setTemplateType(TemplateType.ROUTING);
    }
 else {
      template.setTemplateType(TemplateType.USER);
    }
  }
  _tmpltDao.update(id,template);
  return _tmpltDao.findById(id);
}","private VMTemplateVO updateTemplateOrIso(BaseUpdateTemplateOrIsoCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean isDynamicallyScalable=cmd.isDynamicallyScalable();
  Boolean isRoutingTemplate=cmd.isRoutingType();
  Boolean bootable=cmd.isBootable();
  Integer sortKey=cmd.getSortKey();
  Account account=CallContext.current().getCallingAccount();
  VMTemplateVO template=_tmpltDao.findById(id);
  if (template == null || template.getRemoved() != null) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  if (id == Long.valueOf(1)) {
    InvalidParameterValueException ex=new InvalidParameterValueException(""String_Node_Str"");
    ex.addProxyObject(String.valueOf(id),""String_Node_Str"");
    throw ex;
  }
  _accountMgr.checkAccess(account,AccessType.ModifyEntry,true,template);
  if (cmd.isRoutingType() != null) {
    if (!_accountService.isRootAdmin(account.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
  }
  boolean updateNeeded=!(name == null && displayText == null && format == null && guestOSId == null && passwordEnabled == null && bootable == null && sortKey == null && isDynamicallyScalable == null && isRoutingTemplate == null);
  if (!updateNeeded) {
    return template;
  }
  template=_tmpltDao.createForUpdate(id);
  if (name != null) {
    template.setName(name);
  }
  if (displayText != null) {
    template.setDisplayText(displayText);
  }
  if (sortKey != null) {
    template.setSortKey(sortKey);
  }
  ImageFormat imageFormat=null;
  if (format != null) {
    try {
      imageFormat=ImageFormat.valueOf(format.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
      throw new InvalidParameterValueException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    template.setFormat(imageFormat);
  }
  if (guestOSId != null) {
    GuestOSVO guestOS=_guestOSDao.findById(guestOSId);
    if (guestOS == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      template.setGuestOSId(guestOSId);
    }
  }
  if (passwordEnabled != null) {
    template.setEnablePassword(passwordEnabled);
  }
  if (bootable != null) {
    template.setBootable(bootable);
  }
  if (isDynamicallyScalable != null) {
    template.setDynamicallyScalable(isDynamicallyScalable);
  }
  if (isRoutingTemplate != null) {
    if (isRoutingTemplate) {
      template.setTemplateType(TemplateType.ROUTING);
    }
 else {
      template.setTemplateType(TemplateType.USER);
    }
  }
  _tmpltDao.update(id,template);
  return _tmpltDao.findById(id);
}",0.997064410291832
105986,"private String extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=(eventId == null ? 0 : eventId);
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId != null && _dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,true,template);
  List<DataStore> ssStores=_dataStoreMgr.getImageStoresByScope(new ZoneScope(zoneId));
  TemplateDataStoreVO tmpltStoreRef=null;
  ImageStoreEntity tmpltStore=null;
  if (ssStores != null) {
    for (    DataStore store : ssStores) {
      tmpltStoreRef=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      if (tmpltStoreRef != null) {
        if (tmpltStoreRef.getDownloadState() == com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltStore=(ImageStoreEntity)store;
          break;
        }
      }
    }
  }
  if (tmpltStore == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  _tmpltSvr.syncTemplateToRegionStore(templateId,tmpltStore);
  TemplateInfo templateObject=_tmplFactory.getTemplate(templateId,tmpltStore);
  return tmpltStore.createEntityExtractUrl(templateObject.getInstallPath(),template.getFormat(),templateObject);
}","private String extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId != null && _dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,true,template);
  List<DataStore> ssStores=_dataStoreMgr.getImageStoresByScope(new ZoneScope(zoneId));
  TemplateDataStoreVO tmpltStoreRef=null;
  ImageStoreEntity tmpltStore=null;
  if (ssStores != null) {
    for (    DataStore store : ssStores) {
      tmpltStoreRef=_tmplStoreDao.findByStoreTemplate(store.getId(),templateId);
      if (tmpltStoreRef != null) {
        if (tmpltStoreRef.getDownloadState() == com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltStore=(ImageStoreEntity)store;
          break;
        }
      }
    }
  }
  if (tmpltStore == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  _tmpltSvr.syncTemplateToRegionStore(templateId,tmpltStore);
  TemplateInfo templateObject=_tmplFactory.getTemplate(templateId,tmpltStore);
  return tmpltStore.createEntityExtractUrl(templateObject.getInstallPath(),template.getFormat(),templateObject);
}",0.99961962723469
105987,"@Inject public void setApiAccessCheckers(List<APIChecker> apiAccessCheckers){
  this._apiAccessCheckers=apiAccessCheckers;
}","@Inject public void setApiAccessCheckers(List<APIChecker> apiAccessCheckers){
  _apiAccessCheckers=apiAccessCheckers;
}",0.9794238683127572
105988,"@Override public boolean start(){
  Integer apiPort=null;
  SearchCriteria<ConfigurationVO> sc=_configDao.createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Config.IntegrationAPIPort.key());
  List<ConfigurationVO> values=_configDao.search(sc,null);
  if ((values != null) && (values.size() > 0)) {
    ConfigurationVO apiPortConfig=values.get(0);
    if (apiPortConfig.getValue() != null) {
      apiPort=Integer.parseInt(apiPortConfig.getValue());
    }
  }
  Map<String,String> configs=_configDao.getConfiguration();
  String strSnapshotLimit=configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());
  if (strSnapshotLimit != null) {
    Long snapshotLimit=NumbersUtil.parseLong(strSnapshotLimit,1L);
    if (snapshotLimit.longValue() <= 0) {
      s_logger.debug(""String_Node_Str"" + Config.ConcurrentSnapshotsThresholdPerHost.toString() + ""String_Node_Str"");
    }
 else {
      _dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);
    }
  }
  Set<Class<?>> cmdClasses=new HashSet<Class<?>>();
  for (  PluggableService pluggableService : _pluggableServices) {
    cmdClasses.addAll(pluggableService.getCommands());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pluggableService.getClass().getSimpleName());
    }
  }
  for (  Class<?> cmdClass : cmdClasses) {
    APICommand at=cmdClass.getAnnotation(APICommand.class);
    if (at == null) {
      throw new CloudRuntimeException(String.format(""String_Node_Str"",cmdClass.getName()));
    }
    String apiName=at.name();
    if (s_apiNameCmdClassMap.containsKey(apiName)) {
      s_logger.error(""String_Node_Str"" + cmdClass.getName() + ""String_Node_Str""+ apiName);
      continue;
    }
    s_apiNameCmdClassMap.put(apiName,cmdClass);
  }
  encodeApiResponse=Boolean.valueOf(_configDao.getValue(Config.EncodeApiResponse.key()));
  String jsonType=_configDao.getValue(Config.JavaScriptDefaultContentType.key());
  if (jsonType != null) {
    jsonContentType=jsonType;
  }
  if (apiPort != null) {
    ListenerThread listenerThread=new ListenerThread(this,apiPort);
    listenerThread.start();
  }
  return true;
}","@Override public boolean start(){
  Integer apiPort=null;
  SearchCriteria<ConfigurationVO> sc=_configDao.createSearchCriteria();
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,Config.IntegrationAPIPort.key());
  List<ConfigurationVO> values=_configDao.search(sc,null);
  if ((values != null) && (values.size() > 0)) {
    ConfigurationVO apiPortConfig=values.get(0);
    if (apiPortConfig.getValue() != null) {
      apiPort=Integer.parseInt(apiPortConfig.getValue());
    }
  }
  Map<String,String> configs=_configDao.getConfiguration();
  String strSnapshotLimit=configs.get(Config.ConcurrentSnapshotsThresholdPerHost.key());
  if (strSnapshotLimit != null) {
    Long snapshotLimit=NumbersUtil.parseLong(strSnapshotLimit,1L);
    if (snapshotLimit.longValue() <= 0) {
      s_logger.debug(""String_Node_Str"" + Config.ConcurrentSnapshotsThresholdPerHost.toString() + ""String_Node_Str"");
    }
 else {
      _dispatcher.setCreateSnapshotQueueSizeLimit(snapshotLimit);
    }
  }
  Set<Class<?>> cmdClasses=new HashSet<Class<?>>();
  for (  PluggableService pluggableService : _pluggableServices) {
    cmdClasses.addAll(pluggableService.getCommands());
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pluggableService.getClass().getSimpleName());
    }
  }
  for (  Class<?> cmdClass : cmdClasses) {
    APICommand at=cmdClass.getAnnotation(APICommand.class);
    if (at == null) {
      throw new CloudRuntimeException(String.format(""String_Node_Str"",cmdClass.getName()));
    }
    String apiName=at.name();
    if (s_apiNameCmdClassMap.containsKey(apiName)) {
      s_logger.error(""String_Node_Str"" + cmdClass.getName() + ""String_Node_Str""+ apiName);
      continue;
    }
    s_apiNameCmdClassMap.put(apiName,cmdClass);
  }
  setEncodeApiResponse(Boolean.valueOf(_configDao.getValue(Config.EncodeApiResponse.key())));
  String jsonType=_configDao.getValue(Config.JavaScriptDefaultContentType.key());
  if (jsonType != null) {
    jsonContentType=jsonType;
  }
  if (apiPort != null) {
    ListenerThread listenerThread=new ListenerThread(this,apiPort);
    listenerThread.start();
  }
  return true;
}",0.9981282171268132
105989,"@Inject public void setPluggableServices(List<PluggableService> pluggableServices){
  this._pluggableServices=pluggableServices;
}","@Inject public void setPluggableServices(List<PluggableService> pluggableServices){
  _pluggableServices=pluggableServices;
}",0.9803921568627452
105990,"@Override @SuppressWarnings(""String_Node_Str"") public String handleRequest(Map params,String responseType,StringBuffer auditTrailSb) throws ServerApiException {
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get(""String_Node_Str"");
    if (command == null) {
      s_logger.error(""String_Node_Str"");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace(""String_Node_Str"" + keyStr + ""String_Node_Str""+ ((value == null) ? ""String_Node_Str"" : value[0]));
        }
      }
      throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,""String_Node_Str"");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if (""String_Node_Str"".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        if (value[0] != null) {
          Pattern pattern=Pattern.compile(controlCharacters);
          Matcher matcher=pattern.matcher(value[0]);
          if (matcher.find()) {
            throw new ServerApiException(ApiErrorCode.PARAM_ERROR,""String_Node_Str"" + value[0] + ""String_Node_Str""+ key+ ""String_Node_Str"");
          }
        }
        paramMap.put(key,value[0]);
      }
      Class<?> cmdClass=getCmdClass(command[0]);
      if (cmdClass != null) {
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj=ComponentContext.inject(cmdObj);
        cmdObj.configure();
        cmdObj.setFullUrlParams(paramMap);
        cmdObj.setResponseType(responseType);
        cmdObj.setHttpMethod(paramMap.get(""String_Node_Str"").toString());
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        if (!command[0].equalsIgnoreCase(""String_Node_Str"") && !command[0].equalsIgnoreCase(""String_Node_Str"")) {
          String errorString=""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]);
          s_logger.warn(errorString);
          auditTrailSb.append(""String_Node_Str"" + errorString);
          throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,errorString);
        }
      }
    }
  }
 catch (  InvalidParameterValueException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage(),ex);
  }
catch (  IllegalArgumentException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage(),ex);
  }
catch (  PermissionDeniedException ex) {
    ArrayList<ExceptionProxyObject> idList=ex.getIdProxyList();
    if (idList != null) {
      StringBuffer buf=new StringBuffer();
      for (      ExceptionProxyObject obj : idList) {
        buf.append(obj.getDescription());
        buf.append(""String_Node_Str"");
        buf.append(obj.getUuid());
        buf.append(""String_Node_Str"");
      }
      s_logger.info(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""+ buf.toString()+ ""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"" + ex.getMessage());
    }
    throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,ex.getMessage(),ex);
  }
catch (  AccountLimitException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.ACCOUNT_RESOURCE_LIMIT_ERROR,ex.getMessage(),ex);
  }
catch (  InsufficientCapacityException ex) {
    s_logger.info(ex.getMessage());
    String errorMsg=ex.getMessage();
    if (CallContext.current().getCallingAccount().getType() != Account.ACCOUNT_TYPE_ADMIN) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,errorMsg,ex);
  }
catch (  ResourceAllocationException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR,ex.getMessage(),ex);
  }
catch (  ResourceUnavailableException ex) {
    s_logger.info(ex.getMessage());
    String errorMsg=ex.getMessage();
    if (CallContext.current().getCallingAccount().getType() != Account.ACCOUNT_TYPE_ADMIN) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,errorMsg,ex);
  }
catch (  ServerApiException ex) {
    s_logger.info(ex.getDescription());
    throw ex;
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]),ex);
    String errorMsg=ex.getMessage();
    if (CallContext.current().getCallingAccount().getType() != Account.ACCOUNT_TYPE_ADMIN) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg,ex);
  }
  return response;
}","@Override @SuppressWarnings(""String_Node_Str"") public String handleRequest(Map params,String responseType,StringBuffer auditTrailSb) throws ServerApiException {
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get(""String_Node_Str"");
    if (command == null) {
      s_logger.error(""String_Node_Str"");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace(""String_Node_Str"" + keyStr + ""String_Node_Str""+ ((value == null) ? ""String_Node_Str"" : value[0]));
        }
      }
      throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,""String_Node_Str"");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if (""String_Node_Str"".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        if (value[0] != null) {
          Pattern pattern=Pattern.compile(controlCharacters);
          Matcher matcher=pattern.matcher(value[0]);
          if (matcher.find()) {
            throw new ServerApiException(ApiErrorCode.PARAM_ERROR,""String_Node_Str"" + value[0] + ""String_Node_Str""+ key+ ""String_Node_Str"");
          }
        }
        paramMap.put(key,value[0]);
      }
      Class<?> cmdClass=getCmdClass(command[0]);
      if (cmdClass != null) {
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj=ComponentContext.inject(cmdObj);
        cmdObj.configure();
        cmdObj.setFullUrlParams(paramMap);
        cmdObj.setResponseType(responseType);
        cmdObj.setHttpMethod(paramMap.get(""String_Node_Str"").toString());
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        if (!command[0].equalsIgnoreCase(""String_Node_Str"") && !command[0].equalsIgnoreCase(""String_Node_Str"")) {
          String errorString=""String_Node_Str"" + command[0];
          s_logger.warn(errorString);
          auditTrailSb.append(""String_Node_Str"" + errorString);
          throw new ServerApiException(ApiErrorCode.UNSUPPORTED_ACTION_ERROR,errorString);
        }
      }
    }
  }
 catch (  InvalidParameterValueException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage(),ex);
  }
catch (  IllegalArgumentException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.PARAM_ERROR,ex.getMessage(),ex);
  }
catch (  PermissionDeniedException ex) {
    ArrayList<ExceptionProxyObject> idList=ex.getIdProxyList();
    if (idList != null) {
      StringBuffer buf=new StringBuffer();
      for (      ExceptionProxyObject obj : idList) {
        buf.append(obj.getDescription());
        buf.append(""String_Node_Str"");
        buf.append(obj.getUuid());
        buf.append(""String_Node_Str"");
      }
      s_logger.info(""String_Node_Str"" + ex.getMessage() + ""String_Node_Str""+ buf.toString()+ ""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"" + ex.getMessage());
    }
    throw new ServerApiException(ApiErrorCode.ACCOUNT_ERROR,ex.getMessage(),ex);
  }
catch (  AccountLimitException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.ACCOUNT_RESOURCE_LIMIT_ERROR,ex.getMessage(),ex);
  }
catch (  InsufficientCapacityException ex) {
    s_logger.info(ex.getMessage());
    String errorMsg=ex.getMessage();
    if (CallContext.current().getCallingAccount().getType() != Account.ACCOUNT_TYPE_ADMIN) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR,errorMsg,ex);
  }
catch (  ResourceAllocationException ex) {
    s_logger.info(ex.getMessage());
    throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR,ex.getMessage(),ex);
  }
catch (  ResourceUnavailableException ex) {
    s_logger.info(ex.getMessage());
    String errorMsg=ex.getMessage();
    if (CallContext.current().getCallingAccount().getType() != Account.ACCOUNT_TYPE_ADMIN) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR,errorMsg,ex);
  }
catch (  ServerApiException ex) {
    s_logger.info(ex.getDescription());
    throw ex;
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]),ex);
    String errorMsg=ex.getMessage();
    if (CallContext.current().getCallingAccount().getType() != Account.ACCOUNT_TYPE_ADMIN) {
      errorMsg=BaseCmd.USER_ERROR_MESSAGE;
    }
    throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,errorMsg,ex);
  }
  return response;
}",0.9957983193277312
105991,"private void writeResponse(HttpServletResponse resp,String response,int responseCode,String responseType){
  try {
    if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
      resp.setContentType(ApiServer.jsonContentType + ""String_Node_Str"");
    }
 else {
      resp.setContentType(""String_Node_Str"");
    }
    resp.setStatus(responseCode);
    resp.getWriter().print(response);
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + ioex);
    }
  }
catch (  Exception ex) {
    if (!(ex instanceof IllegalStateException)) {
      s_logger.error(""String_Node_Str"",ex);
    }
  }
}","private void writeResponse(HttpServletResponse resp,String response,int responseCode,String responseType){
  try {
    if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
      resp.setContentType(ApiServer.getJsonContentType() + ""String_Node_Str"");
    }
 else {
      resp.setContentType(""String_Node_Str"");
    }
    resp.setStatus(responseCode);
    resp.getWriter().print(response);
  }
 catch (  IOException ioex) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + ioex);
    }
  }
catch (  Exception ex) {
    if (!(ex instanceof IllegalStateException)) {
      s_logger.error(""String_Node_Str"",ex);
    }
  }
}",0.9946768060836502
105992,"private static String encodeString(String value){
  if (!ApiServer.encodeApiResponse) {
    return value;
  }
  try {
    return new URLEncoder().encode(value).replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + value,e);
  }
  return value;
}","private static String encodeString(String value){
  if (!ApiServer.isEncodeApiResponse()) {
    return value;
  }
  try {
    return new URLEncoder().encode(value).replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + value,e);
  }
  return value;
}",0.9902912621359224
105993,"public Argument getResArgByName(String name){
  for (  Argument a : this.getResponse()) {
    if (a.getName().equals(name)) {
      return a;
    }
  }
  return null;
}","public Argument getResArgByName(String name){
  for (  Argument a : getResponse()) {
    if (a.getName().equals(name)) {
      return a;
    }
  }
  return null;
}",0.9848942598187312
105994,"public Argument getReqArgByName(String name){
  for (  Argument a : this.getRequest()) {
    if (a.getName().equals(name)) {
      return a;
    }
  }
  return null;
}","public Argument getReqArgByName(String name){
  for (  Argument a : getRequest()) {
    if (a.getName().equals(name)) {
      return a;
    }
  }
  return null;
}",0.9848024316109424
105995,"private static String encodeParam(String value){
  if (!ApiServer.encodeApiResponse) {
    return value;
  }
  try {
    return new URLEncoder().encode(value).replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + value,e);
  }
  return value;
}","private static String encodeParam(String value){
  if (!ApiServer.isEncodeApiResponse()) {
    return value;
  }
  try {
    return new URLEncoder().encode(value).replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + value,e);
  }
  return value;
}",0.9902597402597404
105996,"@Override public SecurityGroupResponse createSecurityGroupResponseFromSecurityGroupRule(List<? extends SecurityRule> securityRules){
  SecurityGroupResponse response=new SecurityGroupResponse();
  Map<Long,Account> securiytGroupAccounts=new HashMap<Long,Account>();
  Map<Long,SecurityGroup> allowedSecurityGroups=new HashMap<Long,SecurityGroup>();
  Map<Long,Account> allowedSecuriytGroupAccounts=new HashMap<Long,Account>();
  if ((securityRules != null) && !securityRules.isEmpty()) {
    SecurityGroupJoinVO securityGroup=ApiDBUtils.findSecurityGroupViewById(securityRules.get(0).getSecurityGroupId()).get(0);
    response.setId(securityGroup.getUuid());
    response.setName(securityGroup.getName());
    response.setDescription(securityGroup.getDescription());
    Account account=securiytGroupAccounts.get(securityGroup.getAccountId());
    if (securityGroup.getAccountType() == Account.ACCOUNT_TYPE_PROJECT) {
      response.setProjectId(securityGroup.getProjectUuid());
      response.setProjectName(securityGroup.getProjectName());
    }
 else {
      response.setAccountName(securityGroup.getAccountName());
    }
    response.setDomainId(securityGroup.getDomainUuid());
    response.setDomainName(securityGroup.getDomainName());
    for (    SecurityRule securityRule : securityRules) {
      SecurityGroupRuleResponse securityGroupData=new SecurityGroupRuleResponse();
      securityGroupData.setRuleId(securityRule.getUuid());
      securityGroupData.setProtocol(securityRule.getProtocol());
      if (""String_Node_Str"".equalsIgnoreCase(securityRule.getProtocol())) {
        securityGroupData.setIcmpType(securityRule.getStartPort());
        securityGroupData.setIcmpCode(securityRule.getEndPort());
      }
 else {
        securityGroupData.setStartPort(securityRule.getStartPort());
        securityGroupData.setEndPort(securityRule.getEndPort());
      }
      Long allowedSecurityGroupId=securityRule.getAllowedNetworkId();
      if (allowedSecurityGroupId != null) {
        List<SecurityGroupJoinVO> sgs=ApiDBUtils.findSecurityGroupViewById(allowedSecurityGroupId);
        if (sgs != null && sgs.size() > 0) {
          SecurityGroupJoinVO sg=sgs.get(0);
          securityGroupData.setSecurityGroupName(sg.getName());
          securityGroupData.setAccountName(sg.getAccountName());
        }
      }
 else {
        securityGroupData.setCidr(securityRule.getAllowedSourceIpCidr());
      }
      if (securityRule.getRuleType() == SecurityRuleType.IngressRule) {
        securityGroupData.setObjectName(""String_Node_Str"");
        response.addSecurityGroupIngressRule(securityGroupData);
      }
 else {
        securityGroupData.setObjectName(""String_Node_Str"");
        response.addSecurityGroupEgressRule(securityGroupData);
      }
    }
    response.setObjectName(""String_Node_Str"");
  }
  return response;
}","@Override public SecurityGroupResponse createSecurityGroupResponseFromSecurityGroupRule(List<? extends SecurityRule> securityRules){
  SecurityGroupResponse response=new SecurityGroupResponse();
  Map<Long,Account> securiytGroupAccounts=new HashMap<Long,Account>();
  if ((securityRules != null) && !securityRules.isEmpty()) {
    SecurityGroupJoinVO securityGroup=ApiDBUtils.findSecurityGroupViewById(securityRules.get(0).getSecurityGroupId()).get(0);
    response.setId(securityGroup.getUuid());
    response.setName(securityGroup.getName());
    response.setDescription(securityGroup.getDescription());
    Account account=securiytGroupAccounts.get(securityGroup.getAccountId());
    if (securityGroup.getAccountType() == Account.ACCOUNT_TYPE_PROJECT) {
      response.setProjectId(securityGroup.getProjectUuid());
      response.setProjectName(securityGroup.getProjectName());
    }
 else {
      response.setAccountName(securityGroup.getAccountName());
    }
    response.setDomainId(securityGroup.getDomainUuid());
    response.setDomainName(securityGroup.getDomainName());
    for (    SecurityRule securityRule : securityRules) {
      SecurityGroupRuleResponse securityGroupData=new SecurityGroupRuleResponse();
      securityGroupData.setRuleId(securityRule.getUuid());
      securityGroupData.setProtocol(securityRule.getProtocol());
      if (""String_Node_Str"".equalsIgnoreCase(securityRule.getProtocol())) {
        securityGroupData.setIcmpType(securityRule.getStartPort());
        securityGroupData.setIcmpCode(securityRule.getEndPort());
      }
 else {
        securityGroupData.setStartPort(securityRule.getStartPort());
        securityGroupData.setEndPort(securityRule.getEndPort());
      }
      Long allowedSecurityGroupId=securityRule.getAllowedNetworkId();
      if (allowedSecurityGroupId != null) {
        List<SecurityGroupJoinVO> sgs=ApiDBUtils.findSecurityGroupViewById(allowedSecurityGroupId);
        if (sgs != null && sgs.size() > 0) {
          SecurityGroupJoinVO sg=sgs.get(0);
          securityGroupData.setSecurityGroupName(sg.getName());
          securityGroupData.setAccountName(sg.getAccountName());
        }
      }
 else {
        securityGroupData.setCidr(securityRule.getAllowedSourceIpCidr());
      }
      if (securityRule.getRuleType() == SecurityRuleType.IngressRule) {
        securityGroupData.setObjectName(""String_Node_Str"");
        response.addSecurityGroupIngressRule(securityGroupData);
      }
 else {
        securityGroupData.setObjectName(""String_Node_Str"");
        response.addSecurityGroupEgressRule(securityGroupData);
      }
    }
    response.setObjectName(""String_Node_Str"");
  }
  return response;
}",0.97079629965536
105997,"@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  String stateToSet=lb.getState().toString();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  ruleResponse.setState(stateToSet);
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Ip ip : lbInstances.keySet()) {
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    UserVm vm=lbInstances.get(ip);
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}","@Override public ApplicationLoadBalancerResponse createLoadBalancerContainerReponse(ApplicationLoadBalancerRule lb,Map<Ip,UserVm> lbInstances){
  ApplicationLoadBalancerResponse lbResponse=new ApplicationLoadBalancerResponse();
  lbResponse.setId(lb.getUuid());
  lbResponse.setName(lb.getName());
  lbResponse.setDescription(lb.getDescription());
  lbResponse.setAlgorithm(lb.getAlgorithm());
  Network nw=ApiDBUtils.findNetworkById(lb.getNetworkId());
  lbResponse.setNetworkId(nw.getUuid());
  populateOwner(lbResponse,lb);
  if (lb.getScheme() == Scheme.Internal) {
    lbResponse.setSourceIp(lb.getSourceIp().addr());
    Network network=ApiDBUtils.findNetworkById(lb.getNetworkId());
    lbResponse.setSourceIpNetworkId(network.getUuid());
  }
 else {
    IpAddress publicIp=ApiDBUtils.findIpAddressById(lb.getSourceIpAddressId());
    lbResponse.setSourceIp(publicIp.getAddress().addr());
    Network ntwk=ApiDBUtils.findNetworkById(publicIp.getNetworkId());
    lbResponse.setSourceIpNetworkId(ntwk.getUuid());
  }
  List<ApplicationLoadBalancerRuleResponse> ruleResponses=new ArrayList<ApplicationLoadBalancerRuleResponse>();
  ApplicationLoadBalancerRuleResponse ruleResponse=new ApplicationLoadBalancerRuleResponse();
  ruleResponse.setInstancePort(lb.getDefaultPortStart());
  ruleResponse.setSourcePort(lb.getSourcePortStart());
  FirewallRule.State stateToSet=lb.getState();
  if (stateToSet.equals(FirewallRule.State.Revoke)) {
    stateToSet=FirewallRule.State.Deleting;
  }
  ruleResponse.setState(stateToSet.toString());
  ruleResponse.setObjectName(""String_Node_Str"");
  ruleResponses.add(ruleResponse);
  lbResponse.setLbRules(ruleResponses);
  List<ApplicationLoadBalancerInstanceResponse> instanceResponses=new ArrayList<ApplicationLoadBalancerInstanceResponse>();
  for (  Ip ip : lbInstances.keySet()) {
    ApplicationLoadBalancerInstanceResponse instanceResponse=new ApplicationLoadBalancerInstanceResponse();
    instanceResponse.setIpAddress(ip.addr());
    UserVm vm=lbInstances.get(ip);
    instanceResponse.setId(vm.getUuid());
    instanceResponse.setName(vm.getInstanceName());
    instanceResponse.setObjectName(""String_Node_Str"");
    instanceResponses.add(instanceResponse);
  }
  lbResponse.setLbInstances(instanceResponses);
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.LoadBalancer,lb.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  lbResponse.setTags(tagResponses);
  lbResponse.setObjectName(""String_Node_Str"");
  return lbResponse;
}",0.9833209785025944
105998,"@Override public ResourceLimitResponse createResourceLimitResponse(ResourceLimit limit){
  ResourceLimitResponse resourceLimitResponse=new ResourceLimitResponse();
  if (limit.getResourceOwnerType() == ResourceOwnerType.Domain) {
    populateDomain(resourceLimitResponse,limit.getOwnerId());
  }
 else   if (limit.getResourceOwnerType() == ResourceOwnerType.Account) {
    Account accountTemp=ApiDBUtils.findAccountById(limit.getOwnerId());
    populateAccount(resourceLimitResponse,limit.getOwnerId());
    populateDomain(resourceLimitResponse,accountTemp.getDomainId());
  }
  resourceLimitResponse.setResourceType(Integer.valueOf(limit.getType().getOrdinal()).toString());
  if ((limit.getType() == ResourceType.primary_storage || limit.getType() == ResourceType.secondary_storage) && limit.getMax() >= 0) {
    resourceLimitResponse.setMax((long)Math.ceil(limit.getMax() / ResourceType.bytesToGiB));
  }
 else {
    resourceLimitResponse.setMax(limit.getMax());
  }
  resourceLimitResponse.setObjectName(""String_Node_Str"");
  return resourceLimitResponse;
}","@Override public ResourceLimitResponse createResourceLimitResponse(ResourceLimit limit){
  ResourceLimitResponse resourceLimitResponse=new ResourceLimitResponse();
  if (limit.getResourceOwnerType() == ResourceOwnerType.Domain) {
    populateDomain(resourceLimitResponse,limit.getOwnerId());
  }
 else   if (limit.getResourceOwnerType() == ResourceOwnerType.Account) {
    Account accountTemp=ApiDBUtils.findAccountById(limit.getOwnerId());
    populateAccount(resourceLimitResponse,limit.getOwnerId());
    populateDomain(resourceLimitResponse,accountTemp.getDomainId());
  }
  resourceLimitResponse.setResourceType(Integer.valueOf(limit.getType().getOrdinal()).toString());
  if ((limit.getType() == ResourceType.primary_storage || limit.getType() == ResourceType.secondary_storage) && limit.getMax() >= 0) {
    resourceLimitResponse.setMax((long)Math.ceil((double)limit.getMax() / ResourceType.bytesToGiB));
  }
 else {
    resourceLimitResponse.setMax(limit.getMax());
  }
  resourceLimitResponse.setObjectName(""String_Node_Str"");
  return resourceLimitResponse;
}",0.996244131455399
105999,"@Override public StaticRouteResponse createStaticRouteResponse(StaticRoute result){
  StaticRouteResponse response=new StaticRouteResponse();
  response.setId(result.getUuid());
  if (result.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(result.getVpcId());
    if (vpc != null) {
      response.setVpcId(vpc.getUuid());
    }
  }
  response.setCidr(result.getCidr());
  StaticRoute.State state=result.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  populateAccount(response,result.getAccountId());
  populateDomain(response,result.getDomainId());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.StaticRoute,result.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public StaticRouteResponse createStaticRouteResponse(StaticRoute result){
  StaticRouteResponse response=new StaticRouteResponse();
  response.setId(result.getUuid());
  if (result.getVpcId() != null) {
    Vpc vpc=ApiDBUtils.findVpcById(result.getVpcId());
    if (vpc != null) {
      response.setVpcId(vpc.getUuid());
    }
  }
  response.setCidr(result.getCidr());
  StaticRoute.State state=result.getState();
  if (state.equals(StaticRoute.State.Revoke)) {
    state=StaticRoute.State.Deleting;
  }
  response.setState(state.toString());
  populateAccount(response,result.getAccountId());
  populateDomain(response,result.getDomainId());
  List<? extends ResourceTag> tags=ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.StaticRoute,result.getId());
  List<ResourceTagResponse> tagResponses=new ArrayList<ResourceTagResponse>();
  for (  ResourceTag tag : tags) {
    ResourceTagResponse tagResponse=createResourceTagResponse(tag,true);
    tagResponses.add(tagResponse);
  }
  response.setTags(tagResponses);
  response.setObjectName(""String_Node_Str"");
  return response;
}",0.9040972534894192
106000,"public String getDetail(String name){
}","public String getDetail(String name){
  if (details == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return details.get(name);
}",0.4083769633507853
